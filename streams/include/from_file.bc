/* from_file
 *
 * streams values to a static network port from a file.
 * makes use of the data_transmitter generic device.
 *
 * Michael Gordon
 */

if (FindFunctionInSymbolHash(gSymbolTable, "dev_data_transmitter_init",3) == NULL)
  include("<dev/data_transmitter.bc>");

/**
 * For binary == 0, type == 0 for int, and type == 1 for float 
 * SpaceTime does not wait for trigger. SpaceDynamic waits for trigger.
 * ourY, ourX, destY, destX only used for GDN header construction.
 * 
 * 
 */
fn dev_from_file(filename, port, static_network, 
		 binary, type, wait_for_trigger, 
		 ourY, ourX, destY, destX) 
{
  local send_device_descriptor = hms_new();
  //the network to use, 0 = static, 2 = gdn
  local network = 0;
  local cyclesPerWord = 1;

  //set the cycles per word based on the presence of this global variable
  if (LookupSymbolHash(gSymbolTable, "gFileDevCyclesPerWord") != NULL) {
    local cpw = 0;
    cpw = LookupSymbolHash(gSymbolTable, "gFileDevCyclesPerWord");
    cyclesPerWord = **(cpw);
  }

  printf(" ** File Reader on port %d with %d cycles per word.\n", 
	 port, cyclesPerWord);

  //open the file
  send_device_descriptor.fileName = filename;
  send_device_descriptor.theFile = fopen(send_device_descriptor.fileName,
					 "r");
  send_device_descriptor.format = "";
  send_device_descriptor.ioPort = port;
  send_device_descriptor.cyclesPerWord = cyclesPerWord;

  //if static_network is false, use the GDN
  if (static_network == 0)
    network = 2;


  //set the format string only if using ascii
  if (binary == 0) {
  }

  verify(send_device_descriptor.theFile != NULL,
         "### Failed from open output file\n");

  //ascii and static network
  if (binary == 0) {
    if (type == 0) //int 
      send_device_descriptor.format = "%d\n";
    else if (type == 1) //float
      send_device_descriptor.format = "%f\n";
    else {
      printf("Invalid format arg passed to dev_from_file\n");
      exit(-1);
    }
  }

  //create the calc function for the device 
  if (static_network == 1) {
    send_device_descriptor.calc = 
      & fn(this) 
      {
	local theFile = this.theFile;
	local cyclesPerWord = this.cyclesPerWord;
	local format = this.format;
	local ioPort = this.ioPort;
	local fileName = this.fileName;
	local value, i;
	local r;
	
        //send the word, depending on binary or ascii
	if (binary == 0) {
	  while(fscanf(theFile, format, &value) == 1) {
	    limit_bandwidth(cyclesPerWord);
	    this.send(value);
	  }
	} else {
	   while(fread(&value, 4, 1, theFile) != 0) {
	     limit_bandwidth(cyclesPerWord);
	     this.send(value);
	  }
	}
	printf("** Input exhausted from %s (port %d)\n", fileName, ioPort);
	while (1) {
	  //we are done
	  //this should exit!!!!!
	  gInterrupted = 1;
	  //this will exit the thread
	  exit_now(0);
	}
      };
  }
  else  {  //gdn
     send_device_descriptor.calc = 
       & fn(this) 
       {
	 local theFile = this.theFile;
	 local ioPort = this.ioPort;
	 local fileName = this.fileName;
	 local format = this.format;
	 local value, i;
	 local cyclesPerWord = this.cyclesPerWord;

	 local PKT_SIZE = 31;
	 local pkt_remaining = 0;
	 while (1) {
	   //compose new pkt header if we cannot send anymore data in this 
	   //pkt
	   if (pkt_remaining == 0) {
	     local packet_size, header, savepos, end, file_remaining;
	     
	     //save the current file pos
	     savepos = ftell(theFile);
	     //move to the end of the file
	     fseek(theFile, 0, 2);
	     //get the bytes from the beginning for the end
	     end = ftell(theFile);
	     //find the difference int bytes and convert to words
	     file_remaining = (end - savepos) / 4;
	     //restore the file pointer to the previous position
	     fseek(theFile, savepos, 0);
	     //choose either pkt_size or the number of works remaining
	     packet_size = choose(file_remaining > PKT_SIZE, PKT_SIZE, file_remaining);
	     //reset pkt_remaining!
	     pkt_remaining = packet_size;
	     //construct and send the header
	     header = ConstructDynHdr(0, packet_size, 0, ourY, ourX, 
				      destY, destX);
	     limit_bandwidth(cyclesPerWord);
	     this.send(header);
	   }
	   if (binary == 1) {
	     if (fread(&value, 4, 1, theFile) != 0) {
	       limit_bandwidth(cyclesPerWord);
	       this.send(value);
	       pkt_remaining -= 1;
	     }
	     else {
	       //we have reached the end of the input
	       break;
	     }
	   } else {  //ascii
	     if (fscanf(theFile, format, &value) == 1) {
	       limit_bandwidth(cyclesPerWord);
	       this.send(value);
	       pkt_remaining -= 1;
	     }
	     else {
	       //we have reached the end of the input
	       break;
	     }
	   }
 	 }
	 
	 printf("** Input exhausted from %s (port %d)\n", fileName, ioPort);
	 while (1) {
	   //we are done
	   //this should exit!!!!!
	   gInterrupted = 1;
	   //this will exit the thread
	   exit_now(0);
	 }
       };
  }
  
  return dev_data_transmitter_init("from_file",
				   port,
				   wait_for_trigger,
				   send_device_descriptor, 
				   network);
}

//send the word, accounting for bandwidth
fn limit_bandwidth(cyclesPerWord) {
  local i = 0;
  for (i = 0; i < (cyclesPerWord - 1); i++) {
    yield;
  }
  return;
}
