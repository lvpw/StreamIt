/* from_file_raw
 *
 * streams values to a static network port from a file.
 * makes use of the data_transmitter generic device.
 *
 * Michael Gordon
 */

if (FindFunctionInSymbolHash(gSymbolTable, "dev_data_transmitter_init",3) == NULL)
  include("<dev/data_transmitter.bc>");

fn dev_from_file_raw(filename, port) 
{
  local send_device_descriptor = hms_new();

  //open the file
  send_device_descriptor.fileName = filename;
  send_device_descriptor.theFile = fopen(send_device_descriptor.fileName,
					 "r");
  send_device_descriptor.ioPort = port;

  verify(send_device_descriptor.theFile != NULL,
         "### Failed from open output file\n");

  send_device_descriptor.calc = 
    & fn(this) 
  {
    local theFile = this.theFile;
    local ioPort = this.ioPort;
    local fileName = this.fileName;
    local value, i;
    
    while(fread(&value, 4, 1, theFile) != 0) {
      this.send(value);
    }

    printf("** Input exhausted from %s (port %d)\n", fileName, ioPort);
    while (1) {
      //we are done, do nothing
      yield;
    }
  };

  return dev_data_transmitter_init("from_file_raw",
				   port,
				   1, //wait for trigger
				   send_device_descriptor);
}
