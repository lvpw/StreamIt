//set to 1 if you want to generate a blood graph or 0 if not
global gGenerate_BloodGraph = 1;

//how often (in cycles) would we like to update the bloodgraph
global bg_update_cycles = 10;

//Number gathering bc code
//the blood graph variables
global gPPMFILE;
global gRedP;
global gGreenP;
global gBlueP;
global gBloodCycles;
global gTraceWidth = 7 + (64 / gNumProc);
global bg_current_cycle = 0;

//this is set to 1 as soon as we register the deadlock 
//detection event, it could also be used to tell if we are
//done booting, when == 1 we are done booting.
global gRegDLDet = 0;

global gSteadyState = 0;
//record the total number of prints for each steady 
//state, not just for the sink we are interested in
global gSteadyStatePrints = 0;
global lastSteadyStartCycle = 0;
//the numbers of prints for the current steady state
//for the sink we are monitoring
global currentPrints = 0;
global steadyStateExecutions = 0;
global outputFile;
global currentSkipped = 0;
global gWorkCount = 0;
global gWorkCountTotal = 0;
global gFpuCount = 0;
global gMemCount = 0;
global gBrCount = 0;
global gAdminCount = 0;
global gCacheMissCount= 0;
global gAluCount = 0;

global gCacheMissCountTotal = 0;
global gFpuCountTotal = 0;
global gMemCountTotal = 0;
global gBrCountTotal = 0;
global gAdminCountTotal = 0;
global gAluCountTotal = 0;
global totalCycles = 0;
global gNumberDone = 0;
global gMaxCyclesPerSteady = 0;
global gMinCyclesPerSteady = -1;
global gLastFiveCycles = 0;

global gDEADLOCK_COUNT = 100000;
global gLastInsCycle = 0;

//this array stores the pc for each processor if they are in a cache miss stall
//used so we do not count cache misses multiple times
global current_cache_miss_pc;
//used to get the number of instructions fired per tile per steady state
//or blood graph sampling period
global ins_fired_per_tile;

fn gather_numbers_calc(procNum, rs, imm, result_ptr)
{
  local sender_x;
  local sender_y;
  local time_hi, time_lo;
  local proc = Machine_GetProc(machine, procNum);
  //check if this magic instruction is for us...
  if (!((rs == 0) && (imm == 2)))
    return 0;


  //get the cycle
  Proc_GetCycleCounter(proc, &time_hi, &time_lo);

  printf("Output at cycle: %d\n", time_lo);

  //calculate the x, y coordinates...
  sender_y = procNum / gXSize;
  sender_x = procNum - (sender_y * gXSize);

  //record the total number of steady state prints the 
  //current cycle
  if (gSteadyState == 1) {
    gSteadyStatePrints++;
  }
  
//don't go in here if we are done gathering steady state numbers...
  if (gNumberDone != 1)  {
    currentPrints++;
    if (currentPrints == printsPerCycle) {
      //hit the end of a "steady"
      //reset the number of prints we have seen in this
      //steady state
      currentPrints = 0;
      steadyStateExecutions ++;
      
      //quit after quitAfter executions
      if (steadyStateExecutions == quitAfter + 2) {
	printf("Generating results.out\n");
	
	print_final_stats();
	if (gGenerate_BloodGraph) {
	  setup_bloodgraph("bloodgraph.ppm", gMaxCyclesPerSteady);
	}
	else {
	  //don't exit here unless you don't want a blood graph
	  //this should exit!!!!!
	  gInterrupted = 1;
	  //this will exit the thread
	  exit_now(0);
	}
      }
      else if (steadyStateExecutions > 1) {
	local dif = time_lo - lastSteadyStartCycle; 
	      
	//from now on, we are in the steady state
	gSteadyState = 1;
	//write the stats for this steady state
	steady_state_boundary(dif);
      }
      reset_steady_counts(time_lo);
    }
  }
  //we handled this magic instruction
  return 1;
}

//reset any counters that count over a steady state
fn reset_steady_counts(time_lo) {
  local i;

  //set the last steady state time
  lastSteadyStartCycle = time_lo;
  //reset the flops count and workCount
  gFpuCount = 0;
  gMemCount = 0;
  gBrCount = 0;
  gAdminCount = 0;
  gAluCount = 0;
  gWorkCount = 0;
  gCacheMissCount = 0;
  //reset the ins fired per tile per steady
  for (i = 0; i < gNumProc; i++) {
    ins_fired_per_tile[i] = 0;
  }
}

//do everything necessary when we finish a steady-state (after the 1st)
//diff is the difference from the last steady-state
fn steady_state_boundary(dif) {
  local i;
  if (steadyStateExecutions > quitAfter - 4) {
    gLastFiveCycles += dif;
  }
  
  if (dif > gMaxCyclesPerSteady)
    gMaxCyclesPerSteady = dif;
  
  if (dif < gMinCyclesPerSteady || gMinCyclesPerSteady < 0)
    gMinCyclesPerSteady = dif;
  
  totalCycles += dif;
  if (totalCycles < 0) {
    printf("\n** Total Cycles Overflow **\n\n");
  }
  gWorkCountTotal += gWorkCount;
  if (gWorkCountTotal < 0) {
    printf("\n** Total Work Count Overflow **\n\n");
  }
  gFpuCountTotal += gFpuCount;
  gMemCountTotal += gMemCount;
  gBrCountTotal += gBrCount;
  gAdminCountTotal += gAdminCount;
  gAluCountTotal += gAluCount;
  gCacheMissCountTotal += gCacheMissCount;
  
  printf("Cycles: %d,  MFLOPS: %d, Cache Misses: %d, Outputs: %d\n", 
	 dif, (gMHz_streamit*gFpuCount)/dif, gCacheMissCount, printsPerCycle);
  fprintf(outputFile, "%d %d %d %d ", dif, (gMHz_streamit*gFpuCount)/dif, gCacheMissCount, gWorkCount);
  for (i = 0; i < gNumProc; i++) {
    fprintf(outputFile, "%d ", ins_fired_per_tile[i]);
  }
  fprintf(outputFile, "\n");
}

fn print_final_stats() {
  //we are done number gathering 
  gNumberDone = 1; 
  fprintf(outputFile, "\nSummmary:\n"); 
  fprintf(outputFile, "Steady State Executions: %d\n", quitAfter); 
  fprintf(outputFile, "Total Cycles: %d\n", totalCycles); 
  fprintf(outputFile, "Total Steady State Outputs: %d\n", gSteadyStatePrints); 
  fprintf(outputFile, "Avg Cycles per Steady-State: %d\n", totalCycles/quitAfter); 
  fprintf(outputFile, "Max Cycles per Steady-State: %d\n", gMaxCyclesPerSteady); 
  fprintf(outputFile, "Min Cycles per Steady-State: %d\n", gMinCyclesPerSteady); 
  fprintf(outputFile, "Avg Cycles for Last 5 Steady-States: %d\n", gLastFiveCycles/5); 
  fprintf(outputFile, "Thruput per 10^5: %d\n",  
	  (100000) / (totalCycles/gSteadyStatePrints)); 
  fprintf(outputFile, "Total Instructions issued: %d\n\n",  
	  (gWorkCountTotal)); 
  // The following should no longer be necessary 
  // - ((gNumProc - gStreamItTilesUsed) * totalCycles))); 
  
  //we need to account for the unused tiles, should show up as jump instructions 
  fprintf(outputFile, "Instruction Mix:\n"); 
  fprintf(outputFile, "FPU: %d\n", gFpuCountTotal); 
  fprintf(outputFile, "MEM: %d\n", gMemCountTotal); 
  fprintf(outputFile, "BRANCH: %d\n", gBrCountTotal);  
  // the following should no longer be necessary 
  //   ((gNumProc - gStreamItTilesUsed) * totalCycles)); 
  fprintf(outputFile, "ADMIN: %d\n", gAdminCountTotal); 
  fprintf(outputFile, "ALU: %d\n\n", gAluCountTotal); 
  
  fprintf(outputFile, "Cache Misses: %d\n\n", gCacheMissCountTotal); 
  
  //printf("gWorkCountTotal: %d\n", gWorkCountTotal); 
  //printf("((gNumProc - gStreamItTilesUsed) * totalCycles): %d\n",  
  //	     ((gNumProc - gStreamItTilesUsed) * totalCycles)); 
  
  fprintf(outputFile, "workCount* = %d / %d\n",  
	  gWorkCountTotal, 
	  //- ((gNumProc - gStreamItTilesUsed) * totalCycles)), 
	  gStreamItTilesUsed*totalCycles); 
  fprintf(outputFile, "Avg MFLOPS: %d\n", (gMHz_streamit*gFpuCountTotal)/totalCycles);	    
  fprintf(outputFile, "* Note: the numerator is the total non-blocked cycles\n"); 
  fprintf(outputFile, "  for *assigned* tiles in the configuration.\n"); 
  fprintf(outputFile, "  The denominator is the total number of cycles\n"); 
  fprintf(outputFile, "  for all the assigned tiles in the streamit configuration.\n"); 
  
  //print the numbers in a nicer format for automatic 
  //extracting 
  fprintf(outputFile, 
	  "tiles in config;tiles assigned;avg cycles/steady;max cycles/steady;min cycles/steady;avg cyc/ss last 5 ss;"); 
  fprintf(outputFile,  
	  "thruput;MFLOPS;"); 
  fprintf(outputFile,  
	  "instr issued;fpu;mem;branch;admin;alu;max instr issued;\n"); 
  fprintf(outputFile, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\n", 
	  gStreamItTiles, gStreamItTilesUsed, totalCycles/quitAfter, 
	  gMaxCyclesPerSteady, gMinCyclesPerSteady, 
	  (gLastFiveCycles/5),  
	  ((100000) / (totalCycles/gSteadyStatePrints)), 
	  (gMHz_streamit*gFpuCountTotal)/totalCycles, 
	  gWorkCountTotal, // - ((gNumProc - gStreamItTilesUsed) * totalCycles)), 
	  gFpuCountTotal, gMemCountTotal,  
	  gBrCountTotal, //- ((gNumProc - gStreamItTilesUsed) * totalCycles), 
	  gAdminCountTotal, gAluCountTotal,  
	  gStreamItTilesUsed*totalCycles);   
}

fn gather_numbers_init()
{
  local i;

  //register the magic instruction handler the records the end of booting
  //and installs the deadlock detection event
  listi_add(gMagicInstrHMS.theList, & fn (procNum, rs, imm, result_ptr)
  {
    return reg_deadlock_detection(procNum, rs, imm, result_ptr);
  });
  
  //register the magic instruction for the output instruction
  listi_add(gMagicInstrHMS.theList, & fn (procNum, rs, imm, result_ptr)
  {
    return gather_numbers_calc(procNum, rs, imm, result_ptr);
  });
  
  current_cache_miss_pc = malloc(4*gNumProc);
  ins_fired_per_tile = malloc(4*gNumProc);
  //init the cache miss pc's, no one is experiencing a cache miss
  for (i = 0; i < gNumProc; i++)
  {
    ins_fired_per_tile[i] = 0;
    current_cache_miss_pc[i] = -1;
  }

  //open the file to dump the data to
  outputFile = fopen("results.out", "w");
 
  //print some shit
  fprintf(outputFile, "Performance Results\n\n");
  fprintf(outputFile, "Tiles in configuration: %d\n", gStreamItTiles);
  fprintf(outputFile, "Tiles assigned (to filters or joiners): %d\n", gStreamItTilesUsed);
  fprintf(outputFile, "Final unroll factor used: %d\n", gStreamItUnrollFactor);
  fprintf(outputFile, "With %d items outputted per steady state.\n\n", printsPerCycle);
  fprintf(outputFile, "cycles MFLOPS cache_misses tot_ins_fired ins_fired(tile 0...%d)\n", (gNumProc - 1));
  fprintf(outputFile, "--------------------------\n");

  //register the workcount event
  EventManager_RegisterHandler("issued_instruction", "__event_instr_count");
  //register the cache miss counter
  EventManager_RegisterHandler("clock", "__event_clock_cache_miss");

  return 1;
}

fn close_bloodgraph() {
  free(gRedP); free(gGreenP); free(gBlueP);

  close_ppm(gPPMFILE);
  //this should exit!!!!!
  gInterrupted = 1;
  //this will exit the thread
  exit_now(0);
}

fn update_bloodgraph(hms) {
  local j;
  local value;
  //stop updating the blood graph
  if (gBloodCycles <= 0) {
    close_bloodgraph();
  }
  //decrement the steady state cycle counter that controls the total time 
  //of the blood graph
  gBloodCycles--;

  
  //check if we should update the bloodgraph
  if (gBloodCycles % bg_update_cycles != 0) {
    return 0;
  }

  for (j = 0; j < gNumProc; ++j)
    {
      local k;
      local popcount;
      local delta;
      local curPos = 0;
      local status = Proc_GetStallReason(Machine_GetProc(machine,j));
      popcount = ((status & 1)
		  + ((status >> 1) & 1)
		  + ((status >> 2) & 1)
		  + ((status >> 3) & 1)
		  + ((status >> 4) & 1)
		  + ((status >> 5) & 1)
		  + ((status >> 6) & 1));
      
      delta = (popcount << 16)/gTraceWidth;
      
      for (k = 0; k < gTraceWidth-1; k++)
      {
	value = get_proc_state_color(j, status,gRedP,gGreenP,gBlueP,curPos>>16);
	write_ppm(gPPMFILE, *gRedP, *gGreenP, *gBlueP);
	curPos += delta;
      }
      write_ppm(gPPMFILE,0,0,0);
    }
}


fn setup_bloodgraph(filename, cycles) {
  printf("Generating bloodgraph for %d cycles (max of steady-state), sampling every %d ...\n", 
	 cycles, bg_update_cycles);
  gPPMFILE = open_ppm(filename, cycles / bg_update_cycles, gNumProc*gTraceWidth);
  if (gPPMFILE == NULL)
  {
    printf("Error opening %s\n",filename);
    return 0;
  }
  gRedP = malloc(4);
  gGreenP = malloc(4);
  gBlueP = malloc(4);

  bg_current_cycle = 0;
  gBloodCycles = cycles;
  EventManager_RegisterHandler("clock", "update_bloodgraph"); 
}

fn __check_deadlock(hms) {
  local time_hi, time_lo;
  local proc = Machine_GetProc(machine, 0);
  //get the cycle
  Proc_GetCycleCounter(proc, &time_hi, &time_lo);

  if (time_lo > gLastInsCycle + gDEADLOCK_COUNT) {
    printf("\n\n ***** DEADLOCK! ***** \n\n");
    fprintf(outputFile, "\n\n ***** DEADLOCK! ***** \n\n");
    //this should exit!!!!!
    gInterrupted = 1;
    //this will exit the thread
    exit_now(0);
  }
}

//this event is called every clock cycle
//it counts the number of cache miss cycles 
fn __event_clock_cache_miss(hms) {
  local i;

  for (i = 0; i < gNumProc; i++) {
    local proc = Machine_GetProc(machine,i);
    local status = Proc_GetStallReason(proc);
    
    if (status & 64) { //a cache stall
      local pc = Proc_GetPCInStage(proc, 5);  //get the pc 
      //if we have not counted this pc before as a cache miss then count it
      if (pc != current_cache_miss_pc[i]) {
	gCacheMissCount++;
	//set the last pc of this proc to remember that we counted this
	current_cache_miss_pc[i] = pc;
      }
    }
    else //we are not experiencing a cache miss on this processor
      current_cache_miss_pc[i] = -1;
  }
}

fn __event_instr_count(hms)
{
  local instrDynamic = hms.instr_dynamic;
  local instrWord = InstrDynamic_GetInstrWord(instrDynamic);
  local tileNumber = Proc_GetTileNumber(hms.theProc);
  local time_hi, time_lo;
  
  //get the cycle
  Proc_GetCycleCounter(hms.theProc, &time_hi, &time_lo);
  
  //the definition of mapped_tile(int) is in 
  // the fileio.bc generated by the compiler
  //make sure this tile is mapped before we count it as work
  if (mapped_tile(tileNumber) == 0) {
    return;
  }

  //reset the last useful cycle
  gLastInsCycle = time_lo;
  
  AtomicIncrement(&gWorkCount);
  
  ins_fired_per_tile[tileNumber]++;

  if (InstrWord_IsFPU(instrWord))
  {
    AtomicIncrement(&gFpuCount);
  }

  else if (InstrWord_IsCacheMissOp(instrWord))
  {
    AtomicIncrement(&gMemCount);
  }

  else if (InstrWord_CanMispredict(instrWord) ||
	   InstrWord_IsDirectJump(instrWord))
  {
    AtomicIncrement(&gBrCount);
  }

  else if (InstrWord_IsAdmin(instrWord))
  {
    AtomicIncrement(&gAdminCount);
  }

  else
  {
    AtomicIncrement(&gAluCount);
  }  
}

//this function is a magic instruction handler that is called to 
//register the deadlock detection event.  One of the filters
//has the magc as its first ins in begin()
fn reg_deadlock_detection(procNum, rs, imm, result_ptr) {
  //check if this magic instruction is for us...
  if (!((rs == 0) && (imm == 5)))
    return 0;
  
  if (gRegDLDet == 1) {
    printf("Error: magc that denotes end of booting executed twice.");
  }

  //printf("Done booting, register deadlock detection event...\n");
  
  //register the deadlock detection event
  EventManager_RegisterHandler("clock", "__check_deadlock");
  gRegDLDet = 1;

  //we handled this magic instruction
  return 1;
}
