/* output.bc - a modified version of the print service
 *
 * This file describes the print service device
 * 
 * The print service device accepts requests from
 * the tiles telling it to print various data.  It
 * serves as a (very limited) replacement for being
 * able to send data to stdout.
 *
 * This device waits for a message on the memory
 * dynamic network of the format:
 * first word is the header (a word with the following data:)
 *      bits    field  
 *
 *      28:24   length
 *      23:20   type           (should be 0xE for the print service)
 *      19:15   sender_y_pos
 *      14:10   sender_x_pos
 *
 * Second and third words are the time tag (hi and lo bits respectively)
 * fourth word is the service request:
 *      0xfff0: hex integer
 *      0xfff1: signed decimal integer
 *      0xffff: float
 *      0xfffc: char
 *      0xfabc: string
 * An unknown request defaults to hex integer.
 *
 * For everything but strings, the fifth and following words until the end of 
 * the message will all be printed using the current service request.
 *
 * Strings will have the standard header, but the fifth word of the 
 * first message for a given string will contain the string's size in
 * bytes (including terminating null).  Subsequent messages, which
 * will be necessary if the string is too long for a single message,
 * will not include the size.
 *
 * The address assignments to the particular ports are dependent on
 * the size of the raw machine that you are running on.  In all cases
 * addresses starting with 0x00 will go to the east of the north-east
 * corner, addresses starting with 0xff will go to the south of the
 * south-east corner (port gXSize+gYSize).
 *
 */

/*

Debugging Tips: 



prompt> include("<dev/output.bc>");       // loads the file
prompt> dev_output_init(0);               // creates the dynamic device
prompt> SimListDevices() ;                      // list the installed devices

  [ DEVICE NAME        RESET ROUTINE          CALC ROUTINE           PARAM    ]

1 [ Dynamic Echo       dev_output_reset dev_output_calc  000658a0 ]
0 [ Serial Rom         dev_serial_rom_reset   dev_serial_rom_calc    00065670 ]

prompt> hms_print(0x65670);                // list the contents of the map you created
ioPort                 00000003
wordLength             00000143
fileName               effff927
data                   0005c910

prompt> printf("%s\n", 0x65670.fileName);  // print out the filename of the serial rom
dynamic_test.raw

prompt> hms_print(0x658a0);
ioPort                 00000000



*/


//*****************************************************************
// dev_output_init()
//
// initializes the print service
//


global gOutputs = 1;

fn dev_output_init(fileName, ioPort)
{
  // create hash_map
  local printServiceStruct = hms_new();
  local result;

  // package up a descriptor for the reset and calc routines
  // this takes advantage of the fact that bug has semantic
  // sugar for string->UInt32 hashmaps

  printServiceStruct.ioPort = ioPort;
  printServiceStruct.fileName = fileName;
  printServiceStruct.theFile = fopen(fileName, "a");

  // create the print service device
  result = SimAddDevice("Print Service",// text name, for debugging
                        "dev_output_reset", // routine called on machine reset
                        "dev_output_calc", // routine called between calc and edge
                        printServiceStruct); // parameter passed to both the above 
  if (result == 0)
  {
    printf("// **** output: error adding device to port %d\n", ioPort);  
    return 0;
  }
  return 1;
}


//*****************************************************************
// dev_output_reset(output_struct *printServiceStruct)
//
// called when the machine is reset
// in this particular case, does nothing 
//

fn dev_output_reset(printServiceStruct)
{
}

//*****************************************************************
// dev_output_calc(output_struct *printServiceStruct)
//
// given time every cycle
// repeatedly receives a request and prints it
//
//

fn dev_output_calc(printServiceStruct)
{
  local value;
  local port = printServiceStruct.ioPort;
  local length;
  local type_tag;
  local sender_y;
  local sender_x;
  local time_hi;
  local time_lo;
  local print_type;
  local key;
  local str_len;
  local str_mem;
  local str_offs;
  local stringTable = hm_new();
  local theFile = printServiceStruct.theFile;
  local junk;
  local fBits;

  while (1)
  {
    //check if we have printed enough
    if (gOutputs > gStreamItOutputs) {
      //this should exit!!!!!
      gInterrupted = 1;
      //this will exit the thread
      exit(0);
    }

    // arbitrate with other port clients
    while (!memory_to_io_peek(machine, port, &value))
      yield;

    DecodeDynHdr(value, &fBits, &length, &type_tag, &sender_y, &sender_x, &junk, &junk);
    if (type_tag != 0xE)
    {
      printf("warning: ignoring request %x received on print service port (hdr == %x (y,x)=(%x,%x) length = %x\n", 
             type_tag, value, sender_y, sender_x, length);
      yield;
      continue;
    }

    // it's for us; let's use it.
    value = threaded_memory_io_receive(machine, port);
    yield;

    if (length > 0) {
      // get the high bits of the time stamp
      length--;
      time_hi = threaded_memory_io_receive(machine, port);
      yield;
    }
    if (length > 0) {
      // get the low bits of the time stamp
      length--;
      time_lo = threaded_memory_io_receive(machine, port);
      yield;
    }
    if (length > 0) {
      // get the type to print
      length--;
      print_type = threaded_memory_io_receive(machine, port);
      yield;
    }

    if (print_type == 0xfabc) {
      key = (sender_y << 5) | sender_x;
	 
      // check for string in-progress from this node
      // if no string in progress, start a new one.
      if (!hm_contains_key(stringTable, key)) {

	str_len = threaded_memory_io_receive(machine, port);
	yield;
	   
	length--;
	   
	// top 2 bits of this word contain the byte offset of the string
	// within the word.  this is used for printing non-word-aligned
	// strings.
	str_offs = (str_len >> 30) & 0x3;
	str_len = str_len & 0x3fffffff;

	// i guess i should have used a hash map instead of shoving extra
	// data into the beginning of the memory buffer, but this seems to 
	// work okay.
	str_mem = malloc(str_len + 3 + 20);
	*(str_mem+4) = str_len;
	*(str_mem+8) = time_hi;
	*(str_mem+12) = time_lo;
	*(str_mem+16) = str_offs;

	*str_mem = 0;
	hm_add(stringTable, key, str_mem);	   
      }
	 
      str_mem = hm_lookup(stringTable, key);

      // copy new data onto end of old data
      while (length > 0) {
	value = threaded_memory_io_receive(machine, port);
	yield;

	length--;
	   
	// reorder the bytes.
	*(str_mem + 20 + *str_mem) = convert_to_little_endian(value);

	(*str_mem) += 4;	   
      }

      if (*str_mem >= *(str_mem + 4)) { 
	// time to print
	gOutputs++;
	printf("[%x%x: %x%08x]: ", sender_y, sender_x, 
	       *(str_mem+8), *(str_mem+12));
	   
	printf(str_mem + 20 + *(str_mem+16));

	fprintf(theFile, "[%x%x: %x%08x]: ", sender_y, sender_x, 
		*(str_mem+8), *(str_mem+12));
	fprintf(theFile, str_mem + 20 + *(str_mem+16));
	fflush(theFile);

	// remove table entry
	free(str_mem);
	hm_remove(stringTable, key);
      }
	 
    } else {
      while (length > 0)
      {
	gOutputs++;
	length--;
	value = threaded_memory_io_receive(machine, port);

	printf("[%x%x: %x%08x]: ", sender_y, sender_x, time_hi, time_lo);
		
	fprintf(theFile, "[%x%x: %x%08x]: ", sender_y, sender_x, time_hi, time_lo);
	fflush(theFile);

	if (print_type == 0xfff1) {		  
	  printf("%d\n", value, value);

	  fprintf(theFile, "%d\n", value, value);
	  fflush(theFile);

	}
	else {
	  if (print_type == 0xffff) {
	    printf("%f\n", double(value));

	    fprintf(theFile, "%f\n", double(value));
	    fflush(theFile);
	  }
	  else {
	    if (print_type == 0xfbad) {
	      printf("program requested simulator pause\n");
	      printf("type 'go()' to continue\n");

	      fprintf(theFile, "program requested simulator pause\n");
	      fprintf(theFile, "type 'go()' to continue\n");
	      fflush(theFile);

	      gInterrupted = 1;
	    }
	    else {	
	      if (print_type == 0xfffc) {
		printf("%c\n", value);

		fprintf(theFile, "%c", value);
		fflush(theFile);
	      } else {
		printf("0x%x\n", value);

		fprintf(theFile, "0x%x\n", value);
		fflush(theFile);
	      }
	    }
	  }
	}
	yield;
      }
    }
  }
}
