/* to_file
 *
 * streams values from a static network port to a file.
 * makes use of the data_transmitter generic device.
 *
 * Michael Taylor & Michael Gordon
 */

if (FindFunctionInSymbolHash(gSymbolTable, "dev_data_transmitter_init",3) == NULL)
  include("<dev/data_transmitter.bc>");

// instrumentation code
fn screen(val, type, format, file_name) {
  local a;
  local b;
  Proc_GetCycleCounter(Machine_GetProc(machine,0), &a, &b);
  //printf("cycleHi %X, cycleLo %X\n", a, b);
  printf("[%s at %d]: ", file_name, b);

  if (type == 0)
    printf(format, val);
  else 
    printf(format, double(val));

  if (a != 0)
    printf(" (Warning: cycle count overflow)");
}


/**
   call the below method but do not ignore the first word.
*/
fn dev_to_file(filename, port, static_network, wait_for_trigger,
	       binary, type, size) {
  dev_to_file(filename, port, static_network, wait_for_trigger,
	      binary, type, size, 0);
}

/** 
 * type: 0 = int, 1 = float, 
 * wait_for_trigger = 0 for spacetime, = 1 for spacedynamic
 * size is size of type
 * ignore_first
 **/
fn dev_to_file(filename, port, static_network, wait_for_trigger,
	       binary, type, size, ignore_first)
{
  local receive_device_descriptor = hms_new();
  local network = 0;
  local cyclesPerWord = 1;

  //set the cycles per word based on the presence of this global variable
  if (LookupSymbolHash(gSymbolTable, "gFileDevCyclesPerWord") != NULL) {
    local cpw = 0;
    cpw = LookupSymbolHash(gSymbolTable, "gFileDevCyclesPerWord");
    cyclesPerWord = **(cpw);
  }

  if (static_network == 0)
    network = 2;

  printf(" ** File Writer on port %d with %d cycles per word.\n", 
	 port, cyclesPerWord); 

  // open the file
  receive_device_descriptor.fileName = filename;
  receive_device_descriptor.theFile = fopen(receive_device_descriptor.fileName,
                                            "w");
  receive_device_descriptor.format = "";
  receive_device_descriptor.ioPort = port;
  receive_device_descriptor.type = type;
  receive_device_descriptor.cyclesPerWord = cyclesPerWord;
  receive_device_descriptor.ignore_first = ignore_first;
  
  //set the printf format for ascii data
  if (type == 0)
    receive_device_descriptor.format = "%d\n";
  else if (type == 1)
    receive_device_descriptor.format = "%f\n";
  else {
    printf("Invalid format arg passed to dev_to_file\n");
    exit(-1);
  }

  verify(receive_device_descriptor.theFile != NULL,
         "### Failed to open output file\n");

  if (static_network == 1) {
    receive_device_descriptor.calc =
      & fn(this)
      {
	local theFile = this.theFile;
	local format = this.format;
	local filename = this.fileName;
	local ioPort = this.ioPort;
	local type = this.type;
	local cyclesPerWord = this.cyclesPerWord;
	local ignore_first = this.ignore_first;

        //ignore the first word
	if (ignore_first == 1) {
	  this.receive();
	}

	while (1)
	{
	  local time_lo, time_hi;
	  local proc = Machine_GetProc(machine, 0);
	  local value;

	  limit_bandwidth(cyclesPerWord);
	  value = this.receive();

	  //write to file
	  if (binary == 0 && type == 1)
	    fprintf(theFile,format,double(value));
	  else if (binary == 0 && type == 0)
	    fprintf(theFile,format,value);
	  else 
	    fwrite(&value, size, 1, theFile);
	  fflush(theFile);

	  //write to screen
	  screen(value, type, format, filename);
	}
      };
  }
  else {
    receive_device_descriptor.calc =
      & fn(this)
      {
	local theFile = this.theFile;
	local format = this.format;
	local filename = this.fileName;
	local ioPort = this.ioPort;
	local type = this.type;
	local cyclesPerWord = this.cyclesPerWord;
	local ignore_first = this.ignore_first;
	
        //ignore the first word
	if (ignore_first == 1) {
	  this.receive();
	}

	while (1)
	{
	  local value;
	  local i, bogus, length, senderY, senderX, ourY, ourX, hdr;
	  
	  limit_bandwidth(cyclesPerWord);
	  
	  value = this.receive();

	  DecodeDynHdr(value, &bogus, &length, &hdr,
		       &senderY, &senderX, &ourY, &ourX);
	  
	  for (i = 0; i < length; i++) {
	    limit_bandwidth(cyclesPerWord);
	    value = this.receive();
	    //write to the file
	    if (binary == 1) 
	      fwrite(&value, size, 1, theFile);
	    else { //ascii, use type and format
	      if (type == 1)
		fprintf(theFile,format,double(value));
	      else 
		fprintf(theFile,format,value);
	    }
	    //flush and write to screen
	    fflush(theFile);
	    screen(value, type, format, filename);
	  }
	}
      };
  }

  return dev_data_transmitter_init("to_file",
				   port,
				   wait_for_trigger, 
				   receive_device_descriptor,
				   network);
}

//send the word, accounting for bandwidth
fn limit_bandwidth(cyclesPerWord) {
  local i = 0;
  for (i = 0; i < (cyclesPerWord - 1); i++) {
    yield;
  }
  return;
}
