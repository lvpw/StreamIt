     1	 float->float filter RFtoIF(int N, float START_FREQ) {
     2	   float[N] weights;
     3	   int size, count;
     4	   
     5	   init { set_frequency(START_FREQ); }
     6	   
     7	*  work pop 3*N push 2*N {
     8	*    // manual loop to 2*N.  Factor of N because messages 
     9	*    // for given time slice come in groups of N; factor 
    10	*    // of 2 for data-rate conversion of Magnitude filter
    11	*    for (int i=0; i<2*N; i++) {
    12	*      push(pop() * weights[count++]);
    13	*      count = count % size;
    14	*    }
    15	*    // manually check for messages; 
    16	*    // special value of 0 encodes no message
    17	*    for (int i=0; i<N; i++) {
    18	*      float freqHop = pop();
    19	*      if (freqHop!=0)
    20	*        set_frequency(freqHop);
    21	*    }
    22	*  }
    23	   
    24	   handler set_frequency(float freq) {
    25	     count  = 0;
    26	     size   = (int) (N * START_FREQ / freq);
    27	     for (int i = 0; i < size; i++)
    28	       weights[i] = sin(i * pi / size);
    29	   }
    30	 }
    31	
    32	 float->float splitjoin Check_Freq_Hop(int N, 
    33	                                       float START_FREQ) {
    34	   split roundrobin(N/4-2, 1, 1, N/2, 1, 1, N/4-2);
    35	   for (int i=1; i<=7; i++) {
    36	     if (i==1 || i==4 || i==7) {
    37	       add float->float filter {
    38	*        work pop 1 push 2 {
    39	           push(pop());
    40	*          push(0);
    41	         }
    42	       }
    43	     } else {
    44	       add float->float filter {
    45	*        work pop 1 push 2 {
    46	           float val = pop();
    47	           push(val);
    48	*          if (val > hop_threshold) {
    49	*            push(val);
    50	*          } else {
    51	*            push(0);
    52	*          }
    53	         }
    54	       }
    55	     }
    56	   }
    57	*  join roundrobin(2*(N/4-2), 2, 2, 2*(N/2), 2, 2, 2*(N/4-2));
    58	 }
    59	
    60	 void->void pipeline Freq_Hopping_Radio {
    61	   int   N             = 32;
    62	   float START_FREQ    = 2402000000;
    63	   
    64	   add Read_From_AtoD(N);
    65	*  add float->float feedbackloop {
    66	*    // adjust joiner rates to match data rates in loop
    67	*    join roundrobin(2*N,N);
    68	*    body pipeline {
    69	*      add RFtoIF(N, START_FREQ);
    70	*      add FFT(N);
    71	*      add Magnitude();
    72	*      add Check_Freq_Hop(N, START_FREQ);
    73	*    }
    74	*    split roundrobin();
    75	*    // number of items on loop path = latency * N
    76	*    for (int i=0; i<6*N; i++)
    77	*      enqueue(0);
    78	*  }
    79	   add Output()
    80	 }
