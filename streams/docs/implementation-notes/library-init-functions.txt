This document describes how to add new init function signatures to the StreamIt
library implementation.  Please follow the conventions described below to make
maintainers' lifes easier.

Let's say you want to add a new init function signature, like so:

class Foo extends SplitJoin 
{
    void init (int x, int y) { ... }
}

First thing you need to do is provide a constructor for Foo:

class Foo extends SplitJoin
{
    Foo (int x, int y) { super (x, y); }

    void init (int x, int y) { ... }
}

Now, you need to add the constructor in SplitJoin:

class SplitJoin extends Stream
{
    public SplitJoin (int x, int y) { super (x, y); }
}

Now add it to Stream:

class Stream extends Operator
{
    public Stream (int x, int y) { super (x, y); }
}

Finally, in Operator, you're ready to add the beef of the extensions:

class Operator
{
    public Operator (int x, int y)
    {
	initParams = new ParameterContainer ("int-int").add ("x", x).
                                                        add ("y", y);
    }
}

Now you need to extend setupOperator () function in Operator.java:

void setupOperator ()
{
    if (initParams.getParamName ().equals ("int-int"))
        init (initParams.getIntParam ("x"), initParams.getIntParam ("y")); else
    if // rest of if-else statements already avaialble
}

Don't forget the trailing else (or you'll be getting false errors).

Also, make sure that the "int-int" string matches exactly in Operator
constructor and in setupOperator function.  This string is derrived by
taking the types of parameters and interleaving them with a "-".  This is
a convention, and I (karczma) as that you follow it to make maintainer's (my)
life easier.  So if you wanted a "void init (float x, int y)", the string
would be "float-int".

Finally, you need to add an appropriate init function to Operator:

class Operator
{
    public void init (int x, int y) { invalidInitError (); }
}

Make sure that your init function is public and you call invalidInitError
call to report an error (it's helpful for debugging).

If you want to have "final" parameters in your init function, make sure to
make your init function in Operator WITHOUT the "final" modifiers.  Java
will figure out that your operators are final on the fly.

That's it - you should have a new working init signature.

