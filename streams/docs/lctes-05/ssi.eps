%!PS-Adobe-3.0 EPSF-3.0
%%Title: (t.txt)
%%Version: 1 3
%%Creator: (PScript5.dll Version 5.2.2)
%%CreationDate: (D:20050129181902-05'00')
%%For: (rabbah)
%%DocumentData: Clean7Bit
%%BoundingBox: 74 56 749 507
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
74 56 moveto 749 56 lineto 749 507 lineto 74 507 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 10
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 7
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 lt
{
c1x c1y r1 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 le
{
c2x c2y r2 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 13
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 6
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
74 56 674 450 rectclip
[ 0 -1 1 0 17.77634 580.85815 ] concat
/N10 [/DeviceRGB] /ColorSpace defineRes pop

%%BeginResource: font EADLLF+Arial
11 dict begin
/FontName /EADLLF+Arial def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1674 dict dup begin
/.notdef 
<10bf317005b6d50bd3b903bc9f60e6e804630266f839393d56ae50a85fbe
ffec110deebde9f8a007323688ac> ND 
/space 
<10bf317079c7734bf7> ND 
/zero 
<10bf317047276c49b351d9623648ba231144bc53a0ca0f7137dd26acafd7
a97e034bcb411e070b28033a95585d14cc3049211cd8d6dbdc740e7e557b
8b0bae35a0f458c915f0c42d4639db9a6f5be8ea13662c7ddbf896c5212e
82bb811e04cfd3e7e4c6b33f992c4b804c27926604f71ad62c4caff5ad28
f37dca9db86e540c19061066e9956293f0fe2d5a7761fabb37f03c88ecf7
f39a88f359b0b2fcad10a34d95> ND 
/one 
<10bf317005a6bd48c4a6ac17ff781e4d9d43b0d3b470defa64830ce9e82c
a42843f3746bb6c5816fc2f2acc9616849f0fb06de8ffab0e186> ND 
/two 
<10bf31705ac903dc9a7655fb1cbe16b0c7e0879796676cfad704f90dc700
a86b567dfb510d73e1eda2d25481e3e3d20a511167bf4f5111151f12fb5e
5148b97bc9e8b92f2397a19c4772d4ba061304f4dbf35b8f856430b2bb0f
08d2f25a6aab8461d96e2c6ffa85eccdebf2e249af74bf434f3c62413f00
2a31d30ba682cae0ea90b106d10c83845aabfb8f0d6840476b9cba1b1b33
8d> ND 
/four 
<10bf31706ae035c09f45a3341524b986c2b652ea6a39cb8af0e0fc5bbd6e
2bc3cdf03d1f50c6012a6a62d7d13e3b061a175eb1dcdf7d528d2a646f> ND 
/five 
<10bf317047276c49b09acfa7bc79efc344047909ce1f733e1cd354b07630
213f625adb3ae8b5aa6a51c1055a59d5f55e13f6cd6e1d9a82c372ef809e
0ee864af865bf5dd5f7dae9a46388470afbd9e2e8c39b7ea4fc9ab800d6e
8ab2edc1e3d36e194904842b1236ff6f70f88f5551621a9fa448c516e732
df410d140d211e3fe0becb6d0a54202b80a6977f> ND 
/six 
<10bf3170435d0d4425184fc061c7faa8dc6add2447c73d0495af3ae4cbe6
71b2a7700f040b5d9fec272a0180dbc9357b9de2d4d226b00cab96cfa6ff
d4525fd5fdbe5aade510cfc7cacabe52b0525986d0147839af70fe53fbd7
f15198bbfd1bae2061f4f49fd71dc08e9970f70083123f8d66b634fb7315
bebd4054f7add22d02ae4b05edbd93dd36100ec8d8de9338fa3376fac047
09884a6568cb1a4a1bc019a4541fd5336bbf3178a330d69e79b2faeff373
c4a7266727a8881d997fda33f08bb656e21f4f69dff5317fad9fb438e4a6
11e7fbf82c> ND 
/eight 
<10bf317046e8724abd4524a50020e9dc3980c715ec740ae6d67b383e7a21
bbe3be56c8d2784f6ec387931b917e7c302623ca7662f45cd71e99c5e15d
8a11f992831c451f3679822c2af303300e984e0eefcb133e310f6a46109a
9d146b93f55052b2f78ef3224c87d699d722a73d34d859dd1f2bd96bf673
baaddbf695f6c3bf7769f7e07a5e24b82d87f50426587e10e40ded624e17
eff02597ffc635ab9595a4af117c1f6c691cc04f7505cc8cd1a327aaa560
a5ede63a1ca5db943a0e1404d814d511720bef0253fd39fd1556e76c68f9
95550a0b50407412fbd7a8b2eeb8d21996172d225bcaa7fc25ecc9c8768d
c697b0249278711014c6dbcc84d68426> ND 
/b 
<10bf31703e65fd7e1217c9f29c64bb1b9e17851bf25dd0466fa484e27564
2ef62da05fc0e561425aa7c0cf759f2df2fed9f5cab4e563d9d485ca6e49
6a23023cc7d5336a38ed163f6d25eac0416c891913363ad8aab5312feed7
de0b0bbcc0db8b66958d96174480f5040af2cfb1590a9410022fc6398cb1
d4435f6325a11aad4c77347983eb4748b4ada02263a3> ND 
/e 
<10bf3170422fdb64737aa996af2c16aa574465e2c930c2d6c70f2c72ffe1
f5ae975a706a2cc8ae00b6163837b6e50d4221eaf76eb409c442c6352c58
b6f53cd585b0d4d507cc48acee66f883df189a3c8bf101622dd4022876bd
14603c08f3944b80e2f5e4e7a62999282a391fd9d657c5f0af2673747752
c83501ca742ca70911b84f52143e873794bcaff697373392d39b09bb> ND 
/i 
<10bf31703f9c43ec382ac71b0be91f29c503cae1b1e6095503cc0fe0ac65
3b18436e1776> ND 
/n 
<10bf31703f932f5ecb68c849e33d657776fc326fe2f54f4bc03b7f3fa95b
3e37550287a3822f66bab52dc802d77dcc608442caba0a099550a895735f
067f96366abd71cd4bfcf52bc4da085550e8eac7df2e04a58377ae472993
06a8805e14d9bcbf32aaef31> ND 
/s 
<10bf3170586c182310772ef569c52e8a28e70ab0d8a07df40f23a570f6b8
110b6ca531096c401daf049a20dcabf79d56164e73db3a474a30573096a7
404eb97e5ce29f730842fc393ad09b95ed0671e10fb71efb1a363521b013
915cc88b3ac6f0ba589395594814da911281623368756fb16579fa9358a8
75b177830c9cbc6555453d35bc648383a53ae4cf9040fc62716099ee082d
9b7578cf9dde30b64249b8b9795ff42c9c8ae9907909c29f306594b1c23c
555bcd231348fd1800442f0eb86aff30c0e412f71e22a228c30832473ba4
3b655be973df9c78943b851583a400b4a0e41168da8a907e9f2f> ND 
/t 
<10bf31706fd71d386b6c99b1d09bb1ad104eda9ab80d9f94a735d54116f5
9c58b6bda429b5392910a11f88b68881d1c7fdb07e40a06d14aa641d6e68
4a64544555b97e482a6c7cb4aa6fb83472e09b52ff42b290b85900fae15f
7904eb69f44b98bcd014> ND 
/y 
<10bf317069b1fd7143194d5a8e15b6f90ac84d61c2210d0a37e4b79b318e
a37e94e1eafeb299771b049b5875b1faaabb3f4a1c610b363bb1cc81f3dc
2321559cc23d3a2ce6164f6c1accc00d3218419aedc30e344ac526b1b865
4cc98fc6c8753aea96a41d15ebdbd9a87b663f4abccf42a0073c7de0> ND 
/z 
<10bf31706d7bdb7f5f74128c9bb1cf0445a721a78dcf191b2f1eaa106619
49aba2663707d493160b8371e546cec091e3d6d364aa753531debc6523f3
> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/EADLLF+Arial findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 56 /eight put
dup 98 /b put
dup 101 /e put
dup 105 /i put
dup 110 /n put
dup 115 /s put
dup 116 /t put
dup 121 /y put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N24/EADLLF+Arial 1 TZ
74.16 56.3837 450.314 674.476 re
W
n
q
n
444.9 95.46 0.0599976 629.94 re
W
n
1 J
1 j
0.0599976 w
n
444.9 95.46 m
444.9 725.4 l
0 0 0 setrgbcolor
S
Q
q
n
373.14 95.46 0.0599976 629.94 re
W
n
1 J
1 j
0.0599976 w
n
373.14 95.46 m
373.14 725.4 l
0 0 0 setrgbcolor
S
Q
q
n
301.38 95.46 0.0599976 629.94 re
W
n
1 J
1 j
0.0599976 w
n
301.38 95.46 m
301.38 725.4 l
0 0 0 setrgbcolor
S
Q
q
n
229.56 95.46 0.0599976 629.94 re
W
n
1 J
1 j
0.0599976 w
n
229.56 95.46 m
229.56 725.4 l
0 0 0 setrgbcolor
S
Q
q
n
157.8 95.46 0.0599976 629.94 re
W
n
1 J
1 j
0.0599976 w
n
157.8 95.46 m
157.8 725.4 l
0 0 0 setrgbcolor
S
Q
q
n
86.04 95.46 0.0599976 629.94 re
W
n
1 J
1 j
0.0599976 w
n
86.04 95.46 m
86.04 725.4 l
0 0 0 setrgbcolor
S
Q
1 J
1 j
0.0599976 w
n
86.04 95.46 m
516.66 95.46 l
516.66 91.74 m
516.66 95.46 l
444.9 91.74 m
444.9 95.46 l
373.14 91.74 m
373.14 95.46 l
301.38 91.74 m
301.38 95.46 l
229.56 91.74 m
229.56 95.46 l
157.8 91.74 m
157.8 95.46 l
86.04 91.74 m
86.04 95.46 l
516.66 95.46 m
516.66 725.4 l
519.84 95.46 m
516.66 95.46 l
519.84 100.62 m
516.66 100.62 l
519.84 105.78 m
516.66 105.78 l
519.84 110.94 m
516.66 110.94 l
519.84 116.1 m
516.66 116.1 l
519.84 121.26 m
516.66 121.26 l
519.84 126.42 m
516.66 126.42 l
519.84 131.58 m
516.66 131.58 l
519.84 136.74 m
516.66 136.74 l
519.84 141.96 m
516.66 141.96 l
519.84 147.12 m
516.66 147.12 l
519.84 152.28 m
516.66 152.28 l
519.84 157.44 m
516.66 157.44 l
519.84 162.6 m
516.66 162.6 l
519.84 167.76 m
516.66 167.76 l
519.84 172.92 m
516.66 172.92 l
519.84 178.08 m
516.66 178.08 l
519.84 183.24 m
516.66 183.24 l
519.84 188.4 m
516.66 188.4 l
519.84 193.56 m
516.66 193.56 l
519.84 198.72 m
516.66 198.72 l
519.84 203.88 m
516.66 203.88 l
519.84 209.04 m
516.66 209.04 l
519.84 214.2 m
516.66 214.2 l
519.84 219.36 m
516.66 219.36 l
519.84 224.52 m
516.66 224.52 l
519.84 229.68 m
516.66 229.68 l
519.84 234.9 m
516.66 234.9 l
519.84 240.06 m
516.66 240.06 l
519.84 245.22 m
516.66 245.22 l
519.84 250.38 m
516.66 250.38 l
519.84 255.54 m
516.66 255.54 l
519.84 260.7 m
516.66 260.7 l
519.84 265.86 m
516.66 265.86 l
519.84 271.02 m
516.66 271.02 l
519.84 276.18 m
516.66 276.18 l
519.84 281.34 m
516.66 281.34 l
519.84 286.5 m
516.66 286.5 l
519.84 291.66 m
516.66 291.66 l
519.84 296.82 m
516.66 296.82 l
519.84 301.98 m
516.66 301.98 l
519.84 307.14 m
516.66 307.14 l
519.84 312.3 m
516.66 312.3 l
519.84 317.46 m
516.66 317.46 l
519.84 322.68 m
516.66 322.68 l
519.84 327.84 m
516.66 327.84 l
519.84 333 m
516.66 333 l
519.84 338.16 m
516.66 338.16 l
519.84 343.32 m
516.66 343.32 l
519.84 348.48 m
516.66 348.48 l
519.84 353.64 m
516.66 353.64 l
519.84 358.8 m
516.66 358.8 l
519.84 363.96 m
516.66 363.96 l
519.84 369.12 m
516.66 369.12 l
519.84 374.28 m
516.66 374.28 l
0 0 0 setrgbcolor
S
n
519.84 379.44 m
516.66 379.44 l
519.84 384.6 m
516.66 384.6 l
519.84 389.76 m
516.66 389.76 l
519.84 394.92 m
516.66 394.92 l
519.84 400.08 m
516.66 400.08 l
519.84 405.24 m
516.66 405.24 l
519.84 410.46 m
516.66 410.46 l
519.84 415.62 m
516.66 415.62 l
519.84 420.78 m
516.66 420.78 l
519.84 425.94 m
516.66 425.94 l
519.84 431.1 m
516.66 431.1 l
519.84 436.26 m
516.66 436.26 l
519.84 441.42 m
516.66 441.42 l
519.84 446.58 m
516.66 446.58 l
519.84 451.74 m
516.66 451.74 l
519.84 456.9 m
516.66 456.9 l
519.84 462.06 m
516.66 462.06 l
519.84 467.22 m
516.66 467.22 l
519.84 472.38 m
516.66 472.38 l
519.84 477.54 m
516.66 477.54 l
519.84 482.7 m
516.66 482.7 l
519.84 487.86 m
516.66 487.86 l
519.84 493.02 m
516.66 493.02 l
519.84 498.18 m
516.66 498.18 l
519.84 503.4 m
516.66 503.4 l
519.84 508.56 m
516.66 508.56 l
519.84 513.72 m
516.66 513.72 l
519.84 518.88 m
516.66 518.88 l
519.84 524.04 m
516.66 524.04 l
519.84 529.2 m
516.66 529.2 l
519.84 534.36 m
516.66 534.36 l
519.84 539.52 m
516.66 539.52 l
519.84 544.68 m
516.66 544.68 l
519.84 549.84 m
516.66 549.84 l
519.84 555 m
516.66 555 l
519.84 560.16 m
516.66 560.16 l
519.84 565.32 m
516.66 565.32 l
519.84 570.48 m
516.66 570.48 l
519.84 575.64 m
516.66 575.64 l
519.84 580.8 m
516.66 580.8 l
519.84 585.96 m
516.66 585.96 l
519.84 591.18 m
516.66 591.18 l
519.84 596.34 m
516.66 596.34 l
519.84 601.5 m
516.66 601.5 l
519.84 606.66 m
516.66 606.66 l
519.84 611.82 m
516.66 611.82 l
519.84 616.98 m
516.66 616.98 l
519.84 622.14 m
516.66 622.14 l
519.84 627.3 m
516.66 627.3 l
519.84 632.46 m
516.66 632.46 l
519.84 637.62 m
516.66 637.62 l
519.84 642.78 m
516.66 642.78 l
519.84 647.94 m
516.66 647.94 l
519.84 653.1 m
516.66 653.1 l
519.84 658.26 m
516.66 658.26 l
519.84 663.42 m
516.66 663.42 l
519.84 668.58 m
516.66 668.58 l
519.84 673.74 m
516.66 673.74 l
519.84 678.9 m
516.66 678.9 l
519.84 684.12 m
516.66 684.12 l
519.84 689.28 m
516.66 689.28 l
519.84 694.44 m
516.66 694.44 l
519.84 699.6 m
516.66 699.6 l
519.84 704.76 m
516.66 704.76 l
S
n
519.84 709.92 m
516.66 709.92 l
519.84 715.08 m
516.66 715.08 l
519.84 720.24 m
516.66 720.24 l
519.84 725.4 m
516.66 725.4 l
S
0.960007 w
n
451.32 98.04 m
487.26 103.2 l
462.84 108.36 l
204.48 113.52 l
449.94 118.68 l
449.94 196.14 l
204.48 201.3 l
282 206.46 l
366.66 211.62 l
366.66 216.78 l
449.94 221.94 l
448.5 227.1 l
448.5 232.32 l
449.94 237.48 l
448.5 242.64 l
449.94 247.8 l
449.94 252.96 l
448.5 258.12 l
449.94 263.28 l
448.5 268.44 l
448.5 273.6 l
449.94 278.76 l
448.5 283.92 l
449.94 289.08 l
448.5 294.24 l
449.94 299.4 l
360.9 304.56 l
360.9 309.72 l
282 314.88 l
247.5 320.04 l
442.74 325.26 l
442.74 340.74 l
448.5 345.9 l
445.62 351.06 l
449.94 356.22 l
434.1 361.38 l
449.94 366.54 l
448.5 371.7 l
445.62 376.86 l
434.1 382.02 l
449.94 387.18 l
445.62 392.34 l
448.5 397.5 l
434.1 402.66 l
445.62 407.82 l
448.5 413.04 l
449.94 418.2 l
434.1 423.36 l
439.86 428.52 l
439.86 444 l
247.5 449.16 l
164.28 454.32 l
477.18 459.48 l
477.18 495.6 l
445.62 500.82 l
434.1 505.98 l
434.1 511.14 l
448.5 516.3 l
434.1 521.46 l
445.62 526.62 l
434.1 531.78 l
448.5 536.94 l
434.1 542.1 l
434.1 547.26 l
449.94 552.42 l
434.1 557.58 l
434.1 573.06 l
449.94 578.22 l
477.18 583.38 l
477.18 619.56 l
164.28 624.72 l
115.44 629.88 l
434.1 635.04 l
434.1 645.36 l
448.5 650.52 l
434.1 655.68 l
434.1 666 l
445.62 671.16 l
434.1 676.32 l
434.1 702.18 l
449.94 707.34 l
434.1 712.5 l
115.44 717.66 l
451.32 722.82 l
S
n
448.8 98.04 m
451.32 100.56 l
453.84 98.04 l
451.32 95.52 l
448.8 98.04 l
h
q
eofill
Q
S
n
484.74 103.2 m
487.26 105.72 l
489.78 103.2 l
487.26 100.68 l
484.74 103.2 l
h
q
eofill
Q
S
n
460.32 108.36 m
462.84 110.88 l
465.36 108.36 l
462.84 105.84 l
460.32 108.36 l
h
q
eofill
Q
S
n
201.96 113.52 m
204.48 116.04 l
207 113.52 l
204.48 111 l
201.96 113.52 l
h
q
eofill
Q
S
n
447.42 118.68 m
449.94 121.2 l
452.46 118.68 l
449.94 116.16 l
447.42 118.68 l
h
q
eofill
Q
S
n
447.42 123.84 m
449.94 126.36 l
452.46 123.84 l
449.94 121.32 l
447.42 123.84 l
h
q
eofill
Q
S
n
447.42 129 m
449.94 131.52 l
452.46 129 l
449.94 126.48 l
447.42 129 l
h
q
eofill
Q
S
n
447.42 134.16 m
449.94 136.68 l
452.46 134.16 l
449.94 131.64 l
447.42 134.16 l
h
q
eofill
Q
S
n
447.42 139.32 m
449.94 141.84 l
452.46 139.32 l
449.94 136.8 l
447.42 139.32 l
h
q
eofill
Q
S
n
447.42 144.54 m
449.94 147.06 l
452.46 144.54 l
449.94 142.02 l
447.42 144.54 l
h
q
eofill
Q
S
n
447.42 149.7 m
449.94 152.22 l
452.46 149.7 l
449.94 147.18 l
447.42 149.7 l
h
q
eofill
Q
S
n
447.42 154.86 m
449.94 157.38 l
452.46 154.86 l
449.94 152.34 l
447.42 154.86 l
h
q
eofill
Q
S
n
447.42 160.02 m
449.94 162.54 l
452.46 160.02 l
449.94 157.5 l
447.42 160.02 l
h
q
eofill
Q
S
n
447.42 165.18 m
449.94 167.7 l
452.46 165.18 l
449.94 162.66 l
447.42 165.18 l
h
q
eofill
Q
S
n
447.42 170.34 m
449.94 172.86 l
452.46 170.34 l
449.94 167.82 l
447.42 170.34 l
h
q
eofill
Q
S
n
447.42 175.5 m
449.94 178.02 l
452.46 175.5 l
449.94 172.98 l
447.42 175.5 l
h
q
eofill
Q
S
n
447.42 180.66 m
449.94 183.18 l
452.46 180.66 l
449.94 178.14 l
447.42 180.66 l
h
q
eofill
Q
S
n
447.42 185.82 m
449.94 188.34 l
452.46 185.82 l
449.94 183.3 l
447.42 185.82 l
h
q
eofill
Q
S
n
447.42 190.98 m
449.94 193.5 l
452.46 190.98 l
449.94 188.46 l
447.42 190.98 l
h
q
eofill
Q
S
n
447.42 196.14 m
449.94 198.66 l
452.46 196.14 l
449.94 193.62 l
447.42 196.14 l
h
q
eofill
Q
S
n
201.96 201.3 m
204.48 203.82 l
207 201.3 l
204.48 198.78 l
201.96 201.3 l
h
q
eofill
Q
S
n
279.48 206.46 m
282 208.98 l
284.52 206.46 l
282 203.94 l
279.48 206.46 l
h
q
eofill
Q
S
n
364.14 211.62 m
366.66 214.14 l
369.18 211.62 l
366.66 209.1 l
364.14 211.62 l
h
q
eofill
Q
S
n
364.14 216.78 m
366.66 219.3 l
369.18 216.78 l
366.66 214.26 l
364.14 216.78 l
h
q
eofill
Q
S
n
447.42 221.94 m
449.94 224.46 l
452.46 221.94 l
449.94 219.42 l
447.42 221.94 l
h
q
eofill
Q
S
n
445.98 227.1 m
448.5 229.62 l
451.02 227.1 l
448.5 224.58 l
445.98 227.1 l
h
q
eofill
Q
S
n
445.98 232.32 m
448.5 234.84 l
451.02 232.32 l
448.5 229.8 l
445.98 232.32 l
h
q
eofill
Q
S
n
447.42 237.48 m
449.94 240 l
452.46 237.48 l
449.94 234.96 l
447.42 237.48 l
h
q
eofill
Q
S
n
445.98 242.64 m
448.5 245.16 l
451.02 242.64 l
448.5 240.12 l
445.98 242.64 l
h
q
eofill
Q
S
n
447.42 247.8 m
449.94 250.32 l
452.46 247.8 l
449.94 245.28 l
447.42 247.8 l
h
q
eofill
Q
S
n
447.42 252.96 m
449.94 255.48 l
452.46 252.96 l
449.94 250.44 l
447.42 252.96 l
h
q
eofill
Q
S
n
445.98 258.12 m
448.5 260.64 l
451.02 258.12 l
448.5 255.6 l
445.98 258.12 l
h
q
eofill
Q
S
n
447.42 263.28 m
449.94 265.8 l
452.46 263.28 l
449.94 260.76 l
447.42 263.28 l
h
q
eofill
Q
S
n
445.98 268.44 m
448.5 270.96 l
451.02 268.44 l
448.5 265.92 l
445.98 268.44 l
h
q
eofill
Q
S
n
445.98 273.6 m
448.5 276.12 l
451.02 273.6 l
448.5 271.08 l
445.98 273.6 l
h
q
eofill
Q
S
n
447.42 278.76 m
449.94 281.28 l
452.46 278.76 l
449.94 276.24 l
447.42 278.76 l
h
q
eofill
Q
S
n
445.98 283.92 m
448.5 286.44 l
451.02 283.92 l
448.5 281.4 l
445.98 283.92 l
h
q
eofill
Q
S
n
447.42 289.08 m
449.94 291.6 l
452.46 289.08 l
449.94 286.56 l
447.42 289.08 l
h
q
eofill
Q
S
n
445.98 294.24 m
448.5 296.76 l
451.02 294.24 l
448.5 291.72 l
445.98 294.24 l
h
q
eofill
Q
S
n
447.42 299.4 m
449.94 301.92 l
452.46 299.4 l
449.94 296.88 l
447.42 299.4 l
h
q
eofill
Q
S
n
358.38 304.56 m
360.9 307.08 l
363.42 304.56 l
360.9 302.04 l
358.38 304.56 l
h
q
eofill
Q
S
n
358.38 309.72 m
360.9 312.24 l
363.42 309.72 l
360.9 307.2 l
358.38 309.72 l
h
q
eofill
Q
S
n
279.48 314.88 m
282 317.4 l
284.52 314.88 l
282 312.36 l
279.48 314.88 l
h
q
eofill
Q
S
n
244.98 320.04 m
247.5 322.56 l
250.02 320.04 l
247.5 317.52 l
244.98 320.04 l
h
q
eofill
Q
S
n
440.22 325.26 m
442.74 327.78 l
445.26 325.26 l
442.74 322.74 l
440.22 325.26 l
h
q
eofill
Q
S
n
440.22 330.42 m
442.74 332.94 l
445.26 330.42 l
442.74 327.9 l
440.22 330.42 l
h
q
eofill
Q
S
n
440.22 335.58 m
442.74 338.1 l
445.26 335.58 l
442.74 333.06 l
440.22 335.58 l
h
q
eofill
Q
S
n
440.22 340.74 m
442.74 343.26 l
445.26 340.74 l
442.74 338.22 l
440.22 340.74 l
h
q
eofill
Q
S
n
445.98 345.9 m
448.5 348.42 l
451.02 345.9 l
448.5 343.38 l
445.98 345.9 l
h
q
eofill
Q
S
n
443.1 351.06 m
445.62 353.58 l
448.14 351.06 l
445.62 348.54 l
443.1 351.06 l
h
q
eofill
Q
S
n
447.42 356.22 m
449.94 358.74 l
452.46 356.22 l
449.94 353.7 l
447.42 356.22 l
h
q
eofill
Q
S
n
431.58 361.38 m
434.1 363.9 l
436.62 361.38 l
434.1 358.86 l
431.58 361.38 l
h
q
eofill
Q
S
n
447.42 366.54 m
449.94 369.06 l
452.46 366.54 l
449.94 364.02 l
447.42 366.54 l
h
q
eofill
Q
S
n
445.98 371.7 m
448.5 374.22 l
451.02 371.7 l
448.5 369.18 l
445.98 371.7 l
h
q
eofill
Q
S
n
443.1 376.86 m
445.62 379.38 l
448.14 376.86 l
445.62 374.34 l
443.1 376.86 l
h
q
eofill
Q
S
n
431.58 382.02 m
434.1 384.54 l
436.62 382.02 l
434.1 379.5 l
431.58 382.02 l
h
q
eofill
Q
S
n
447.42 387.18 m
449.94 389.7 l
452.46 387.18 l
449.94 384.66 l
447.42 387.18 l
h
q
eofill
Q
S
n
443.1 392.34 m
445.62 394.86 l
448.14 392.34 l
445.62 389.82 l
443.1 392.34 l
h
q
eofill
Q
S
n
445.98 397.5 m
448.5 400.02 l
451.02 397.5 l
448.5 394.98 l
445.98 397.5 l
h
q
eofill
Q
S
n
431.58 402.66 m
434.1 405.18 l
436.62 402.66 l
434.1 400.14 l
431.58 402.66 l
h
q
eofill
Q
S
n
443.1 407.82 m
445.62 410.34 l
448.14 407.82 l
445.62 405.3 l
443.1 407.82 l
h
q
eofill
Q
S
n
445.98 413.04 m
448.5 415.56 l
451.02 413.04 l
448.5 410.52 l
445.98 413.04 l
h
q
eofill
Q
S
n
447.42 418.2 m
449.94 420.72 l
452.46 418.2 l
449.94 415.68 l
447.42 418.2 l
h
q
eofill
Q
S
n
431.58 423.36 m
434.1 425.88 l
436.62 423.36 l
434.1 420.84 l
431.58 423.36 l
h
q
eofill
Q
S
n
437.34 428.52 m
439.86 431.04 l
442.38 428.52 l
439.86 426 l
437.34 428.52 l
h
q
eofill
Q
S
n
437.34 433.68 m
439.86 436.2 l
442.38 433.68 l
439.86 431.16 l
437.34 433.68 l
h
q
eofill
Q
S
n
437.34 438.84 m
439.86 441.36 l
442.38 438.84 l
439.86 436.32 l
437.34 438.84 l
h
q
eofill
Q
S
n
437.34 444 m
439.86 446.52 l
442.38 444 l
439.86 441.48 l
437.34 444 l
h
q
eofill
Q
S
n
244.98 449.16 m
247.5 451.68 l
250.02 449.16 l
247.5 446.64 l
244.98 449.16 l
h
q
eofill
Q
S
n
161.76 454.32 m
164.28 456.84 l
166.8 454.32 l
164.28 451.8 l
161.76 454.32 l
h
q
eofill
Q
S
n
474.66 459.48 m
477.18 462 l
479.7 459.48 l
477.18 456.96 l
474.66 459.48 l
h
q
eofill
Q
S
n
474.66 464.64 m
477.18 467.16 l
479.7 464.64 l
477.18 462.12 l
474.66 464.64 l
h
q
eofill
Q
S
n
474.66 469.8 m
477.18 472.32 l
479.7 469.8 l
477.18 467.28 l
474.66 469.8 l
h
q
eofill
Q
S
n
474.66 474.96 m
477.18 477.48 l
479.7 474.96 l
477.18 472.44 l
474.66 474.96 l
h
q
eofill
Q
S
n
474.66 480.12 m
477.18 482.64 l
479.7 480.12 l
477.18 477.6 l
474.66 480.12 l
h
q
eofill
Q
S
n
474.66 485.28 m
477.18 487.8 l
479.7 485.28 l
477.18 482.76 l
474.66 485.28 l
h
q
eofill
Q
S
n
474.66 490.44 m
477.18 492.96 l
479.7 490.44 l
477.18 487.92 l
474.66 490.44 l
h
q
eofill
Q
S
n
474.66 495.6 m
477.18 498.12 l
479.7 495.6 l
477.18 493.08 l
474.66 495.6 l
h
q
eofill
Q
S
n
443.1 500.82 m
445.62 503.34 l
448.14 500.82 l
445.62 498.3 l
443.1 500.82 l
h
q
eofill
Q
S
n
431.58 505.98 m
434.1 508.5 l
436.62 505.98 l
434.1 503.46 l
431.58 505.98 l
h
q
eofill
Q
S
n
431.58 511.14 m
434.1 513.66 l
436.62 511.14 l
434.1 508.62 l
431.58 511.14 l
h
q
eofill
Q
S
n
445.98 516.3 m
448.5 518.82 l
451.02 516.3 l
448.5 513.78 l
445.98 516.3 l
h
q
eofill
Q
S
n
431.58 521.46 m
434.1 523.98 l
436.62 521.46 l
434.1 518.94 l
431.58 521.46 l
h
q
eofill
Q
S
n
443.1 526.62 m
445.62 529.14 l
448.14 526.62 l
445.62 524.1 l
443.1 526.62 l
h
q
eofill
Q
S
n
431.58 531.78 m
434.1 534.3 l
436.62 531.78 l
434.1 529.26 l
431.58 531.78 l
h
q
eofill
Q
S
n
445.98 536.94 m
448.5 539.46 l
451.02 536.94 l
448.5 534.42 l
445.98 536.94 l
h
q
eofill
Q
S
n
431.58 542.1 m
434.1 544.62 l
436.62 542.1 l
434.1 539.58 l
431.58 542.1 l
h
q
eofill
Q
S
n
431.58 547.26 m
434.1 549.78 l
436.62 547.26 l
434.1 544.74 l
431.58 547.26 l
h
q
eofill
Q
S
n
447.42 552.42 m
449.94 554.94 l
452.46 552.42 l
449.94 549.9 l
447.42 552.42 l
h
q
eofill
Q
S
n
431.58 557.58 m
434.1 560.1 l
436.62 557.58 l
434.1 555.06 l
431.58 557.58 l
h
q
eofill
Q
S
n
431.58 562.74 m
434.1 565.26 l
436.62 562.74 l
434.1 560.22 l
431.58 562.74 l
h
q
eofill
Q
S
n
431.58 567.9 m
434.1 570.42 l
436.62 567.9 l
434.1 565.38 l
431.58 567.9 l
h
q
eofill
Q
S
n
431.58 573.06 m
434.1 575.58 l
436.62 573.06 l
434.1 570.54 l
431.58 573.06 l
h
q
eofill
Q
S
n
447.42 578.22 m
449.94 580.74 l
452.46 578.22 l
449.94 575.7 l
447.42 578.22 l
h
q
eofill
Q
S
n
474.66 583.38 m
477.18 585.9 l
479.7 583.38 l
477.18 580.86 l
474.66 583.38 l
h
q
eofill
Q
S
n
474.66 588.54 m
477.18 591.06 l
479.7 588.54 l
477.18 586.02 l
474.66 588.54 l
h
q
eofill
Q
S
n
474.66 593.76 m
477.18 596.28 l
479.7 593.76 l
477.18 591.24 l
474.66 593.76 l
h
q
eofill
Q
S
n
474.66 598.92 m
477.18 601.44 l
479.7 598.92 l
477.18 596.4 l
474.66 598.92 l
h
q
eofill
Q
S
n
474.66 604.08 m
477.18 606.6 l
479.7 604.08 l
477.18 601.56 l
474.66 604.08 l
h
q
eofill
Q
S
n
474.66 609.24 m
477.18 611.76 l
479.7 609.24 l
477.18 606.72 l
474.66 609.24 l
h
q
eofill
Q
S
n
474.66 614.4 m
477.18 616.92 l
479.7 614.4 l
477.18 611.88 l
474.66 614.4 l
h
q
eofill
Q
S
n
474.66 619.56 m
477.18 622.08 l
479.7 619.56 l
477.18 617.04 l
474.66 619.56 l
h
q
eofill
Q
S
n
161.76 624.72 m
164.28 627.24 l
166.8 624.72 l
164.28 622.2 l
161.76 624.72 l
h
q
eofill
Q
S
n
112.92 629.88 m
115.44 632.4 l
117.96 629.88 l
115.44 627.36 l
112.92 629.88 l
h
q
eofill
Q
S
n
431.58 635.04 m
434.1 637.56 l
436.62 635.04 l
434.1 632.52 l
431.58 635.04 l
h
q
eofill
Q
S
n
431.58 640.2 m
434.1 642.72 l
436.62 640.2 l
434.1 637.68 l
431.58 640.2 l
h
q
eofill
Q
S
n
431.58 645.36 m
434.1 647.88 l
436.62 645.36 l
434.1 642.84 l
431.58 645.36 l
h
q
eofill
Q
S
n
445.98 650.52 m
448.5 653.04 l
451.02 650.52 l
448.5 648 l
445.98 650.52 l
h
q
eofill
Q
S
n
431.58 655.68 m
434.1 658.2 l
436.62 655.68 l
434.1 653.16 l
431.58 655.68 l
h
q
eofill
Q
S
n
431.58 660.84 m
434.1 663.36 l
436.62 660.84 l
434.1 658.32 l
431.58 660.84 l
h
q
eofill
Q
S
n
431.58 666 m
434.1 668.52 l
436.62 666 l
434.1 663.48 l
431.58 666 l
h
q
eofill
Q
S
n
443.1 671.16 m
445.62 673.68 l
448.14 671.16 l
445.62 668.64 l
443.1 671.16 l
h
q
eofill
Q
S
n
431.58 676.32 m
434.1 678.84 l
436.62 676.32 l
434.1 673.8 l
431.58 676.32 l
h
q
eofill
Q
S
n
431.58 681.54 m
434.1 684.06 l
436.62 681.54 l
434.1 679.02 l
431.58 681.54 l
h
q
eofill
Q
S
n
431.58 686.7 m
434.1 689.22 l
436.62 686.7 l
434.1 684.18 l
431.58 686.7 l
h
q
eofill
Q
S
n
431.58 691.86 m
434.1 694.38 l
436.62 691.86 l
434.1 689.34 l
431.58 691.86 l
h
q
eofill
Q
S
n
431.58 697.02 m
434.1 699.54 l
436.62 697.02 l
434.1 694.5 l
431.58 697.02 l
h
q
eofill
Q
S
n
431.58 702.18 m
434.1 704.7 l
436.62 702.18 l
434.1 699.66 l
431.58 702.18 l
h
q
eofill
Q
S
n
447.42 707.34 m
449.94 709.86 l
452.46 707.34 l
449.94 704.82 l
447.42 707.34 l
h
q
eofill
Q
S
n
431.58 712.5 m
434.1 715.02 l
436.62 712.5 l
434.1 709.98 l
431.58 712.5 l
h
q
eofill
Q
S
n
112.92 717.66 m
115.44 720.18 l
117.96 717.66 l
115.44 715.14 l
112.92 717.66 l
h
q
eofill
Q
S
n
448.8 722.82 m
451.32 725.34 l
453.84 722.82 l
451.32 720.3 l
448.8 722.82 l
h
q
eofill
Q
S
520.44 73.02 m
/N24 [0 12 -12 0 0 0] Tf
(50) show
448.68 66.3601 m
(250) show
376.92 66.3601 m
(450) show
305.16 66.3601 m
(650) show
233.34 66.3601 m
(850) show
161.58 59.7002 m
(1050) show
89.8201 59.7002 m
(1250) show
n
87.06 122.1 69.42 -20.04 re
1 1 1  setrgbcolor
f
0 0 0  setrgbcolor
154.74 115.8 m
/N24 -12 Tf
(s) show
(i)
[-2.66144 ] pdfxs
(z) show
(e in b)
[-6.66962 -3.36237 -2.66144 -6.66962 -3.36237 -6.66962 ] pdfxs
(yt) show
(e)
[-6.66962 ] pdfxs
(s) show
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF
