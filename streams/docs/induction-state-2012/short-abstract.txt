The key to effectively parallelizing stream programs is to take advantage of data parallelism present in filters that do not maintain state.  One form of state that is common in streaming applications is induction variable state; an example of which is a filter that maintains a counter of the number of times it has executed, and performs behavior dependent on this state.

This paper demonstrates that it is essential to recognize and parallelize filters with induction variable state to enable scalable parallelization of real-world streaming applications.  We define a new language construct that automatically returns the current iteration number of a given filter, and argue that using this construct improves programmer productivity. We augment the StreamIt language to support this construct, and present modifications to the fission parallelization transformation for filters that employ the iteration idiom.  Finally, we present a case study of the motion estimation stage of MPEG2 encoding.
