high priority
------------

- layout!

- FIGURES
  - add vocoder, target detect figure to partitioning section

  - a lot of them look big, black, ugly
  - make stream structure example look cleaner
  - make eps bounding box ratio constant

  - in splitjoin and pipeline combo figures, we should label the (a)
    original, (b) expanded, and (c) collapsed versions.  Also label
    generally what's going on (could use andrew's commented out in combination2.tex)

- add acknowledgements

medium priority
---------------

- highlight different keywords in the partitioning pseudocode

- possibly move the reference the combination examples to further forward in the combination section?

- the for loops in the frequency transformation -- half of them are in {\tt }, half of them are in math

- do like andrew did and put a point of hspace between {\vec y} and the brackets everywhere

- in freq, * figure for all of a matrix column shouldn't be the same as * figure for convolution!

- add somewhere:  can detect fft and move things into frequency region
  - or implement FFT the best way for architecture

- give feel for how much frequency conversoin is helping 
  - compare combined nodes vs. non-combined nodes
  - also how much FFTW is working

low priority
------------
- not sure I like "for non-expert DSP programmer" in abstract

- some absolute references, e.g. transformation 5

- make the bibliography consistent

- fix all overfull hboxes

- emphasize that we don't count zeros (and esp, this is important in
  splitjoin combination.  could add to splitjoin combo section that
  the zeros will disappear.

- Possibly add the comments of the fourth reviewer:
	"More technically, what I found most interesting about the paper is
	that in order to perform the optimization, the optimizer first
	attempts to extract from the program a high-level model (in this case,
	an affine transformer) which then serves as a clean representation for
	the filter transformations."

- look at reviewer's comments again

- make sure it's clear what multiplication removal means

probably not doing
------------------

- make it explicit somewhere that whenever we introduce \lambda_x, we
  also introduce A_x, b_x, e_x, o_x, u_x.
- More benchmarks
- Include measurements of code size and data size for before/after transformed programs
- Add examples of frequency transformation (don't know how to do this)
- Doesn't like sampling conversion rate of 2/3. Results will get better for larger rates,
	should I change it? 441/220 (downsample from CD to MP3 rates) perhaps?
	(I don't think so...)

todo after PLDI
---------------
- some of commenting in LinearCost is obsolete
- remove linearreplacecalculator -- calls childcost.plus, which is wrong

