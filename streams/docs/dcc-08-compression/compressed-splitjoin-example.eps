%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: compressed-splitjoin-example.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 11/12/2007, 7:18:52 PM
%%BoundingBox: -300 299 175 474
%%HiResBoundingBox: -299.4480 299.4481 174.2400 473.6881
%%CropBox: -299.4480 299.4481 174.2400 473.6881
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4466 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   xap:CreatorTool="PScript5.dll Version 5.2.2"
   xap:ModifyDate="2007-11-12T19:18:49-05:00"
   xap:CreateDate="2007-11-12T19:16:55-05:00"
   xap:MetadataDate="2007-11-12T19:18:49-05:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)"
   xapMM:DocumentID="uuid:c2b76c3f-2aad-49a2-9c54-efdec89726b0"
   xapMM:InstanceID="uuid:c2152409-ee76-4786-9016-d86b04dd287f">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft PowerPoint - compressed-splitjoin-example</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Bill Thies</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
/0 
<<
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8RV"J:E&uIXZ`oI=6KjI!^3eH?sm_H$OXZG^"@UG'8%OF`heJFE;MEEcQ2?EH,r:E,TZ5DJj?/
D/F**Chmg%C2.KtBk_6oBP1sjAnGXdAS#C_A7K+Z@U`eT@:<PO?sd8J?=$rD?!U]?>[(E:>$>*4=]nj/
=BAR*<`W7#<)cdp;c6Lk;,L1e:f'q`:JOY[9he>U9MA)P91hfK84Z9A7n6$<7R]a76psF06:*t(5sR\#
5<h@r5!D+m4Zkhh4$,Mb3]]8]3B/uX2E!HN2)R3I1c$pD1,:U>0ek=70.nk0/M/P*/1`;%.k3"u.4H\o
-n$Gj-RL/e,U=W[,9nBV+sA*Q+<VdK+!2OF*ZZ7A)]K_7)B'J2)&F)*()@Z#'bqDs'GD,n&J5Td&.f?_
%h9'Z$k*ON#mgb="T\W)"9\i-!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8RV"J:E&uIXZ`oI=6KjI!^3eH?sm_H$OXZG^"@UG'8%OF`heJFE;MEEcQ2?EH,r:E,TZ5DJj?/
D/F**Chmg%C2.KtBk_6oBP1sjAnGXdAS#C_A7K+Z@U`eT@:<PO?sd8J?!U`@>[1K;>?Y36=]nm0=BJX+
=&r@&<E3$t;c?Rl;Gg:g:f'ta:JX\Z9h\5S91qoM8kMZH8Ol9@7Rfj977BU46pj=/5s[e%5X7Ou5<_7p
4Ztqi4$,Ja3]T2\3&ilV2`ETO2)I-H1G^gB1,:R=0eb:80/"t2/hS_-/M&G(.k<,".Olkr.4?Sm-RU8g
-71#b,pOWZ+sJ3S+X%sN+<M[I*Zc@C*??(<)]BV5)&X;/(`4&*(D[c%'bqGt'GM2o'+toj&.fB`%hB-[
%L`aS$47+E"pP)/!<WE+!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
>>
/CSD add_res
/2 
<<
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8RV"J:E&uIXZ`oI=6KjI!^3eH?sm_H$OXZG^"@UG'8%OF`heJFE;MEEcQ2?EH,r:E,TZ5DJj?/
D/F**Chmg%C2.KtBk_6oBP1sjAnGXdAS#C_A7K+Z@U`eT@:<PO?sd8J?=$rD?!U]?>[(E:>$>*4=]nj/
=BAR*<`W7$<E3!t<)Z^o;GpCi;,L.d:esk_:/4PY9he;T9M8#O8kM]I8P)HD84Q0?7Rfj977BU46pj=/
6:+")5s[b$5X.It5!D.n4Ztni4?GVd3]];^3B9&Y3&`cT2E!HN2)R3I1c$pD1,:U>0ek@90J>(4/hSb.
/M/M)/1W5$.Olns.4HYn-mpAi-71&c,paf^,U4NY+sJ3S+X%sN+<M[I*Zc@B*#on:)]BV5)&X;.(Ddi&
()7Q!'GM5o&eY]c%h/sW$O[=B!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -473.688 translate
pgsv
[0 1 -1 0 174.24 0 ]ct
gsave
np
gsave
0 0 mo
0 473.688 li
174.24 473.688 li
174.24 0 li
cp
clp
[1 0 0 1 -174.96 0 ]ct
163.38 654.378 mo
448.5 654.378 li
448.5 -137.592 li
163.38 -137.592 li
cp
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
201.36 424.608 mo
201.36 425.028 201.72 425.328 202.14 425.328 cv
202.56 425.328 202.86 425.028 202.86 424.608 cv
202.86 424.188 202.56 423.828 202.14 423.828 cv
201.72 423.828 201.36 424.188 201.36 424.608 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.33 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
201.36 424.608 mo
201.36 425.028 201.72 425.328 202.14 425.328 cv
202.56 425.328 202.86 425.028 202.86 424.608 cv
202.86 424.188 202.56 423.828 202.14 423.828 cv
201.72 423.828 201.36 424.188 201.36 424.608 cv
cp
@
201.36 392.748 mo
201.36 393.168 201.72 393.468 202.14 393.468 cv
202.56 393.468 202.86 393.168 202.86 392.748 cv
202.86 392.328 202.56 392.028 202.14 392.028 cv
201.72 392.028 201.36 392.328 201.36 392.748 cv
ef
201.36 392.748 mo
201.36 393.168 201.72 393.468 202.14 393.468 cv
202.56 393.468 202.86 393.168 202.86 392.748 cv
202.86 392.328 202.56 392.028 202.14 392.028 cv
201.72 392.028 201.36 392.328 201.36 392.748 cv
cp
@
201.36 423.828 mo
199.92 421.608 li
@
202.8 423.828 mo
204.3 421.608 li
@
204.3 395.748 mo
202.8 393.468 li
@
201.54 393.468 mo
199.92 395.748 li
@
204.3 421.608 mo
204.3 395.748 li
@
199.92 421.608 mo
199.92 395.748 li
@
/1 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation, registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Regular) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 111 /o put
def
/UniqueID 44339 def
/FontBBox {-222 -250 1006 922} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 358 -210 -199] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [72] def
/StdVW [88] def
/StemSnapH [72 85] def
/StemSnapV [88 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/o <1C60D8A8C9B7EF3272B38E4A6C94951E5562623629B934E27FB2180BD8D3
F6BE8C185E818E4FFC52D5CEB593503DF4218821B72034CF2A9A1A709533B323
EFB4629DFAE9D5E18F3D4BFACB0FD28655332930944FE909D271FBC01B5A1CBF
248702BAFDF5EBE494117F5AB7> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/QHIBKK+ArialMT /ArialMT findfont ct_VMDictPut
/QHIBKK+ArialMT*1 
[111{/.notdef}rp /o 144{/.notdef}rp]
QHIBKK+ArialMT nf
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204 472.308 mo
(ooooo)
[-4.37897 -4.37897 -4.37897 -4.43915 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Arial-BoldMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation. registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Bold) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 120 /x put
def
/UniqueID 44341 def
/FontBBox {-167 -250 1006 939} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 355 -210 -197] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [109] def
/StdVW [137] def
/StemSnapH [109 121] def
/StemSnapV [137 144] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/x <1C60D8A8C9B7EF324FE573CBC6AAE04E35CB866746618AFBF3F4A2AE329F
B6B45945C6BAF6FA9D0038F79F240CD7A08F46F395EA04D701B8B0436D39143C
703DFACD> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/QHIBKL+Arial-BoldMT /Arial-BoldMT findfont ct_VMDictPut
/QHIBKL+Arial-BoldMT*1 
[120{/.notdef}rp /x 135{/.notdef}rp]
QHIBKL+Arial-BoldMT nf
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204 450.348 mo
(x)sh
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204 445.968 mo
(oooo)
[-4.43918 -4.37897 -4.37897 0 ]ysh
201.9 428.268 mo
201.9 426.408 li
202.14 426.408 li
202.2 426.528 li
202.2 428.268 li
202.14 428.388 li
201.9 428.388 li
201.9 428.268 li
cp
201.18 427.008 mo
202.02 425.208 li
202.92 427.008 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
201.9 392.028 mo
201.9 390.168 li
202.02 390.108 li
202.14 390.168 li
202.2 390.288 li
202.2 392.028 li
202.14 392.148 li
201.9 392.148 li
201.9 392.028 li
cp
201.18 390.768 mo
202.02 388.968 li
202.92 390.768 li
f
214.44 424.908 mo
214.44 425.328 214.74 425.688 215.16 425.688 cv
215.58 425.688 215.88 425.328 215.88 424.908 cv
215.88 424.488 215.58 424.188 215.16 424.188 cv
214.74 424.188 214.44 424.488 214.44 424.908 cv
ef
214.44 424.908 mo
214.44 425.328 214.74 425.688 215.16 425.688 cv
215.58 425.688 215.88 425.328 215.88 424.908 cv
215.88 424.488 215.58 424.188 215.16 424.188 cv
214.74 424.188 214.44 424.488 214.44 424.908 cv
cp
@
214.44 393.048 mo
214.44 393.468 214.74 393.828 215.16 393.828 cv
215.58 393.828 215.88 393.468 215.88 393.048 cv
215.88 392.688 215.58 392.328 215.16 392.328 cv
214.74 392.328 214.44 392.688 214.44 393.048 cv
ef
214.44 393.048 mo
214.44 393.468 214.74 393.828 215.16 393.828 cv
215.58 393.828 215.88 393.468 215.88 393.048 cv
215.88 392.688 215.58 392.328 215.16 392.328 cv
214.74 392.328 214.44 392.688 214.44 393.048 cv
cp
@
214.44 424.188 mo
212.94 421.908 li
@
215.82 424.188 mo
217.32 421.908 li
@
217.32 396.048 mo
215.82 393.828 li
@
214.56 393.828 mo
212.94 396.048 li
@
217.32 421.908 mo
217.32 396.048 li
@
212.94 421.908 mo
212.94 396.048 li
@
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
217.14 451.068 mo
(ooooo)
[-4.37897 -4.37897 -4.37897 -4.43915 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
222.6 420.348 mo
(x)sh
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
222.6 415.968 mo
(oooo)
[-4.37897 -4.37897 -4.43918 0 ]ysh
214.98 428.688 mo
214.98 427.008 li
215.04 426.888 li
215.16 426.828 li
215.28 426.888 li
215.28 428.808 li
215.16 428.868 li
215.04 428.808 li
214.98 428.688 li
cp
214.26 427.428 mo
215.16 425.688 li
216 427.428 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
214.98 392.088 mo
214.98 390.348 li
215.04 390.228 li
215.16 390.168 li
215.28 390.228 li
215.28 392.208 li
215.04 392.208 li
214.98 392.088 li
cp
214.26 390.768 mo
215.16 389.028 li
216 390.768 li
f
234.3 424.488 mo
234.3 424.908 234.66 425.208 235.08 425.208 cv
235.5 425.208 235.8 424.908 235.8 424.488 cv
235.8 424.068 235.5 423.768 235.08 423.768 cv
234.66 423.768 234.3 424.068 234.3 424.488 cv
ef
234.3 424.488 mo
234.3 424.908 234.66 425.208 235.08 425.208 cv
235.5 425.208 235.8 424.908 235.8 424.488 cv
235.8 424.068 235.5 423.768 235.08 423.768 cv
234.66 423.768 234.3 424.068 234.3 424.488 cv
cp
@
234.3 392.628 mo
234.3 393.048 234.66 393.408 235.08 393.408 cv
235.5 393.408 235.8 393.048 235.8 392.628 cv
235.8 392.208 235.5 391.908 235.08 391.908 cv
234.66 391.908 234.3 392.208 234.3 392.628 cv
ef
234.3 392.628 mo
234.3 393.048 234.66 393.408 235.08 393.408 cv
235.5 393.408 235.8 393.048 235.8 392.628 cv
235.8 392.208 235.5 391.908 235.08 391.908 cv
234.66 391.908 234.3 392.208 234.3 392.628 cv
cp
@
234.3 423.768 mo
232.86 421.488 li
@
235.74 423.768 mo
237.24 421.488 li
@
237.24 395.628 mo
235.74 393.408 li
@
234.48 393.408 mo
232.86 395.628 li
@
237.24 421.488 mo
237.24 395.628 li
@
232.86 421.488 mo
232.86 395.628 li
@
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
232.02 420.228 mo
(ooooo)
[-4.37897 -4.37897 -4.37897 -4.43915 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
242.46 419.868 mo
(x)sh
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
242.46 415.488 mo
(oooo)
[-4.37897 -4.37897 -4.43915 0 ]ysh
234.9 428.268 mo
234.9 426.408 li
235.14 426.408 li
235.2 426.528 li
235.2 428.268 li
235.14 428.388 li
234.9 428.388 li
234.9 428.268 li
cp
234.18 427.008 mo
235.02 425.208 li
235.92 427.008 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
234.9 391.608 mo
234.9 389.808 li
235.02 389.748 li
235.14 389.808 li
235.2 389.928 li
235.2 391.608 li
235.14 391.728 li
235.02 391.788 li
234.9 391.728 li
234.9 391.608 li
cp
234.18 390.348 mo
235.02 388.608 li
235.92 390.348 li
f
253.56 424.848 mo
253.56 425.268 253.92 425.628 254.34 425.628 cv
254.76 425.628 255.06 425.268 255.06 424.848 cv
255.06 424.428 254.76 424.128 254.34 424.128 cv
253.92 424.128 253.56 424.428 253.56 424.848 cv
ef
253.56 424.848 mo
253.56 425.268 253.92 425.628 254.34 425.628 cv
254.76 425.628 255.06 425.268 255.06 424.848 cv
255.06 424.428 254.76 424.128 254.34 424.128 cv
253.92 424.128 253.56 424.428 253.56 424.848 cv
cp
@
253.56 393.048 mo
253.56 393.408 253.92 393.768 254.34 393.768 cv
254.76 393.768 255.06 393.408 255.06 393.048 cv
255.06 392.628 254.76 392.268 254.34 392.268 cv
253.92 392.268 253.56 392.628 253.56 393.048 cv
ef
253.56 393.048 mo
253.56 393.408 253.92 393.768 254.34 393.768 cv
254.76 393.768 255.06 393.408 255.06 393.048 cv
255.06 392.628 254.76 392.268 254.34 392.268 cv
253.92 392.268 253.56 392.628 253.56 393.048 cv
cp
@
253.56 424.128 mo
252.12 421.848 li
@
255 424.128 mo
256.5 421.848 li
@
256.5 396.048 mo
255 393.768 li
@
253.74 393.768 mo
252.12 396.048 li
@
256.5 421.848 mo
256.5 396.048 li
@
252.12 421.848 mo
252.12 396.048 li
@
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
251.28 420.588 mo
(ooooo)
[-4.37897 -4.37897 -4.37897 -4.43915 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
261.72 416.028 mo
(x)sh
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
261.72 411.648 mo
(ooo)
[-4.37897 -4.37897 0 ]ysh
254.1 428.628 mo
254.1 426.948 li
254.16 426.828 li
254.28 426.768 li
254.4 426.828 li
254.46 426.948 li
254.46 428.628 li
254.4 428.748 li
254.28 428.808 li
254.16 428.748 li
254.1 428.628 li
cp
253.44 427.368 mo
254.28 425.628 li
255.18 427.368 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
254.1 392.028 mo
254.1 390.288 li
254.16 390.168 li
254.28 390.108 li
254.4 390.168 li
254.46 390.288 li
254.46 392.028 li
254.4 392.148 li
254.16 392.148 li
254.1 392.028 li
cp
253.44 390.768 mo
254.28 388.968 li
255.18 390.768 li
f
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
256.38 388.788 mo
(o)sh
273.24 425.028 mo
273.24 425.448 273.6 425.748 274.02 425.748 cv
274.44 425.748 274.74 425.448 274.74 425.028 cv
274.74 424.608 274.44 424.308 274.02 424.308 cv
273.6 424.308 273.24 424.608 273.24 425.028 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
273.24 425.028 mo
273.24 425.448 273.6 425.748 274.02 425.748 cv
274.44 425.748 274.74 425.448 274.74 425.028 cv
274.74 424.608 274.44 424.308 274.02 424.308 cv
273.6 424.308 273.24 424.608 273.24 425.028 cv
cp
@
273.24 393.168 mo
273.24 393.588 273.6 393.948 274.02 393.948 cv
274.44 393.948 274.74 393.588 274.74 393.168 cv
274.74 392.748 274.44 392.448 274.02 392.448 cv
273.6 392.448 273.24 392.748 273.24 393.168 cv
ef
273.24 393.168 mo
273.24 393.588 273.6 393.948 274.02 393.948 cv
274.44 393.948 274.74 393.588 274.74 393.168 cv
274.74 392.748 274.44 392.448 274.02 392.448 cv
273.6 392.448 273.24 392.748 273.24 393.168 cv
cp
@
273.24 424.308 mo
271.8 422.028 li
@
274.68 424.308 mo
276.18 422.028 li
@
276.18 396.168 mo
274.68 393.948 li
@
273.42 393.948 mo
271.8 396.168 li
@
276.18 422.028 mo
276.18 396.168 li
@
271.8 422.028 mo
271.8 396.168 li
@
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
270.96 416.628 mo
(oooo)
[-4.37897 -4.37897 -4.37897 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
281.4 416.208 mo
(x)sh
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
281.4 411.828 mo
(ooo)
[-4.37897 -4.37897 0 ]ysh
273.84 428.808 mo
273.84 426.948 li
274.08 426.948 li
274.14 427.068 li
274.14 428.808 li
274.08 428.928 li
273.96 428.988 li
273.84 428.928 li
273.84 428.808 li
cp
273.12 427.548 mo
273.96 425.748 li
274.86 427.548 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
273.84 392.148 mo
273.84 390.348 li
273.96 390.288 li
274.08 390.348 li
274.14 390.468 li
274.14 392.148 li
274.08 392.268 li
273.96 392.328 li
273.84 392.268 li
273.84 392.148 li
cp
273.12 390.888 mo
273.96 389.148 li
274.86 390.888 li
f
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
276.12 388.968 mo
(oo)
[-4.37897 0 ]ysh
293.16 424.848 mo
293.16 425.268 293.52 425.628 293.94 425.628 cv
294.36 425.628 294.66 425.268 294.66 424.848 cv
294.66 424.428 294.36 424.128 293.94 424.128 cv
293.52 424.128 293.16 424.428 293.16 424.848 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
293.16 424.848 mo
293.16 425.268 293.52 425.628 293.94 425.628 cv
294.36 425.628 294.66 425.268 294.66 424.848 cv
294.66 424.428 294.36 424.128 293.94 424.128 cv
293.52 424.128 293.16 424.428 293.16 424.848 cv
cp
@
293.16 393.048 mo
293.16 393.408 293.52 393.768 293.94 393.768 cv
294.36 393.768 294.66 393.408 294.66 393.048 cv
294.66 392.628 294.36 392.268 293.94 392.268 cv
293.52 392.268 293.16 392.628 293.16 393.048 cv
ef
293.16 393.048 mo
293.16 393.408 293.52 393.768 293.94 393.768 cv
294.36 393.768 294.66 393.408 294.66 393.048 cv
294.66 392.628 294.36 392.268 293.94 392.268 cv
293.52 392.268 293.16 392.628 293.16 393.048 cv
cp
@
293.16 424.128 mo
291.72 421.848 li
@
294.6 424.128 mo
296.1 421.848 li
@
296.1 396.048 mo
294.6 393.768 li
@
293.34 393.768 mo
291.72 396.048 li
@
296.1 421.848 mo
296.1 396.048 li
@
291.72 421.848 mo
291.72 396.048 li
@
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
290.88 403.308 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
301.32 402.648 mo
(x)sh
293.7 428.628 mo
293.7 426.948 li
293.76 426.828 li
293.88 426.768 li
294 426.828 li
294.06 426.948 li
294.06 428.628 li
294 428.748 li
293.88 428.808 li
293.76 428.748 li
293.7 428.628 li
cp
293.04 427.368 mo
293.88 425.628 li
294.78 427.368 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
293.7 392.028 mo
293.7 390.288 li
293.76 390.168 li
293.88 390.108 li
294 390.168 li
294.06 390.288 li
294.06 392.028 li
294 392.148 li
293.76 392.148 li
293.7 392.028 li
cp
293.04 390.768 mo
293.88 388.968 li
294.78 390.768 li
f
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
295.98 388.788 mo
(oooooooo)
[-4.37897 -4.37897 -4.37897 -4.43915 -4.37897 -4.37897 -4.43918 0 ]ysh
312.72 425.208 mo
312.72 425.628 313.02 425.928 313.44 425.928 cv
313.86 425.928 314.16 425.628 314.16 425.208 cv
314.16 424.788 313.86 424.428 313.44 424.428 cv
313.02 424.428 312.72 424.788 312.72 425.208 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
312.72 425.208 mo
312.72 425.628 313.02 425.928 313.44 425.928 cv
313.86 425.928 314.16 425.628 314.16 425.208 cv
314.16 424.788 313.86 424.428 313.44 424.428 cv
313.02 424.428 312.72 424.788 312.72 425.208 cv
cp
@
312.72 393.348 mo
312.72 393.768 313.02 394.068 313.44 394.068 cv
313.86 394.068 314.16 393.768 314.16 393.348 cv
314.16 392.928 313.86 392.628 313.44 392.628 cv
313.02 392.628 312.72 392.928 312.72 393.348 cv
ef
312.72 393.348 mo
312.72 393.768 313.02 394.068 313.44 394.068 cv
313.86 394.068 314.16 393.768 314.16 393.348 cv
314.16 392.928 313.86 392.628 313.44 392.628 cv
313.02 392.628 312.72 392.928 312.72 393.348 cv
cp
@
312.72 424.428 mo
311.22 422.208 li
@
314.16 424.428 mo
315.6 422.208 li
@
315.6 396.348 mo
314.16 394.068 li
@
312.84 394.068 mo
311.22 396.348 li
@
315.6 422.208 mo
315.6 396.348 li
@
311.22 422.208 mo
311.22 396.348 li
@
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
310.44 402.528 mo
(o)sh
313.26 428.988 mo
313.26 427.248 li
313.32 427.128 li
313.44 427.068 li
313.56 427.128 li
313.56 429.108 li
313.32 429.108 li
313.26 428.988 li
cp
312.54 427.728 mo
313.44 425.928 li
314.28 427.728 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
313.26 392.328 mo
313.26 390.648 li
313.32 390.528 li
313.44 390.468 li
313.56 390.528 li
313.56 392.448 li
313.44 392.508 li
313.32 392.448 li
313.26 392.328 li
cp
312.54 391.068 mo
313.44 389.328 li
314.28 391.068 li
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
315.54 389.148 mo
(x)sh
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
315.54 384.768 mo
(oooooooo)
[-4.37897 -4.37897 -4.43915 -4.37897 -4.37897 -4.43918 -4.37897 0 ]ysh
326.04 425.268 mo
326.04 425.688 326.4 425.988 326.82 425.988 cv
327.24 425.988 327.54 425.688 327.54 425.268 cv
327.54 424.848 327.24 424.488 326.82 424.488 cv
326.4 424.488 326.04 424.848 326.04 425.268 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
326.04 425.268 mo
326.04 425.688 326.4 425.988 326.82 425.988 cv
327.24 425.988 327.54 425.688 327.54 425.268 cv
327.54 424.848 327.24 424.488 326.82 424.488 cv
326.4 424.488 326.04 424.848 326.04 425.268 cv
cp
@
326.04 393.408 mo
326.04 393.828 326.4 394.128 326.82 394.128 cv
327.24 394.128 327.54 393.828 327.54 393.408 cv
327.54 392.988 327.24 392.688 326.82 392.688 cv
326.4 392.688 326.04 392.988 326.04 393.408 cv
ef
326.04 393.408 mo
326.04 393.828 326.4 394.128 326.82 394.128 cv
327.24 394.128 327.54 393.828 327.54 393.408 cv
327.54 392.988 327.24 392.688 326.82 392.688 cv
326.4 392.688 326.04 392.988 326.04 393.408 cv
cp
@
326.04 424.488 mo
324.6 422.268 li
@
327.48 424.488 mo
328.98 422.268 li
@
328.98 396.408 mo
327.48 394.128 li
@
326.22 394.128 mo
324.6 396.408 li
@
328.98 422.268 mo
328.98 396.408 li
@
324.6 422.268 mo
324.6 396.408 li
@
326.64 429.048 mo
326.64 427.188 li
326.76 427.128 li
326.88 427.188 li
326.94 427.308 li
326.94 429.048 li
326.88 429.168 li
326.64 429.168 li
326.64 429.048 li
cp
325.92 427.728 mo
326.76 425.988 li
327.66 427.728 li
f
326.64 392.388 mo
326.64 390.588 li
326.76 390.528 li
326.88 390.588 li
326.94 390.708 li
326.94 392.388 li
326.88 392.508 li
326.76 392.568 li
326.64 392.508 li
326.64 392.388 li
cp
325.92 391.128 mo
326.76 389.388 li
327.66 391.128 li
f
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
328.92 389.208 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
328.92 384.828 mo
(x)sh
0 gry
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
QHIBKK+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C0AE10AF89E3640E5FA79D7BBCA6A55D92CE2
2B86ADE2026877CED638BBD1D038B6C5AE7C6B3A0E455DCDF62CCEA75767688A
69D21C517ADCEC9A0C655792B4578CB6B74D47> |-
/parenright <1C60D8A8C9B81F2C3AF105008BF4C14977A5391C97502518193
ED7EC3F60D4E4A6A615277E5A76DF130278E01F945101C3D52F6F19B3C51C139
EAF392FE494F85B575CEA750D305AD09C5B0136> |-
/comma <1C60D8A8C9B854D0E60655E7F7F9E83D757EFA35086EED0E1F7E8A4C
D57C31A7DF335284A0C0F1E669> |-
/five <1C60D8A8C9B7EF32244A3E5F405B6D31E38A8EB7FBE5BAFC15835DF10
683C93AD804B5613AE64B5A58D8A22AA4318A2891CDF2D9FA16ACA439A9E54B8
8A475D9ABD1CB4EFDCF42DF6ED8297C59B8090B6E4B555FB696152B8F5A84767
58BEDA9F9B241E9B4EA7BFF7E> |-
/R <1C60D8A8C9B6079F4E60D063F0767E7F02FAC09A4010F4F0744E7BB7FD45
5FB6472FCC081F13976DD2CC9C30E89BAD096507542A0B90314DE7A4367ADD1E
412A0C92B1370A0844B40884679F91D8D6B7B5DBAD4EABF06DB35B8498117918
0699157C2C0BF36C5D1BFA24B06C1EDE922D86E780BE47A7050C9F38AF083E0C
F03CCAA0FF> |-
/i <1C60D8A8C9B88C084B70B34E18F97CF1997FF6644A06C3E9D2A9D91E0589
7D24E504390D1AACAF3599CA> |-
/n <1C60D8A8C9B7EF321358E32ACCD81AA16D19D782C50D8000CD7A7C03D382
AEFC72232E29A1B08D01004D3E9E50AA00D3BA506AE663B158755F270EA082AF
3827056B839C61FDB7B509318DF83E0B8CA2F21F3DB8BF9A12D0B81EEC234F1F
3832DAEA2C1BF9B7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QHIBKK+ArialMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 53 /five put
dup 82 /R put
dup 105 /i put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/QHIBKK+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 8{/.notdef}rp /five 28{/.notdef}rp 
/R 22{/.notdef}rp /i 4{/.notdef}rp /n /o 144{/.notdef}rp]
QHIBKK+ArialMT nf
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
328.92 380.448 mo
(oooooooo)
[-4.37897 -4.43915 -4.37897 -4.37897 -4.43918 -4.37897 -4.37897 0 ]ysh
185.64 469.248 mo
(inRR\(5,5\))
[-1.74399 -19.8586 -5.70398 -5.70398 -2.62305 -4.38928 -2.1875 -4.38925 0 ]ysh
180.66 451.968 mo
181.68 451.968 li
181.68 459.348 li
183.72 459.348 li
183.72 451.968 li
184.8 451.968 li
182.7 449.508 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
180.66 451.968 mo
181.68 451.968 li
181.68 459.348 li
183.72 459.348 li
183.72 451.968 li
184.8 451.968 li
182.7 449.508 li
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
QHIBKK+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7EF322BA6DCE9BD5DF3DFF7C357023322936E9155634E4F
EAE48170BD90CB497150A64DE8E375FCCE900D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QHIBKK+ArialMT /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
reset_gvm
/QHIBKK+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp /one 3{/.notdef}rp 
/five 28{/.notdef}rp /R 22{/.notdef}rp /i 4{/.notdef}rp /n /o 
144{/.notdef}rp]
QHIBKK+ArialMT nf
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
185.7 400.608 mo
(RR\(1,1\))
[-5.69922 -5.69922 -2.61832 -4.38449 -2.22156 -4.38452 0 ]ysh
180.84 362.688 mo
181.86 362.688 li
181.86 370.068 li
183.9 370.068 li
183.9 362.688 li
184.92 362.688 li
182.88 360.228 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
180.84 362.688 mo
181.86 362.688 li
181.86 370.068 li
183.9 370.068 li
183.9 362.688 li
184.92 362.688 li
182.88 360.228 li
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
QHIBKK+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/t <1C60D8A8C9B854D0DFA7F3C3CFE997A880BB6118223EC140BB1D072976EE
7376E92C1688A186F47CEAAFED94409C37AA8625569840A3000DBDC757F1162E
2C0A9076C5CFF3F8D5838450BDCD> |-
/u <1C60D8A8C9B7EF3211FDB400F617E7ECE548A197892E72A9234771BE08CC
6A8D56A742A5122BE141318E124044E0D30B7644714B00B3BB9E61860FF6B41C
B17A850FE04ABD34133958C1F083E2DB097DB78C54871A4F3A0E7E828AD0BBA0
152EE27D2C480103CEE5B367EED1D0AF3404> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QHIBKK+ArialMT /Encoding get
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/QHIBKK+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp /one 3{/.notdef}rp 
/five 28{/.notdef}rp /R 22{/.notdef}rp /i 4{/.notdef}rp /n /o 
4{/.notdef}rp /t /u 138{/.notdef}rp]
QHIBKK+ArialMT nf
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
185.52 357.168 mo
(out)
[-4.37897 -4.37897 0 ]ysh
177.3 413.268 mo
178.02 412.548 li
183.24 417.768 li
184.74 416.268 li
179.52 411.048 li
180.24 410.328 li
177 410.028 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
177.3 413.268 mo
178.02 412.548 li
183.24 417.768 li
184.74 416.268 li
179.52 411.048 li
180.24 410.328 li
177 410.028 li
cp
@
189.18 413.328 mo
188.46 412.608 li
183.24 417.828 li
181.8 416.328 li
187.02 411.108 li
186.3 410.388 li
189.48 410.088 li
ef
189.18 413.328 mo
188.46 412.608 li
183.24 417.828 li
181.8 416.328 li
187.02 411.108 li
186.3 410.388 li
189.48 410.088 li
cp
@
182.94 405.588 mo
182.22 404.868 li
177.78 409.308 li
176.34 407.808 li
180.78 403.428 li
180 402.708 li
182.94 402.708 li
ef
182.94 405.588 mo
182.22 404.868 li
177.78 409.308 li
176.34 407.808 li
180.78 403.428 li
180 402.708 li
182.94 402.708 li
cp
@
183.6 405.768 mo
184.32 405.048 li
188.64 409.308 li
190.08 407.868 li
185.82 403.548 li
186.54 402.828 li
183.66 402.888 li
ef
183.6 405.768 mo
184.32 405.048 li
188.64 409.308 li
190.08 407.868 li
185.82 403.548 li
186.54 402.828 li
183.66 402.888 li
cp
@
gsave
195.78 428.448 mo
195.78 426.888 li
188.4 426.888 li
188.4 423.768 li
195.78 423.768 li
195.78 422.208 li
198.24 425.328 li
eclp
198.3 428.508 mo
198.3 422.148 li
188.34 422.148 li
188.34 428.508 li
cp
gsave
/0 /CSD get_res idxcs
clp
[0 -1 -1 0 648.648 174.24 ]ct
[6.36 0 0 9.96 -254.268 450.348 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 166 
/M[1 0 0 -166 0 166 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WiE*!s8W-!s8W."9\i1"U,&5"U5/8"pP;;#7(SA#mgqG$O[=N$k3XT%LrsZ%hK<b&eYil'GV>u
(Ddo*)&aG5*$$(A+!;^N,:"Q^-7:2j.Olr"/M8\10etOA2)[?O3&s#\4$5Yi5<qM$6UX@47n6*A8kViP
:/=Y^;,U=l<E<1'=^#$7?!^iE?t!MSA7T7`B4u!oCM[j*Df>~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
195.78 395.868 mo
195.78 394.308 li
188.4 394.308 li
188.4 391.128 li
195.78 391.128 li
195.78 389.568 li
198.24 392.748 li
eclp
198.3 395.928 mo
198.3 389.508 li
188.34 389.508 li
188.34 395.928 li
cp
gsave
/0 /CSD get_res idxcs
clp
[0 -1 -1 0 648.648 174.24 ]ct
[6.42 0 0 9.96 -221.688 450.348 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 166 
/M[1 0 0 -166 0 166 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WiE*!s8W-!s8W."9\i1"U,&5"U5/8"pP;;#7(SA#mgqG$O[=N$k3XT%LrsZ%hK<b&eYil'GV>u
(Ddo*)&aG5*$$(A+!;^N,:"Q^-7:2j.Olr"/M8\10etOA2)[?O3&s#\4$5Yi5<qM$6UX@47n6*A8kViP
:/=Y^;,U=l<E<1'=^#$7?!^iE?t!MSA7T7`B4u!oCM[j*Df>~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
256.02 274.908 mo
256.02 275.268 256.32 275.628 256.74 275.628 cv
257.16 275.628 257.46 275.268 257.46 274.908 cv
257.46 274.488 257.16 274.128 256.74 274.128 cv
256.32 274.128 256.02 274.488 256.02 274.908 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
256.02 274.908 mo
256.02 275.268 256.32 275.628 256.74 275.628 cv
257.16 275.628 257.46 275.268 257.46 274.908 cv
257.46 274.488 257.16 274.128 256.74 274.128 cv
256.32 274.128 256.02 274.488 256.02 274.908 cv
cp
@
256.02 274.128 mo
254.52 271.908 li
@
257.4 274.128 mo
258.9 271.908 li
258.9 240.048 li
@
254.52 271.908 mo
254.52 240.048 li
@
0 gry
true set_gvm
%ADOBeginSubsetFont: KFAAAA+SymbolMT Initial
ct_T42Dict begin
0 -0.219 1.109 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /KFAAAA+SymbolMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3284f3e872000000cc000000566376
74202ac4fb8500000124000005046670676df530c471000006280000050f
676c79667978e44b00001658000001a668656164c5ad5c6500000b380000
0036686865610f2d038100000b7000000024686d74787750493e00000b94
000002fc6c6f636119bf19bf00000e90000001826d617870020305a70000
1014000000206e616d650a6e582f00001034000002ae707265707e0fc165
000012e40000037167646972000000000000000000000000000104cd0190
00050000059a053300000125059a0533000003a0006602120c0305050102
010706020507000000000000000000000000000000004d6f6e6f0040f020
f0ff058cfe460133080b01c280000000000000000000055d0031054c001f
054c001c0394001b0000ffe10000ffe10000ffe4fe59ffed056b0023fe6a
ffdc270f000000b4000000b4000000000000000000610025005e0029004a
00c200f000be012a005000c0ffd0006300580277002d004a008f00b700c0
00de004400640002001a017c0020ff9c008c0026008300a00039041affb5
004c00e8080f00160024003a016f000600150067009e01dc0049004b002d
003b00470089007200470051006700f7013801dc0001000a005d00610094
009b00be00ce00df00190026002e00d6010701f7ffbb004300530063007b
00b900de0542058b0013009100a700a900c100e5012e01a401ea03eeffb5
ffccffeb0026002900310036005b00620062009200a100a700a700cb0223
03a3ff1aff7bffa8ffc8001c004400ab00b400c100c500ce00f601200156
016302a60379fefaff6effab0000000c00150024003a003a0041004c004e
007400a500ce00d600fb0109010901820220023f0263fe11ff170007001f
0020002b00530055006d007e0088008d0094009a009f00af00e8013f0168
01cd01ee020d028002bf0550074e074e09bffdd5ff47fff6000c000c0021
00290057006b0078007e009200930096009a00a100a500c400c400f000fd
0136013b013e01490152018f018601a501f8022b02db02fb030e030f032c
03590360037c03e203f90805fd4ffe97fed0ff50ff78000100010006000a
0025004300440054005c007000730077007c00800088008e008e00900091
00ab00ab00b000b900bf00bf00c300dd00e300e300e600e800ec01020105
0109010a012a012a01300130013b0140014a0155015f01670173019701b6
01b801be01c501ea01f4023402360239024f0252026702700274029002b0
02b102bf02e402f302fb033a03450373037f03ab03c203c803d203da0400
044a046104690475049404b004d504f004f404fe050005230523052e0561
05a0fda2fe4bfe5bff26ff3bff62ff8dff90ff90ffe80007001e00250026
002700440050006200630066006700700070007100710079007e00850091
0096009e00a100a100a500b600b800bc00c000c200c500c600d000da00dd
00dd00e200f700f901000102010501150121012d01310136013d01470147
015a01680176017c0180018e019a01a501b101b501b501c001dc01ea01fe
023902560259025e0276027c028d0297029b02b902c002d602db02ff0306
030f03180347034b0357035b035e0374039603980399039e039f03b803c0
03c60402043a045004720483049004a204af04c704d304dc0530053b058a
058a05b005b505bd05e60612061b0634065306b80706087908e708fe00b3
00c700b100b5000000000000000000000000000000000188011001b100ad
01e70304038002cc0258020b02d6018204cf01270274023c0100058e006e
00f202c0021d01d2023701570363015a002500820166015b009d031c03a2
034a00cc056e0153035001640053049700fc05c30061058a02b20302058a
03fd01f902ab0068008e026bfda9ff59010e005301a402a600ab007d003c
0029041a00d6023904b90125022902bf07ae01b8003e07060339033a080f
07ae01a403e300000053080f01ea006103e2004c00e102a6035202a6080f
00e601dc074f006e00fd03af0000007d003e01a4fe1100a905590260011c
02a4014cfd83fdd8039bff9f011902e20000fd11fd41024301b60155ffaa
02be00ef0097fef904e000be02db005501dc0063006b007800f200530077
003a015600fc020d0029005300610070403f3f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b0042651582320b00d44235921212d2c20204518684420b001602045b0
4676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c
00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a23
4445b01923442d2c2045b00325456164b050515845441b2121592d2cb001
43632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b0074365
0a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58
b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d
2cb01243588745b0112bb0172344b0177ae41b038a45186920b01723448a
8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d
2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185592d
2c20b0032545b019234445b01a23444565234520b00325606a20b0092342
23688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a545823
21b03f1b235961441cb114008a5279b31940201945208a54582321b03f1b
235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d432343
0b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143234365
0b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b000
525823b002253823b002256538008a63381b212121212159012d2c4bb064
51584569b00943608a103a1b212121592d2c01b005251023208af500b001
6023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f5
00edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb0
2b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b80241
23701020b802414520b0005058b00161593a2f182d2c21210c6423648bb8
4000622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d
2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423
648bb84000626023212d2cb4000100000015b00826b00826b00826b00826
0f10161345683ab001162d2cb4000100000015b00826b00826b00826b008
260f1016134568653ab001162d2c4b53234b515a5820458a60441b212159
2d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c
4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c
4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c64
23646164b807085158b00425b00425012046b01060482046b0106048590a
21211b2121592d2cb012435c580cb00425b00425060c6423646164b80708
5158b00425b00425012046b8fff060482046b8fff06048590a21211b2121
592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b
2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b0
0426024b545a8a8a0ab012435c5a58381b2121592d000001000000028000
2a7eb7355f0f3cf5081d080000000000a348bc3b00000000b24cd4e1ffff
fe3e08e7080b0000000b000100000000000000010000080bfe3e00000856
feabfc2e08740001000000000000000000000000000000be04cd00670000
000000fa00000200000002aa00e405b40061040000250464005106aa0047
063900480383003a02aa005402aa002d04000091046400250200006e0464
0025020000910239ffff0400004a040000f00400002c0400005304000020
04000062040000590400004c0400007c04000051023900ac0239008b0464
003c046400250464003c038d00580464002505c700140556002205c70012
04e5001a04e30027061b004804d3002305c7002602aa0033050c004e05c7
0025057d0014071d002505c7ffe805c7004c0625002305ee004a04730026
04bc003804e3003b05850016038300470625003805290042065c002504e3
001602aa00a706e7016a02aa004a054400250400ffef040003da050c0054
046400790464004603f4004503830049042b0047034affff04d3002d02a2
004304d300450464001504640031049c007c042b00280464005804640037
042b00590464006904d3004e0383002b049c004705b40041057d005003f2
005b057d002f03f4005b03d700d3019a00a403d700d60464003404f60013
01fa00790464003c0156feab05b4003604000000060600b9060601300606
00f7060600f60856002907e5004b04d3005d07e5004b04d3005d03330066
04640025034a00690464003c0464007905b4006603f4004103ae006a0464
0025046400250464002404640034080000e604d302390800ff8d05440020
069600e4057d002d065c005e07e501820625004e0625004e069600610625
004d0625004d05b4003805b4003705b4003b05b4003b05b4003a05b4010a
05b4010b0625005305b4004a0652006306520063071f00320696002e0464
00540200009105b4003004d3003004d300300856002907e5004c04d3005d
07e5004c04d3005d03f4002f02a200410652006306520063064a002a05b4
002b03120053031200530312005303120000031200000312000003f401a4
03f4001c03f401a403f401a40652007502a2003e02310000057d02a6057d
02a6057d00430312ff930312025d0312ff93031200230312028103120023
03f4001c01a4001c00000032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320085008500850085008500850085008500850085008500850085
00850085008500d300d300d300d300d300d300d300d300d300d300d300d3
00d300d300000001000000c0006700050000000000020010002f00400000
00ed050f000000000000000a007e0001000000000000007f000000010000
00000003000f007f0001000000000004000f008e0001000000000006000f
009d000300000409000000fe00ac0003000004090001001e01aa00030000
04090002000e01c80003000004090003001e01d60003000004090004001e
01f40003000004090006001e0212547970656661636520a920546865204d
6f6e6f7479706520436f72706f726174696f6e20706c632e204461746120
a920546865204d6f6e6f7479706520436f72706f726174696f6e20706c63
2f5479706520536f6c7574696f6e7320496e632e20313939302d31393932
2e20416c6c205269676874732052657365727665644745414c4d4b2b5379
6d626f6c4d544745414c4d4b2b53796d626f6c4d544745414c4d4b2b5379
6d626f6c4d5400540079007000650066006100630065002000a900200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e00200070006c0063002e00200044
006100740061002000a900200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
00200070006c0063002f005400790070006500200053006f006c00750074
0069006f006e007300200049006e0063002e00200031003900390030002d
0031003900390032002e00200041006c006c002000520069006700680074
0073002000520065007300650072007600650064004700450041004c004d
004b002b00530079006d0062006f006c004d00540052006500670075006c
00610072004700450041004c004d004b002b00530079006d0062006f006c
004d0054004700450041004c004d004b002b00530079006d0062006f006c
004d0054004700450041004c004d004b002b00530079006d0062006f006c
004d00540000411500120227022702260226006f01160001005f01160001
004f01160001003f01160001002f01160001022fb22f1f1fb8022eb2a01f
1fb8022cb21d291fb80224400be11a1f3127121f3c27291fb80217403b6c
291fe0aa191fe1aa191fab27321f883c321f833c321f2f3c321f7627321f
3c27291f27aa291f6f276f6d6f866f87043700161600000012110840b801
e3b655140914093790b801bf40390790bd0790b307906707906407905707
904607903607902e07902b079025079024071408120810080e080c080a08
0808060804080208000814b8ffe0402b0000010014061000000100060400
0001000410000001001002000001000200000001000002010802004a00b0
13034b024b5342b0382b4bb807ff52b0372b4bb007505b58b101018e59b0
382bb00288b801005458b801ffb101018e851bb0124358b9000101ff858d
1bb9000101ff858d5959014bb0c063004b6220b0f65323b8010a515ab005
234201b0124b004b5442180016763f183f123e113946443e113946443e11
3946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b
2b182b2b2b2b2b2b2b2b2b2b2b2b2b4b5079bc001f01750007001f0174b3
071f93072b2b2b4b5379bc00900175000700900174b3079093072b2b2b18
1db0964b5358b0aa1d59b0324b5358b0ff1d5901b341b5407b4565234560
23456560234560b08b766818b080622020b140b54565234520b003266062
636820b003266165b0b5236544b040234420b1417b4565234520b0032660
62636820b003266165b07b236544b0412344b1007b455458b17b406544b2
4140414523614459b9004e0162b12a8e456523456023456560234560b089
766818b080622020b9002a01624565234520b003266062636820b0032661
65b80162236544b02a234420b14e8e4565234520b003266062636820b003
266165b08e236544b04e2344b1008e455458b18e406544b24e404e452361
445945695342014b5058b108004259435c58b108004259b3020b0a124358
601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
002b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373737373001845694418
456944435c58b9ffc00280b2121f322b5900000000>
[423 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 100 162 <00010000fe880223058e0005007eba01ee000701ed401f060201011d0403
1404010004030001011d0405140401020405010401040203b801df401c05
0500010717171a00026b03006b0503580558041906078a21213f182b2b4e
f44de4e410ed10ed4e10456544e6003f3c4d10fd3c393901123987082e2b
057d10c487082e182b057d10c43130014644464409022301010223fe4901
b76bfe4801b8058efc7efc7c03840382>KFAAAA+SymbolMT AddT42Char 
1 0 0 <0002010000000500050000030007003b401e06076302010005046303000a
0605630303021a09070463010019082938182b4e10f43c4dfd3c4e10f63c
4d10fd3c003f3cfd3c3f3cfd3c3130211121112521112101000400fc2003
c0fc400500fb002004c0>KFAAAA+SymbolMT AddT42Char 
KFAAAA+SymbolMT /CharStrings get begin
/g162 162 def
end
KFAAAA+SymbolMT /Encoding get
dup 32 /g162 put
pop
end
%ADOEndSubsetFont
reset_gvm
/QHIBKM+SymbolMT /KFAAAA+SymbolMT findfont ct_VMDictPut
/QHIBKM+SymbolMT*1 
[32{/.notdef}rp /g162 223{/.notdef}rp]
QHIBKM+SymbolMT nf
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
258.72 302.808 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
258.72 302.808 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
QHIBKK+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7EF322BCC006C030AB64D3EF833D53BD938867216DA205
B962D9925E09EE08B8DF37F6D3209FE507D562DC51C880758EA796E486DE516B
D20E232A65BA2969E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QHIBKK+ArialMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
reset_gvm
/QHIBKK+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp /one 2{/.notdef}rp 
/four /five 28{/.notdef}rp /R 22{/.notdef}rp /i 4{/.notdef}rp /n 
/o 4{/.notdef}rp /t /u 138{/.notdef}rp]
QHIBKK+ArialMT nf
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
258.72 300.108 mo
(1,4)
[-4.31879 -2.22156 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: KFAAAA+SymbolMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal KFAAAA+SymbolMT gcheck setglobal} if
1 266 178 <0001003efe880261058e00050074401f0201011d04031404010004030100
0102001d05041405050401040104050500b8023a401d03030201061a0002
6b03006b0503580558041717190706078a21213f182b2b4e10456544f64d
e4e410ed10ed4e10e4003f3c4d10f43c123939011139872e2b087d10c487
082e182b057d10c431301301013301013e01b7fe496b01b8fe48fe880382
0384fc7cfc7e>KFAAAA+SymbolMT AddT42Char 
KFAAAA+SymbolMT /CharStrings get begin
/g178 178 def
end
KFAAAA+SymbolMT /Encoding get
dup 33 /g178 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QHIBKM+SymbolMT*1 
[32{/.notdef}rp /g162 /g178 222{/.notdef}rp]
QHIBKM+SymbolMT nf
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
258.72 289.308 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
258.72 289.308 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
258.72 284.388 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
265.92 270.708 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
265.92 264.168 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
265.92 264.168 mo
( ) false chp
@
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
QHIBKK+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7EF32244785CEA209A0B1AB0C166286B08980771F18A2
E624A38924FBFF483B4270DC9D2DC0993B70234B4EC1271E14F4287F0E8138B3
113D3A2C3498A3A798175EFF8586ADBE42A40FAC722F4FFCCFD944A826B23E73
4742DC56E9B6688C0E5FD7D21A139B312D91D5BDCE396FF7BBECCF42DB4AFC88
249D903E724B304FA10CF534B30789F272BA1A52010A84503E2C2B5833B0AC24
972C530E56F2DDCFAF7F3D2938A2BD7EE7BA1ABFF97A9E066AC38570B8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QHIBKK+ArialMT /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
reset_gvm
/QHIBKK+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp /one /.notdef 
/three /four /five 28{/.notdef}rp /R 22{/.notdef}rp /i 4{/.notdef}rp 
/n /o 4{/.notdef}rp /t /u 138{/.notdef}rp]
QHIBKK+ArialMT nf
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
265.92 261.468 mo
(1,3)
[-4.37897 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
265.92 250.608 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
265.92 250.608 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
265.92 245.688 mo
(o)sh
256.56 278.628 mo
256.56 276.948 li
256.62 276.828 li
256.74 276.768 li
256.86 276.828 li
256.86 278.748 li
256.74 278.808 li
256.62 278.748 li
256.56 278.628 li
cp
255.84 277.368 mo
256.74 275.628 li
257.58 277.368 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
256.02 237.048 mo
256.02 237.468 256.32 237.768 256.74 237.768 cv
257.16 237.768 257.46 237.468 257.46 237.048 cv
257.46 236.628 257.16 236.328 256.74 236.328 cv
256.32 236.328 256.02 236.628 256.02 237.048 cv
ef
.33 lw
1 lc
1 lj
10 ml
256.02 237.048 mo
256.02 237.468 256.32 237.768 256.74 237.768 cv
257.16 237.768 257.46 237.468 257.46 237.048 cv
257.46 236.628 257.16 236.328 256.74 236.328 cv
256.32 236.328 256.02 236.628 256.02 237.048 cv
cp
@
258.9 240.048 mo
257.4 237.768 li
@
256.14 237.768 mo
254.52 240.048 li
@
256.56 236.028 mo
256.56 234.348 li
256.62 234.228 li
256.74 234.168 li
256.86 234.228 li
256.86 236.148 li
256.74 236.208 li
256.62 236.148 li
256.56 236.028 li
cp
255.84 234.768 mo
256.74 233.028 li
257.58 234.768 li
f
235.98 274.848 mo
235.98 275.208 236.34 275.568 236.7 275.568 cv
237.12 275.568 237.48 275.208 237.48 274.848 cv
237.48 274.428 237.12 274.068 236.7 274.068 cv
236.34 274.068 235.98 274.428 235.98 274.848 cv
ef
235.98 274.848 mo
235.98 275.208 236.34 275.568 236.7 275.568 cv
237.12 275.568 237.48 275.208 237.48 274.848 cv
237.48 274.428 237.12 274.068 236.7 274.068 cv
236.34 274.068 235.98 274.428 235.98 274.848 cv
cp
@
235.98 274.068 mo
234.48 271.848 li
@
237.42 274.068 mo
238.92 271.848 li
238.92 239.988 li
@
234.48 271.848 mo
234.48 239.988 li
@
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
238.68 309.348 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
238.68 309.348 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
238.68 306.648 mo
(1,4)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
238.68 295.848 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
238.68 295.848 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
238.68 290.928 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
238.68 284.329 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
245.88 264.049 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
245.88 264.049 mo
( ) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
245.88 261.349 mo
(1,3)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
245.88 250.549 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
245.88 250.549 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
245.88 245.629 mo
(o)sh
236.52 278.568 mo
236.52 276.888 li
236.58 276.768 li
236.7 276.708 li
236.82 276.768 li
236.88 276.888 li
236.88 278.568 li
236.82 278.688 li
236.7 278.748 li
236.58 278.688 li
236.52 278.568 li
cp
235.8 277.308 mo
236.7 275.568 li
237.6 277.308 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
235.98 236.988 mo
235.98 237.408 236.34 237.708 236.7 237.708 cv
237.12 237.708 237.48 237.408 237.48 236.988 cv
237.48 236.568 237.12 236.268 236.7 236.268 cv
236.34 236.268 235.98 236.568 235.98 236.988 cv
ef
.33 lw
1 lc
1 lj
10 ml
235.98 236.988 mo
235.98 237.408 236.34 237.708 236.7 237.708 cv
237.12 237.708 237.48 237.408 237.48 236.988 cv
237.48 236.568 237.12 236.268 236.7 236.268 cv
236.34 236.268 235.98 236.568 235.98 236.988 cv
cp
@
238.92 239.988 mo
237.42 237.708 li
@
236.16 237.708 mo
234.48 239.988 li
@
236.52 235.968 mo
236.52 234.288 li
236.58 234.168 li
236.7 234.108 li
236.82 234.168 li
236.88 234.288 li
236.88 235.968 li
236.82 236.088 li
236.7 236.148 li
236.58 236.088 li
236.52 235.968 li
cp
235.8 234.708 mo
236.7 232.968 li
237.6 234.708 li
f
218.04 274.908 mo
218.04 275.268 218.4 275.628 218.82 275.628 cv
219.18 275.628 219.54 275.268 219.54 274.908 cv
219.54 274.488 219.18 274.128 218.82 274.128 cv
218.4 274.128 218.04 274.488 218.04 274.908 cv
ef
218.04 274.908 mo
218.04 275.268 218.4 275.628 218.82 275.628 cv
219.18 275.628 219.54 275.268 219.54 274.908 cv
219.54 274.488 219.18 274.128 218.82 274.128 cv
218.4 274.128 218.04 274.488 218.04 274.908 cv
cp
@
218.04 274.128 mo
216.54 271.908 li
@
219.48 274.128 mo
220.98 271.908 li
220.98 240.048 li
@
216.54 271.908 mo
216.54 240.048 li
@
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 327.768 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 327.768 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 325.068 mo
(1,4)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 314.268 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 314.268 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 309.348 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 302.749 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 296.269 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 296.269 mo
( ) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 293.508 mo
(1,3)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 282.649 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
220.8 282.649 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
227.88 245.749 mo
(o)sh
218.58 278.628 mo
218.58 276.948 li
218.64 276.828 li
218.76 276.768 li
218.88 276.828 li
218.94 276.948 li
218.94 278.628 li
218.88 278.748 li
218.76 278.808 li
218.64 278.748 li
218.58 278.628 li
cp
217.86 277.368 mo
218.76 275.628 li
219.66 277.368 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
218.04 237.048 mo
218.04 237.468 218.4 237.768 218.82 237.768 cv
219.18 237.768 219.54 237.468 219.54 237.048 cv
219.54 236.628 219.18 236.328 218.82 236.328 cv
218.4 236.328 218.04 236.628 218.04 237.048 cv
ef
.33 lw
1 lc
1 lj
10 ml
218.04 237.048 mo
218.04 237.468 218.4 237.768 218.82 237.768 cv
219.18 237.768 219.54 237.468 219.54 237.048 cv
219.54 236.628 219.18 236.328 218.82 236.328 cv
218.4 236.328 218.04 236.628 218.04 237.048 cv
cp
@
220.98 240.048 mo
219.48 237.768 li
@
218.22 237.768 mo
216.54 240.048 li
@
218.58 236.028 mo
218.58 234.348 li
218.64 234.228 li
218.76 234.168 li
218.88 234.228 li
218.94 234.348 li
218.94 236.028 li
218.88 236.148 li
218.76 236.208 li
218.64 236.148 li
218.58 236.028 li
cp
217.86 234.768 mo
218.76 233.028 li
219.66 234.768 li
f
202.02 274.908 mo
202.02 275.268 202.38 275.628 202.8 275.628 cv
203.22 275.628 203.52 275.268 203.52 274.908 cv
203.52 274.488 203.22 274.128 202.8 274.128 cv
202.38 274.128 202.02 274.488 202.02 274.908 cv
ef
202.02 274.908 mo
202.02 275.268 202.38 275.628 202.8 275.628 cv
203.22 275.628 203.52 275.268 203.52 274.908 cv
203.52 274.488 203.22 274.128 202.8 274.128 cv
202.38 274.128 202.02 274.488 202.02 274.908 cv
cp
@
202.02 274.128 mo
200.58 271.908 li
@
203.46 274.128 mo
204.96 271.908 li
204.96 240.048 li
@
200.58 271.908 mo
200.58 240.048 li
@
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 334.368 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 334.368 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 331.668 mo
(1,4)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 320.868 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 320.868 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 315.948 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 309.349 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 302.869 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 302.869 mo
( ) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 300.108 mo
(1,3)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 289.249 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 289.249 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
204.78 284.329 mo
(o)sh
202.62 278.628 mo
202.62 276.828 li
202.74 276.768 li
202.86 276.828 li
202.92 276.948 li
202.92 278.628 li
202.86 278.748 li
202.74 278.808 li
202.62 278.748 li
202.62 278.628 li
cp
201.9 277.368 mo
202.74 275.628 li
203.64 277.368 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
202.02 237.048 mo
202.02 237.468 202.38 237.768 202.8 237.768 cv
203.22 237.768 203.52 237.468 203.52 237.048 cv
203.52 236.628 203.22 236.328 202.8 236.328 cv
202.38 236.328 202.02 236.628 202.02 237.048 cv
ef
.33 lw
1 lc
1 lj
10 ml
202.02 237.048 mo
202.02 237.468 202.38 237.768 202.8 237.768 cv
203.22 237.768 203.52 237.468 203.52 237.048 cv
203.52 236.628 203.22 236.328 202.8 236.328 cv
202.38 236.328 202.02 236.628 202.02 237.048 cv
cp
@
204.96 240.048 mo
203.46 237.768 li
@
202.2 237.768 mo
200.58 240.048 li
@
202.62 236.028 mo
202.62 234.228 li
202.74 234.168 li
202.86 234.228 li
202.92 234.348 li
202.92 236.028 li
202.86 236.148 li
202.74 236.208 li
202.62 236.148 li
202.62 236.028 li
cp
201.9 234.768 mo
202.74 233.028 li
203.64 234.768 li
f
281.16 274.908 mo
281.16 275.268 281.52 275.628 281.94 275.628 cv
282.36 275.628 282.66 275.268 282.66 274.908 cv
282.66 274.488 282.36 274.128 281.94 274.128 cv
281.52 274.128 281.16 274.488 281.16 274.908 cv
ef
281.16 274.908 mo
281.16 275.268 281.52 275.628 281.94 275.628 cv
282.36 275.628 282.66 275.268 282.66 274.908 cv
282.66 274.488 282.36 274.128 281.94 274.128 cv
281.52 274.128 281.16 274.488 281.16 274.908 cv
cp
@
281.16 274.128 mo
279.72 271.908 li
@
282.6 274.128 mo
284.1 271.908 li
284.1 240.048 li
@
279.72 271.908 mo
279.72 240.048 li
@
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
283.92 296.208 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
283.92 296.208 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
283.92 293.508 mo
(1,4)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
283.92 282.708 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
283.92 282.708 mo
(!) false chp
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
291.12 270.708 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
291.12 264.168 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
291.12 264.168 mo
( ) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
291.12 261.468 mo
(1,3)
[-4.37897 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
291.12 250.608 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
291.12 250.608 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
291.12 245.688 mo
(o)sh
281.76 278.628 mo
281.76 276.828 li
281.88 276.768 li
282 276.828 li
282.06 276.948 li
282.06 278.628 li
282 278.748 li
281.88 278.808 li
281.76 278.748 li
281.76 278.628 li
cp
281.04 277.368 mo
281.88 275.628 li
282.78 277.368 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
281.16 237.048 mo
281.16 237.468 281.52 237.768 281.94 237.768 cv
282.36 237.768 282.66 237.468 282.66 237.048 cv
282.66 236.628 282.36 236.328 281.94 236.328 cv
281.52 236.328 281.16 236.628 281.16 237.048 cv
ef
.33 lw
1 lc
1 lj
10 ml
281.16 237.048 mo
281.16 237.468 281.52 237.768 281.94 237.768 cv
282.36 237.768 282.66 237.468 282.66 237.048 cv
282.66 236.628 282.36 236.328 281.94 236.328 cv
281.52 236.328 281.16 236.628 281.16 237.048 cv
cp
@
284.1 240.048 mo
282.6 237.768 li
@
281.34 237.768 mo
279.72 240.048 li
@
281.76 236.028 mo
281.76 234.228 li
281.88 234.168 li
282 234.228 li
282.06 234.348 li
282.06 236.028 li
282 236.148 li
281.88 236.208 li
281.76 236.148 li
281.76 236.028 li
cp
281.04 234.768 mo
281.88 233.028 li
282.78 234.768 li
f
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
277.02 245.808 mo
(o)sh
308.04 274.548 mo
308.04 274.968 308.34 275.268 308.76 275.268 cv
309.18 275.268 309.54 274.968 309.54 274.548 cv
309.54 274.128 309.18 273.828 308.76 273.828 cv
308.34 273.828 308.04 274.128 308.04 274.548 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
308.04 274.548 mo
308.04 274.968 308.34 275.268 308.76 275.268 cv
309.18 275.268 309.54 274.968 309.54 274.548 cv
309.54 274.128 309.18 273.828 308.76 273.828 cv
308.34 273.828 308.04 274.128 308.04 274.548 cv
cp
@
308.04 273.828 mo
306.54 271.548 li
@
309.48 273.828 mo
310.92 271.548 li
310.92 239.688 li
@
306.54 271.548 mo
306.54 239.688 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
317.94 270.408 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
317.94 263.868 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
317.94 263.868 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
317.94 261.168 mo
(1,3)
[-4.37897 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
317.94 250.308 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
317.94 250.308 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
317.94 245.388 mo
(o)sh
308.58 278.328 mo
308.58 276.588 li
308.64 276.468 li
308.88 276.468 li
308.88 278.448 li
308.76 278.508 li
308.64 278.448 li
308.58 278.328 li
cp
307.86 277.068 mo
308.76 275.268 li
309.6 277.068 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
308.04 236.688 mo
308.04 237.108 308.34 237.468 308.76 237.468 cv
309.18 237.468 309.54 237.108 309.54 236.688 cv
309.54 236.328 309.18 235.968 308.76 235.968 cv
308.34 235.968 308.04 236.328 308.04 236.688 cv
ef
.33 lw
1 lc
1 lj
10 ml
308.04 236.688 mo
308.04 237.108 308.34 237.468 308.76 237.468 cv
309.18 237.468 309.54 237.108 309.54 236.688 cv
309.54 236.328 309.18 235.968 308.76 235.968 cv
308.34 235.968 308.04 236.328 308.04 236.688 cv
cp
@
310.92 239.688 mo
309.48 237.468 li
@
308.22 237.468 mo
306.54 239.688 li
@
308.58 235.668 mo
308.58 233.988 li
308.64 233.868 li
308.76 233.808 li
308.88 233.988 li
308.88 235.788 li
308.76 235.848 li
308.64 235.788 li
308.58 235.668 li
cp
307.86 234.408 mo
308.76 232.668 li
309.6 234.408 li
f
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
303.96 263.868 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
303.96 263.868 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
303.96 261.168 mo
(1,4)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
303.96 250.368 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
303.96 250.368 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
303.96 245.448 mo
(o)sh
227.94 98.988 mo
227.94 99.408 228.3 99.708 228.72 99.708 cv
229.08 99.708 229.44 99.408 229.44 98.988 cv
229.44 98.5681 229.08 98.2681 228.72 98.2681 cv
228.3 98.2681 227.94 98.5681 227.94 98.988 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.33 lw
1 lc
1 lj
10 ml
227.94 98.988 mo
227.94 99.408 228.3 99.708 228.72 99.708 cv
229.08 99.708 229.44 99.408 229.44 98.988 cv
229.44 98.568 229.08 98.268 228.72 98.268 cv
228.3 98.268 227.94 98.568 227.94 98.988 cv
cp
@
227.94 98.2681 mo
226.44 95.9881 li
@
229.38 98.2681 mo
230.88 95.9881 li
230.88 64.1281 li
@
226.44 95.988 mo
226.44 64.128 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
237.9 88.248 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
237.9 81.7077 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
237.9 81.7077 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
237.9 79.0078 mo
(1,3)
[-4.37897 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
237.9 68.1478 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
237.9 68.1478 mo
(!) false chp
@
228.48 102.768 mo
228.48 101.028 li
228.54 100.908 li
228.78 100.908 li
228.84 101.028 li
228.84 102.768 li
228.78 102.888 li
228.66 102.948 li
228.54 102.888 li
228.48 102.768 li
cp
227.76 101.508 mo
228.66 99.708 li
229.56 101.508 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
227.94 61.128 mo
227.94 61.548 228.3 61.908 228.72 61.908 cv
229.08 61.908 229.44 61.548 229.44 61.128 cv
229.44 60.768 229.08 60.408 228.72 60.408 cv
228.3 60.408 227.94 60.768 227.94 61.128 cv
ef
.33 lw
1 lc
1 lj
10 ml
227.94 61.128 mo
227.94 61.548 228.3 61.908 228.72 61.908 cv
229.08 61.908 229.44 61.548 229.44 61.128 cv
229.44 60.768 229.08 60.408 228.72 60.408 cv
228.3 60.408 227.94 60.768 227.94 61.128 cv
cp
@
230.88 64.128 mo
229.38 61.908 li
@
228.12 61.908 mo
226.44 64.128 li
@
228.48 60.108 mo
228.48 58.428 li
228.54 58.308 li
228.66 58.248 li
228.78 58.308 li
228.84 58.428 li
228.84 60.108 li
228.78 60.228 li
228.66 60.288 li
228.54 60.228 li
228.48 60.108 li
cp
227.76 58.848 mo
228.66 57.108 li
229.56 58.848 li
f
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
223.92 88.428 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
223.92 88.428 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
223.92 85.7281 mo
(1,4)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
223.92 74.9284 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
223.92 74.9284 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
223.92 70.0085 mo
(o)sh
230.76 55.9085 mo
(o)sh
253.02 99.108 mo
253.02 99.528 253.38 99.828 253.8 99.828 cv
254.16 99.828 254.52 99.528 254.52 99.108 cv
254.52 98.688 254.16 98.3881 253.8 98.3881 cv
253.38 98.3881 253.02 98.688 253.02 99.108 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.33 lw
1 lc
1 lj
10 ml
253.02 99.108 mo
253.02 99.528 253.38 99.828 253.8 99.828 cv
254.16 99.828 254.52 99.528 254.52 99.108 cv
254.52 98.688 254.16 98.388 253.8 98.388 cv
253.38 98.388 253.02 98.688 253.02 99.108 cv
cp
@
253.02 98.3881 mo
251.52 96.1081 li
@
254.46 98.3881 mo
255.96 96.1081 li
255.96 64.2481 li
@
251.52 96.108 mo
251.52 64.248 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
262.98 88.368 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
262.98 81.8277 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
262.98 81.8277 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
262.98 79.1277 mo
(1,3)
[-4.37897 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
262.98 68.2678 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
262.98 68.2678 mo
(!) false chp
@
253.56 102.888 mo
253.56 101.148 li
253.62 101.028 li
253.86 101.028 li
253.92 101.148 li
253.92 102.888 li
253.86 103.008 li
253.62 103.008 li
253.56 102.888 li
cp
252.84 101.628 mo
253.74 99.828 li
254.64 101.628 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
253.02 61.248 mo
253.02 61.668 253.38 62.0281 253.8 62.0281 cv
254.16 62.0281 254.52 61.668 254.52 61.248 cv
254.52 60.8281 254.16 60.5281 253.8 60.5281 cv
253.38 60.5281 253.02 60.8281 253.02 61.248 cv
ef
.33 lw
1 lc
1 lj
10 ml
253.02 61.248 mo
253.02 61.668 253.38 62.028 253.8 62.028 cv
254.16 62.028 254.52 61.668 254.52 61.248 cv
254.52 60.828 254.16 60.528 253.8 60.528 cv
253.38 60.528 253.02 60.828 253.02 61.248 cv
cp
@
255.96 64.248 mo
254.46 62.028 li
@
253.2 62.0281 mo
251.52 64.2481 li
@
253.56 60.228 mo
253.56 58.548 li
253.62 58.428 li
253.74 58.368 li
253.86 58.428 li
253.92 58.548 li
253.92 60.228 li
253.86 60.348 li
253.74 60.408 li
253.62 60.348 li
253.56 60.228 li
cp
252.84 58.968 mo
253.74 57.228 li
254.64 58.968 li
f
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
249 81.948 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
249 81.948 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
249 79.248 mo
(1,4)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
249 68.4484 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
249 68.4484 mo
(!) false chp
@
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
QHIBKK+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D0F4790807CBACD8FD659970B8> |-
/p <1C60D8A8C9B7EF321358E32AAA345A5AF7CCBB1B651263DA97D7C5AD4C64
3ABAC27108E1DC5F64D49651712DD7CE0160F049F6EAB9902AA41DF02BCF26FA
46D961F9B17F535020755D6B92404E78327CEC4AF30ECBF0272F4F90D10655F4
9F35FD26E66BF3BA885DEFB8EF681D39EDE55C6486BE902F809F2A18F9343840
2E800ADB6004F556B7630C5D9436F57AA86148630065BC5512A0B98761542B41
43ECE97D8275> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QHIBKK+ArialMT /Encoding get
dup 32 /space put
dup 112 /p put
pop
%ADOEndSubsetFont
reset_gvm
/QHIBKK+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp 
/one /.notdef /three /four /five 28{/.notdef}rp /R 22{/.notdef}rp 
/i 4{/.notdef}rp /n /o /p 3{/.notdef}rp /t /u 
138{/.notdef}rp]
QHIBKK+ArialMT nf
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
255.84 56.0282 mo
(o o)
[-4.37897 -2.22156 0 ]ysh
185.52 327.348 mo
(inputRR\(5,5\))
[-1.73685 -4.38214 -4.38214 -4.38214 -17.9412 -5.69687 -5.69684 -2.61594 -4.38214 -2.22156 -4.38211 0 
]ysh
180.54 298.848 mo
181.56 298.848 li
181.56 306.228 li
183.66 306.228 li
183.66 298.848 li
184.68 298.848 li
182.58 296.388 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
.33 lw
1 lc
1 lj
10 ml
180.54 298.848 mo
181.56 298.848 li
181.56 306.228 li
183.66 306.228 li
183.66 298.848 li
184.68 298.848 li
182.58 296.388 li
cp
@
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
185.58 247.488 mo
(RR\(1,1\))
[-5.69922 -5.69925 -2.61829 -4.38452 -2.22156 -4.38452 0 ]ysh
180.72 209.568 mo
181.74 209.568 li
181.74 216.948 li
183.78 216.948 li
183.78 209.568 li
184.8 209.568 li
182.76 207.108 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
180.72 209.568 mo
181.74 209.568 li
181.74 216.948 li
183.78 216.948 li
183.78 209.568 li
184.8 209.568 li
182.76 207.108 li
cp
@
0 gry
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
185.4 204.048 mo
(output)
[-4.37897 -4.37897 -2.22156 -4.37897 -4.37897 0 ]ysh
177.18 260.148 mo
177.96 259.428 li
183.18 264.648 li
184.62 263.148 li
179.4 257.928 li
180.12 257.208 li
176.94 256.908 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
177.18 260.148 mo
177.96 259.428 li
183.18 264.648 li
184.62 263.148 li
179.4 257.928 li
180.12 257.208 li
176.94 256.908 li
cp
@
189.12 260.208 mo
188.4 259.488 li
183.12 264.708 li
181.68 263.208 li
186.9 257.988 li
186.18 257.268 li
189.36 256.968 li
ef
189.12 260.208 mo
188.4 259.488 li
183.12 264.708 li
181.68 263.208 li
186.9 257.988 li
186.18 257.268 li
189.36 256.968 li
cp
@
182.82 252.468 mo
182.1 251.748 li
177.72 256.188 li
176.22 254.688 li
180.66 250.308 li
179.94 249.588 li
182.82 249.588 li
ef
182.82 252.468 mo
182.1 251.748 li
177.72 256.188 li
176.22 254.688 li
180.66 250.308 li
179.94 249.588 li
182.82 249.588 li
cp
@
183.48 252.648 mo
184.26 251.928 li
188.52 256.188 li
189.96 254.748 li
185.7 250.428 li
186.42 249.708 li
183.54 249.768 li
ef
183.48 252.648 mo
184.26 251.928 li
188.52 256.188 li
189.96 254.748 li
185.7 250.428 li
186.42 249.708 li
183.54 249.768 li
cp
@
gsave
195.66 278.148 mo
195.66 276.588 li
188.28 276.588 li
188.28 273.468 li
195.66 273.468 li
195.66 271.908 li
198.12 275.028 li
eclp
198.18 278.208 mo
198.18 271.848 li
188.22 271.848 li
188.22 278.208 li
cp
gsave
/1 /CSD get_res idxcs
clp
[0 -1 -1 0 648.648 174.24 ]ct
[6.36 0 0 9.96 -103.968 450.468 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 166 
/M[1 0 0 -166 0 166 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WiE*!s8W-!s8W."9\i1"U,&5"U5/8"pP;;#7(SA#mgqG$O[=N$k*RS%LrsZ%hK<b&eYil'GV>u
(Ddo*)&aD4*$$(A+!;^M+sS?Z,pjuf-n-Vr/1iJ-0JG4:1GgpG2E*QS3BB5a4[)(q5X@_(6UX@47n?3D
92&&T:Jand;cHat='/U/>?b?<?=.)K@Uiq[AnPdkC27X&DJo~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
195.66 240.288 mo
195.66 238.668 li
188.28 238.668 li
188.28 235.548 li
195.66 235.548 li
195.66 233.988 li
198.12 237.108 li
eclp
198.18 240.288 mo
198.18 233.928 li
188.22 233.928 li
188.22 240.288 li
cp
gsave
/1 /CSD get_res idxcs
clp
[0 -1 -1 0 648.648 174.24 ]ct
[6.36 0 0 9.96 -66.0481 450.468 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 166 
/M[1 0 0 -166 0 166 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WiE*!s8W-!s8W."9\i1"U,&5"U5/8"pP;;#7(SA#mgqG$O[=N$k*RS%LrsZ%hK<b&eYil'GV>u
(Ddo*)&aD4*$$(A+!;^M+sS?Z,pjuf-n-Vr/1iJ-0JG4:1GgpG2E*QS3BB5a4[)(q5X@_(6UX@47n?3D
92&&T:Jand;cHat='/U/>?b?<?=.)K@Uiq[AnPdkC27X&DJo~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
278.94 99.588 mo
278.94 100.008 279.24 100.368 279.66 100.368 cv
280.08 100.368 280.44 100.008 280.44 99.588 cv
280.44 99.168 280.08 98.868 279.66 98.868 cv
279.24 98.868 278.94 99.168 278.94 99.588 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
278.94 99.588 mo
278.94 100.008 279.24 100.368 279.66 100.368 cv
280.08 100.368 280.44 100.008 280.44 99.588 cv
280.44 99.168 280.08 98.868 279.66 98.868 cv
279.24 98.868 278.94 99.168 278.94 99.588 cv
cp
@
278.94 98.868 mo
277.44 96.588 li
@
280.38 98.868 mo
281.82 96.588 li
281.82 64.728 li
@
277.44 96.588 mo
277.44 64.728 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
288.72 70.488 mo
(x)sh
279.48 103.368 mo
279.48 101.688 li
279.54 101.568 li
279.66 101.508 li
279.78 101.568 li
279.84 101.688 li
279.84 103.368 li
279.78 103.488 li
279.66 103.548 li
279.54 103.488 li
279.48 103.368 li
cp
278.76 102.108 mo
279.66 100.368 li
280.5 102.108 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
278.94 61.728 mo
278.94 62.148 279.24 62.5081 279.66 62.5081 cv
280.08 62.5081 280.44 62.148 280.44 61.728 cv
280.44 61.368 280.08 61.0081 279.66 61.0081 cv
279.24 61.0081 278.94 61.368 278.94 61.728 cv
ef
278.94 61.728 mo
278.94 62.148 279.24 62.508 279.66 62.508 cv
280.08 62.508 280.44 62.148 280.44 61.728 cv
280.44 61.368 280.08 61.008 279.66 61.008 cv
279.24 61.008 278.94 61.368 278.94 61.728 cv
cp
@
281.82 64.728 mo
280.38 62.508 li
@
279.12 62.5081 mo
277.44 64.7281 li
@
279.48 60.768 mo
279.48 59.028 li
279.54 58.908 li
279.66 58.848 li
279.78 58.908 li
279.84 59.028 li
279.84 60.768 li
279.78 60.888 li
279.54 60.888 li
279.48 60.768 li
cp
278.76 59.448 mo
279.66 57.708 li
280.5 59.448 li
f
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
274.92 82.488 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
274.92 82.488 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
274.92 79.7881 mo
(1,1)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
274.92 68.9884 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
274.92 68.9884 mo
(!) false chp
@
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
281.88 56.5081 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
281.88 56.5081 mo
( ) false chp
@
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
QHIBKK+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7EF3267924C0E841D844D96E52D213648D8C77257F2277B
A4C41FB5CAF249253485C39B4DE4DC6EDB2B1015C856CF7517B514C527C22A86
B6B9D1C6F1114C96115314170D8261584309E37DE43EA36E0BC6C93BC2D7793C
3C49D34F50BC163C785C4D45779EEA84466CA0BBF46D1A8CF13659> |-
/six <1C60D8A8C9B7EF3269F625B6673B9EA52CBA62CA672C606BDB5B836B17
C2CE80FAB2D897CADEAB175E6C7DC01291E9F7084B4CBF4BC2C2DC4CD8B1CF88
C1312A30A6A1D5F0021F394973BE4EB0C30E6B34C0E729C5127993481ED48F35
3CCB40BC49153F289F22306CD57489660BDF3D9EB6D0D1FB1EA6FEEC6C28437D
C20763E0A7D9F9FB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QHIBKK+ArialMT /Encoding get
dup 50 /two put
dup 54 /six put
pop
%ADOEndSubsetFont
reset_gvm
/QHIBKK+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp 
/one /two /three /four /five /six 27{/.notdef}rp /R 
22{/.notdef}rp /i 4{/.notdef}rp /n /o /p 3{/.notdef}rp /t 
/u 138{/.notdef}rp]
QHIBKK+ArialMT nf
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
281.88 53.8081 mo
(2,6)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
281.88 43.0084 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
281.88 43.0084 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
281.88 38.0885 mo
(o o)
[-4.37897 -2.22156 0 ]ysh
303.84 99.288 mo
303.84 99.648 304.2 100.008 304.62 100.008 cv
304.98 100.008 305.34 99.648 305.34 99.288 cv
305.34 98.868 304.98 98.508 304.62 98.508 cv
304.2 98.508 303.84 98.868 303.84 99.288 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.33 lw
1 lc
1 lj
10 ml
303.84 99.288 mo
303.84 99.648 304.2 100.008 304.62 100.008 cv
304.98 100.008 305.34 99.648 305.34 99.288 cv
305.34 98.868 304.98 98.508 304.62 98.508 cv
304.2 98.508 303.84 98.868 303.84 99.288 cv
cp
@
303.84 98.508 mo
302.34 96.288 li
@
305.28 98.508 mo
306.78 96.288 li
306.78 64.428 li
@
302.34 96.288 mo
302.34 64.428 li
@
304.38 103.008 mo
304.38 101.328 li
304.44 101.208 li
304.56 101.148 li
304.68 101.208 li
304.74 101.328 li
304.74 103.008 li
304.68 103.128 li
304.56 103.188 li
304.44 103.128 li
304.38 103.008 li
cp
303.66 101.748 mo
304.56 100.008 li
305.46 101.748 li
f
303.84 61.428 mo
303.84 61.848 304.2 62.148 304.62 62.148 cv
304.98 62.148 305.34 61.848 305.34 61.428 cv
305.34 61.0081 304.98 60.7081 304.62 60.7081 cv
304.2 60.7081 303.84 61.0081 303.84 61.428 cv
ef
303.84 61.428 mo
303.84 61.848 304.2 62.148 304.62 62.148 cv
304.98 62.148 305.34 61.848 305.34 61.428 cv
305.34 61.008 304.98 60.708 304.62 60.708 cv
304.2 60.708 303.84 61.008 303.84 61.428 cv
cp
@
306.78 64.428 mo
305.28 62.148 li
@
304.02 62.148 mo
302.34 64.428 li
@
304.38 60.408 mo
304.38 58.728 li
304.44 58.608 li
304.56 58.548 li
304.68 58.608 li
304.74 58.728 li
304.74 60.408 li
304.68 60.528 li
304.56 60.588 li
304.44 60.528 li
304.38 60.408 li
cp
303.66 59.148 mo
304.56 57.408 li
305.46 59.148 li
f
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
299.82 82.128 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
299.82 82.128 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
299.82 79.428 mo
(1,1)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
299.82 68.6284 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
299.82 68.6284 mo
(!) false chp
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
306.78 56.148 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
306.78 49.6077 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
306.78 49.6077 mo
( ) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
306.78 46.9077 mo
(2,6)
[-4.37897 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
306.78 36.0478 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
306.78 36.0478 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
306.78 31.1279 mo
(o o)
[-4.37897 -2.22156 0 ]ysh
322.02 99.048 mo
322.02 99.468 322.32 99.768 322.74 99.768 cv
323.16 99.768 323.46 99.468 323.46 99.048 cv
323.46 98.6281 323.16 98.3281 322.74 98.3281 cv
322.32 98.3281 322.02 98.6281 322.02 99.048 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.33 lw
1 lc
1 lj
10 ml
322.02 99.048 mo
322.02 99.468 322.32 99.768 322.74 99.768 cv
323.16 99.768 323.46 99.468 323.46 99.048 cv
323.46 98.628 323.16 98.328 322.74 98.328 cv
322.32 98.328 322.02 98.628 322.02 99.048 cv
cp
@
322.02 98.3281 mo
320.52 96.0481 li
@
323.4 98.3281 mo
324.9 96.0481 li
324.9 64.1881 li
@
320.52 96.048 mo
320.52 64.188 li
@
322.56 102.828 mo
322.56 101.088 li
322.62 100.968 li
322.86 100.968 li
322.86 102.948 li
322.74 103.008 li
322.62 102.948 li
322.56 102.828 li
cp
321.84 101.568 mo
322.74 99.768 li
323.58 101.568 li
f
322.02 61.188 mo
322.02 61.608 322.32 61.9681 322.74 61.9681 cv
323.16 61.9681 323.46 61.608 323.46 61.188 cv
323.46 60.7681 323.16 60.4681 322.74 60.4681 cv
322.32 60.4681 322.02 60.7681 322.02 61.188 cv
ef
322.02 61.188 mo
322.02 61.608 322.32 61.968 322.74 61.968 cv
323.16 61.968 323.46 61.608 323.46 61.188 cv
323.46 60.768 323.16 60.468 322.74 60.468 cv
322.32 60.468 322.02 60.768 322.02 61.188 cv
cp
@
324.9 64.188 mo
323.4 61.968 li
@
322.14 61.9681 mo
320.52 64.1881 li
@
322.56 60.168 mo
322.56 58.488 li
322.62 58.368 li
322.74 58.308 li
322.86 58.368 li
322.86 60.288 li
322.74 60.348 li
322.62 60.288 li
322.56 60.168 li
cp
321.84 58.908 mo
322.74 57.168 li
323.58 58.908 li
f
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 55.9681 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 55.9681 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 53.2682 mo
(2,1)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 42.4685 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 42.4685 mo
(!) false chp
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 37.5486 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 31.0684 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 31.0684 mo
( ) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 28.3083 mo
(2,6)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 17.4484 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 17.4484 mo
(!) false chp
@
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
QHIBKK+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C66C118D247F858C73C47E3F4E6A6D96F995D033
A910C> |-
/bracketleft <1C60D8A8C9B854D0CC118562DA0B9B7EDC4708242A129F7FDA
76E8248E06FA2AA8230264BF5E887923BB> |-
/bracketright <1C60D8A8C9B854D0F43DC2CCF406001CFBEEF05F0764DAD33
08B0CE0223D083B89DD7D4227A758DC900F96BF> |-
/a <1C60D8A8C9B7EF326DA7DF6E992BB0067378CC2864443DD75F40C3F59BFA
E780442B93B6E9E205685F556603FDD13F43D7CFBA44B5FD94B172C1BAEAE134
90EC3F3CBF4B3033E0CFFB04D712ACAE53AC93BF916BCE432A2C3D908CE096B9
470EA658F5F9B573FFD8FE15CC5DA0E3B4E98C53A962DFC58BD092E98919B03F
2DF5CDAD8B352EA1AE212E81DCE57F9D7572BFCCB2BA60A4A5C55A7B7D088869
29F7B538F6F40182A00EFF18601643CDBDB7C59D7FDE2FDC86297A0526C719D7
1338> |-
/c <1C60D8A8C9B7A73DFCC965B95B407B63A21A323AC35889E4BD58B575823F
3D4C1849E342B371D24262A00F1B2118FF5BEF66219ACE8843324D9DE60D5A0C
40D6B21D6BB545548D091BEA6C08BFEE3773C5CA8BCA4E16C0DF3B738B5B4CA6
F12725C716> |-
/g <1C60D8A8C9B7EF327162A0E60DEADFC4B71361DE17F3AD9FB4F969218EFD
9B98EE4AD3F5ACD5F672F213D044BBEEED89EBDDAB7DBE036D1A33D4A3E36E30
BD6ACBDFC7B895FD67DBFFC2DCCD8F029AF9A8D463D2017E62B2B24BC48A314E
98D224948385897F08D68B6A608A8AC850FEB8FA1430D9D80A70CBD24E459805
E5F67372A3BB992C8607CF47679AE0B13147AC8AB721879D5078B035826B670D
317DB6BF95F3193D61C90A3EA0C99AB8ED74AF6617CFA5889BB7C23B99A42272
15> |-
/h <1C60D8A8C9B7EF32120E99BF44821945DDC2B4EFD38037A015A75CE173B6
AC0B36FA7934ECB2789D63BE76D2E6D4AB6FB403DBC988B8E6745C79D28C1F4C
9AFD120F64FD9576BF5E839856324CA83C437F59568D46BC0A0523> |-
/l <1C60D8A8C9B88C084B70B34E18F97D598FFC8BBB87271DAB31AE82C7D5> |-
/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103ED63F6704BBF19B
FEDC611823F708F8CDC822B4765D0EA33D8918C5115C458B26634AC5E2670C4B
8962BBF3CF9C48946A0DC46F480672849B689EA7D57F5DF91E25DFD9B529EB14
2A1A839E512F7962D9E8B6440BB69ED272488E4A704361F8BFC3459B2DF3FCAF
F00E5B9790F065B3476716D31B338D> |-
/r <1C60D8A8C9B81F2C062E4A14544392D75EFC1DE071A88148476E7F4ADEB8
F773ACAC5F6D1E41C9D8141AD151602045512C4C321BE5332ACD4A9A1A81F153
B5A575F3D6F73178CB085E6B21> |-
/s <1C60D8A8C9B7A73DF6B5A4EE8BDAC430AB40D072096BA1391FB87ABD8D54
3094852EEAF06243E7B5ADCF9C1EF5646B8FC5B51310596E132370ECE7C9D12E
2BFFBF299CB441CA112192E2BF1E03F6D4324D162B40F907462F1CDA63BEAC17
54B4842C0FABDAE30E17E7E60566DCCF4C8EA4CA26C6ED> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QHIBKK+ArialMT /Encoding get
dup 45 /hyphen put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 99 /c put
dup 103 /g put
dup 104 /h put
dup 108 /l put
dup 109 /m put
dup 114 /r put
dup 115 /s put
pop
%ADOEndSubsetFont
reset_gvm
/QHIBKK+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
3{/.notdef}rp /one /two /three /four /five /six 27{/.notdef}rp 
/R 8{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef 
/c 3{/.notdef}rp /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
138{/.notdef}rp]
QHIBKK+ArialMT nf
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
324.96 12.5284 mo
(o o)
[-4.31879 -2.22156 0 ]ysh
212.4 231.768 mo
([pass-uncomp])
[-2.22156 -4.38766 -4.3877 -3.94415 -3.94415 -2.62146 -4.3877 -4.38766 -3.94418 -4.38766 -6.65988 -4.38766 
0 ]ysh
229.26 231.768 mo
([pass-comp-short])
[-2.19937 -4.40115 -4.40115 -3.95761 -3.95764 -2.63492 -3.95761 -4.40115 -6.59491 -4.40115 -2.63492 -3.95764 
-4.40112 -4.40115 -2.63492 -2.19937 0 ]ysh
248.76 231.768 mo
([pass-uncomp])
[-2.22156 -4.38766 -4.3877 -3.94415 -3.94415 -2.62146 -4.3877 -4.38766 -3.94418 -4.38766 -6.65988 -4.38766 
0 ]ysh
271.08 231.768 mo
([pass-uncomp])
[-2.22156 -4.38766 -4.3877 -3.94415 -3.94415 -2.62146 -4.3877 -4.38766 -3.94418 -4.38766 -6.65988 -4.38766 
0 ]ysh
296.701 231.768 mo
([pass-comp])
[-2.19464 -4.39639 -4.39639 -3.95285 -3.95288 -2.63016 -3.95288 -4.39639 -6.59018 -4.39639 0 ]ysh
218.821 150.588 mo
([pass-uncomp])
[-2.22156 -4.38766 -4.38766 -3.94421 -3.94415 -2.62146 -4.38763 -4.3877 -3.94415 -4.3877 -6.65985 -4.3877 
0 ]ysh
243.181 150.588 mo
([pass-uncomp])
[-2.22156 -4.38766 -4.38766 -3.94421 -3.94415 -2.62146 -4.38763 -4.3877 -3.94415 -4.3877 -6.65985 -4.3877 
0 ]ysh
268.201 159.408 mo
([pass-comp-long])
[-2.22156 -4.39084 -4.39087 -3.94733 -3.9473 -2.62463 -3.94733 -4.39087 -6.58459 -4.39087 -2.62463 -1.79865 
-4.39081 -4.39087 -4.39087 0 ]ysh
293.101 150.588 mo
([pass-uncomp])
[-2.22156 -4.38766 -4.38766 -3.94421 -3.94415 -2.62146 -4.38763 -4.3877 -3.94415 -4.3877 -6.65985 -4.3877 
0 ]ysh
315.721 162.408 mo
([pass-comp-short])
[-2.19937 -4.40115 -4.40115 -3.95761 -3.95761 -2.63495 -3.95764 -4.40112 -6.59491 -4.40118 -2.63489 -3.95764 
-4.40112 -4.40112 -2.63495 -2.1994 0 ]ysh
202.08 99.348 mo
202.08 99.708 202.44 100.068 202.86 100.068 cv
203.28 100.068 203.58 99.708 203.58 99.348 cv
203.58 98.928 203.28 98.568 202.86 98.568 cv
202.44 98.568 202.08 98.928 202.08 99.348 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.33 lw
1 lc
1 lj
10 ml
202.08 99.348 mo
202.08 99.708 202.44 100.068 202.86 100.068 cv
203.28 100.068 203.58 99.708 203.58 99.348 cv
203.58 98.928 203.28 98.568 202.86 98.568 cv
202.44 98.568 202.08 98.928 202.08 99.348 cv
cp
@
202.08 98.568 mo
200.64 96.348 li
@
203.52 98.568 mo
205.02 96.348 li
205.02 64.488 li
@
200.64 96.348 mo
200.64 64.488 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
QHIBKL+Arial-BoldMT*1 [0 -7.92 -7.92 0 0 0 ]msf
212.04 95.148 mo
(x)sh
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
212.04 88.6077 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
212.04 88.6077 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
212.04 85.9077 mo
(1,3)
[-4.37897 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
212.04 75.0478 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
212.04 75.0478 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
212.04 70.1279 mo
(o)sh
202.62 103.068 mo
202.62 101.388 li
202.68 101.268 li
202.8 101.208 li
202.92 101.268 li
202.98 101.388 li
202.98 103.068 li
202.92 103.188 li
202.8 103.248 li
202.68 103.188 li
202.62 103.068 li
cp
201.96 101.808 mo
202.8 100.068 li
203.7 101.808 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
202.08 61.488 mo
202.08 61.908 202.44 62.208 202.86 62.208 cv
203.28 62.208 203.58 61.908 203.58 61.488 cv
203.58 61.0681 203.28 60.7681 202.86 60.7681 cv
202.44 60.7681 202.08 61.0681 202.08 61.488 cv
ef
.33 lw
1 lc
1 lj
10 ml
202.08 61.488 mo
202.08 61.908 202.44 62.208 202.86 62.208 cv
203.28 62.208 203.58 61.908 203.58 61.488 cv
203.58 61.068 203.28 60.768 202.86 60.768 cv
202.44 60.768 202.08 61.068 202.08 61.488 cv
cp
@
205.02 64.488 mo
203.52 62.208 li
@
202.26 62.208 mo
200.64 64.488 li
@
202.62 60.468 mo
202.62 58.788 li
202.68 58.668 li
202.8 58.608 li
202.98 58.788 li
202.98 60.468 li
202.92 60.588 li
202.8 60.648 li
202.68 60.588 li
202.62 60.468 li
cp
201.96 59.208 mo
202.8 57.468 li
203.7 59.208 li
f
0 gry
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
198.06 88.608 mo
( )sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
198.06 88.608 mo
( ) false chp
.158 lw
0 lc
0 lj
1 ml
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
198.06 85.9081 mo
(1,4)
[-4.31879 -2.22156 0 ]ysh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
198.06 75.1084 mo
(!)sh
QHIBKM+SymbolMT*1 [0 -7.92 -7.92 0 0 0 ]msf
198.06 75.1084 mo
(!) false chp
@
QHIBKK+ArialMT*1 [0 -7.92 -7.92 0 0 0 ]msf
198.06 70.1885 mo
(o)sh
gsave
276 434.328 mo
276 437.748 278.7 440.568 282 440.568 cv
285.48 440.568 li
288 440.568 290.28 438.888 291.12 436.368 cv
292.86 436.368 li
289.74 434.328 li
285.96 436.368 li
287.7 436.368 li
287.04 438.288 285.6 439.728 283.74 440.328 cv
281.22 439.488 279.48 437.088 279.48 434.328 cv
eclp
292.92 440.628 mo
292.92 434.268 li
275.94 434.268 li
275.94 440.628 li
cp
gsave
/2 /CSD get_res idxcs
clp
[0 -1 -1 0 648.648 174.24 ]ct
[6.36 0 0 16.98 -266.388 355.728 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 283 
/M[1 0 0 -283 0 283 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WiE)!WiE*!s8W-!s8W-!s8W-!sA`0"9\i1"9\l3"U,&5"U,&6"pP89"pP8:#6tJ=#7(S@#RC_C
#mgnF$47+J$O[=M$k*OQ%1NaU%LrsZ%hB0^&.fEc&J>]h&ebom'GM8s'c%Q#(Ddo*(`4,.)B'P6*#oq=
*?H7D+!;[L+X&$R,:"N\,palb-RU;k.4Qes.k</&/hSb00/,+80etO@1c7-K2E*QS3B9,^4$,Pf4[)%o
5X7V$6:4+.6q'R77Rp!?8P2TJ92&#R:/=\_:f1(f;c?Xq<E3(#='&L,=^#$6>[:WA?XI2K@:E\U@q9+\
AS#IdB4kmkBk_9rCMRa'D/F--DJj?1E,]a~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
276 434.328 mo
276 437.748 278.7 440.568 282 440.568 cv
282.6 440.568 283.2 440.508 283.74 440.328 cv
281.22 439.488 279.48 437.088 279.48 434.328 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.40392 .40392 .40392 colr
ef
.33 lw
1 lc
1 lj
10 ml
276 434.328 mo
276 437.748 278.7 440.568 282 440.568 cv
285.48 440.568 li
288 440.568 290.28 438.888 291.12 436.368 cv
292.86 436.368 li
289.74 434.328 li
285.96 436.368 li
287.7 436.368 li
287.04 438.288 285.6 439.728 283.74 440.328 cv
281.22 439.488 279.48 437.088 279.48 434.328 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
282 440.568 mo
282.6 440.568 283.2 440.508 283.74 440.328 cv
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Arial-ItalicMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Arial-ItalicMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation, registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Regular) def
/ItalicAngle -12 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
def
/UniqueID 44340 def
/FontBBox {-261 -250 1059 936} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 358 -210 -199] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [72] def
/StdVW [88] def
/StemSnapH [72 81] def
/StemSnapV [88 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/a <1C60D8A8C9B7EF32653955E89F4352B48A1DF8AA52A8096BEB991ED9684C
FCB34B1B2AC195366828CC20DB3D55C80F4465D13418537AFF4B4842DB02DC01
92CAB63CECE5CAA7BB5715AC24A49BF6B2182D89635F4BB84E3539973E84DB6F
7573AFA56AAE09EA0BAAF684B326552D0795372FAABCC41CFD1A95FC705C85CD
BBEAC9121090ECF2B56B818DE66414A379A5FC8A800DF32232F8D70B632591C2
9D52CFEC896892505BCAE6681BB6183A178D01CC08BE2E2DE8B4BC26BDFE031F
22774742C40FF4ADC8FE7A28A90A02CDE2FA1A86CA9C53B04256881DB646CA3C
8F> |-
/c <1C60D8A8C9B7A73D8D4E46BB141FD3E31B4EFEF9BAF4412A04951FD0FD83
4B7053A9D80BBA6DEF58EE2303CE8299DC3FBDCF2D0902A98CD8A5C08BF0BBC1
443F04F97B198FDD377A6F18E57C254A6DF98046F4D3D25502F279145B3E73A2
4430130C280F73C82698962BCB05D7EE06D4F7AB8B68A6E74F3763B3433991A3
F05222> |-
/d <1C60D8A8C9B7EF321D283098E985330ED82084EC3F1D066DF637A0E9A63F
C330566F0FFC8396761C31B07F2FAF5A4E39EACF4C7AC864663628A9FDF9DD50
BEA6E0E5799A27FD29D417663983D0ABBBF1BC1700D4AB2EC3A352ADABFC2EEA
EB6DA1586B186E5589AFB469366144882BF03B214A51D76D2D0ED79D4C1D68B9
8D90981F8D6281F0CE6C810327> |-
/e <1C60D8A8C9B7EF321C1E8ACCC7D09A023042D90BE5D1EA563C909BDD033A
0FB8561F142300E7268D12D746DACC3F4A7A97F9B40781EFFB1CA1B9F31E51D1
3355EC2F6F9CDDC9DBA0762FC08E08CDA1008440931D6BC434A8BD12A11D9186
CD66868FB0154BC2177EB7E019995AB92E363DA36317815DE5DB> |-
/f <1C60D8A8C9B854D0BA987845FCD2A683AEA80AF7F6F88C01AA7B6D60DB00
9AECBEC9B4B2E69B833DE7840C7D36FAB0479BE0D8F674802AB24A4E6F16E6CE
D292E3D5DEA23E1451DF2D8136D3DEBEE422F7C4CD5706> |-
/i <1C60D8A8C9B88C082D95EF87D70BBC01773D885656612F2664B1EBBF74FD
DA3A99656275184DDA6DB5627B57AEC600> |-
/n <1C60D8A8C9B7EF32243C6E9D7F5F381084FDC03363F7D1CF44694F9455A1
1002394CC78A59DC9EC4BCE0E14100DCA50F04A049D04F81BF505C372DE9E1F6
73E527FCE130BDECF1A9A10EC328C45FDED066F63968E68751B5E9F2E05F00A6
E1755BE8B4A864B11344EE32> |-
/o <1C60D8A8C9B7EF32628C772DE6E397E65479FFA0766E31A0E619CDF4C4DC
4CC3E6514703E474B4280A88D04D50E73BAE799C94015B42BA9F77179B03E534
EAE2CCFC401140682DA526CA1A105618EC153D2E89597FEDB26D9101> |-
/r <1C60D8A8C9B81F2C61D6B34B72618BAF7A017ADAF81B5D4BA8604A41A14B
E1A9C9C2DBA4B577719B27A2A683EAEC693405F711171A60726B0232FD8BFB8F
11132657AA1CE23D11A080432FF021C7BBFD08F5F840DF884E45660DEB3E9847
7616EF42B114FF93ADA454188EF46183B61B1037> |-
/s <1C60D8A8C9B7A73DFF73DED6D1A334AF9DF1AC3BB618AEFA513EC2FA7A2F
F0690F36A55D42546B6C9AF41300B955DEAF0CC3456A35B6131308E5419001A6
77EDA650F2A33C450A8E6541F0A17243712D84D28821B4E2A8C0E2A6FAD2A3B9
8CA456A821E751BC07D1E540C5C197816B76FF6BF12922B3A59A6D35CAD31A61
B4E65B33AB1939AF2E784E7AFCB109B911B7BB46E8BC3E2934B0E8F136632D48
C449E0EB> |-
/t <1C60D8A8C9B854D0C0AD17A70317BAE2408AB69F18E1EA4CA155B4984F69
E1CD18D066F5AFEA435850F58BFF00D7F0397258752F2B43057B16E549ECF164
E4C9E8CF52B7DF93325D9D5D9C9DBA9D9DA628D8EC62AE861608914D113B772F
BF4DBDEFE2> |-
/u <1C60D8A8C9B7EF3217161211D4684A520DECA7EC32EF836D54C3A907BFE0
2F841CCA12F08922F0D3E766C756AAA747795503B7D9412650D2609585B2F58D
852A5E5E242BD1F31936C390E310BBF632545B2D8476B88E95031F231588F4A1
2862234E2CD54BB61DEEDEA6CB3A5B8D8FE325BDE7D2E24A> |-
/w <1C60D8A8C9B6079F6DB2729CC7E34CEC0E0DDF65E1C808E946DC1324D0C4
B05919BB9E5A8B57F677A072F827561A0AFB9BFD4C842AB6681A115152F6D4C3
5C74D18CC0D3039D91CEE2971FFA0EE07FAB5C43F3B3ED79E6E27714FD160F01
3C386DB575AC69025FFADB9C115402669669876B937E08AD31832B9A7FDEAA33
91FDF9F246DB561B4B7CA8836DEC2E56AA592F43C37BC5446AC62F86D9BBCE72
551A06B08476071515BA21E46FD26F5644117ED7DAA899B780AA18B1E186> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/QHIBKN+Arial-ItalicMT /Arial-ItalicMT findfont ct_VMDictPut
/QHIBKN+Arial-ItalicMT*1 
[97{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp 
/i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t 
/u /.notdef /w 136{/.notdef}rp]
QHIBKN+Arial-ItalicMT nf
QHIBKN+Arial-ItalicMT*1 [0 -7.92 -7.92 0 0 0 ]msf
282.12 457.368 mo
(fast)
[-2.21204 -4.37897 -3.97031 0 ]ysh
291.66 470.988 mo
(forward)
[-2.20731 -4.37897 -2.64282 -5.72379 -4.37897 -2.63968 0 ]ysh
326.4 231.768 mo
(continued)
[-3.94019 -4.38373 -4.38373 -2.22156 -1.73843 -4.38373 -4.43915 -4.37897 0 ]ysh
321.84 254.028 mo
322.08 254.028 322.32 254.208 322.32 254.448 cv
322.32 254.688 322.08 254.868 321.84 254.868 cv
321.6 254.868 321.42 254.688 321.42 254.448 cv
321.42 254.208 321.6 254.028 321.84 254.028 cv
cp
323.64 254.028 mo
323.88 254.028 324.06 254.208 324.06 254.448 cv
324.06 254.688 323.88 254.868 323.64 254.868 cv
323.4 254.868 323.16 254.688 323.16 254.448 cv
323.16 254.208 323.4 254.028 323.64 254.028 cv
cp
325.38 254.028 mo
325.62 254.028 325.8 254.208 325.8 254.448 cv
325.8 254.688 325.62 254.868 325.38 254.868 cv
325.14 254.868 324.96 254.688 324.96 254.448 cv
324.96 254.208 325.14 254.028 325.38 254.028 cv
cp
327.12 254.028 mo
327.36 254.028 327.6 254.208 327.6 254.448 cv
327.6 254.688 327.36 254.868 327.12 254.868 cv
326.88 254.868 326.7 254.688 326.7 254.448 cv
326.7 254.208 326.88 254.028 327.12 254.028 cv
cp
327.96 253.908 mo
327.96 253.668 328.14 253.488 328.38 253.488 cv
328.62 253.488 328.8 253.668 328.8 253.908 cv
328.8 254.148 328.62 254.388 328.38 254.388 cv
328.14 254.388 327.96 254.148 327.96 253.908 cv
cp
327.96 252.168 mo
327.96 251.928 328.14 251.748 328.38 251.748 cv
328.62 251.748 328.8 251.928 328.8 252.168 cv
328.8 252.408 328.62 252.588 328.38 252.588 cv
328.14 252.588 327.96 252.408 327.96 252.168 cv
cp
327.96 250.428 mo
327.96 250.188 328.14 249.948 328.38 249.948 cv
328.62 249.948 328.8 250.188 328.8 250.428 cv
328.8 250.668 328.62 250.848 328.38 250.848 cv
328.14 250.848 327.96 250.668 327.96 250.428 cv
cp
327.96 248.628 mo
327.96 248.388 328.14 248.208 328.38 248.208 cv
328.62 248.208 328.8 248.388 328.8 248.628 cv
328.8 248.868 328.62 249.108 328.38 249.108 cv
328.14 249.108 327.96 248.868 327.96 248.628 cv
cp
327.96 246.888 mo
327.96 246.648 328.14 246.468 328.38 246.468 cv
328.62 246.468 328.8 246.648 328.8 246.888 cv
328.8 247.128 328.62 247.308 328.38 247.308 cv
328.14 247.308 327.96 247.128 327.96 246.888 cv
cp
327.96 245.148 mo
327.96 244.908 328.14 244.668 328.38 244.668 cv
328.62 244.668 328.8 244.908 328.8 245.148 cv
328.8 245.388 328.62 245.568 328.38 245.568 cv
328.14 245.568 327.96 245.388 327.96 245.148 cv
cp
327.96 243.348 mo
327.96 243.108 328.14 242.928 328.38 242.928 cv
328.62 242.928 328.8 243.108 328.8 243.348 cv
328.8 243.588 328.62 243.828 328.38 243.828 cv
328.14 243.828 327.96 243.588 327.96 243.348 cv
cp
327.96 241.608 mo
327.96 241.368 328.14 241.188 328.38 241.188 cv
328.62 241.188 328.8 241.368 328.8 241.608 cv
328.8 241.848 328.62 242.028 328.38 242.028 cv
328.14 242.028 327.96 241.848 327.96 241.608 cv
cp
327.96 239.868 mo
327.96 239.568 328.14 239.388 328.38 239.388 cv
328.62 239.388 328.8 239.568 328.8 239.868 cv
328.8 240.108 328.62 240.288 328.38 240.288 cv
328.14 240.288 327.96 240.108 327.96 239.868 cv
cp
327.96 238.068 mo
327.96 237.828 328.14 237.648 328.38 237.648 cv
328.62 237.648 328.8 237.828 328.8 238.068 cv
328.8 238.308 328.62 238.548 328.38 238.548 cv
328.14 238.548 327.96 238.308 327.96 238.068 cv
cp
327.96 236.328 mo
327.96 236.088 328.14 235.908 328.38 235.908 cv
328.62 235.908 328.8 236.088 328.8 236.328 cv
328.8 236.568 328.62 236.748 328.38 236.748 cv
328.14 236.748 327.96 236.568 327.96 236.328 cv
cp
327.96 234.588 mo
327.96 234.528 li
327.96 234.288 328.14 234.108 328.38 234.108 cv
328.62 234.108 328.8 234.288 328.8 234.528 cv
328.8 234.588 li
328.8 234.828 328.62 235.008 328.38 235.008 cv
328.14 235.008 327.96 234.828 327.96 234.588 cv
cp
327.96 232.788 mo
327.96 232.548 328.14 232.368 328.38 232.368 cv
328.62 232.368 328.8 232.548 328.8 232.788 cv
328.8 233.028 328.62 233.208 328.38 233.208 cv
328.14 233.208 327.96 233.028 327.96 232.788 cv
cp
327.96 231.048 mo
327.96 230.808 328.14 230.568 328.38 230.568 cv
328.62 230.568 328.8 230.808 328.8 231.048 cv
328.8 231.288 328.62 231.468 328.38 231.468 cv
328.14 231.468 327.96 231.288 327.96 231.048 cv
cp
327.96 229.248 mo
327.96 229.008 328.14 228.828 328.38 228.828 cv
328.62 228.828 328.8 229.008 328.8 229.248 cv
328.8 229.548 328.62 229.728 328.38 229.728 cv
328.14 229.728 327.96 229.548 327.96 229.248 cv
cp
327.96 227.508 mo
327.96 227.268 328.14 227.088 328.38 227.088 cv
328.62 227.088 328.8 227.268 328.8 227.508 cv
328.8 227.748 328.62 227.928 328.38 227.928 cv
328.14 227.928 327.96 227.748 327.96 227.508 cv
cp
327.96 225.768 mo
327.96 225.528 328.14 225.288 328.38 225.288 cv
328.62 225.288 328.8 225.528 328.8 225.768 cv
328.8 226.008 328.62 226.188 328.38 226.188 cv
328.14 226.188 327.96 226.008 327.96 225.768 cv
cp
327.96 223.968 mo
327.96 223.728 328.14 223.548 328.38 223.548 cv
328.62 223.548 328.8 223.728 328.8 223.968 cv
328.8 224.208 328.62 224.448 328.38 224.448 cv
328.14 224.448 327.96 224.208 327.96 223.968 cv
cp
327.96 222.228 mo
327.96 221.988 328.14 221.808 328.38 221.808 cv
328.62 221.808 328.8 221.988 328.8 222.228 cv
328.8 222.468 328.62 222.648 328.38 222.648 cv
328.14 222.648 327.96 222.468 327.96 222.228 cv
cp
327.96 220.488 mo
327.96 220.248 328.14 220.008 328.38 220.008 cv
328.62 220.008 328.8 220.248 328.8 220.488 cv
328.8 220.728 328.62 220.908 328.38 220.908 cv
328.14 220.908 327.96 220.728 327.96 220.488 cv
cp
327.96 218.688 mo
327.96 218.448 328.14 218.268 328.38 218.268 cv
328.62 218.268 328.8 218.448 328.8 218.688 cv
328.8 218.928 328.62 219.168 328.38 219.168 cv
328.14 219.168 327.96 218.928 327.96 218.688 cv
cp
327.96 216.948 mo
327.96 216.708 328.14 216.528 328.38 216.528 cv
328.62 216.528 328.8 216.708 328.8 216.948 cv
328.8 217.188 328.62 217.368 328.38 217.368 cv
328.14 217.368 327.96 217.188 327.96 216.948 cv
cp
327.96 215.208 mo
327.96 214.968 328.14 214.728 328.38 214.728 cv
328.62 214.728 328.8 214.968 328.8 215.208 cv
328.8 215.448 328.62 215.628 328.38 215.628 cv
328.14 215.628 327.96 215.448 327.96 215.208 cv
cp
327.96 213.408 mo
327.96 213.168 328.14 212.988 328.38 212.988 cv
328.62 212.988 328.8 213.168 328.8 213.408 cv
328.8 213.648 328.62 213.888 328.38 213.888 cv
328.14 213.888 327.96 213.648 327.96 213.408 cv
cp
327.96 211.668 mo
327.96 211.428 328.14 211.248 328.38 211.248 cv
328.62 211.248 328.8 211.428 328.8 211.668 cv
328.8 211.908 328.62 212.088 328.38 212.088 cv
328.14 212.088 327.96 211.908 327.96 211.668 cv
cp
327.96 209.928 mo
327.96 209.688 328.14 209.448 328.38 209.448 cv
328.62 209.448 328.8 209.688 328.8 209.928 cv
328.8 210.168 328.62 210.348 328.38 210.348 cv
328.14 210.348 327.96 210.168 327.96 209.928 cv
cp
327.96 208.128 mo
327.96 207.888 328.14 207.708 328.38 207.708 cv
328.62 207.708 328.8 207.888 328.8 208.128 cv
328.8 208.368 328.62 208.608 328.38 208.608 cv
328.14 208.608 327.96 208.368 327.96 208.128 cv
cp
327.96 206.388 mo
327.96 206.148 328.14 205.968 328.38 205.968 cv
328.62 205.968 328.8 206.148 328.8 206.388 cv
328.8 206.628 328.62 206.808 328.38 206.808 cv
328.14 206.808 327.96 206.628 327.96 206.388 cv
cp
327.96 204.648 mo
327.96 204.408 328.14 204.168 328.38 204.168 cv
328.62 204.168 328.8 204.408 328.8 204.648 cv
328.8 204.888 328.62 205.068 328.38 205.068 cv
328.14 205.068 327.96 204.888 327.96 204.648 cv
cp
327.96 202.848 mo
327.96 202.608 328.14 202.428 328.38 202.428 cv
328.62 202.428 328.8 202.608 328.8 202.848 cv
328.8 203.088 328.62 203.328 328.38 203.328 cv
328.14 203.328 327.96 203.088 327.96 202.848 cv
cp
327.96 201.108 mo
327.96 200.868 328.14 200.688 328.38 200.688 cv
328.62 200.688 328.8 200.868 328.8 201.108 cv
328.8 201.348 328.62 201.528 328.38 201.528 cv
328.14 201.528 327.96 201.348 327.96 201.108 cv
cp
327.96 199.368 mo
327.96 199.068 328.14 198.888 328.38 198.888 cv
328.62 198.888 328.8 199.068 328.8 199.368 cv
328.8 199.608 328.62 199.788 328.38 199.788 cv
328.14 199.788 327.96 199.608 327.96 199.368 cv
cp
327.96 197.568 mo
327.96 197.328 328.14 197.148 328.38 197.148 cv
328.62 197.148 328.8 197.328 328.8 197.568 cv
328.8 197.808 328.62 198.048 328.38 198.048 cv
328.14 198.048 327.96 197.808 327.96 197.568 cv
cp
327.96 195.828 mo
327.96 195.588 328.14 195.348 328.38 195.348 cv
328.62 195.348 328.8 195.588 328.8 195.828 cv
328.8 196.068 328.62 196.248 328.38 196.248 cv
328.14 196.248 327.96 196.068 327.96 195.828 cv
cp
327.96 194.028 mo
327.96 193.788 328.14 193.608 328.38 193.608 cv
328.62 193.608 328.8 193.788 328.8 194.028 cv
328.8 194.328 328.62 194.508 328.38 194.508 cv
328.14 194.508 327.96 194.328 327.96 194.028 cv
cp
328.14 192.828 mo
327.9 192.708 327.78 192.468 327.84 192.288 cv
327.9 192.048 328.14 191.868 328.38 191.928 cv
328.62 191.988 328.74 192.288 328.68 192.468 cv
328.62 192.708 328.38 192.888 328.14 192.828 cv
cp
326.46 192.288 mo
326.22 192.228 326.1 191.988 326.16 191.748 cv
326.22 191.508 326.46 191.388 326.7 191.448 cv
326.94 191.508 327.06 191.748 327 191.988 cv
326.94 192.228 326.7 192.348 326.46 192.288 cv
cp
324.78 191.748 mo
324.54 191.688 324.42 191.448 324.48 191.208 cv
324.54 190.968 324.78 190.848 325.02 190.908 cv
325.26 190.968 325.38 191.208 325.32 191.448 cv
325.26 191.688 325.02 191.808 324.78 191.748 cv
cp
323.1 191.268 mo
322.86 191.208 322.74 190.908 322.8 190.728 cv
322.86 190.488 323.1 190.308 323.34 190.368 cv
323.58 190.488 323.7 190.728 323.64 190.908 cv
323.58 191.148 323.34 191.328 323.1 191.268 cv
cp
321.42 190.728 mo
321.18 190.668 321.06 190.428 321.12 190.188 cv
321.18 189.948 321.42 189.828 321.66 189.888 cv
321.9 189.948 322.02 190.188 321.96 190.428 cv
321.9 190.668 321.66 190.788 321.42 190.728 cv
cp
319.74 190.188 mo
319.5 190.128 319.38 189.888 319.44 189.648 cv
319.5 189.408 319.74 189.288 319.98 189.348 cv
320.22 189.408 320.34 189.648 320.28 189.888 cv
320.22 190.128 319.98 190.248 319.74 190.188 cv
cp
318.06 189.708 mo
317.82 189.648 317.7 189.408 317.76 189.168 cv
317.82 188.928 318.06 188.748 318.3 188.868 cv
318.54 188.928 318.66 189.168 318.6 189.408 cv
318.54 189.588 318.3 189.768 318.06 189.708 cv
cp
316.38 189.168 mo
316.14 189.108 316.02 188.868 316.08 188.628 cv
316.14 188.388 316.38 188.268 316.62 188.328 cv
316.86 188.388 316.98 188.628 316.92 188.868 cv
316.86 189.108 316.62 189.228 316.38 189.168 cv
cp
314.7 188.628 mo
314.46 188.568 314.34 188.328 314.4 188.088 cv
314.46 187.848 314.7 187.728 314.94 187.788 cv
315.18 187.848 315.3 188.088 315.24 188.328 cv
315.18 188.568 314.94 188.688 314.7 188.628 cv
cp
313.02 188.148 mo
312.78 188.088 312.66 187.848 312.72 187.608 cv
312.78 187.368 313.02 187.188 313.26 187.308 cv
313.5 187.368 313.62 187.608 313.56 187.848 cv
313.5 188.028 313.26 188.208 313.02 188.148 cv
cp
311.34 187.608 mo
311.1 187.548 310.98 187.308 311.04 187.068 cv
311.1 186.828 311.34 186.708 311.58 186.768 cv
311.82 186.828 311.94 187.068 311.88 187.308 cv
311.82 187.548 311.58 187.668 311.34 187.608 cv
cp
309.66 187.068 mo
309.42 187.008 309.3 186.768 309.36 186.528 cv
309.42 186.288 309.66 186.168 309.9 186.228 cv
310.14 186.288 310.26 186.528 310.2 186.768 cv
310.14 187.008 309.9 187.128 309.66 187.068 cv
cp
307.98 186.588 mo
307.74 186.528 307.56 186.288 307.68 186.048 cv
307.74 185.808 307.98 185.688 308.22 185.748 cv
308.4 185.808 308.58 186.048 308.52 186.288 cv
308.46 186.528 308.22 186.648 307.98 186.588 cv
cp
306.3 186.048 mo
306.06 185.988 305.88 185.748 306 185.508 cv
306.06 185.268 306.3 185.148 306.54 185.208 cv
306.72 185.268 306.9 185.508 306.84 185.748 cv
306.78 185.988 306.54 186.108 306.3 186.048 cv
cp
304.62 185.508 mo
304.38 185.448 304.2 185.208 304.26 184.968 cv
304.38 184.788 304.62 184.608 304.8 184.668 cv
305.04 184.728 305.22 184.968 305.16 185.208 cv
305.1 185.448 304.8 185.628 304.62 185.508 cv
cp
302.94 185.028 mo
302.7 184.968 302.52 184.728 302.58 184.488 cv
302.64 184.248 302.94 184.128 303.12 184.188 cv
303.36 184.248 303.54 184.488 303.48 184.728 cv
303.36 184.968 303.12 185.088 302.94 185.028 cv
cp
301.26 184.488 mo
301.2 184.488 li
301.02 184.428 300.84 184.188 300.9 183.948 cv
300.96 183.708 301.2 183.588 301.44 183.648 cv
301.68 183.708 301.86 183.948 301.8 184.188 cv
301.68 184.428 301.44 184.548 301.26 184.488 cv
cp
299.52 184.008 mo
299.34 183.888 299.16 183.648 299.22 183.408 cv
299.28 183.228 299.52 183.048 299.76 183.108 cv
300 183.168 300.18 183.408 300.06 183.648 cv
300 183.888 299.76 184.068 299.52 184.008 cv
cp
297.84 183.468 mo
297.6 183.408 297.48 183.168 297.54 182.928 cv
297.6 182.688 297.84 182.568 298.08 182.628 cv
298.32 182.688 298.5 182.928 298.38 183.168 cv
298.32 183.408 298.08 183.528 297.84 183.468 cv
cp
296.16 182.928 mo
295.92 182.868 295.8 182.628 295.86 182.388 cv
295.92 182.148 296.16 182.028 296.4 182.088 cv
296.64 182.148 296.76 182.388 296.7 182.628 cv
296.64 182.868 296.4 182.988 296.16 182.928 cv
cp
294.48 182.448 mo
294.24 182.328 294.12 182.088 294.18 181.908 cv
294.24 181.668 294.48 181.488 294.72 181.548 cv
294.96 181.608 295.08 181.908 295.02 182.088 cv
294.96 182.328 294.72 182.508 294.48 182.448 cv
cp
292.8 181.908 mo
292.56 181.848 292.44 181.608 292.5 181.368 cv
292.56 181.128 292.8 181.008 293.04 181.068 cv
293.28 181.128 293.4 181.368 293.34 181.608 cv
293.28 181.848 293.04 181.968 292.8 181.908 cv
cp
291.12 181.368 mo
290.88 181.308 290.76 181.068 290.82 180.828 cv
290.88 180.588 291.12 180.468 291.36 180.528 cv
291.6 180.588 291.72 180.828 291.66 181.068 cv
291.6 181.308 291.36 181.428 291.12 181.368 cv
cp
289.44 180.888 mo
289.2 180.828 289.08 180.528 289.14 180.348 cv
289.2 180.108 289.44 179.928 289.68 179.988 cv
289.92 180.108 290.04 180.348 289.98 180.528 cv
289.92 180.768 289.68 180.948 289.44 180.888 cv
cp
287.76 180.348 mo
287.52 180.288 287.4 180.048 287.46 179.808 cv
287.52 179.568 287.76 179.448 288 179.508 cv
288.24 179.568 288.36 179.808 288.3 180.048 cv
288.24 180.288 288 180.408 287.76 180.348 cv
cp
286.08 179.808 mo
285.84 179.748 285.72 179.508 285.78 179.268 cv
285.84 179.028 286.08 178.908 286.32 178.968 cv
286.56 179.028 286.68 179.268 286.62 179.508 cv
286.56 179.748 286.32 179.868 286.08 179.808 cv
cp
284.4 179.328 mo
284.16 179.268 284.04 179.028 284.1 178.788 cv
284.16 178.548 284.4 178.368 284.64 178.488 cv
284.88 178.548 285 178.788 284.94 179.028 cv
284.88 179.208 284.64 179.388 284.4 179.328 cv
cp
282.72 178.788 mo
282.48 178.728 282.36 178.488 282.42 178.248 cv
282.48 178.008 282.72 177.888 282.96 177.948 cv
283.2 178.008 283.32 178.248 283.26 178.488 cv
283.2 178.728 282.96 178.848 282.72 178.788 cv
cp
281.04 178.248 mo
280.8 178.188 280.68 177.948 280.74 177.708 cv
280.8 177.468 281.04 177.348 281.28 177.408 cv
281.52 177.468 281.64 177.708 281.58 177.948 cv
281.52 178.188 281.28 178.308 281.04 178.248 cv
cp
279.36 177.768 mo
279.12 177.708 279 177.468 279.06 177.228 cv
279.12 176.988 279.36 176.808 279.6 176.928 cv
279.84 176.988 279.96 177.228 279.9 177.468 cv
279.84 177.708 279.6 177.828 279.36 177.768 cv
cp
277.68 177.228 mo
277.44 177.168 277.32 176.928 277.38 176.688 cv
277.44 176.448 277.68 176.328 277.92 176.388 cv
278.16 176.448 278.28 176.688 278.22 176.928 cv
278.16 177.168 277.92 177.288 277.68 177.228 cv
cp
276 176.688 mo
275.76 176.628 275.64 176.388 275.7 176.148 cv
275.76 175.908 276 175.788 276.24 175.848 cv
276.48 175.908 276.6 176.148 276.54 176.388 cv
276.48 176.628 276.24 176.748 276 176.688 cv
cp
274.32 176.208 mo
274.08 176.148 273.96 175.908 274.02 175.668 cv
274.08 175.428 274.32 175.308 274.56 175.368 cv
274.8 175.428 274.92 175.668 274.86 175.908 cv
274.8 176.148 274.56 176.268 274.32 176.208 cv
cp
272.64 175.668 mo
272.4 175.608 272.28 175.368 272.34 175.128 cv
272.4 174.888 272.64 174.768 272.88 174.828 cv
273.12 174.888 273.24 175.128 273.18 175.368 cv
273.12 175.608 272.88 175.728 272.64 175.668 cv
cp
270.96 175.128 mo
270.72 175.068 270.54 174.828 270.66 174.588 cv
270.72 174.408 270.96 174.228 271.2 174.288 cv
271.44 174.348 271.56 174.588 271.5 174.828 cv
271.44 175.068 271.2 175.248 270.96 175.128 cv
cp
269.28 174.648 mo
269.04 174.588 268.86 174.348 268.98 174.108 cv
269.04 173.868 269.28 173.748 269.52 173.808 cv
269.7 173.868 269.88 174.108 269.82 174.348 cv
269.76 174.588 269.52 174.708 269.28 174.648 cv
cp
267.6 174.108 mo
267.36 174.048 267.18 173.808 267.24 173.568 cv
267.36 173.328 267.6 173.208 267.84 173.268 cv
268.02 173.328 268.2 173.568 268.14 173.808 cv
268.08 174.048 267.78 174.168 267.6 174.108 cv
cp
265.92 173.628 mo
265.68 173.508 265.5 173.268 265.56 173.028 cv
265.68 172.848 265.92 172.668 266.1 172.728 cv
266.34 172.788 266.52 173.088 266.46 173.268 cv
266.34 173.508 266.1 173.688 265.92 173.628 cv
cp
264.24 173.088 mo
264.18 173.088 li
264 173.028 263.82 172.788 263.88 172.548 cv
263.94 172.308 264.24 172.188 264.42 172.248 cv
264.66 172.308 264.84 172.548 264.78 172.788 cv
264.66 173.028 264.42 173.148 264.24 173.088 cv
cp
262.5 172.548 mo
262.32 172.488 262.14 172.248 262.2 172.008 cv
262.26 171.768 262.5 171.648 262.74 171.708 cv
262.98 171.768 263.16 172.008 263.04 172.248 cv
262.98 172.488 262.74 172.608 262.5 172.548 cv
cp
260.82 172.068 mo
260.64 171.948 260.46 171.708 260.52 171.528 cv
260.58 171.288 260.82 171.108 261.06 171.168 cv
261.3 171.288 261.48 171.528 261.36 171.708 cv
261.3 171.948 261.06 172.128 260.82 172.068 cv
cp
259.14 171.528 mo
258.9 171.468 258.78 171.228 258.84 170.988 cv
258.9 170.748 259.14 170.628 259.38 170.688 cv
259.62 170.748 259.74 170.988 259.68 171.228 cv
259.62 171.468 259.38 171.588 259.14 171.528 cv
cp
257.46 170.988 mo
257.22 170.928 257.1 170.688 257.16 170.448 cv
257.22 170.208 257.46 170.088 257.7 170.148 cv
257.94 170.208 258.06 170.448 258 170.688 cv
257.94 170.928 257.7 171.048 257.46 170.988 cv
cp
255.78 170.508 mo
255.54 170.448 255.42 170.148 255.48 169.968 cv
255.54 169.728 255.78 169.548 256.02 169.608 cv
256.26 169.728 256.38 169.968 256.32 170.208 cv
256.26 170.388 256.02 170.568 255.78 170.508 cv
cp
254.1 169.968 mo
253.86 169.908 253.74 169.668 253.8 169.428 cv
253.86 169.188 254.1 169.068 254.34 169.128 cv
254.58 169.188 254.7 169.428 254.64 169.668 cv
254.58 169.908 254.34 170.028 254.1 169.968 cv
cp
252.42 169.428 mo
252.18 169.368 252.06 169.128 252.12 168.888 cv
252.18 168.648 252.42 168.528 252.66 168.588 cv
252.9 168.648 253.02 168.888 252.96 169.128 cv
252.9 169.368 252.66 169.488 252.42 169.428 cv
cp
250.74 168.948 mo
250.5 168.888 250.38 168.648 250.44 168.408 cv
250.5 168.168 250.74 167.988 250.98 168.108 cv
251.22 168.168 251.34 168.408 251.28 168.648 cv
251.22 168.828 250.98 169.008 250.74 168.948 cv
cp
249.06 168.408 mo
248.82 168.348 248.7 168.108 248.76 167.868 cv
248.82 167.628 249.06 167.508 249.3 167.568 cv
249.54 167.628 249.66 167.868 249.6 168.108 cv
249.54 168.348 249.3 168.468 249.06 168.408 cv
cp
247.38 167.868 mo
247.14 167.808 247.02 167.568 247.08 167.328 cv
247.14 167.088 247.38 166.968 247.62 167.028 cv
247.86 167.088 247.98 167.328 247.92 167.568 cv
247.86 167.808 247.62 167.928 247.38 167.868 cv
cp
245.7 167.388 mo
245.46 167.328 245.34 167.088 245.4 166.848 cv
245.46 166.608 245.7 166.428 245.94 166.548 cv
246.18 166.608 246.3 166.848 246.24 167.088 cv
246.18 167.328 245.94 167.448 245.7 167.388 cv
cp
244.02 166.848 mo
243.78 166.788 243.66 166.548 243.72 166.308 cv
243.78 166.068 244.02 165.948 244.26 166.008 cv
244.5 166.068 244.62 166.308 244.56 166.548 cv
244.5 166.788 244.26 166.908 244.02 166.848 cv
cp
242.34 166.308 mo
242.1 166.248 241.98 166.008 242.04 165.768 cv
242.1 165.528 242.34 165.408 242.58 165.468 cv
242.82 165.528 242.94 165.768 242.88 166.008 cv
242.82 166.248 242.58 166.428 242.34 166.308 cv
cp
240.66 165.828 mo
240.42 165.768 240.3 165.528 240.36 165.288 cv
240.42 165.048 240.66 164.928 240.9 164.988 cv
241.14 165.048 241.26 165.288 241.2 165.528 cv
241.14 165.768 240.9 165.888 240.66 165.828 cv
cp
238.98 165.288 mo
238.74 165.228 238.62 164.988 238.68 164.748 cv
238.74 164.508 238.98 164.388 239.22 164.448 cv
239.46 164.508 239.58 164.748 239.52 164.988 cv
239.46 165.228 239.22 165.348 238.98 165.288 cv
cp
237.3 164.748 mo
237.06 164.688 236.94 164.448 237 164.208 cv
237.06 164.028 237.3 163.848 237.54 163.908 cv
237.78 163.968 237.9 164.208 237.84 164.448 cv
237.78 164.688 237.54 164.868 237.3 164.748 cv
cp
235.62 164.268 mo
235.38 164.208 235.26 163.968 235.32 163.728 cv
235.38 163.488 235.62 163.368 235.86 163.428 cv
236.1 163.488 236.22 163.728 236.16 163.968 cv
236.1 164.208 235.86 164.328 235.62 164.268 cv
cp
233.94 163.728 mo
233.7 163.668 233.58 163.428 233.64 163.188 cv
233.7 162.948 233.94 162.828 234.18 162.888 cv
234.42 162.948 234.54 163.188 234.48 163.428 cv
234.42 163.668 234.18 163.788 233.94 163.728 cv
cp
232.26 163.248 mo
232.02 163.128 231.84 162.888 231.96 162.648 cv
232.02 162.468 232.26 162.288 232.5 162.348 cv
232.68 162.408 232.86 162.708 232.8 162.888 cv
232.74 163.128 232.5 163.308 232.26 163.248 cv
cp
230.58 162.708 mo
230.34 162.648 230.16 162.408 230.28 162.168 cv
230.34 161.928 230.58 161.808 230.82 161.868 cv
231 161.928 231.18 162.168 231.12 162.408 cv
231.06 162.648 230.82 162.768 230.58 162.708 cv
cp
228.9 162.168 mo
228.66 162.108 228.48 161.868 228.54 161.628 cv
228.66 161.388 228.9 161.268 229.08 161.328 cv
229.14 161.328 li
229.32 161.388 229.5 161.628 229.44 161.868 cv
229.38 162.108 229.08 162.228 228.9 162.168 cv
cp
227.22 161.688 mo
226.98 161.568 226.8 161.328 226.86 161.148 cv
226.98 160.908 227.22 160.728 227.4 160.788 cv
227.64 160.908 227.82 161.148 227.76 161.328 cv
227.64 161.568 227.4 161.748 227.22 161.688 cv
cp
225.48 161.148 mo
225.3 161.088 225.12 160.848 225.18 160.608 cv
225.24 160.368 225.54 160.248 225.72 160.308 cv
225.96 160.368 226.14 160.608 226.08 160.848 cv
225.96 161.088 225.72 161.208 225.48 161.148 cv
cp
223.8 160.608 mo
223.62 160.548 223.44 160.308 223.5 160.068 cv
223.56 159.828 223.8 159.708 224.04 159.768 cv
224.28 159.828 224.46 160.068 224.34 160.308 cv
224.28 160.548 224.04 160.668 223.8 160.608 cv
cp
222.12 160.128 mo
221.88 160.068 221.76 159.768 221.82 159.588 cv
221.88 159.348 222.12 159.168 222.36 159.228 cv
222.6 159.348 222.78 159.588 222.66 159.828 cv
222.6 160.008 222.36 160.188 222.12 160.128 cv
cp
220.44 159.588 mo
220.2 159.528 220.08 159.288 220.14 159.048 cv
220.2 158.808 220.44 158.688 220.68 158.748 cv
220.92 158.808 221.04 159.048 220.98 159.288 cv
220.92 159.528 220.68 159.648 220.44 159.588 cv
cp
218.76 159.048 mo
218.52 158.988 218.4 158.748 218.46 158.508 cv
218.52 158.268 218.76 158.148 219 158.208 cv
219.24 158.268 219.36 158.508 219.3 158.748 cv
219.24 158.988 219 159.108 218.76 159.048 cv
cp
217.08 158.568 mo
216.84 158.508 216.72 158.268 216.78 158.028 cv
216.84 157.788 217.08 157.608 217.32 157.728 cv
217.56 157.788 217.68 158.028 217.62 158.268 cv
217.56 158.448 217.32 158.628 217.08 158.568 cv
cp
215.4 158.028 mo
215.16 157.968 215.04 157.728 215.1 157.488 cv
215.16 157.248 215.4 157.128 215.64 157.188 cv
215.88 157.248 216 157.488 215.94 157.728 cv
215.88 157.968 215.64 158.088 215.4 158.028 cv
cp
213.72 157.488 mo
213.48 157.428 213.36 157.188 213.42 156.948 cv
213.48 156.708 213.72 156.588 213.96 156.648 cv
214.2 156.708 214.32 156.948 214.26 157.188 cv
214.2 157.428 213.96 157.548 213.72 157.488 cv
cp
212.04 157.008 mo
211.8 156.948 211.68 156.708 211.74 156.468 cv
211.8 156.228 212.04 156.048 212.28 156.168 cv
212.52 156.228 212.64 156.468 212.58 156.708 cv
212.52 156.948 212.28 157.068 212.04 157.008 cv
cp
210.36 156.468 mo
210.12 156.408 210 156.168 210.06 155.928 cv
210.12 155.688 210.36 155.568 210.6 155.628 cv
210.84 155.688 210.96 155.928 210.9 156.168 cv
210.84 156.408 210.6 156.528 210.36 156.468 cv
cp
208.68 155.928 mo
208.44 155.868 208.32 155.628 208.38 155.388 cv
208.44 155.148 208.68 155.028 208.92 155.088 cv
209.16 155.148 209.28 155.388 209.22 155.628 cv
209.16 155.868 208.92 156.048 208.68 155.928 cv
cp
207 155.448 mo
206.76 155.388 206.64 155.148 206.7 154.908 cv
206.76 154.668 207 154.548 207.24 154.608 cv
207.48 154.668 207.6 154.908 207.54 155.148 cv
207.48 155.388 207.24 155.508 207 155.448 cv
cp
205.32 154.908 mo
205.08 154.848 204.96 154.608 205.02 154.368 cv
205.08 154.128 205.32 154.008 205.56 154.068 cv
205.8 154.128 205.92 154.368 205.86 154.608 cv
205.8 154.848 205.56 154.968 205.32 154.908 cv
cp
203.64 154.368 mo
203.4 154.308 203.28 154.068 203.34 153.828 cv
203.4 153.648 203.64 153.468 203.88 153.528 cv
204.12 153.588 204.24 153.828 204.18 154.068 cv
204.12 154.308 203.88 154.488 203.64 154.368 cv
cp
201.96 153.888 mo
201.72 153.828 201.6 153.588 201.66 153.348 cv
201.72 153.108 201.96 152.988 202.2 153.048 cv
202.44 153.108 202.56 153.348 202.5 153.588 cv
202.44 153.828 202.2 153.948 201.96 153.888 cv
cp
200.28 153.348 mo
200.04 153.288 199.92 153.048 199.98 152.808 cv
200.04 152.568 200.28 152.448 200.52 152.508 cv
200.76 152.568 200.88 152.808 200.82 153.048 cv
200.76 153.288 200.52 153.408 200.28 153.348 cv
cp
198.6 152.868 mo
198.36 152.748 198.24 152.508 198.3 152.268 cv
198.36 152.088 198.6 151.908 198.84 151.968 cv
199.08 152.028 199.2 152.328 199.14 152.508 cv
199.08 152.748 198.84 152.928 198.6 152.868 cv
cp
196.92 152.328 mo
196.68 152.268 196.56 152.028 196.62 151.788 cv
196.68 151.548 196.92 151.428 197.16 151.488 cv
197.4 151.548 197.52 151.788 197.46 152.028 cv
197.4 152.268 197.16 152.388 196.92 152.328 cv
cp
195.24 151.788 mo
195 151.728 194.82 151.488 194.94 151.248 cv
195 151.008 195.24 150.888 195.48 150.948 cv
195.72 151.008 195.84 151.248 195.78 151.488 cv
195.72 151.728 195.48 151.848 195.24 151.788 cv
cp
193.56 151.308 mo
193.32 151.188 193.14 150.948 193.26 150.768 cv
193.32 150.528 193.56 150.348 193.8 150.408 cv
193.98 150.528 194.16 150.768 194.1 150.948 cv
194.04 151.188 193.8 151.368 193.56 151.308 cv
cp
191.88 150.768 mo
191.64 150.708 191.46 150.468 191.52 150.228 cv
191.64 149.988 191.88 149.868 192.12 149.928 cv
192.3 149.988 192.48 150.228 192.42 150.468 cv
192.36 150.708 192.12 150.828 191.88 150.768 cv
cp
190.98 148.968 mo
190.98 148.728 191.16 148.548 191.4 148.548 cv
191.7 148.548 191.88 148.728 191.88 148.968 cv
191.88 149.208 191.7 149.448 191.4 149.448 cv
191.16 149.448 190.98 149.208 190.98 148.968 cv
cp
190.98 147.228 mo
190.98 146.988 191.16 146.808 191.4 146.808 cv
191.7 146.808 191.88 146.988 191.88 147.228 cv
191.88 147.468 191.7 147.648 191.4 147.648 cv
191.16 147.648 190.98 147.468 190.98 147.228 cv
cp
190.98 145.488 mo
190.98 145.428 li
190.98 145.188 191.16 145.008 191.4 145.008 cv
191.7 145.008 191.88 145.188 191.88 145.428 cv
191.88 145.488 li
191.88 145.728 191.7 145.908 191.4 145.908 cv
191.16 145.908 190.98 145.728 190.98 145.488 cv
cp
190.98 143.688 mo
190.98 143.448 191.16 143.268 191.4 143.268 cv
191.7 143.268 191.88 143.448 191.88 143.688 cv
191.88 143.928 191.7 144.108 191.4 144.108 cv
191.16 144.108 190.98 143.928 190.98 143.688 cv
cp
190.98 141.948 mo
190.98 141.708 191.16 141.468 191.4 141.468 cv
191.7 141.468 191.88 141.708 191.88 141.948 cv
191.88 142.188 191.7 142.368 191.4 142.368 cv
191.16 142.368 190.98 142.188 190.98 141.948 cv
cp
190.98 140.148 mo
190.98 139.908 191.16 139.728 191.4 139.728 cv
191.7 139.728 191.88 139.908 191.88 140.148 cv
191.88 140.448 191.7 140.628 191.4 140.628 cv
191.16 140.628 190.98 140.448 190.98 140.148 cv
cp
190.98 138.408 mo
190.98 138.168 191.16 137.988 191.4 137.988 cv
191.7 137.988 191.88 138.168 191.88 138.408 cv
191.88 138.648 191.7 138.828 191.4 138.828 cv
191.16 138.828 190.98 138.648 190.98 138.408 cv
cp
190.98 136.668 mo
190.98 136.428 191.16 136.188 191.4 136.188 cv
191.7 136.188 191.88 136.428 191.88 136.668 cv
191.88 136.908 191.7 137.088 191.4 137.088 cv
191.16 137.088 190.98 136.908 190.98 136.668 cv
cp
190.98 134.868 mo
190.98 134.628 191.16 134.448 191.4 134.448 cv
191.7 134.448 191.88 134.628 191.88 134.868 cv
191.88 135.108 191.7 135.348 191.4 135.348 cv
191.16 135.348 190.98 135.108 190.98 134.868 cv
cp
190.98 133.128 mo
190.98 132.888 191.16 132.708 191.4 132.708 cv
191.7 132.708 191.88 132.888 191.88 133.128 cv
191.88 133.368 191.7 133.548 191.4 133.548 cv
191.16 133.548 190.98 133.368 190.98 133.128 cv
cp
190.98 131.388 mo
190.98 131.148 191.16 130.908 191.4 130.908 cv
191.7 130.908 191.88 131.148 191.88 131.388 cv
191.88 131.628 191.7 131.808 191.4 131.808 cv
191.16 131.808 190.98 131.628 190.98 131.388 cv
cp
190.98 129.588 mo
190.98 129.348 191.16 129.168 191.4 129.168 cv
191.7 129.168 191.88 129.348 191.88 129.588 cv
191.88 129.828 191.7 130.068 191.4 130.068 cv
191.16 130.068 190.98 129.828 190.98 129.588 cv
cp
190.98 127.848 mo
190.98 127.608 191.16 127.428 191.4 127.428 cv
191.7 127.428 191.88 127.608 191.88 127.848 cv
191.88 128.088 191.7 128.268 191.4 128.268 cv
191.16 128.268 190.98 128.088 190.98 127.848 cv
cp
190.98 126.108 mo
190.98 125.868 191.16 125.628 191.4 125.628 cv
191.7 125.628 191.88 125.868 191.88 126.108 cv
191.88 126.348 191.7 126.528 191.4 126.528 cv
191.16 126.528 190.98 126.348 190.98 126.108 cv
cp
190.98 124.308 mo
190.98 124.068 191.16 123.888 191.4 123.888 cv
191.7 123.888 191.88 124.068 191.88 124.308 cv
191.88 124.548 191.7 124.788 191.4 124.788 cv
191.16 124.788 190.98 124.548 190.98 124.308 cv
cp
190.98 122.568 mo
190.98 122.328 191.16 122.148 191.4 122.148 cv
191.7 122.148 191.88 122.328 191.88 122.568 cv
191.88 122.808 191.7 122.988 191.4 122.988 cv
191.16 122.988 190.98 122.808 190.98 122.568 cv
cp
190.98 120.828 mo
190.98 120.588 191.16 120.348 191.4 120.348 cv
191.7 120.348 191.88 120.588 191.88 120.828 cv
191.88 121.068 191.7 121.248 191.4 121.248 cv
191.16 121.248 190.98 121.068 190.98 120.828 cv
cp
190.98 119.028 mo
190.98 118.788 191.16 118.608 191.4 118.608 cv
191.7 118.608 191.88 118.788 191.88 119.028 cv
191.88 119.268 191.7 119.508 191.4 119.508 cv
191.16 119.508 190.98 119.268 190.98 119.028 cv
cp
190.98 117.288 mo
190.98 117.048 191.16 116.868 191.4 116.868 cv
191.7 116.868 191.88 117.048 191.88 117.288 cv
191.88 117.528 191.7 117.708 191.4 117.708 cv
191.16 117.708 190.98 117.528 190.98 117.288 cv
cp
190.98 115.548 mo
190.98 115.308 191.16 115.068 191.4 115.068 cv
191.7 115.068 191.88 115.308 191.88 115.548 cv
191.88 115.788 191.7 115.968 191.4 115.968 cv
191.16 115.968 190.98 115.788 190.98 115.548 cv
cp
190.98 113.748 mo
190.98 113.508 191.16 113.328 191.4 113.328 cv
191.7 113.328 191.88 113.508 191.88 113.748 cv
191.88 113.988 191.7 114.228 191.4 114.228 cv
191.16 114.228 190.98 113.988 190.98 113.748 cv
cp
190.98 112.008 mo
190.98 111.768 191.16 111.588 191.4 111.588 cv
191.7 111.588 191.88 111.768 191.88 112.008 cv
191.88 112.248 191.7 112.428 191.4 112.428 cv
191.16 112.428 190.98 112.248 190.98 112.008 cv
cp
190.98 110.268 mo
190.98 109.968 191.16 109.788 191.4 109.788 cv
191.7 109.788 191.88 109.968 191.88 110.268 cv
191.88 110.508 191.7 110.688 191.4 110.688 cv
191.16 110.688 190.98 110.508 190.98 110.268 cv
cp
190.98 108.468 mo
190.98 108.228 191.16 108.048 191.4 108.048 cv
191.7 108.048 191.88 108.228 191.88 108.468 cv
191.88 108.708 191.7 108.948 191.4 108.948 cv
191.16 108.948 190.98 108.708 190.98 108.468 cv
cp
190.98 106.728 mo
190.98 106.488 191.16 106.308 191.4 106.308 cv
191.7 106.308 191.88 106.488 191.88 106.728 cv
191.88 106.968 191.7 107.148 191.4 107.148 cv
191.16 107.148 190.98 106.968 190.98 106.728 cv
cp
190.98 104.988 mo
190.98 104.928 li
190.98 104.688 191.16 104.508 191.4 104.508 cv
191.7 104.508 191.88 104.688 191.88 104.928 cv
191.88 104.988 li
191.88 105.228 191.7 105.408 191.4 105.408 cv
191.16 105.408 190.98 105.228 190.98 104.988 cv
cp
190.98 103.188 mo
190.98 102.948 191.16 102.768 191.4 102.768 cv
191.7 102.768 191.88 102.948 191.88 103.188 cv
191.88 103.428 191.7 103.608 191.4 103.608 cv
191.16 103.608 190.98 103.428 190.98 103.188 cv
cp
190.98 101.448 mo
190.98 101.208 191.16 100.968 191.4 100.968 cv
191.7 100.968 191.88 101.208 191.88 101.448 cv
191.88 101.688 191.7 101.868 191.4 101.868 cv
191.16 101.868 190.98 101.688 190.98 101.448 cv
cp
190.98 99.648 mo
190.98 99.408 191.16 99.228 191.4 99.228 cv
191.7 99.228 191.88 99.408 191.88 99.648 cv
191.88 99.948 191.7 100.128 191.4 100.128 cv
191.16 100.128 190.98 99.948 190.98 99.648 cv
cp
190.98 97.908 mo
190.98 97.668 191.16 97.488 191.4 97.488 cv
191.7 97.488 191.88 97.668 191.88 97.908 cv
191.88 98.148 191.7 98.328 191.4 98.328 cv
191.16 98.328 190.98 98.148 190.98 97.908 cv
cp
190.98 96.168 mo
190.98 95.928 191.16 95.688 191.4 95.688 cv
191.7 95.688 191.88 95.928 191.88 96.168 cv
191.88 96.408 191.7 96.588 191.4 96.588 cv
191.16 96.588 190.98 96.408 190.98 96.168 cv
cp
191.76 94.308 mo
192 94.308 192.18 94.488 192.18 94.728 cv
192.18 94.968 192 95.148 191.76 95.148 cv
191.52 95.148 191.34 94.968 191.34 94.728 cv
191.34 94.488 191.52 94.308 191.76 94.308 cv
cp
193.5 94.308 mo
193.74 94.308 193.98 94.488 193.98 94.728 cv
193.98 94.968 193.74 95.148 193.5 95.148 cv
193.26 95.148 193.08 94.968 193.08 94.728 cv
193.08 94.488 193.26 94.308 193.5 94.308 cv
cp
195.3 94.308 mo
195.54 94.308 195.72 94.488 195.72 94.728 cv
195.72 94.968 195.54 95.148 195.3 95.148 cv
195.06 95.148 194.82 94.968 194.82 94.728 cv
194.82 94.488 195.06 94.308 195.3 94.308 cv
cp
195 93.408 mo
196.74 94.728 li
195 96.048 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
0 gry
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
QHIBKL+Arial-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D0F4790807CBACD8FD659970B8> |-
/parenleft <1C60D8A8C9B81F2C72146EAAC695F5A07C2F1D42F4ECFAFB99D5
B899E6739868D6522235F0AF6332C85CA30CAEC95DBB523788622A0FDBAF5694
5859AED5AEC0A6AF7B564BC94E339A7726> |-
/parenright <1C60D8A8C9B81F2C3A92BEFBE70AC1ECC3DF5A57EA622F764BF
A6DC49C94D700C7728E7832E635A7AD60A5A0F2BE12248DE299D5D500912A0C4
F88A530C6A590C843192DEA872C7859BB9F> |-
/hyphen <1C60D8A8C9B81F2C66C118D247C063C3B94AF8F773CC341A5DE26BA
36218B351> |-
/C <1C60D8A8C9B6079F29433629160CFF8C0ED394DAF78ABC659D3C1CA35A71
24F3EC60D99D402EF815BBAD183DF52A632874467D7EAD718D8FFCEFADFCF793
B6AB7419428601D191F7033C3B817C9BA6FA6DF9FDEC520C6F71A6522E372C77
BA9557779C66B2293B99A1FC76> |-
/N <1C60D8A8C9B6079F4C1A36BFFBB0238DA9D199C92424EBC58209E918EA9D
8176C623D3A2FF453A0431A50E1A7C08A7835C1032C76A643729D97B929DA73F
8A> |-
/a <1C60D8A8C9B7EF326DB97D6F43409870DDE68B36E786E1CEB8C520798D75
A089914E6D50A78DBDE606DB1E7A7A8A7E9EBB3907821FBB6528D5604AE78DFC
F7C60D51B8097B66F1ABB013D9B0783FE79A8A07EEB9D0E55921B5EA14136EF4
D4629A27554D96FEE6DC8B31E0625B1401D62376758CA8D1FE53560B6C98E394
A2FA3EA31E7F994C1FBC689A2BB92D1634E7FC7597B84CCC44D98860261A174B
D9B54FE8C42C72F0CE477BB0756B270C987530EE723AA3D0D89B094F519F7001
647A92AB31595C> |-
/b <1C60D8A8C9B7D8BE2E8969E41767A50AC5667D3B64010783805F48F72157
1532BCC161DF6CE2C0DF9545B37E4D11132F9C0BD39E22C92B3FC86D9CE5DA95
A3D93F38AE09235C108E4BAA0F762F5FD5B9DB5E618BC7FEEEB85393DF015C92
42EB05F211CDC010CF2078AFE05DF19DFBF3243EBD9E123A5AAC9CA5EA6CE250
53799CA79AE1D8> |-
/c <1C60D8A8C9B7EF326A1572E83D714470118FDB578BF17067C3D6074E5867
EBE537A9330F0B16B9465DF152DBD1446ABD0FF4A160712BE2CB96FAAE20EFDA
96F75F80042DA3827757BEAFB3CA088896EBEF2A6C67A840982C0866> |-
/d <1C60D8A8C9B7D8BE54D5898D0F1241BAF5CE10A639D27365AB0DE8F0649A
BD4BD5D80C84B14C6B3DABEDB581BAAF2E659E1D99336B93D073BA229F593ED3
D237ACA024AE0716833AE6B4D65F3D22EF0AC9A5CC74593FDCBB8D8727D8DAB3
EDC76C00329856A8FD551FE0F30DE401254996F6961AFD368B3F3D2134441595
55C32186A0DA15365A2B898181EF8324BB009725C41F9F450D890DD24A735F22
C38FD32A84AB9FD3FBDAC06F3A548E5FB76C1F60E76F06EE546B6ABA16ECAF09
0618BF9E24E58B48D86B> |-
/e <1C60D8A8C9B7EF327170CEA4018476226C697B4144AC96594938D62BFBFA
88A2435693228FF048F202912B04439DD491C783E3C9EDA3A0ECF0A9763B2DA5
61371E6C00F9929F77F043560BA16BB7BCD3A5B5FBA94C358937B721512CC833
A6D9E0F4C499FF052890E101427575BE8CD6602A95B8> |-
/f <1C60D8A8C9B81F2C2EF90798875F55C6B7C9208D714355EF726A351D6815
982DB68413ADC09EF04A61699F666099EE693D8E6D61A084A3164CA8570BB0C4
70CCFFE68639B9D9AED0B640B5FA6767AFA6B9DF91EE> |-
/g <1C60D8A8C9B7D8BE25CB0E30EE3D27E80A0D189524766F2E9D2F98B2838E
625EAF2C9B7379AB1A3182DC4AF4483220F7A5EC6A3D31DACEE32A0945B3D362
78ACD21F4337DCAEA128473784113086E594373CAEEBB632690AB58075210105
255E472EF5E1646846E94FBDC933695CFBE426E7748399439E36B920CF671308
87A80C8FC14B70767652F503A90E4C772936ED7E2D62BFCF471135E999ABE2E5
2EBBF3F9A3ACE741F5EDC50E3E112695B70A297AAA7D4D8BE1ACC05DE354C864
97F6E32FD2EBA3D0C7B0C79CECD60B96296367D595> |-
/h <1C60D8A8C9B7D8BE30EC60D657F53493D6A9005A307158F1312B9A48ED7F
5A4BE2BA7F405DA4BA80093FC29024643F661785C633DB7B9A56502C85C0AAE5
0F587FF572B87331864F867905837D687C95CFFF0B33663829851B> |-
/i <1C60D8A8C9B854D0D10D4D348B649B6FF4ED290F8DE2C6F987DAC372F583
5820362D4099CF3F8BF6A4DCF04A7640C7AA37> |-
/j <1C60D8A8C9B854D0CC05C42A7ACD4BB46420801A5D2B9C383FF86F4D7B88
025239BFDD9FBD33C3BD793E6B3AFFFE0C45E1434042CBCECC8AEF7C299D6EBA
E8A059DECA1CF5057E5F1E8239A91B8B20ED0153200DAD> |-
/l <1C60D8A8C9B854D0D10D4D348B649B6EFFA8EAC40F98C35489B1FD3D17AB
C960> |-
/m <1C60D8A8C9B59F85DABCEED9E2B55A82FCE33D33512D09C488E4202F4B8C
841DEEB7C6815BB8BAB99EFF5558A1EC6E19D3A918855F92406B7568E5E94C76
D9C7886C30D62B0C6F7D79708144CB267ABB419520058D24F7E10A99D890843C
A8501EFC4D1DD6CCE757E7A8BEAB149C3B64658987F12F8586D084DD13A0F1BD
D17707C2992A601E7947C7EDADD7C01E63AF9EB29D0797677C3ADD6695A042BA
0E321A68E840092B8D00EE27BC491F2791> |-
/n <1C60D8A8C9B7D8BE311EE1D5AD9369197FDEA8E999B7FE1D92C1E7368175
09C153C8825C21AF043584B3C7AB318B54A4375FDC168F0AAA42780648DE7B0E
E6000E7A12C12CC6A6D9318B94056D8EE48D4652C631D30EC08CC082E5EC5436
405E13CA8F20648C0066A19A2EABBAF7F341464B3A3A214CC2FCDFB0487F3B94
1FFB8804CC351FB575530108E5D9617963BCF8> |-
/o <1C60D8A8C9B7D8BE501F5C8FB2FBA72D8923E47835DE04B22A6DB6CD384A
8F505FD4DB2070BE21A07902695A4B01FE95621D4795A955A214F8A522B40E7F
49FC473B0C330EA40629155ACC203AB3D22D764D7002A9F475F185DD03> |-
/p <1C60D8A8C9B7D8BE2E8969E41767A50AC53DB864890F8AC4DB5FFC4864AA
9CFB9901D942AA1EE14992E778D2D546105E1240E0409DA6B2235C9A673AB724
DB51D485B2313D5C9592A2AA32B34AC9A7F78B4DF9E416924A27C6FCA9D3EEC2
A0B3D0F0FA2FE27D6217E678CF3187D2A8B8701F4A150C604DA2ECB34E742B81
55857713AF16103FD8900AC6D68B9EA979E837394C08D3DF4CEEC1DF2C05FE9D
CB7D5C3EF3C33AB755F40D57404D635BEB3C73A7ADEE00FCD36C54912F7D4DCD
219CB47430A21E8D6E03C6> |-
/r <1C60D8A8C9B7361F3A2E2EA543DCA8575071FD31784B4748C250AC0B4D39
056998178576FBEA7C529C1AE8759F8FD6FF2D6A8EDF25FCBB23C7E2E993575B
970C791C6D557486F04956E12464BB4F3640FB1D9F5678F71A545AF506F8A208
D3469C> |-
/s <1C60D8A8C9B7EF321E6D62106D71367A30B92B79921F3B990CD6460AD600
F2C8A6FD77E2623F886FB64866A4819705B687650A9EED80C7AB2F37F2310234
6BE9E56CDEFED10A033E1015835DBED2258FF415A2EE3EC3CB9E3D8BC8E48FB1
9637F96518BD7F873BD31905E290B05414AE5BA1E97DE5CE72A46C64C9962757
16A7E487FAE966> |-
/t <1C60D8A8C9B81F2C14E05CE4A197E2108EFA556D82D4CBC77481E17DCF9B
9D8D9068CDA17B502BC71DA7C6F937765FE6AADE863E87299714A1550013E8EA
F90212914FD27571E22A8C7E69815A1556764DCA9CCB40C26B0BB1E0782AFF> |-
/u <1C60D8A8C9B7D8BE30EC60D657F53493D6A9005A30D66A5EF6D35D0F7DCE
F50CCE4574406031EA587157F01BD3B08C2A7AEEC0BF96E018E0D0D63956BEB2
63C3EA7254A97F7B297731ED15D642B722A623E0069B961F11DBB791516B4722
8DB7F76B9060753A620DBDFA0D2F0C7E3B2E1915C724CFAB766E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QHIBKL+Arial-BoldMT /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 67 /C put
dup 78 /N put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/QHIBKL+Arial-BoldMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 21{/.notdef}rp 
/C 10{/.notdef}rp /N 18{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /j /.notdef /l 
/m /n /o /p /.notdef /r /s /t 
/u 2{/.notdef}rp /x 135{/.notdef}rp]
QHIBKL+Arial-BoldMT nf
QHIBKL+Arial-BoldMT*1 [0 -8.82 -8.82 0 0 0 ]msf
346.74 449.808 mo
(\(a\) Normal execution\(b\) Compressed-domain execution of splitter \(left\) and joiner \(right\))
[-2.94672 -4.9136 -2.87967 -2.46167 -6.37772 -5.39868 -3.3587 -7.8587 -4.85892 -2.4017 -2.46164 -4.91364 
-4.85892 -4.85895 -4.91891 -5.39865 -2.87967 -2.46164 -5.39865 -66.9014 -2.93964 -5.39868 -2.87964 -2.46167 
-6.37775 -5.39868 -7.79871 -5.40128 -3.44077 -4.85895 -4.9136 -4.85892 -4.91364 -5.39868 -2.94669 -5.39865 
-5.34134 -7.79868 -4.91364 -2.46167 -5.34134 -2.4017 -4.9136 -4.85895 -4.9136 -4.91364 -5.39865 -2.87967 
-2.46164 -5.39865 -5.34131 -2.46164 -5.34134 -2.93964 -2.4017 -4.9136 -5.34131 -2.46161 -2.40173 -2.94666 
-2.94672 -4.91364 -3.35864 -2.40173 -2.94666 -2.40173 -4.91357 -2.94666 -2.8797 -2.8797 -2.46161 -4.91364 
-5.39862 -5.34131 -2.40167 -2.40173 -5.40125 -2.46167 -5.39868 -4.85889 -3.4187 -2.40173 -2.94666 -3.3587 
-2.46167 -5.39862 -5.39868 -2.87964 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: Arial-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
QHIBKN+Arial-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D0F4790807CBACD8FD659970B8> |-
/h <1C60D8A8C9B7EF32243F1B832E8F0F34AF47BA3599AC161382694C88EB62
0236CBA444D31C92230C215440ACACF56AD166585A0943D1BD31B6E6D91F2C5A
7DE04FB917D9C829C18A59146921E257141D3A8A13EB0E41166AF4FAEE544C37
308490> |-
/l <1C60D8A8C9B88C082010D53CF1A8D4CD196DF6A30943D4B76D6352A37443
0CD7> |-
/p <1C60D8A8C9B7EF322425E24BBF205D0D28F6A72EB6470F2FDDD4B97193E8
EC3AA7AD14C760E3B194983EC4D64865917F03CA67729CEA1EE9C42CAAD8FE9F
E2CB135A5623E89E005ECACD2EC5442BC972438A4FF009A192AB0441908381BB
20156904349778823B7039773C7847600AAE6723D98B6D218A26175899FC4C6A
B198FA471A84023AD03549B1B049B6488850E599406282B49873C17C379E1D56
831013E19FEEE0FDCBD1720B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QHIBKN+Arial-ItalicMT /Encoding get
dup 32 /space put
dup 104 /h put
dup 108 /l put
dup 112 /p put
pop
%ADOEndSubsetFont
reset_gvm
/QHIBKN+Arial-ItalicMT*1 
[32{/.notdef}rp /space 64{/.notdef}rp /a /.notdef /c /d /e 
/f /.notdef /h /i 2{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s /t /u /.notdef 
/w 136{/.notdef}rp]
QHIBKN+Arial-ItalicMT nf
QHIBKN+Arial-ItalicMT*1 [0 -7.92 -7.92 0 0 0 ]msf
183.18 43.668 mo
(prune rules )
[-4.39008 -2.62384 -4.39001 -4.39008 -4.39008 -2.22156 -2.62384 -4.43835 -1.74475 -4.39008 -3.94653 0 
]ysh
192.72 40.1278 mo
(not shown)
[-4.38373 -4.38373 -2.22156 -2.22156 -3.94019 -4.38373 -4.43915 -5.63904 0 ]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 ]]
] del_res
true set_gvm
/QHIBKM+SymbolMT*1 uf
/QHIBKM+SymbolMT uf
/KFAAAA+SymbolMT uf
/QHIBKK+ArialMT*1 uf
/QHIBKK+ArialMT uf
/ArialMT uf
/QHIBKN+Arial-ItalicMT*1 uf
/QHIBKN+Arial-ItalicMT uf
/Arial-ItalicMT uf
/QHIBKL+Arial-BoldMT*1 uf
/QHIBKL+Arial-BoldMT uf
/Arial-BoldMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
