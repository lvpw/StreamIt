%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: freq.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 9/7/2008, 10:15:40 PM
%%BoundingBox: -106 105 137 242
%%HiResBoundingBox: -105.3818 105.3819 136.3638 241.7457
%%CropBox: -105.3818 105.3819 136.3638 241.7457
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4174 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   xap:CreatorTool="PScript5.dll Version 5.2.2"
   xap:ModifyDate="2008-09-07T22:15:08-04:00"
   xap:CreateDate="2008-09-07T22:15:08-04:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)"
   xapMM:DocumentID="uuid:14a3c304-3408-4337-831c-f84f2a57a074"
   xapMM:InstanceID="uuid:0a4cde26-e63e-4053-902d-3d7aab004b99">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft PowerPoint - freq</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Bill Thies</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -241.746 translate
pgsv
[0 1 -1 0 136.364 0 ]ct
gsave
np
gsave
0 0 mo
0 241.746 li
136.364 241.746 li
136.364 0 li
cp
clp
[1 0 0 1 -236.728 0 ]ct
171 297.382 mo
441 297.382 li
441 -62.6176 li
171 -62.6176 li
cp
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
276.66 206.062 mo
291.84 206.062 li
291.84 206.542 li
276.66 206.542 li
cp
291.3 203.842 mo
294.3 206.302 li
291.3 208.822 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
315.54 206.062 mo
334.08 206.062 li
334.08 206.542 li
315.54 206.542 li
cp
333.54 203.842 mo
336.54 206.302 li
333.54 208.822 li
f
.5 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
294.3 237.022 mo
294.3 239.002 295.92 240.562 297.84 240.562 cv
312 240.562 li
313.98 240.562 315.54 239.002 315.54 237.022 cv
315.54 175.642 li
315.54 173.662 313.98 172.042 312 172.042 cv
297.84 172.042 li
295.92 172.042 294.3 173.662 294.3 175.642 cv
cp
@
/1 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT Initial
ct_T42Dict begin
-0.496 -0.305 1.117 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+TimesNewRomanPS-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32a02c8d29000000cc000000566376
7420ff44a29700000124000007786670676d015abb920000089c000005cd
676c79663df3aa6b00003da80000161268656164c514940800000e6c0000
0036686865610c7d077200000ea400000024686d74781197607500000ec8
00000eb06c6f6361004c343600001d7800000eb46d61787008d90c500000
2c2c000000206e616d65b920780a00002c4c0000069670726570791a47c3
000032e400000ac367646972000000000000000000000000000103370190
00050000059a0533002c0125059a0533004c03a000660212010502020503
05040509030400000a870000000000000000000000004d6f6e6f00010020
fffc058efe460133072101bb400001bfdff700000000058e0000054c001f
054c001c037100180000ffe10000ffe80000ffe8fe4afffc056b0023fe68
ffe2033e00000095000000950000000000000000002500a8008e010b007d
00820045003200a400ca006b0070005100af003c00f001d7004700040025
00770029004000fd00160161004601370029008e0017ffca0025005bffe9
02e600020099008100f2007500d6006300c60006009a01330024003800cc
003dff67001305d8003600860095ffdb0007043400a500d8ffdcfffe0048
00a200d8013c01530380053e0057007a007c008c0117012a0138017c0026
003c007800bd00c0021009b5000c004d004e00540058006700b404010002
0005005000af01d5034300240058008b013501c0ffac002000250026002d
00410136022bffba001e002a0034003b003f00850094009800d7012e013d
033104b900170040006100b9010e0116012201bfff9c001f001f004d005c
0086008c009600aa00cb00cb011f0154022f036005a9fee8000e006f007c
007d008b00d500f1010a0157017802b803adfe3fff6affb3ffc4001f0037
003f0044004a0078007d009700a200a700b600c000c100c600d8011d0150
019701ee04740532fd81fed1fee0ff16fff1000f002d00550068006e007f
00890095009e00c200da00e400f801040108011101c2023002da030e049e
0517ff00ff8700000020002f00410057007800870088008800b900c200c5
012001280133017401d6020e020f026c027e02ab02ec038903b103e304e7
ff43ffa8ffc3ffdcffe9000700230023002600520077007d0081008f0099
00ac00ae00b500b800c800ea00f000f40135016a018b01b101b501f70214
02ad02d504fc05d805f0ff9dfffc000b00240025002c0030003000330040
004700490057006e009a00bd00c900cd00dc00fa00fa011b0139017e0187
018a018e0195019601df01f6028602cf02de039603a903b003c804010432
046a058b05e006510761fe96fe9aff4bff870013002500340038003e004a
0065006b0073007a009c00a200b200b700bf00f000f700fb010401130120
0124013b01520178017c0181018f01a001d90248026a026f02700301031d
032303270388041f04ab04d104da057a058bfe26fe59ff2e00010002000a
003b003b004700580058005f0066006b007a007a008b009900af00bc00c0
00c700cc00e900f200f500fb00fb0102010a010b01150121012701450145
015501570158015e01610168017d01a301ab01da01ee021002180222028f
029402a302d202e703710393039b03b303d303fe04ff050b05320532054b
0559058b05ab05f2065506890742076207a708ccfd2afdc8fddefe0cfe15
fe27fe53fe84febbff58ff76ff77ffa1ffa7ffadffafffc0000000000003
0094001d001f002000200027002e0048004b004c005e005f006b0071007c
008a00900091009100a700af00b300b400c400c600d100d200de00df00df
00e600e800ea00eb00f200f500f500fc010201180123013101330137015c
016201660170017a017a017a018201980199019b01b001bf01c001ca01d3
01d701d801e001e001f601f701f802120213022f023702440247024f0252
026302650270027f0298029b02a602b702ba02c502cf02d602d702e502fe
031c031d03450348035d035e03710379038103a103b703d403d503d803e1
03f803fe0404041f042104230425043a0467048304e00528054b0564056a
059f059f05c2060b066a06af06b306cb06e8070607280748075007a607b2
07ff009500af00920096000000000000000000000000017e01a80129025b
0212020301c302b4019301cd02b204ed020e0159017a0300022d042c00c8
004d00e602890325013e0378011b00f1018d00490203007c000e029d0247
0024000000000052004400330038005405d3041501a70000028601680050
00cf0002004b0024008800ba0025ffd800110091ff6b00b5011700260065
ff9900490080014b01c000f40167027102ea04fc0310017c01e103d90155
01e601ee0434019606cb005c022b0099003d009f00160039002700de0079
0120022e005a00990388009400210019002a046c05e8000001f203b200aa
0296028902b4ffc9020000ec0005005a0447010004e00000052a001f01eb
00ae016800ca02d3028901b5040601a1014f014b011c0308005e00c70024
029d006503750104028002f304d800d90239025a032c01f2043103030050
02e50283005901eb010800ac019602f8012100950180004400e501eb02e5
007400f301ff02fd038f026801c801c70116022b0142033000fe02e10162
0200002400ee05170108023700660006010201e602aa0366019b00d305c2
03dc044d03b6000401be013702fc03200244014d0338ffed002506f8030d
fed5ff43004402ffff92040bfdef0155017100d9ffc4032d0461044afbb5
fbcf02170192036d0558fff2fe7d0583023e006605e9073d007902430025
00cf00fd00af002a01ef021a0026001f0025003a000001170490fbfb0251
001d02f001f50078018f005f00240044005400bf00af006701a800260005
0006003f009800fa02ab00c2004d0375004a00b600c401bf017c006f0013
0263000c006801520002012e0104001f001f009a000000f1046900790080
005000bd056b00ab0080001e05a5404154403f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00
b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a2344
45b01923442d2c2045b00325456164b050515845441b2121592d2cb00143
632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a
2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0
0361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2c
b01243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a
8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2c
b0022546608a46b040618c482d2c01182f2d2c20b0032545b019234445b0
1a23444565234520b00325606a20b009234223688a6a606120b01a8ab000
527921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb11400
8a5279b31940201945208a54582321b03f1b235961442d2cb11011432343
0b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d
2cb10e0f432343650b2d2cb11011432343650b2d2c4b525845441b212159
2d2c0120b003252349b04060b0206320b000525823b002253823b0022565
38008a63381b212121212159012d2c4bb06451584569b00943608a103a1b
212121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b0
06430b2d2c3eb02a2a2d2c352d2c76b802ee23701020b802ee4520b00050
58b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c64
23648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb8
1555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb4
000100000015b00826b00826b00826b008260f10161345683ab001162d2c
b4000100000015b00826b00826b00826b008260f1016134568653ab00116
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb013
4358031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b2121
592d2cb012435c580cb00425b00425060c6423646164b807085158b00425
b00425012046b01060482046b0106048590a21211b2121592d2cb012435c
580cb00425b00425060c6423646164b807085158b00425b00425012046b8
fff060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a
2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab0
12435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab01243
5c5a58381b2121592d2c462346608a8a462320468a608a61b8ff80622320
10238ab903b003b08a70456020b0005058b00161b8ffba8b1bb0468c59b0
106068013a2d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
59b12401885458b2022002436042004b014b5258b2020802436042591bb9
40000080885458b202040243604259b94000008063b80100885458b20208
0243604259b94000010063b80200885458b2021002436042595959592d00
0000000100000002e667b645345b5f0f3cf50819080000000000a31fb8bd
00000000b5c9aa29fc05fd8c08f608300000000900010001000000000001
00000721fe450057086bfc05fcfe08f60018000700000000000000000000
000003ac0639011c00000000020000000200000002aa009a035c01260400
00930400005606aa00900639006201b6010d02aa008c02aaff2104000122
056600be0200ffeb02aa0036020000450239ffbb0400007a0400007d0400
002004000044040000400400004904000081040000e80400004e0400003b
02aa007a02aa002405660096056600c805660096040000c6075c006104e3
ff9c04e3ffd10556008a05c7ffc304e3ffd204e3ffce05c7008e05c7ffca
02aaffc0038dffba0556ffc90473ffbe06aaffbd0556ffc705c7007a04e3
ffcf05c7006104e3ffd10400000e0473008f05c700da04e3010006aa00f9
04e3ff77047300b80473fffc031d000d023900da031dff33036000380400
ffef02aa01680400003004000036038d003804000027038d00400239fe9b
0400ffc904000029023900580239fea0038d00140239004f05c700230400
00270400003c0400ff1e0400002d031d002a031dffed023900540400003c
038d002c05560023038dffb8038dff5c031dffc70333008d023300ed0333
ff670454001404e3ff9c04e3ff9e0556008a04e3ffd20556ffc705c7007a
05c700da040000300400003004000030040000300400003004000030038d
003c038d0040038d0040038d0040038d0040023900580239005802390058
02390058040000270400003c0400003c0400003c0400003c0400003c0400
003c0400003c0400003c0400003c040000dd033300d40400007204000031
0400fffc02cd00ad042f006c0400feb70614008b0614008b07d700be02aa
019902aa010c04640019071dff9405c7004805b40035046400350464005e
0464005a0400fff2049cffd203f4004005b4002b06960092046400480231
0000023500b2027b00e40625005b0556002d0400000504000049031d0090
0566009604640054040000020464001e04e5ffc40400005404000025071d
010a04e3ff9c04e3ff9c05c7007a078d002d055600360400ffee071dffed
0473018a0473017502aa01b202aa01910464003503f4002f038dff600473
00b70156feab0400001102aa007402aa002e0400fe7d0400fe7d0400ffe3
0200009102aa00410473001e0800007f04e3ff9c04e3ffd204e3ff9c04e3
ffd204e3ffd202aaffc002aaffc002aaffc002aaffc005c7007a05c7007a
05c7007a05c700da05c700da05c700da0239005802aa00fe02aa00c602aa
00f602aa012602aa01c102aa017d02aaffdb02aa012f02aa004e02aa0152
0473ffc6023900330400000e031dfff00473fffc031dffad023300ed05c7
ffd004000037047300b7038dff6004e3ffcf0400ff1e056600960566017a
026600a30266006f02660084060000a1060000a1060000820400ffce05c7
008e0400ffc902aaffc00400000e031dffed0556008a038d003c0556008a
038d003c04000027040000c502ab01ee04e3ff9c0400003004e3ff9c0400
003005c7ffc304de002705c7ffd004e3ffd2038d004004e3ffd2038d0040
0473ffbe0239004f0473ffbe02e9004e0473ffbe029500490556ffc70400
00270556ffc70400002705c7007a0400003c04e3ffd1031d002604e3ffd1
031d00260400000e031dffed0473008f0239ffdd0473008f02e9005605c7
00da0400003c05c700da0400003c0473fffc031dffc30473fffc031dffc3
048dffb605c7007d0617009d0433003c03b800300327001603f2003602dd
0033046d004a0400ffef0495009a0285001407eb002f0800004f04000099
0800004f040000990800004f040000980400009807d5016a05c700c00566
00c604cd00990566009804d5022204d5010505abffe904ed01c005ab027e
05abffe905ab027e05abffe905ab027e05abffe905abffe905abffe905ab
ffe905abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff
04d500920800000007eb013007eb012007eb013007eb012004d500b204d5
008004d5002a082b0198086b01b807550010060000f40600006f0440003a
0540003704c0003f0415004004000025060000550600ffc30401004b049e
007301c0010d0355012606ab006c0355001e04d5009202d6008302d60083
04d500b202d6007004e3ff9c040000300556008a038d003a0556008a038d
003a04e3ffd2038d004004e3ffd2038d004004e3ffd2038d004005c7008e
0400ffc905c7008e0400ffc905c7008e0400ffc805c7ffca0400002905c7
ffca0400002902aaffc00239005402aaffc00239005802aaffc002390054
02aaffc0023a0034038dffba0239fea00556ffc9038d0014038d00140473
ffbe0239ffa20556ffc7040000270592ffc003db002705c7007a0400003c
05c7007a0400003c04e3ffd1031dfff90400000e031dffed04730093023a
003105c700da0400003c05c700da0400003c05c700da0400003c05c700de
0400003c06aa00f905560023047300b8038dff5e0239fe9d04e3ffa50400
0030071dff940556002d05c700480400000502aa014d06aa00f905560023
06aa00f90556002306aa00f905560023047300b8038dff5e02aa01bd02aa
00b70400003104cd005a060000a10600008206000084060000e802aa004c
02aaffdb02aa019902aa00b404e3ff9c056f005d065600590337004d05c7
007a0548005e05cf00200239005404e3ff9c04e3ffd104b2ffa704e3ffd2
0473fffc05c7ffca02aaffc00556ffc904d5ff8f06aaffbd0556ffc7051d
fff205c7007a05c7ffc504e3ffcf04c1ffb90473008f047300b804e3ff77
05a0011305c9001b02aaffc0047300bc0433003c0327001603f8003a0239
005503ac003503fcff7703270031033d002f03f8003a03ee005a02390055
03d7001f0377ffc00404ff94038d002c036d00250400003c03d7ff6f033f
003f03ac00350385ff4004f8008f05a600480239005503ac00350400003c
03ac00350595003f04e3ffce066000c1048dffb6055a008e0400000e02aa
ffc002aaffc0038dffba076bffbb075effc2066400c60550ffc7056200e1
05c7ffcd04e3ff9c04b8ffc604e3ffd1048dffb60517ff2d04e3ffd20754
ff9003f6fffe05c7ffcc05c7ffcc0550ffc7056bffb906aaffbd05c7ffca
05c7007a05c7ffc504e3ffcf0556008a0473008f056200e1066f009504e3
ff7705c7ffcc058300e70858ffe40858ffe40568007606faffc604b8ffc6
053d001e0842ffbe0542ff9104000030040600490379003f031f0002040c
003d038d00400771ffff031fffce0400003c0400003c03be0025037dffa5
051bffa403f800290400003c040000270400ff1e038d003805c70023038d
ff5c05ae003c038dffb80400003c03d10056060a0040060a00400427003c
056b006603a400660387000f05a4002a03b8ff84038d003c03d500280304
ffaa037d0036031dffed02390058023900550239fea0056fffa605b2002a
0400002903be0025038dff5c040000250385ffc30285005608000041078b
ffa80402003202aa003502aaff4f02aaff6502aaff4502aa003502aaffc2
02aaffc202aaffc302aaffc302aa01cf02aaff4f02aa010202aa005402f7
00ed02aa015c02aa005f02be037c02be003702aa007a03d3ffd5037fffc5
0291ff7e035700bd03ceffd1021c00bf0208002903c4fffa03d3005901ef
00c6038000c10349ffc7037000c703c8ffe403c3ffde020b004a023cff9d
03b1006b0383ffcd0372004f036effd5039000c50397fff0038eff8f0395
00bc04f500c203cbff85043800bf040b00c603de00c60186009b02f1009b
064c0010021c0041038000c10380008f03700016037000160383ffd104f5
00c204f500c204f500c204f500c203d3ffd503d3ffd503d3ffd5037fffc5
0291ff7e035700bd03ceffd1021c00620225000c03d3005901ef005a0380
00c10349ffc7037000c703c3ffde023cff9d03b1006b0372004f036effd5
0397fff0038eff8f038e009d04f500c203cbff85021c00bf037fffc50349
ffc7036effd50448004a0000ffdc0000ff250000ffdc0000fe510400005a
0800000005c7007a0445003c060800da045d003c0000ff1a0000fdf20000
fdb40000ff910000fef60000fee40000ff780000ff8a0000fe880000fefb
0000fea20000fe6e0000fdf4000000350000001f0000fe47041a00780600
00a10600006f0000ff2b0000fe6c0000fe8a0000fdd20000ff1e0000fe38
0000fdcd0000fd190000fce70000fd710000fd3f0000fcf90000fccd0000
fc050000fc050000fc550000fc0f0000ff190000ffa20000fe310000fc55
0000fcef0000fd9c0000fdda0000fca10000fd530000fcef0000fcb30000
fd0d0000fcb30000fdba0000fd940000fd7e0000fd300239005804e3ff9c
0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3
ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c04000030
04e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400
003004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3
ffd2038d004002aaffc00239005802aaffc00239003105c7007a0400003c
05c7007a0400003c05c7007a0400003c05c7007a0400003c05c7007a0400
003c05c7007a0400003c05c7007a0400003c05c7007a0445003c05c7007a
0445003c05c7007a0445003c05c7007a0445003c05c7007a0445003c05c7
00da0400003c05c700da0400003c060800da045d003c060800da045d003c
060800da045d003c060800da045d003c060800da045d003c047300b8038d
ff5c047300b8038dff5c047300b8038dff5c04e3ff9c0400003002aaffc0
0239005805c7007a0400003c05c700da0400003c05c700da0400003c05c7
00da0400003c05c700da0400003c05c700da0400003c000000be000000be
000000be000000be048dffb6031f00020754ff900771ffff0550ffc703be
00250550ffc703be002505c7ffca03f80029047300b804000003047300b8
0400ffdf04e3ff77038dffb8058300e703d100560583ffca04000027058f
007a038d001b05c7007a0400003c00000000000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
0068000000e8000001700000034200000342000003420000037a0000037a
0000037a0000037a000004a6000004a6000004a6000004a6000004a60000
04a6000004a6000004a6000004a6000004a6000004a6000004a6000004a6
000004a6000004a6000004a6000004a6000004a6000004a6000004a60000
04a6000004a6000004a60000079200000792000007920000079200000792
000007920000079200000792000007920000079200000792000007920000
0792000009820000098200000c0e00000c0e00000e3000000e3000000e30
00000e3000000e3000000e3000000e3000000e3000000e3000000e300000
0e3000000e3000000e3000000e3000000e3000000e3000000fd400000fd4
00000fd400000fd400000fd4000012080000120800001208000012080000
120800001208000012080000145200001452000014520000145200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000016120000161200001612000016120000161200001612
000016120000161200001612000016120000161200001612000016120001
000003ac00f2003c0068000500020010002f0055000004830ac300030002
0000000e00ae000000030000000000fe0000000000030000000700d800fe
0001000000000000007f01d60001000000000003001f0255000100000000
0004001f02740001000000000006001f02930001000000000007006c02b2
000300010409000000fe031e0003000104090001002c041c000300010409
0002000e04480003000104090003003e04560003000104090004003e0494
0003000104090006003e04d2000300010409000700d80510005400790070
00650066006100630065002000a900200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e00200070006c0063002e00200044006100740061002000a90020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e00200070006c0063002f0054
00790070006500200053006f006c007500740069006f006e007300200049
006e0063002e00200031003900390030002d0031003900390032002e0020
0041006c006c002000520069006700680074007300200052006500730065
007200760065006400540069006d006500730020004e0065007700200052
006f006d0061006e00ae002000540072006100640065006d00610072006b
0020006f006600200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e00200070
006c00630020007200650067006900730074006500720065006400200069
006e00200074006800650020005500530020005000610074002000260020
0054004d0020004f00660066002e00200061006e006400200065006c0073
006500770068006500720065002e547970656661636520a920546865204d
6f6e6f7479706520436f72706f726174696f6e20706c632e204461746120
a920546865204d6f6e6f7479706520436f72706f726174696f6e20706c63
2f5479706520536f6c7574696f6e7320496e632e20313939302d31393932
2e20416c6c20526967687473205265736572766564484d4c444a482b5469
6d65734e6577526f6d616e50532d4974616c69634d54484d4c444a482b54
696d65734e6577526f6d616e50532d4974616c69634d54484d4c444a482b
54696d65734e6577526f6d616e50532d4974616c69634d5454696d657320
4e657720526f6d616ea82054726164656d61726b206f6620546865204d6f
6e6f7479706520436f72706f726174696f6e20706c632072656769737465
72656420696e2074686520555320506174202620544d204f66662e20616e
6420656c736577686572652e005400790070006500660061006300650020
00a900200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e00200070006c0063
002e00200044006100740061002000a900200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e00200070006c0063002f005400790070006500200053006f
006c007500740069006f006e007300200049006e0063002e002000310039
00390030002d0031003900390032002e00200041006c006c002000520069
00670068007400730020005200650073006500720076006500640048004d
004c0044004a0048002b00540069006d00650073004e006500770052006f
006d0061006e005000530052006500670075006c006100720048004d004c
0044004a0048002b00540069006d00650073004e006500770052006f006d
0061006e00500053002d004900740061006c00690063004d00540048004d
004c0044004a0048002b00540069006d00650073004e006500770052006f
006d0061006e00500053002d004900740061006c00690063004d00540048
004d004c0044004a0048002b00540069006d00650073004e006500770052
006f006d0061006e00500053002d004900740061006c00690063004d0054
00540069006d006500730020004e0065007700200052006f006d0061006e
00ae002000540072006100640065006d00610072006b0020006f00660020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e00200070006c006300200072
00650067006900730074006500720065006400200069006e002000740068
006500200055005300200050006100740020002600200054004d0020004f
00660066002e00200061006e006400200065006c00730065007700680065
00720065002e0000ba0054ffc003bbb345453240b803bbb32b2e3240b803
bbb2282932b9ffc003bbb31a263280411303bb009f03bb00af03bb00cf03
bb0004000003bb001f03bb000203bb02af0027001fffc003b9b2161b32b9
ffc003b8b2424232b9ffc003b8b2363832b9ffc003b8b32a2d32df410a03
b800ef03b8000203b803b90028001fffc003b9b3282e32f0410b03b90001
000003b7000103b700030800001f03b60381b23a1f0f411703b3001003b2
002003b2005003b2007003b200e003b2000600cf03b300df03b300ef03b3
00ff03b30004001203a8b2e2891fbe039f016b019a001f03980093080140
0c1f7f047f05027f027f03025fbb02b00001ffc00117b2196632b8ffc0b3
651a6632b9ff800173b2196632bd038401170800001fffc002afb2313340
b802afb22e3340b802afb328293240b802afb326273240b802afb3212532
40b802afb31c203240b802afb2233340b802afb21933a0bc02af00b002af
00e002afb5034003212932b8fff2b33a263d32bc038203820382003a0800
b51f40255c331eb80381b25c6432b8ffeeb3252e3314b80381b32b2e3269
be03810001008a03810001000e0381b32b2f3210b80381b3515b320cb803
81b34e513222b80381b3474d320eb80381b246330ab80381400926473212
254358320cb80381b2323310b80381b22a3312b80381b3373d3212bb0381
003d0033fff44015253d331825355b32102526343206252a330c252e33b8
fffe4024252d330c3a2f33329925aa25ba25c92504052536330c25323832
193a293a383a03182517b80381b42825382504bc03810381038100250800
40101f0f1f2b2e32691f781f020b1f303332b8fff1b31f263d32bc038003
800380001f080040151f375f07af07025f06af060222ac2b2e3209ac2f33
b8ffdc400aac1f223222232b52320eb8037fb229330eb8037fb2223314b8
037fb21e2032b8ffe7b71e2b33321e2b2f32b9ffc0037fb64c4f3232262c
33410affee037f00390033fff8037f002b0033ffea037fb23a3320b8037f
b33f46321eb8037fb32f3a3212b8037fb22e331eb8037fb32a2d320eb803
7fb2263304b8037fb3494a3404b8037fb2463304b8037fb2213318b8037f
400c1d3322263032322226333832b8fff8400a262b2f3209261b21328abe
037f0001037f037f037f00260800402e1f371f062f063f06039f02af02bf
02cf02049f03af03bf03cf03046f037f038f03031f032f033f034f035f03
050f413502ed0001005f02ed009f02ed00df02ed0003002f02ed003f02ed
006f02ed000300af02af0001004f02af009f02af0002002f02af003f02af
0002003f02b00001004f02af005f02af0002002f02af003f02af00020070
03b2000103b203b202ed02ed02b002b002af02af401a3701003001400102
010100090102000800171700000012110840410b027b02230034000d013d
0034000d01370034000d011b401a340d8f340d84340d68340d59340d5434
0d48340d2c340d28340d411002350020000d021b0020000d01fc0020000d
01c30020000d01500020000d012c401a200df0200dbe200d94200d79200d
6a200d61200d5f200d44200d410d013e0138000d003d0138000d00300138
000d001d0138000d01fdb40f4d0f0009bf01fd004d000d03b1037f001500
1f0215b226341fb80214b2263f1fb80208b21ebb1f41190206001e080100
1f0205001f02ab001f0204001f02ab001f0203001f0401001f0201003101
9a001f01fb00230156001f01aeb2262a1fb801adb2262a1fb801abb22634
1f411501a8002602ab001f01a5001e0125001f01a400ab02ab001f01a200
3102ab001f01a1003102ab001f019db2236c1fb8019cb2236c1f4109019b
00230401001f019a0033019a001f0176b2262e1fb8016cb231721f411101
6b0023019a001f016800240401001f014500260801001f013f0023040100
1f0123b21e9e1fbc0121001e0201001f0100b426791ffd1fb80125b21ffa
33b80801b21ff924b802abb21fe826b80101b21fe51fb8019ab21fe431b8
0101400b1fe331e41fe231891fd226b80201b61fd026cd1fcd25b80401b2
1fb731b8019ab21fae26b80801b21fac1eb80401400b1f9e315e1f97269e
1f9333b80801b21f8a24b8019ab21f831fb802ab40131f82236c1f7523e4
1f7026cd1f6423721f5e25b80401b21f5d23b802abb21f55e6b80401b21f
5324b80201b21f4f33b802abb21f4e26b8040140131f4731671f4626ab1f
4331cd1f3e235e1f3a1fb80401b61f3924e41f3723b80801b21f2e23b804
01b21f2a1eb80125400b1f2923ab1f2731ab1f5537bc01c60007018a0007
012b402e077f077107690766074b074007380736072d0722072107140812
0810080e080c080a080808060804080208000814b8ffe0402b0000010014
061000000100060400000100041000000100100200000100020000000100
0002010802004a00b013034b024b5342b0372b4bb807ff52b0382b4bb009
505b58b101018e59014bb0c063004b6220b0f65323b8010a515ab0052342
01b0124b004b544218b0382bb00288b801005458b801ffb101018e851bb0
124358b900010140858d1bb900010159858d59590016763f183f123e1139
46443e113946443e113946443e113946443e11394660443e11394660442b
2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b181db096
4b5358b0aa1d59b0324b5358b0ff1d594bb04753205c58b9027d027b4544
b9027c027b45445958b90146027d455258b9027d01464459594bb0475320
5c58b9001e027c4544b90026027c45445958b9017f001e455258b9001e01
7f4459594bb05e53205c58b9001f027d4544b90025027d45445958b901a8
001f455258b9001f01a84459594bb8010153205c58b1ab1f4544b11f1f45
445958b9047000ab455258b900ab04704459594bb8012553205c58b1e61f
4544b11f1f45445958b9051000e6455258b900e605104459594bb0175320
5c58b124244544b1312445445958b12224455258b124224459594bb05153
205c58b124244544b1232445445958b17d24455258b1247d4459594bb06e
53205c58b124244544b1332445445958b1aa24455258b124aa4459592b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b45695342014b5058b108004259435c58
b1080042591610703eb0124358b911b53d801bba011c03d9000b2b59b00a
2342b00b2342003f3f182b103c012f5d060cb0062342b0072342b0124358
b93b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d41
2d411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211b
ba01a80400000b2b59b0102342b0112342002b4bb02e5358b8016b45b02a
60b8016b2344590018456944456944184569444569447373737375757573
737475757575752b4bb026534bb03d515a58b1262645b0196044592b4518
6944742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
004bb02a534bb03f515a58b1070745b04060445973732b2b451869442b2b
752b2b4518694475752b2b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
74752b2b2b2b2b451869442b002b732b2b2b2b2b2b2b2b2b012b2b2b0073
73732b2b2b01435c58b8ffdeb31e1c3318b8037fb52b3318262b33b9fff0
0381b112332b2b2b2b590173742b002b73752b2b732b2b2b2b2b73752b2b
2b2b2b0000>
[5651 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 368 13 <0001009102500370058e005200e5b6f934010934011cb8ffdeb310133444
b8ffde400e101334182210133448221013341eb8ffdeb325273405b8ffde
b31c1d3430b8ffdeb32a2d3405b8ffdeb32a2d3405b8ffde402422273451
49433904324c344636041a2b27241d1710041f0a0d00273632040a2b041f
3f2eb80122b622003c103c023cbc0183001203aa004f0122b4070000a60d
bc03a9001503aa001f017db227a636b803a9b53f3f0f4c014cb8014ab353
a27b182b10f65d3c10fdfdfdf4fded003ff4f4fd5d3ce401111217391112
39391112173911123911123939111217393130012b2b2b2b2b002b2b2b2b
017271012627263534363332161514060736373636333216151406070607
161716161514062322262726271617161514062322272635343636370607
060706232226353436373637363726272627263534363332161601ee0418
2231241f2e3506372c444222212d42844d33344b794b2d1e1e493e293d02
1524301b251e152e0c053b2c49251a1c223029291b603e3b364b7b1d2d2d
1e214a6e041445446225343636322da14423324f262d1f253a1d11161b0e
1642271e2c2a49312b3943762b28371d152e3087333227305216102e1c19
37120c140d191b0f1a15212f1b2d2a7f>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 834 16 <00010036017a026501ff0003001cb300830201b80311b6050219046d8e18
2b4e10e44d10e4002ffd313001072137026529fdfa2901ff8585>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 2434 58 <000100f9ffe1078d054c003101e04011062c010d040b0f0d110e130f1406
2e060db8ffc0b3120b3f1eb8ffc0b30b0f340db8ffc040110b0f34010d01
30220c0f340e400c0f3409b8ffc0b20b3508b8ffc040ed0b3513400b0f34
14400b0f34081e091f09200f250a2d052e05312f2508152e15314f214f22
4f274f2b4f2d5e1f5e2d790e7b228a138a149e139e14942bb22b113f2d4f
1f4f20033f273f2b3f2c033f223f253f26033f1f3f203f21032e2d2e3002
171c2f0e2e1f030f141f1402140e131d14100801080c091d08101501151b
161d15272d281d270701061d070f262f2602261f251d261f1e1e232e2d14
2e2e2d1b1e1e1e2f30142f1e1f2f300e0d0d233130143131300c0d0d1e00
0114000d0e0001010c0d300e1b1c1d1e1f2d0b0027262615151414080807
02312f2e0009300e1e1b1f2d062f010c0d030033b80356b22e882fb80288
b2318800b8ffc0400b1929340f001f0002001932ba0178034a00182b4e10
f45d2b4dedf4ede4111733111733003f3c3c3c3f3c103c103c103c103c12
173987082e2b7d1005c487042e182b7d1005c487082e182b7d1005c48704
2e182b7d1005c4180010ed0110c05d0010ed0110c00010ed0110c00010ed
0110c05d0010ed0110c05d0010ed0110c05d3130015d5d5d5d5d5d5d5d2b
2b2b2b2b2b00712b2b2b0171005d05133635342627372107260607030136
353426273721070607060607060203013636353426273721070606070607
012313010115750742560b01fc0b664b0e4b020301426d0802250b5f2118
210a032b2b01ad4624303a0801920a3552382064fd57256efd571f046a41
233a3c022525014b92fd24031b140e383c072525010f0b313b11fe52fe8e
028c6b561e1c2b062525042c3e249afbe6041afbe600>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 3632 76 <00020058ffe8022e0516000b002901244027176e3a3516763a35122b4012
352b40191b34590c0119230116172945215a282830294d0c007006b8039c
401a0c07280c0f0c290f1f1e21141e1e211b0b1e2a28211e10178a16b801
43b40f0970030cb80147b203600fb80123b7296c121e401b351eb8ffc0b3
3a3b341eb8ffc0b32a34341eb8ffc040092324341e401f20341eb8ffc040
13131634301e8f1e021e192a1e171e2a0a7786182b2b103c2b4e10f45d2b
2b2b2b2b2b435c58400b1e401c113f1e400d113f1eb8ffc0b3160d3f1eb8
ffc0b117392b2b2b2b594de4fde4e610ed10f6ed2b103c2b10c0003f870e
2e2b087d10c42b183f00f6ed10f5ed2bfc01f510c9313001715d2b2b435c
58b517400c143f0db8ffdeb61339172213390db8ffdeb50f3917400f392b
2b2b2b2b59012b2b01321615140623222635343613030615141633323736
371706070623222635343713363534262322073501ca2a3a3b29293b3a37
c614130d0f15393a23445c443e29341982201f1b164505163a2a293b3b29
2a3afe73fd43470e1014102d53176847353125255601c06e1c161c0b2700
>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 4052 81 <00010027ffe803ad03890036018f400901180c392d180c390ab8ffde409c
13143e14221339082f16001b021b2f0451075209521e512079017b2d891e
a627a428ba02ba260b5c015c28bf01035a095a1e5a2003690669096a1e79
09791e7b2606562a51356c260352000114221935132219350101022a2b2b
00131436452d5a283530364d0001232c01002d9f2301233104040007070c
0c1f1b20141b1b20002b00362b1f2c2d142c2c2d2c2b0a180b1b3728201b
2d2c10148a13b80143b30c072520b80124b20c251bb8ffc0b25c351bb802
95b235c92dbc0124002b0203002cffc0b217392cb8ffc0b25c352cb8ffc0
b23a352cb8ffc0b32a34342cb8ffc0b32324342cb8ffc0b21c352cb8ffc0
4013191a34ef2c012c19371b172c171b370a3286182b2b103c2b2b4e10f4
5d2b2b2b2b2b2b2b4dede4e4f42bedf4ed10f6ed2b103c103c2b10c0003f
3f3c87052e2b087d10c4870e2e182b7d10c400183f3c10ed720111123900
11123910f5ed2bfc01f510c987100e7dc4083c3130012b2b5d5d5d4bb032
534bb036515a58b120223859015d005d015d712b2b2b2b01031236333216
151407030615141633323736371706070623222635343713363534262322
07060607060707231336353426232207072701c485bbc75c32411d7a1510
090c11353f1f5d533a2e252c2274161a131c274aa0592f1f3296b620231a
0c1e26060389fe390117b042353c64fe5b49100e130d2a56138539272d26
307501924b2a1419182dcfa15565a5027271171621040624>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 4616 88 <0001003cffe803c40389003c01974084083a193a021235314731543c6a16
79157a16ac15c500fa1509552e543b6a09034b1554005a150336003c1502
2128293902ab090139263f284f285f28f515f616f53907143b3c3c13090a
262738393a16170533153c1326271b3d2e33331f1b20141b1b202b073c00
060003031f133c1413133c180e0b1b133d28201b3c13100a8a096003b802
03401b3cad134043351340181934134015351f134f135f138f139f130513
b80234400c33251b402e012e252095121bb8ffc0b23a351bb8ffc0b31819
341bb8ffc0b31415341bb8ffc0b32c34341bb8ffc04019232834301b401b
a01b031b193d091b1713171b133d0a77c3182b2b103c3c2b2b2b4e10f45d
2b2b2b2b2b435c58b51b4023123f1bb8ffc0b3120b3f1bb8ffc0b116392b
2b2b59014df4ed5d10edf45d2b2b2be4edf4ed2b103c103c2b10c0c0003f
3c870e2e2b057d10c400183f3c3f870e2e2b0e7d10c40111123939111239
12173910c910c9870e103cc43130005d01715d5d5d5d5d435c5840181518
0b3915180c3900220c393b220c3930220c391e220c392b2b2b2b2b2b5901
5d0103061514163332363717060706232226353437363702062322263534
3713363534262322060727363736333216151407030615141633323e0237
3703c4ae270d0b1129531e4f533733272c0d104baae5622e402c5720110a
152a4a1f4b544036252f285e271915216ab17341160371fdac852312111f
6c177d3b262c2322384af8fee9d440314b9b01356f1b0c111e601674372b
2f25368bfebd8423131742e3c7d94c00>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 0 0 <0002010000000500050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121010004
00fc2003c0fc400500fb002004c0>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/asterisk 13 def
/hyphen 16 def
/W 58 def
/i 76 def
/n 81 def
/u 88 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 42 /asterisk put
dup 45 /hyphen put
dup 87 /W put
dup 105 /i put
dup 110 /n put
dup 117 /u put
pop
end
%ADOEndSubsetFont
reset_gvm
/WOKOUX+TimesNewRomanPS-ItalicMT /PBAAAA+TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/WOKOUX+TimesNewRomanPS-ItalicMT*1 
[42{/.notdef}rp /asterisk 2{/.notdef}rp /hyphen 41{/.notdef}rp /W 17{/.notdef}rp /i 
4{/.notdef}rp /n 6{/.notdef}rp /u 138{/.notdef}rp]
WOKOUX+TimesNewRomanPS-ItalicMT nf
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -10.02 -10.02 0 0 0 ]msf
309.36 215.182 mo
(u)sh
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -7.98 -7.98 0 0 0 ]msf
312.36 210.142 mo
(i)sh
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -10.02 -10.02 0 0 0 ]msf
309.36 207.922 mo
(*W)
[-5.04007 0 ]ysh
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -7.98 -7.98 0 0 0 ]msf
312.36 194.602 mo
(n-i)
[-4.02032 -2.63971 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: HIBBAA+TimesNewRomanPS-ItalicMT Initial
ct_T42Dict begin
-0.496 -0.305 1.117 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /HIBBAA+TimesNewRomanPS-ItalicMT
Type42DictBegin
[<00010000000c000c000c000c4f532f32a02c8d29000000cc000000566376
7420ff44a29700000124000007786670676d015abb920000089c000005cd
676c796658deae4800003da8000001c468656164c514940800000e6c0000
0036686865610c7d077200000ea400000024686d74781197607500000ec8
00000eb06c6f63610003b8d000001d7800000eb46d61787008d90c500000
2c2c000000206e616d65b40c760c00002c4c0000069670726570791a47c3
000032e400000ac367646972000000000000000000000000000103370190
00050000059a0533002c0125059a0533004c03a000660212010502020503
05040509030400000a870000000000000000000000004d6f6e6f00010020
fffc058efe460133072101bb400001bfdff700000000058e0000054c001f
054c001c037100180000ffe10000ffe80000ffe8fe4afffc056b0023fe68
ffe2033e00000095000000950000000000000000002500a8008e010b007d
00820045003200a400ca006b0070005100af003c00f001d7004700040025
00770029004000fd00160161004601370029008e0017ffca0025005bffe9
02e600020099008100f2007500d6006300c60006009a01330024003800cc
003dff67001305d8003600860095ffdb0007043400a500d8ffdcfffe0048
00a200d8013c01530380053e0057007a007c008c0117012a0138017c0026
003c007800bd00c0021009b5000c004d004e00540058006700b404010002
0005005000af01d5034300240058008b013501c0ffac002000250026002d
00410136022bffba001e002a0034003b003f00850094009800d7012e013d
033104b900170040006100b9010e0116012201bfff9c001f001f004d005c
0086008c009600aa00cb00cb011f0154022f036005a9fee8000e006f007c
007d008b00d500f1010a0157017802b803adfe3fff6affb3ffc4001f0037
003f0044004a0078007d009700a200a700b600c000c100c600d8011d0150
019701ee04740532fd81fed1fee0ff16fff1000f002d00550068006e007f
00890095009e00c200da00e400f801040108011101c2023002da030e049e
0517ff00ff8700000020002f00410057007800870088008800b900c200c5
012001280133017401d6020e020f026c027e02ab02ec038903b103e304e7
ff43ffa8ffc3ffdcffe9000700230023002600520077007d0081008f0099
00ac00ae00b500b800c800ea00f000f40135016a018b01b101b501f70214
02ad02d504fc05d805f0ff9dfffc000b00240025002c0030003000330040
004700490057006e009a00bd00c900cd00dc00fa00fa011b0139017e0187
018a018e0195019601df01f6028602cf02de039603a903b003c804010432
046a058b05e006510761fe96fe9aff4bff870013002500340038003e004a
0065006b0073007a009c00a200b200b700bf00f000f700fb010401130120
0124013b01520178017c0181018f01a001d90248026a026f02700301031d
032303270388041f04ab04d104da057a058bfe26fe59ff2e00010002000a
003b003b004700580058005f0066006b007a007a008b009900af00bc00c0
00c700cc00e900f200f500fb00fb0102010a010b01150121012701450145
015501570158015e01610168017d01a301ab01da01ee021002180222028f
029402a302d202e703710393039b03b303d303fe04ff050b05320532054b
0559058b05ab05f2065506890742076207a708ccfd2afdc8fddefe0cfe15
fe27fe53fe84febbff58ff76ff77ffa1ffa7ffadffafffc0000000000003
0094001d001f002000200027002e0048004b004c005e005f006b0071007c
008a00900091009100a700af00b300b400c400c600d100d200de00df00df
00e600e800ea00eb00f200f500f500fc010201180123013101330137015c
016201660170017a017a017a018201980199019b01b001bf01c001ca01d3
01d701d801e001e001f601f701f802120213022f023702440247024f0252
026302650270027f0298029b02a602b702ba02c502cf02d602d702e502fe
031c031d03450348035d035e03710379038103a103b703d403d503d803e1
03f803fe0404041f042104230425043a0467048304e00528054b0564056a
059f059f05c2060b066a06af06b306cb06e8070607280748075007a607b2
07ff009500af00920096000000000000000000000000017e01a80129025b
0212020301c302b4019301cd02b204ed020e0159017a0300022d042c00c8
004d00e602890325013e0378011b00f1018d00490203007c000e029d0247
0024000000000052004400330038005405d3041501a70000028601680050
00cf0002004b0024008800ba0025ffd800110091ff6b00b5011700260065
ff9900490080014b01c000f40167027102ea04fc0310017c01e103d90155
01e601ee0434019606cb005c022b0099003d009f00160039002700de0079
0120022e005a00990388009400210019002a046c05e8000001f203b200aa
0296028902b4ffc9020000ec0005005a0447010004e00000052a001f01eb
00ae016800ca02d3028901b5040601a1014f014b011c0308005e00c70024
029d006503750104028002f304d800d90239025a032c01f2043103030050
02e50283005901eb010800ac019602f8012100950180004400e501eb02e5
007400f301ff02fd038f026801c801c70116022b0142033000fe02e10162
0200002400ee05170108023700660006010201e602aa0366019b00d305c2
03dc044d03b6000401be013702fc03200244014d0338ffed002506f8030d
fed5ff43004402ffff92040bfdef0155017100d9ffc4032d0461044afbb5
fbcf02170192036d0558fff2fe7d0583023e006605e9073d007902430025
00cf00fd00af002a01ef021a0026001f0025003a000001170490fbfb0251
001d02f001f50078018f005f00240044005400bf00af006701a800260005
0006003f009800fa02ab00c2004d0375004a00b600c401bf017c006f0013
0263000c006801520002012e0104001f001f009a000000f1046900790080
005000bd056b00ab0080001e05a5404154403f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b09051582320b00d44235921212d2c20204518684420b001602045b046
76688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00
b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a2344
45b01923442d2c2045b00325456164b050515845441b2121592d2cb00143
632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a
2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0
0361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2c
b01243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a
8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2c
b0022546608a46b040618c482d2c01182f2d2c20b0032545b019234445b0
1a23444565234520b00325606a20b009234223688a6a606120b01a8ab000
527921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb11400
8a5279b31940201945208a54582321b03f1b235961442d2cb11011432343
0b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d
2cb10e0f432343650b2d2cb11011432343650b2d2c4b525845441b212159
2d2c0120b003252349b04060b0206320b000525823b002253823b0022565
38008a63381b212121212159012d2c4bb06451584569b00943608a103a1b
212121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b0
06430b2d2c3eb02a2a2d2c352d2c76b802ee23701020b802ee4520b00050
58b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c64
23648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb8
1555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb4
000100000015b00826b00826b00826b008260f10161345683ab001162d2c
b4000100000015b00826b00826b00826b008260f1016134568653ab00116
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb013
4358031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b2121
592d2cb012435c580cb00425b00425060c6423646164b807085158b00425
b00425012046b01060482046b0106048590a21211b2121592d2cb012435c
580cb00425b00425060c6423646164b807085158b00425b00425012046b8
fff060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a
2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab0
12435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab01243
5c5a58381b2121592d2c462346608a8a462320468a608a61b8ff80622320
10238ab903b003b08a70456020b0005058b00161b8ffba8b1bb0468c59b0
106068013a2d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
59b12401885458b2022002436042004b014b5258b2020802436042591bb9
40000080885458b202040243604259b94000008063b80100885458b20208
0243604259b94000010063b80200885458b2021002436042595959592d00
0000000100000002e667226a85cb5f0f3cf50819080000000000a31fb8bd
00000000b5c9aa29fc05fd8c08f608300000000900010001000000000001
00000721fe450057086bfc05fcfe08f60018000700000000000000000000
000003ac0639011c00000000020000000200000002aa009a035c01260400
00930400005606aa00900639006201b6010d02aa008c02aaff2104000122
056600be0200ffeb02aa0036020000450239ffbb0400007a0400007d0400
002004000044040000400400004904000081040000e80400004e0400003b
02aa007a02aa002405660096056600c805660096040000c6075c006104e3
ff9c04e3ffd10556008a05c7ffc304e3ffd204e3ffce05c7008e05c7ffca
02aaffc0038dffba0556ffc90473ffbe06aaffbd0556ffc705c7007a04e3
ffcf05c7006104e3ffd10400000e0473008f05c700da04e3010006aa00f9
04e3ff77047300b80473fffc031d000d023900da031dff33036000380400
ffef02aa01680400003004000036038d003804000027038d00400239fe9b
0400ffc904000029023900580239fea0038d00140239004f05c700230400
00270400003c0400ff1e0400002d031d002a031dffed023900540400003c
038d002c05560023038dffb8038dff5c031dffc70333008d023300ed0333
ff670454001404e3ff9c04e3ff9e0556008a04e3ffd20556ffc705c7007a
05c700da040000300400003004000030040000300400003004000030038d
003c038d0040038d0040038d0040038d0040023900580239005802390058
02390058040000270400003c0400003c0400003c0400003c0400003c0400
003c0400003c0400003c0400003c040000dd033300d40400007204000031
0400fffc02cd00ad042f006c0400feb70614008b0614008b07d700be02aa
019902aa010c04640019071dff9405c7004805b40035046400350464005e
0464005a0400fff2049cffd203f4004005b4002b06960092046400480231
0000023500b2027b00e40625005b0556002d0400000504000049031d0090
0566009604640054040000020464001e04e5ffc40400005404000025071d
010a04e3ff9c04e3ff9c05c7007a078d002d055600360400ffee071dffed
0473018a0473017502aa01b202aa01910464003503f4002f038dff600473
00b70156feab0400001102aa007402aa002e0400fe7d0400fe7d0400ffe3
0200009102aa00410473001e0800007f04e3ff9c04e3ffd204e3ff9c04e3
ffd204e3ffd202aaffc002aaffc002aaffc002aaffc005c7007a05c7007a
05c7007a05c700da05c700da05c700da0239005802aa00fe02aa00c602aa
00f602aa012602aa01c102aa017d02aaffdb02aa012f02aa004e02aa0152
0473ffc6023900330400000e031dfff00473fffc031dffad023300ed05c7
ffd004000037047300b7038dff6004e3ffcf0400ff1e056600960566017a
026600a30266006f02660084060000a1060000a1060000820400ffce05c7
008e0400ffc902aaffc00400000e031dffed0556008a038d003c0556008a
038d003c04000027040000c502ab01ee04e3ff9c0400003004e3ff9c0400
003005c7ffc304de002705c7ffd004e3ffd2038d004004e3ffd2038d0040
0473ffbe0239004f0473ffbe02e9004e0473ffbe029500490556ffc70400
00270556ffc70400002705c7007a0400003c04e3ffd1031d002604e3ffd1
031d00260400000e031dffed0473008f0239ffdd0473008f02e9005605c7
00da0400003c05c700da0400003c0473fffc031dffc30473fffc031dffc3
048dffb605c7007d0617009d0433003c03b800300327001603f2003602dd
0033046d004a0400ffef0495009a0285001407eb002f0800004f04000099
0800004f040000990800004f040000980400009807d5016a05c700c00566
00c604cd00990566009804d5022204d5010505abffe904ed01c005ab027e
05abffe905ab027e05abffe905ab027e05abffe905abffe905abffe905ab
ffe905abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff
04d500920800000007eb013007eb012007eb013007eb012004d500b204d5
008004d5002a082b0198086b01b807550010060000f40600006f0440003a
0540003704c0003f0415004004000025060000550600ffc30401004b049e
007301c0010d0355012606ab006c0355001e04d5009202d6008302d60083
04d500b202d6007004e3ff9c040000300556008a038d003a0556008a038d
003a04e3ffd2038d004004e3ffd2038d004004e3ffd2038d004005c7008e
0400ffc905c7008e0400ffc905c7008e0400ffc805c7ffca0400002905c7
ffca0400002902aaffc00239005402aaffc00239005802aaffc002390054
02aaffc0023a0034038dffba0239fea00556ffc9038d0014038d00140473
ffbe0239ffa20556ffc7040000270592ffc003db002705c7007a0400003c
05c7007a0400003c04e3ffd1031dfff90400000e031dffed04730093023a
003105c700da0400003c05c700da0400003c05c700da0400003c05c700de
0400003c06aa00f905560023047300b8038dff5e0239fe9d04e3ffa50400
0030071dff940556002d05c700480400000502aa014d06aa00f905560023
06aa00f90556002306aa00f905560023047300b8038dff5e02aa01bd02aa
00b70400003104cd005a060000a10600008206000084060000e802aa004c
02aaffdb02aa019902aa00b404e3ff9c056f005d065600590337004d05c7
007a0548005e05cf00200239005404e3ff9c04e3ffd104b2ffa704e3ffd2
0473fffc05c7ffca02aaffc00556ffc904d5ff8f06aaffbd0556ffc7051d
fff205c7007a05c7ffc504e3ffcf04c1ffb90473008f047300b804e3ff77
05a0011305c9001b02aaffc0047300bc0433003c0327001603f8003a0239
005503ac003503fcff7703270031033d002f03f8003a03ee005a02390055
03d7001f0377ffc00404ff94038d002c036d00250400003c03d7ff6f033f
003f03ac00350385ff4004f8008f05a600480239005503ac00350400003c
03ac00350595003f04e3ffce066000c1048dffb6055a008e0400000e02aa
ffc002aaffc0038dffba076bffbb075effc2066400c60550ffc7056200e1
05c7ffcd04e3ff9c04b8ffc604e3ffd1048dffb60517ff2d04e3ffd20754
ff9003f6fffe05c7ffcc05c7ffcc0550ffc7056bffb906aaffbd05c7ffca
05c7007a05c7ffc504e3ffcf0556008a0473008f056200e1066f009504e3
ff7705c7ffcc058300e70858ffe40858ffe40568007606faffc604b8ffc6
053d001e0842ffbe0542ff9104000030040600490379003f031f0002040c
003d038d00400771ffff031fffce0400003c0400003c03be0025037dffa5
051bffa403f800290400003c040000270400ff1e038d003805c70023038d
ff5c05ae003c038dffb80400003c03d10056060a0040060a00400427003c
056b006603a400660387000f05a4002a03b8ff84038d003c03d500280304
ffaa037d0036031dffed02390058023900550239fea0056fffa605b2002a
0400002903be0025038dff5c040000250385ffc30285005608000041078b
ffa80402003202aa003502aaff4f02aaff6502aaff4502aa003502aaffc2
02aaffc202aaffc302aaffc302aa01cf02aaff4f02aa010202aa005402f7
00ed02aa015c02aa005f02be037c02be003702aa007a03d3ffd5037fffc5
0291ff7e035700bd03ceffd1021c00bf0208002903c4fffa03d3005901ef
00c6038000c10349ffc7037000c703c8ffe403c3ffde020b004a023cff9d
03b1006b0383ffcd0372004f036effd5039000c50397fff0038eff8f0395
00bc04f500c203cbff85043800bf040b00c603de00c60186009b02f1009b
064c0010021c0041038000c10380008f03700016037000160383ffd104f5
00c204f500c204f500c204f500c203d3ffd503d3ffd503d3ffd5037fffc5
0291ff7e035700bd03ceffd1021c00620225000c03d3005901ef005a0380
00c10349ffc7037000c703c3ffde023cff9d03b1006b0372004f036effd5
0397fff0038eff8f038e009d04f500c203cbff85021c00bf037fffc50349
ffc7036effd50448004a0000ffdc0000ff250000ffdc0000fe510400005a
0800000005c7007a0445003c060800da045d003c0000ff1a0000fdf20000
fdb40000ff910000fef60000fee40000ff780000ff8a0000fe880000fefb
0000fea20000fe6e0000fdf4000000350000001f0000fe47041a00780600
00a10600006f0000ff2b0000fe6c0000fe8a0000fdd20000ff1e0000fe38
0000fdcd0000fd190000fce70000fd710000fd3f0000fcf90000fccd0000
fc050000fc050000fc550000fc0f0000ff190000ffa20000fe310000fc55
0000fcef0000fd9c0000fdda0000fca10000fd530000fcef0000fcb30000
fd0d0000fcb30000fdba0000fd940000fd7e0000fd300239005804e3ff9c
0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3
ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c04000030
04e3ff9c0400003004e3ff9c0400003004e3ff9c0400003004e3ff9c0400
003004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2
038d004004e3ffd2038d004004e3ffd2038d004004e3ffd2038d004004e3
ffd2038d004002aaffc00239005802aaffc00239003105c7007a0400003c
05c7007a0400003c05c7007a0400003c05c7007a0400003c05c7007a0400
003c05c7007a0400003c05c7007a0400003c05c7007a0445003c05c7007a
0445003c05c7007a0445003c05c7007a0445003c05c7007a0445003c05c7
00da0400003c05c700da0400003c060800da045d003c060800da045d003c
060800da045d003c060800da045d003c060800da045d003c047300b8038d
ff5c047300b8038dff5c047300b8038dff5c04e3ff9c0400003002aaffc0
0239005805c7007a0400003c05c700da0400003c05c700da0400003c05c7
00da0400003c05c700da0400003c05c700da0400003c000000be000000be
000000be000000be048dffb6031f00020754ff900771ffff0550ffc703be
00250550ffc703be002505c7ffca03f80029047300b804000003047300b8
0400ffdf04e3ff77038dffb8058300e703d100560583ffca04000027058f
007a038d001b05c7007a0400003c00000000000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
006800000068000000680000006800000068000000680000006800000068
000000680000006800000068000000680000006800000068000000680000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40000
01c4000001c4000001c4000001c4000001c4000001c4000001c4000001c4
000001c4000001c4000001c4000001c4000001c4000001c4000001c40001
000003ac00f2003c0068000500020010002f0055000004830ac300030002
0000000e00ae000000030000000000fe0000000000030000000700d800fe
0001000000000000007f01d60001000000000003001f0255000100000000
0004001f02740001000000000006001f02930001000000000007006c02b2
0003000004090001002c031e0003000004090002000e034a000300000409
0003003e03580003000004090004003e03960003000004090006003e03d4
000300010409000000fe0412000300010409000700d80510005400790070
00650066006100630065002000a900200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e00200070006c0063002e00200044006100740061002000a90020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e00200070006c0063002f0054
00790070006500200053006f006c007500740069006f006e007300200049
006e0063002e00200031003900390030002d0031003900390032002e0020
0041006c006c002000520069006700680074007300200052006500730065
007200760065006400540069006d006500730020004e0065007700200052
006f006d0061006e00ae002000540072006100640065006d00610072006b
0020006f006600200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e00200070
006c00630020007200650067006900730074006500720065006400200069
006e00200074006800650020005500530020005000610074002000260020
0054004d0020004f00660066002e00200061006e006400200065006c0073
006500770068006500720065002e547970656661636520a920546865204d
6f6e6f7479706520436f72706f726174696f6e20706c632e204461746120
a920546865204d6f6e6f7479706520436f72706f726174696f6e20706c63
2f5479706520536f6c7574696f6e7320496e632e20313939302d31393932
2e20416c6c20526967687473205265736572766564484d4c4449472b5469
6d65734e6577526f6d616e50532d4974616c69634d54484d4c4449472b54
696d65734e6577526f6d616e50532d4974616c69634d54484d4c4449472b
54696d65734e6577526f6d616e50532d4974616c69634d5454696d657320
4e657720526f6d616ea82054726164656d61726b206f6620546865204d6f
6e6f7479706520436f72706f726174696f6e20706c632072656769737465
72656420696e2074686520555320506174202620544d204f66662e20616e
6420656c736577686572652e0048004d004c004400490047002b00540069
006d00650073004e006500770052006f006d0061006e0050005300520065
00670075006c006100720048004d004c004400490047002b00540069006d
00650073004e006500770052006f006d0061006e00500053002d00490074
0061006c00690063004d00540048004d004c004400490047002b00540069
006d00650073004e006500770052006f006d0061006e00500053002d0049
00740061006c00690063004d00540048004d004c004400490047002b0054
0069006d00650073004e006500770052006f006d0061006e00500053002d
004900740061006c00690063004d00540054007900700065006600610063
0065002000a900200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e00200070
006c0063002e00200044006100740061002000a900200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e00200070006c0063002f00540079007000650020
0053006f006c007500740069006f006e007300200049006e0063002e0020
0031003900390030002d0031003900390032002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
00540069006d006500730020004e0065007700200052006f006d0061006e
00ae002000540072006100640065006d00610072006b0020006f00660020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e00200070006c006300200072
00650067006900730074006500720065006400200069006e002000740068
006500200055005300200050006100740020002600200054004d0020004f
00660066002e00200061006e006400200065006c00730065007700680065
00720065002e0000ba0054ffc003bbb345453240b803bbb32b2e3240b803
bbb2282932b9ffc003bbb31a263280411303bb009f03bb00af03bb00cf03
bb0004000003bb001f03bb000203bb02af0027001fffc003b9b2161b32b9
ffc003b8b2424232b9ffc003b8b2363832b9ffc003b8b32a2d32df410a03
b800ef03b8000203b803b90028001fffc003b9b3282e32f0410b03b90001
000003b7000103b700030800001f03b60381b23a1f0f411703b3001003b2
002003b2005003b2007003b200e003b2000600cf03b300df03b300ef03b3
00ff03b30004001203a8b2e2891fbe039f016b019a001f03980093080140
0c1f7f047f05027f027f03025fbb02b00001ffc00117b2196632b8ffc0b3
651a6632b9ff800173b2196632bd038401170800001fffc002afb2313340
b802afb22e3340b802afb328293240b802afb326273240b802afb3212532
40b802afb31c203240b802afb2233340b802afb21933a0bc02af00b002af
00e002afb5034003212932b8fff2b33a263d32bc038203820382003a0800
b51f40255c331eb80381b25c6432b8ffeeb3252e3314b80381b32b2e3269
be03810001008a03810001000e0381b32b2f3210b80381b3515b320cb803
81b34e513222b80381b3474d320eb80381b246330ab80381400926473212
254358320cb80381b2323310b80381b22a3312b80381b3373d3212bb0381
003d0033fff44015253d331825355b32102526343206252a330c252e33b8
fffe4024252d330c3a2f33329925aa25ba25c92504052536330c25323832
193a293a383a03182517b80381b42825382504bc03810381038100250800
40101f0f1f2b2e32691f781f020b1f303332b8fff1b31f263d32bc038003
800380001f080040151f375f07af07025f06af060222ac2b2e3209ac2f33
b8ffdc400aac1f223222232b52320eb8037fb229330eb8037fb2223314b8
037fb21e2032b8ffe7b71e2b33321e2b2f32b9ffc0037fb64c4f3232262c
33410affee037f00390033fff8037f002b0033ffea037fb23a3320b8037f
b33f46321eb8037fb32f3a3212b8037fb22e331eb8037fb32a2d320eb803
7fb2263304b8037fb3494a3404b8037fb2463304b8037fb2213318b8037f
400c1d3322263032322226333832b8fff8400a262b2f3209261b21328abe
037f0001037f037f037f00260800402e1f371f062f063f06039f02af02bf
02cf02049f03af03bf03cf03046f037f038f03031f032f033f034f035f03
050f413502ed0001005f02ed009f02ed00df02ed0003002f02ed003f02ed
006f02ed000300af02af0001004f02af009f02af0002002f02af003f02af
0002003f02b00001004f02af005f02af0002002f02af003f02af00020070
03b2000103b203b202ed02ed02b002b002af02af401a3701003001400102
010100090102000800171700000012110840410b027b02230034000d013d
0034000d01370034000d011b401a340d8f340d84340d68340d59340d5434
0d48340d2c340d28340d411002350020000d021b0020000d01fc0020000d
01c30020000d01500020000d012c401a200df0200dbe200d94200d79200d
6a200d61200d5f200d44200d410d013e0138000d003d0138000d00300138
000d001d0138000d01fdb40f4d0f0009bf01fd004d000d03b1037f001500
1f0215b226341fb80214b2263f1fb80208b21ebb1f41190206001e080100
1f0205001f02ab001f0204001f02ab001f0203001f0401001f0201003101
9a001f01fb00230156001f01aeb2262a1fb801adb2262a1fb801abb22634
1f411501a8002602ab001f01a5001e0125001f01a400ab02ab001f01a200
3102ab001f01a1003102ab001f019db2236c1fb8019cb2236c1f4109019b
00230401001f019a0033019a001f0176b2262e1fb8016cb231721f411101
6b0023019a001f016800240401001f014500260801001f013f0023040100
1f0123b21e9e1fbc0121001e0201001f0100b426791ffd1fb80125b21ffa
33b80801b21ff924b802abb21fe826b80101b21fe51fb8019ab21fe431b8
0101400b1fe331e41fe231891fd226b80201b61fd026cd1fcd25b80401b2
1fb731b8019ab21fae26b80801b21fac1eb80401400b1f9e315e1f97269e
1f9333b80801b21f8a24b8019ab21f831fb802ab40131f82236c1f7523e4
1f7026cd1f6423721f5e25b80401b21f5d23b802abb21f55e6b80401b21f
5324b80201b21f4f33b802abb21f4e26b8040140131f4731671f4626ab1f
4331cd1f3e235e1f3a1fb80401b61f3924e41f3723b80801b21f2e23b804
01b21f2a1eb80125400b1f2923ab1f2731ab1f5537bc01c60007018a0007
012b402e077f077107690766074b074007380736072d0722072107140812
0810080e080c080a080808060804080208000814b8ffe0402b0000010014
061000000100060400000100041000000100100200000100020000000100
0002010802004a00b013034b024b5342b0372b4bb807ff52b0382b4bb009
505b58b101018e59014bb0c063004b6220b0f65323b8010a515ab0052342
01b0124b004b544218b0382bb00288b801005458b801ffb101018e851bb0
124358b900010140858d1bb900010159858d59590016763f183f123e1139
46443e113946443e113946443e113946443e11394660443e11394660442b
2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b2b2b181db096
4b5358b0aa1d59b0324b5358b0ff1d594bb04753205c58b9027d027b4544
b9027c027b45445958b90146027d455258b9027d01464459594bb0475320
5c58b9001e027c4544b90026027c45445958b9017f001e455258b9001e01
7f4459594bb05e53205c58b9001f027d4544b90025027d45445958b901a8
001f455258b9001f01a84459594bb8010153205c58b1ab1f4544b11f1f45
445958b9047000ab455258b900ab04704459594bb8012553205c58b1e61f
4544b11f1f45445958b9051000e6455258b900e605104459594bb0175320
5c58b124244544b1312445445958b12224455258b124224459594bb05153
205c58b124244544b1232445445958b17d24455258b1247d4459594bb06e
53205c58b124244544b1332445445958b1aa24455258b124aa4459592b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b45695342014b5058b108004259435c58
b1080042591610703eb0124358b911b53d801bba011c03d9000b2b59b00a
2342b00b2342003f3f182b103c012f5d060cb0062342b0072342b0124358
b93b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d41
2d411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211b
ba01a80400000b2b59b0102342b0112342002b4bb02e5358b8016b45b02a
60b8016b2344590018456944456944184569444569447373737375757573
737475757575752b4bb026534bb03d515a58b1262645b0196044592b4518
6944742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
004bb02a534bb03f515a58b1070745b04060445973732b2b451869442b2b
752b2b4518694475752b2b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
74752b2b2b2b2b451869442b002b732b2b2b2b2b2b2b2b2b012b2b2b0073
73732b2b2b01435c58b8ffdeb31e1c3318b8037fb52b3318262b33b9fff0
0381b112332b2b2b2b590173742b002b73752b2b732b2b2b2b2b73752b2b
2b2b2b0000>
[453 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 104 520 <0001ffb90000053d054c001501064045571067107710871097019711a701
a80ea813b701be0e0b090a0ae8141514140a0b14150a0b0a090b23131414
1313141500090a14030f130b120203d40008092e010002100fb8014d4016
110c0b1e1112080a1109140b00122414011414110003bd033e0002033e00
01000f033e402d10a9111550000100131240010140015001700180019001
c001d00107b0010101011100121112400f143412111711332f2b2f113311
332f5d7171103c2f5d3c10f4ed10fced1112392f5d11123911391239003f
3cfd3c10fd3c3f3cfd3c10f43c1112391112393911123987052e2b087d10
c487082e182b057d10c4b10602435458400a0c401214340b40121434002b
2b593130015d012103233635342623210101213236373303213501010138
04052e25036eb8fe4c0115fd80020caf96392686fbe702c5feba054cfee2
1b134562fdfefdaa6081fe74250297026a00>HIBBAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 0 0 <0002010000000500050000030007003fb40201f80607b802664013000504
f803000a0704f8010019080605f80203b8014ab309a2dc182b10f63cfd3c
4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121010004
00fc2003c0fc400500fb002004c0>HIBBAA+TimesNewRomanPS-ItalicMT AddT42Char 
HIBBAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/g520 520 def
end
HIBBAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 32 /g520 put
pop
end
%ADOEndSubsetFont
reset_gvm
/WOKOUY+TimesNewRomanPS-ItalicMT /HIBBAA+TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/WOKOUY+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /g520 223{/.notdef}rp]
WOKOUY+TimesNewRomanPS-ItalicMT nf
WOKOUY+TimesNewRomanPS-ItalicMT*1 [0 -16.02 -16.02 0 0 0 ]msf
311.28 226.462 mo
( )sh
276.06 61.5224 mo
291.9 61.5224 li
291.9 62.0024 li
276.06 62.0024 li
cp
291.36 59.2424 mo
294.36 61.7624 li
291.36 64.2824 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
256.32 92.7224 mo
256.32 94.5224 257.76 96.0224 259.62 96.0224 cv
272.76 96.0224 li
274.56 96.0224 276.06 94.5224 276.06 92.7224 cv
276.06 30.8024 li
276.06 29.0024 274.56 27.5024 272.76 27.5024 cv
259.62 27.5024 li
257.76 27.5024 256.32 29.0024 256.32 30.8024 cv
cp
@
314.22 61.5224 mo
330.48 61.5224 li
330.48 62.0024 li
314.22 62.0024 li
cp
330 59.2424 mo
333 61.7624 li
330 64.2824 li
f
294.36 92.7224 mo
294.36 94.5224 295.86 96.0224 297.66 96.0224 cv
310.92 96.0224 li
312.78 96.0224 314.22 94.5224 314.22 92.7224 cv
314.22 30.8024 li
314.22 29.0024 312.78 27.5024 310.92 27.5024 cv
297.66 27.5024 li
295.86 27.5024 294.36 29.0024 294.36 30.8024 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-ItalicMT gcheck setglobal} if

1 0 3 <> PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 104 11 <0001008cfe4a038a058e0010003cb70708010113091112b80181b30f00a6
01b80145b3050a3b09b80156b50f4305191142b9021000182b4e10f44ded
fde410fded10e6003f3f3130015d01072627263510371201170607060215
1401812277342895b7019a18b97592bafe5a10e3ae888a0142ff01380128
2389aad4fda8f6bc>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 232 12 <0001ff21fe4a021f058e00100043b70908010111091311b80181b30f00a6
01b80145b3050a3b09b80156400a0f430f051f0502051a12b801e8b15018
2b4e10f65d4dedfde410fded10e6003f3f3130015d013716171615100702
0127363736123534012a2277332995b8fe6718b97592ba057b13e2ae888a
febdfefec7fed81f8aa9d40259f6bc00>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 1190 43 <0001ffca0000067d054c0041021b400c1218220f133e29220f133e0fb8ff
deb30f133e3fb8ffde408e0f133e14221439b625e73202860ab514b61a03
533f760a762903540f70430201212020020022414123090a010a110b1d0a
19201a1d192a312b1d2a093a013a413b1d3a0902081d091812171d182923
281d293932381d391112121e2002142020024123231e3132143131320100
2221232f00010000183a39390a0a09022a29291919180831204228022032
311012410c03010002021300200189002303010032034500120031ffc0b7
3336343140253531b8ffc0b32b2e3431b8ffc0b328293431b8ffc0401523
353140191b348031b031c031d031e031f0310631b80173400a4209201731
172031420ab80173b16f182b2b103c3c2b2b2b4e10f45d2b2b2b2b2b2b43
5c58b5314016253f31b8ffc040091c113f31401e123f31b8ff80b326173f
31b8ff80b328183f31b8ffc040090f1e3f31800f193f31b8ff80b72d173f
3180183931b8ffc0b30b123f31b8ffc0b612133e314011392b2b2b2b2b2b
2b2b2b2b2b2b59014de4edf4e4ed2b103c103c2b10c0c0003f3c103c103c
3f3c103c103c12392f5dfd3c103c870e2e2b0e7d10c4870e2e182b0e7d10
c4180010ed0110c00010ed0110c00010ed0110c00010ed0110c00010ed01
10c05d0010ed0110c00010ed0110c00010ed0110c05d07103c3c877d10c4
c43130015d5d5d5d012b2b2b2b2b435c58b9000fffdeb210393fb8ffdeb2
10390bb8ffdeb113392b2b2b590121133635342626233721072607060706
070306151416170721373637363736371321030615141617072137363736
3736371336353426262337210726070607060701f90272631c19344c0a02
220c452230172122ef1e35640bfdf00e4e1a28121a267afd8b7b1d346408
fdec0d4f1a28131a26f01d19354d0c02170b43202f161e2402ef014f6236
1a25122525010f15212f76fccd662c2627072525020c121c2783019ffe61
642e2627072525020c121c2981033364341a25122525010f14212c7a>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 1938 56 <000100daffe10683054c00320153b9001fffdeb30f133e05b8ffde406d0f
133e9523b40cb50dbb16045305521f730d852304082e082f39123b270409
1c2b27020106021d011b201c1d1b002d321d001a14191d1a0609091e2a2d
142a2a2d202222231214141212141b1a1a010100020e6425090f10112423
05122a1233282d2a14102288124028183f12b8ffc0b313193e12b8ffc040
0d11393012401250120310120112bc034e00090301002affc0b219352ab8
ffc0b31e28342ab8ffc0b32b2d342ab8ffc04012313a34202a012a783309
2a1712172a12330ab8033fb16f182b2b103c3c2b2b2b10f65d2b2b2b2b01
edf45d5d2b2b2bed2b3c103c2b10c0c001111739003fed3f3c103c103c87
0e2e2b0e7d10c4870e2e182b0e7d10c4180010ed0110c00010ed0110c000
10ed0110c00010ed0110c0b1060243545840111418091134121809113414
122220040e1900111217392b2b593130015d5d5d5d2b2b0121070e020703
06070615141633323e023713363534262737210722060607030e02232226
3534373637133635342627010c023d0b584b351d8b25070cb497639c6f5c
23782d3d5d0b01af0b4c43321f93477eefb1ccfa0b081f861c3973054c25
021d4a64fe208028403779a74b87e776019e9b2f212f0525251d4b6cfe09
f5e99de7953b432c6c01cd642f252906>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 3086 60 <000100b800000556054c0030017db9002effde40c513390d010f020c030c
070c080f0c0f0d0f0e0d0f8c018c038c078c088c0d8c0f0f9f019f029f03
9f069f079f089d0a9f0b9f0c9f0d9f0e9f0f93130d3240193a340822aa20
a62dbb02b314b52e069b03ab03a0090389018a03962e03480169016d0203
080f091d081a211b1d1a2830291d280701061d071911181d192723261d27
2111100004221a281011111e2122142121220f01000023100f1410100f00
303000001e222314222223000130230f0104323130230103072222192827
0807021a19080032b80291b6100911d2220921b8ffc0b3193a3421b80286
400921312822102121310aba0173012600182b2b103c012f2b3c2b10c001
f62b2bc401fd2bc401e6192f18003f3c3f3c3c3c1912392f121739011112
173908872e182b0e7d10c408872e182b870e7dc4870e2e182b7d10c42b11
121739180010ed0110c00010ed0110c00010ed0110c00010ed0110c00010
ed0110c00010ed0110c0b10602435458b2340f01005d593130015d5d5d5d
2b0172712b01013635342627372107060706070607010306151416171617
07213736373637363713032626273721070607060615141702cc0102642b
650a01aa083e1724232f59feb46425171d264e0afdc50c551c2d16222477
912741510a01f50c5e0d161c1d02d101698d27161d06252508090f202a7b
fe36feb17e301f200a0c012525020c121e2e77018c01d47c3c0725250705
072a1c296300>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/H 43 def
/U 56 def
/Y 60 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 72 /H put
dup 85 /U put
dup 89 /Y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/WOKOUX+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk 2{/.notdef}rp /hyphen 
26{/.notdef}rp /H 12{/.notdef}rp /U /.notdef /W /.notdef /Y 
15{/.notdef}rp /i 4{/.notdef}rp /n 6{/.notdef}rp /u 138{/.notdef}rp]
WOKOUX+TimesNewRomanPS-ItalicMT nf
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -10.98 -10.98 0 0 0 ]msf
270.48 84.1424 mo
(U )
[-7.91769 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: QJJAAA+SymbolMT Initial
ct_T42Dict begin
0 -0.219 1.109 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /QJJAAA+SymbolMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3284f3e872000000cc000000566376
74202ac4fb8500000124000005046670676df530c471000006280000050f
676c796674e5b07d000016580000011068656164c5ad5c6500000b380000
0036686865610f2d038100000b7000000024686d74787750493e00000b94
000002fc6c6f636120dc208600000e90000001826d617870020305a70000
1014000000206e616d6508a0603600001034000002ae707265707e0fc165
000012e40000037167646972000000000000000000000000000104cd0190
00050000059a053300000125059a0533000003a0006602120c0305050102
010706020507000000000000000000000000000000004d6f6e6f0040f020
f0ff058cfe460133080b01c280000000000000000000055d0031054c001f
054c001c0394001b0000ffe10000ffe10000ffe4fe59ffed056b0023fe6a
ffdc270f000000b4000000b4000000000000000000610025005e0029004a
00c200f000be012a005000c0ffd0006300580277002d004a008f00b700c0
00de004400640002001a017c0020ff9c008c0026008300a00039041affb5
004c00e8080f00160024003a016f000600150067009e01dc0049004b002d
003b00470089007200470051006700f7013801dc0001000a005d00610094
009b00be00ce00df00190026002e00d6010701f7ffbb004300530063007b
00b900de0542058b0013009100a700a900c100e5012e01a401ea03eeffb5
ffccffeb0026002900310036005b00620062009200a100a700a700cb0223
03a3ff1aff7bffa8ffc8001c004400ab00b400c100c500ce00f601200156
016302a60379fefaff6effab0000000c00150024003a003a0041004c004e
007400a500ce00d600fb0109010901820220023f0263fe11ff170007001f
0020002b00530055006d007e0088008d0094009a009f00af00e8013f0168
01cd01ee020d028002bf0550074e074e09bffdd5ff47fff6000c000c0021
00290057006b0078007e009200930096009a00a100a500c400c400f000fd
0136013b013e01490152018f018601a501f8022b02db02fb030e030f032c
03590360037c03e203f90805fd4ffe97fed0ff50ff78000100010006000a
0025004300440054005c007000730077007c00800088008e008e00900091
00ab00ab00b000b900bf00bf00c300dd00e300e300e600e800ec01020105
0109010a012a012a01300130013b0140014a0155015f01670173019701b6
01b801be01c501ea01f4023402360239024f0252026702700274029002b0
02b102bf02e402f302fb033a03450373037f03ab03c203c803d203da0400
044a046104690475049404b004d504f004f404fe050005230523052e0561
05a0fda2fe4bfe5bff26ff3bff62ff8dff90ff90ffe80007001e00250026
002700440050006200630066006700700070007100710079007e00850091
0096009e00a100a100a500b600b800bc00c000c200c500c600d000da00dd
00dd00e200f700f901000102010501150121012d01310136013d01470147
015a01680176017c0180018e019a01a501b101b501b501c001dc01ea01fe
023902560259025e0276027c028d0297029b02b902c002d602db02ff0306
030f03180347034b0357035b035e0374039603980399039e039f03b803c0
03c60402043a045004720483049004a204af04c704d304dc0530053b058a
058a05b005b505bd05e60612061b0634065306b80706087908e708fe00b3
00c700b100b5000000000000000000000000000000000188011001b100ad
01e70304038002cc0258020b02d6018204cf01270274023c0100058e006e
00f202c0021d01d2023701570363015a002500820166015b009d031c03a2
034a00cc056e0153035001640053049700fc05c30061058a02b20302058a
03fd01f902ab0068008e026bfda9ff59010e005301a402a600ab007d003c
0029041a00d6023904b90125022902bf07ae01b8003e07060339033a080f
07ae01a403e300000053080f01ea006103e2004c00e102a6035202a6080f
00e601dc074f006e00fd03af0000007d003e01a4fe1100a905590260011c
02a4014cfd83fdd8039bff9f011902e20000fd11fd41024301b60155ffaa
02be00ef0097fef904e000be02db005501dc0063006b007800f200530077
003a015600fc020d0029005300610070403f3f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b0042651582320b00d44235921212d2c20204518684420b001602045b0
4676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c
00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a23
4445b01923442d2c2045b00325456164b050515845441b2121592d2cb001
43632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b0074365
0a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58
b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d
2cb01243588745b0112bb0172344b0177ae41b038a45186920b01723448a
8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d
2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185592d
2c20b0032545b019234445b01a23444565234520b00325606a20b0092342
23688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a545823
21b03f1b235961441cb114008a5279b31940201945208a54582321b03f1b
235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d432343
0b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143234365
0b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b000
525823b002253823b002256538008a63381b212121212159012d2c4bb064
51584569b00943608a103a1b212121592d2c01b005251023208af500b001
6023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f5
00edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb0
2b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b80241
23701020b802414520b0005058b00161593a2f182d2c21210c6423648bb8
4000622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d
2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423
648bb84000626023212d2cb4000100000015b00826b00826b00826b00826
0f10161345683ab001162d2cb4000100000015b00826b00826b00826b008
260f1016134568653ab001162d2c4b53234b515a5820458a60441b212159
2d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c
4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c
4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c64
23646164b807085158b00425b00425012046b01060482046b0106048590a
21211b2121592d2cb012435c580cb00425b00425060c6423646164b80708
5158b00425b00425012046b8fff060482046b8fff06048590a21211b2121
592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b
2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b0
0426024b545a8a8a0ab012435c5a58381b2121592d000001000000028000
2907042b5f0f3cf5081d080000000000a348bc3b00000000b24cd4e1ffff
fe3e08e7080b0000000b000100000000000000010000080bfe3e00000856
feabfc2e08740001000000000000000000000000000000be04cd00670000
000000fa00000200000002aa00e405b40061040000250464005106aa0047
063900480383003a02aa005402aa002d04000091046400250200006e0464
0025020000910239ffff0400004a040000f00400002c0400005304000020
04000062040000590400004c0400007c04000051023900ac0239008b0464
003c046400250464003c038d00580464002505c700140556002205c70012
04e5001a04e30027061b004804d3002305c7002602aa0033050c004e05c7
0025057d0014071d002505c7ffe805c7004c0625002305ee004a04730026
04bc003804e3003b05850016038300470625003805290042065c002504e3
001602aa00a706e7016a02aa004a054400250400ffef040003da050c0054
046400790464004603f4004503830049042b0047034affff04d3002d02a2
004304d300450464001504640031049c007c042b00280464005804640037
042b00590464006904d3004e0383002b049c004705b40041057d005003f2
005b057d002f03f4005b03d700d3019a00a403d700d60464003404f60013
01fa00790464003c0156feab05b4003604000000060600b9060601300606
00f7060600f60856002907e5004b04d3005d07e5004b04d3005d03330066
04640025034a00690464003c0464007905b4006603f4004103ae006a0464
0025046400250464002404640034080000e604d302390800ff8d05440020
069600e4057d002d065c005e07e501820625004e0625004e069600610625
004d0625004d05b4003805b4003705b4003b05b4003b05b4003a05b4010a
05b4010b0625005305b4004a0652006306520063071f00320696002e0464
00540200009105b4003004d3003004d300300856002907e5004c04d3005d
07e5004c04d3005d03f4002f02a200410652006306520063064a002a05b4
002b03120053031200530312005303120000031200000312000003f401a4
03f4001c03f401a403f401a40652007502a2003e02310000057d02a6057d
02a6057d00430312ff930312025d0312ff93031200230312028103120023
03f4001c01a4001c00000032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032008800880088008800880088
008800880088008800880088008800880088008800880088008800880088
008800880088008800880088008800880088008800880088008800880088
008800880088008800880088008800880088008800880088008800880088
008800880088008800880088008800880088008800880088008800880088
008800880088008800880088008800880088008800880088008800880088
0088008800000001000000c0006700050000000000020010002f00400000
00ed050f000000000000000a007e0001000000000000007f000000010000
00000003000f007f0001000000000004000f008e0001000000000006000f
009d000300000409000000fe00ac0003000004090001001e01aa00030000
04090002000e01c80003000004090003001e01d60003000004090004001e
01f40003000004090006001e0212547970656661636520a920546865204d
6f6e6f7479706520436f72706f726174696f6e20706c632e204461746120
a920546865204d6f6e6f7479706520436f72706f726174696f6e20706c63
2f5479706520536f6c7574696f6e7320496e632e20313939302d31393932
2e20416c6c20526967687473205265736572766564484d4c444d482b5379
6d626f6c4d54484d4c444d482b53796d626f6c4d54484d4c444d482b5379
6d626f6c4d5400540079007000650066006100630065002000a900200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e00200070006c0063002e00200044
006100740061002000a900200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
00200070006c0063002f005400790070006500200053006f006c00750074
0069006f006e007300200049006e0063002e00200031003900390030002d
0031003900390032002e00200041006c006c002000520069006700680074
00730020005200650073006500720076006500640048004d004c0044004d
0048002b00530079006d0062006f006c004d00540052006500670075006c
006100720048004d004c0044004d0048002b00530079006d0062006f006c
004d00540048004d004c0044004d0048002b00530079006d0062006f006c
004d00540048004d004c0044004d0048002b00530079006d0062006f006c
004d00540000411500120227022702260226006f01160001005f01160001
004f01160001003f01160001002f01160001022fb22f1f1fb8022eb2a01f
1fb8022cb21d291fb80224400be11a1f3127121f3c27291fb80217403b6c
291fe0aa191fe1aa191fab27321f883c321f833c321f2f3c321f7627321f
3c27291f27aa291f6f276f6d6f866f87043700161600000012110840b801
e3b655140914093790b801bf40390790bd0790b307906707906407905707
904607903607902e07902b079025079024071408120810080e080c080a08
0808060804080208000814b8ffe0402b0000010014061000000100060400
0001000410000001001002000001000200000001000002010802004a00b0
13034b024b5342b0382b4bb807ff52b0372b4bb007505b58b101018e59b0
382bb00288b801005458b801ffb101018e851bb0124358b9000101ff858d
1bb9000101ff858d5959014bb0c063004b6220b0f65323b8010a515ab005
234201b0124b004b5442180016763f183f123e113946443e113946443e11
3946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b
2b182b2b2b2b2b2b2b2b2b2b2b2b2b4b5079bc001f01750007001f0174b3
071f93072b2b2b4b5379bc00900175000700900174b3079093072b2b2b18
1db0964b5358b0aa1d59b0324b5358b0ff1d5901b341b5407b4565234560
23456560234560b08b766818b080622020b140b54565234520b003266062
636820b003266165b0b5236544b040234420b1417b4565234520b0032660
62636820b003266165b07b236544b0412344b1007b455458b17b406544b2
4140414523614459b9004e0162b12a8e456523456023456560234560b089
766818b080622020b9002a01624565234520b003266062636820b0032661
65b80162236544b02a234420b14e8e4565234520b003266062636820b003
266165b08e236544b04e2344b1008e455458b18e406544b24e404e452361
445945695342014b5058b108004259435c58b108004259b3020b0a124358
601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
002b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373737373001845694418
456944435c58b9ffc00280b2121f322b5900000000>
[273 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 100 109 <00010000ffe4074f03fd00110066401f65006503770387039703a7030606
070f0e0a0b030f4b01001d02074b030003b80231b607011a1307a606b801
aeb30a0ea60fb801aeb70b0b0a1912213f182b4e10f43c4d10fded10fded
4e10e64d10f63c002fed3cfd3ced1239390110c910c93130015d01211521
1616172326002735360037330606015005fffa018f72365075fea4668401
3c77503978022161a4b3859001283a384b01139187bc>QJJAAA+SymbolMT AddT42Char 
1 0 0 <0002010000000500050000030007003b401e06076302010005046303000a
0605630303021a09070463010019082938182b4e10f43c4dfd3c4e10f63c
4d10fd3c003f3cfd3c3f3cfd3c3130211121112521112101000400fc2003
c0fc400500fb002004c0>QJJAAA+SymbolMT AddT42Char 
QJJAAA+SymbolMT /CharStrings get begin
/g109 109 def
end
QJJAAA+SymbolMT /Encoding get
dup 32 /g109 put
pop
end
%ADOEndSubsetFont
reset_gvm
/WOKOUZ+SymbolMT /QJJAAA+SymbolMT findfont ct_VMDictPut
/WOKOUZ+SymbolMT*1 
[32{/.notdef}rp /g109 223{/.notdef}rp]
WOKOUZ+SymbolMT nf
WOKOUZ+SymbolMT*1 [0 -10.98 -10.98 -3.7552 0 0 ]msf
270.48 73.4624 mo
( )sh
true set_gvm
%ADOBeginSubsetFont: GFNBAA+MonotypeCorsiva Initial
ct_T42Dict begin
-0.238 -0.305 1.156 0.91
 256 array 0 1 255 {1 index exch /.notdef put} for  /GFNBAA+MonotypeCorsiva
Type42DictBegin
[<00010000000c000c000c000c4f532f3270336767000000cc000000566376
7420ba68a9e8000001240000049e6670676d2524cbb0000005c40000045f
676c7966fb51946700002350000001f668656164be4a023700000a240000
0036686865610e4f084700000a5c00000024686d7478fe0c91a400000a80
00000a746c6f636136eb3711000014f40000053c6d617870052105df0000
1a30000000206e616d65cfb1650800001a500000052070726570934cd750
00001f70000003de67646972000000000000000000000000000102cd0190
00050000059a0533ffd400b7059a053300b601ed006602120a0603010101
010201010101000002870000000000000000000000004d4f4e4f00010020
fb020583fdee00fa0652026c2000009fdfd70000000005800003049d0010
04a2000d03490000ffdaff920000ffe6ffe6fffffe00ffee05610022fe23
ffde0296000004c30000023fffee04b100000000fff10271000000000000
0000000000000000ffffffffffffffffffffffffffffffffffffffffffff
ffff026401ea000000000000000000000000000000000000000000000000
000000000000ffffffffffff0000000000a7000000000000000000000000
000000000000000000000000008b0062007d006f0080009600270137003f
00930174004b003c00b900120045006d0048008c00a7004300c900d0004d
007100a800f70037025900b500610083014f005d0003002b003800460015
002b002f0039005f0025007500f20031003200410052006a01f20375003f
007800af0016003b003d00720089009401ea029405b10002000600470066
006f006f00a500130017003e0056007000840089009000b302b803230338
00290038003a006100610064006e0087009a00a9010c01b401fa02d102d1
03070003001f003c003e0044004f005200620067006800690086009200c5
011e01220122019d01d401e101ed022e028c02fa036e0401040504180467
04ab054d057305a0000200200020002d00300037003c0050005500650074
0078007800810082009c009f00a200a500a600a800ab00ad00b700b800bb
00be00cb00d4010a01220129013b015e0183018702160256029f02c002c5
02e703110361037d039203a3044a045404a104b70576059005d4069506ed
00010004000f0014002200270032003e0040004300590066006d00730073
007a008600860089008d009d00a800ac00b000b500e300e700e800eb00ef
010701160131014501450156015d015f01a901b801b901c701cb01d901f4
01fc02090230023d024102660266026b02710280029902a502ab02b302c9
02e302e702f202f302fa033c03400345035503730375039e03a803ad03bf
03e303e503eb040004180426043c043f044e0485048d04b004bc04cd04d5
04f904fe0500050e0513052f0535054905530554055905610574057b0595
05bb0601061d063a0641066106b906b906de073e077c079b0805082300b0
00c200ae00000000000000000000000000000072021d00900079068e0063
017300a8009a007e00f2008d009e00f200be00060678005b00d202180096
00d100d1001701050014004600450116001900c900cb014d007900af001c
007a016e025b02c80046000501bf002c00fa007400ad01af00e000ce015a
011500020287005e0033017600b900a800bf01490259005d00d800180243
00c301c800880148007e00bb00b300b300cb002c00f5010a044b00ca0074
008e00cb00bd010100fd006a001700420118036600d600a600e800f700cb
01210167004c00e001660052005700c200690008002000d7013b008f0132
010f0121019101e900ae0190010c0019017401e6014e009f0280003d0140
009b0113001d00b6028703270208056b0164007f023c00ec02c501cc0070
0095015e00f405ed00de00d301db00e400b5026902df00ec024c0157029c
02da01ea018c038600f90192018200b601df01d701b40092018800d4001d
019807730017000200dc011f0046004600e10103002700ba03af000c0089
006c006800004037383734333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403
0201002c4523466020b02660b004262348482d2c452346236120b02661b0
04262348482d2c45234660b0206120b04660b004262348482d2c45234623
61b0206020b02661b02061b004262348482d2c45234660b0406120b06660
b004262348482d2c4523462361b0406020b02661b04061b004262348482d
2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d442359
20b0ed51582320b04d44235920b0042651582320b00d44235921212d2c20
204518684420b001602045b04676688a4560442d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0462370b101463e01b0462370b1024645
3ab10200080d2d2c45b04a234445b04923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c45b0112bb0472344b0477ae4
182d2cb801a65458b00943b801005458b9004aff80b14980444459592d2c
b01243588745b0112bb0472344b0477ae41b038a45186920b04723448a8a
8720b0a05158b0112bb0472344b0477ae41b21b0477ae45959182d2c2d2c
4b52582145441b23458c20b00325455258441b212159592d2c01182f2d2c
20b0032545b049234445b04a23444565234520b00325606a20b009234223
688a6a606120b01a8ab000527921b21a4a40b9ffe0004a45208a54582321
b03f1b235961441cb114008a5279b34940204945208a54582321b03f1b23
5961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b
2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b
2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b00052
5823b002253823b002256538008a63381b212121212159012d2c4569b009
43608a103a2d2c01b005251023208af500b0016023edec2d2c01b0052510
23208af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110
203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743
b006430b2d2c3eb02a2a2d2c352d2c76b04b23701020b04b4520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4523204520b10405258a505826618a8b1b26608a8c59442d2c46234660
8a8a462320468a608a61b8ff8062232010238ab14b4b8a70456020b00050
58b00161b8ffc08b1bb0408c5968013a2d2cb0332bb02a2a2d2cb0134358
031b02592d2cb0134358021b03592d00000100000002599ab7eb211e5f0f
3cf5001b080000000000a55575f400000000b268e8d0fe15fd8c0945074d
0000000b0001000000000000000100000652fd94003c0897fe15fdf10945
018e0064000000000000000000000000029d060001000000000001c20000
01c20000023d010e01c3012d05710159038500ae0571014b063d00e90148
0171021400ba01c3ff6f035c01180429011201c30025023d00a801c30095
02b8ffe9038500d1038500d3038500970385009403850099038500850385
00f80385012a038500c5038500930214009501eb0023042900de04290112
0429014b030a00b3059a010304f6ff9804cd0089042900c4059a008e04f6
008704a300e504f601030571002b030a008a03330001054800b204a40062
06b80081059a005904cd00d20452009504cd00d204cd00c203ae00260400
00a205eb00ed051f00d2070a00c5047bfff0047b00c604f6008801eb0081
03d701ac028f0042042901f80400fff401c30137035c0097035c00ef02b8
00b00385009a02b800a5028ffedd0333ffe5038500b201eb00a201c3ff1d
038500b401eb00c104f600ab03ae00aa033300ae0385ffe30333009c0266
00a7028f0082028f00db03ae00a80385009105710097035c00300333ffc3
0385004a01eb00b20429029b01ebffb20429011904f6ff9804f6ff980429
00c404f60087059a005904cd00d205eb00ed035c0097035c0097035c0097
035c0097035c0097035c009702b800a202b800a502b800a502b800a502b8
00a501eb00a201eb00a201eb00a201eb00a203ae00aa033300ae033300ae
033300ae033300ae033300ae03ae00a803ae00a803ae00a803ae00a803ae
01150333019e0385007b03d70069035cffc404cd020004000066035cfe85
05eb00bb05eb00bb080000ad026601d002e101b70464012f05ebffc30548
010705b40036046400f6046400fc0464016805c3016a049c00a203f40041
05b4002b0695002e0464004802310000021400c8021400ef062500320452
009a038500c903330085023d00c104cd0164046400510333fee004640137
04e5001a02b800a2030a0077080000f101c2000004f6ff9804f6ff9804cd
00d2068f00d1047b00b00400007f0800007f02b8017402e1018a01eb0190
01eb01900464012e03f4002f0333ffc3047b00c6007bff6e0385009301eb
00d9021400770429fed60429fede03d7005601c3011b01710019023d0010
07ae014204f6ff9804f6008704f6ff9804f6008704f60087030a008a030a
008a030a008a030a008a04cd00d204cd00d20652000004cd00d205eb00ed
05eb00ed05eb00ed01eb00a202b80168038501de038501dd0385022b01c3
01aa026601bf02660091033300a4023d008a02b801db04a4006202660087
03ae0026028f008204f600880385004a0429029b059a008e033300ac047b
00c60333ffc3045200a50385ffe304cd016404290158021d00de021d00b5
021d00c3054801280548012d0548011d04a200e504f601030333ffe5030a
008a03ae0026028f0082042900c402b800b0042900c402b800b00385009a
0400012202aa022c021d00d204f6ff98035c009704f6ff98035c0097059a
008e03dc009a059a008e04f6008702b800a504f6008702b800a5063d008a
03ae00a104a4006201eb00c104a4006202b300c104a4006202a000c1059a
005903ae00aa059a005903ae00aa04a8011704cd00d2033300ae04cd00c2
026600a704cd00c2026600a703ae0026028f0082040000a2028f008b0400
00a2028f00db05eb00ed03ae00a805eb00ed03ae00a804f600880385004a
04f600880385004a052b00610638006b0639006b0449005203c90052038b
005204ae0052036b0041047900520400fff40148015001c3010c03de010e
026400d10897009504dc012f034200ab0800004f040000990800004f0400
00990800004f040000980400009807d5016a05c000c00429011204d50117
02d6013802d6013804d5014f02d6012502aa009904f6ff98035c00970429
00c402b800b0042900c402b800b004f6008702b800a504f6008702b800a5
04f6008702b800a504f601030333ffe504f601030333ffe504f601030333
ffe50571002b038500b20571002b038500b2030a008a01eb00a2030a008a
01eb00a7030a008a01eb00a2030a008a01eb00a20333000101c3ff1d0548
00b2038500b4038500a804a4006201eb005e059a005903ae00aa056400b2
036800aa04cd00d2033300ae04cd00d2033300ae04cd00c20266009c03ae
0026028f0082040000a2028f00a105eb00ed03ae00a805eb00ed03ae00a8
05eb00ed03ae00a805eb00ed03ae00a8070a00c505710097047b00c60333
ffc3022ffead04f6ff98035c009705ebffc30452009a05480107038500c9
02e1025202e10120050effb00215012505ba00f2064200f1033500b50512
00f204f80109055c00c601eb00a204f6ff9804cd0089046600e6039efff4
04f6008704f600880571002b04cd00d2030a008a054800b204f6ff9806b8
0081059a0059052700da04cd00d20571002b04520095056000d0040000a2
047b00c6051f00dc047bfff005fc009f054600af030a008a047b00c603cf
009a02be00a8039c00aa01eb00a2038d00a103cf009a03a8ff2603c7ffd0
033300ae02be00a802eb009b039c00aa035c00ed01eb00a203c300a803fc
003703ae000e0385009102e900ad033300ae044e0037038f000002b400bc
038100ae032300a5038d00a104b600890404ffdc057b009204e900ad01eb
00a2038d00a1033300ae038d00a104e900ad04f60087053b00a3046600e6
042900c503ae0026030a008a030a008a033300010689ff9706b2002b054e
00a2054800b205950093057100c904f6ff98045a006104cd0089046600e6
059a008e04f6008706b80044042900940573002b0573002b054800b204f6
ff9806b800810571002b04cd00d20571002b04520095042900c40777002a
05950093064800d1047bfff0057100c9059c009f079e00c8079e00c80493
00f1075e00a404a000a40429007107a4002b044cfe15035c0097033d00cc
02ee00a502be0096033300ac02b800a50537002402fe009403ae00a803ae
00a8038500a80366003704fa003603ae00a8033300ae03ae00aa0385ffe3
02b800b004f600ab0333ffc304b6000c035c003003ae00a80373006d050a
00a8050a00a803c3006304e300a3033d00a4033300b004eb00a803be006d
02b800a50350002d02c7009702b800b0028f008201eb00a201eb00a201c3
ff1d04b0003604c300a8038500b2038500a80333ffc303aeffe0042500e6
02aa00cc070a00c505710097070a00c505710097070a00c505710097047b
00c60333ffc30600007f01eb017d0385011c03d700690739005904cd00f6
0548011c05480100054800eb0548014d04cd009904cd015004cd02c104cd
01a505b4ffee05b4028305b4028305b4ffee05b4028305b4ffee05b40283
05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b401c505b4028305b4
01c505b401c505b4ffee05b4ffee05b4ffee05b4028305b401c505b401c5
05b4ffee05b4ffee05b4ffee05b4028305b401c505b401c505b4ffee05b4
ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee
05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4ffee05b4
02da05b4006b05b4ffee05d7000004d500920800000007eb013007eb0120
07eb013007eb012004cd00ae04cd007c04cd0026082b0198086b01b80756
0010046b0059055600660444003c054a003c04ba003c040e003c062b001a
08000130026600a8021d00eb021d014d021d00fa04cd016b000000270027
002700270027002700270027002700270027002700270027002700270027
002700270027002700270027002700270027002700270027002700270027
00270027002700270027002700270027002700fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb00fb
00fb00fb00fb00fb00fb00fb00fb00010000029d00f2003c007700050002
001000140039000001f6045f000300010000000c00960001000000000000
00c000000001000000000003001600c00001000000000004001600d60001
000000000006001600ec0001000000000007006e01020003000104090000
018001700003000104090001002c02f00003000104090002000e031c0003
000104090003002c032a0003000104090004002c03560003000104090006
002c0382000300010409000700dc03ae4469676974697a65642064617461
20636f7079726967687420546865204d6f6e6f7479706520436f72706f72
6174696f6e20313939312d313939352e20416c6c20726967687473207265
7365727665642e204d6f6e6f7479706520436f7273697661aa2069732061
2074726164656d61726b206f6620546865204d6f6e6f7479706520436f72
706f726174696f6e207768696368206d6179206265207265676973746572
656420696e206365727461696e206a7572697364696374696f6e732e484d
4c444f492b4d6f6e6f74797065436f7273697661484d4c444f492b4d6f6e
6f74797065436f7273697661484d4c444f492b4d6f6e6f74797065436f72
736976614d6f6e6f7479706520436f7273697661aa206973206120747261
64656d61726b206f6620546865204d6f6e6f7479706520436f72706f7261
74696f6e207768696368206d617920626520726567697374657265642069
6e206365727461696e206a7572697364696374696f6e732e004400690067
006900740069007a006500640020006400610074006100200063006f0070
00790072006900670068007400200054006800650020004d006f006e006f
007400790070006500200043006f00720070006f0072006100740069006f
006e00200031003900390031002d0031003900390035002e00200041006c
006c00200072006900670068007400730020007200650073006500720076
00650064002e0020004d006f006e006f007400790070006500200043006f
007200730069007600612122002000690073002000610020007400720061
00640065006d00610072006b0020006f006600200054006800650020004d
006f006e006f007400790070006500200043006f00720070006f00720061
00740069006f006e0020007700680069006300680020006d006100790020
006200650020007200650067006900730074006500720065006400200069
006e0020006300650072007400610069006e0020006a0075007200690073
00640069006300740069006f006e0073002e0048004d004c0044004f0049
002b004d006f006e006f00740079007000650043006f0072007300690076
00610052006500670075006c006100720048004d004c0044004f0049002b
004d006f006e006f00740079007000650043006f00720073006900760061
0048004d004c0044004f0049002b004d006f006e006f0074007900700065
0043006f007200730069007600610048004d004c0044004f0049002b004d
006f006e006f00740079007000650043006f00720073006900760061004d
006f006e006f007400790070006500200043006f00720073006900760061
212200200069007300200061002000740072006100640065006d00610072
006b0020006f006600200054006800650020004d006f006e006f00740079
0070006500200043006f00720070006f0072006100740069006f006e0020
007700680069006300680020006d00610079002000620065002000720065
0067006900730074006500720065006400200069006e0020006300650072
007400610069006e0020006a007500720069007300640069006300740069
006f006e0073002eb80249b3f61e1f6fbe024e007f024e008f024e000302
4e401e591e1f00591059205970598059905906a059b059c059d059e059f0
5906afbe024c00bf024c00cf024c00df024c407e04001400151014101520
142015060014001520142015201620173014301550145015601460158014
8015c014c015c016c017f014f01514090014001502001400150208001800
19020018001910181019201820192f1e2f1f701870197f1e7f1f0c090018
0019020801000101000901020008004646000000121108404868bb018b00
480032024db3681d1f20b80125b2483220b8011f4073483220f6483220f5
483220f4483220f3483220f1483220f0483220ee483220ed483220eb4832
20c5483220c4483220b2483220b0483220a4483220a2483220a14832209c
48322092483220904832208c4832208b48322074483220724832206a4832
205e4832205a4832205948322055483220b8012eb2483220b8012cb24832
20b8012ab2483220b80129b2483220b80124b2483220b801214080483220
f2483220ef483220e9483220e6483220a5483220a3483220914832208248
3220814832206d4832205748321609160990cc0790cb0790940790880790
7507907107906f07906e07906b07906707906207905f07905c0724082208
20081e081c081a08180816081408120810080e080c080a08080806080408
020800080001b013034b024b5342014bb0c063004b6220b0f65323b8010a
515ab005234201b0124b004b5442b0382b4bb8080052b0372b4bb009505b
58b101018e59b00288b801005458b801c0b101018e851bb0124358b90001
0137858d1bb9000101ff858d595900162b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b014b5079b9001f012b400a
071fe5071fc8071fc1072b2b2b2b4b5379b90090012b400a0790e50790c8
0790c1072b2b2b2b1801b25000374b618b601d002b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b0145695342014b5058b108004259435c58b10800
4259b3020b0a124358601b2159421610703eb0124358b90fce3e051bba00
fd03e0000b2b59b00a2342b00b2342003f3f182b103c012f060cb0062342
b0072342b0124358b93b21187e1bba040001a8000b2b59b00c2342b00d23
42b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b012
4358b9187e3b211bba01a80400000b2b59b0102342b01123420100b00245
68b801954568b0408b60b0202344b0064568b801964568b0408b60b02223
44b0004568b801984568b0408b60b801972344005e735e73735e73735e73
73730173742b752b000000>
[503 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 78 41 <000100e5ffee059004af004f00c1400f0d1d20090920205a313414313134
41b801c240132b245d2577225d27772b2e5d2db9205d2b0a01b801c1b509
09345d4916b801c040141d12991d8f400d0d310b034902492d4e02258d24
b801c340182080473145090d1d20313406162e2d3e381683157d128313b8
01ccb2018300b801cab54e3e8638764eb9010b00452fedfde410f6edf4ed
f4ed111239391117391112391a10fee4003f12393f17392f1aede410e610
fd3c10e63fedf6ed10f4edf4ed10e487052e2b7d10c487c4c43130012336
353426230727230607060733323736373306072336353427262723060207
16333237070623222726232207373e0137361b010e021514171617161514
06232227263534373629013237363706055336112e404015c8061a361cc3
4715150e361f173707180e3ebf1d5e22503f2928111d1916744530616e0c
59390f1f559986c9770a05171d221b2819229d9d01010180404d174c3303
a4541821200101175ec27c0e0e397e89390a180c07028bfebe580d073904
07051237132a1e3d013d02570470bd612729172b3515151f2a3867c9a9a8
080213d1>GFNBAA+MonotypeCorsiva AddT42Char 
1 0 0 <00020100000005000500000300070025b504dc0007dc01b8016eb7000a04
db0005db03b9016000002ffee510e5003ffee510e5313021112111252111
2101000400fc2003c0fc400500fb002004c0>GFNBAA+MonotypeCorsiva AddT42Char 
GFNBAA+MonotypeCorsiva /CharStrings get begin
/F 41 def
end
GFNBAA+MonotypeCorsiva /Encoding get
dup 70 /F put
pop
end
%ADOEndSubsetFont
reset_gvm
/WOKOVA+MonotypeCorsiva /GFNBAA+MonotypeCorsiva findfont ct_VMDictPut
/WOKOVA+MonotypeCorsiva*1 
[70{/.notdef}rp /F 185{/.notdef}rp]
WOKOVA+MonotypeCorsiva nf
WOKOVA+MonotypeCorsiva*1 [0 -13.02 -13.02 0 0 0 ]msf
270.48 59.8424 mo
(F)sh
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -10.98 -10.98 0 0 0 ]msf
270.48 52.2824 mo
(\(u\))
[-3.67273 -5.50647 0 ]ysh
309.12 87.862 mo
(Y )
[-6.11804 0 ]ysh
WOKOUZ+SymbolMT*1 [0 -10.98 -10.98 -3.7552 0 0 ]msf
309.12 78.9824 mo
( )sh
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -10.98 -10.98 0 0 0 ]msf
309.12 65.3624 mo
(U )
[-7.91769 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 42 /asterisk put
dup 46 /period put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/asterisk <1C60D8A8C9B7A73DB9A0737247D562C61165E8E636EE73CF26D64
F3C6728422CEE27A3F00DC7152CA3773F07EA559F0959F48B519FDEC6150629C
166D2B4FBEF2A598C45B9530847243905C1F3F150F0DD5877800507BF2B97A2E
4942336B61DB2054C6AB2AE38E3AEA192A16823CC1BE212834012F90F71E96A0
46E312361C7B9D33CA838F52208FFCDFB3B3A9B2A9728D3AFAB94EEE3598CA05
C0D62AFFA345B041C6B4E56F6827F181D11C4BECD0C9CCA67> |-
/period <1C60D8A8C9B8707CF9C25EC939C66C37A7299AC1EB6803AECA7CE1E
A962C49000951DFC3ED48B52CD3F5> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/WOKOVB+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/WOKOVB+TimesNewRomanPSMT*1 
[42{/.notdef}rp /asterisk 3{/.notdef}rp /period 209{/.notdef}rp]
WOKOVB+TimesNewRomanPSMT nf
WOKOVB+TimesNewRomanPSMT*1 [0 -10.98 -10.98 0 0 0 ]msf
309.12 54.6822 mo
(.*)
[-2.76807 0 ]ysh
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -10.98 -10.98 0 0 0 ]msf
309.12 43.6418 mo
(H)sh
352.74 61.5224 mo
369.84 61.5224 li
369.84 62.0024 li
352.74 62.0024 li
cp
369.3 59.2424 mo
372.3 61.7624 li
369.3 64.2824 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
333 92.7224 mo
333 94.5224 334.5 96.0224 336.3 96.0224 cv
349.44 96.0224 li
351.3 96.0224 352.74 94.5224 352.74 92.7224 cv
352.74 30.8024 li
352.74 29.0024 351.3 27.5024 349.44 27.5024 cv
336.3 27.5024 li
334.5 27.5024 333 29.0024 333 30.8024 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-ItalicMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-ItalicMT gcheck setglobal} if
1 890 20 <0001007d000003570568001b00ca401a071a015602670276027403bd0d05
080008101701170f04080f09b80138b308070106410b01380007001a01a3
0010020e002800190138001a01fd401300100f0103000828100f0fe60100
1401010019ba01f4001a030d40091b1b000508070c0001bb03280010001a
020bb31f0f010fb80327400b10011c2800100117011c0aba022801e30018
2b2b103c2b2b3c2b10c0012bf65de43cf53c003f3c3f3c10f4ed870e2e2b
7d10c42b11121739180010f5ed2bfc01f50010ed0110c00010ed0110c031
30015d5d0071010106151416170721373637363736371336373635342623
220727250357febe1c335e0afdfd0e521a2a152122e815020326211a370d
01510568fb9f632c2527072525020b121e2e770325490b141323280c245e
>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
1 5202 92 <0001ff60fe460386038900380113405b9b310131183a3509191a1929193d
19a602b402ba1ab428b832c603c604ca19ca1a0d491b591b691b03043130
2f2f051d2b1e1a311a1104302f2e2d2b281c1b08213105060708090a0b0c
081704358a38c614000724c92b271e0f21b801c040373111400b12340f11
1f110211280c751740170e3f9017a0170250178017b01703201730174017
0317493a3849bf37013f374f375f370337b80323400d04e531401c113f31
401e123f31b8ffc040172529349031a031ef310350318031022031303140
310331b8021cb33932de182b10f65d5d5d2b2b2bedf65d5de410f45d5d5d
2bfde45d2b10e4003ffdec3f3cf4ed011112173911121739111239001239
111239870e7d10c404c43c3130015d5d2b01720116161713363736373637
3635342e0235343633321615140600070606232226353436333217161617
163332373637363703262623220727014b221a0d2c3c723751310b060e3b
2730242c3e6cfeccdb9792341f2f4126140d0813080507060f3749602e38
0e384215360903893a6594fe14489c4c83502010110b0e13332129324940
4fcbfe5cf8ab592f1f274009052f08050a224a623e027a9d44062500>PBAAAA+TimesNewRomanPS-ItalicMT AddT42Char 
PBAAAA+TimesNewRomanPS-ItalicMT /CharStrings get begin
/one 20 def
/y 92 def
end
PBAAAA+TimesNewRomanPS-ItalicMT /Encoding get
dup 49 /one put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/WOKOUX+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk 2{/.notdef}rp /hyphen 
3{/.notdef}rp /one 22{/.notdef}rp /H 12{/.notdef}rp /U /.notdef /W 
/.notdef /Y 15{/.notdef}rp /i 4{/.notdef}rp /n 6{/.notdef}rp /u 
3{/.notdef}rp /y 134{/.notdef}rp]
WOKOUX+TimesNewRomanPS-ItalicMT nf
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -10.98 -10.98 0 0 0 ]msf
347.16 86.6024 mo
(y )
[-4.86194 0 ]ysh
WOKOUZ+SymbolMT*1 [0 -10.98 -10.98 -3.7552 0 0 ]msf
347.16 78.9824 mo
( )sh
WOKOVA+MonotypeCorsiva*1 [0 -13.02 -13.02 0 0 0 ]msf
347.16 65.3624 mo
(F)sh
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -7.5 -7.5 0 0 0 ]msf
343.68 56.2424 mo
(-)sh
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -6.48 -6.48 0 0 0 ]msf
344.16 53.7224 mo
(1)sh
WOKOUX+TimesNewRomanPS-ItalicMT*1 [0 -10.98 -10.98 0 0 0 ]msf
347.16 50.4824 mo
(\(Y\))
[-3.66504 -6.11368 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: Tahoma Initial
ct_T42Dict begin
-0.598 -0.207 1.336 1.031
 256 array 0 1 255 {1 index exch /.notdef put} for  /Tahoma
Type42DictBegin
[<00010000000c000c000c000c4f532f32bf5a9663000000cc000000566376
7420786581fc00000124000002e66670676d3a0260f80000040c0000063c
676c79663130d15100005d780003edca68656164d0d2970a00000a480000
0036686865610ded0be600000a8000000024686d7478378288ef00000aa4
00001fc86c6f63611208826400002a6c00001fcc6d6178700ba907700000
4a38000000206e616d650f5c1eac00004a5800000da4707265705e2e63ad
000057fc00000579676469720000000000000000000000000001038e0190
00050008059a053300000125059a0533000003a0008202b10800020b0604
03050404020461007a878000000000000008000000004d53202000400020
fffc061efe59003b080101a7200101ff202800000000061e061405f005d1
047c045d03d200100000ffe7ffe1fe78fe64fe59039b00270000009600aa
00b900c600ce000000000000000000bc00c200000000007600b200c000cb
0000000000000000000000000081009400a600cc00da00ef000000000000
00000098009e00ab00b000000097009e007d0166017c00900098009e00a4
00a900ae00b300ba00c30000000000000000000000000000000000000000
00000000000000000000000000d3011d00000000000000c3021401c20000
000000e9000c02d10173018e009700970042004200c60000000000000000
000000880080003900390000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000001ff0249033f025a02cc0289026f0237000000000000027a009400c0
03d203a7004c004c00c000d600be00000000000000000000000000000000
0000008101f901f9007400e500b900ca019502c600ac00a7008500880091
009800a500ac006f0087008f009b00a00000000000000000000000000000
0000068a051104f200000000000000000000000000b800ad0086005c00db
00cb00c400a0008600530000009700910000007d000a001a001f05600000
0000000000aa00a200000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000045e02b50094
009402cd034202bc02b0032f020403bc0191061405fa0304006000600059
007d004c008f0066004b008700a600a800bc007d00000000008c00b200b2
008e00a40000000000710071009a00f8008302aa004c00750075039c0331
00a400bc003d0062017b01080087003900b6019e00e2005a005a007000af
00e201c300b90071007104bc00680000403d543b3a393837363534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716151413
1211100f0e0d0c0b0a090807060504030201002c01b0184358b119072b1b
212121592d2c01b0184358b11a072b1b212121592d2c01b0184358b00325
10f221b000121b212121592d2c01b0184358b11b072b1b212121592d2c01
b0184358b11c072b1b212121592d2c01b0184358b11d072b1b212121592d
2c01b0184358b11e072b1b212121592d2c4eb00014b046234344b0032510
b10046e6b00013b00114b00010f221b001134db000122d2c01b018435845
646a234569b01943646060b0462344231020b046f02fb000121b21212121
592d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0462370b1
01463e01b0462370b10246453ab10200080d2d2cb0122bb0022545b00225
456ab0408b60b0022523442121212d2cb0132bb0022545b00225456ab8ff
c08c60b0022523442121212d2cb000b0122b2121212d2cb000b0132b2121
212d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810
0062602b0c642364615c58b00361592d2cb100032545685458b0032545b0
032545606820b004252344b0042523441bb00325204568208a2344b00325
456860b003252344592d2cb00325204568208a2344b00325456860b00325
23442d2cb00943588721c01bb01243588745b0112bb0472344b0477ae41b
038a45186920b04723448a8a8720b0a05158b0112bb0472344b0477ae41b
21b0477ae4595959182d2c208a4523456860442d2c456a422d2c01182f2d
2c21212d2c01b0022545b002254564606ab00325456a6120b00425456a20
8a8b65b0042523448cb00325234421212d2c01456823456961b00325456a
6120b00425456a208a8b65b0042523448cb00325234421212d2c018a8a45
642345646164422d2c01b0022543b04054b0022543b000545a58b0032520
45b040614459b0022543b00054b0022543b040545a58b004252045b04060
4459212121212d2c014b525843b00225452361441b2121592d2c014b5258
43b00225452360441b2121592d2c4b525845441b2121592d2c0120b00325
2349b04060b0206320b000525823b002253823b002256538008a63381b21
2121212159012d2c4b505845441b2121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c462346608a8a462320468a608a61b8ff8062232010238ab1
4b4b8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d
2c2045b003254652583f1b2111592d2c2045b003254650583f1b2111592d
2c00b00743b006430b2d2c4b5258b00425b0042549b00425b00425496120
b0005458212043b0005558591bb04054582043b0005458591b2043b00054
581bb00325b8ffc03859595959212121212d2c4b52584365381b2121592d
2c4b525843381b2121592d2c21210c6423648bb84000622d2c21b0805158
0c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c642364
8bb81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d
2cb4000100000015b00826b00826b00826b008260f10161345683ab00116
2d2cb4000100000015b00826b00826b00826b008260f1016134568653ab0
01162d2cb0134358031b02592d2cb0134358021b03592d2cb00a2b231020
3cb0172b2d2cb0282b8a102320d023b0102bb00558c01b3c59201011b000
12012d2c4b53234b515a5820458a60441b2121592d2c4b53234b515a5838
1b2121592d2c20b003254523452361688a204568208a234460442d2c20b0
03254523452361688a204568208a234460442d2c4b5358b00425b0042549
6423456469b0408b6120b080626ab00225b00225618cb0462344218a10b0
46f6211b218a11231220392f592d2cb0024354584b53234b515a58381b21
21591b21212121592d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d00010000000323d7
68c484845f0f3cf5001b080000000000aec0ba1c00000000bcf76d7afb34
fe580ab50846000000090002000100000000000100000801fe5900000b20
fb34fa7a0ab50001000000000000000000000000000007f2080001000000
0000028000000280000002a800e40336007205d2008e045e006a07d00066
0564004301b000690310006c0310004a045e007005d2009d026c004a02e8
005a026c00be030fffe8045e0053045e00e2045e006d045e0061045e0028
045e007c045e0055045e0063045e004a045e004302d400f302d4007a05d2
00c905d200c005d200d703ca006d0746008404ccfff604b7009704ce0042
056d0097047d0097042c0097055700420567009702fc005d0355000904b4
009703fb0097062a00970557009705a900420469009705a9004204f70097
0475004d04acffff053f008504c6fff80737001a04a50008049cfff50479
003c031000a6030f00340310006205d20085045efff0045e00f80433003a
046c008803b1003b046c003b0436003b028c001d046c003b0476008801d4
007f0241ffa603fc008801d4008c06b800880476008804580039046c0088
046c003b02e200880392004302ad00150476008003fc000605f0001e03f6
000a03fc0006038e003103d8003c030f013403d8006205d2008604ccfff6
04ccfff604ce0042047d00970557009705a90042053f00850433003a0433
003a0433003a0433003a0433003a0433003a03b1003b0436003b0436003b
0436003b0436003b01d4007801d4ffff01d4ffca01d4ffda047600880458
003904580039045800390458003904580039047600800476008004760080
04760080045e008703c40065045e0072045e0059045e007703a30072045e
003904630088076e0056076e00560702006b045e01c1045e00fd05d200c0
074effd905a900420746006e05d200a205d200c905d200d7045e0038048b
0088045e00430517007e0571009c04820088045e004a03f2007203f20055
059e002b070a003a0458002903ca003a02a800e405d2009d05d20051045e
ffcf05d200be04f4fff60496006704960083068a00b104ccfff604ccfff6
05a9004207d0004207450039045efffc0746fffc0336ffc00336006b01b0
ffc001b0006105d2009d05d2007703fc0006049cfff50376ffe3045effe4
0310007b031000970444001d043e001d045e0087026c00be01b0fff3032e
fff80b20006604ccfff6047d009704ccfff6047d0097047d009702fc005d
02fc002a02fc004c02fc005d05a9004205a9004205a90042053f0085053f
0085053f008501d4008c045e00da045e00a1045e00b6045e00e6045e01c4
045e00fd045e0121045e00fa045e0156045e00d604240018023200180475
004d039200430479003c038e0031030f013405960018045e0039049cfff5
03fc000604860097046c008805d200b605d200d003f200f803f200b903f2
00b8080000ab080000ab0800008c045e002205570042046c003b02fc005d
0475004d0392004304ce004203b1003b04ce004203b1003b0496003b045e
fff002d400f304ccfff60433003a04ccfff60433003a056d0097057f003b
05960018047d00970436003b047d00970436003b03fb009701d4007203fb
009702e3008c03fb00970390008c05570097047600880557009704760088
05a900420458003904f7009702e2008804f7009702e200360475004d0392
004304acffff02ad001504acffff03bf0015053f008504760080053f0085
047600800479003c038e00310479003c038e0031040f009705a9004205fd
00420470003b0458003903a4003c04a7003903bc000405a60039045efff0
047800e403f2007d07a200a705d9005d0420007f058a0021025a008903cc
008907d000660296000f04d5009202d6008302d6008304d500b102d60070
04ccfff60433003a04ce004203b1003b04ce004203b1003b047d00970436
003b047d00970436003b047d00970436003b05570042046c003b05570042
046c003b05570042046c003b056700970476008805b9001804a0000c02fc
000a01d4ffca02fc003701d4ffe002fc005401d4ffd202fc005d01d4005f
035500090241ffa604b4009703fc008803fc008803fb009701d4ffd60557
009704760088055700970476008805a900420458003905a9004204580039
04f7009702e2ffea0475004d0392004304acffff02b7001f053f00850476
0080053f008504760080053f008504760080053f0085047600800737001a
05f0001e049cfff503fc00060208008c04ccfff60433003a074effd9070a
003a05a900420458002902d400f30737001a05f0001e0737001a05f0001e
0737001a05f0001e049cfff503fc000601b0ffc0045effd0045e00590510
0059080000ab0800008c0800008a0800009901b00061045e0121045e01b6
045e00ae04ccfff6056d00000657000003e200000667000005be00000666
000001d4ff9c04ccfff604b7009704f4fff6047d00970479003c05670097
02fc005d04b4009704c6fff6062a0097055700970488004305a900420567
0097046900970473004104acffff049cfff504a5000806590082059e002b
02fc004c049cfff50470003b03a4003c0476008801d40071047400800471
008803fc00060321003b047600880470005801d4008c03fc008803fc0005
048b008803fc00060377003704580039046a007e0371003a0474008003fa
fffb05b7007f05cc004001d4ffda04740080045800390474008005cc0040
047d009705bfffff040f009704cc00420475004d02fc005d02fc004c0355
00090803000f07df009705beffff04d20097049affff0567009704ccfff6
04b7009704b70097040f009705780012047d00970727fff20443001f055c
0097055c009704d20097056c000f062a00970567009705a9004205670097
0469009704ce004204acffff049affff05fd004204a50008057b00970516
005d078c009707aa00970584ffff064f009704a9009704cc002b079c0097
04e4fffb0433003a046600430432008803520088047700080436003b05d8
000803a90020048200880482008803fc00880471000f051c008804810088
0458003904820088046c008803b1003b03bc000403fc00060614003e03f6
000a0493008804580060063a008806520088048c0004058b008804010088
03c5002a06180088043900150436003b04a0000c0352008803c5003d0392
004301d4007f01d4ffda0241ffa6069c000f0697008804a0000c03fc0088
03fc00060482008804100097035200880746006e0920009704820088045e
004108000000080001000800010008000100080001000800010008000100
080001000800010008000100060300420480003905c1008504da00800000
01ad000001c40000fcfe0000fd7f045e00da045effa7045e00da045e00c9
045e00e6045e00e6045e00e6045e00c9045e01ad045e00da045e00e6045e
00e6045e00e6045e00e6045e00da04ccfff60433003a04ccfff60433003a
04ccfff60433003a04ccffce0433ff8e04ccfff60433003a04ccfff60433
003a04ccfff60433003a04ccfff60433003a04ccfff60433003a04ccfff6
0433003a04ccfff60433003a04ccfff60433003a047d00970436003b047d
00970436003b047d00970436003b047d00970436003b047dffe30436ffb5
047d00970436003b047d00970436003b047d00970436003b02fc005d01d4
006802fc005d01d4007f0000fd290000fd760800010008000100042c01d3
042c011d042c012d042c012d042c01d3042c016e042c0178042c0190042c
0175042c01d3042c011d042c01d3042c01e80310007d042c019001cf0091
042c01d3042cff8e02d400f305620088051e003c03c4001c04ce0014057a
009702310014027e003b057a0097059800950231001404f8001504f8003d
04f80048057a0097057a005602e5001e0335003205d8001405300032054c
00690537006903cf002804bb0046056b0097048e001e0686009705ac001e
04620014046200140462001401b000610336006b06ae00970231ff8e04f8
001504f8001504f8ff8e04f8ff8e05300032068600970686009706860097
06860097056200880562008805620088051e003c03c4001c04ce0014057a
00970231fffe02ccfffe059800950231fffe04f8001504f8003d04f80048
057a00560335003205d80014054c00690537006904bb0046056b0097048e
001e0686009705ac001e02310014051e003c04f8003d0537006905760029
0000ffdc0000ff250000ffdc0000fe5102d500f602d500f403cb0054030e
006a020cffba023d000002620000023d0000023d000001f00000023d0000
02c8003101790000049301500493013b0493004204930025049300930493
00480493005c0493002d0493002b0493007b0493004a02d500ee045e003f
0348ffba02cfffba03c5005c02d501100493004204930048049300dd026e
00ed026e0067026e0059026e0059023dffba026a0002080001000408ffba
08000100073f005c0348ffba020000580408ffba0200fffc0400ffba077f
005c08000100073f005c0675005c077f005c023dffba02cfffba06f6005c
071d005c0675005c06f6005c04df0050059a00500546ffba0571ffba02e5
ff930356ff930764005c07be005c03d7ffba0442ffba0764005c07be005c
03d7ffba0442ffba06fa005c07fa005c0800010008000100080001000800
010008000100080001000800010008000100080001000800010008000100
08000100080001000800010008000100080001000265ffdd026a00020266
0000026600000266000005a900420458003905a900420458003905a90042
0458003905a900410458ffa605a900420458003905a900420458003905a9
004204580039060300420480003906030042048000390603004204800039
06030042048000390603004204800039053f008504760080053f00850476
008005c1008504da008005c1008504da008005c1008504da008005c10085
04da008005c1008504da0080049cfff503fc0006049cfff503fc0006049c
fff503fc0006049cfff503fc00060496003b0000fc330310006c0310004a
0800010007c30052030e006a01eefff2025efffc01ee004f025e00770356
ff89038dff8901ee0052025e00a406fa005c07fa005c023dffba02cfffba
01ee00a4025e00a40675005c077f005c023dffba02cfffba03c5005c0498
00520675005c077f005c023dffba02cfffba0675005c077f005c023dffba
02cfffba04df0050059a00500546ffba0571ffba04df0050059a00500546
ffba0571ffba04df0050059a00500546ffba0571ffba03be005c045e0046
03be005c045e004602e5ff930356ff9302e5ff930356ff9309ae005c0a5c
005c07d7ffba087dffba09ae005c0a5c005c07d7ffba087dffba093d005c
0950005c0610ffba0623ffba093d005c0950005c0610ffba0623ffba0564
ffba05a2ffba0564ffba05a2ffba0564ffba05a2ffba0564ffba05a2ffba
04d9005204b0005c04beffba03ddffba04d9005204b0005c04beffba03dd
ffba06f6005c073f005c0348ffba0408ffba06f6005c071d005c0348ffba
0408ffba05cd005c0666005c03d7ffba0442ffba052d005c05c9005c023f
ffba02cfffba04baff62057fff600414ffba04dbffba054c005c0606005c
023dffba02cfffba03c5005c049800520560ffba0466ffba0356ff89038d
ff8906fa005c07fa005c06fa005c07fa005c023dffba02cfffba04dfffa4
05aeffa404df002505ae002104df003505ae003504df003505ae003503c5
005803c50058049800520000feb50000fd290000fea10000fd8e0000fd66
0000fe750000fce90000fe0a0000fd1b0000fcc30000fed80000fd2b0000
fe970000fd630000fd430000fefc0000fc260000fb340000fb4e0000fc78
0000fc1e0000fbcd0000fd0c0000fd950000fefc0000fc600000fe660000
fb8e0000fd830000fcb50000fc5b0000fcee0000fc6c0000fd700000fdba
0000fd6b0000fd430000fd550000fcf10000fe210000feb50000fd480000
feae0475004d0392004304acffff02ad00150436003b047d009704820088
055c0097015a006204c3009304e7003d053d003d04ec007f04ec007f0562
003f03f0001d0473006404f60052050400520581005206e500a606a8007b
04f8005204f8003d047300560679005206fa007f06d3007f04ec007f04ec
007f04ae007f05ba00520452005604e5003d050a0052050a0052050e00a8
050e00a805aa003d0596003d04f8005204cb003d04a200a8036f00290489
007b04ee008f04f8005203e1003704ec007f05f4005204dd008f055c003d
05b8003d04c300a004c3008d043b003d0396005c0000fd3b03e1003703e1
fe640000fbe00000fbe00000fbe00000fbe00000fe5a0000fd2f0000fea6
04b6009802a800a804bc00a803f0003d0389003d0417002303e1003703fe
003d0000fca80000fea10000fdb10000fdd50000fe4e0000fe020000fe64
0000fde104d1007504d10075050e007f057b00a80581007f05dd007f05dd
007f052b000c0631007f0631007f05b8007f058d003d0885009104a60052
0000fb420000fb420000fb420000fb420000fd4f0000fc370000fb990000
fcda0000fc820000fec30000fd0b0000fd2f0000fe4e0000fe0006a6007b
0000fb770000fcdf0000fb9a0000fe030000fdd30000fce10000fd580000
fd720000fe5a0000fd2f0000fea601b0006b031f00b6023dffba02fc005d
0355000901d4007f0241ffa6040f00230352002e076afff2060200080512
0097042f008804d2009703fc008805850097049a0088049cfff503fc0006
049cfff503fc000604e80008041e000a0516005d04580060051600970476
008805a900420436003605a90042045800390000ffdc0000ff160000ffdc
0000ff200000ffdc0000ff200266002c0675005c077f005c023dffba02cf
ffba03be005c045e004602e5ff930356ff93054c005c0606005c042a0064
023dffba03dcffba042a0064042a00640750001307500013075000130750
0013020c002803c5005c0000ffd20000fe310000feda04730069049d0032
04ce004204ce004206b8008805570000091c00970737000004b4000004ac
ffff080000290200000d0200000f026e00ed026e006701ae001d06f6005c
02640032020000580200005801ee000d025e000d01ee000f025e000f01ee
000f025e000f01ee00a4025e00a40356ff89038dff890356ff89038dff89
06fa005c07fa005c0675005c077f005c023dffba02cfffba0675005c077f
005c023dffba02cfffba0675005c077f005c023dffba02cfffba0675005c
077f005c023dffba02cfffba0675005c077f005c023dffba02cfffba0675
005c077f005c023dffba02cfffba04df0050059a00500546ffba0571ffba
04df0050059a00500546ffba0571ffba04df0050059a00500546ffba0571
ffba04df0050059a00500546ffba0571ffba04df0050059a00500546ffba
0571ffba04df0050059a00500546ffba0571ffba03be005c045e004603be
005c045e004603be005c045e004603be005c045e004603be005c045e0046
03be005c045e004603be005c045e004602e5ff930356ff9302e5ff930356
ff9302e5ff930356ff9302e5ff930356ff9302e5ff930356ff9302e5ff93
0356ff9302e5ff930356ff9309ae005c0a5c005c07d7ffba087dffba09ae
005c0a5c005c07d7ffba087dffba09ae005c0a5c005c07d7ffba087dffba
093d005c0950005c0610ffba0623ffba093d005c0950005c0610ffba0623
ffba0564ffba05a2ffba04d9005204b0005c04beffba03ddffba06f6005c
073f005c0348ffba0408ffba06f6005c073f005c0348ffba0408ffba06f6
005c073f005c0348ffba0408ffba06f6005c073f005c0348ffba0408ffba
06f6005c071d005c06f6005c071d005c08ae005c08ae005c08aeffba08ae
ffba0764005c07be005c03d7ffba0442ffba05cd005c0666005c03d7ffba
0442ffba05cd005c0666005c03d7ffba0442ffba05cd005c0666005c03d7
ffba0442ffba0764005c07be005c03d7ffba0442ffba0764005c07be005c
03d7ffba0442ffba0764005c07be005c03d7ffba0442ffba0764005c07be
005c03d7ffba0442ffba0764005c07be005c03d7ffba0442ffba052d005c
05c9005c023fffba02cfffba052d005c05c9005c023fffba02cfffba052d
005c05c9005c023fffba02cfffba052d005c05c9005c023fffba02cfffba
054c005c0606005c023dffba02cfffba054c005c0606005c054c005c0606
005c023dffba02cfffba054c005c0606005c04df0050059a00500546ffba
0571ffba0356ff74038dff740356ff89038dff890356ff89038dff890356
ff89038dff890356ff89038dff890356ff89038dff890356ff89038dff89
0356ff89038dff89076400000864000006fa005c07fa005c023dffba02cf
ffba0356ff89038dff8906fa005c07fa005c06fa005c07fa005c0000fdfe
0000ff3f0000ff300000ffa70000fe2208fc003208ad00320000ffb50000
ffb60000fefb0000fefe0000fe220000ff9701cd0032035300280000fe84
0000ff0b04cd00320000ff580000ff580000fefe09ae005c0a5c005c07d7
ffba087dffba093d005c0950005c0610ffba0623ffba04d9005204b0005c
04beffba03ddffba030e006a04baff6203be005c045e0046045e00b6045e
00b6045e00b6045e00b6045e00fd045e00fd045e00e6045e00a1045e00e6
045e00a1045e01c4045e01c1045e00da045e00da045e00b6045e00b6047d
00970436003b045e017a04ccfff60433003a04b70097046c008804b70097
046c008804b70097046c008804ce004203b1003b056d0097046c003b056d
0097046c003b056d0097046c003b056d0097046c003b056d0097046c003b
047d00970436003b047d00970436003b047d00970436003b047d00970436
003b047d00970436003b042c0097028c001d05570042046c003b05670097
04760088056700970476008805670097047600880567fffe0476ffe10567
00970476008802fcffed01d4ff5702fc004c01d4ffb304b4009703fc0088
04b4009703fc008804b4009703fc008803fb009701d4007a03fb009701d4
ff7603fb009701d4ff7603fb009701d4ff90062a009706b80088062a0097
06b80088062a009706b80088055700970476008805570097047600880557
009704760088055700970476008805a900420458003905a9004204580039
05a900420458003905a900420458003904690097046c008804690097046c
008804f7009702e2008804f7009702e2008804f7009702e2003404f70097
02e200340475004d039200430475004d039200430475004d039200430475
004d039200430475004d0392004304acffff02ad001504acffff02ad0015
04acffff02ad001504acffff02ad0015053f008504760080053f00850476
0080053f008504760080053f008504760080053f00850476008004c6fff8
03fc000604c6fff803fc00060737001a05f0001e0737001a05f0001e04a5
000803f6000a04a5000803f6000a049cfff503fc00060479003c038e0031
0479003c038e00310479003c038e00310476008802adffd105f0001e03fc
00060433003a0208008c0470003b0470003b0470003b0470003b0470003b
0470003b0470003b0470003b04ccfff604ccfff60592000005920000052e
0000052e0000055800010558000103a4003c03a4003c03a4003c03a4003c
03a4003c03a4003c04fd000004fd0000063d0000063d0000061500000615
000004760088047600880476008804760088047600880476008804760088
0476008805e7000005e70000072700000727000006ff000006ff0000071e
0000071e000001d4008c01d4008c01d4ffda01d4ffda01d4fff801d4fff8
01d4ff6101d4ff6103a4000003a4000004f8000004f8000004bc000004bc
000004db000004db00000458003904580039045800390458003904580039
0458003905a90000060d0000076900000769000006dd000006dd00000474
008004740080047400800474008004740080047400800474008004740080
05a8000006d4000006d4000006df000005cc004005cc004005cc004005cc
004005cc004005cc004005cc004005cc0040059e000006020000075e0000
075e000006d2000006d2000007410000074100000470003b0470003b03a4
003c03a4003c047600880476008801d4001101d400890458003904580039
047400800474008005cc004005cc00400470003b0470003b0470003b0470
003b0470003b0470003b0470003b0470003b04ccfff604ccfff6059c0000
059c0000053800000538000005580001055800010476007f0476007f0476
007f0476007f0476007f0476007f0476007f0476007f05e7000005e70000
072700000727000006ff000006ff0000071e0000071e000005cc004005cc
004005cc004005cc004005cc004005cc004005cc004005cc0040059e0000
06020000075e0000075e000006d2000006d2000007410000074100000470
003b0470003b0470003b0470003b0470003b0470003b0470003b04ccfff6
04ccfff604ccfff604ccfff604ccfff602d50110045e01c902d50110045e
00a1045e00a10476007f0476007f0476007f047600880476007f05700000
05200000065a0000060a00000567009702d5005c02d5005c045e00a101d4
ff9c01d4ff6c01d4ff6401d4ff6401d4ff5701d4ff5702fc003202fc0002
042b000003db000002d5005c02d5005c045e00a104740080047400800474
008004740080046a007e046a007e0474008004740080049cfff5049cfff5
0607000005df000004e90000045e00ae045e00ae045e017905cc004005cc
004005cc004005cc004005cc00400674000005a9000006690000059e0000
059e002b045e01a102d501100000feaa0000fe870000fdc10000feb60000
ff950000fecd0000fece0000fe700000feaa0000ffbf0000ff3d0000fe70
0000feb60000feb70000ffa10000ffa10000ffa1000000640000ff2d0000
ff2d0000ff440000ff440000fe87000000000000ffa30000ff440000ff44
0000ff440000fe870000fea9000000000000fecd0000ff470000ffa10000
ff0e0000ff240000ffbf0000fe870000febb0000feaa0000feaa0000feb6
0000feb70000fe710000fe870000fdc10000fdc10000fe710000fe870000
fdc10000fe870000fe880000ffa30000fe870000ff440000feba0000ff23
0000ff9a0000fdc10000fe710000ffa10000fe7e0000ff990000fe870000
fdc10000ff3d0000ff440000fe700000fe710000fe6c0000ff030000ff44
0000ff530000ff530000ff5305570042046c003205570042046c003b04b4
009703fc008805a90042045800390443001f038e000a0443001f038e000a
000000000000003e0000003e0000003e0000003e000000c2000001120000
023e000003e20000053e000006b6000006f6000007900000083c00000918
000009a0000009f400000a2c00000a6a00000ab000000bea00000c960000
0d8800000efe00000fb8000010e00000125c000012d0000014a20000161c
00001666000016dc0000175e000017aa0000182e0000193200001a920000
1baa00001d7200001ed200001fdc000020800000211e000022a800002406
000024d400002594000026b2000027260000287c000029e000002b2e0000
2c4600002dec00002f360000311c000031ea000033280000344e0000359c
000036ea000037ca0000386e000038bc0000390a0000395e000039e20000
3a0e00003a4a00003c8400003e2600003faa0000414a000043360000446a
00004648000047b20000490000004a2600004b9400004c6e00004eda0000
5044000051b80000535a000054a200005582000057bc000058cc00005a50
00005b6e00005d2000005e7800005f7000006008000061140000614e0000
626e00006386000063c0000065620000670c0000673a0000676200006794
000067d6000067fa0000681e00006842000068680000688c00006a7c0000
6bf800006c2200006c4600006c6a00006c9000006cb600006ce600006da6
00006e7e00006ea200006ec600006eea00006f0e00006f4800006f6c0000
6f9000006fb400006fd800006ffe00007076000070f8000071f0000072bc
000074c00000750e0000757a000076ba0000784e000079aa00007a680000
7aa600007aea00007bae00007cb200007e4400007f7200007ff40000808e
00008126000081fc000082da000083f20000849e00008508000085660000
85fc000086fa0000878a000088de00008b1000008c7800008d4000008db8
00008dfa00008e7400008f5e0000906c00009122000091d2000092840000
92d80000930c0000933c000093620000949000009678000096a4000096d0
00009756000097d80000982a0000987c000098f20000998e000099b40000
99e600009a2000009b5c00009bbc00009c1e00009d1c00009e1800009ec8
00009ef200009f3e00009fbc0000a1860000a1ac0000a1da0000a2080000
a23e0000a2700000a29e0000a2cc0000a3340000a36a0000a39c0000a3ca
0000a3fe0000a4380000a4660000a49e0000a5220000a5720000a6220000
a6580000a6c60000a6f20000a7700000a7d40000a84e0000a8b40000a906
0000a9d20000aa9a0000aac80000aaec0000ab1a0000ab3e0000ab920000
acba0000adfe0000ae2c0000ae500000af420000b0300000b0600000b0d0
0000b1380000b1e80000b2f60000b4120000b4e40000b6720000b73a0000
b7680000b78c0000b7ba0000b9de0000bbf20000bc200000bc440000bc72
0000bc9a0000bde00000be0a0000be340000be620000be860000bff00000
c1980000c1c60000c3020000c42a0000c5180000c6ac0000c6de0000c702
0000c7300000c7720000c8160000c89c0000c92c0000c9a20000c9d00000
c9f40000ca220000ca460000ca780000ca9e0000cacc0000caf20000cb20
0000cb460000cb740000cb9a0000cc7c0000cdb20000cde00000ceda0000
cf0c0000cf3c0000cf7a0000cfa00000cfce0000cffa0000d0280000d04c
0000d0a60000d1f60000d3460000d4440000d5b00000d6e00000d7ca0000
d83e0000d99c0000d9ee0000da260000dac00000dce80000ddec0000def8
0000e0140000e05a0000e0de0000e2880000e3ac0000e4020000e4360000
e4840000e4d60000e58e0000e5b60000e5da0000e60c0000e6300000e65e
0000e6820000e6aa0000e6ce0000e6fc0000e7200000e74e0000e7720000
e7a00000e7c40000e7f20000e8160000e9c60000eb4a0000eb780000ebb4
0000ecb40000ede20000eedc0000f0040000f0a20000f1480000f2020000
f2d60000f3be0000f4de0000f50c0000f5f60000f61a0000f6400000f740
0000f8080000f8e80000f90c0000f9300000fa720000fb660000fb8c0000
fbb00000fbde0000fc020000fc260000fd340000fd620000fd860000fe46
0000ff520000ff780000ff9c0000ffc20000ffe600010014000100380001
019e000102ae000102dc000103020001033000010354000103e60001058e
00010784000107b2000107dc0001080e000108320001085c000108920001
08c2000108f0000109160001094800010970000109a6000109d400010a1c
00010a4600010b3800010c1c00010db400010ffa000112080001139c0001
13e60001144e0001147a000114ec0001153200011592000115f00001165c
000116ae00011716000117720001185a0001186a0001187a0001188a0001
189a000118aa000118ba000118ca000118da000119b0000119c0000119d0
00011a5200011a6200011afc00011b0c00011bdc00011bec00011bfc0001
1c0c00011d2a00011d3a00011da200011dd400011df800011e1c00011e40
00011e6e00011e9600011fe0000120dc000121de00012298000123e00001
246400012570000126520001266200012672000128060001281600012922
00012a2a00012af200012c1800012d5a00012ec200012ed200012ef80001
2f1c00012f4000012f6600012f9c000130bc000130e80001321c0001322c
0001323c000132a4000132b40001342a0001355a000136500001367e0001
3800000138c0000138d0000139ba000139ca00013a2400013b0400013b14
00013cbe00013e4400013f2a000140620001418200014286000142960001
42a6000142b600014350000143600001437000014380000144b4000145ec
000145fc000146c00001478c0001487e0001497000014a7800014b8a0001
4c6000014d6a00014ebe00014fb600014fc6000151340001527a000152e6
000153d0000153e000015590000156c80001578e000157b0000158ca0001
59ba00015aba00015b5a00015b6a00015bea00015bfa00015c0a00015ca0
00015cb000015e5400015e6400015f2200015ff2000160ae000161980001
629a000163ae0001648c000165c2000166d2000167ca000167f000016984
000169a800016abe00016ace00016ade00016aee00016afe00016c600001
6d9000016eb800016eee00016f1000016fb000017026000170ac000170d8
00017222000172320001731c00017728000177520001777c000177a60001
77d0000177fa000178240001784e00017878000178a200017a0e00017b36
00017c6400017d9200017e1800017e4400017e5600017e6800017eda0001
7f4c00018018000180d400018154000181d2000182a600018372000183f8
000184b200018534000185c0000186980001877000018840000188620001
888c000188b8000188e40001891a0001893e0001896400018988000189ba
000189de00018a0800018a2c00018a6000018a9800018abc00018ae00001
8b0400018b2800018b4c00018b7000018b9400018bb800018bf600018c2e
00018c5000018c7200018ca600018cd000018cfc00018d1e00018d4e0001
8d7200018da200018dc600018dea00018e1800018e3c00018e6000018e9e
00018ed000018f0200018f2e00018f5200018f7600018f9000018fda0001
90040001902e0001909e000191ae000192460001930400019346000193c2
00019474000194a800019504000195560001961c000196680001969e0001
96c800019702000197380001978a000197dc0001981c000198f40001998a
00019a6c00019ac600019b7200019be400019cbc00019d4a00019e0a0001
9e6c00019ef200019f980001a04a0001a0d40001a1d40001a24e0001a2c2
0001a3a00001a4680001a53e0001a6360001a7180001a8280001a8e80001
a9720001aa700001ab660001ac3e0001ad180001adf20001ae440001aec6
0001afa80001afbe0001affe0001b0420001b0680001b0b00001b1680001
b18c0001b1b80001b20a0001b2600001b2840001b2a80001b2e80001b312
0001b3440001b36c0001b3a60001b3d80001b40e0001b4320001b4840001
b4a60001b4c80001b4fc0001b52c0001b55a0001b57e0001b5b40001b5ea
0001b6280001b6500001b6720001b6b20001b6d60001b6fa0001b71c0001
b73e0001b7600001b8600001b8880001b8f20001b94a0001b9ae0001ba2e
0001baca0001bbde0001bcb00001bce00001bd580001be700001beee0001
bf340001bffa0001c0400001c1300001c1b80001c2300001c2b40001c38e
0001c47e0001c5b00001c6820001c7460001c7ce0001c8500001c9660001
cab80001cb280001cc740001cd820001ce260001cf720001cfea0001d108
0001d20c0001d2f80001d3260001d36c0001d3e40001d4600001d4c60001
d60c0001d6360001d6700001d69a0001d6ce0001d7020001d7b20001d926
0001d9d20001da020001dae60001db100001dc920001dcd80001dd1e0001
dd620001dda60001ddda0001df1a0001dfdc0001e0f20001e1300001e16a
0001e19e0001e1e40001e2240001e2600001e3c80001e55e0001e6800001
e7d80001e9b00001ebaa0001ed340001eefa0001f07e0001f20e0001f238
0001f2620001f28c0001f2b60001f2e00001f30a0001f3340001f35e0001
f3880001f3b20001f3dc0001f4060001f4300001f45a0001f4840001f4ae
0001f6960001f7ce0001f8ea0001fa8c0001fba60001fbca0001fbec0001
fc1a0001fc420001fc740001fca20001fcd40001fcf80001fd280001fd56
0001fd7c0001fda00001fde20001fe140001fe440001fe660001fe980001
fec20001fef40001ff160001ff3a0001ff680001ff8c0001ffae0001ffd0
0001fff2000200260002004800020082000200a4000200dc000200fe0002
0134000201560002017a0002019c000201be000201e00002021800020244
0002026600020294000202c2000202ee0002031c0002033e000204a20002
04b4000204c4000204d4000204fe00020712000207220002074c00020776
000207a2000207ce0002080c0002084a0002088e000208ce000209020002
092e0002096000020990000209cc00020a3600020a6600020a9600020ac6
00020af600020b2a00020b5e00020b9200020bc600020bfa00020c2a0002
0c6200020c9a00020cd200020d0a00020d3600020d6200020d8e00020dc2
00020ec2000210120002109e0002117c000211ac000211d80002120a0002
123c000212e8000213ba000213e600021412000214980002156c000215a0
000215d400021734000218cc000219de00021b2400021b5800021b8c0002
1bc000021bf400021d6200021f080002202400022190000221bc000221e8
0002221e000222540002235800022490000224a0000224b0000224dc0002
250800022534000225600002268c000228ca000229ac00022b0400022b30
00022b5c00022b8800022bb400022be000022c0c00022c3800022c640002
2db600022de600022e1600022e4600022fbe000231520002316200023172
0002322e0002330200023372000234160002354a000236be000237b40002
38d8000239b800023abc00023ae800023b1400023b2400023bfa00023d04
00023e2600023f1a00024028000240380002404800024080000242700002
42a4000242e00002430a000243340002436c000243a4000243de00024418
000244ce000245bc000245f6000246300002466600024692000246be0002
46d0000246fe000247100002473a0002476400024776000247a2000247b4
000248200002488c0002489e0002490a0002491c000249780002498a0002
499c000249ae000249c0000249d2000249e4000249f600024a0800024a64
00024a7600024ad200024ae400024af600024b0800024b1a00024b2c0002
4b3e00024b5000024b6200024b7400024b8600024b9800024baa00024bbc
00024bce00024be000024bf200024c1600024c4200024c6600024c8c0002
4cae00024cde00024d0400024d3200024d6a00024e5200024fcc0002518c
0002532e0002552200025778000258d800025a5200025ca200025e7e0002
609c00026298000265600002680200026b1400026e0600027060000272de
0002754e00027762000279f000027b9800027d9000027eb80002808a0002
81aa000282ca00028440000285b60002872c0002889e00028a1a00028bd2
00028d5400028e9c0002904e000291fc00029382000294980002969c0002
990000029b0e00029d1200029f240002a06c0002a2a00002a3d60002a682
0002a7d40002a8540002a86a0002a8fa0002a9a60002aad60002aba40002
aca60002adc40002ae0a0002af680002b0360002b04e0002b1be0002b3c2
0002b5960002b61c0002b7e60002b98e0002b9b80002bb220002bd260002
bd820002be9a0002bf5e0002c0520002c19e0002c2520002c3b00002c5ec
0002c7660002c9760002cc480002cdde0002cff20002d20c0002d3ec0002
d5200002d6da0002d8e80002d90c0002d9300002d9560002d97a0002d998
0002d9b80002d9d80002da040002da240002da4c0002da6c0002da8c0002
daae0002dace0002dc800002dd8c0002de4e0002de600002de720002dfdc
0002dfee0002e00c0002e13e0002e2400002e35e0002e3a40002e3e60002
e4420002e4760002e4860002e4960002e4a60002e4b60002e5420002e5e0
0002e78c0002e91a0002ea340002eb6e0002ecae0002edca0002ee780002
ef3c0002ef4c0002f0160002f0fa0002f2020002f2ee0002f3f00002f4ee
0002f5ee0002f6b40002f6c40002f7dc0002f8e80002f9f20002faf80002
fb3e0002fb880002fbb80002fbf00002fc200002fc660002fce20002fd12
0002fd420002fd780002fda80002fdd80002fe080002fe3c0002fe700002
ff2600030000000300760003010e00030298000302ce000302fe000303ac
000304320003046400030496000304c2000304d2000304fa000305e20003
065600030782000308a000030a7c00030ba400030ccc00030e8400030eaa
000310e8000311b6000312dc000314f40003158e00031624000316720003
16f40003175400031870000318c6000318d800031902000319300003195e
00031988000319b2000319de00031a0a00031a3600031a6200031a940003
1ac600031b1000031b5a00031b9400031bc600031bf600031c2600031c56
00031c8600031cbc00031cf200031d2800031d5e00031db000031e020003
1e5400031ea600031eda00031f0e00031f4200031f7a00031fb200031fea
000320220003205a00032092000320ca000321020003213a0003216c0003
219e000321d8000322120003224200032272000322a2000322d200032302
000323320003236200032392000323ce0003240a0003243a0003246a0003
249e000324d2000325060003253a00032576000325b2000325ea00032622
0003265c00032696000326da0003271e0003274e0003277e000327ae0003
27de00032812000328460003287a000328ae000328e60003291e0003294e
0003297e000329ae000329de00032a0a00032a3a00032a7e00032ac20003
2b0400032b4600032b8000032bba00032bfc00032c3e00032c8200032cc6
00032d0a00032d4e00032d8e00032dce00032e0e00032e4e00032eaa0003
2f0600032f6200032fbe00032fee0003301e0003304e0003307e000330b2
000330e60003311a0003314e00033182000331b6000331ea0003321e0003
325200033286000332b2000332de0003330a0003333600033376000333b6
000333f60003343600033476000334b6000334f4000335340003356c0003
35a4000335dc000336140003364600033672000336ac000336e0000337d2
000338de0003399e00033a7400033aae00033ae800033b2400033b600003
3b9000033bc000033bf400033c2800033c5c00033c9000033cc800033d00
00033d4000033d8000033dbe00033dfc00033e3400033e6c00033ea80003
3ee400033f4400033fa400033ff80003404c0003407c000340ac000340dc
0003410c0003414200034178000341ae000341e40003427c000343140003
43a2000344300003445c00034488000344b4000344e00003451000034540
00034570000345a0000345dc000346180003465400034690000346d00003
47fc0003483a00034878000348b0000349b4000349f400034a3400034a64
00034a9400034ad200034c1c00034c6a00034cb800034cec00034d200003
4d6c00034db800034e0200034e5600034e9c00034ee200034faa00035092
000350c6000350fa000351320003516a0003519e000351d2000352040003
52360003526c000352a2000352dc000353160003542e0003555e0003558a
000355b6000355fa0003563e00035670000356a2000356d80003583e0003
587e000359e400035b2800035bc000035c7800035cc600035d8600035ff0
00036176000361b8000361e600036256000362d4000363060003635e0003
63ea0003646000036472000364f20003666e00036680000366d8000366ea
0003673600036782000367ce0003681a0003685e000368a2000368e60003
692a0003696e000369be00036a0200036a4600036b2400036c1e00036c4a
00036c7600036cea00036d5000036dc000036e2800036ec200036f4a0003
6ffc000370a00003716e0003723c000372bc00037306000373b000037414
0003747a000374d6000375aa0003772e000377c0000377e60003780c0003
7832000378560003787a0003789e000378cc000378fa0003792000037944
0003796a00037992000379b6000379da00037a0800037a3600037a5c0003
7a8200037aa800037ace00037af400037b1a00037b4000037b6600037b8c
00037bb200037be000037c0e00037c3400037c5800037c7e00037cc60003
7cec00037d1000037d3600037d5c00037d8200037da600037dce00037df6
00037f12000380280003805c00038090000380be000380ec000381160003
8140000381660003818c000381b0000381d4000382020003823000038254
0003827a000382b00003830a00038338000383660003838c000383b20003
83d8000383fe000384240003844a0003847000038496000384bc000384e0
000385060003852a0003855800038586000385ac000385d2000385fa0003
86200003864a000386720003869a000386c0000386e80003870e00038734
000387580003877e000387a2000387c8000387ec00038810000388340003
886a000388a0000388ce000388fc00038922000389460003896a0003898e
000389b8000389e200038a0800038a2e00038a6400038a9800038abe0003
8ae400038b0800038b2c00038b5a00038b8800038bae00038bd400038c06
00038c3800038c6600038c9400038cba00038ce000038d0600038d2c0003
8d5400038d7c00038daa00038dce00038df200038e1600038e3c00038e62
00038e8800038eae00038ed400038ef800038f2000038f4600038f6c0003
8f9000038fbe00038fe2000390060003902a0003905800039086000390b4
000390dc000391040003912a000392d20003931a00039340000393660003
938e000393b6000393de000394060003942c0003945200039496000394ce
0003950e0003954e0003958a000395c6000396220003967e000396a40003
96ca000397040003973e00039778000397b2000397fa0003983800039874
000398b0000398e800039920000399460003996c00039994000399bc0003
99e400039a0c00039a3200039a5800039a9e00039ae400039b1a00039b50
00039b8200039bb400039bf400039c3400039c5a00039c8000039cba0003
9cf400039d2c00039d6400039d8c00039db400039dec00039e2400039e4e
00039e7800039eaa00039edc00039f1600039f5000039f7600039f9c0003
9fc400039fec0003a0140003a03c0003a06c0003a0a60003a0dc0003a112
0003a14a0003a1820003a1a80003a1ce0003a2120003a2560003a2900003
a2ca0003a2f00003a3160003a34e0003a3800003a3a80003a3d40003a3fa
0003a4200003a45a0003a4940003a4ce0003a5080003a5300003a5580003
a5900003a5c80003a5f00003a6180003a6520003a68c0003a6c00003a6f4
0003a7180003a73c0003a7600003a7840003a7a80003a7cc0003a7f20003
a8180003a83c0003a8600003a8840003a8a80003a8cc0003a8f20003a928
0003a95e0003a9960003a9ce0003aa060003aa3e0003aa740003aaaa0003
aafe0003ab440003ab800003abbc0003abf60003ac300003ac900003acf0
0003ad2c0003ad680003ada60003ade40003ae220003ae600003ae9c0003
aed80003af1e0003af640003afa40003afe40003b0220003b0600003b0ac
0003b0f80003b1300003b1680003b1b40003b2000003b24c0003b2980003
b2d20003b30c0003b3560003b38e0003b3c80003b4020003b4480003b48e
0003b4d40003b51a0003b53e0003b5620003b5960003b5ba0003b5ee0003
b6120003b6460003b66c0003b6920003b6c40003b6ec0003b7100003b77c
0003b7da0003b8480003b8bc0003b9700003b9aa0003b9d40003ba0e0003
ba320003ba6c0003baa40003bad20003bb0a0003bb360003bb5c0003bbf0
0003bc8a0003bd640003bd940003bdba0003bde80003be120003be380003
be620003be8c0003beb20003bee60003bf120003bfa40003c0360003c112
0003c1360003c15a0003c1820003c1aa0003c1d00003c1f60003c21a0003
c2420003c2680003c28e0003c2ca0003c2fa0003c3380003c3a20003c40e
0003c43e0003c4740003c49a0003c4d20003c4f80003c5300003c5660003
c58e0003c5b60003c5e80003c60e0003c6400003c6aa0003c6f60003c72a
0003c75a0003c7c00003c7ec0003c82e0003c8a80003c91a0003c96a0003
c9940003c9d80003ca4e0003cad20003cb2a0003cb9c0003cc0c0003cc7e
0003ccf00003cd300003cd700003cdd00003ce320003ce640003ceac0003
cf400003cf9a0003cff60003d0720003d09a0003d10c0003d1740003d1ba
0003d2680003d2ec0003d34c0003d3ae0003d3d80003d41c0003d4b20003
d50c0003d5660003d5de0003d6480003d6f00003d7180003d7400003d796
0003d83c0003d8640003d88c0003d8c40003d90e0003d9a40003d9e80003
da3a0003daec0003db960003dc180003dc640003dd0e0003dd7e0003ddea
0003de480003de940003deea0003df2e0003df700003e0cc0003e1ee0003
e3160003e3c80003e42c0003e4ac0003e5000003e57a0003e6b20003e84a
0003e87c0003e8a00003e8e60003e91e0003ea560003eb640003ec4e0003
ed740003eda60003edca0001000007f2008c001000640008000200100040
005500000336063c000300020000002d0222000100000000000000320000
000100000000000100060032000100000000000200070038000100000000
00030018003f0001000000000004000600570001000000000005000c005d
0001000000000006000600690001000000000007002f006f000300010403
0002000c009e0003000104050002001000aa0003000104060002000c00ba
0003000104070002001000c60003000104080002001000d6000300010409
0000006400e60003000104090001000c014a0003000104090002000e0156
0003000104090003003001640003000104090004000c0194000300010409
0005001801a00003000104090006000c01b80003000104090007005e01c4
0003000104090008001e02220003000104090009001c0240000300010409
000a07d4025c000300010409000b00460a3000030001040a0002000c0a76
00030001040b000200100a8200030001040c0002000c0a9200030001040e
0002000c0a9e0003000104100002000e0aaa000300010413000200120ab8
0003000104140002000c0aca000300010415000200100ad6000300010416
0002000c0ae60003000104190002000e0af200030001041b000200100b00
00030001041d0002000c0b1000030001041f0002000c0b1c000300010424
0002000e0b2800030001042a0002000e0b3600030001042d0002000e0b44
00030001080a0002000c0b520003000108160002000c0b5e000300010c0a
0002000c0b6a000300010c0c0002000c0b76a92032303034204d6963726f
736f667420436f72706f726174696f6e2e20416c6c207269676874732072
657365727665642e5461686f6d61526567756c61724d6963726f736f6674
205461686f6d6120526567756c61725461686f6d6156657273696f6e2033
2e31345461686f6d615461686f6d6120697320612074726164656d61726b
206f66204d6963726f736f667420436f72706f726174696f6e2e004e006f
0072006d0061006c006f00620079010d0065006a006e00e9006e006f0072
006d0061006c005300740061006e0064006100720064039a03b103bd03bf
03bd03b903ba03ac00a9002000320030003000340020004d006900630072
006f0073006f0066007400200043006f00720070006f0072006100740069
006f006e002e00200041006c006c00200072006900670068007400730020
00720065007300650072007600650064002e005400610068006f006d0061
0052006500670075006c00610072004d006900630072006f0073006f0066
00740020005400610068006f006d006100200052006500670075006c0061
0072005400610068006f006d006100560065007200730069006f006e0020
0033002e00310034005400610068006f006d0061005400610068006f006d
006100200069007300200061002000740072006100640065006d00610072
006b0020006f00660020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e004d00690063
0072006f0073006f0066007400200043006f00720070002e004d00610074
00740068006500770020004300610072007400650072005400610068006f
006d00610020006900730020006f006e00650020006f00660020004d0069
00630072006f0073006f00660074002700730020006e0065007700200073
0061006e0073002000730065007200690066002000740079007000650066
006100630065002000660061006d0069006c006900650073002e00200049
007400200063006f006e007300690073007400730020006f006600200074
0077006f002000570069006e0064006f0077007300200054007200750065
005400790070006500200066006f006e0074007300200028007200650067
0075006c0061007200200061006e006400200062006f006c00640029002c
00200061006e006400200077006100730020006300720065006100740065
006400200074006f00200061006400640072006500730073002000740068
00650020006300680061006c006c0065006e0067006500730020006f0066
0020006f006e002d00730063007200650065006e00200064006900730070
006c00610079002c00200070006100720074006900630075006c00610072
006c007900200061007400200073006d0061006c006c002000730069007a
0065007300200069006e0020006400690061006c006f006700200062006f
00780065007300200061006e00640020006d0065006e00750073002e000d
000a000d000a00530069006e006300650020007400680065002000540061
0068006f006d006100730020006100720065002000540072007500650054
00790070006500200066006f006e00740073002c00200074006800650079
002000630061006e00200062006500200072006f00740061007400650064
00200061006e00640020007300630061006c0065006400200074006f0020
0061006e0079002000730069007a0065002c00200061006e006400200061
006e00740069002d0061006c006900610073006500640020006200790020
00740068006500200072006100730074006500720069007a006500720020
006200750069006c007400200069006e0074006f0020004d006900630072
006f0073006f00660074002000570069006e0064006f0077007300200039
003500200061006e00640020004d006900630072006f0073006f00660074
002000570069006e0064006f007700730020004e005400200034002e0030
002e00200054006800650073006500200066006500610074007500720065
007300200067006900760065002000740068006500200066006f006e0074
00730020007300690067006e00690066006900630061006e007400200061
006400760061006e007400610067006500730020006f0076006500720020
006200690074006d00610070002000730079007300740065006d00200066
006f006e00740073002000730075006300680020006100730020004d0053
002000530061006e0073002000530065007200690066002e000d000a000d
000a0054006800650020004c006100740069006e002c0020004700720065
0065006b00200061006e006400200043007900720069006c006c00690063
002000630068006100720061006300740065007200730020007700650072
0065002000640065007300690067006e0065006400200062007900200077
006f0072006c0064002000720065006e006f0077006e0065006400200074
007900700065002000640065007300690067006e006500720020004d0061
007400740068006500770020004300610072007400650072002c00200061
006e0064002000680061006e0064002d0069006e00730074007200750063
0074006500640020006200790020006c0065006100640069006e00670020
00680069006e00740069006e00670020006500780070006500720074002c
0020004d006f006e006f00740079007000650027007300200054006f006d
0020005200690063006b006e00650072002e002000540068006500200041
00720061006200690063002c002000480065006200720065007700200061
006e00640020005400680061006900200063006800610072006100630074
00650072007300200077006500720065002000640065007300690067006e
0065006400200062007900200074006800650020004d006f006e006f0074
007900700065002000440072006100770069006e00670020004f00660066
00690063006500200074006f00200063006f006d0070006c0065006d0065
006e007400200043006100720074006500720027007300200069006e0069
007400690061006c002000640065007300690067006e0073002e00200054
00610068006f006d0061002000730065007400730020006e006500770020
007300740061006e0064006100720064007300200069006e002000730079
007300740065006d00200066006f006e0074002000640065007300690067
006e002e00200049007400200069007300200069006400650061006c0020
0066006f0072002000750073006500200069006e00200055007300650072
00200049006e00740065007200660061006300650020005300630065006e
006100720069006f007300200061006e00640020006f0074006800650072
00200073006900740075006100740069006f006e00730020007200650071
0075006900720069006e0067002000740068006500200070007200650073
0065006e0074006100740069006f006e0020006f006600200069006e0066
006f0072006d006100740069006f006e0020006f006e0020007400680065
002000730063007200650065006e002e0068007400740070003a002f002f
007700770077002e006d006900630072006f0073006f00660074002e0063
006f006d002f007400790070006f006700720061007000680079004e006f
0072006d0061006c004e006f0072006d00610061006c0069004e006f0072
006d0061006c004e006f0072006d00e1006c004e006f0072006d0061006c
0065005300740061006e00640061006100720064004e006f0072006d0061
006c004e006f0072006d0061006c006e0079004e006f0072006d0061006c
041e0431044b0447043d044b0439004e006f0072006d00e1006c006e0065
004e006f0072006d0061006c004e006f0072006d0061006c004e00610076
00610064006e006f0074006801b001a10300006e00670041007200720075
006e00740061004e006f0072006d0061006c004e006f0072006d0061006c
004e006f0072006d0061006c004e006f0072006d0061006cb15440b8016f
b3282d3640b8016fb2171b36b80171b3033a2190411a0171000100300171
0050017100700171009f017100bf017100df01710006000f0171003f0171
005f0171007f01710004ffc00153b21c1d36b9ffc00163b2121336b9ffc0
014eb2333436b9ffc0014eb2242636b8014eb33c161f0fbd015b00ef015b
00020040015ab3191a3640b8015ab315153640b8015ab2101036b9ffc001
59b3090a3640b80170b3282d3640b80170b2171b36b9ffc0015db2151b36
b9ffc00162b2141536b9ffc00162b21c1d36b9ffc00152b21c1d36b9ffc0
0167b22f3636b9ffc00167b20e2636b9ffc00166b2090d36b9ffc00161b2
090d36b9ffc00165b2333636b9ffc00165b2282a36b9ffc00165b21d2036
b80165b21a191fb9ffc00161b24f5136b9ffc00161b23e3f36b9ffc00161
b2191d36b9ffc00161b313153640b80161b30b0d3640b8015fb2283236b9
ffc0014fb2565a36b9ffc0014fb3393b36304116014f0040014f0050014f
00030070014f0080014f00020000016400100164000200d0016400e00164
00020164b270641fb9ffc00146b2131436b9ffc00146b2161636b9ffc001
46b2090a36b9ffc00142b2111336b9ffc40142b20a0e36b9ffc0013eb217
1836b9ffc0013db20b1836b90130012f400b321fe7e8641fe8d2301f20bc
01390030013900020139b203181f410a013b01320010001f01370132000d
001f01350132b2141f2f410c0132000101360133000e001f013401330014
001f01310133b2101f40ba013800900138402f020fe32fe30240da222436
d1d73f1fd6d71a1f80d501d5d71a1f1fd70170d701cac92a1fcac93938ca
010bc844c802b8ffc0b6dc0911364fd201b8ffc0401eb229323610b220b2
40b250b270b280b2a0b2b0b2d0b2e0b20ac0b2f0b202b8ffc0407bb51718
361f44010f561f56024f555f550238bf2a1f6fbf019fbfafbf0237b9151f
2fbb01bcbe171fbdbe161fbebd151fbab9521fb6b9291fb7b9321fb8b932
1fb935391f3c3f321f3d3f3d1f3e3f211f433f1d1f423f521f413f521f40
3f521f3f35321f3233641f3335341f3534541f34351e1fd034e034f03403
b8ffeeb3b4254836b8ffe0b3b4102336b8ffee400eb4090f36b41a481fd0
6e01e07101b8ffc0400998090a364071091136b8ffc1400970121536406f
131536b8ffc0401a6e0912367099014067090f3670668066a066b06604af
65bf6502b8ffc040de640911366f937f93026f9001708e017f8c9f8c0280
a00100625062c062034061706102105b205b905b036814481fb314481f2d
14111f2c14251f2b14391f2a14131fdf28ef2802cf28df28ef2803281410
1f9e20431f1f141e1f2120431f20143c1f9f1a521f1a1b471f1b1a3c1f1a
14321f1514391f1314411f12141a1f11141a1f7014014014414336000601
0f01010f012f013f016f017f01af01bf01cf01ef01ff010a0f00010f002f
003f006f007f00af00bf00cf00ef00ff000a0a09371f0f020f0302cf02cf
03ff02ff03040c0d39050439030239010039500501b801ff01b0124b004b
5442b013014b004b5342b109322b4bb0645242858d8d1db0964b5258b080
1d59b808004b5458b001b0018e59b0084b5358b001b0018e59002b2b2b2b
73742b73747374b00345b006456861b006234473b00345b00e456861b00e
2344b00e45b00f456861b00f234401b0144568b01423442b732b2b2b2b2b
2b2b2b2b2b2b2b2b73742b2b2b2b2b2b73737373737373732b73732b732b
2b2b2b2b73742b2b2b2b00752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b742b73742b7373742b73742b01742b0073732b2b73742b732b2b2b73
732b2b2b732b2b2b2b732b2b2b2b2b2b2b2b2b2b2b737474752b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73002b2b2b2b2bb801
714568b8017123447374752b2b2b2b00000000>
[15493 15845 15653 16309 16145 15565 16333 16377 14725 16049 15681 16185 16081
15877 16321 16297 2563 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 8320 41 <000100970000041205d10009007140110535020207013508030708000301
030300b8ffc0b309113700b8ffcc40100b0b063b00000b0f0b1f0b020205
1407b8fffeb40d0d023b07b8fffab41010063b07b8fff8b40f0f063b07b8
ffc2b60b0b063b07640a10f62b2b2b2bfd325d11332f2b2b332f5d003f3f
ed12392fed3130012111211521112311210412fd4b0298fd68c6037b0521
fe5cb0fd3305d100>Tahoma AddT42Char 
1 9222 44 <0001005d0000029f05d1000b00a3b10602435458400c09043206030a0332
01080203b8fff2b41010063b03b8fff440110f0f063b03100c0c063b031c
0d0d063b03b8ffd4b70b0b063b03030d0c1112392f2b2b2b2b2bcd003ffd
c03ffdc031301b403609043206030a03320108080ba00a140502a09003a0
03b00303030e0b0b023b03060c0c023b03020d0d023b03030d0c0f0d400d
500d035d1112392f2b2b2b5ded32fded32003fed323fed32313059212135
331123352115231133029ffdbebebe0242bebe9804a19898fb5f>Tahoma AddT42Char 
1 10022 48 <000100970000059305d1000c011c4017560a0138023805360a6f026f0560
0a7f027f05700a0903b8fff2b40b0b063b04b8fff240390b0b063b550956
0a5a0b03760901050a0203090204120429043504440454046b040704200d
0d023b0404070b0903010708090a0b0305021400b8ffec40110c0c023b00
060b0b023b00020d0d023b00b8ffe8b41010063b00b8ffeab40f0f063b00
b8fffa400b0c0c063b000c0d0d063b00b8ffe6401b0b0b063b00650e0f0e
500e02050a0c0c023b050a0c0c063b051307b8fff4b41010063b07b8fffe
b40d0d023b07b8fff840110f0f063b07050c0c063b07030d0d063b07b8ff
c8b60b0b063b07640d10f62b2b2b2b2b2bed2b2b5d10f62b2b2b2b2b2b2b
2bed111739003f3c3f3c12392f2b5d1217393130015d72002b2b5d722123
11012301112311210101210593c6fe7c78fe7fb9010e0174016701130503
fc970369fafd05d1fcc3033d>Tahoma AddT42Char 
1 12572 55 <0001ffff000004ad05d1000700aab10602435458400b0601350303000805
070200b8fff4b41010063b00b8fff4400b0f0f063b00200c0c063b00b8ff
e9b40d0d063b00b8ffd4b70b0b063b000009081112392f2b2b2b2b2bc6dd
c6003f3ffdc031301b401c060135030300080f093f0902055b0714025b10
0020009000a0000400b8fffc400b0c0c023b000c0b0b023b00b8ffee400d
0d0d023b000009086f097f09025d1112392f2b2b2b5de4fde45d003f3ffd
32313059211121352115211101f3fe0c04aefe0c0521b0b0fadf>Tahoma AddT42Char 
1 13096 57 <0001fff8000004ce05d1000600fab10602435458b90005ffdeb40c11063b
01b8fff4b40d0d063b01b8fffa40180b0b063b02060b0b063b0503020603
030302080006030406b8ffe0400d0b0b063b0604200b0b063b0405b8ffe0
b70b0b063b050508071112392f2bcd2bcd2b10cd10cd003f3f3f11123931
30012b2b2b002b1b403d0504050706370657068606040614000001050704
3704570486040404140302034c0046014902430356015902060005020303
0208790076030202010300b8ffc040210c14370500150024009f00040000
080f0820083f08030f080103031303240303032f5d5d5d11332f5d2b1139
395d003f3f1239393130015d8710fd5dc08710fd5d08c059010123013301
0104cefe00d6fe00d4019c019c05d1fa2f05d1fb2c04d400>Tahoma AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/F 41 def
/I 44 def
/M 48 def
/T 55 def
/V 57 def
end
Tahoma /Encoding get
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 84 /T put
dup 86 /V put
pop
end
%ADOEndSubsetFont
reset_gvm
/WOKOVC+Tahoma /Tahoma findfont ct_VMDictPut
/WOKOVC+Tahoma*1 
[70{/.notdef}rp /F 2{/.notdef}rp /I 3{/.notdef}rp /M 6{/.notdef}rp /T 
/.notdef /V 169{/.notdef}rp]
WOKOVC+Tahoma nf
WOKOVC+Tahoma*1 [0 -10.02 -10.02 0 0 0 ]msf
270.72 21.1424 mo
(FFT)
[-5.21536 -5.15527 0 ]ysh
308.82 21.1424 mo
(VVM)
[-5.94287 -5.94287 0 ]ysh
347.34 21.1424 mo
(IFFT)
[-3.69839 -5.1813 -5.1813 0 ]ysh
294.96 132.322 mo
300.24 132.322 li
300.24 147.562 li
310.02 147.562 li
310.02 132.322 li
315.3 132.322 li
305.1 120.562 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.91765 .91765 .91765 colr
ef
0 lj
8 ml
294.96 132.322 mo
300.24 132.322 li
300.24 147.562 li
310.02 147.562 li
310.02 132.322 li
315.3 132.322 li
305.1 120.562 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0 gry
true set_gvm
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation, registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Regular) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 85 /U put
dup 89 /Y put
dup 117 /u put
dup 121 /y put
def
/UniqueID 44339 def
/FontBBox {-222 -250 1006 922} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 358 -210 -199] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [72] def
/StdVW [88] def
/StemSnapH [72 85] def
/StemSnapV [88 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/U <1C60D8A8C9B6079F4FB28F1C7CBABFC9980C14E13E3D7629F14B0298C560
B7BB256A11D8E30D9A19F244279E6ABE7725E0656F0229DCB9BBECBC86E6EFA6
FE29BCAAD7167DF4FF47> |-
/Y <1C60D8A8C9B64EDFF47852257C67A2775D6443361CCF714130370F447E53
43BEAB4A389415B66F95AFDCB42EF56298D07A9E77E504E0ED0B7C8A1C216C72
38D7B06E026279> |-
/u <1C60D8A8C9B7EF3211FDB400F617E7ECE548A197892E72A9234771BE08CC
6A8D56A742A5122BE141318E124044E0D30B7644714B00B3BB9E61860FF6B41C
B17A850FE04ABD34133958C1F083E2DB097DB78C54871A4F3A0E7E828AD0BBA0
152EE27D2C480103CEE5B367EED1D0AF3404> |-
/y <1C60D8A8C9B7A73DD541474E761A6B88B5FB25AF673FAAB86D3D3B06CF0F
DEE771E7EA11E3B595003274EC30647995D9CC896E925421106ABC2540062D11
122831B905F7CF0D35C6DDD15ED4FC285FE52F8A59E6608206A8D8E9596AB334
85224EC7B018F61788AC131ACEE93E23EC1A7B5FE7C3A8B53EAB567E> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/WOKOVD+ArialMT /ArialMT findfont ct_VMDictPut
/WOKOVD+ArialMT*1 
[85{/.notdef}rp /U 3{/.notdef}rp /Y 27{/.notdef}rp /u 3{/.notdef}rp /y 
134{/.notdef}rp]
WOKOVD+ArialMT nf
WOKOVD+ArialMT*1 [0 -9 -9 0 0 0 ]msf
247.02 56.7824 mo
(u)sh
287.76 56.7824 mo
(U)sh
327.241 56.7824 mo
(Y)sh
364.921 56.7824 mo
(y)sh
237.9 61.5824 mo
253.68 61.5824 li
253.68 62.0624 li
237.9 62.0624 li
cp
253.2 59.3024 mo
256.2 61.8224 li
253.2 64.3424 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
0 gry
WOKOVD+ArialMT*1 [0 -9 -9 0 0 0 ]msf
287.1 201.682 mo
(u)sh
327.78 201.682 mo
(y)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/WOKOVC+Tahoma*1 uf
/WOKOVC+Tahoma uf
/Tahoma uf
/WOKOUZ+SymbolMT*1 uf
/WOKOUZ+SymbolMT uf
/QJJAAA+SymbolMT uf
/WOKOVB+TimesNewRomanPSMT*1 uf
/WOKOVB+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
/WOKOVD+ArialMT*1 uf
/WOKOVD+ArialMT uf
/ArialMT uf
/WOKOVA+MonotypeCorsiva*1 uf
/WOKOVA+MonotypeCorsiva uf
/GFNBAA+MonotypeCorsiva uf
/WOKOUX+TimesNewRomanPS-ItalicMT*1 uf
/WOKOUX+TimesNewRomanPS-ItalicMT uf
/PBAAAA+TimesNewRomanPS-ItalicMT uf
/WOKOUY+TimesNewRomanPS-ItalicMT*1 uf
/WOKOUY+TimesNewRomanPS-ItalicMT uf
/HIBBAA+TimesNewRomanPS-ItalicMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
