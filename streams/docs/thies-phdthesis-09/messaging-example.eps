%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Acr1D4C.tmp.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 8/31/2008, 3:52:05 AM
%%BoundingBox: 0 0 612 792
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 3986 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:ModifyDate="2008-08-31T03:51:49-04:00"
   xap:CreateDate="2008-08-31T03:51:34-04:00"
   xap:MetadataDate="2008-08-31T03:51:49-04:00"
   xap:CreatorTool="dvips(k) 5.96 Copyright 2007 Radical Eye Software"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:463bab9f-d033-4c3e-a66d-8f18f0a4768a"
   xapMM:InstanceID="uuid:1aa43f6d-51ce-48a6-a2a7-36d4369adf10"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">main.dvi</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
true set_gvm
%ADOBeginSubsetFont: SFUBAA+LucidaConsole Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SFUBAA+LucidaConsole def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (LucidaConsole) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 59 /semicolon put
dup 60 /less put
dup 61 /equal put
dup 62 /greater put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 87 /W put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
dup 123 /braceleft put
dup 125 /braceright put
def
/FontBBox {0 -205 598 783} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 -0 600 650] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
59 dict dup begin
/space <1C60D8A8C9B7C054E0> |-
/parenleft <1C60D8A8C9B7C05416262603BDD8B3FCB7B7C723155FC10398AB
A2AD2A5046B408FC96C91D8FAE686881A00A1C15E1175B6ECF7DADA6B52A4270
E0243259B171BBC548B5E9B5D3048B7C7E65C5AC> |-
/parenright <1C60D8A8C9B7C0543A724C0EDA57702E5B05BADD166A77A4E11
A911123450407EC49206C68B97B314EDC56AABC7D56553BA421C355B62D13B38
FA87125F95ECA2C736DF5050362ACFA7F37826C4B> |-
/asterisk <1C60D8A8C9B7C0541910D45C9D511B12BECB726AB708B42A5B961
C99DF7AE21E511A5C6269EC9A17369D59753F2EA356A33B846533F51D20ADF69
1804BFCAB856A9EEADA07C67B3945D49EBFEA2D6834F33D19C49C28F44F0EAFC
01CE83CBDCA6752B39CF761FAA476277DEAB922269A4F03673DB010DB7D02DF5
E5D8B33172813727FED45623F81282F7BDD06> |-
/plus <1C60D8A8C9B7C054190B356C2B5802BB965AF88802FE7CA650E5E2810
F5CE8C435D588154F47EA1676F52AC46E> |-
/comma <1C60D8A8C9B7C054168A7893365FF73E455D0A0AF05FF391CD3EFE6F
1F8200A6A75CE9AB2AF00255350E8308CFEF48> |-
/hyphen <1C60D8A8C9B7C054160BA30533A360D4ED23BEA0E240C1905C> |-
/period <1C60D8A8C9B7C0541689F8D5204230525FCFC80DF5ECBBFCDE> |-
/zero <1C60D8A8C9B7C05416F5E433487D0003709952516ED0654753BB62F7E
5883F690DDCBD61858B0885841A40183A32BC3D725757027BE65FFFDDD5243D1
DC9DDB6F6A683D1371C84473368FD4D67267FA806BEA7A04ECAB8AA6E37466F2
30FAA4049554D635E679AF77849> |-
/one <1C60D8A8C9B7C0541653753DA50C7EDA20D154471149053A21C0AF05A3
DC6F9E63097FFD07D40A0518B945> |-
/two <1C60D8A8C9B7C0541603F75F7A17A1912B3E4A1DB4011F1511D274CDF7
1AFBE54D5B09EEF39C2BFFA9F2392680D4BF2B053DB281034223F55BCA3A7C84
DB187C7D1942A6235B1205344B3B3C53ACA7F4BD7536FE67566DAE83DEEB77FE
D47892581534E66EC24EAAB6E7F8C6> |-
/three <1C60D8A8C9B7C0541975E4B2AC31789201503A0A080C02542AD3F4B3
C508D128441B7E56B289A25AA8C9BA7E8EEA0F4848B56B44524AFBB946FC17B1
42E9976D95D5DEF3058305A84B161E9F6CF95E64A81E99C18871CCB29A944467
768D4A7B6E4DD218C60AAE3FAC08E2932CAF89894DDFE1C708EC580F023F10E4
C29B3E3A2D7701C115858E136345C8F3E876538A6DFAC69D19729B51833130D0
43156980> |-
/four <1C60D8A8C9B7C05416D2DD93868D3CC02B2C9716B60F4DA18862EE762
53E4EB0C1A3A7398FAF2EFD6C8E8B96171EF2DC238F974554DCD49C1410> |-
/five <1C60D8A8C9B7C05419711A49C96F210F66B85FC5DE1B5845DFAC61468
0FA26D6481E358783E5312D88696F1399F96A2210F80EB61C7DBBDE6711539E8
36855295C5A4A29F2DF0CA3DF7ACFBAE23E2F91BA084B751D47368936D16EC17
69C9EE5BBA5BF4607CF8815A8> |-
/six <1C60D8A8C9B7C05419136E1C0854B834A383058DD2028368A4E16C5692
82B226DEC25D2E26ADF75F461ACC6F823574082D95C948A9E6CCDA9A4D1E69A6
E2A57F6F6223CAD1AEF06048939D0063143ED599F9E23B7011A586FCD817CA66
1BE3847E4EC9E37A62BD4E8B43987F81173D371807C98489B1A6B4B1021D4B4B
777B4AC9BCEEB839702C0B5E6F05A5DFAEC9BEE074E2374B09CD25B87DB5CCE4
55C604DF29FF36ADD0C72F7CE44DCD8F46> |-
/seven <1C60D8A8C9B7C05419616AAB756CDA2F92C6C0EC4263906DD2A30CFD
A62DEEE54A32CC2E6223E50B270C6F5279FF130F362FBB63F40CED78C29549D8> |-
/eight <1C60D8A8C9B7C05437E83A1866EFA93CFBDE3C3DF64701F41DD7EA0B
1B1CD7BFE5BF5DE86C2EFAC1E4A48519A7393FB031648540EA5B615B8CF3D167
891CC5DBDCF5CDE5138E5C4B87D1998E82F3E18F269191D5874849BAD6407126
19ACB4EDF0B928A13909038DBCEC158F7C9973500682AA9BCB3C0A6D17A79E64
E8EC7EC91EE665E01B660440E7A0F002CDDABE2FAA03C42E3D22C83DC29F1FAD
057CD69EB71051B6B0CD9441697BB0A914CE50501A38E74636643EB5A57249BE
A24145A6F804ABF8AC9547532F62BDEB3C0C775A> |-
/nine <1C60D8A8C9B7C0541977408B76485B668EAC188FB83D4D4BD13019A65
0A32BD8A993EF718C6F0B0278964B596727B4CFA50C8370132F79E9E0E11ACA2
6042F75804E427198A114FAD2B1FE68E50E6A19443EA96C1AFF455DDF0C3A2CD
98D799FF2254D3957DCCC1E9501B2D4C1479DCDB08EBF79A3E2F2F528EE2517B
A35BDD3F713FDC166D49AA7ACF31BA1D91F2AC02AB4E6E0E8941DBAFB73E1060
44FBF6B3D2717334142E790A1E1F8BEA6> |-
/semicolon <1C60D8A8C9B7C05416892A13B58A839E37B29424ED749FF59343
E15F9495943C844B8C4EB1FE14677AB375AD33E4EFC89B51D36CE5FFD617E16C
BA> |-
/less <1C60D8A8C9B7C05416463B475AA8D4E3EE28355A470DAE72E49D04186
6790113FF212E99CC97> |-
/equal <1C60D8A8C9B7C054164610B98BB77DE0D76504DF9E321915DFDA6D93
1882A6932AEDFFA5E0AE54> |-
/greater <1C60D8A8C9B7C0545BDFAC00E6EE52910DEBD167DC830356CC1C50
89256D1198CC03D447A4D5> |-
/C <1C60D8A8C9B7C054164B01844BCA41CE8904D619A5EA4C2FE91C8CA1D73E
6A9E6B9434D05B03A4D4E3652339AB88ABB18507A17544B725F3EDF8463C9956
9A9E9716DFCED1787D7330FEF46761A36D6F1A92C2588099E361E56F9A76D297
5969972488721D55> |-
/D <1C60D8A8C9B7C0541998C3F70864D240952084B607117EE621B209586944
ACE1AE39E7E8FB3198F6A858CA7A3F4E6CB0E9B1C7FC5AE7B543EEE432C2FD21
7CD983A106DF79EDB828DAD18A3A71A3F3929416C16596FC5CC90DEE> |-
/F <1C60D8A8C9B7C0541983F0319B06E337056B65330C3DE6105EE10976DADE
D536FCD6C9570E17121D> |-
/I <1C60D8A8C9B7C054161B2DCB6AD75B05FA557374E892AEE298A7E749BF3B
23E7851D573E3F3EFC146FA33F2B07> |-
/M <1C60D8A8C9B7C05419EBD5434B95D512812DC1C3F1861A1A954C316EF2F7
247ADCB983D5D57854A320DC9D4868C0602B818AC8220F4291596D7B283EC408
3D15> |-
/N <1C60D8A8C9B7C05419C509A94502EBBA40F8860B5F29C2B700C7AE185565
DD3C78A6EA5002FE451AB5CC8FEA449D26> |-
/P <1C60D8A8C9B7C054198DE141BCABE6F724405ABCB40881364D0DC76F92F9
F94230219EF3740988448252FF069D891FBFBC00AA2255BE35AFD324A16AA39D
1AF8CB7965B1FEAE30B036F7320D8810979F8F4EEF2780> |-
/R <1C60D8A8C9B7C05419A05FAF91F46F42F20A75B02D42D88FD3DFC30435DE
85CD646B9BE9F06E9F0CCE22F02C28279987F48A2CD8936662D7617E90571FD9
DE2D681F1CEFCAF1BC93A3289F5E3A5537F70367800990CF712F987C93C21EE9
E5F5CB9A5E486F3CF6F67D3EE3> |-
/S <1C60D8A8C9B7C054192D77433DE9D63F1BB3D638AFECF767B141B50DA61F
F81AC261EF4B8AE5E9DC3A680A9B59E1A3CFB2E9108404B2AC4A7674D81A9483
BFA886D848672CF66BBBFC12F4CA2BF129E1106BFF8C74E9CC6819521CE87D98
F485147DFF478AB2DF6E7098F3A3F072B54F36CF5CAECD344C7992905BB7EDC9
4484C5BA8EC3939A053D3E2EA0D97C93982FA64B77E827E4416C7779> |-
/W <1C60D8A8C9B7C054198736D62B1C36049C0123624170D0D3EBCF06B3DDD6
6F24828520D5DD122FB859FB7C2DFBF40940A54BCE2A6333CAF09EBE2834A14A> |-
/bracketleft <1C60D8A8C9B7C0541619652E3770904C2A4467A46624EAA6DF
201DD531AFD0BBF007DBDCF8> |-
/bracketright <1C60D8A8C9B7C05431B03E01CADEA7AB330DEE3A2A62A49DB
A89CC6BB5DD03790211A5F7> |-
/a <1C60D8A8C9B7C05416086BB45A20059A3236442DBD87F58E4BBED5DB26E8
43D2EB6D06675152124BF05159C6BA7A8D24AEEC52D02B62F6DD2AFB627803BD
EC5F6ECD3E82353E31BE794529223454D771636798766A23125792FE25B8E4B0
941254CCE2E7427AA3430D7DB399CDD048CB4BBDB7FB0AE5C075F1CAD1C21A57
1A8CE5212085FFA572257444DB3E534A20B39878706821F2E8CA9AE0E5AE4F5C
521F781A4A5DE1D57082B45DF776C9913326EAE0A0A4> |-
/b <1C60D8A8C9B7C05419DEC2879089D461B39077089C668E9FE1DB07DB604D
8317C6874EC86652CBFD099F710F3F542868962F1C922E5EE44372EBC2108515
A4F7114FE0108F6C4F0F72A9939F31F46DB37F2F6F6BB5EC80B9A1C339110712
7EEB015335B47685F616F61904C4F049F615> |-
/c <1C60D8A8C9B7C054162C187FD3006EBE7DB602A0460036FD00F403806B52
9CE80FFCE1126CF3B3F3B1916945374D4C64E143D771477544E5C1A90EEFB6A7
9254FE61B0F0F2011B306C7C59018AA8E2C7A5A95E8CB57505EA97D4A67CE1E4
12509B57018426B280> |-
/d <1C60D8A8C9B7C0541621045EADB2516E427E55E44AE3BBFC8D405D68189F
89D2464D502EDF5E9748E80276FB6E5792F450ED8EC53C271BBA8353D4310AC2
6AF7F696A14D62099E0FA9045C65B539FD2D171A57E0EA1A864B2D43A1867E84
FA8EC24C1D9E0C25E0B1F6A40A4BF916> |-
/e <1C60D8A8C9B7C054162FB77A557B2EA2914AA003E9BF74EDFDB09F2F2434
4A93B73F78C6F4B48E22A39CACF16AC2E303AC96A2A355BB4ECE6E3CBF57E89B
72F8272CC14325132E52A68CF30642F298ACDE791DEE2C870278E716C2E31C34
DEEECBE09C3A942D8A1A6E56CA3B1522C572244EFC91E9> |-
/f <1C60D8A8C9B7C054192368CD5180CF10DC810EAE082DAAB053BBCC34EC3A
284C9194C9CFA8D711EAAB18F92DE5F5D458CE08C14934CE052C1F5E0137C44E
376C01A17B3386C57B28299D45B869C61C0AE700600C81> |-
/g <1C60D8A8C9B7C054194B442F77D01243735F465A05DF0D3CC0FA57BCBD9C
C81D1EE7E79CD91102874C62ACDEB4A28F11FB31E89205C73FA162A1869CF5E5
64083AD7859CE0B7899724F0D567A2E256A8182D060D3A91948C4D34D54D4DB5
704C7122899F25DF5B83566BF566979983CAD8002AEEE561B2FAB789995C34C9
71CEDD5B756721D0639A9385B8A6EA74C6EE0300F05216BACFB15A4405C60BFE
9365BCC55152024F> |-
/h <1C60D8A8C9B7C05419A3A2D9E8D7F43FC44F12F0865875F4DDAD04F2B59B
EE93FB24BDFF1E55AF2A73C68887FB42D6F9A6B1D2B72786B24C6E580F1C143F
1C51E975C7B192920AD3995F> |-
/i <1C60D8A8C9B7C054168AAA2FFD5EA4892897CA366344B84D63D103E59991
C8BD929319D811EDC622907E6A883F25> |-
/k <1C60D8A8C9B7C05419B2DA952E8D483BF571A3256469968156BFD2153140
AD8FC47EDC3F8598F84A7883E9C6A73D98C126B41A> |-
/l <1C60D8A8C9B7C05416967F91DE3EDC1E7E39A7C6F080934702E63C600C> |-
/m <1C60D8A8C9B7C05419FBBCCE5C25C53AD8FE5E0EA001BED33EE34DC3408D
38E9F5F334264E061D540B31E80A8410671AC79341D699DE689FFB1FE3CF392B
7991897D4BC3FB8EC48F9D8F21805C637B306BAE557F900C7878DB232FE856D4
3EE69101B1EBEB1B82ADB62B8D4CFFBA564097A2AACA20599698202DED941DB5
6AF04F07CA38> |-
/n <1C60D8A8C9B7C05419A3A2D9E8D7F43FC44F12F0865875F4DDAD04F2B59B
EE93FB24BDFF1E55AF2A73C68887FB42D6F9A6B1D2B72786B24C6E59DD6A438C
EC5E13E659A56E> |-
/o <1C60D8A8C9B7C05416FB1328D64910F429255C4FFA7A06085110D091AE7D
60DD9ADF09F13FA476BCCD5755AC5AC8FAE03032CDB1C63AF2BC3ABB53ED9C19
437649C278E88E3565CEFDC2AF86F76910980B611773DB28642DC77620186C84
312EB7655E9199077B41B10234C97D2E6C94267CAF46154F40520729B89FCB71
7E40EA6449> |-
/p <1C60D8A8C9B7C05419A5AA83EE5C5976F567007E81731CAAF2E6A88975A5
C191CC86A748B127353314B954A559B3A5E1213A4C8C3453690429686B803AE5
E74196A2672EF251F47A93A4DB12B7AB1B7A2C92199DABC5BF11566D578091D9
792D21ACD13A327737BC2E8CBD6170D82A6F> |-
/r <1C60D8A8C9B7C0541964F1155C2D8A21DD6F74B4C4BDED1CBDC154147B60
E1CFDCECC963F61A97AC9812A5C49806203D262D22A0864A576BF30A3B8DA214
761F3CD5AC6E73> |-
/s <1C60D8A8C9B7C054195C0B8CD717A0383AA749FA42BD980EA8118672C49C
A6406C1395A4B9D64436F91ECD3BB605D1E8E0D9E903A443677051B89B31862A
20E7DFC164ACB306A2AEBBC0837436E35199F874D1F8FB611BE2BD0055F4D5B8
E045619CFDAAA1CD8B875DB0D1052C82E77FBDCF377EDA7620408EDA53FE7418
0374B857309C044762F9996257A0C8195737BBD5> |-
/t <1C60D8A8C9B7C054162D6A3134A64AE171592608E948FB8115916AB59DFD
C0B6E870BB8FFFAF6CB13A002F08480D364733454F753EE68DA8685FE4A83F23
5544ABA97AFAA6F35855706490756AE301E944A15330ECA32ADBB31FC8A517E6
6343C350DA929D> |-
/u <1C60D8A8C9B7C05416B59138AE86B8751E3C07326BF1EC44A8618849C5B2
7EEF61CFAE47CEBE6B6E3AD82BDEAFCFB81C2360F3A1848D7061D94E56A73A11
F0735836CD575B> |-
/v <1C60D8A8C9B7C05419010528463091A7989BA5918D16726CDF77E19AAE11
19F136C82AF7B90FB2> |-
/w <1C60D8A8C9B7C05419B52E72BE1EC3BE0284E479681459A61A5EEBA1F72F
44FFB0247BA595A648A4772050422D0714AF0C11634841667A5B01258D09CA9D> |-
/y <1C60D8A8C9B7C05419EC6A5BE37D81CE6CD5E56E75A5F34311E514316722
2BB106F985B19BFFE8A42B3F6ED185F3C5A53B86910594CC594BEF32338D9620
9951D961313EDCFF30B2A6A271CBEB> |-
/braceleft <1C60D8A8C9B7C05416D0D7CE5BF1E04C757412341449EE2BAE26
8FD42B942DE0BBB25617097C61FB678933DBF835F4BE34274ACBDCF5B6A756F4
4B82561F8047419C069ABED6472F89AE46F74E656D33C1B939D0ABE4A3CA5DE2
F5E0F42625B1A8FE272C360FCDC2117D6C110A2D28B99ADB2B83EA3A49E8D9B1
D59F1963CCFB9848084CC3DA07741100EEC8E7AB10AB758D90F28FCE9CCDBD76
3C5EFDE2B740EF349C7C4CBBEA6A2D76517FF3FA> |-
/braceright <1C60D8A8C9B7C05419DEBC9E35A0EE0289B496D97496F258A76
2506C370BE840B2C66ED9D6754687269AC2A216DC9661177D86123DCB600A7AD
61150067ECFF543FD7276F15EA2730A81B01A8F558020719EF90F890036B345E
B33FD3329072A6A49CF6EAC49F468C594EC2F5600D6843EBC73E6FFA844446A4
AFD14374476A36FA8325220CA8155B39EE0A8FA20ED79BA871C95A26C2752C60
C217C92617EB88C5D7EE48DFD1FA5DC8C6CCA191B> |-
/.notdef <1C60D8A8C9B7C05416F1DCB0F0AF29A8BCF3EFE4103D9CF61F6411
885EBC0652D722E05DCEDB39FDDEB31BCBB0> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/AMHIUE+LucidaConsole /SFUBAA+LucidaConsole findfont ct_VMDictPut
/AMHIUE+LucidaConsole*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /plus /comma 
/hyphen /period /.notdef /zero /one /two /three /four 
/five /six /seven /eight /nine /.notdef /semicolon /less 
/equal /greater 4{/.notdef}rp /C /D /.notdef /F 2{/.notdef}rp 
/I 3{/.notdef}rp /M /N /.notdef /P /.notdef /R 
/S 3{/.notdef}rp /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u /v /w /.notdef 
/y /.notdef /braceleft /.notdef /braceright 130{/.notdef}rp]
AMHIUE+LucidaConsole nf
AMHIUE+LucidaConsole*1 [5.4 0 0 -5.4 0 0 ]msf
53.76 143.611 mo
( 1  struct Packet {)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 0 ]xsh
53.76 150.136 mo
( 2    float sum;)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 0 ]xsh
53.76 156.661 mo
( 3    float val;)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 0 ]xsh
53.76 163.186 mo
( 4  })
[3.25618 3.25618 3.25618 3.25618 0 ]xsh
53.76 169.71 mo
( 5)
[3.25618 0 ]xsh
53.76 176.235 mo
( 6  void->void pipeline FIR {)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 3.2562 3.25618 3.25618 0 ]xsh
53.76 182.76 mo
( 7    int N = 64;)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 0 ]xsh
53.76 189.285 mo
( 8)
[3.25618 0 ]xsh
53.76 195.81 mo
( 9    add Source\(N\);)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 0 ]xsh
53.76 202.335 mo
(10    for \(int i=0; i<N; i++\))
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 3.2562 3.25618 3.25618 0 ]xsh
53.76 208.859 mo
(11      add Multiply\(i\);)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 0 
]xsh
53.76 215.384 mo
(12    add Printer\(\);)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 0 ]xsh
53.76 221.909 mo
(13  })
[3.25618 3.25618 3.25618 3.25618 0 ]xsh
53.76 228.434 mo
(14)
[3.25618 0 ]xsh
53.76 234.959 mo
(15  void->Packet filter Source\(int N\) {)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 
3.25618 3.25618 0 ]xsh
53.76 241.484 mo
(16    work push 1 {)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 0 ]xsh
53.76 248.008 mo
(17      Packet p;)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 0 ]xsh
53.76 254.533 mo
(18      p.sum = 0;)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 0 ]xsh
53.76 261.058 mo
(19      p.val = readNewData\(\);)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 3.2562 3.25618 3.25618 3.25618 0 ]xsh
53.76 267.583 mo
(20      push\(p\);)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 0 ]xsh
53.76 274.108 mo
(21    })
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 0 ]xsh
53.76 280.633 mo
(22  })
[3.25618 3.25618 3.25618 3.25618 0 ]xsh
53.76 287.157 mo
(23)
[3.25618 0 ]xsh
53.76 293.682 mo
(24  Packet->Packet filter Multiply\(int i,)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 
3.25618 3.25618 3.25618 3.25618 0 ]xsh
53.76 300.207 mo
(25                                 int N\) {)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 
3.25618 3.25618 3.25618 3.25618 3.25618 3.2562 0 ]xsh
53.76 306.732 mo
(26    float W = initWeight\(i, N\);)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 0 ]xsh
53.76 313.257 mo
(27    Packet last;)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 0 ]xsh
53.76 319.782 mo
(28)
[3.25618 0 ]xsh
53.76 326.306 mo
(29    work pop 1 push 1 {)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
0 ]xsh
53.76 332.831 mo
(30      Packet in = pop\(\);)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 0 ]xsh
53.76 339.356 mo
(31      last.sum = in.sum + last.val * W;)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 
3.25618 3.25618 3.25618 3.25618 0 ]xsh
53.76 345.881 mo
(32      push\(last\);)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 0 ]xsh
53.76 352.406 mo
(33      last = in;)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 0 ]xsh
53.76 358.93 mo
(34    })
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 0 ]xsh
53.76 365.455 mo
(35  } )
[3.25618 3.25618 3.25618 3.25618 3.25618 0 ]xsh
53.76 371.98 mo
(36)
[3.25618 0 ]xsh
53.76 378.505 mo
(37  Packet->void filter Printer {)
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 0 ]xsh
53.76 385.03 mo
(38    work pop 1 { print\(pop\(\).sum\); })
[3.25618 3.25618 3.25618 3.25618 3.25618 3.25619 3.25618 3.25619 3.25618 3.25618 3.25619 3.25619 
3.25618 3.25618 3.25618 3.25619 3.25619 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 
3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 
3.25618 0 ]xsh
53.76 391.554 mo
(39  })
[3.25618 3.25618 3.25618 3.25618 0 ]xsh
206.28 58.7373 mo
( 1   struct Packet<N> {)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 0 ]xsh
206.28 65.2621 mo
( 2 *   boolean newWeights;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 0 ]xsh
206.28 71.787 mo
( 3 *   float[N] weights;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 0 
]xsh
206.28 78.3118 mo
( 4     float sum;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.22757 
3.25618 3.25618 3.25618 3.2562 0 ]xsh
206.28 84.8367 mo
( 5     float val;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 0 ]xsh
206.28 91.3615 mo
( 6   })
[3.25618 3.25618 3.2562 3.25618 3.25618 0 ]xsh
206.28 97.8864 mo
( 7)
[3.25618 0 ]xsh
206.28 104.411 mo
( 8   void->void pipeline FIR {)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 0 ]xsh
206.28 110.936 mo
( 9     int N = 64;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 0 ]xsh
206.28 117.461 mo
(10)
[3.25618 0 ]xsh
206.28 123.986 mo
(11     add Source\(N\);)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 0 ]xsh
206.28 130.511 mo
(12     for \(int i=0; i<N; i++\))
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 0 ]xsh
206.28 137.035 mo
(13       add Multiply\(i, N\);)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 0 ]xsh
206.28 143.56 mo
(14     add Printer\(\);)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 0 ]xsh
206.28 150.085 mo
(15   })
[3.25618 3.25618 3.2562 3.25618 3.25618 0 ]xsh
206.28 156.61 mo
(16)
[3.25618 0 ]xsh
206.28 163.135 mo
(17   void->Packet<N> filter Source\(int N\) {)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 
3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 0 ]xsh
206.28 169.66 mo
(18     work push 1 {)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 0 ]xsh
206.28 176.184 mo
(19       Packet p;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 0 ]xsh
206.28 182.709 mo
(20       p.sum = 0;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 0 ]xsh
206.28 189.234 mo
(21       p.val = readNewData\(\);)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 0 ]xsh
206.28 195.759 mo
(22)
[3.25618 0 ]xsh
206.28 202.284 mo
(23 *     if \(newConditions\(\)\) {)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 0 ]xsh
206.28 208.809 mo
(24 *       p.newWeights = true;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 0 ]xsh
206.28 215.333 mo
(25 *       p.weights = calcWeights\(\);)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.20218 3.2562 
3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 
0 ]xsh
206.28 221.858 mo
(26 *     } else {)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 0 ]xsh
206.28 228.383 mo
(27 *       p.newWeights = false;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 0 ]xsh
206.28 234.908 mo
(28 *     })
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 0 ]xsh
206.28 241.433 mo
(29)
[3.25618 0 ]xsh
206.28 247.958 mo
(30       push\(p\);)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 0 ]xsh
206.28 254.483 mo
(31     })
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 0 ]xsh
206.28 261.007 mo
(32   })
[3.25618 3.25618 3.2562 3.25618 3.25618 0 ]xsh
206.28 267.532 mo
(33)
[3.25618 0 ]xsh
206.28 274.057 mo
(34   Packet<N>-> )
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 0 ]xsh
206.28 280.582 mo
(35   Packet<N> filter Multiply\(int i, int N\) {)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 
3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 3.25616 0 ]xsh
206.28 287.107 mo
(36     float W = initWeight\(i, N\);)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 0 ]xsh
206.28 293.632 mo
(37     Packet<N> last;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 0 ]xsh
206.28 300.156 mo
(38)
[3.25618 0 ]xsh
206.28 306.681 mo
(39     work pop 1 push 1 {)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 0 ]xsh
206.28 313.206 mo
(40       Packet<N> in = pop\(\);)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 0 ]xsh
206.28 319.731 mo
(41 *     if \(in.newWeights\) {)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 0 ]xsh
206.28 326.256 mo
(42 *       W = in.weights[i];)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 0 ]xsh
206.28 332.78 mo
(43 *     })
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 0 ]xsh
206.28 339.305 mo
(44       last.sum = in.sum + last.val * W;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 
3.25616 3.2562 3.25616 3.2562 3.2562 0 ]xsh
206.28 345.83 mo
(45       push\(last\);)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 0 ]xsh
206.28 352.355 mo
(46       last = in;)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 0 ]xsh
206.28 358.88 mo
(47     })
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 0 ]xsh
206.28 365.404 mo
(48   })
[3.25618 3.25618 3.2562 3.25618 3.25618 0 ]xsh
206.28 371.929 mo
(49)
[3.25618 0 ]xsh
206.28 378.454 mo
(50   Packet<N>->void filter Printer {)
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 
0 ]xsh
206.28 384.979 mo
(51     work pop 1 { print\(pop\(\).sum\); })
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 
3.2562 3.25618 3.25618 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 
3.25616 3.2562 3.25616 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 3.2562 3.25616 3.2562 
3.25616 3.2562 0 ]xsh
206.28 391.504 mo
(52   }  )
[3.25618 3.25618 3.2562 3.25618 3.25618 3.25618 3.25618 0 ]xsh
AMHIUE+LucidaConsole*1 [5.3984 0 0 -5.3984 0 0 ]msf
371.64 91.4998 mo
( 1   struct Packet {)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 98.0227 mo
( 2     float sum;)
[3.25522 3.25143 3.25522 3.25522 3.25522 3.25522 3.25522 3.25143 3.25143 3.25143 3.25146 3.25143 
3.25522 3.25143 3.25143 3.25143 0 ]xsh
371.64 104.546 mo
( 3     float val;)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 111.068 mo
( 4   })
[3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 117.591 mo
( 5   )
[3.25522 3.25467 3.25522 3.25522 0 ]xsh
371.64 124.114 mo
( 6   void->void pipeline FIR {)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 0 ]xsh
371.64 130.637 mo
( 7     int N = 64;)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 137.16 mo
( 8 *   portal<Multiply> teleport;)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 0 ]xsh
371.64 143.683 mo
( 9   )
[3.25522 3.25467 3.25522 3.25522 0 ]xsh
371.64 150.206 mo
(10 *   add Source\(N, teleport\);)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 0 ]xsh
371.64 156.729 mo
(11     for \(int i=0; i<N; i++\))
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 0 ]xsh
371.64 163.252 mo
(12 *     add Multiply\(i, N\) to teleport;)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25522 
3.25522 3.25522 3.25522 0 ]xsh
371.64 169.774 mo
(13     add Printer\(\);)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 176.297 mo
(14   })
[3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 182.82 mo
(15   )
[3.25467 3.2547 3.25522 3.25522 0 ]xsh
371.64 189.343 mo
(16   void->Packet filter)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 0 
]xsh
371.64 195.866 mo
(17   Source\(int N, portal<Multiply> teleport\) {)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25522 
3.25522 3.25522 3.25522 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25519 0 ]xsh
371.64 202.389 mo
(18     work push 1 {)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 208.912 mo
(19       Packet p;)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 215.435 mo
(20       p.sum = 0;)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 221.958 mo
(21       p.val = readNewData\(\);)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 0 ]xsh
371.64 228.48 mo
(22       push\(p\);)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 235.003 mo
(23   )
[3.25467 3.2547 3.25522 3.25522 0 ]xsh
371.64 241.526 mo
(24 *     if \(newConditions\(\)\))
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.19528 3.25522 0 ]xsh
371.64 248.049 mo
(25 *       teleport.setWeights\(calcWeights\(\)\);)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25522 
3.25522 3.25522 3.25522 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 0 ]xsh
371.64 254.572 mo
(26 *   })
[3.25467 3.2547 3.25522 3.25467 3.25522 3.25522 3.25522 0 ]xsh
371.64 261.095 mo
(27   })
[3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 267.618 mo
(28   )
[3.25467 3.2547 3.25522 3.25522 0 ]xsh
371.64 274.141 mo
(29   Packet->Packet filter Multiply\(int i, int N\) {)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25522 
3.25522 3.25522 3.25522 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25519 3.25525 3.25525 
3.25519 3.25519 0 ]xsh
371.64 280.664 mo
(30     float W = initWeight\(i, N\);)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 0 ]xsh
371.64 287.186 mo
(31     Packet last;)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 293.709 mo
(32   )
[3.25467 3.2547 3.25522 3.25522 0 ]xsh
371.64 300.232 mo
(33     work pop 1 push 1 {)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 0 ]xsh
371.64 306.755 mo
(34       Packet in = pop\(\);)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 0 ]xsh
371.64 313.278 mo
(35       last.sum = in.sum + last.val * W;)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25522 
3.25522 3.25522 3.25522 3.25525 3.25519 0 ]xsh
371.64 319.801 mo
(36       push\(last\);)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 326.324 mo
(37       last = in;)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 332.847 mo
(38     })
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 339.37 mo
(39   )
[3.25467 3.2547 3.25522 3.25522 0 ]xsh
371.64 345.892 mo
(40 *   handler setWeights\(float[N] weights\) {)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25522 
3.25522 3.25522 3.25522 3.25525 3.25519 3.25525 3.25519 3.25525 0 ]xsh
371.64 352.415 mo
(41 *     W = weights[i])
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 358.938 mo
(42 *   })
[3.25467 3.2547 3.25522 3.25467 3.25522 3.25522 3.25522 0 ]xsh
371.64 365.461 mo
(43   })
[3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
371.64 371.984 mo
(44   )
[3.25467 3.2547 3.25522 3.25522 0 ]xsh
371.64 378.507 mo
(45   Packet->void filter Printer {)
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 0 ]xsh
371.64 385.03 mo
(46     work pop 1 { print\(pop\(\).sum\); })
[3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 
3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25522 3.25519 3.25525 
3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25525 3.25519 3.25522 
3.25522 3.25522 0 ]xsh
371.64 391.553 mo
(47   })
[3.25522 3.25522 3.25522 3.25522 3.25522 0 ]xsh
/1 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: GGGBAA+CMBX9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GGGBAA+CMBX9 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (CMBX9) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 45 /hyphen put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 58 /colon put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
def
/FontBBox {-58 -250 1195 750} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 -0 686 698 444 453 656 676] def
/OtherBlues [-201 -194] def
/BlueScale 0.04379 def
/StdHW [49] def
/StdVW [117] def
/StemSnapH [40 49] def
/StemSnapV [117 145] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
31 dict dup begin
/fi <1C60D8A8C9B08A950515D3E7C54D951207C4E0BE11570CD1C3E78567D80
43C6AD9ED7D8937D3875D3C71E8DCB910E75DEEE5B9D9EA5423BB462E7DACE9A
98E8F8D77714E35646800DBBFE6AB6C059D2229A46CDDC4E55BBBEC6BCB55A28
84C0DC0636CA461F41A76A38A8CC65D3CC82380A80F08D2F6806B0B746D769CA
EF49117029ABC79F973EE02D8077423A50EF6F54CFCB1D557F63638CB512B3EA
80134BB3754F8A7CE203A13> |-
/hyphen <1C60D8A8C9B08A9586D4F7B21AA9C783E7CCF52C67550805A581933
DCF0799EEB323F8E8> |-
/period <1C60D8A8C9B08A95104D8565ABCACF8311E6F5F471E105A414DD2F8
37EC1CC406067999CC061B309089840B84988B108> |-
/one <1C60D8A8C9B08A95FB066076D5BF1527DE3E613594B6374299A6A01C6C
7ED8588753F16E033A417D961D9EC1DEA70F4986112691F8B19B4CF8500970DF
E83B051C607A206F5F894B8386951F73F763F5B676875F964B1458BF47CF0C53
D255795436> |-
/two <1C60D8A8C9B08A95FB066076D5BF156C9657125643D15EA36861619CAC
C9BBD7AC0FCCBEEA80BD08E4D0AB6EA96A08C4BB2120A75E60F35951A553F7EF
7B46F38D245A5D3FF72F1D2AEE8FD4471A473893541A2560FF3AD2C1D1E7F56F
ACE0B66D35616E4D95A4792E88FAD850ABDDF28D24B52FA3CA517937DA48ACD7
49C77910E5089F5305D867629B948ABDDC> |-
/three <1C60D8A8C9B08A95FB066076D5BFE1A21860CB01AE8E4059405A0B9E
8ECF4A673555B9099FD692D8CBD4ADB4FC490B4632509D5FF9807D1FAE26983C
B9783FD5E4704609A731E98866F61DDE837B4016CE1C7318ECCC096849177955
2066090B59224F6A43C82B448D61999DD0CA242CE561A3C8A7946C3570332BC4
A4D077473ECBB1F453A31472E22B500F25301EEF5C7D2B6D3BD3146E0C959B3A
D99B7FB6CD59F7E9C4A84F561768F6D99B36572F6167D1> |-
/colon <1C60D8A8C9B08A95104D8565ABCACF8311E6E333325994781F24C9DD
919E640EE850DD43CB0393517A00E0D9E1649BE4B629DF9E1735B180E8630788
1C4A37636B96D19D9E812BF182A1CF10B6FE> |-
/F <1C60D8A8C9B08A946C50526646F9C5DFA7B47CF64B01DC5A890E71DCEC23
C8E0BC092B42F9E5347072312E3E7DC31E89398E4F21D345AD2E6308C184D1B7
FDC3FFDCD69241F1D1C43BAB75111047623A0F42F7446F459D40C4B41B590DE6
B4EADC5EB35B0CDA124E80E5BCA775400F0ECC2CA07426938E> |-
/I <1C60D8A8C9B08A95B26E8C6CCD26ADBE7410F2C385C2F9C4CE440C57D6B9
B52C6E163B381E1209F6DD124AEB48D5EF5B5232D4DCDEBAFD73136B4B47B94D
4B74C21021BE86569FAFB00E0A797262AA09D19B0369E0D4F23A> |-
/M <1C60D8A8C9B08A94F80DC7871E94DC71D423FAF1E5D408698CDC66B4A474
41895C98343ABC41443D43AFC56450C365CD82EFD7C6119472CEFDF6DB7F85C6
3EBA61518416A0A24D4945566D25F87E33172F323F6D32F3FE382200889E6CC0
1190FD97CCD6A199B0E1129EB105D2E0A7465C2B669BC5302C99B2A5043B8DF6
BDC62276CD118027C5B641935A62E4A80419700ECF7AC593BC8AEF8A2F12BBBA
643764FB643231C9F83C17233FE379C01744F4D60460832E90B8B6C3> |-
/R <1C60D8A8C9B08A9414590418C205648021AB3909ED90FCBB1BAC59090824
3420BEAE74486FE005C9EB5556F2C48FEEBF0036FC0F6A0D954342AF88F1E7DC
8DCB6D400849E596859BC50CA72423D5CCEEE678E72E0A424E835E81D0E6E16B
94508E27CA1366A77B74CB0A249CF52FEF1614B8B9975C7E1B56658514550327
37D95396261DC951B78A497A52496FF14DD86450E6C055CC76BFF14ECC48CCA3
49AEC715F36428A49B6ED6B3B7B1B3FB1C8D06A29F92832AAABA3BFC36C9F705
5DEA2E86AA893F46A9273226ACD53CAC9D> |-
/a <1C60D8A8C9B08A95FC54E1C48047F2362181CB542D2F1674127C4F4C9F7D
1717C10CB7168AC7978C4308060BAA30F50573C35A919CB30E7227D3796479AD
176BB8B7FEC788EA553F36F15301E6AAF2BE77029D06C13B9B359811DF27FFA6
C5944ED560DCE4BF76A4D69452F33E217F01FB82A1A9C25A6D971ED9D5B2EC51
FD692DF7E02BAC21EE5ACA74903F5139FF2348627FC7965466C31B> |-
/c <1C60D8A8C9B08A95D14AE181C28DB9FD70BFD1FE9D3C0BCA8C20DEE6C744
0BE7DFA215F7478DFF85D1A537DDD3115051BD387B2EA88327840F842A0379DB
67C73B631A23E7A02945CB1445D58D6DF11F59AE8B95AA7600C14A1AC41A969B
411F42F13C6106D4C588E9D0F7DBC268DC71FAB59CBF893274063BF99E82AB1D
190415E01070CD66> |-
/d <1C60D8A8C9B08A950515D3E7C54D9B36ADC1168D9F9F1643B9D95584771F
20C06052F3E1E0A7A4B308DFBF1D51105F800E7359A449FE60199C5139C83553
11C90E56AFC5740131D5BCE9EDB25E98C5830A983BA3932B69115E7C48676D82
8DEC3BBE20BFB89D723C8EB520D4A405376A54724A89080C4125A11A18BEB6AF
A3D15916D79B87592E97> |-
/e <1C60D8A8C9B08A95C8E18CF8D999519B73BF20480F893073DADC6532C273
FCF8B2BC68B1CEA4DC2243B456412ED6AD926E6FA483A9369231CF5D87E62A41
973253537172C1ED93DE5DB5FA690072E85EC623D7D1A33DFE06B2329F47AA52
48B29D32D6B4AEC80AC1D843AFD7BF45BE315B0416EC2996C49264647B31857B
22> |-
/g <1C60D8A8C9B08A95FB066076D5BF6540FB349E601F6889867401A8338E03
5CD1D7D55AAD658BD07ADD0920C300008C9ECECCEB0424D3970E602891DCE5C3
D2AD26478C3BC2219B3E59606C63D3FBAE9EEA90D950441B0A31E20E8FB6EF52
946F6A458B929F4446CF3594B1FA74BD01EF569D8FEA0757084A0B87E7A94528
B2BCE7547EEEEC22F1B2EBA51748CC33787C90AE3577E2DA71B01D26E7585271
29FE538A5073E29727C22438B365F7C12D1201A9956028BBA4E9B7D6E42E5DED
6F4BB9776749E4382B367D46D3BEEF722A3646FABF72600D8657ED7CAA7896B7
01F6F573F4F744F061B49F15725B73A2B9> |-
/h <1C60D8A8C9B08A950515D3E7C54D951207C4D15992C30BF25214F4961055
86D540877FFB70382FB17853B51BAB960E37AC4B96F1DE30CF333F39B9B7175A
3951D15DD0AE1F8B864A649D9DCBF616E678A00F7F2FB4E18B430BC156E590C4
513FB1C82923D449932375B487B225946F133D219B8B29BE537E866B1DC10DD3
722C4FF4730CE5> |-
/i <1C60D8A8C9B08A95104D8565ABCACFC8C2C729CFD92A27BC2F1B92176437
CEE8E8DFF0716AF0B25E2A77CC3F77866D20FF71A07B7C6374BB91294FD42178
188E1D87C82F4F607A14A2FC593A9B84E2960D67A22DFFACE77364D6704639AA
DC03380E6C> |-
/k <1C60D8A8C9B08A95EF9E0D6E61BB925279365AA4A60E661834E195A470DF
0C9DA82B8AD9E081E3BB394E127447C44C754282780C7EEDB49362B4CF883399
B9C1BA4899DE66267906343C8F3A83864C6E7AA0AEC2571F6793BA52F83F870C
805C1234DF138FFE0B999E28A15D81ACF73967292C1D992BA04BBDAB1C22565D
CBDE1DBDF901FE2926AB2F83115C6ABA2D113CAF80369A9088F1CF5E6BA95263
590BD9ABC56171A431F9B1> |-
/l <1C60D8A8C9B08A95104D8565ABCACFC8C2C67791A81DB7204037F28EC1FD
C8DC5911ACBAB2C2F5BA4276487FDDCD2677851BC685B798FADD41D7A3B5DAE3
8F9DB8A0348561> |-
/m <1C60D8A8C9B08A953AFDC45F691A8B3D38CADEE635A57B07043064EE2DD4
0DEB228EBC76D42F9A12A52E202B096E20FFE943E7DCA0E820DA025E1B6FBF0D
3EB13A1DC9227EB1DE8C37C4E574DD042E0BA5043C469AF856A4CA1450CB8AB9
3F3B754111DFEE8C368C283B4D63D024485B598B21992EF90539871154ACF1FC
DE9F0930D0362CADAC2BFD45DFF80EB7ADDA4FDA5E8A0F3FABF4322446271867
18DFD1EA75E0762C7417321A5186A544B2CFC778551081844C01C48CFA84> |-
/n <1C60D8A8C9B08A950515D3E7C54D951207C4D15992CD20DA0A4F4A92B127
B1E13710E07E3598EEE95CCA5137D3ECA0099F17B60DE31BAAABFA754FFA6A6B
35F02082E11830B2B3C758780B86B2F949D99AD66ECA22639C9A4BD58BACC965
99EF3999CC0248A10FF60E66BEA8FD9192C8CBDB8B930773BEB5EB67484E453C
C143B8EBD3> |-
/o <1C60D8A8C9B08A95FB066076D5BF1BC41796C453739D98FFB4C1AB976428
A1972249FCEDBC1AFE5E9C82C65E169804E650F73014308EED7F8570C73A1EB1
991BB22DEBB3D72F95CDA589DC72DAD2CADD29A9256913F4C8C796A953345313
8832> |-
/p <1C60D8A8C9B08A950515D3E7C54DE566BF3C7478C107F593A7216CE685BA
CEA45A16A5D893144A8398A311C3399EF78DFB9274855A77AF289B87735E50E7
D5C75CF9E697C40EC71487BAB9493622E53DBD16CB65BC97B8CE29A8E98955BB
5D706FEAEC8F2F1C231B1CC0E4A1E33D9A687DF47747CB89B285ECA43E77751D
3EDB0DD4E93112E7C182FDCE4553BDF55ABF04E3B72F94> |-
/r <1C60D8A8C9B08A95A2FF476AFB2B94CF694D01FCFD88F8AA0B4B04A8D80A
6C9492517D2F6110D97CA1BFCD07F0423B24079137968E005808273624FAF105
A8190E3FD54016F3C0139308D3B67218767005D250F9474FB745AE4D15F95725
309666830E3CB5B036D003F2E61F27DDD8242568E9D1> |-
/s <1C60D8A8C9B08A95AA94DB1547F61FF062D7C58B3E99DC0FC8E89A640108
E369457707F801573B3BA68D26BC93B984BBEACAD585BCBF08038112925FEA37
AD62E17C471B188ECF019D4F63DE524E66CA139448EC9724891490020117E94E
D12A19950FC53B0D1EE31F24037C819A4BF23C6FCADA2D0DA3F7969B2287C6CC
A5F816C64E89AE7188320B8BEF01A848615A63402C57023254EC7EF3B16F1715
842B58141F5E98E77BD7EF27A055916B7484A2> |-
/t <1C60D8A8C9B08A95AF0DB396ABDAB6E7718F096890542846D9370A6800BC
A31EA4D85B82AA6619DD362123AB4DD42383B1715C8A83313D6EE5622B416ACF
6AFFDD40803F648A552DA7438ED7362611857E2C58EB21D431D1B8BF0BA6C7E4> |-
/u <1C60D8A8C9B08A950515D3E7C54D9B36ADC12592B3EE67858F81F7E391C0
611155AC3911FEAA16298A089CE17FFE55D152ED3AD714016C96ED61DBE119B7
930CCE96C3587E3F23603D6F17C2C6E3BDFE2458B12AA4E2C88B4BAD7505FE78
61B5A4C20CABBAB02D66> |-
/v <1C60D8A8C9B08A95EF9E0D6E61BB9FC94544C2F254889F0C6DD2D977D0DC
74AEBDF2F545616E55B658E6088698D078C01836F1DF316B54580E2E866BD7D3
823EEFCEADC351BB6769CA38BA11C10D68100F33B5EC7861D152F79FDD23E5BC
8C650837635C48B7DDFB93D12FBAD28916D544F226D72EC1> |-
/w <1C60D8A8C9B08A940352EA45B4AA88E957D4EC72D166B3EB15DF04701094
3C10CF1E6D86D607FC877CFAD695BBEDE48E237C78ED28EC49311171BDA3BFC2
737E7C4308916F531693326031DD8603C445517629FC9ED335534CAD3BB0666D
0C3DF0BF1D860ECA4AC0500BC0AF9074DD6BD9A6B8714B380B540311A2B019B9
A20670E01B1B139F2C31774E56AEEC6B33C21C8D71C79638EC6083D511767567
2F77B2C23CEEACE13C9B8DE0FA74799CA5A428C3> |-
/.notdef <1C60D8A8C9B08A9586D4F7B21AA93E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/AMHIUF+CMBX9 /GGGBAA+CMBX9 findfont ct_VMDictPut
/AMHIUF+CMBX9*1 
[12{/.notdef}rp /fi 32{/.notdef}rp /hyphen /period 2{/.notdef}rp /one /two 
/three 6{/.notdef}rp /colon 11{/.notdef}rp /F 2{/.notdef}rp /I 3{/.notdef}rp 
/M 4{/.notdef}rp /R 14{/.notdef}rp /a /.notdef /c /d 
/e /.notdef /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w 136{/.notdef}rp]
AMHIUF+CMBX9 nf
AMHIUF+CMBX9*1 [8.9664 0 0 -8.9664 0 0 ]msf
75.72 409.86 mo
(Figure3.1:FIRcode.Figure3.2:FIRcodewithmanual)
[6.72304 3.0028 5.28207 5.8649 4.34966 8.28046 5.28207 3.00279 5.28207 7.68237 6.72304 3.95776 
11.5227 4.68047 5.52327 5.87656 4.92076 38.7626 6.72304 3.00281 5.28206 5.86491 4.34967 7.32016 
5.28206 3.00281 5.28206 7.20267 6.72305 3.95776 10.3229 4.68137 5.52325 5.87656 7.44031 7.68329 
3.00278 4.07889 8.27686 8.87936 5.12964 5.63626 5.8649 5.12964 0 ]xsh
212.4 420.3 mo
(eventhandling.Modi\014edlines)
[4.92076 5.40404 4.92076 5.63626 10.0783 5.87656 5.14758 5.88283 5.88284 3.00281 3.00281 5.87653 
5.30002 15.4831 10.0522 5.52325 5.88284 3.00278 5.88284 4.92075 11.997 3.00278 3.00281 5.87659 
4.92075 0 ]xsh
212.4 430.86 mo
(aremarkedwithanasterisk.)
[5.1709 4.31917 8.52077 8.87936 5.17088 4.31918 5.40405 4.92075 9.23627 7.68329 3.00278 4.07889 
9.47656 5.15836 9.35641 5.15833 4.20251 4.07889 4.92075 4.31918 3.00281 4.20251 5.61923 0 
]xsh
385.321 409.86 mo
(Figure3.3:FIRcodewithtele-)
[6.72302 3.00192 5.28296 5.87656 4.31918 8.04016 5.28296 3.00281 5.28296 7.44293 6.72305 3.95776 
11.1631 4.68137 5.52325 5.87656 8.16031 7.68326 3.00192 4.07889 8.99686 4.07889 4.92072 3.00195 
4.92072 0 ]xsh
385.321 420.3 mo
(portmessaging.Modi\014edlines)
[6.11685 5.28296 4.31918 8.03842 8.88477 4.91266 4.2312 4.2312 5.15836 5.28296 3.00281 5.87656 
5.28296 8.16296 10.0844 5.52328 5.87653 2.99384 5.87659 4.91266 9.59671 2.99384 2.99387 5.87653 
4.91266 0 ]xsh
385.321 430.86 mo
(aremarkedwithanasterisk.)
[5.1709 4.31918 8.4006 8.87936 5.1709 4.31915 5.40405 4.92078 9.35641 7.68326 3.00281 4.07886 
9.35645 5.15833 9.47656 5.15836 4.20251 4.07889 4.92075 4.31918 3.00281 4.20251 5.61926 0 
]xsh
1.094 lw
0 lc
0 lj
1 ml
[1.0935 1.0935 ] 0 dsh
true sadj
74.045 518.247 mo
74.045 520.241 74.045 529.941 74.045 532.184 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
true set_gvm
%ADOBeginSubsetFont: EUJAAA+Times-Roman Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /EUJAAA+Times-Roman def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/BaseFontName (Times-Roman) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /four put
dup 54 /six put
def
/FontBBox {-168 -218 1000 898} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 -0 600 650] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/four <1C60D8A8C9B7A73DB990F0D03086DB60768ABE26E44848F9850E4CAF8
8A9473C3431E692B8F4BA7CDA14B6A4B3E1E026526AC43CE1E981026B2D3BD45
E4AEFA8DCADB27FC0C9AFC7EC14AD8BD8F327455CBBC535213CC2842F> |-
/six <1C60D8A8C9B7A73DB6E2A1C14EF008F99211394DB22D860936CC282A92
1B9ED6F91223E98328FCF18B03D3BAF719DDB64DA006FE20B0565D26E3AD449B
C5A6B8F5EC4311E998D2EA2714B039FB2A7BCD63956299BC52065F41B31BC8A1
C16E5272D56E70B5E5B21C7BA0C9F28EDAA38335E546C3309E9CF58BAA6E0B25
65736D2B5DA1BFE86E6CF9AA958B9FCF9BAF7F95F1ADF74726A5C9359838F7F3
E6D495FC04524D25AAEB7B27E5EEE2A03D09DEA7776FB866B2> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/AMHIUG+Times-Roman /EUJAAA+Times-Roman findfont ct_VMDictPut
/AMHIUG+Times-Roman*1 
[52{/.notdef}rp /four /.notdef /six 201{/.notdef}rp]
AMHIUG+Times-Roman nf
AMHIUG+Times-Roman*1 [6.5613 0 0 -6.5613 0 0 ]msf
96.3161 528.106 mo
(64)
[3.28065 0 ]xsh
.273 lw
1 lc
1 lj
10 ml
[] 0 dsh
91.982 504.158 mo
92.883 504.158 93.59 505.843 93.59 507.874 cv
93.59 522.739 li
93.59 524.77 94.298 526.454 95.198 526.454 cv
94.298 526.454 93.59 528.139 93.59 530.17 cv
93.59 545.035 li
93.59 547.066 92.883 548.751 91.982 548.751 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13333 .12157 .12549 colr
@
.365 lw
0 lc
0 lj
1 ml
90.098 482.779 mo
90.098 486.401 82.912 489.34 74.059 489.34 cv
65.206 489.34 58.021 486.401 58.021 482.779 cv
58.021 479.157 65.206 476.218 74.059 476.218 cv
82.912 476.218 90.098 479.157 90.098 482.779 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
90.098 511.448 mo
90.098 515.07 82.912 518.009 74.059 518.009 cv
65.206 518.009 58.021 515.07 58.021 511.448 cv
58.021 507.826 65.206 504.887 74.059 504.887 cv
82.912 504.887 90.098 507.826 90.098 511.448 cv
@
true set_gvm
%ADOBeginSubsetFont: EUJAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
AMHIUG+Times-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B7EF322402303D457D303ABEC6E56B91FB1C8B644418783F4A
CA994C2024DF5A06B9C49D1CECD47A12918ED10125395E3A7FBC841F916C8FD5
A3E582C39E7EF9DDA1935DA3CB2EA15E98038BBD254BB3B5EBA8134EFFCCB382
7E6DB7EFBB566FB4AD9016966B37F98F04561542110626037C62C6D8F414BFD4
17F50B1884B2D556249DA524D3459EC976D2331B9960E61202E4CAF68150715A
3048FF8C4BF1D3FE233FEA898DD425A5> |-
/c <1C60D8A8C9B77FE2C1B9DE5A5D942E316925E3EF95260785B9C141766479
5D83A2DA98D80FB5C22985C6D38E6337CF0547252C1C92F88F1650E0A0D91357
A8A07CF1EA851E3AA7B44E82BB5D05A27243BF409631A050DFBBAD0E5A864F74
C16DEE10517BC51640145C748313D4E8F84B17CE6629787D661F096665F49205
6D2B7A38A9D7009896951170172F> |-
/e <1C60D8A8C9B77FE2C18C115D2A2891F64D03AD64D46CF5BF22EC0FC6A53D
76BCB7D488987BAC008734A9951BEEEDF1F29D2AC51E1AFF5ACC04DEAA07B36C
DCA531B2B16F36C4ED037658430E9445A05664E5B7392890666E0561B3DC66C1
0EB3DCBABC02A3B2C0F0ED2C7564A918A00876BB50150E367B9DB4202F3F29F5
ABDE1B62BCE4CB> |-
/o <1C60D8A8C9B7A73DB9AB4CB4C42541356592945DD593CC374BAA6C5787FB
9F040319642E8B0A9E95EC2E8CE051A97DA3683B3A2A6A790E1DE652E32F7C98
967D8FABCEDB19E9C80D275429A286648D838DFD5EC18E89C546447DA9616BC6
65D1CCA0A03EEAD28D1011D81E0344464965C80CA6BE9E8DF1C45796035D6F77
5A9F264B> |-
/r <1C60D8A8C9B81F2C3A97A9E2552B6737BB438323854809EDD8BFC9E56347
5BB718090714E188156133310B2E661F57A9AAF1E2B8C846C0607A4D517DC718
0FD2BDBD3CFBC53C2FD2BA8B4D9C15F7FF6F2CE693B977991FC53C0071051594
422487431C4547B5A70FDD33009A9118EFF53AB4> |-
/u <1C60D8A8C9B7A73DB6C98D78D5AF6C43A027CF995A7CBC21556E6AE88568
21EDD07CFAE44413CFFD12D8442E445858311725FC3E1F844244B69828472A80
8469B483E7FCA458CB57C8ECE2FE75799FBEE0639CA31975DCB4BE34285E6D21
C0C7AE64EA0A26B9EAA39538271C04E2A1BDC952D43E74D532DCF098D3216040
FF1D34CE99ABED47F6AE6D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUG+Times-Roman /Encoding get
dup 83 /S put
dup 99 /c put
dup 101 /e put
dup 111 /o put
dup 114 /r put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUG+Times-Roman*1 
[52{/.notdef}rp /four /.notdef /six 28{/.notdef}rp /S 15{/.notdef}rp /c 
/.notdef /e 9{/.notdef}rp /o 2{/.notdef}rp /r 2{/.notdef}rp /u 
138{/.notdef}rp]
AMHIUG+Times-Roman nf
AMHIUG+Times-Roman*1 [6.5613 0 0 -6.5613 0 0 ]msf
64.119 484.31 mo
(Source)
[3.64808 3.28065 3.28065 2.18486 2.91322 0 ]xsh
1.094 lw
74.045 489.341 mo
74.045 491.212 74.045 500.312 74.045 502.417 cv
@
72.86 501.068 mo
73.954 504.782 li
75.594 501.068 li
72.86 501.068 li
f
.365 lw
90.098 542.263 mo
90.098 545.885 82.912 548.824 74.059 548.824 cv
65.206 548.824 58.021 545.885 58.021 542.263 cv
58.021 538.641 65.206 535.702 74.059 535.702 cv
82.912 535.702 90.098 538.641 90.098 542.263 cv
@
true set_gvm
%ADOBeginSubsetFont: EUJAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
AMHIUG+Times-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B59F85E92D4949C197FBEE886C828596BDC47678EA1094270C
21E2E230DB013872AB0C9D85842054F92A6348F9717016E7E26B1184592BC2D2
83A5E334AE3A4FFF25145D67AF60AD80DC86DC69859A14C9D32F322D8F597962
93AF8B9566FDA33FE93ABBEE417798EC4E363F17196DA5AB76A28CE9DE1AD3E1> |-
/i <1C60D8A8C9B854D0F4128C5F730324D582AF13A91D38A2B8B04AC013C617
2E16226094218169EB06C6DBB6284BB377750F0C7C7721073C5D84ADADF9DA15
D29F627609D286ADECE814E2016935133636C31DFE4AF2FE3DCA> |-
/l <1C60D8A8C9B854D0F77891C91979D96AE059844D82DE5E8E150A8AE68F16
2E68A372A7B4D3917100136202B17F4D8BB1736687FA0CC0E4> |-
/p <1C60D8A8C9B7A73DB912DC63DC647546779540BBA710A424E2D79EBC39AF
1982216BE1A28F6B55894A73BE8E9D5A4339F3A9B6376FF3B2275B0F827BB620
9EDE38A9AE582FA374AA3C20A1B5F045A595A576F106B88A67F9260ADFA070C2
1749BDB4A5121CDAC5EA3C1AA6FA0F88B87953D28095D09217106DFC1953A2FB
252F23661A3B2F7F5B6EA20CCBA98C37116FABB72C22FBAB732ABC7B848A94> |-
/t <1C60D8A8C9B854D0A31BEA4C76D6647C828CD9B1F1EC87B7280F5E9701B9
EB8A13CDFAD510646864B567D839D55CC108E9EB0D54E2E35199C54B0C00CAA4
98E8FBD4E51756FDF1EB> |-
/y <1C60D8A8C9B7A73DB9A07D97C0DB22AE837C85991AE31935F7F835AA45E0
9EEDD0287CA79B9B693A5BE3BF82F90B3B5EA080280D3655BA5F4B2865D91183
22639DCA7FB847D46F29FD0DE0B9A0959FE597568B6C3F908263812305AA9A0B
D267EBABB072609E36BBCB4895F5E62287CD44D05386C029094A9C68F8813953
4208C3E595026C3FC6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUG+Times-Roman /Encoding get
dup 77 /M put
dup 105 /i put
dup 108 /l put
dup 112 /p put
dup 116 /t put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUG+Times-Roman*1 
[52{/.notdef}rp /four /.notdef /six 22{/.notdef}rp /M 5{/.notdef}rp /S 
15{/.notdef}rp /c /.notdef /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
2{/.notdef}rp /o /p /.notdef /r /.notdef /t /u 
3{/.notdef}rp /y 134{/.notdef}rp]
AMHIUG+Times-Roman nf
AMHIUG+Times-Roman*1 [6.5613 0 0 -6.5613 0 0 ]msf
62.9041 512.98 mo
(Multiply)
[5.83305 3.28065 1.82404 1.82404 1.82404 3.28065 1.82404 0 ]xsh
72.86 531.883 mo
73.954 535.596 li
75.594 531.883 li
72.86 531.883 li
f
1.094 lw
74.045 548.829 mo
74.045 551.012 74.045 561.636 74.045 564.092 cv
@
72.86 562.744 mo
73.954 566.458 li
75.594 562.744 li
72.86 562.744 li
f
.365 lw
90.098 572.761 mo
90.098 576.383 82.912 579.322 74.059 579.322 cv
65.206 579.322 58.021 576.383 58.021 572.761 cv
58.021 569.139 65.206 566.2 74.059 566.2 cv
82.912 566.2 90.098 569.139 90.098 572.761 cv
@
true set_gvm
%ADOBeginSubsetFont: EUJAAA+Times-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
AMHIUG+Times-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7EF322AA854729EDE82F79F62F4802A60E8CBA530A4EE9DDD
04A162339EFEEA214C96D6545943600CBBB73BDEBEB46327159B7EA9DAAF5157
F790606EE4374D145355F2B9703235AB96347586BD711D483373514157E3F505
D281AD943C8946C28BB6F41E54B3B55BD47248F4B198DCB34D56498348> |-
/n <1C60D8A8C9B7A73DB6FF4EE5262C2194A9C52BC7AECACAEC0C5B5EF2EA49
8FA4A9F1BCA6892673B9288172F7350B70FD6E55595B264FD9322C3CEAEFCE6A
DFEE90D8823A6D403C388D5AA702729C732F3F5D0EAE840303C038B70A994FA8
BA0C24900745F43B951B1AE0DC448C9C950852C25EF742BA9554C4873F868B6A
E3CE1ACF9028CF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUG+Times-Roman /Encoding get
dup 80 /P put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUG+Times-Roman*1 
[52{/.notdef}rp /four /.notdef /six 22{/.notdef}rp /M 2{/.notdef}rp /P 
2{/.notdef}rp /S 15{/.notdef}rp /c /.notdef /e 3{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r 
/.notdef /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
AMHIUG+Times-Roman nf
AMHIUG+Times-Roman*1 [6.5613 0 0 -6.5613 0 0 ]msf
62.9041 543.794 mo
(Multiply)
[5.83305 3.28065 1.82404 1.82404 1.82404 3.28065 1.82404 0 ]xsh
65.4558 573.927 mo
(Printer)
[3.64808 2.18487 1.82404 3.28065 1.82404 2.91322 0 ]xsh
.366 lw
154.354 480.464 mo
154.354 484.106 147.129 487.061 138.228 487.061 cv
129.326 487.061 122.102 484.106 122.102 480.464 cv
122.102 476.822 129.326 473.867 138.228 473.867 cv
147.129 473.867 154.354 476.822 154.354 480.464 cv
@
147.274 554.674 mo
147.274 556.472 145.816 557.93 144.018 557.93 cv
142.22 557.93 140.761 556.472 140.761 554.674 cv
140.761 552.876 142.22 551.418 144.018 551.418 cv
145.816 551.418 147.274 552.876 147.274 554.674 cv
cp
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
128.233 482.003 mo
(Source)
[3.66792 3.29851 3.29851 2.19675 2.92906 0 ]xsh
147.274 527.553 mo
147.274 529.351 145.816 530.809 144.018 530.809 cv
142.22 530.809 140.761 529.351 140.761 527.553 cv
140.761 525.755 142.22 524.297 144.018 524.297 cv
145.816 524.297 147.274 525.755 147.274 527.553 cv
cp
@
true set_gvm
%ADOBeginSubsetFont: WRNAAA+TimesNewRomanPS-BoldMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /WRNAAA+TimesNewRomanPS-BoldMT def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (TimesNewRomanPS-BoldMT) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
def
/FontBBox {-180 -250 1008 889} def
/XUID [6 44337] def
systemdict /languagelevel known {mark {systemdict
/version get exec cvi 3011 le {currentdict /XUID
undef } if} stopped cleartomark} if
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 -0 662 677 456 470] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 -0 662 677 447 461 694 694] def
/StdHW [34] def
/StdVW [137] def
/StemSnapH [34 48] def
/StemSnapV [137 159] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/one <1C60D8A8C9B7A73DC54E0D6CDEF63D6DAA37E10A10F4242DB89D6B66B2
B998D2878C41A636E25B362A0F244E66220665E5CD37E85C5E5D8CEABD6BF6E0
7A38B33CFE07298759> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/AMHIUH+TimesNewRomanPS-BoldMT /WRNAAA+TimesNewRomanPS-BoldMT findfont ct_VMDictPut
/AMHIUH+TimesNewRomanPS-BoldMT*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
AMHIUH+TimesNewRomanPS-BoldMT nf
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
142.368 556.781 mo
(1)sh
147.274 519.979 mo
147.274 521.777 145.816 523.235 144.018 523.235 cv
142.22 523.235 140.761 521.777 140.761 519.979 cv
140.761 518.181 142.22 516.723 144.018 516.723 cv
145.816 516.723 147.274 518.181 147.274 519.979 cv
cp
@
true set_gvm
%ADOBeginSubsetFont: WRNAAA+TimesNewRomanPS-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
AMHIUH+TimesNewRomanPS-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DC5243B560A9C7838253E88D4B22849C3EC77EB150C
27090D1B832ABE48BF9F1C69A372DC5CF0802020E8EC011F06BE53BBEFC630DE
C47F37642AFE30CC2B47A6E3785C05A1074469D361B3FEBE8946E1038BA7BBA8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUH+TimesNewRomanPS-BoldMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUH+TimesNewRomanPS-BoldMT*1 
[49{/.notdef}rp /one /two 205{/.notdef}rp]
AMHIUH+TimesNewRomanPS-BoldMT nf
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
142.368 529.66 mo
(2)sh
154.354 509.29 mo
154.354 512.932 147.129 515.887 138.228 515.887 cv
129.326 515.887 122.102 512.932 122.102 509.29 cv
122.102 505.648 129.326 502.693 138.228 502.693 cv
147.129 502.693 154.354 505.648 154.354 509.29 cv
@
true set_gvm
%ADOBeginSubsetFont: WRNAAA+TimesNewRomanPS-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
AMHIUH+TimesNewRomanPS-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D33AF32B54B545074FFDBD502BC30DE07F68EE9DB
6C6425DDF4A232042B6FC8B173A43487337879CACA186DA93F0C7729C52DB87A
A4201E50D051E8AB2CF8B1F0C1138BAE42EA6A15D12B2620143B816C35F8A6E5
D3EACB28A3306793ED8FF223C262CE9668BACC55CFD7803CF78E0515912B4BA1
E9D15B99B77F161C17D5BFC7B6E5C5D0AC75470A518CE3F6BC323BF6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUH+TimesNewRomanPS-BoldMT /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUH+TimesNewRomanPS-BoldMT*1 
[49{/.notdef}rp /one /two /three 204{/.notdef}rp]
AMHIUH+TimesNewRomanPS-BoldMT nf
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
142.368 522.086 mo
(3)sh
1.099 lw
138.213 487.061 mo
138.213 488.942 138.213 498.092 138.213 500.208 cv
@
137.022 498.486 mo
138.122 502.22 li
139.771 498.486 li
137.022 498.486 li
f
.366 lw
154.354 540.271 mo
154.354 543.913 147.129 546.868 138.228 546.868 cv
129.326 546.868 122.102 543.913 122.102 540.271 cv
122.102 536.629 129.326 533.674 138.228 533.674 cv
147.129 533.674 154.354 536.629 154.354 540.271 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
127.012 510.829 mo
(Multiply)
[5.86478 3.29851 1.83397 1.83395 1.83397 3.29851 1.83395 0 ]xsh
1.099 lw
138.213 515.844 mo
138.213 518.04 138.213 528.72 138.213 531.19 cv
@
137.022 529.469 mo
138.122 533.202 li
139.771 529.469 li
137.022 529.469 li
f
138.213 546.874 mo
138.213 549.069 138.213 559.75 138.213 562.22 cv
@
137.022 560.498 mo
138.122 564.232 li
139.771 560.498 li
137.022 560.498 li
f
.366 lw
154.354 570.935 mo
154.354 574.577 147.129 577.532 138.228 577.532 cv
129.326 577.532 122.102 574.577 122.102 570.935 cv
122.102 567.293 129.326 564.338 138.228 564.338 cv
147.129 564.338 154.354 567.293 154.354 570.935 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
127.012 541.811 mo
(Multiply)
[5.86478 3.29851 1.83397 1.83395 1.83397 3.29851 1.83395 0 ]xsh
127.012 572.474 mo
(Multiply)
[5.86478 3.29851 1.83397 1.83395 1.83397 3.29851 1.83395 0 ]xsh
152.827 471.7 mo
154.339 474.315 li
157.721 474.734 li
155.274 476.77 li
155.852 479.644 li
152.827 478.287 li
149.802 479.644 li
150.38 476.77 li
147.932 474.734 li
151.314 474.315 li
152.827 471.7 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
152.827 471.7 mo
154.339 474.315 li
157.721 474.734 li
155.274 476.77 li
155.852 479.644 li
152.827 478.287 li
149.802 479.644 li
150.38 476.77 li
147.932 474.734 li
151.314 474.315 li
152.827 471.7 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
293.23 453.447 mo
294.743 456.062 li
298.125 456.481 li
295.677 458.517 li
296.255 461.391 li
293.23 460.034 li
290.205 461.391 li
290.783 458.517 li
288.335 456.481 li
291.717 456.062 li
293.23 453.447 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
293.23 453.447 mo
294.743 456.062 li
298.125 456.481 li
295.677 458.517 li
296.255 461.391 li
293.23 460.034 li
290.205 461.391 li
290.783 458.517 li
288.335 456.481 li
291.717 456.062 li
293.23 453.447 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
147.274 497.77 mo
147.274 499.568 145.816 501.026 144.018 501.026 cv
142.22 501.026 140.761 499.568 140.761 497.77 cv
140.761 495.972 142.22 494.514 144.018 494.514 cv
145.816 494.514 147.274 495.972 147.274 497.77 cv
cp
@
137.022 587.8 mo
138.122 591.534 li
139.771 587.8 li
137.022 587.8 li
f
1.099 lw
[1.0995 1.0995 ] 0 dsh
138.213 577.629 mo
138.213 579.117 138.213 586.353 138.213 588.026 cv
@
true set_gvm
%ADOBeginSubsetFont: WRNAAA+TimesNewRomanPS-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
AMHIUH+TimesNewRomanPS-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DEE9439F68221670820060DD739F7492805D95A249
BD33AAD550546720FC1B475533F96D9894B436C0F5061EEFBCBB409F3A33CA36
F24DEC3BEB71F915E94E6FDB7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUH+TimesNewRomanPS-BoldMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUH+TimesNewRomanPS-BoldMT*1 
[49{/.notdef}rp /one /two /three /four 203{/.notdef}rp]
AMHIUH+TimesNewRomanPS-BoldMT nf
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
142.368 499.878 mo
(4)sh
200.61 480.464 mo
200.61 484.106 193.385 487.061 184.484 487.061 cv
175.582 487.061 168.358 484.106 168.358 480.464 cv
168.358 476.822 175.582 473.867 184.484 473.867 cv
193.385 473.867 200.61 476.822 200.61 480.464 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.366 lw
[] 0 dsh
200.61 480.464 mo
200.61 484.106 193.385 487.061 184.484 487.061 cv
175.582 487.061 168.358 484.106 168.358 480.464 cv
168.358 476.822 175.582 473.867 184.484 473.867 cv
193.385 473.867 200.61 476.822 200.61 480.464 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
194.199 554.674 mo
194.199 556.472 192.741 557.93 190.943 557.93 cv
189.145 557.93 187.686 556.472 187.686 554.674 cv
187.686 552.876 189.145 551.418 190.943 551.418 cv
192.741 551.418 194.199 552.876 194.199 554.674 cv
cp
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
174.49 482.003 mo
(Source)
[3.66792 3.29851 3.29849 2.19676 2.92906 0 ]xsh
194.199 527.553 mo
194.199 529.351 192.741 530.809 190.943 530.809 cv
189.145 530.809 187.686 529.351 187.686 527.553 cv
187.686 525.755 189.145 524.297 190.943 524.297 cv
192.741 524.297 194.199 525.755 194.199 527.553 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
189.294 556.781 mo
(1)sh
194.199 519.979 mo
194.199 521.777 192.741 523.235 190.943 523.235 cv
189.145 523.235 187.686 521.777 187.686 519.979 cv
187.686 518.181 189.145 516.723 190.943 516.723 cv
192.741 516.723 194.199 518.181 194.199 519.979 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
189.294 529.66 mo
(2)sh
194.199 498.504 mo
194.199 500.302 192.741 501.76 190.943 501.76 cv
189.145 501.76 187.686 500.302 187.686 498.504 cv
187.686 496.706 189.145 495.248 190.943 495.248 cv
192.741 495.248 194.199 496.706 194.199 498.504 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
189.294 522.086 mo
(3)sh
189.294 500.611 mo
(4)sh
194.199 490.961 mo
194.199 492.76 192.741 494.217 190.943 494.217 cv
189.145 494.217 187.686 492.76 187.686 490.961 cv
187.686 489.163 189.145 487.705 190.943 487.705 cv
192.741 487.705 194.199 489.163 194.199 490.961 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
194.199 490.961 mo
194.199 492.76 192.741 494.217 190.943 494.217 cv
189.145 494.217 187.686 492.76 187.686 490.961 cv
187.686 489.163 189.145 487.705 190.943 487.705 cv
192.741 487.705 194.199 489.163 194.199 490.961 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
200.61 509.29 mo
200.61 512.932 193.385 515.887 184.484 515.887 cv
175.582 515.887 168.358 512.932 168.358 509.29 cv
168.358 505.648 175.582 502.693 184.484 502.693 cv
193.385 502.693 200.61 505.648 200.61 509.29 cv
@
true set_gvm
%ADOBeginSubsetFont: WRNAAA+TimesNewRomanPS-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
AMHIUH+TimesNewRomanPS-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73D33A522A9376DEF26F9172BE0BE531B5392644CAB9
6B0013829D136246AFC25AF4920B16177BFFD5D4B1BC824F5D21564BB797C507
7B632825080C302B56A4FE4E3D9ABE1F98B6CA1AE4D774A016D466C0E5F5A187
69083> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUH+TimesNewRomanPS-BoldMT /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUH+TimesNewRomanPS-BoldMT*1 
[49{/.notdef}rp /one /two /three /four /five 202{/.notdef}rp]
AMHIUH+TimesNewRomanPS-BoldMT nf
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
189.294 493.069 mo
(5)sh
1.099 lw
184.469 487.061 mo
184.469 488.942 184.469 498.092 184.469 500.208 cv
@
183.278 498.853 mo
184.377 502.587 li
186.027 498.853 li
183.278 498.853 li
f
.366 lw
200.61 540.271 mo
200.61 543.913 193.385 546.868 184.484 546.868 cv
175.582 546.868 168.358 543.913 168.358 540.271 cv
168.358 536.629 175.582 533.674 184.484 533.674 cv
193.385 533.674 200.61 536.629 200.61 540.271 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
173.268 510.829 mo
(Multiply)
[5.86478 3.29851 1.83397 1.83395 1.83397 3.29851 1.83395 0 ]xsh
1.099 lw
184.469 515.844 mo
184.469 518.04 184.469 528.72 184.469 531.19 cv
@
183.278 529.834 mo
184.377 533.568 li
186.027 529.834 li
183.278 529.834 li
f
184.469 546.874 mo
184.469 549.069 184.469 559.75 184.469 562.22 cv
@
183.278 560.864 mo
184.377 564.598 li
186.027 560.864 li
183.278 560.864 li
f
.366 lw
200.61 570.935 mo
200.61 574.577 193.385 577.532 184.484 577.532 cv
175.582 577.532 168.358 574.577 168.358 570.935 cv
168.358 567.293 175.582 564.338 184.484 564.338 cv
193.385 564.338 200.61 567.293 200.61 570.935 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
173.268 541.811 mo
(Multiply)
[5.86478 3.29851 1.83397 1.83395 1.83397 3.29851 1.83395 0 ]xsh
183.278 588.166 mo
184.377 591.9 li
186.027 588.166 li
183.278 588.166 li
f
1.099 lw
[1.0995 1.0995 ] 0 dsh
184.469 577.629 mo
184.469 579.117 184.469 586.353 184.469 588.026 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
173.268 572.474 mo
(Multiply)
[5.86478 3.29851 1.83397 1.83395 1.83397 3.29851 1.83395 0 ]xsh
245.113 480.464 mo
245.113 484.106 237.888 487.061 228.987 487.061 cv
220.085 487.061 212.861 484.106 212.861 480.464 cv
212.861 476.822 220.085 473.867 228.987 473.867 cv
237.888 473.867 245.113 476.822 245.113 480.464 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.366 lw
[] 0 dsh
245.113 480.464 mo
245.113 484.106 237.888 487.061 228.987 487.061 cv
220.085 487.061 212.861 484.106 212.861 480.464 cv
212.861 476.822 220.085 473.867 228.987 473.867 cv
237.888 473.867 245.113 476.822 245.113 480.464 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
238.887 555.066 mo
238.887 556.865 237.429 558.322 235.631 558.322 cv
233.833 558.322 232.374 556.865 232.374 555.066 cv
232.374 553.268 233.833 551.81 235.631 551.81 cv
237.429 551.81 238.887 553.268 238.887 555.066 cv
cp
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
218.992 482.003 mo
(Source)
[3.66792 3.29851 3.29849 2.19676 2.92906 0 ]xsh
238.887 527.797 mo
238.887 529.596 237.429 531.053 235.631 531.053 cv
233.833 531.053 232.374 529.596 232.374 527.797 cv
232.374 525.999 233.833 524.541 235.631 524.541 cv
237.429 524.541 238.887 525.999 238.887 527.797 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
233.982 557.174 mo
(2)sh
238.887 519.883 mo
238.887 521.682 237.429 523.139 235.631 523.139 cv
233.833 523.139 232.374 521.682 232.374 519.883 cv
232.374 518.085 233.833 516.627 235.631 516.627 cv
237.429 516.627 238.887 518.085 238.887 519.883 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
233.982 529.905 mo
(3)sh
233.982 521.99 mo
(4)sh
238.887 490.319 mo
238.887 492.117 237.429 493.575 235.631 493.575 cv
233.833 493.575 232.374 492.117 232.374 490.319 cv
232.374 488.521 233.833 487.063 235.631 487.063 cv
237.429 487.063 238.887 488.521 238.887 490.319 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
238.887 490.319 mo
238.887 492.117 237.429 493.575 235.631 493.575 cv
233.833 493.575 232.374 492.117 232.374 490.319 cv
232.374 488.521 233.833 487.063 235.631 487.063 cv
237.429 487.063 238.887 488.521 238.887 490.319 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
245.113 509.29 mo
245.113 512.932 237.888 515.887 228.987 515.887 cv
220.085 515.887 212.861 512.932 212.861 509.29 cv
212.861 505.648 220.085 502.693 228.987 502.693 cv
237.888 502.693 245.113 505.648 245.113 509.29 cv
@
true set_gvm
%ADOBeginSubsetFont: WRNAAA+TimesNewRomanPS-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
AMHIUH+TimesNewRomanPS-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7A73D33B50B819078F965B45E80EFED0D565D6361AB9A5E
1E280AB0D3E2984ED9DA08F5412D17C8EE4C4754A52E630D9BFACCD7EE47497C
009F3C43038DB871CE1DBCE796CD06FCE459030900BF5454ED3369A2985953E6
18E54496558EE0B38B6BFC1E9573DABEFC56BB1769F57C4C59D3F1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUH+TimesNewRomanPS-BoldMT /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUH+TimesNewRomanPS-BoldMT*1 
[49{/.notdef}rp /one /two /three /four /five /six 201{/.notdef}rp]
AMHIUH+TimesNewRomanPS-BoldMT nf
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
233.982 492.426 mo
(6)sh
1.099 lw
228.972 487.061 mo
228.972 488.942 228.972 498.092 228.972 500.208 cv
@
227.781 498.853 mo
228.881 502.587 li
230.53 498.853 li
227.781 498.853 li
f
.366 lw
245.113 540.271 mo
245.113 543.913 237.888 546.868 228.987 546.868 cv
220.085 546.868 212.861 543.913 212.861 540.271 cv
212.861 536.629 220.085 533.674 228.987 533.674 cv
237.888 533.674 245.113 536.629 245.113 540.271 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
217.771 510.829 mo
(Multiply)
[5.86478 3.29851 1.83397 1.83395 1.83397 3.29851 1.83395 0 ]xsh
1.099 lw
228.972 515.844 mo
228.972 518.04 228.972 528.72 228.972 531.19 cv
@
227.781 529.834 mo
228.881 533.568 li
230.53 529.834 li
227.781 529.834 li
f
228.972 546.874 mo
228.972 549.069 228.972 559.75 228.972 562.22 cv
@
227.781 560.864 mo
228.881 564.598 li
230.53 560.864 li
227.781 560.864 li
f
.366 lw
245.113 570.935 mo
245.113 574.577 237.888 577.532 228.987 577.532 cv
220.085 577.532 212.861 574.577 212.861 570.935 cv
212.861 567.293 220.085 564.338 228.987 564.338 cv
237.888 564.338 245.113 567.293 245.113 570.935 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
217.771 541.811 mo
(Multiply)
[5.86478 3.29851 1.83397 1.83395 1.83397 3.29851 1.83395 0 ]xsh
227.781 588.166 mo
228.881 591.9 li
230.53 588.166 li
227.781 588.166 li
f
1.099 lw
[1.0995 1.0995 ] 0 dsh
228.972 577.629 mo
228.972 579.117 228.972 586.353 228.972 588.026 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
217.771 572.474 mo
(Multiply)
[5.86478 3.29851 1.83397 1.83395 1.83397 3.29851 1.83395 0 ]xsh
289.616 480.464 mo
289.616 484.106 282.391 487.061 273.49 487.061 cv
264.588 487.061 257.364 484.106 257.364 480.464 cv
257.364 476.822 264.588 473.867 273.49 473.867 cv
282.391 473.867 289.616 476.822 289.616 480.464 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.366 lw
[] 0 dsh
289.616 480.464 mo
289.616 484.106 282.391 487.061 273.49 487.061 cv
264.588 487.061 257.364 484.106 257.364 480.464 cv
257.364 476.822 264.588 473.867 273.49 473.867 cv
282.391 473.867 289.616 476.822 289.616 480.464 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
283.696 559.464 mo
283.696 561.262 282.238 562.72 280.44 562.72 cv
278.642 562.72 277.183 561.262 277.183 559.464 cv
277.183 557.666 278.642 556.208 280.44 556.208 cv
282.238 556.208 283.696 557.666 283.696 559.464 cv
cp
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
263.496 482.003 mo
(Source)
[3.66794 3.29849 3.29849 2.19675 2.92908 0 ]xsh
283.696 551.157 mo
283.696 552.956 282.238 554.413 280.44 554.413 cv
278.642 554.413 277.183 552.956 277.183 551.157 cv
277.183 549.359 278.642 547.901 280.44 547.901 cv
282.238 547.901 283.696 549.359 283.696 551.157 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
278.79 561.572 mo
(3)sh
278.79 553.265 mo
(4)sh
283.696 498.217 mo
283.696 500.016 282.238 501.473 280.44 501.473 cv
278.642 501.473 277.183 500.016 277.183 498.217 cv
277.183 496.419 278.642 494.961 280.44 494.961 cv
282.238 494.961 283.696 496.419 283.696 498.217 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
283.696 498.217 mo
283.696 500.016 282.238 501.473 280.44 501.473 cv
278.642 501.473 277.183 500.016 277.183 498.217 cv
277.183 496.419 278.642 494.961 280.44 494.961 cv
282.238 494.961 283.696 496.419 283.696 498.217 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
278.79 500.325 mo
(6)sh
283.696 490.807 mo
283.696 492.605 282.238 494.063 280.44 494.063 cv
278.642 494.063 277.183 492.605 277.183 490.807 cv
277.183 489.009 278.642 487.551 280.44 487.551 cv
282.238 487.551 283.696 489.009 283.696 490.807 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
283.696 490.807 mo
283.696 492.605 282.238 494.063 280.44 494.063 cv
278.642 494.063 277.183 492.605 277.183 490.807 cv
277.183 489.009 278.642 487.551 280.44 487.551 cv
282.238 487.551 283.696 489.009 283.696 490.807 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
true set_gvm
%ADOBeginSubsetFont: WRNAAA+TimesNewRomanPS-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
AMHIUH+TimesNewRomanPS-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7A73DDC2846EC4C57DFBB12C38709E3704B762BEBD2BD
5EF794C93C086706338E8741481E1903B9278AF32F162EEF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUH+TimesNewRomanPS-BoldMT /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUH+TimesNewRomanPS-BoldMT*1 
[49{/.notdef}rp /one /two /three /four /five /six /seven 
200{/.notdef}rp]
AMHIUH+TimesNewRomanPS-BoldMT nf
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
278.79 492.914 mo
(7)sh
289.616 509.29 mo
289.616 512.932 282.391 515.887 273.49 515.887 cv
264.588 515.887 257.364 512.932 257.364 509.29 cv
257.364 505.648 264.588 502.693 273.49 502.693 cv
282.391 502.693 289.616 505.648 289.616 509.29 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
289.616 509.29 mo
289.616 512.932 282.391 515.887 273.49 515.887 cv
264.588 515.887 257.364 512.932 257.364 509.29 cv
257.364 505.648 264.588 502.693 273.49 502.693 cv
282.391 502.693 289.616 505.648 289.616 509.29 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.099 lw
273.475 487.061 mo
273.475 488.942 273.475 498.092 273.475 500.208 cv
@
272.284 498.853 mo
273.383 502.587 li
275.033 498.853 li
272.284 498.853 li
f
.366 lw
289.616 540.271 mo
289.616 543.913 282.391 546.868 273.49 546.868 cv
264.588 546.868 257.364 543.913 257.364 540.271 cv
257.364 536.629 264.588 533.674 273.49 533.674 cv
282.391 533.674 289.616 536.629 289.616 540.271 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
262.274 510.829 mo
(Multiply)
[5.86478 3.29849 1.83398 1.83395 1.83398 3.29849 1.83395 0 ]xsh
1.099 lw
273.475 515.844 mo
273.475 518.04 273.475 528.72 273.475 531.19 cv
@
272.284 529.834 mo
273.383 533.568 li
275.033 529.834 li
272.284 529.834 li
f
273.475 546.874 mo
273.475 549.069 273.475 559.75 273.475 562.22 cv
@
272.284 560.864 mo
273.383 564.598 li
275.033 560.864 li
272.284 560.864 li
f
.366 lw
289.616 570.935 mo
289.616 574.577 282.391 577.532 273.49 577.532 cv
264.588 577.532 257.364 574.577 257.364 570.935 cv
257.364 567.293 264.588 564.338 273.49 564.338 cv
282.391 564.338 289.616 567.293 289.616 570.935 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
262.274 541.811 mo
(Multiply)
[5.86478 3.29849 1.83398 1.83395 1.83398 3.29849 1.83395 0 ]xsh
272.284 588.166 mo
273.383 591.9 li
275.033 588.166 li
272.284 588.166 li
f
1.099 lw
[1.0995 1.0995 ] 0 dsh
273.475 577.629 mo
273.475 579.117 273.475 586.353 273.475 588.026 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
262.274 572.474 mo
(Multiply)
[5.86478 3.29849 1.83398 1.83395 1.83398 3.29849 1.83395 0 ]xsh
334.119 480.464 mo
334.119 484.106 326.894 487.061 317.993 487.061 cv
309.091 487.061 301.867 484.106 301.867 480.464 cv
301.867 476.822 309.091 473.867 317.993 473.867 cv
326.894 473.867 334.119 476.822 334.119 480.464 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.366 lw
[] 0 dsh
334.119 480.464 mo
334.119 484.106 326.894 487.061 317.993 487.061 cv
309.091 487.061 301.867 484.106 301.867 480.464 cv
301.867 476.822 309.091 473.867 317.993 473.867 cv
326.894 473.867 334.119 476.822 334.119 480.464 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
327.93 559.464 mo
327.93 561.262 326.472 562.72 324.674 562.72 cv
322.876 562.72 321.418 561.262 321.418 559.464 cv
321.418 557.666 322.876 556.208 324.674 556.208 cv
326.472 556.208 327.93 557.666 327.93 559.464 cv
cp
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
307.998 482.003 mo
(Source)
[3.66794 3.29849 3.29849 2.19675 2.92908 0 ]xsh
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
323.025 561.572 mo
(4)sh
327.93 528.312 mo
327.93 530.111 326.472 531.568 324.674 531.568 cv
322.876 531.568 321.418 530.111 321.418 528.312 cv
321.418 526.514 322.876 525.056 324.674 525.056 cv
326.472 525.056 327.93 526.514 327.93 528.312 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
327.93 528.312 mo
327.93 530.111 326.472 531.568 324.674 531.568 cv
322.876 531.568 321.418 530.111 321.418 528.312 cv
321.418 526.514 322.876 525.056 324.674 525.056 cv
326.472 525.056 327.93 526.514 327.93 528.312 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
323.024 530.42 mo
(6)sh
327.93 520.493 mo
327.93 522.292 326.472 523.749 324.674 523.749 cv
322.876 523.749 321.418 522.292 321.418 520.493 cv
321.418 518.695 322.876 517.237 324.674 517.237 cv
326.472 517.237 327.93 518.695 327.93 520.493 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
327.93 520.493 mo
327.93 522.292 326.472 523.749 324.674 523.749 cv
322.876 523.749 321.418 522.292 321.418 520.493 cv
321.418 518.695 322.876 517.237 324.674 517.237 cv
326.472 517.237 327.93 518.695 327.93 520.493 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
323.024 522.601 mo
(7)sh
327.93 495.327 mo
327.93 497.125 326.472 498.583 324.674 498.583 cv
322.876 498.583 321.418 497.125 321.418 495.327 cv
321.418 493.529 322.876 492.071 324.674 492.071 cv
326.472 492.071 327.93 493.529 327.93 495.327 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
327.93 495.327 mo
327.93 497.125 326.472 498.583 324.674 498.583 cv
322.876 498.583 321.418 497.125 321.418 495.327 cv
321.418 493.529 322.876 492.071 324.674 492.071 cv
326.472 492.071 327.93 493.529 327.93 495.327 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
true set_gvm
%ADOBeginSubsetFont: WRNAAA+TimesNewRomanPS-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
AMHIUH+TimesNewRomanPS-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7A73D33B1D1416E04E762531B7C5FC476C5B9356CF107
9FADFAF992892A1594449FFADA2D45E4CFAD84AF1F23DACAC3C96FEB55CDB57A
259C885EF6A694BA23C99D5219857329F555C5A32F6542A97ACEB2360300D9C4
F58716907377C7CA6C405C983C6975BA2C57F56B1C00F8E074783773536BA960
DCA324543805E0D8EB333B8DA14A19645E1D44AA43C218C20B55FE63D0217C8B
DDC3437D49C378DB8677B0A115D7AFA146A912D32F8FE8F3914CA8F6D198C218
5F55A5BEBF8517DCDD64A95448444731411064D4B32C7459C90BB7033C790807
0B41FC055B619C8EDE7C7516C51959A83ECFBFCA219C1D9D2D7849B0F11036A6
093B21F09375ECD4C7536DE863EB61DC74> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUH+TimesNewRomanPS-BoldMT /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUH+TimesNewRomanPS-BoldMT*1 
[49{/.notdef}rp /one /two /three /four /five /six /seven 
/eight 199{/.notdef}rp]
AMHIUH+TimesNewRomanPS-BoldMT nf
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
323.024 497.434 mo
(8)sh
334.119 509.29 mo
334.119 512.932 326.894 515.887 317.993 515.887 cv
309.091 515.887 301.867 512.932 301.867 509.29 cv
301.867 505.648 309.091 502.693 317.993 502.693 cv
326.894 502.693 334.119 505.648 334.119 509.29 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
334.119 509.29 mo
334.119 512.932 326.894 515.887 317.993 515.887 cv
309.091 515.887 301.867 512.932 301.867 509.29 cv
301.867 505.648 309.091 502.693 317.993 502.693 cv
326.894 502.693 334.119 505.648 334.119 509.29 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.099 lw
317.978 487.061 mo
317.978 488.942 317.978 498.092 317.978 500.208 cv
@
316.787 498.853 mo
317.887 502.587 li
319.536 498.853 li
316.787 498.853 li
f
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
306.777 510.829 mo
(Multiply)
[5.86478 3.29849 1.83398 1.83395 1.83398 3.29849 1.83395 0 ]xsh
334.119 540.271 mo
334.119 543.913 326.894 546.868 317.993 546.868 cv
309.091 546.868 301.867 543.913 301.867 540.271 cv
301.867 536.629 309.091 533.674 317.993 533.674 cv
326.894 533.674 334.119 536.629 334.119 540.271 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.366 lw
334.119 540.271 mo
334.119 543.913 326.894 546.868 317.993 546.868 cv
309.091 546.868 301.867 543.913 301.867 540.271 cv
301.867 536.629 309.091 533.674 317.993 533.674 cv
326.894 533.674 334.119 536.629 334.119 540.271 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.099 lw
317.978 515.844 mo
317.978 518.04 317.978 528.72 317.978 531.19 cv
@
316.787 529.834 mo
317.887 533.568 li
319.536 529.834 li
316.787 529.834 li
f
317.978 546.874 mo
317.978 549.069 317.978 559.75 317.978 562.22 cv
@
316.787 560.864 mo
317.887 564.598 li
319.536 560.864 li
316.787 560.864 li
f
.366 lw
334.119 570.935 mo
334.119 574.577 326.894 577.532 317.993 577.532 cv
309.091 577.532 301.867 574.577 301.867 570.935 cv
301.867 567.293 309.091 564.338 317.993 564.338 cv
326.894 564.338 334.119 567.293 334.119 570.935 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
306.777 541.811 mo
(Multiply)
[5.86478 3.29849 1.83398 1.83395 1.83398 3.29849 1.83395 0 ]xsh
316.787 588.166 mo
317.887 591.9 li
319.536 588.166 li
316.787 588.166 li
f
1.099 lw
[1.0995 1.0995 ] 0 dsh
317.978 577.629 mo
317.978 579.117 317.978 586.353 317.978 588.026 cv
@
AMHIUG+Times-Roman*1 [6.597 0 0 -6.597 0 0 ]msf
306.777 572.474 mo
(Multiply)
[5.86478 3.29849 1.83398 1.83395 1.83398 3.29849 1.83395 0 ]xsh
197.8 461.391 mo
203.327 461.391 li
203.327 455.864 li
197.8 455.864 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.366 lw
[] 0 dsh
203.327 461.391 mo
197.799 461.391 li
197.799 455.864 li
203.327 455.864 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
true set_gvm
%ADOBeginSubsetFont: ZFRAAA+TimesNewRomanPS-ItalicMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /ZFRAAA+TimesNewRomanPS-ItalicMT def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle -17 def
/BaseFontName (TimesNewRomanPS-ItalicMT) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 110 /n put
dup 115 /s put
dup 116 /t put
dup 119 /w put
def
/FontBBox {-191 -250 1031 868} def
/XUID [6 44336] def
systemdict /languagelevel known {mark {systemdict
/version get exec cvi 3011 le {currentdict /XUID
undef } if} stopped cleartomark} if
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 -0 662 677 430 442 694 694] def
/OtherBlues [316 323 386 386 -216 -213] def
/FamilyBlues [-15 -0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [32] def
/StdVW [81] def
/StemSnapH [32 55 58] def
/StemSnapV [81 103] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/space <1C60D8A8C9B8707C25> |-
/e <1C60D8A8C9B77FE246CAB5AE1702FC6734F9BF28BAA824E2F8F64ABB30AD
5EB761F6FC4E64740AFA57BF008E40707528B3ACFD9DDC93FA4D090142D1E252
46F3E2125758DD6D84D94F6ABE2E5E425A309F6AD9F1CA2979966287B9026001
90F3B55AFDFBB415BBE5006F56C47D6B3A> |-
/g <1C60D8A8C9B7A73DB5801DD82D73030101AE163B6DC5A59C888E2B10ED8C
567E19E17B657DA8443D998F9C8BAD28AAC1606A8FF8092CFC3B0F738ACAA700
3FB286B40DFD4E507DB6106C0B2EEA85697CA29719A02BA834498633A0207BBD
79D3C4D43F61DFDE78F399E1F63174925AF181EE41690953C4C808E35038609D
B632878BD8AED2BC2EF45678BD98F9465C76DAE378E150C4066BD03B93C57229
70F4C1D8141C6D5D07986BB9CBBDAFCCB2A7FA63282A0CB03F0B87FB5728AB98
76372ABEAB464645A43CF252A71F42AF03E1412ED0C290DFA6D323E5895A68A0
845723ED937802A398243B32074F4429D0D9900FAB81DD60631FF9E9EAFD77C9
BC35AAF3F26C1392B76BC8A1F8111E56D87128A4564DE7DAA9A00A30BD205FFF
B81E1FEA114E3FFF0F4E99D32B1E1C897B7366495F3A8968642F5A0A7B7F1392
730FBD82944047260BF8B44D335ABAB4754EDC7FB600679292E9E413C5EAE80A
E88C6ACEFEA73F42F1C689DDB9> |-
/h <1C60D8A8C9B7A73DEE9439F9015DAEB1F709882021B3E2FB9E86F4783577
86164CCE2C12A0515CFA1125BBFCC439DC3D37617BB44E4B760E008D6E2AF002
56BC1939CD95C1809051AF489696DAE1971E6921068643E6897F87F6457DCAE5
8A03555E43FA97452D508888C9A3F5E007929ADB4FC6045BA235B60362C00E51
4403DDA730A6E8FD0DFDC8579FFC92CCB51D19286BAA9840F5BD7B6467FDF04E
8B6E02E773DE3461123FEE5FF0E6B3EDCB37757B07CBA290A9A351683E1BC472
C0BFC4FB7D880FBDB3434987E2B18116CF8FF5DDDA3E7388BEB79693D9454B6E
3D55A3049EB17E055A6F726C43D28C83ECD027E373BB3312A8036FC7D3822391
A93D6EC4A748416DD6958D1917A72EBB5BB37FF0> |-
/i <1C60D8A8C9B854D07CB2195ED2CB7A3811F624544363CB27C2EAB46FA922
57D635FC00711DA307FD50DD2D74D6206F44CBF3973EE51A5E02E1E510BEA363
B1C716A49DB78A12CBF10FA68FDBE8599C6577F6A8F76F677CE5B567AB674C74
18B5968396CD87214FA4F90B19E7D23A0B73B9C56D986D93510DB622A3E4ADDE
AC46FA3490E85E0F929997C559C22D72521AF1352AA78E64> |-
/n <1C60D8A8C9B7A73DEE9439F9015DAED66BA0A335259463391521062CCFE2
DEEF9097BFADFF13D070F191FE45826CA5F3C5569E7E3DA442574A750B0A3E18
454D84DD3D1FB870668CA9C3CF516F73C5FCE19C5E70D1FF15989816E01E9114
AF93E417B98549BF56D80914E3269E1AD9860E655623F0F22437C82EA91F1FF0
12DE72D79C9EBA5C22F7BA52B4FB04455050AAB4D2CB33BEABD1221FFED48AC4
A5E3512560444987CF63D266A04D5D612E0343535FC0553A864AE66BCB7B6540
2C2E9901DE32B8369E16A3AADF81BB55F81D6EAD844EE0EA00> |-
/s <1C60D8A8C9B7361F8AF8577DCF5EDD90927A76ACB05007E2203213D08353
7777F259DD9CD3564821C0CD42C476A05ABBE114E88F5CEA795324B9FFDE7B5D
BAFCBFB46299E95E3A8FCCDC0C64FA54D961CD2250954615F6BD41E968BE562E
7202A16D0E70EA2AC8C6B89136E14F28E4FF0EDACF9B4FA542682D2B0A79F3EA
4E4252CE2D8BA758B45234A51A7931030E29B98F04AC8E7B31AAFE4B0901EFAD
8736F861196A4BBDABC181E8B5DF0A3C3315F3A7C3A8CD86BF4F248FFE20CC51
75AD37B29E57E21F5742EE82939E3B4AC8108083CEB9BDA075EE9B349E3BC200
FC4CAF847149ECA3B5A48CB2BC2433E8F6360F6813AC84F994B739F7BC389A04
295C8CD2C47406AF8357B668127C02FBDB5D61DC0FA46528278F85D2591F86> |-
/t <1C60D8A8C9B854D07CC9A59183C227D7753BEA9C144608F6C77660D89E6B
523B8C584E0995B406951D7A4BDACCDD45B87293B2D9D568819EAC7BD692A621
94853665CF2D466AC0E9ABE31AFDBEABB02EA0E5873195B87FD335AE41BB033C
37B87C03D5AF01310027A4E0126D> |-
/w <1C60D8A8C9B64EDF97A1AEF549A5F95C7F55A196357025FD5A1D6B410EDF
0713543931008B4627D5331D7ED005200FD1251FE95163E63598B894F79F34C6
D1008F977A93EA65B3B921837A40EE0944D406817A88453C3A1734EC15C8A858
EAA465971185327F6201394B293B074E109AE3924DC4FBD2F6A1091AC61D071F> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/AMHIUI+TimesNewRomanPS-ItalicMT /ZFRAAA+TimesNewRomanPS-ItalicMT findfont ct_VMDictPut
/AMHIUI+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 68{/.notdef}rp /e /.notdef /g /h /i 
4{/.notdef}rp /n 4{/.notdef}rp /s /t 2{/.notdef}rp /w 136{/.notdef}rp]
AMHIUI+TimesNewRomanPS-ItalicMT nf
AMHIUI+TimesNewRomanPS-ItalicMT*1 [6.597 0 0 -6.597 0 0 ]msf
206.176 460.666 mo
(new weights)
[3.29849 2.92908 4.40025 1.64925 4.40025 2.92906 1.83397 3.29849 3.29851 1.83397 0 ]xsh
249.985 461.391 mo
244.458 461.391 li
244.458 455.864 li
249.985 455.864 li
cp
@
true set_gvm
%ADOBeginSubsetFont: ZFRAAA+TimesNewRomanPS-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
AMHIUI+TimesNewRomanPS-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B7D8BE6A714A5FC9B2158A1E549AF5E7E69FDEC86DA21640BB
3C6A3C57FC22E5D9E7A6F0DB13E9EB6F86AA4B84C4D49720EC371A662BADC06E
371CBC355AFB61084F1CCC059E9DCB81D038AF81ACE346A39759B583AAC5F0A3
44DCAC7A95C0A451BD9E3A9C4AC0FD5BBA486231A4EF24B52F0FBC0037ECBEDA
F75DE25C6A39EC831CFAA6FE4460FBE74E463C525E0CD44C20742B776EECC5A0
F51693E31E3017CE817C8A21F1B5D358C700F03B45487F4A3B9F1DE2A8593216
4F6DD24E1BA3F417A4> |-
/a <1C60D8A8C9B7A73D31B90F5B79025CFEC66657533474F76FC286FA481D4B
AB74CC2FA6464272BA3BDD486260C5ECCF80343C624FE90140A9652CEEFBC44E
9C0E052751548F07A595D667EF903392EAB2C0A14EB4C0B07912606417146AC9
20090281CC473BA5B472F4E9C8CD20A198C4BA4D50D726AFED328B2F29465D86
8DFB56D4831AE99ABA069A1338B03C996097E3114970D5C8B5928E12307A01A8
5786CB9730F47BA9BCE1D20B4290A6B9FED5094F70EFC97C4A4EA72CE8> |-
/c <1C60D8A8C9B77FE246C30E8C6553ED8F972677B978D120EF197A264ADBFA
872EDA0CAFF92E241A4750BCC79CD277ADA1CE04D04695CF19694CA217F2D9B0
641B76CC2EA26795F53BAD5A7BC13C16A3614B8EFA12ACA06BEF26E3E228A3B8
C2AE5A> |-
/d <1C60D8A8C9B7A73D31B90F5B79025C989023D6AA2DDDD9271EB63EBF42B3
0FE8D95F68954FF9559F0B157025059D422D48693336B9BBAAFFD0A8851B668E
E1DFB3EB432BE4E4FD3B2365F1203317E3FA95E4155C416577140C9E4AD84B08
B8AFD08DAE1A38FFEAE8B905BDA2FA92D13D6A2F023B053FA7EC38C5A0DBA0D6
B157B7DF75E0B61BEE9E83053711D1B847B7CF70E3EC44FE3A46274EB993D64B
2CFD4073B45B67138F66B9E410EF72BD50B263911240EBC7C73731EB99C41068
8316862A7A00AFD2CB45839A158458A004FC8F32F2DE6A1F6F1038DBB86E287E
4BE79827D721114B2FD70AC3D4C5E70AC40F146F8015D0D09F58763289EF2194
7CFF5AA65E7855> |-
/l <1C60D8A8C9B854D07CB2195F20B808179112145C5E63A19C874780CF17BA
C1D9D946EAE413F64C82CB1BD0CEABF461CBE45D3545236658B8FDCEE3472090
84C5317176547C802850C01CB79D5C8B1688FE9F3BE8B69823F66F4E45EF7CBF
1775542798D8189326CADB5BD2DD4B42E4234EB08F87A0A3D877859612C01D3E
A7B87CE138DFE2FB> |-
/m <1C60D8A8C9B6079F3517E075D42195DABA485328835BD4D40CAB18AA0207
6174E9C34F8EBF6B114C410D5B0124FECABB85035C37EDB91547789FFB5E1156
3FDD7271D8F3C6D9736A1FB7516A8FCA75A307922191BAF67FED6FAEDDE3907E
1D135D70C5B87AD16F45EAFEFD99E5529638E2EF60EC698A59DC17B11040B997
DFBF020B11B041430B41F8A546683E3B3BCA821A4F46562A81BD971172C406D3
A8730E66B6B6FEA52971EAB094A49D75F0AD9B0C6A82F3C9D706BCEDF7D966E3
10E0094C8EF0000EE899C503B981A2400813D1C03FE654DBF183534F32662472
81942F48D44755B607D767C5A0B8B6BD36488A0F10065D1BDB8ABE2FCB6808CD
E9C7C951B60363B98FCACDD6542AE767BEB52B6BE1D9323C0C72> |-
/o <1C60D8A8C9B7A73D31DFB2062F968BFBE3F4379943E8FB9F42A35A832F59
626E5C1680B55A4AA852B6595A18BD68D361061120158C02E475C0CDC84D23A1
913E43D3532CF4635DDABE7CB559B75990F77BC4521C79> |-
/u <1C60D8A8C9B7A73D31B90F5B6392343BB8323A2E5FB718AA0A6DC8CD75F8
BAA37A55908E68F3892342EB1068A02F8AB95DED69A1E9CB6714E25BA6A3C83D
F19D28B7643C39012B746C0816F5086DB200FAACD9C558EE5AEEBC4AC00101CA
64AE40E4C37C77FCB2B1A9A0EAE51BB6856A71A8A1C8C3AF7047CD6A75B262B5
E96A83870FF8DC1F257F44A26F03611A1D6202D07C0527DEF9076E8D913DDE47
E752BB69DDAFDF9362258C62E885B9838A492BCC1E2507908E784B0B53D88490
3117EDEE78D1B0E112D71CB062A5601AF690F6EB5881719A0855261BF53D813B
ADB4BB78EF2690EBA18A80321BB6299D5960B96D4BF8050CFB556D7401> |-
/x <1C60D8A8C9B77FE246B69580FD0317F85EAA74E3F9FF11008E90CB3AA381
274420B154AE77D8E34F7925797BE7873E589A995B73F0E2F5679F643DBEC511
A5675D1DE581C579FB1CE17818ED16276B07C5D81C666E36CFC8B8736F6C7122
80C552A70DED08EF192FA3C6F9E2400EBDC605386A8C7309C51E77C5E43581F3
A1BE041FF602C6E0C03623B22AEB0B73D54F6C0281DB5D733A7EC7C0F83E2DF6
9990AEEC44354FBAAB22FA13D2F4F4842756AC4B930B29CA949744D2BAC388BD
331F613A77B6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUI+TimesNewRomanPS-ItalicMT /Encoding get
dup 69 /E put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 108 /l put
dup 109 /m put
dup 111 /o put
dup 117 /u put
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUI+TimesNewRomanPS-ItalicMT*1 
[32{/.notdef}rp /space 36{/.notdef}rp /E 27{/.notdef}rp /a /.notdef /c 
/d /e /.notdef /g /h /i 2{/.notdef}rp /l 
/m /n /o 3{/.notdef}rp /s /t /u /.notdef 
/w /x 135{/.notdef}rp]
AMHIUI+TimesNewRomanPS-ItalicMT nf
AMHIUI+TimesNewRomanPS-ItalicMT*1 [6.597 0 0 -6.597 0 0 ]msf
128.544 461.247 mo
(Execution time)
[4.03072 2.92908 2.92906 2.92908 3.29849 1.83397 1.83397 3.29849 3.29851 1.64925 1.83397 1.83395 
4.76303 0 ]xsh
251.979 460.666 mo
(old weightsmessage)
[3.29851 1.83395 3.29849 1.64926 4.40024 2.92908 1.83395 3.29852 3.29849 1.83395 20.0055 4.76303 
2.92908 2.56628 2.56628 3.29849 3.29849 0 ]xsh
327.095 465.279 mo
326.054 465.665 324.763 466.324 323.963 467.022 cv
324.593 465.279 li
323.963 463.536 li
324.763 464.234 326.054 464.893 327.095 465.279 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
129.173 465.279 mo
324.884 465.279 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
327.095 465.279 mo
326.054 465.665 324.763 466.324 323.963 467.022 cv
324.593 465.279 li
323.963 463.536 li
324.763 464.234 326.054 464.893 327.095 465.279 cv
f
1.099 lw
4 ml
194.199 490.961 mo
199.414 490.961 li
@
200.905 485.928 mo
203.039 488.266 li
206.84 488.988 li
204.419 491.04 li
204.573 493.938 li
200.905 492.827 li
197.237 493.938 li
197.638 491.022 li
194.97 488.988 li
198.77 488.266 li
200.905 485.928 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.366 lw
1 ml
200.905 485.928 mo
203.039 488.266 li
206.84 488.988 li
204.419 491.04 li
204.573 493.938 li
200.905 492.827 li
197.237 493.938 li
197.638 491.022 li
194.97 488.988 li
198.77 488.266 li
200.905 485.928 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
238.912 498.657 mo
238.912 500.456 237.454 501.913 235.656 501.913 cv
233.858 501.913 232.4 500.456 232.4 498.657 cv
232.4 496.859 233.858 495.401 235.656 495.401 cv
237.454 495.401 238.912 496.859 238.912 498.657 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
238.912 498.657 mo
238.912 500.456 237.454 501.913 235.656 501.913 cv
233.858 501.913 232.4 500.456 232.4 498.657 cv
232.4 496.859 233.858 495.401 235.656 495.401 cv
237.454 495.401 238.912 496.859 238.912 498.657 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.099 lw
4 ml
239.279 498.657 mo
244.494 498.657 li
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
234.007 500.765 mo
(5)sh
245.618 493.625 mo
247.752 495.963 li
251.553 496.685 li
249.132 498.737 li
249.286 501.635 li
245.618 500.524 li
241.95 501.635 li
242.351 498.719 li
239.683 496.685 li
243.483 495.963 li
245.618 493.625 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.366 lw
1 ml
245.618 493.625 mo
247.752 495.963 li
251.553 496.685 li
249.132 498.737 li
249.286 501.635 li
245.618 500.524 li
241.95 501.635 li
242.351 498.719 li
239.683 496.685 li
243.483 495.963 li
245.618 493.625 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
284.274 526.451 mo
284.274 528.25 282.816 529.707 281.018 529.707 cv
279.22 529.707 277.761 528.25 277.761 526.451 cv
277.761 524.653 279.22 523.195 281.018 523.195 cv
282.816 523.195 284.274 524.653 284.274 526.451 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
284.274 526.451 mo
284.274 528.25 282.816 529.707 281.018 529.707 cv
279.22 529.707 277.761 528.25 277.761 526.451 cv
277.761 524.653 279.22 523.195 281.018 523.195 cv
282.816 523.195 284.274 524.653 284.274 526.451 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.099 lw
4 ml
284.64 526.451 mo
289.855 526.451 li
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
279.368 528.558 mo
(5)sh
290.98 521.418 mo
293.114 523.757 li
296.915 524.478 li
294.494 526.53 li
294.648 529.428 li
290.98 528.317 li
287.312 529.428 li
287.713 526.512 li
285.044 524.478 li
288.845 523.756 li
290.98 521.418 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.366 lw
1 ml
290.98 521.418 mo
293.114 523.757 li
296.915 524.478 li
294.494 526.53 li
294.648 529.428 li
290.98 528.317 li
287.312 529.428 li
287.713 526.512 li
285.044 524.478 li
288.845 523.756 li
290.98 521.418 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
327.93 551.006 mo
327.93 552.805 326.472 554.262 324.674 554.262 cv
322.876 554.262 321.418 552.805 321.418 551.006 cv
321.418 549.208 322.876 547.75 324.674 547.75 cv
326.472 547.75 327.93 549.208 327.93 551.006 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
327.93 551.006 mo
327.93 552.805 326.472 554.262 324.674 554.262 cv
322.876 554.262 321.418 552.805 321.418 551.006 cv
321.418 549.208 322.876 547.75 324.674 547.75 cv
326.472 547.75 327.93 549.208 327.93 551.006 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.099 lw
4 ml
328.296 551.006 mo
333.511 551.006 li
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.597 0 0 -6.597 0 0 ]msf
323.024 553.114 mo
(5)sh
334.636 545.973 mo
336.77 548.312 li
340.571 549.033 li
338.15 551.085 li
338.304 553.983 li
334.636 552.872 li
330.968 553.983 li
331.369 551.067 li
328.701 549.033 li
332.501 548.311 li
334.636 545.973 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.366 lw
1 ml
334.636 545.973 mo
336.77 548.312 li
340.571 549.033 li
338.15 551.085 li
338.304 553.983 li
334.636 552.872 li
330.968 553.983 li
331.369 551.067 li
328.701 549.033 li
332.501 548.311 li
334.636 545.973 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
523.49 453.204 mo
524.985 455.789 li
528.328 456.204 li
525.91 458.216 li
526.481 461.058 li
523.49 459.716 li
520.499 461.058 li
521.07 458.216 li
518.65 456.204 li
521.995 455.789 li
523.49 453.204 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
gsave
354.12 453.113 mo
354.12 591.9 li
563.622 591.9 li
563.622 453.113 li
clp
.362 lw
523.49 453.204 mo
524.985 455.789 li
528.328 456.204 li
525.91 458.216 li
526.481 461.058 li
523.49 459.716 li
520.499 461.058 li
521.07 458.216 li
518.65 456.204 li
521.995 455.789 li
523.49 453.204 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
grestore
429.14 461.057 mo
434.605 461.057 li
434.605 455.593 li
429.14 455.593 li
cp
f
.362 lw
434.605 461.057 mo
429.14 461.057 li
429.14 455.593 li
434.605 455.593 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUI+TimesNewRomanPS-ItalicMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
437.422 460.34 mo
(new weights)
[3.26114 2.8959 4.35043 1.63058 4.3504 2.8959 1.8132 3.26114 3.26117 1.8132 0 ]xsh
480.735 461.057 mo
475.271 461.057 li
475.271 455.593 li
480.735 455.593 li
cp
@
AMHIUI+TimesNewRomanPS-ItalicMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
360.669 460.915 mo
(Execution time)
[3.98508 2.8959 2.8959 2.8959 3.26114 1.8132 1.8132 3.26114 3.26117 1.63055 1.8132 1.8132 
4.70911 0 ]xsh
482.706 460.34 mo
(old weightsmessage)
[3.26114 1.8132 3.26117 1.63055 4.35043 2.8959 1.8132 3.26114 3.26114 1.8132 19.7809 4.70905 
2.89594 2.53723 2.53723 3.26111 3.26117 0 ]xsh
556.972 464.901 mo
555.943 465.283 554.666 465.934 553.875 466.624 cv
554.498 464.901 li
553.875 463.178 li
554.666 463.868 555.943 464.519 556.972 464.901 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
361.291 464.901 mo
554.786 464.901 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
556.972 464.901 mo
555.943 465.283 554.666 465.934 553.875 466.624 cv
554.498 464.901 li
553.875 463.178 li
554.666 463.868 555.943 464.519 556.972 464.901 cv
f
369.051 588.209 mo
370.138 591.9 li
371.769 588.209 li
369.051 588.209 li
f
386.186 481.104 mo
386.186 484.704 379.043 487.626 370.243 487.626 cv
361.442 487.626 354.299 484.704 354.299 481.104 cv
354.299 477.504 361.442 474.582 370.243 474.582 cv
379.043 474.582 386.186 477.504 386.186 481.104 cv
@
379.549 554.111 mo
379.549 555.889 378.107 557.33 376.33 557.33 cv
374.552 557.33 373.11 555.889 373.11 554.111 cv
373.11 552.333 374.552 550.892 376.33 550.892 cv
378.107 550.892 379.549 552.333 379.549 554.111 cv
cp
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
360.362 482.626 mo
(Source)
[3.6264 3.26114 3.26114 2.17191 2.8959 0 ]xsh
379.549 527.298 mo
379.549 529.076 378.107 530.517 376.33 530.517 cv
374.552 530.517 373.11 529.076 373.11 527.298 cv
373.11 525.52 374.552 524.079 376.33 524.079 cv
378.107 524.079 379.549 525.52 379.549 527.298 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
374.699 556.195 mo
(1)sh
379.549 519.809 mo
379.549 521.587 378.107 523.028 376.33 523.028 cv
374.552 523.028 373.11 521.587 373.11 519.809 cv
373.11 518.031 374.552 516.59 376.33 516.59 cv
378.107 516.59 379.549 518.031 379.549 519.809 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
374.699 529.381 mo
(2)sh
386.186 509.603 mo
386.186 513.204 379.043 516.125 370.243 516.125 cv
361.442 516.125 354.299 513.204 354.299 509.603 cv
354.299 506.003 361.442 503.081 370.243 503.081 cv
379.043 503.081 386.186 506.003 386.186 509.603 cv
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
374.699 521.893 mo
(3)sh
1.449 lw
370.228 487.626 mo
370.228 489.486 370.228 498.533 370.228 500.624 cv
@
369.051 499.284 mo
370.138 502.976 li
371.769 499.284 li
369.051 499.284 li
f
.362 lw
386.186 540.234 mo
386.186 543.834 379.043 546.756 370.243 546.756 cv
361.442 546.756 354.299 543.834 354.299 540.234 cv
354.299 536.633 361.442 533.712 370.243 533.712 cv
379.043 533.712 386.186 536.633 386.186 540.234 cv
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
359.154 511.125 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26114 1.8132 0 ]xsh
1.449 lw
370.228 516.083 mo
370.228 518.254 370.228 528.813 370.228 531.255 cv
@
369.051 529.915 mo
370.138 533.607 li
371.769 529.915 li
369.051 529.915 li
f
370.228 546.762 mo
370.228 548.932 370.228 559.492 370.228 561.934 cv
@
369.051 560.594 mo
370.138 564.286 li
371.769 560.594 li
369.051 560.594 li
f
.362 lw
386.186 570.551 mo
386.186 574.151 379.043 577.073 370.243 577.073 cv
361.442 577.073 354.299 574.151 354.299 570.551 cv
354.299 566.95 361.442 564.029 370.243 564.029 cv
379.043 564.029 386.186 566.95 386.186 570.551 cv
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
359.154 541.756 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26114 1.8132 0 ]xsh
1.449 lw
[1.087 1.087 ] 0 dsh
370.228 577.292 mo
370.228 578.782 370.228 586.031 370.228 587.707 cv
@
.362 lw
[] 0 dsh
379.549 497.853 mo
379.549 499.631 378.107 501.072 376.33 501.072 cv
374.552 501.072 373.11 499.631 373.11 497.853 cv
373.11 496.075 374.552 494.634 376.33 494.634 cv
378.107 494.634 379.549 496.075 379.549 497.853 cv
cp
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
359.154 572.072 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26114 1.8132 0 ]xsh
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
374.699 499.936 mo
(4)sh
384.677 473.355 mo
386.172 475.94 li
389.516 476.355 li
387.097 478.367 li
387.668 481.209 li
384.677 479.867 li
381.686 481.209 li
382.257 478.367 li
379.838 476.355 li
383.182 475.94 li
384.677 473.355 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
384.677 473.355 mo
386.172 475.94 li
389.516 476.355 li
387.097 478.367 li
387.668 481.209 li
384.677 479.867 li
381.686 481.209 li
382.257 478.367 li
379.838 476.355 li
383.182 475.94 li
384.677 473.355 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
454.518 588.209 mo
455.605 591.9 li
457.236 588.209 li
454.518 588.209 li
f
471.654 481.104 mo
471.654 484.704 464.511 487.626 455.711 487.626 cv
446.91 487.626 439.767 484.704 439.767 481.104 cv
439.767 477.504 446.91 474.582 455.711 474.582 cv
464.511 474.582 471.654 477.504 471.654 481.104 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
471.654 481.104 mo
471.654 484.704 464.511 487.626 455.711 487.626 cv
446.91 487.626 439.767 484.704 439.767 481.104 cv
439.767 477.504 446.91 474.582 455.711 474.582 cv
464.511 474.582 471.654 477.504 471.654 481.104 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
465.009 554.499 mo
465.009 556.277 463.568 557.718 461.79 557.718 cv
460.012 557.718 458.57 556.277 458.57 554.499 cv
458.57 552.721 460.012 551.28 461.79 551.28 cv
463.568 551.28 465.009 552.721 465.009 554.499 cv
cp
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
445.829 482.626 mo
(Source)
[3.6264 3.26114 3.26114 2.17191 2.8959 0 ]xsh
465.009 528.988 mo
465.009 530.767 463.568 532.207 461.79 532.207 cv
460.012 532.207 458.57 530.767 458.57 528.988 cv
458.57 527.21 460.012 525.769 461.79 525.769 cv
463.568 525.769 465.009 527.21 465.009 528.988 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
460.16 556.584 mo
(2)sh
465.009 521.526 mo
465.009 523.304 463.568 524.745 461.79 524.745 cv
460.012 524.745 458.57 523.304 458.57 521.526 cv
458.57 519.748 460.012 518.307 461.79 518.307 cv
463.568 518.307 465.009 519.748 465.009 521.526 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
460.16 531.073 mo
(3)sh
460.16 523.61 mo
(4)sh
465.009 490.847 mo
465.009 492.625 463.568 494.066 461.79 494.066 cv
460.012 494.066 458.57 492.625 458.57 490.847 cv
458.57 489.069 460.012 487.627 461.79 487.627 cv
463.568 487.627 465.009 489.069 465.009 490.847 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
465.009 490.847 mo
465.009 492.625 463.568 494.066 461.79 494.066 cv
460.012 494.066 458.57 492.625 458.57 490.847 cv
458.57 489.069 460.012 487.627 461.79 487.627 cv
463.568 487.627 465.009 489.069 465.009 490.847 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
460.16 492.931 mo
(6)sh
465.009 498.036 mo
465.009 499.815 463.568 501.255 461.79 501.255 cv
460.012 501.255 458.57 499.815 458.57 498.036 cv
458.57 496.258 460.012 494.817 461.79 494.817 cv
463.568 494.817 465.009 496.258 465.009 498.036 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
465.009 498.036 mo
465.009 499.815 463.568 501.255 461.79 501.255 cv
460.012 501.255 458.57 499.815 458.57 498.036 cv
458.57 496.258 460.012 494.817 461.79 494.817 cv
463.568 494.817 465.009 496.258 465.009 498.036 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
460.16 500.121 mo
(5)sh
471.654 509.603 mo
471.654 513.204 464.511 516.125 455.711 516.125 cv
446.91 516.125 439.767 513.204 439.767 509.603 cv
439.767 506.003 446.91 503.081 455.711 503.081 cv
464.511 503.081 471.654 506.003 471.654 509.603 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
471.654 509.603 mo
471.654 513.204 464.511 516.125 455.711 516.125 cv
446.91 516.125 439.767 513.204 439.767 509.603 cv
439.767 506.003 446.91 503.081 455.711 503.081 cv
464.511 503.081 471.654 506.003 471.654 509.603 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.449 lw
455.696 487.626 mo
455.696 489.486 455.696 498.533 455.696 500.624 cv
@
454.518 499.284 mo
455.605 502.976 li
457.236 499.284 li
454.518 499.284 li
f
.362 lw
471.654 540.234 mo
471.654 543.834 464.511 546.756 455.711 546.756 cv
446.91 546.756 439.767 543.834 439.767 540.234 cv
439.767 536.633 446.91 533.712 455.711 533.712 cv
464.511 533.712 471.654 536.633 471.654 540.234 cv
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
444.622 511.125 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26117 1.81317 0 ]xsh
1.449 lw
455.696 516.083 mo
455.696 518.254 455.696 528.813 455.696 531.255 cv
@
454.518 529.915 mo
455.605 533.607 li
457.236 529.915 li
454.518 529.915 li
f
455.696 546.762 mo
455.696 548.932 455.696 559.492 455.696 561.934 cv
@
454.518 560.594 mo
455.605 564.286 li
457.236 560.594 li
454.518 560.594 li
f
.362 lw
471.654 570.551 mo
471.654 574.151 464.511 577.073 455.711 577.073 cv
446.91 577.073 439.767 574.151 439.767 570.551 cv
439.767 566.95 446.91 564.029 455.711 564.029 cv
464.511 564.029 471.654 566.95 471.654 570.551 cv
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
444.622 541.756 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26117 1.81317 0 ]xsh
1.449 lw
[1.087 1.087 ] 0 dsh
455.696 577.292 mo
455.696 578.782 455.696 586.031 455.696 587.707 cv
@
1.087 lw
439.946 514.765 mo
439.946 514.765 439.946 518.082 454.684 518.082 cv
469.421 518.082 469.421 514.765 469.421 514.765 cv
@
498.111 588.209 mo
499.198 591.9 li
500.829 588.209 li
498.111 588.209 li
f
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
444.622 572.072 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26117 1.81317 0 ]xsh
515.247 481.104 mo
515.247 484.704 508.104 487.626 499.304 487.626 cv
490.503 487.626 483.36 484.704 483.36 481.104 cv
483.36 477.504 490.503 474.582 499.304 474.582 cv
508.104 474.582 515.247 477.504 515.247 481.104 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.362 lw
[] 0 dsh
515.247 481.104 mo
515.247 484.704 508.104 487.626 499.304 487.626 cv
490.503 487.626 483.36 484.704 483.36 481.104 cv
483.36 477.504 490.503 474.582 499.304 474.582 cv
508.104 474.582 515.247 477.504 515.247 481.104 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
508.602 559.934 mo
508.602 561.712 507.16 563.153 505.383 563.153 cv
503.605 563.153 502.163 561.712 502.163 559.934 cv
502.163 558.156 503.605 556.715 505.383 556.715 cv
507.16 556.715 508.602 558.156 508.602 559.934 cv
cp
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
489.422 482.626 mo
(Source)
[3.6264 3.26114 3.26114 2.17191 2.8959 0 ]xsh
508.602 552.446 mo
508.602 554.224 507.16 555.665 505.383 555.665 cv
503.605 555.665 502.163 554.224 502.163 552.446 cv
502.163 550.668 503.605 549.227 505.383 549.227 cv
507.16 549.227 508.602 550.668 508.602 552.446 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
503.752 562.019 mo
(3)sh
503.752 554.531 mo
(4)sh
508.602 498.293 mo
508.602 500.072 507.16 501.512 505.383 501.512 cv
503.605 501.512 502.163 500.072 502.163 498.293 cv
502.163 496.515 503.605 495.074 505.383 495.074 cv
507.16 495.074 508.602 496.515 508.602 498.293 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
508.602 498.293 mo
508.602 500.072 507.16 501.512 505.383 501.512 cv
503.605 501.512 502.163 500.072 502.163 498.293 cv
502.163 496.515 503.605 495.074 505.383 495.074 cv
507.16 495.074 508.602 496.515 508.602 498.293 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
503.752 500.378 mo
(6)sh
508.602 523.596 mo
508.602 525.374 507.16 526.815 505.383 526.815 cv
503.605 526.815 502.163 525.374 502.163 523.596 cv
502.163 521.818 503.605 520.377 505.383 520.377 cv
507.16 520.377 508.602 521.818 508.602 523.596 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
508.602 523.596 mo
508.602 525.374 507.16 526.815 505.383 526.815 cv
503.605 526.815 502.163 525.374 502.163 523.596 cv
502.163 521.818 503.605 520.377 505.383 520.377 cv
507.16 520.377 508.602 521.818 508.602 523.596 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
503.752 525.681 mo
(5)sh
508.602 490.967 mo
508.602 492.745 507.16 494.186 505.383 494.186 cv
503.605 494.186 502.163 492.745 502.163 490.967 cv
502.163 489.189 503.605 487.748 505.383 487.748 cv
507.16 487.748 508.602 489.189 508.602 490.967 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
508.602 490.967 mo
508.602 492.745 507.16 494.186 505.383 494.186 cv
503.605 494.186 502.163 492.745 502.163 490.967 cv
502.163 489.189 503.605 487.748 505.383 487.748 cv
507.16 487.748 508.602 489.189 508.602 490.967 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
503.752 493.052 mo
(7)sh
515.247 509.603 mo
515.247 513.204 508.104 516.125 499.304 516.125 cv
490.503 516.125 483.36 513.204 483.36 509.603 cv
483.36 506.003 490.503 503.081 499.304 503.081 cv
508.104 503.081 515.247 506.003 515.247 509.603 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
515.247 509.603 mo
515.247 513.204 508.104 516.125 499.304 516.125 cv
490.503 516.125 483.36 513.204 483.36 509.603 cv
483.36 506.003 490.503 503.081 499.304 503.081 cv
508.104 503.081 515.247 506.003 515.247 509.603 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.449 lw
499.289 487.626 mo
499.289 489.486 499.289 498.533 499.289 500.624 cv
@
498.111 499.284 mo
499.198 502.976 li
500.829 499.284 li
498.111 499.284 li
f
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
488.214 511.125 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26114 1.8132 0 ]xsh
515.247 540.234 mo
515.247 543.834 508.104 546.756 499.304 546.756 cv
490.503 546.756 483.36 543.834 483.36 540.234 cv
483.36 536.633 490.503 533.712 499.304 533.712 cv
508.104 533.712 515.247 536.633 515.247 540.234 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.362 lw
515.247 540.234 mo
515.247 543.834 508.104 546.756 499.304 546.756 cv
490.503 546.756 483.36 543.834 483.36 540.234 cv
483.36 536.633 490.503 533.712 499.304 533.712 cv
508.104 533.712 515.247 536.633 515.247 540.234 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.449 lw
499.289 516.083 mo
499.289 518.254 499.289 528.813 499.289 531.255 cv
@
498.111 529.915 mo
499.198 533.607 li
500.829 529.915 li
498.111 529.915 li
f
499.289 546.757 mo
499.289 549.135 499.289 560.707 499.289 563.383 cv
@
498.111 560.594 mo
499.198 564.286 li
500.829 560.594 li
498.111 560.594 li
f
.362 lw
515.247 570.551 mo
515.247 574.151 508.104 577.073 499.304 577.073 cv
490.503 577.073 483.36 574.151 483.36 570.551 cv
483.36 566.95 490.503 564.029 499.304 564.029 cv
508.104 564.029 515.247 566.95 515.247 570.551 cv
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
488.214 541.756 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26114 1.8132 0 ]xsh
1.449 lw
[1.087 1.087 ] 0 dsh
499.289 577.292 mo
499.289 578.782 499.289 586.031 499.289 587.707 cv
@
1.087 lw
483.512 545.686 mo
483.512 545.686 483.512 549.003 498.25 549.003 cv
512.987 549.003 512.987 545.686 512.987 545.686 cv
@
541.294 588.209 mo
542.381 591.9 li
544.012 588.209 li
541.294 588.209 li
f
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
488.214 572.072 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26114 1.8132 0 ]xsh
558.43 481.104 mo
558.43 484.704 551.287 487.626 542.487 487.626 cv
533.686 487.626 526.543 484.704 526.543 481.104 cv
526.543 477.504 533.686 474.582 542.487 474.582 cv
551.287 474.582 558.43 477.504 558.43 481.104 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.362 lw
[] 0 dsh
558.43 481.104 mo
558.43 484.704 551.287 487.626 542.487 487.626 cv
533.686 487.626 526.543 484.704 526.543 481.104 cv
526.543 477.504 533.686 474.582 542.487 474.582 cv
551.287 474.582 558.43 477.504 558.43 481.104 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
551.785 558.123 mo
551.785 559.901 550.343 561.342 548.566 561.342 cv
546.788 561.342 545.346 559.901 545.346 558.123 cv
545.346 556.345 546.788 554.904 548.566 554.904 cv
550.343 554.904 551.785 556.345 551.785 558.123 cv
cp
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
532.605 482.626 mo
(Source)
[3.6264 3.26117 3.26111 2.17188 2.89594 0 ]xsh
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
546.935 560.208 mo
(4)sh
551.785 527.686 mo
551.785 529.464 550.343 530.905 548.566 530.905 cv
546.788 530.905 545.346 529.464 545.346 527.686 cv
545.346 525.908 546.788 524.467 548.566 524.467 cv
550.343 524.467 551.785 525.908 551.785 527.686 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
551.785 527.686 mo
551.785 529.464 550.343 530.905 548.566 530.905 cv
546.788 530.905 545.346 529.464 545.346 527.686 cv
545.346 525.908 546.788 524.467 548.566 524.467 cv
550.343 524.467 551.785 525.908 551.785 527.686 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
551.785 550.629 mo
551.785 552.407 550.343 553.848 548.566 553.848 cv
546.788 553.848 545.346 552.407 545.346 550.629 cv
545.346 548.851 546.788 547.41 548.566 547.41 cv
550.343 547.41 551.785 548.851 551.785 550.629 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
551.785 550.629 mo
551.785 552.407 550.343 553.848 548.566 553.848 cv
546.788 553.848 545.346 552.407 545.346 550.629 cv
545.346 548.851 546.788 547.41 548.566 547.41 cv
550.343 547.41 551.785 548.851 551.785 550.629 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
546.935 529.771 mo
(6)sh
551.785 519.955 mo
551.785 521.733 550.343 523.174 548.566 523.174 cv
546.788 523.174 545.346 521.733 545.346 519.955 cv
545.346 518.177 546.788 516.736 548.566 516.736 cv
550.343 516.736 551.785 518.177 551.785 519.955 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
551.785 519.955 mo
551.785 521.733 550.343 523.174 548.566 523.174 cv
546.788 523.174 545.346 521.733 545.346 519.955 cv
545.346 518.177 546.788 516.736 548.566 516.736 cv
550.343 516.736 551.785 518.177 551.785 519.955 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
546.935 522.039 mo
(7)sh
551.785 494.459 mo
551.785 496.238 550.343 497.678 548.566 497.678 cv
546.788 497.678 545.346 496.238 545.346 494.459 cv
545.346 492.681 546.788 491.24 548.566 491.24 cv
550.343 491.24 551.785 492.681 551.785 494.459 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
551.785 494.459 mo
551.785 496.238 550.343 497.678 548.566 497.678 cv
546.788 497.678 545.346 496.238 545.346 494.459 cv
545.346 492.681 546.788 491.24 548.566 491.24 cv
550.343 491.24 551.785 492.681 551.785 494.459 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
546.935 496.543 mo
(8)sh
546.935 552.713 mo
(5)sh
558.43 509.603 mo
558.43 513.204 551.287 516.125 542.487 516.125 cv
533.686 516.125 526.543 513.204 526.543 509.603 cv
526.543 506.003 533.686 503.081 542.487 503.081 cv
551.287 503.081 558.43 506.003 558.43 509.603 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
558.43 509.603 mo
558.43 513.204 551.287 516.125 542.487 516.125 cv
533.686 516.125 526.543 513.204 526.543 509.603 cv
526.543 506.003 533.686 503.081 542.487 503.081 cv
551.287 503.081 558.43 506.003 558.43 509.603 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.449 lw
542.472 487.626 mo
542.472 489.486 542.472 498.533 542.472 500.624 cv
@
541.294 499.284 mo
542.381 502.976 li
544.012 499.284 li
541.294 499.284 li
f
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
531.397 511.125 mo
(Multiply)
[5.7984 3.26111 1.81323 1.81317 1.81323 3.26111 1.81323 0 ]xsh
558.43 540.234 mo
558.43 543.834 551.287 546.756 542.487 546.756 cv
533.686 546.756 526.543 543.834 526.543 540.234 cv
526.543 536.633 533.686 533.712 542.487 533.712 cv
551.287 533.712 558.43 536.633 558.43 540.234 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.362 lw
558.43 540.234 mo
558.43 543.834 551.287 546.756 542.487 546.756 cv
533.686 546.756 526.543 543.834 526.543 540.234 cv
526.543 536.633 533.686 533.712 542.487 533.712 cv
551.287 533.712 558.43 536.633 558.43 540.234 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
1.449 lw
542.472 516.083 mo
542.472 518.254 542.472 528.813 542.472 531.255 cv
@
541.294 529.915 mo
542.381 533.607 li
544.012 529.915 li
541.294 529.915 li
f
542.472 546.762 mo
542.472 548.932 542.472 559.492 542.472 561.934 cv
@
541.294 560.594 mo
542.381 564.286 li
544.012 560.594 li
541.294 560.594 li
f
.362 lw
558.43 570.551 mo
558.43 574.151 551.287 577.073 542.487 577.073 cv
533.686 577.073 526.543 574.151 526.543 570.551 cv
526.543 566.95 533.686 564.029 542.487 564.029 cv
551.287 564.029 558.43 566.95 558.43 570.551 cv
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
531.397 541.756 mo
(Multiply)
[5.7984 3.26111 1.81323 1.81317 1.81323 3.26111 1.81323 0 ]xsh
1.449 lw
[1.087 1.087 ] 0 dsh
542.472 577.292 mo
542.472 578.782 542.472 586.031 542.472 587.707 cv
@
1.087 lw
527.077 551.604 mo
527.077 551.604 527.077 554.921 541.815 554.921 cv
556.552 554.921 556.552 551.604 556.552 551.604 cv
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
531.397 572.072 mo
(Multiply)
[5.7984 3.26111 1.81323 1.81317 1.81323 3.26111 1.81323 0 ]xsh
421.684 490.766 mo
421.684 492.544 420.242 493.985 418.465 493.985 cv
416.687 493.985 415.245 492.544 415.245 490.766 cv
415.245 488.988 416.687 487.547 418.465 487.547 cv
420.242 487.547 421.684 488.988 421.684 490.766 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
.362 lw
[] 0 dsh
421.684 490.766 mo
421.684 492.544 420.242 493.985 418.465 493.985 cv
416.687 493.985 415.245 492.544 415.245 490.766 cv
415.245 488.988 416.687 487.547 418.465 487.547 cv
420.242 487.547 421.684 488.988 421.684 490.766 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
411.194 588.209 mo
412.281 591.9 li
413.912 588.209 li
411.194 588.209 li
f
428.33 481.104 mo
428.33 484.704 421.187 487.626 412.387 487.626 cv
403.586 487.626 396.443 484.704 396.443 481.104 cv
396.443 477.504 403.586 474.582 412.387 474.582 cv
421.187 474.582 428.33 477.504 428.33 481.104 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
428.33 481.104 mo
428.33 484.704 421.187 487.626 412.387 487.626 cv
403.586 487.626 396.443 484.704 396.443 481.104 cv
396.443 477.504 403.586 474.582 412.387 474.582 cv
421.187 474.582 428.33 477.504 428.33 481.104 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
421.684 554.111 mo
421.684 555.889 420.242 557.33 418.465 557.33 cv
416.687 557.33 415.245 555.889 415.245 554.111 cv
415.245 552.333 416.687 550.892 418.465 550.892 cv
420.242 550.892 421.684 552.333 421.684 554.111 cv
cp
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
402.505 482.626 mo
(Source)
[3.6264 3.26114 3.26117 2.17188 2.89587 0 ]xsh
421.684 527.298 mo
421.684 529.076 420.242 530.517 418.465 530.517 cv
416.687 530.517 415.245 529.076 415.245 527.298 cv
415.245 525.52 416.687 524.079 418.465 524.079 cv
420.242 524.079 421.684 525.52 421.684 527.298 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
416.834 556.195 mo
(1)sh
421.684 519.809 mo
421.684 521.587 420.242 523.028 418.465 523.028 cv
416.687 523.028 415.245 521.587 415.245 519.809 cv
415.245 518.031 416.687 516.59 418.465 516.59 cv
420.242 516.59 421.684 518.031 421.684 519.809 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
416.834 529.381 mo
(2)sh
421.684 498.215 mo
421.684 499.993 420.242 501.434 418.465 501.434 cv
416.687 501.434 415.245 499.993 415.245 498.215 cv
415.245 496.437 416.687 494.996 418.465 494.996 cv
420.242 494.996 421.684 496.437 421.684 498.215 cv
cp
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
416.834 521.893 mo
(3)sh
416.834 500.299 mo
(4)sh
428.33 509.603 mo
428.33 513.204 421.187 516.125 412.387 516.125 cv
403.586 516.125 396.443 513.204 396.443 509.603 cv
396.443 506.003 403.586 503.081 412.387 503.081 cv
421.187 503.081 428.33 506.003 428.33 509.603 cv
@
AMHIUH+TimesNewRomanPS-BoldMT*1 [6.5223 0 0 -6.5223 0 0 ]msf
416.834 492.849 mo
(5)sh
1.449 lw
412.372 487.626 mo
412.372 489.486 412.372 498.533 412.372 500.624 cv
@
411.194 499.284 mo
412.281 502.976 li
413.912 499.284 li
411.194 499.284 li
f
.362 lw
428.33 540.234 mo
428.33 543.834 421.187 546.756 412.387 546.756 cv
403.586 546.756 396.443 543.834 396.443 540.234 cv
396.443 536.633 403.586 533.712 412.387 533.712 cv
421.187 533.712 428.33 536.633 428.33 540.234 cv
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
401.297 511.125 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26117 1.81317 0 ]xsh
1.449 lw
412.372 516.083 mo
412.372 518.254 412.372 528.813 412.372 531.255 cv
@
411.194 529.915 mo
412.281 533.607 li
413.912 529.915 li
411.194 529.915 li
f
412.372 546.762 mo
412.372 548.932 412.372 559.492 412.372 561.934 cv
@
411.194 560.594 mo
412.281 564.286 li
413.912 560.594 li
411.194 560.594 li
f
.362 lw
428.33 570.551 mo
428.33 574.151 421.187 577.073 412.387 577.073 cv
403.586 577.073 396.443 574.151 396.443 570.551 cv
396.443 566.95 403.586 564.029 412.387 564.029 cv
421.187 564.029 428.33 566.95 428.33 570.551 cv
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
401.297 541.756 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26117 1.81317 0 ]xsh
1.449 lw
[1.087 1.087 ] 0 dsh
412.372 577.292 mo
412.372 578.782 412.372 586.031 412.372 587.707 cv
@
1.087 lw
396.38 491.816 mo
396.38 491.816 396.38 495.133 411.118 495.133 cv
425.855 495.133 425.855 491.816 425.855 491.816 cv
@
AMHIUG+Times-Roman*1 [6.5223 0 0 -6.5223 0 0 ]msf
401.297 572.072 mo
(Multiply)
[5.79837 3.26114 1.8132 1.8132 1.8132 3.26117 1.81317 0 ]xsh
556.972 464.901 mo
555.943 465.283 554.666 465.934 553.875 466.624 cv
554.498 464.901 li
553.875 463.178 li
554.666 463.868 555.943 464.519 556.972 464.901 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
.362 lw
[] 0 dsh
361.291 464.901 mo
554.785 464.901 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
556.972 464.901 mo
555.943 465.283 554.666 465.934 553.875 466.624 cv
554.498 464.901 li
553.875 463.178 li
554.666 463.868 555.943 464.519 556.972 464.901 cv
f
428.606 488.145 mo
430.101 490.73 li
433.445 491.145 li
431.025 493.157 li
431.596 495.999 li
428.606 494.657 li
425.615 495.999 li
426.186 493.157 li
423.766 491.145 li
427.111 490.73 li
428.606 488.145 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
428.606 488.145 mo
430.101 490.73 li
433.445 491.145 li
431.025 493.157 li
431.596 495.999 li
428.606 494.657 li
425.615 495.999 li
426.186 493.157 li
423.766 491.145 li
427.111 490.73 li
428.606 488.145 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
470.375 512.827 mo
471.87 515.412 li
475.214 515.827 li
472.795 517.839 li
473.366 520.681 li
470.375 519.339 li
467.384 520.681 li
467.955 517.839 li
465.535 515.827 li
468.88 515.412 li
470.375 512.827 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
470.375 512.827 mo
471.87 515.412 li
475.214 515.827 li
472.795 517.839 li
473.366 520.681 li
470.375 519.339 li
467.384 520.681 li
467.955 517.839 li
465.535 515.827 li
468.88 515.412 li
470.375 512.827 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
514.219 543.506 mo
515.714 546.091 li
519.058 546.506 li
516.639 548.518 li
517.21 551.36 li
514.219 550.018 li
511.228 551.36 li
511.799 548.518 li
509.379 546.506 li
512.724 546.091 li
514.219 543.506 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
514.219 543.506 mo
515.714 546.091 li
519.058 546.506 li
516.639 548.518 li
517.21 551.36 li
514.219 550.018 li
511.228 551.36 li
511.799 548.518 li
509.379 546.506 li
512.724 546.091 li
514.219 543.506 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
558.667 548.579 mo
560.162 551.164 li
563.506 551.579 li
561.087 553.591 li
561.658 556.433 li
558.667 555.091 li
555.676 556.433 li
556.247 553.591 li
553.827 551.579 li
557.172 551.164 li
558.667 548.579 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.73333 .74118 .75294 colr
f
gsave
354.12 453.113 mo
354.12 591.9 li
563.622 591.9 li
563.622 453.113 li
clp
558.667 548.579 mo
560.162 551.164 li
563.506 551.579 li
561.087 553.591 li
561.658 556.433 li
558.667 555.091 li
555.676 556.433 li
556.247 553.591 li
553.827 551.579 li
557.172 551.164 li
558.667 548.579 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.13725 .12157 .12549 colr
@
grestore
0 gry
true set_gvm
%ADOBeginSubsetFont: GGGBAA+CMBX9 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
AMHIUF+CMBX9 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/ff <1C60D8A8C9B08A9443BCF7EEB1E0B3B13E2DE3A6C4FBABD04ECC3EC2B40
1BB3F7639797942BD83137A8A0681DCF4D776B9BC1D5705747C5EA1E353C7885
069EC54CAF95561DA07AE37B8F19A9993F90D02F5F78AA2EDB8C39231E53E72A
2A1DF455238EC20B30E7671FA5A1102A63CD3AAE3218337CE609FF9A7B1E527C
99E0E1D7B523880A8F7E30D61E2B6730FED59B2A78DF07E4C9BCB56D05661CDA
9839EBEB6598FA00D3CAB4E75A4D1313AD9F73A2E635718EFF24CDD5E86E869D
832A45DFCD923108DF855A463BF8A19F211ABF2A3F8C9386567A71C393D0C2A4
E45A308D25D8E435D57FEB4B849> |-
/numbersign <1C60D8A8C9B08A953AFDC45F691A87ABB8613B0988D01B78AEB
619FC04D07CF71DCF8BD86D59B1E7925FFCEAE15D6FB056DEE7A6F3F77965032
12A354C1CA53DD53B24FF2F4BA98DDDE7AAB51AFB49850A3D4F0806E197ED8A7
B9C9912586163CC7E65CD1645D5CE4F72FC7DDBF977BB9098CE331F2C35AC407
28789CC2126B1F110CAE463E28199B91C80AAF5D54B57298238D598CF39DFFAB
4ADD4060A598ECA49A3E414DBE9D53E297D001E6E6BA8DB0A2AE8DD0AADF53A2
F22482786CD3CEBB7772E3CDBEF1BC1BC9F475621107A2835B078A0696F4D1A8
777A54B4D6C84DBEEF26F5F2C402ADF1400C0D8EA> |-
/parenleft <1C60D8A8C9B08A95AF0DB396ABDAC85BC870B452E41229B0C6B9
C6765F36F6578C77DD46D0FDDFBC633B61A1FC70FC55FC8484A8CC93FE2BE0D3
42DB23C27F76D8A51B2FDCDABDBBC611B7B629E35C73A9157B02C658CCC7BB8C
BBD51494847163298C877D49FAD3627FEB3E2A67D595> |-
/parenright <1C60D8A8C9B08A95AF0DB396ABDAC85BC870B452E412293EB97
F6E3EFF0BE0F562D7036044C9CC0E7F19713481F21932AB6C8224CCDA013D805
E552ED301181683FEAD7A3F5CAB4544A3398065F38BAB9E649F2B4B76A14350E
554C98D96E9460CF9940AE204A5DBCA5CEF7ABF83C784> |-
/comma <1C60D8A8C9B08A95104D8565ABCABFDBCE97C6843141D1F70E0BC29C
E653CE398841AE06E2ABE5FC0D847682E15CD4EF6F101F40CC4CA30412642A1D
5D1E6958FBB79561B61D97BDD38ACAABC7B68A> |-
/four <1C60D8A8C9B08A95FB066076D5BF1527DE31788277A701BCDCE13B973
21C4302712BE78175576D04A7D0D6B6DED2A22C6EF3C8759B3285C4BFC576B75
D856E1FA0AF251C6BD0B52BDA2705E425C36C7A941CE2AEBCDE4934A348C4ED2
B18660345FF73250A9A3E5D> |-
/five <1C60D8A8C9B08A95FB066076D5BFE1A2184BBAEE8F0188048D946E1D3
5D2EF565CE5DB6CBFDD88752D4FA14EAFEE311192C98D202CAF3834520D90BFF
1F4C77B87A1F2FD5B28A98113B4FFDFC35372910518EFD27175785FA273C6520
8A73B82B3CC51E0088C88A1CBB17F27792C9EAFE79927821560CF3C80FE545E0
1164886A252D49E4ADC531EC4EA5223EF1DCB58B2AF44631F5440E6B30BDCFD5
203A180AEC3ED3E49C6BF55F01A1DDDA3008364822843F52A45CBB537236E641
1> |-
/six <1C60D8A8C9B08A95FB066076D5BFE1A21856231BF306E46611ADEB157A
1497FDD64013CBD7B9F8A15CF0707E6BB074EF39D2C51D0AD9A058B0928C957F
28EC69A22DDAB13A700232E49D5410ED5198348FB55B9E68FDFCEAB0A7CFD7A9
CC8978E4D9EE19368BEEDE362F6A4E7A65A913B16486BA12C0E95CF87EE02546
DF5C7734022561D2928DB266D992EA011E5A89A30C628AAC0443CC127C215A88
251509647B3AD92C1865E3404E6F460A2C3D8F> |-
/semicolon <1C60D8A8C9B08A95104D8565ABCABFDBCE97C6843141C75CDB48
52AF3D34F2AE421294AAA10050714F74CC3A3A149DE3812965AD3FD8EA2EEA43
DA88B9B58B360F2F988CC1074E7415D2DAD1612BC4F326DD179BB3236723AFC4
D66D09932E02E63E4A0DC29D04A732D30DB79946> |-
/C <1C60D8A8C9B08A940352EA45B4AA710165EB9F7FE3AAA778F3BAEDAE5DBF
F08C8B815D16EF0D3AF45EB7D3CE5F68B689A09F0FC92078CD34B5010A5754D3
F87D78429AC4BABC7801A029B6C54F0C23EF4B53121A73F9E3FEB0788BF89F06
4EBCD6F6E1EDD8FAD6C6FDD9C4B5CC9A8EA905940D5D46F317409B4D5F2E82A4
64B3B489648DAE272B6D0A9A768F7CF24F726F903E6FC96EE4CFCE0AA5F5> |-
/E <1C60D8A8C9B08A9461054F2AD7296995C2D1E4F2C834295CA63A6960FAA9
73ABCAEBD702658FFABF440E7BE61AF77688FD401B2378E98E0CFABABE5BEB17
0D68CEDDB8219E518917B093614ABC5477854DC08F2A9E68D6E46166A8050A53
18C4FCC58C47AFD555817A0D2E098B2E93F8DF3CD69C64A0DA> |-
/S <1C60D8A8C9B08A950515D3E7C54D617C2393929B1CDADA10211029B08E3B
077D43757319764FA59DC09E175B893798AB917648CB24DEEC20218A5F8F1C65
0960DBCD7E6FDCB084A4372E12BC05968751108A278B6B3ABB45F1AB7B50A021
FC3CFB5A0C7B7DE5BCFDBAB19E82B23FE3165ABDFC366DE67B72D5BEDBC9E264
F6047B61ED192C152EA7BBA434DB6B8E23D4973F9699BD4F9D25E710C541DB0A
7AC9C50DA6968DE1D4B58E7BB8324E8D274537FC7455C976611CBF4000563994
3D351CD40458AD8C428CEA9F639E4C> |-
/b <1C60D8A8C9B08A950515D3E7C54D9B36ADC1168D9F9F1643B99C73F46695
FCA1BEF1A1F9C7160BF351D5BA89530349DB6D2FC1B33FDD58DB2DC3C3484565
0D94EAB896A99E54ECC48ECB8172EA7F4181E7D5681DCC943670B8FA265937BB
9FC1676FB6E7306CF195B55306BAD7AE7502C41F3D65FAEAD561C559B5541658
7D598D3AD93D> |-
/f <1C60D8A8C9B08A9591A285494FC1395B334617A4EADBF58CA864BB3CA289
7A8BB8B581321AD69AE2434AAEA0C49C5E19468D820625656DE94A35207A162E
7BCA101A26E79BA845EB0A53C6FB380FD2E08F913B1ACADC6BA1AE310441D347
D7F41358345E60DA32DE278946577494F98A97291E4F6248F7C7BEF451E8E0D6
4928626F2B15> |-
/j <1C60D8A8C9B08A9591A285494FC14992819A3469397C4916E694DFF7CAE9
4060E7AFEFE769C00965A9AABD7F3D47DA33027F4796A09B695402140C840D79
8670ACE721330DE5D09D781D0B9D81B61A2E178EBB170290A39954CE9552FC18
B6FA67AB7E2E0E22D2D09A79B371027EE2046D8B2E1E96D2DF93B5FCCAFE65B3
72> |-
/x <1C60D8A8C9B08A95EF9E0D6E61BB925279365AA4A600D77F902B1779D3C1
9D4A1EFA6A5D8DED75080B247C74E738F0D57D3F50099A6704AF514DD632337B
B9CE105C386F8789DFE16FD1F7BB79139AF7EE28FD45E50D17FF2AC57CB9CD0D
9DB34980D7D5F02EDD0EED74588DB7483EC5FADE773C8CCB29B0792334C4D568
D513FEE4E0F8D6A6C51FF3F83DD4E5AACDE03956852A63BC0292B0E2FD37EFF9
CC4682E14A60FBC08B1B3F473D> |-
/y <1C60D8A8C9B08A95EF9E0D6E61BBE22CA6259E10DB35BE8FE7DACF65AD28
42B492EBA5686A8DD92EE30667D7D28A14CF63FBE4F92917D86208D4B07B7EE5
4B8A9031D83B003FA583F751F90795A3490D47178CE2FDD4AEF11FBB09B4D9A5
542C14BBB4BC347346C58052A6CDB128A0F579DAB0B42923AC5799F2BB826E63
6701C291FA265774B3F82BEBF0FF316B2CB11E179352F44E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
AMHIUF+CMBX9 /Encoding get
dup 11 /ff put
dup 35 /numbersign put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 59 /semicolon put
dup 67 /C put
dup 69 /E put
dup 83 /S put
dup 98 /b put
dup 102 /f put
dup 106 /j put
dup 120 /x put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/AMHIUF+CMBX9*1 
[11{/.notdef}rp /ff /fi 22{/.notdef}rp /numbersign 4{/.notdef}rp /parenleft /parenright 
2{/.notdef}rp /comma /hyphen /period 2{/.notdef}rp /one /two /three 
/four /five /six 3{/.notdef}rp /colon /semicolon 7{/.notdef}rp /C 
/.notdef /E /F 2{/.notdef}rp /I 3{/.notdef}rp /M 4{/.notdef}rp 
/R /S 13{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /y 134{/.notdef}rp]
AMHIUF+CMBX9 nf
AMHIUF+CMBX9*1 [8.9664 0 0 -8.9664 0 0 ]msf
53.76 622.86 mo
(Figure3.4:)
[6.72304 3.0028 5.27668 5.85952 4.34428 11.6402 5.27669 3.0028 5.27668 0 ]xsh
53.76 633.3 mo
(FIRstream)
[6.72304 3.95776 11.043 4.20251 4.07887 4.31918 4.92075 5.15834 0 ]xsh
53.76 643.741 mo
(graph.)
[5.28744 4.35504 5.13503 5.87028 5.87029 0 ]xsh
131.88 602.341 mo
(\(a\)\(b\)\(c\)\(d\)\(e\))
[4.09233 5.15834 36.8385 4.07889 5.85861 35.1591 4.09232 4.68407 35.1591 4.07889 5.85861 35.1591 
4.09235 4.92078 0 ]xsh
125.52 622.861 mo
(Figure3.5:Executionsnapshotsillustrat-)
[6.71766 2.99652 5.28296 5.87656 4.31918 11.52 5.28296 3.00281 5.28296 13.923 6.96414 5.64435 
4.91537 4.68048 5.87656 4.07886 2.99654 5.28296 12.4767 4.20251 5.87656 5.15833 5.87656 4.20251 
5.87656 5.28299 4.07886 10.9219 2.99652 2.99652 2.99652 5.87656 4.23389 4.07886 4.31918 5.15833 
4.07889 0 ]xsh
125.52 633.301 mo
(ingmanualembeddingofcontrolmessagesin)
[3.0028 5.87656 8.52342 8.87935 5.14131 5.63626 5.87656 5.1413 6.12311 4.92076 8.63905 6.11685 
4.92078 5.87656 5.87654 3.00281 5.87656 8.40326 5.29372 6.48361 4.70198 5.29372 5.63626 4.07886 
4.36133 5.2937 6.24237 8.87936 4.92075 4.17291 4.17294 5.1413 5.2937 4.92078 7.3219 3.00281 
0 ]xsh
125.52 643.742 mo
(FIR.Channelsareannotatedwithdataitems)
[6.72303 3.95776 7.93073 6.00296 7.64381 5.86848 5.13324 5.86848 5.86848 4.92076 3.00279 7.08252 
5.13324 4.35324 7.92001 5.15836 5.86848 5.86848 5.28566 4.10219 5.13324 4.1022 4.92075 8.99689 
7.68326 3.00278 4.07889 8.87671 5.87656 5.13324 4.10217 8.15851 3.00281 4.10217 4.92075 8.87936 
0 ]xsh
125.52 654.182 mo
(presentononepossibleexecution;itemsare)
[5.86849 4.35324 4.91986 4.20161 4.91985 5.63536 8.1577 5.28206 9.95538 5.28206 5.86848 8.99957 
6.11595 5.28206 4.16486 4.16486 3.00191 5.86848 3.00191 8.87943 4.91985 5.64346 4.91986 4.69391 
5.8685 4.1022 3.00189 5.28564 5.8685 7.20175 3.00189 4.1022 4.91983 8.87848 8.04102 5.13324 
4.35324 0 ]xsh
125.52 664.623 mo
(numberedinorderofproduction.\(a\)Source)
[5.63625 5.87656 8.63907 6.11685 4.92076 4.31917 4.92076 9.35641 3.00279 9.35643 5.27936 4.34698 
5.86221 4.92075 7.91919 5.28296 6.84406 5.87656 4.34697 5.52327 5.86221 5.86221 4.68765 4.09592 
3.00278 5.27939 5.86221 7.92264 4.07889 5.12695 7.67889 5.86221 5.27936 5.86221 4.34695 4.68765 
0 ]xsh
125.52 675.063 mo
(initiateschangeofweights,\(b\)weightsare)
[3.0028 5.87656 3.00281 4.07887 3.00279 5.15834 4.07889 4.92075 9.24252 4.44107 5.87656 5.15836 
5.87656 5.28296 10.08 5.28296 8.40421 7.44386 4.92165 3.00281 5.28296 5.63626 4.07887 4.20251 
8.28313 4.07886 5.87656 9.35831 7.44385 4.92078 3.00278 5.28296 5.63626 4.07889 9.12238 5.15833 
4.31918 0 ]xsh
125.52 685.623 mo
(attachedtodataitem#5andembeddedin)
[5.15835 4.09232 4.09233 5.15834 4.44107 5.87656 4.92076 10.557 4.09233 9.84328 5.85861 5.15836 
4.09232 9.71776 3.00279 4.07889 4.92075 13.3195 8.87936 9.72313 5.15834 5.87656 10.4369 4.92078 
8.63907 6.11685 4.92075 5.85864 5.85861 4.92078 10.3167 3.00281 0 ]xsh
125.52 696.063 mo
(stream,\(c\)-\(e\),actorscheckeachinputitem,)
[4.15858 4.0959 4.34697 4.92076 5.12697 8.87935 6.36252 4.07887 4.68764 4.09592 3.50404 4.09592 
4.92075 4.07889 6.48264 5.15836 4.68765 4.09592 5.27937 4.34697 7.68237 4.44107 5.86221 4.92075 
4.44107 8.76468 4.92075 5.15833 4.44107 9.117 3.00281 5.86221 5.86221 5.86218 7.4386 3.00281 
4.07886 4.92075 8.87936 0 ]xsh
125.52 706.502 mo
(adjustingtheirownweightwhenthey\014nda)
[5.1413 5.87656 3.23149 5.87656 4.17291 4.11026 3.00281 5.87656 9.36357 4.07887 5.87654 4.92076 
3.00279 8.15948 5.04356 7.68327 9.83701 7.44386 4.92076 3.00281 5.2937 5.63626 7.79904 7.68326 
5.87656 4.92075 9.83701 4.07889 5.87656 4.92075 9.48468 5.87656 5.87656 9.83701 0 ]xsh
125.52 716.942 mo
(taggeditem.)
[4.08784 5.15834 5.27132 5.2713 4.92075 9.47656 3.00281 4.08784 4.92076 8.87935 0 ]xsh
364.201 602.341 mo
(\(a\)\(b\)\(c\)\(d\)\(e\))
[4.09232 5.15836 33.7191 4.07886 5.85861 33.7182 4.09232 4.68405 33.7191 4.07889 5.85858 33.8384 
4.09235 4.92072 0 ]xsh
356.521 622.861 mo
(Figure3.6:Executionsnapshotsillustrating)
[6.71765 2.99652 5.28296 5.87656 4.31918 8.64093 5.28296 3.00278 5.28296 8.16296 6.96414 5.64435 
4.91537 4.68048 5.87656 4.07886 2.99655 5.28296 9.71686 4.20251 5.87656 5.15833 5.87659 4.20251 
5.87653 5.28296 4.07889 8.0419 2.99652 2.99652 2.99652 5.87653 4.23389 4.07892 4.31915 5.15833 
4.07892 3.00275 5.87659 0 ]xsh
356.521 633.301 mo
(teleportmessaginginFIR.Channelsarean-)
[4.10577 4.92075 3.00281 4.92075 6.11688 5.28296 4.35681 7.4386 8.87936 4.92075 4.16843 4.16846 
5.13681 5.28925 3.00281 5.87207 8.40326 3.00281 9.23627 6.72302 3.95776 7.93433 6.24237 7.6474 
5.87207 5.13684 5.87207 5.87207 4.92078 3.00281 7.3219 5.13684 4.35681 8.28046 5.15833 5.87207 
0 ]xsh
356.521 643.742 mo
(notatedwithdataitemspresentononepos-)
[5.85684 5.27399 4.09052 5.15836 4.09055 4.92075 9.23627 7.68326 3.00281 4.07889 9.23627 5.87656 
5.15836 4.07886 8.63818 3.00281 4.09055 4.92075 8.87936 7.44208 5.85681 4.34158 4.92078 4.20251 
4.92075 5.63626 7.31842 5.28296 9.35645 5.28296 5.85681 8.16028 6.11688 5.28296 4.20251 0 
]xsh
356.521 654.182 mo
(sibleexecution;itemsarenumberedinorder)
[4.20251 3.00281 5.85861 3.00281 7.6806 4.92075 5.64435 4.92078 4.68405 5.85861 4.09232 3.00281 
5.27579 5.85861 6.00296 3.00281 4.09235 4.92075 8.87936 7.08252 5.15833 4.31918 7.92001 5.63626 
5.85861 8.63904 6.11688 4.92078 4.34338 4.92072 8.63647 3.00275 8.87677 5.28296 4.34338 5.85864 
4.92072 0 ]xsh
356.521 664.623 mo
(ofproduction.\(a\)Sourcecallsamessage)
[5.28745 8.52435 5.87027 4.35504 5.52325 5.8703 5.87027 4.69571 4.104 3.00278 5.28745 5.8703 
12.9626 4.07889 5.13504 9.47842 5.87027 5.28748 5.87027 4.35504 4.69571 10.2002 4.69571 5.13501 
3.00281 3.00281 9.36267 10.4377 8.87933 4.92078 4.16663 4.16663 5.13507 5.28741 0 ]xsh
356.521 675.063 mo
(handler,passingnewweightsasargument,)
[5.87836 5.1431 5.87836 5.87833 3.00281 4.92078 4.31915 8.04282 5.87656 5.1431 4.17471 4.17471 
3.00281 5.87836 10.0836 5.87836 4.92075 12.3637 7.44388 4.92075 3.00281 5.2955 5.63626 4.11206 
8.88208 5.1431 9.00226 5.14307 4.3631 5.29553 5.87836 8.87933 4.92078 5.63623 4.07892 0 
]xsh
356.521 685.623 mo
(\(b\)messageboundaryismaintainedbycom-)
[4.10489 5.87115 6.95889 8.87936 4.92075 4.16754 4.16754 5.13593 5.28833 7.68063 6.11685 5.28296 
5.87119 5.87119 5.87115 5.13593 4.35596 8.6445 3.00278 6.96237 8.87936 5.15836 3.00278 5.63629 
4.10486 5.13593 3.00281 5.87656 4.92075 8.63641 5.63629 8.40417 4.69666 5.28833 8.87933 0 
]xsh
356.521 696.063 mo
(piler,\(c\)-\(e\),messagehandlerisautomati-)
[5.85593 3.00281 3.00281 4.92075 4.3407 7.80252 4.08963 4.68137 4.08963 3.49777 4.08963 4.92075 
4.08963 8.16296 8.87936 4.92075 4.20251 4.20251 5.15836 5.2731 9.36002 5.85596 5.15833 5.85596 
5.85593 3.00281 4.92078 8.99872 3.00281 8.88208 5.15833 5.87653 4.08966 5.27307 8.87933 5.15839 
4.0896 3.00281 0 ]xsh
356.521 706.502 mo
(callyinvokedinactorsimmediatelybefore)
[4.68137 5.15836 3.00009 3.00012 10.6844 3.00012 5.63623 5.40405 5.28296 5.40405 4.92078 10.7964 
3.00278 11.0367 5.15833 4.6814 4.07886 5.28296 4.31918 9.4819 3.00281 8.89102 8.89102 4.91895 
5.87659 3.00278 5.15836 4.07886 4.91895 3.00012 10.5642 6.11688 4.91895 3.24402 5.28296 4.31921 
0 ]xsh
356.521 716.942 mo
(thearrivalofa\013ecteditems.)
[4.07889 5.87656 8.4006 5.15836 4.31915 4.31918 3.00281 5.04449 5.15833 6.48267 5.28296 6.84406 
5.15836 6.22986 4.9118 4.68045 4.07889 4.91177 9.35641 2.99295 4.07886 4.9118 8.88382 4.23032 
0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/AMHIUG+Times-Roman*1 uf
/AMHIUG+Times-Roman uf
/EUJAAA+Times-Roman uf
/AMHIUI+TimesNewRomanPS-ItalicMT*1 uf
/AMHIUI+TimesNewRomanPS-ItalicMT uf
/ZFRAAA+TimesNewRomanPS-ItalicMT uf
/AMHIUF+CMBX9*1 uf
/AMHIUF+CMBX9 uf
/GGGBAA+CMBX9 uf
/AMHIUH+TimesNewRomanPS-BoldMT*1 uf
/AMHIUH+TimesNewRomanPS-BoldMT uf
/WRNAAA+TimesNewRomanPS-BoldMT uf
/AMHIUE+LucidaConsole*1 uf
/AMHIUE+LucidaConsole uf
/SFUBAA+LucidaConsole uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
