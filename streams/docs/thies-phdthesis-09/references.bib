@InProceedings{ohallaron91assign,
  author =	 {D.R. O'Hallaron},
  title =	 {The {Assign} Parallel Program Generator},
  booktitle =	 {Distributed Memory Computing Conferenc},
  year =	 1991
}

@MastersThesis{andersson_model_07,
  author =	 {Jonathan Andersson},
  title =	 {Modelling and Evaluating the {StreamBits} Language},
  school =	 {Halmstad University},
  year =	 2007
}

@Article{AK82,
  author =	 {J.R. Allen and K. Kennedy},
  title =	 "{PFC: A program to convert Fortran to parallel form}",
  journal =	 {IBM Conference on Parallel Computing and Scientific Computations},
  year =	 1982
}

@Article{ATLAS,
  author =	 "R. Clint Whaley and Antoine Petitet and Jack J. Dongarra",
  title =	 "{Automated empirical optimizations of software and the ATLAS project}",
  journal =	 {Parallel Computing},
  volume =	 27,
  number =	 "1--2",
  pages =	 "3--35",
  year =	 2001,
}

@InBook{caspi07lucidsynchrone,
  author =	 {Paul Caspi and Gr\'egoire Hamon and Marc Pouzet},
  title =	 {Real-Time Systems: {Models} and verification -- {Theory} and tools},
  chapter =	 {Synchronous Functional Programming with Lucid Synchrone},
  publisher =	 {ISTE},
  year =	 2007,
}

@InProceedings{caspi95lucidsynchrone,
  author =	 {Paul Caspi and Marc Pouzet},
  title =	 {A Functional Extension to {Lustre}},
  booktitle =	 {International Symposium on Languages for Intentional Programming},
  year =	 1995,
}

@Article{ATLAS-Sparsity-SI,
  author =	 {Jim Demmel and Jack Dongarra and Victor Eijkhout and Erika Fuentes and Antoine Petitet and Rich Vuduc and Clint Whaley and Katherine
                  Yelick},
  title =	 "{Self adapting linear algebra algorithms and software}",
  journal =	 {Proceedings of the IEEE: Special Issue on Program Generation, Optimization, and Adaptation},
  volume =	 93,
  number =	 2,
  year =	 2005
}

@Article{Ackermann/Bucy,
  author =	 {J.E. Achermann and R.S. Bucy},
  title =	 {Canonical Minimal realization of a matrix of impulse response sequences},
  journal =	 {Information and Control},
  year =	 1971,
  numer =	 3,
  pages =	 "224--231",
}

@InProceedings{Baker,
  author =	 {Michael K. Chen and Xiao Feng Li and Ruiqi Lian and Jason H. Lin and Lixia Liu and Tao Liu and Roy Ju},
  title =	 "{Shangri-La: Achieving} high performance from compiled network applications while enabling ease of programming",
  booktitle =	 {Conference on Programming Language Design and Implementation (PLDI)},
  year =	 2005,
}

@Article{Bhatta97,
  author =	 {Chuvra S. Bhattacharyya and Praveen K. Murthy and Edward A. Lee},
  title =	 "{APGAN and RPMC: Complementary} Heuristics for Translating {DSP} Block Diagrams into Efficient Software Implementations",
  journal =	 {Journal of Design Automation for Embedded Systems},
  year =	 1997,
  pages =	 {33--60},
}

@InProceedings{Cell-hpca,
  author =	 {H. Peter Hofstee},
  title =	 "Power Efficient Processor Architecture and The {Cell} Processor",
  booktitle =	 {International Symposium on High-Performance Computer Architecture (HPCA)},
  year =	 2005,
}

@Article{DAGSched,
  author =	 {Yu-Kwong Kwok and Ishfaq Ahmad},
  title =	 {Static Scheduling Algorithms for Allocating Directed Task Graphs to Multiprocessors},
  journal =	 {ACM Computing Surveys},
  volume =	 31,
  number =	 4,
  year =	 1999,
  pages =	 {406--471},
}

@Article{FFTW-SI,
  author =	 {Matteo Frigo and Steven G.~Johnson},
  title =	 {The Design and Implementation of {FFTW3}},
  journal =	 {Proceedings of the IEEE: Special Issue on Program Generation, Optimization, and Adaptation},
  volume =	 93,
  number =	 2,
  year =	 2005
}

@InProceedings{GGD94,
  author =	 {R. Govindarajan and G.R. Gao and P. Desai},
  title =	 {Minimizing Memory Requirements in Rate-Optimal Schedules},
  booktitle =	 {International Conference on Application Specific Array Processors (ASAP)},
  pages =	 {75--86},
  year =	 1994,
}

@InProceedings{Irig88,
  author =	 "F. Irigoin and R. Triolet",
  title =	 "{Supernode partitioning}",
  booktitle =	 "{Symposium on Principles of Programming Languages (POPL)}",
  year =	 "{1988}",
}

@InProceedings{Janssen94,
  author =	 {Martin Janssen and Francky Catthoor and Hugo De Man},
  title =	 {A specification invariant technique for operation cost minimisation in flow-graphs},
  booktitle =	 {International Symposium on High-level Synthesis},
  pages =	 {146--151},
  year =	 1994
}

@Article{Mayne,
  author =	 {D. Q. Mayne},
  title =	 "An elementary derivation of {R}osenbrock's minimal realization algorithm",
  journal =	 {IEEE Transactions on Automatic Control},
  year =	 1973,
  pages =	 "306--307",
}

@Article{Niagara,
  author =	 {Poonacha Kongetira and Kathirgamar Aingaran and Kunle Olukotun},
  title =	 "{Niagara: A 32-way multithreaded Sparc processor}",
  journal =	 {IEEE Micro},
  volume =	 25,
  number =	 2,
  year =	 2005,
}

@Article{Potkonjak00,
  author =	 {Miodrag Potkonjak and Jan M. Rabaey},
  title =	 {Maximally and Arbitrarily Fast Implementation of Linear and Feedback Linear Computations},
  journal =	 {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  year =	 2000,
  volume =	 19,
  number =	 1,
  pages =	 {30--43}
}

@InProceedings{SDFSched,
  author =	 {Jose Luis Pino and Edward A. Lee},
  title =	 {Hierarchical Static Scheduling of Dataflow Graphs onto Multiple Processors},
  booktitle =	 {International Conference on Acoustics, Speech, and Signal Processing (ICASSP)},
  year =	 1995,
}

@TechReport{SDFSched2,
  author =	 {Jose Luis Pino and Shuvra S. Bhattacharyya and Edward A. Lee},
  title =	 {A Hierarchical Multiprocessor Scheduling Framework for Synchronous Dataflow Graphs},
  year =	 1995,
  type =	 {Technical Report},
  number =	 {UCB/ERL M95/36},
  institution =	 {University of California, Berkeley},
}

@Article{SMART03,
  author =	 {Markus P{\"u}schel and Jos{\'e} Moura},
  title =	 {The Algebraic Approach to the Discrete Cosine and Sine Transforms and their Fast Algorithms},
  journal =	 {SIAM Journal of Computing},
  year =	 2003,
  volume =	 32,
  number =	 5,
  pages =	 {1280--1316}
},

@Article{Sparsity,
  author =	 {E. Im and Katherine A. Yelick and Richard Vuduc},
  title =	 "{SPARSITY: An} Optimization Framework for Sparse Matrix Kernels",
  journal =	 {International Journal of High Performance Computing Applications},
  year =	 2004,
  volume =	 18,
  number =	 1,
  pages =	 {135--158},
},

@Article{Spiral-SI,
  author =	 {Markus P{\"u}schel and Jos{\'e} M. F. Moura and Jeremy Johnson and David Padua and Manuela Veloso and Bryan W. Singer and Jianxin
                  Xiong and Franz Franchetti and Aca Ga\v{c}i\'{c} and Yevgen Voronenko and Kang Chen and Robert W. Johnson and Nick Rizzolo},
  title =	 {{SPIRAL}: Code Generation for {DSP} Transforms},
  journal =	 {Proceedings of the IEEE: Special Issue on Program Generation, Optimization, and Adaptation},
  volume =	 93,
  number =	 2,
  year =	 2005
}

@TechReport{thies07compression,
  author =	 {William Thies and Steven Hall and Saman Amarasinghe},
  title =	 {Mapping Stream Programs into the Compressed Domain},
  institution =	 {Massachusetts Institute of Technology},
  year =	 2007,
  number =	 {MIT-CSAIL-TR-2007-055},
  note =	 {\url{http://hdl.handle.net/1721.1/39651}}
},

@TechReport{ackerman_val_value_oriented_1979,
  title =	 {{VAL -- A} value-oriented algorithmic language},
  number =	 {MIT-LCS-TR-218},
  institution =	 {Masscahusetts Institute of Technology},
  author =	 {W. Ackerman and Jack Dennis},
  year =	 1979
},

@InProceedings{ad_data_1997,
  title =	 {Data memory minimisation for synchronous data flow graphs emulated on {DSP-FPGA} targets},
  abstract =	 {The paper presents an algorithm to determine the close-to-smallestpossible data buffer sizes for arbitrary synchronous dataflow
                  (SDF) applications, such that we can guarantee the existenceof a deadlock free schedule. The presented algorithm fits inthe design
                  flow of GRAPE, an environment for the emulation andimplementation of digital signal processing (DSP) systems onarbitrary target
                  architectures, consisting of programmable DSPprocessors and FPGAs. Reducing the size of data buffers is ofhigh importance when the
                  application will be mapped on FieldProgrammable Gate Arrays (FPGA), since register resources arerather scarce.},
  booktitle =	 {Design Automation Conference (DAC)},
  author =	 {Marleen Ad{\'e} and Rudy Lauwereins and J. A. Peperstraete},
  year =	 1997,
},

@Misc{adobe-anim,
  key =		 {Adobe},
  title =	 {About digital video editing},
  howpublished = {Adobe online education materials},
  year =	 2006,
  note =	 {\url{http://www.adobe.com/education/pdf/cib/pre65_cib/pre65_cib02.pdf}}
},

@PhDThesis{agha_actors:model_1985,
  type =	 "{Ph.D. Thesis}",
  title =	 {{Actors: A} Model of Concurrent Computation in Distributed Systems},
  school =	 {Massachusetts Insitute of Technology},
  author =	 {Gul Agha},
  year =	 1985,
},

@InProceedings{agrawal-cases05,
  title =	 "Optimizing Stream Programs Using Linear State Space Analysis",
  author =	 {Sitij Agrawal and William Thies and Saman Amarasinghe},
  booktitle =	 {International Conference on Compilers, Architecture, and Synthesis for Embedded Systems (CASES)},
  year =	 2005,
}

@MastersThesis{agrawal-thesis,
  author =	 {Sitij Agrawal},
  title =	 {Linear State-Space Analysis and Optimization of {StreamIt} Programs},
  school =	 "{Massachusetts Institute of Technology}",
  year =	 2004,
  type =	 "{M.Eng. Thesis}",
}

@InProceedings{amarasinghe-ijpp05,
  title =	 {Language and Compiler Design for Streaming Applications},
  author =	 {Saman Amarasinghe and Michael I. Gordon and Michal Karczmarek and Jasper Lin and David Maze and Rodric M. Rabbah and William Thies},
  booktitle =	 {International Journal of Parallel Programming},
  year =	 2005,
},

@book{armstrong_concurrent_1993,
  title =	 {Concurrent Programming in {Erlang}},
  publisher =	 {Prentice Hall},
  author =	 {Joe Armstrong and Robert Virding and Mike Williams},
  year =	 1993,
}

@InProceedings{armstrong_history_2007,
  title =	 {A history of {Erlang}},
  abstract =	 {Erlang was designed for writing concurrent programs that "run forever." Erlang uses concurrent processes to structure the
                  program. These processes have no shared memory and communicate by asynchronous message passing. Erlang processes are lightweight and
                  belong to the language, not the operating system. Erlang has mechanisms to allow programs to change code "on the fly" so that
                  programs can evolve and change as they run. These mechanisms simplify the construction of software for implementing non-stop
                  systems.},
  booktitle =	 {Conference on History of Programming Languages (HOPL)},
  publisher =	 {{ACM}},
  author =	 {Joe Armstrong},
  year =	 2007,
},

@TechReport{arvind_asynchronous_1978,
  title =	 {An asynchronous programming language and computing machine},
  number =	 {TR 114a},
  institution =	 {University of California, Irvine},
  author =	 {Arvind and K.P. Gostelow and W. Plouffe},
  year =	 1978
},

@TechReport{asanovic_landscape_2006,
  title =	 {The Landscape of Parallel Computing Research: {A} View from {Berkeley}},
  number =	 {UCB/EECS-2006-183},
  institution =	 {EECS Department, University of California, Berkeley},
  author =	 {Krste Asanovic and Ras Bodik and Bryan Christopher Catanzaro and Joseph James Gebis and Parry Husbands and Kurt Keutzer and David A
                  Patterson and William Lester Plishker and John Shalf and Samuel Webb Williams and Katherine A Yelick},
  year =	 2006
}

@Article{ashcroft_lucidnonprocedural_1977,
  title =	 {Lucid, a Nonprocedural Language with Iteration},
  volume =	 20,
  number =	 7,
  journal =	 {{Communications of the ACM}},
  author =	 {E. A. Ashcroft and W. W. Wadge},
  year =	 1977,
  pages =	 {519--526}
},

@Misc{auth-demo,
  key =		 {Auth},
  title =	 {Authentication generator demo},
  howpublished = {Online screencast},
  note =	 {\url{http://penso.info/auth_generator}}
},

@MastersThesis{aziz-thesis,
  author =	 {Abdulbasier Aziz},
  title =	 {Image-Based Motion Estimation in a Stream Programming Language},
  school =	 "{Massachusetts Institute of Technology}",
  year =	 2007,
  type =	 "{M.Eng. Thesis}",
},

@Article{bakshi99,
  author =	 {Smita Bakshi and Daniel D. Gajski},
  title =	 {Partitioning and pipelining for performance-constrained hardware/software systems},
  journal =	 {IEEE Transactions on Very Large Scale Integrated Systems},
  volume =	 7,
  number =	 4,
  year =	 1999,
  pages =	 {419--432},
},

@InProceedings{balmas05ddgraph,
  title =	 {{DDgraph: A tool to visualize dynamic dependences}},
  author =	 {Balmas, F. and Wertz, H. and Chaabane, R. and Artificielle, L.I.},
  booktitle =	 {Workshop on Program Comprehension through Dynamic Analysis},
  year =	 2005
}

@InProceedings{barton_streaming_2003,
  title =	 "{Streaming XPath processing with orward and backward axes}",
  booktitle =	 "{International Conference on Data Engineering}",
  author =	 {C. Barton and P. Charles and Deepak Goyal and Mukund Raghavachari and M. Fontoura and V. Josifovski},
  year =	 2003,
}

@Article{bellay98reverse,
  title =	 {{An evaluation of reverse engineering tool capabilities}},
  author =	 {Bellay, B. and Gall, H.},
  journal =	 {Journal of Software Maintenance Research and Practice},
  volume =	 10,
  number =	 5,
  year =	 1998
}

@Article{berry_esterel_1992,
  title =	 {The {ESTEREL} synchronous programming language: Design, semantics, implementation},
  volume =	 19,
  number =	 2,
  journal =	 {Science of Computer Programming},
  author =	 {G{\'e}rard Berry and Georges Gonthier},
  year =	 1992,
  pages =	 {87--152}
}

@InProceedings{bhattacharya_quasi-static_2000,
  title =	 {Quasi-Static Scheduling of Reconfigurable Dataflow Graphs for {DSP} Systems},
  abstract =	 {Dataflow programming has proven to be popular for representing applications in rapid prototyping tools for digital signal processing
                  (DSP); however, existing dataflow design tools are limited in their ability to effectively handle dynamic application behavior. In
                  this paper, we develop efficient quasi-static scheduling techniques for a broad class of dynamically reconfigurable dataflow
                  specifications. We use a CD to DAT sample rate conversion system and a speech compression application to illustrate the efficacy of
                  our scheduling techniques in real life DSP systems.},
  booktitle =	 {International Workshop on Rapid System Prototyping (RSP)},
  author =	 {Bishnupriya Bhattacharya and Shuvra S. Bhattacharyya},
  year =	 2000,
  pages =	 84
}

@Article{bhattacharyya99synthesis,
  author =	 {S. Bhattacharyya and P. Murthy and E. Lee},
  title =	 {Synthesis of embedded software from synchronous dataflow specifications},
  journal =	 {Journal of VLSI Signal Processing Systems},
  year =	 1999,
  volume =	 21,
  number =	 2,
},

@InProceedings{bhattacharyya_optimal_1995,
  title =	 {Optimal parenthesization of lexical orderings for {DSP} block diagrams},
  abstract =	 {Minimizing memory requirements for program and data are critical objectives when synthesizing software for embedded DSP
                  applications. Previously, it has been demonstrated that for graphical programs based on the widely-used synchronous dataflow model
                  an important class of minimum code size implementations can be viewed as parenthesizations of lexical orderings of the computational
                  blocks. Such a parenthesization corresponds to the hierarchy of loops in the software implementation. In this paper, we present a
                  dynamic programming technique for constructing a parenthesization that minimizes data memory cost from a given lexical ordering of a
                  synchronous dataflow graph. For graphs that do not contain delays, this technique always constructs a parenthesization that has
                  minimum data memory cost from among all parenthesizations for the given lexical ordering. When delays are present, the technique may
                  make refinements to the lexical ordering while it is computing the parenthesization, and the data memory cost of the result is
                  guaranteed to be less than or equal to the data memory cost of all valid parenthesizations for the initial lexical ordering},
  booktitle =	 {International Workshop on VLSI Signal Processing},
  author =	 {S.S. Bhattacharyya and P.K. Murthy and E.A. Lee},
  year =	 1995,
  keywords =	 {code size,data flow graphs,data memory,delays,digital signal processing chips,DSP block diagrams,dynamic programming,lexical
                  orderings,microprogramming,optimal parenthesization,software synthesis,synchronous dataflow graph},
},

@InProceedings{bhattacharyya_self-timed_1996,
  title =	 {Self-Timed Resynchronization: {A} Post-Optimization for Static Multiprocessor Schedules},
  abstract =	 {In a shared-memory multiprocessor system, it is possible that certain synchronization operations are redundant - that is, their
                  corresponding sequencing requirements are enforced completely by other synchronizations in the system - and can be eliminated
                  without compromising correctness. This paper addresses the problem of adding new synchronization operations in a multiprocessor
                  implementation in such a way that the number of original synchronizations that consequently become redundant significantly exceeds
                  the number of new synchronizations. We refer to this approach to reducing synchronization overhead as resynchronization. In this
                  paper we formally define the resynchronization problem, we show that optimal resynchronization is NP-hard, and we propose a family
                  of heuristics for this problem. Finally we present a practical example where resynchronization is useful.},
  booktitle =	 {International Parallel Processing Symposium},
  author =	 {Shuvra S. Bhattacharyya and Sundararajan Sriram and Edward A. Lee},
  year =	 1996,
  keywords =	 {embedded systems,inter-processor communication overhead,multiprocessors,scheduling,static schedules,synchronization},
  pages =	 {199--205}
}

@book{bhattacharyya_software_1996,
  title =	 {Software Synthesis from Dataflow Graphs},
  abstract =	 {From the Publisher:Software Synthesis from Dataflow Graphs addresses the problem of generating efficient software implementations
                  from applications specified as synchronous dataflow graphs for programmable digital signal processors (DSPs) used in embedded
                  real-time systems. Software Synthesis from Dataflow Graphs reviews the state-of-the-art in constructing static, memory-optimal
                  schedules for programs expressed as SDF graphs. Code size reduction is obtained by the careful organization of loops in the target
                  code. Data buffering is optimized by constructing the loop hierarchy in provably optimal ways for many classes of SDF graphs. The
                  central result is a uniprocessor scheduling framework that provably synthesizes the most compact looping structures, called single
                  appearance schedules, for a certain class of SDF graphs. In addition, algorithms and heuristics are presented that generate single
                  appearance schedules optimized for data buffering usage. Numerous practical examples and extensive experimental data are provided to
                  illustrate the efficacy of these techniques.},
  publisher =	 {Kluwer Academic Publishers},
  author =	 {Shuvra S. Bhattacharyya and Praveen K. Murthy and Edward A. Lee},
  year =	 1996,
  pages =	 192
},

@InProceedings{bilsen_cyclo-static_1995,
  title =	 {Cyclo-static data flow},
  abstract =	 {The high sample-rates involved in many DSP-applications, require the use of static schedulers wherever possible. The construction of
                  static schedules however is classically limited to applications that fit in the synchronous data flow model. In this paper we
                  present cyclo-static data flow as a model to describe applications with a cyclically changing behaviour. We give both a necessary
                  and sufficient condition for the existence of a static schedule for a cyclo-static data flow graph and show how such a schedule can
                  be constructed. The example of a video encoder is used to illustrate the importance of cyclo-static data flow for real-life
                  DSP-systems},
  booktitle =	 {International Conference on Acoustics, Speech, and Signal Processing (ICASSP)},
  author =	 {G. Bilsen and M. Engels and R. Lauwereins and J.A. Peperstraete},
  year =	 1995,
  keywords =	 {cyclically changing behaviour,cyclo-static data flow graph,data flow graphs,DSP systems,DSP-applications,high sample-rates,necessary
                  condition,processor scheduling,signal sampling,static schedule,static schedulers,sufficient condition,synchronous data flow
                  model,video coding,video encoder,video equipment},
}

@InProceedings{bit-streaming,
  author =	 {Armando Solar-Lezama and Rodric Rabbah and Rastislav Bodik and Kemal Ebcioglu},
  title =	 {Programming by Sketching for Bit-Streaming Programs},
  booktitle =	 "{Conference on Programming Language Design and Implementation (PLDI)}",
  year =	 2005,
}

@Misc{blender-stats,
  key =		 {Blender},
  title =	 {Blender.org: website statistics},
  howpublished = "{Blender Foundation}",
  year =	 2006
}

@Misc{blender-wikipedia,
  key =		 {Blender},
  title =	 {Blender},
  howpublished = "{Wikipedia, The Free Encyclopedia}",
  month =	 {November},
  year =	 2006,
  note =	 {\url{http://en.wikipedia.org/wiki/Blender_software}}
}

@InProceedings{bridges07revisiting,
  author =	 {Matthew J. Bridges and Neil Vachharajani and Yun Zhang and Thomas Jablin and David I. August},
  title =	 {Revisiting the sequential programming model for multi-core},
  booktitle =	 {MICRO},
  year =	 2007,
}

@InProceedings{brook04,
  author =	 {Ian Buck and Tim Foley and Daniel Horn and Jeremy Sugerman and Kayvon Fatahalian and Mike Houston and Pat Hanrahan},
  title =	 "{Brook for GPUs: Stream computing on graphics hardware}",
  booktitle =	 {SIGGRAPH},
  year =	 2004,
},

@InProceedings{buck_heterogeneous_2000,
  title =	 {Heterogeneous modeling and simulation of embedded systems in {El Greco}},
  abstract =	 {This paper describes the functional specification and verification portions of El Greco, a system for high-level, heterogeneous
                  functional specification, efficient compiled simulation, and software and hardware implementation. Specifications in the form of
                  dataflow graphs, hierarchical finite state machines, or a mixture, are supported. These specifications can be arbitrarily nested, as
                  in Ptolemy. When dataflow graphs are placed in a control context, the graph execution is fully controllable; its execution can be
                  restarted or suspended and parameters can be changed. We describe system modeling and simulation generation in El Greco and compare
                  to other approaches.},
  booktitle =	 {International Workshop on Hardware/Software Codesign (CODES)},
  author =	 {J. Buck and R. Vaidyanathan},
  year =	 2000,
  keywords =	 {compiled simulation,data flow graphs,dataflow graphs,digital simulation,El Greco,embedded systems,finite state machines,formal
                  specification,formal verification,functional specification,hardware-software codesign,simulation generation,verification},
}

@InProceedings{buck_multirate_1991,
  title =	 {Multirate signal processing in {Ptolemy}},
  abstract =	 {The use of two models of computation, synchronous dataflow (SDF) and dynamic dataflow (DDF), to design and implement signal
                  processing applications with multiple sample rates is discussed. The SDF model is used for synchronous applications. SDF is amenable
                  to compile-time scheduling, and hence is much more efficient at runtime. The design environment, Ptolemy, can simultaneously support
                  multiple models of computation, so SDF and DDF can be combined in a single application. Hence, the implementation will incur the
                  run-time cost of DDF only for those asynchronous portions that absolutely must incur such cost. As an illustration, the authors
                  detail a synchronous application, sample-rate conversion using polyphase filters, and an asynchronous application, timing recovery
                  for an amplitude-shift-keyed signal},
  booktitle =	 {International Conference on Acoustics, Speech, and Signal Processing (ICASSP)},
  author =	 {J. Buck and S. Ha and E.A. Lee and D.G. Messerschmitt},
  year =	 1991,
  keywords =	 {amplitude-shift-keyed signal,asynchronous application,circuit CAD,circuit simulation,compile-time scheduling,computer aided
                  design,design environment,digital simulation,dynamic dataflow,multiple sample rates,polyphase filters,Ptolemy,run-time
                  cost,sample-rate conversion,signal processing,signal processing applications,software tools,synchronisation,synchronous
                  dataflow,timing recovery},
},

@InProceedings{caspi_lustre:declarative_1987,
  title =	 {{LUSTRE: A} declarative language for real-time programming},
  abstract =	 {LUSTRE is a synchronous data-flow language for programming systems which interact with their environments in real-time. After an
                  informal presentation of the language, we describe its semantics by means of structural inference rules. Moreover, we show how to
                  use this semantics in order to generate efficient sequential code, namely, a finite state automaton which represents the control of
                  the program. Formal rules for program transformation are also presented.},
  booktitle =	 {International Symposium on Principles of Programming Languages (POPL)},
  author =	 {P. Caspi and D. Pilaud and N. Halbwachs and J. A. Plaice},
  year =	 1987,
}

@InProceedings{cg03,
  author =	 {William R. Mark and R. Steven Glanville and Kurt Akeley and Mark J. Kilgard},
  title =	 {{Cg: A} System for Programming Graphics Hardware in a {C-like} Language},
  booktitle =	 {SIGGRAPH},
  year =	 2003
}

@InProceedings{chandrachoodan_efficient_2001,
  title =	 {An efficient timing model for hardware implementation of multirate dataflow graphs},
  volume =	 2,
  abstract =	 {We consider the problem of representing timing information associated with functions in a dataflow graph used to represent a signal
                  processing system in the context of high-level hardware (architectural) synthesis. This information is used for synthesis of
                  appropriate architectures for implementing the graph. Conventional models for timing suffer from shortcomings that make it difficult
                  to represent timing information in a hierarchical manner, especially for multirate signal processing systems. We identify some of
                  these shortcomings, and provide an alternate model that does not have these problems. We show that with some reasonable assumptions
                  on the way hardware implementations of multirate systems operate, we can derive general hierarchical descriptions of multirate
                  systems similarly to single rate systems. Several analytical results such as the computation of the iteration period bound, that
                  previously applied only to single rate systems can also easily be extended to multirate systems under the new assumptions. We have
                  applied our model to several multirate signal processing applications, and obtained favorable results. We present results of the
                  timing information computed for several multirate DSP applications that show how the new treatment can streamline the problem of
                  performance analysis and synthesis of such systems},
  booktitle =	 {International Conference on Acoustics, Speech, and Signal Processing (ICASSP)},
  author =	 {N. Chandrachoodan and S.S. Bhattacharyaa and K.J.R. Liu},
  year =	 2001,
  keywords =	 {data flow graphs,efficient timing model,hardware implementation,hierarchical descriptions,hierarchical timing pair model,high level
                  synthesis,high-level hardware synthesis,iteration period bound,multirate dataflow graphs,multirate DSP applications,multirate FIR
                  filter,multirate signal processing systems,performance analysis,signal processing,systems synthesis,timing,timing information
                  representation},
}

@Article{chang95survey,
  title =	 {Compressed-domain techniques for image/video indexing and manipulation},
  author =	 {Chang, S.F.},
  journal =	 {International Conference on Image Processing},
  year =	 1995
}

@Article{chatha-02,
  author =	 {Karam S. Chatha and Ranga Vemuri},
  title =	 {Hardware-Software partitioning and pipelined scheduling of transformative applications},
  journal =	 {IEEE Transactions on Very Large Scale Integrated Systems},
  volume =	 10,
  number =	 3,
  year =	 2002,
  pages =	 {193--208},
}

@InProceedings{chen-graphics05,
  title =	 {A Reconfigurable Architecture for Load-Balanced Rendering},
  author =	 {Jiawen Chen and Michael I. Gordon and William Thies and Matthias Zwicker and Kari Pulli and Fr\'{e}do Durand},
  booktitle =	 "{SIGGRAPH / Eurographics Workshop on Graphics Hardware}",
  year =	 2005,
}

@Article{chen_convergence_2008,
  title =	 {Convergence of Recognition, Mining, and Synthesis Workloads and Its Implications},
  volume =	 96,
  abstract =	 {This paper examines the growing need for a general-purpose ldquoanalytics enginerdquo that can enable next-generation processing
                  platforms to effectively model events, objects, and concepts based on end-user input, and accessible datasets, along with an ability
                  to iteratively refine the model in real-time. We find such processing needs at the heart of many emerging applications and
                  services. This processing is further decomposed in terms of an integration of three fundamental compute capabilities-recognition,
                  mining, and synthesis (RMS). The set of RMS workloads is examined next in terms of usage, mathematical models, numerical algorithms,
                  and underlying data structures. Our analysis suggests a workload convergence that is analyzed next for its platform implications. In
                  summary, a diverse set of emerging RMS applications from market segments like graphics, gaming, media-mining, unstructured
                  information management, financial analytics, and interactive virtual communities presents a relatively focused, highly overlapping
                  set of common platform challenges. A general-purpose processing platform designed to address these challenges has the potential for
                  significantly enhancing users' experience and programmer productivity.},
  number =	 5,
  journal =	 {Proceedings of the IEEE},
  author =	 {Yen-Kuang Chen and J. Chhugani and P. Dubey and C.J. Hughes and Daehyun Kim and S. Kumar and V.W. Lee and A.D. Nguyen and
                  M. Smelyanskiy},
  year =	 2008,
  keywords =	 {Algorithms,data mining,data structures,emerging applications,financial analytics,gaming,general-purpose analytics
                  engine,graphics,interactive virtual communities,mathematical models,media mining,numerical algorithms,parallel architectures,pattern
                  recognition,synthesis workloads,unstructured information management},
  pages =	 {790--807}
}

@PhDThesis{chen_load-balanced_2005,
  type =	 "{M.Eng. Thesis}",
  title =	 {Load-balanced rendering on a general-purpose tiled architecture},
  copyright =	 {M.I.T. theses are protected by copyright. They may be viewed from this source for any purpose, but reproduction or distribution in
                  any format is prohibited without written permission. See provided URL for inquiries about permission.},
  school =	 {Massachusetts Insitute of Technology},
  author =	 {Jiawen Chen},
  year =	 2005,
  keywords =	 {Electrical Engineering and Computer Science.}
}

@Article{choi91flowback,
  title =	 {{Techniques for debugging parallel programs with flowback analysis}},
  author =	 {Choi, J.D. and Miller, B.P. and Netzer, R.H.B.},
  journal =	 {Transactions on Programming Languages and Systems (TOPLAS)},
  volume =	 13,
  number =	 4,
  year =	 1991,
}

@PhDThesis{clinger_foundations_1981,
  type =	 "{Ph.D. Thesis}",
  title =	 {Foundations of Actor Semantics},
  school =	 {Massachusetts Insitute of Technology},
  author =	 {William Douglas Clinger},
  year =	 1981,
  keywords =	 {actors}
}

@InProceedings{cousot78,
  author =	 {Cousot, P{.} and Halbwachs, N{.}},
  title =	 {Automatic discovery of linear restraints among variables of a program},
  pages =	 {84--97},
  booktitle =	 {Symposium on Principles of Programming Languages (POPL)},
  year =	 1978,
},

@PhDThesis{covell-ade,
  type =	 "{Ph.D. Thesis}",
  author =	 {Michele Mae Covell},
  title =	 {An Algorithm Design Environment for Signal Processing},
  school =	 {MIT},
  year =	 1989
}

@InProceedings{cytron86doacross,
  author =	 {R. Cytron},
  title =	 {{DOACROSS: Beyond} vectorization for multiprocessors},
  booktitle =	 {International Conference on Parallel Processing},
  year =	 1986,
},

@InProceedings{dai05packet,
  title =	 {Automatically partitioning packet processing applications for pipelined architectures},
  author =	 {Dai, J. and Huang, B. and Li, L. and Harrison, L.},
  booktitle =	 {Conference on Programming Language Design and Implementation (PLDI)},
  year =	 2005,
}

@Misc{digital-juice,
  key =		 {Digital},
  title =	 "{Digital Juice, Editor's toolkit 4: High tech tools}",
  howpublished = {Digital Juice},
  year =	 2006,
  note =	 {\url{http://www.digitaljuice.com/products/products.asp?pid=119}}
}

@Article{dijkstra_go_1968,
  title =	 {Go to statement considered harmful},
  volume =	 11,
  number =	 3,
  journal =	 {Communications of the ACM},
  author =	 {Edsger W. Dijkstra},
  year =	 1968,
  pages =	 {147--148}
}

@InProceedings{dorai00,
  title =	 {Detecting dynamic behavior in compressed fingerprint videos: {Distortion}},
  author =	 {Dorai, C. and Ratha, N.K. and Bolle, R.M.},
  booktitle =	 {Conference on Computer Vision and Pattern Recognition (CVPR)},
  year =	 2000
}

@InProceedings{drake-ipdps06,
  author =	 {Matthew and Drake and Henry Hoffman and Rodric Rabbah and Saman Amarasinghe},
  title =	 "{MPEG-2 decoding in a stream programming language}",
  booktitle =	 "{International Parallel and Distributed Processing Symposium (IPDPS)}",
  year =	 2006,
}

@MastersThesis{drake-thesis,
  author =	 {Matthew Drake},
  title =	 "{Stream programming for image and video compression}",
  school =	 "{Massachusetts Institute of Technology}",
  year =	 2006,
  type =	 "{M.Eng. Thesis}",
},

@InProceedings{draper_compiling_2001,
  title =	 {Compiling {SA-C} Programs to {FPGAs:} {Performance} Results},
  booktitle =	 {International Workshop on Computer Vision Systems},
  author =	 {Bruce A. Draper and A. P. Wim B{\"o}hm and Jeffrey Hammes and Walid A. Najjar and J. Ross Beveridge and Charlie Ross and Monica
                  Chawathe and Mitesh Desai and Jos{\'e} Bins},
  year =	 2001,
}

@InProceedings{du03sc,
  author =	 {Wei Du and Renato Ferreira and Gagan Agrawal},
  title =	 "{Compiler support for exploiting coarse-grained pipelined parallelism}",
  booktitle =	 {International Conference on Supercomputing},
  year =	 2005
}

@TechReport{duca-thesis,
  author =	 {Nathaniel Duca},
  title =	 {Applications and Execution of Stream Graphs},
  institution =	 "{Johns Hopkins University}",
  year =	 2004,
  type =	 "{Senior Undergraduate Thesis}",
}

@Article{dugad01,
  title =	 {{A fast scheme for image size change in the compressed domain}},
  author =	 {Dugad, R. and Ahuja, N.},
  journal =	 {IEEE Transactions on Circuits and Systems for Video Technology},
  volume =	 11,
  number =	 4,
  pages =	 {461--474},
  year =	 2001
}

@InProceedings{dynamo99,
  author =	 {Vasanth Bala and Evelyn Duesterwald and Sanjeev Banerjia},
  title =	 {{Dynamo: A} Transparent Dynamic Optimization System},
  year =	 1999,
  booktitle =	 "{Conference on Programming Language Design and Implementation (PLDI)}",
},

@Article{eker_taming_2003,
  title =	 {Taming heterogeneity -- the {Ptolemy} approach},
  volume =	 91,
  abstract =	 {Modern embedded computing systems tend to be heterogeneous in the sense of being composed of subsystems with very different
                  characteristics, which communicate and interact in a variety of ways-synchronous or asynchronous, buffered or unbuffered,
                  etc. Obviously, when designing such systems, a modeling language needs to reflect this heterogeneity. Today's modeling environments
                  usually offer a variant of what we call amorphous heterogeneity to address this problem. This paper argues that modeling systems in
                  this manner leads to unexpected and hard-to-analyze interactions between the communication mechanisms and proposes a more structured
                  approach to heterogeneity, called hierarchical heterogeneity, to solve this problem. It proposes a model structure and semantic
                  framework that support this form of heterogeneity, and discusses the issues arising from heterogeneous component interaction and the
                  desire for component reuse. It introduces the notion of domain polymorphism as a way to address these issues.},
  number =	 1,
  journal =	 {Proceedings of the IEEE},
  author =	 {J. Eker and J.W. Janneck and E.A. Lee and Jie Liu and Xiaojun Liu and J. Ludvig and S. Neuendorffer and S. Sachs and Yuhong Xiong},
  year =	 2003,
  keywords =	 {component reuse,component-based design,domain polymorphism,embedded computing systems,embedded systems,heterogeneous
                  modeling,hierarchical heterogeneity,modeling environments,models of computation,object-oriented programming,programming
                  environments,Ptolemy,Ptolemy II,software architecture,software environment,software reusability},
  pages =	 {127--144}
},

@Misc{elephants-dream,
  key =		 {Elephants},
  title =	 "{Elephant's Dream}",
  howpublished = {\url{http://orange.blender.org/}}
}

@Article{ellson_graphviz_2002,
  title =	 {{Graphviz -- Open} Source Graph Drawing Tools},
  journal =	 {Graph Drawing},
  author =	 {John Ellson and Emden Gansner and Lefteris Koutsofios and Stephen North and Gordon Woodhull},
  year =	 2002,
  pages =	 {594--597}
}

@Article{farach98matching,
  author =	 {M. Farach and M. Thorup},
  title =	 {String matching in {Lempel-Ziv} compressed strings},
  journal =	 {Algorithmica},
  year =	 1998,
  volume =	 20
},

@Article{feng03,
  title =	 {{Image segmentation in compressed domain}},
  author =	 {Feng, G.C. and Jiang, J.},
  journal =	 {Journal of Electronic Imaging},
  volume =	 12,
  number =	 3,
  pages =	 {390--397},
  year =	 2003,
  publisher =	 {Society of Photo-Optical Instrumentation Engineers}
},

@InProceedings{fisher_pads:domain-specific_2005,
  title =	 {{PADS: A} Domain-Specific Language for Processing Ad Hoc Data},
  booktitle =	 {Conference on Programming Language Design and Implementation (PLDI)},
  author =	 {Kathleen Fisher and Robert Gruber},
  year =	 2005,
}

@PhDThesis{frank-thesis,
  type =	 "{Ph.D. Thesis}",
  author =	 {Matthew Frank},
  title =	 {{SUDS: Automatic} Parallelization for {Raw} Processors},
  school =	 {MIT},
  year =	 2003
},

@Misc{fraunhofer03mp3,
  author =	 {{Fraunhofer Institute}},
  title =	 {{MP3 reference implementation}},
  howpublished = "\url{http://www.mpeg1.de/util/dos/mpeg1iis/}",
  year =	 2003
}

@InProceedings{geilen_minimising_2005,
  address =	 {Anaheim, California, USA},
  title =	 {Minimising buffer requirements of synchronous dataflow graphs with model checking},
  abstract =	 {Signal processing and multimedia applications are often implemented on resource constrained embedded systems. It is therefore
                  important to find implementations that use as little resources as possible. These applications are frequently specified as
                  synchronous dataflow graphs. Communication between actors of these graphs requires storage capacity. In this paper, we present an
                  exact method to determine the minimum storage capacity required to execute the graph using model-checking techniques. This can be
                  done for different measures of storage capacity. The problem is known to be NP-complete and because of this, existing buffer
                  minimisation techniques are heuristics and hence not exact. Modern model-checking tools are quite efficient and they have been
                  successfully applied to scheduling-related problems. We study the feasibility of this approach with examples.},
  booktitle =	 {Design Automation Conference (DAC)},
  publisher =	 {ACM},
  author =	 {Marc Geilen and Twan Basten and Sander Stuijk},
  year =	 2005,
  keywords =	 {buffering,model-checking,optimization,synchronous dataflow},
  pages =	 {819--824}
},

@InProceedings{giacomoni07toolchain,
  author =	 {John Giacomoni and Tipp Moseley and Graham Price and Brian Bushnell and Manish Vachharajani and Dirk Grunwald},
  title =	 {Toward a toolchain for pipeline parallel programming on {CMPs}},
  booktitle =	 {{Workshop on Software Tools for Multi-Core Systems (STMCS)}},
  year =	 2007,
},

@InProceedings{gordon-asplos02,
  title =	 {A Stream Compiler for Communication-Exposed Architectures},
  author =	 {Michael I. Gordon and William Thies and Michal Karczmarek and Jasper Lin and Ali S. Meli and Andrew A. Lamb and Chris Leger and
                  Jeremy Wong and Henry Hoffmann and David Maze and Saman Amarasinghe},
  booktitle =	 {International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)},
  year =	 2002,
}

@InProceedings{gordon-asplos06,
  title =	 {Exploiting Coarse-Grained Task, Data, Pipeline Parallelism in Stream Programs},
  author =	 {Michael I. Gordon and William Thies and Saman Amarasinghe},
  booktitle =	 {International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)},
  year =	 2006,
},

@MastersThesis{gordon-thesis,
  author =	 {Michael Gordon},
  title =	 {A Stream-Aware Compiler for Communication-Exposed Architectures},
  school =	 "{Massachusetts Institute of Technology}",
  year =	 2002,
  type =	 "{S.M. Thesis}",
}

@InProceedings{gorlick_using_1991,
  title =	 {Using weaves for software construction and analysis},
  doi =		 {10.1109/ICSE.1991.130620},
  abstract =	 {The authors discuss the architectural features of weaves, their implementation, and their use in a variety of applications. Weaves
                  are networks of concurrently executing tool fragments that communicate by passing objects. Weaves are distinguished from other
                  dataflow styles by their emphasis on instrumentation, continuous observability, and dynamic rearrangement: basic low-overhead
                  instrumentation is inserted automatically, executing weaves can be observed at any time by means of sophisticated analysis agents,
                  without degrading the performance of the weave, and weaves can be dynamically snipped and spliced without interrupting the data
                  flow},
  booktitle =	 {International Conference on Software Engineering (ICSE)},
  author =	 {M.M. Gorlick and R.R. Razouk},
  year =	 1991,
  keywords =	 {analysis agents,concurrently executing tool fragments,continuous observability,dataflow styles,dynamic
                  rearrangement,instrumentation,networks,object passing,parallel programming,software analysis,software construction,software
                  engineering,weaves},
  pages =	 {23--34}
}

@Article{govindarajan_minimizing_2002,
  title =	 {Minimizing Buffer Requirements under Rate-Optimal Schedule in Regular Dataflow Networks},
  volume =	 31,
  doi =		 {10.1023/A:1015452903532},
  abstract =	 {Large-grain synchronous dataflow graphs or multi-rate graphs have the distinct feature that the nodes of the dataflow graph fire at
                  different rates. Such multi-rate large-grain dataflow graphs have been widely regarded as a powerful programming model for DSP
                  applications. In this paper we propose a method to minimize buffer storage requirement in constructing rate-optimal compile-time
                  (MBRO) schedules for multi-rate dataflow graphs. We demonstrate that the constraints to minimize buffer storage while executing at
                  the optimal computation rate (i.e. the maximum possible computation rate without storage constraints) can be formulated as a unified
                  linear programming problem in our framework. A novel feature of our method is that in constructing the rate-optimal schedule, it
                  directly minimizes the memory requirement by choosing the schedule time of nodes appropriately. Lastly, a new circular-arc interval
                  graph coloring algorithm has been proposed to further reduce the memory requirement by allowing buffer sharing among the arcs of the
                  multi-rate dataflow graph.},
  number =	 3,
  journal =	 {Journal of VLSI Signal Processing},
  author =	 {R. Govindarajan and Guang R. Gao and Palash Desai},
  year =	 2002,
  pages =	 {207--229}
},

@PhDThesis{greif_semantics_1975,
  type =	 "{Ph.D. Thesis}",
  title =	 {Semantics of Communicating Parallel Processes},
  school =	 {Massachusetts Insitute of Technology},
  author =	 {Irene Greif},
  year =	 1975,
  keywords =	 {actors}
},

@InProceedings{gummaraju05micro,
  author =	 {Jayanth Gummaraju and Mendel Rosenblum},
  title =	 "{Stream programming on general-purpose processors}",
  booktitle =	 {MICRO},
  year =	 2005
},

@Article{ha97profile,
  author =	 "Soonhoi Ha and Edward A. Lee",
  title =	 {Compile-Time Scheduling of Dynamic Constructs in Dataflow Program Graphs},
  journal =	 "IEEE Transactions on Computers",
  year =	 1997,
  volume =	 6
}

@Article{halbwachs_synchronous_1991,
  title =	 {The synchronous data flow programming language {LUSTRE}},
  volume =	 79,
  issn =	 {0018-9219},
  doi =		 {10.1109/5.97300},
  abstract =	 {The authors describe LUSTRE, a data flow synchronous language designed for programming reactive systems-such as automatic control
                  and monitoring systems-as well as for describing hardware. The data flow aspect of LUSTRE makes it very close to usual description
                  tools in these domains (block-diagrams, networks of operators, dynamical sample-systems, etc.), and its synchronous interpretation
                  makes it well suited for handling time in programs. Moreover, this synchronous interpretation allows it to be compiled into an
                  efficient sequential program. The LUSTRE formalism is very similar to temporal logics. This allows the language to be used for both
                  writing programs and expressing program properties, which results in an original program verification methodology},
  number =	 9,
  journal =	 {Proceedings of the IEEE},
  author =	 {N. Halbwachs and P. Caspi and P. Raymond and D. Pilaud},
  year =	 1991,
  keywords =	 {description tools,LUSTRE,parallel languages,program verification,program verification methodology,reactive systems,sequential
                  program,synchronous data flow programming language,temporal logic,temporal logics},
  pages =	 {1305--1320}
}

@InProceedings{halbwachs_synchronous_1998,
  title =	 {Synchronous Programming of Reactive Systems},
  isbn =	 {3-540-64608-6},
  booktitle =	 {International Conference on Computer Aided Verification},
  publisher =	 {Springer-Verlag},
  author =	 {Nicolas Halbwachs},
  year =	 1998,
  pages =	 {1--16}
},

@Book{harada02,
  author =	 {Hiroshi Harada and Ramjee Prasad},
  title =	 {Simulation and Software Radio for Mobile Communications},
  publisher =	 {Artech House},
  year =	 2002,
}

@Book{harrington-anim,
  author =	 {Richard Harrington and Rachel Max and Marcus Geduld},
  title =	 {After Effects on the Spot: {Time-saving} Tips and Shortcuts from the Pros},
  publisher =	 {Focal Press},
  year =	 2004
},

@InProceedings{henderson_lazy_1976,
  title =	 "{A lazy evaluator}",
  booktitle =	 "{Symposium on Principles of Programming Languages (POPL)}",
  author =	 {Peter Henderson and James H. Morris},
  year =	 1976,
}

@InProceedings{hewitt_universal_1973,
  title =	 {A Universal Modular {ACTOR} Formalism for Artificial Intelligence},
  booktitle =	 {International Joint Conferences on Artificial Intelligence (IJCAI)},
  author =	 {Carl Hewitt and Peter Bishop and Richard Steiger},
  year =	 1973,
  keywords =	 {actors},
},

@Article{hoare_communicating_1978,
  title =	 {Communicating sequential processes},
  volume =	 21,
  doi =		 {10.1145/359576.359585},
  abstract =	 {This paper suggests that input and output are basic primitives of programming and that parallel composition of communicating
                  sequential processes is a fundamental program structuring method. When combined with a development of Dijkstra's guarded command,
                  these concepts are surprisingly versatile. Their use is illustrated by sample solutions of a variety of a familiar programming
                  exercises.},
  number =	 8,
  journal =	 {Communications of the ACM},
  author =	 {C. A. R. Hoare},
  year =	 1978,
  keywords =	 {classes,concurrency,conditional critical regions,coroutines,data representations,guarded commands,input,iterative
                  arrays,monitors,multiple entries,multiple exits,nondeterminacy,output,parallel programming,procedures,program
                  structures,programming,programming languages,programming primitives,recursion},
  pages =	 {666--677}
}

@InProceedings{hormati_optimus:_2008,
  address =	 {Atlanta, {GA,} {USA}},
  title =	 {Optimus: {Efficient} realization of streaming applications on {FPGAs}},
  isbn =	 {978-1-60558-469-0},
  doi =		 {10.1145/1450095.1450105},
  abstract =	 {In this paper, we introduce Optimus: an optimizing synthesis compiler for streaming applications. Optimus compiles programs written
                  in a high level streaming language to either software or hardware implementations. The compiler uses a hierarchical compilation
                  strategy that separates concerns between macro- and micro-functional requirements. Macro-functional concerns address how components
                  (modules) are assembled to implement larger more complex applications. Micro-functional issues deal with synthesis issues of the
                  module internals. Optimus thus allows software developers who lack deep hardware design expertise to transparently leverage the
                  advantages of hardware customization without crossing the semantic gap between high level languages and hardware description
                  languages. Optimus generates streaming hardware that achieves on average 40x speedup over our baseline embedded processor for a
                  fraction of the energy. Additionally, our results show that streaming-specific optimizations can further improve performance by
                  255\% and reduce the area requirements by 16\% in average. These designs are competitive with {Handel-C} implementations for some of
                  the same benchmarks.},
  booktitle =	 {International Conference on Compilers, Architectures and Synthesis for Embedded Systems (CASES)},
  publisher =	 {{ACM}},
  author =	 {Amir Hormati and Manjunath Kudlur and Scott Mahlke and David Bacon and Rodric Rabbah},
  year =	 2008,
  keywords =	 {compiler,embedded systems,fpga,heterogeneous,optimization,streaming},
  pages =	 {41--50}
}

@InProceedings{hrb88pdg,
  author =	 "S. Horwitz and T. Reps and D. Binkley",
  title =	 "Interprocedural slicing using dependence graphs",
  booktitle =	 "Conference on Programming Language Design and Implementation (PLDI)",
  year =	 1988
}

@InProceedings{huang_liquid_2008,
  address =	 {Paphos, Cypress},
  title =	 {{Liquid Metal}: {Object-oriented} Programming Across the Hardware/Software Boundary},
  isbn =	 {978-3-540-70591-8},
  abstract =	 {The paradigm shift in processor design from monolithic processors to multicore has renewed interest in programming models that
                  facilitate parallelism. While multicores are here today, the future is likely to witness architectures that use reconfigurable
                  fabrics {(FPGAs)} as coprocessors. {FPGAs} provide an unmatched ability to tailor their circuitry per application, leading to better
                  performance at lower power. Unfortunately, the skills required to program {FPGAs} are beyond the expertise of skilled software
                  programmers. This paper shows how to bridge the gap between programming software vs. hardware. We introduce Lime, a new
                  {Object-Oriented} language that can be compiled for the {JVM} or into a synthesizable hardware description language. Lime extends
                  Java with features that provide a way to carry {OO} concepts into efficient hardware. We detail an end-to-end system from the
                  language down to hardware synthesis and demonstrate a Lime program running on both a conventional processor and in an {FPGA.}},
  booktitle =	 {European Conference on Object-Oriented Programming (ECOOP)},
  publisher =	 {{Springer-Verlag}},
  author =	 {Shan Shan Huang and Amir Hormati and David F. Bacon and Rodric Rabbah},
  year =	 2008,
  pages =	 {76--103}
}

@Misc{ibm-video,
  author =	 {George Dolbier and Veronika Megler},
  title =	 {Building an animation and special effects studio from the ground up},
  howpublished = "{IBM Report}",
  year =	 2005,
},

@Misc{ilm-interview,
  author =	 {Scott Benza},
  title =	 {Interview transcript},
  howpublished = "{Computer Graphics Society}",
  note =	 {\url{http://forums.cgsociety.org/showthread.php?s=&threadid=115293}}
},

@Article{imagine03ieee,
  author =	 "Ujval J. Kapasi and Scott Rixner and William J. Dally and Brucek Khailany and Jung Ho Ahn and Peter Mattson and John D. Owens",
  title =	 "Programmable stream processors",
  journal =	 "IEEE Computer",
  year =	 2003
},

@Article{johnston_advances_2004,
  title =	 {Advances in dataflow programming languages},
  volume =	 36,
  doi =		 {10.1145/1013208.1013209},
  abstract =	 {Many developments have taken place within dataflow programming languages in the past decade. In particular, there has been a great
                  deal of activity and advancement in the field of dataflow visual programming languages. The motivation for this Article is to review
                  the content of these recent developments and how they came about. It is supported by an initial review of dataflow programming in
                  the 1970s and 1980s that led to current topics of research. It then discusses how dataflow programming evolved toward a hybrid von
                  Neumann dataflow formulation, and adopted a more coarse-grained approach. Recent trends toward dataflow visual programming languages
                  are then discussed with reference to key graphical dataflow languages and their development environments. Finally, the Article
                  details four key open topics in dataflow programming languages.},
  number =	 1,
  journal =	 {ACM Compututing Surveys},
  author =	 {Wesley M. Johnston and J. R. Paul Hanna and Richard J. Millar},
  year =	 2004,
  keywords =	 {component software,co-ordination languages,data flow visual programming,dataflow,graphical programming,multithreading,software
                  engineering},
  pages =	 {1--34}
}

@Article{kahn_semantics_1974,
  title =	 {The semantics of a simple language for parallel programming},
  journal =	 {Information Processing},
  author =	 {G Kahn},
  year =	 1974,
  pages =	 {471--475}
},

@MastersThesis{karczma-thesis,
  author =	 {Michal A. Karczmarek},
  title =	 {Constrained and Phased Scheduling of Synchronous Data Flow Graphs for the {StreamIt} Language},
  school =	 {Massachusetts Institute of Technology},
  year =	 2002,
},

@InProceedings{karczmarek-lctes03,
  title =	 {Phased Scheduling of Stream Programs},
  author =	 {Michal Karczmarek and William Thies and Saman Amarasinghe},
  booktitle =	 {Conference on Languages, Compilers, Tools for Embedded Systems (LCTES)},
  year =	 2003,
},

@InProceedings{karkowski97overcoming,
  author =	 {Ireneusz Karkowski and Henk Corporaal},
  title =	 {Overcoming the Limitations of the Traditional Loop Parallelization},
  booktitle =	 {{HPCN Europe}},
  year =	 1997,
}

@Article{karp_properties_1966,
  title =	 {Properties of a Model for Parallel Computations: {Determinacy,} Termination, Queueing},
  volume =	 14,
  number =	 6,
  journal =	 {SIAM Journal on Applied Mathematics},
  author =	 {Richard M. Karp and Rayamond E. Miller},
  year =	 1966,
  pages =	 {1390--1411}
}

@Article{karr76,
  author =	 {Michael Karr},
  title =	 {Affine Relationships Among Variables of A Program},
  journal =	 {Acta Informatica},
  year =	 1976,
  volume =	 6,
  pages =	 {133-155}
}

@InProceedings{ko_memory-constrained_2006,
  title =	 {Memory-constrained Block Processing Optimization for Synthesis of {DSP} Software},
  doi =		 {10.1109/ICSAMOS.2006.300820},
  abstract =	 {Digital signal processing (DSP) applications involve processing long streams of input data. It is important to take into account
                  this form of processing when implementing embedded software for DSP systems. Task-level vectorization, or block processing, is a
                  useful dataflow graph transformation that can significantly improve execution performance by allowing subsequences of data items to
                  be processed through individual task invocations. In this way, several benefits can be obtained, including reduced context switch
                  overhead, increased memory locality, improved utilization of processor pipelines, and use of more efficient DSP-oriented addressing
                  modes. On the other hand, block processing generally results in increased memory requirements since it effectively increases the
                  sizes of the input and output values associated with processing tasks. In this paper, we investigate the memory-performance tradeoff
                  associated with block processing. We develop novel block processing algorithms that take carefully take into account memory
                  constraints to achieve efficient block processing configurations within given memory space limitations. Our experimental results
                  indicate that these methods derive optimal memory-constrained block processing solutions most of the time. We demonstrate the
                  advantages of our block processing techniques on practical kernel functions and applications in the DSP domain},
  booktitle =	 {International Conference on Embedded Computer Systems: Architectures, Modeling and Simulation},
  author =	 {Ming-Yung Ko and Chung-Ching Shen and Shuvra S. Bhattacharyya},
  year =	 2006,
  keywords =	 {data flow analysis,data flow graphs,dataflow graph transformation,digital signal processing application,DSP software
                  synthesis,DSP-oriented addressing mode,embedded software,embedded systems,memory locality,memory-constrained block processing
                  optimization algorithm,optimising compilers,processor pipeline utilization,signal processing,storage management,task-level
                  vectorization},
  pages =	 {137--143}
}

@TechReport{kohli04,
  author =	 {Sanjeev Kohli},
  title =	 {Cache Aware Scheduling of Synchronous Dataflow Programs},
  institution =	 {UC Berkeley},
  year =	 2004,
  type =	 {Master's Report Technical Memorandum},
  number =	 {UCB/URL M04/03}
}

@InProceedings{kudlur_orchestratingexecution_2008,
  title =	 {Orchestrating the execution of stream programs on multicore platforms},
  abstract =	 {While multicore hardware has become ubiquitous, explicitly parallel programming models and compiler techniques for exploiting
                  parallelism on these systems have noticeably lagged behind. Stream programming is one model that has wide applicability in the
                  multimedia, graphics, and signal processing domains. Streaming models execute as a set of independent actors that explicitly
                  communicate data through channels. This paper presents a compiler technique for planning and orchestrating the execution of
                  streaming applications on multicore platforms. An integrated unfolding and partitioning step based on integer linear programming is
                  presented that unfolds data parallel actors as needed and maximally packs actors onto cores. Next, the actors are assigned to
                  pipeline stages in such a way that all communication is maximally overlapped with computation on the cores. To facilitate
                  experimentation, a generalized code generation template for mapping the software pipeline onto the Cell architecture is
                  presented. For a range of streaming applications, a geometric mean speedup of 14.7x is achieved on a 16-core Cell platform compared
                  to a single core.},
  booktitle =	 {Conference on Programming Language Design and Implementation (PLDI)},
  author =	 {Manjunath Kudlur and Scott Mahlke},
  year =	 2008,
  keywords =	 {cell processor,multicore,software pipelining,stream programming,streamit},
}

@MastersThesis{kuo-thesis,
  author =	 {Kimberly Kuo},
  title =	 {The {StreamIt} Development Tool: {A} Programming Environment for {StreamIt}},
  school =	 "{Massachusetts Institute of Technology}",
  year =	 2004,
  type =	 "{M.Eng. Thesis}",
},

@InProceedings{kuo05,
  author =	 {Kimberly Kuo and Rodric Rabbah and Saman Amarasinghe},
  title =	 {A Productive Programming Environment for Stream Computing},
  booktitle =	 "{Workshop on Productivity and Performance in High-End Computing}",
  year =	 2005,
}

@InProceedings{labonte04svm,
  title =	 {The stream virtual machine},
  author =	 {Labonte, F. and Mattson, P. and Buck, I. and Kozyrakis, C. and Horowitz, M.},
  booktitle =	 {International Conference on Parallel Architectures and Compilation Techniques (PACT)},
  year =	 2004
},

@InProceedings{lamb-pldi03,
  title =	 {Linear Analysis and Optimization of Stream Programs},
  author =	 {Andrew A. Lamb and William Thies and Saman Amarasinghe},
  booktitle =	 "{Conference on Programming Language Design and Implementation (PLDI)}",
  year =	 2003,
}

@MastersThesis{lamb-thesis,
  author =	 {Andrew A. Lamb},
  title =	 {Linear Analysis and Optimization of Stream Programs},
  school =	 "{Massachusetts Institute of Technology}",
  year =	 2003,
  type =	 "{M.Eng. Thesis}",
},

@Article{landin_correspondence_1965,
  title =	 {Correspondence between {ALGOL 60} and {Church's} Lambda-notation: {Part I}},
  volume =	 8,
  number =	 2,
  journal =	 "{Communications of the ACM}",
  author =	 {P. J. Landin},
  year =	 1965,
  pages =	 {89--101}
},

@Article{lauwereins_grape-ii:system-level_1995,
  title =	 {{Grape-II}: {A} system-level prototyping environment for {DSP} applications},
  volume =	 28,
  issn =	 {0018-9162},
  doi =		 {10.1109/2.347998},
  abstract =	 {We propose a rapid-prototyping setup to minimize development cost and a structured-prototyping methodology to reduce programming
                  effort. The general-purpose hardware consists of commercial DSP processors, bond-out versions of core processors, and
                  field-programmable gate arrays (FPGAs) linked to form a powerful, heterogeneous multiprocessor, such as the Paradigm RP developed
                  within the Retides (Real-Time DSP Emulation System) Esprit project. Our Graphical Rapid Prototyping Environment (Grape-II) automates
                  the prototyping methodology for these hardware systems by offering tools for resource estimation, partitioning, assignment, routing,
                  scheduling, code generation, and parameter modification. Grape-II has been used successfully in three real-world DSP applications},
  number =	 2,
  journal =	 {IEEE Computer},
  author =	 {R. Lauwereins and M. Engels and M. Ade and J.A. Peperstraete},
  year =	 1995,
  keywords =	 {assignment,code generation,commercial DSP processors,configuration management,core processors,development cost,development
                  systems,DSP applications,Esprit project,field-programmable gate arrays,general purpose computers,general purpose reusable
                  hardware,general-purpose hardware,Grape-II,Graphical Rapid Prototyping Environment,heterogeneous multiprocessor,multiprocessing
                  systems,partitioning,programming environments,rapid-prototyping,Real-Time DSP Emulation System,resource
                  estimation,Retides,routing,scheduling,signal processing,software prototyping,software tools,structured-prototyping
                  methodology,system-level prototyping environment},
  pages =	 {35--43}
}

@Article{le_guernic_signal--data_1986,
  title =	 {{Signal -- A} Data Flow-Oriented Language for Signal Processing},
  volume =	 34,
  number =	 2,
  journal =	 {IEEE Transactions on Acoustics, Speech and Signal Processing},
  author =	 {P. Le Guernic and A. Benveniste and P. Bournai and T. Gautier},
  year =	 1986,
  pages =	 {362--374}
}

@Article{lee87,
  author =	 {Edward Ashford Lee and David G. Messerschmitt},
  title =	 {Static Scheduling of Synchronous Data Flow Programs for Digital Signal Processing},
  journal =	 {IEEE Transactions on Computing},
  volume =	 36,
  number =	 1,
  year =	 1987,
  issn =	 {0018-9340},
  pages =	 {24--35},
  publisher =	 {IEEE Computer Society},
  address =	 {Washington, DC, USA},
}

@InProceedings{lee97mediabench,
  title =	 {{MediaBench}: {A} tool for evaluating and synthesizing multimedia andcommunications systems},
  author =	 {Lee, C. and Potkonjak, M. and Mangione-Smith, WH},
  booktitle =	 {IEEE MICRO},
  year =	 1997
},

@Article{lee_gabriel:design_1989,
  title =	 {Gabriel: {A} design environment for {DSP}},
  volume =	 37,
  abstract =	 {Gabriel is a software system intended to manage the complete development of real-time digital signal processing (DSP) applications,
                  from conception and experimentation to implementation in real-time hardware. It performs non-real-time simulations as well as code
                  synthesis for real-time hardware. It is intended to ease code development for architectures that are not easy targets for
                  conventional compilers, such as multiprocessor systems built with very high-performance microcoded DSPs. The system is designed to
                  be retargetable in two ways. First, it can synthesize code for a variety of multi-DSP architectures where the user specifies the
                  salient features of the architecture. Second, it can target different DSPs. The authors have concentrated on code generation for the
                  Motorola DSP56001, although code generation for the AT\&T DSP32 has been demonstrated. At the highest level, an algorithm is
                  described using a hierarchical block diagram. At the lowest level, the user can either simulate the algorithm locally on the
                  workstation, simulate the target architecture running the generated code, or download the code into hardware and run it in real
                  time. Gabriel is capable of handling multiple sample rates, iteration, and recurrences},
  number =	 11,
  journal =	 {IEEE Transactions on Acoustics, Speech and Signal Processing},
  author =	 {E.A. Lee and W.-H. Ho and E.E. Goei and J.C. Bier and S. Bhattacharyya},
  year =	 1989,
  keywords =	 {AT\&,code synthesis,computerised signal processing,digital signal processing chips,DSP,Gabriel,hierarchical block diagram,Motorola
                  DSP56001,multi-DSP architectures,programming environments,real-time digital signal processing,real-time hardware,software system,T
                  DSP32},
  pages =	 {1751--1762}
}

@TechReport{lee_overview_2003,
  title =	 {Overview of the {Ptolemy} Project},
  number =	 {UCB/ERL M03/25},
  institution =	 {University of California, Berkeley},
  author =	 {Edward A Lee},
  year =	 2003
}

@Article{lee_static_1987,
  title =	 {Static scheduling of synchronous data flow programs for digital signal processing},
  volume =	 36,
  number =	 1,
  journal =	 {IEEE Transactions on Computing},
  author =	 {Edward Ashford Lee and David G. Messerschmitt},
  year =	 1987,
  pages =	 {24--35}
},

@Article{legacy,
  author =	 {Cindy Howard and P.J. Hoke},
  title =	 {Legacy Migrations: {Turning} Legacy Systems Into Gold--The Planning Process},
  journal =	 "{T\&I Supplement}",
  month =	 "May/June",
  year =	 2006,
  note =	 {\url{http://www.ateras.com/PDF/bij_Article.pdf}}
},

@InProceedings{leinhard06objflow,
  title =	 {Capturing how objects flow at runtime},
  author =	 {Lienhard, A. and Ducasse, S. and G{\i}rba, T. and Nierstrasz, O.},
  booktitle =	 {Workshop on Program Comprehension through Dynamic Analysis},
  year =	 2006
},

@PhDThesis{levine98,
  type =	 "{Ph.D. Thesis}",
  author =	 {Levine, S.},
  title =	 {Audio representations for data compression and compressed domain processing},
  school =	 {Stanford University},
  year =	 1998
},

@InProceedings{liao06brook,
  author =	 {S. Liao and Zhaohui Du and Gansha Wu and G. Lueh},
  title =	 {Data and computation transformations for {Brook} streaming applications on multiprocessors},
  booktitle =	 {International Symposium on Code Generation and Optimization (CGO)},
  year =	 2006
},

@Book{long-anim,
  author =	 {Ben Long and Sonja Schenk},
  title =	 {Digital Filmmaking Handbook},
  publisher =	 {Charles River Media},
  year =	 2002
}

@InProceedings{malton05recovery,
  title =	 {Enhancing static architectural design recovery by lightweight dynamic analysis},
  author =	 {A. Malton and A. Pahelvan},
  booktitle =	 {Workshop on Program Comprehension through Dynamic Analysis},
  year =	 2005
}

@Article{mandal99survey,
  title =	 {A critical evaluation of image and video indexing techniques in the compressed domain},
  author =	 {Mandal, MK and Idris, F. and Panchanathan, S.},
  journal =	 {Image and Vision Computing},
  volume =	 17,
  number =	 7,
  pages =	 {513--529},
  year =	 1999,
  publisher =	 {Elsevier Science}
}

@InProceedings{mani-permutations,
  author =	 {Mani Narayanan and Kathy Yelick},
  title =	 {Generating Permutation Instructions from a High-Level Description},
  booktitle =	 {Workshop on Media and Streaming Processors (MSP)},
  year =	 2004,
}

@Article{maraninchi_argos:automaton-based_2001,
  title =	 {{Argos: An} Automaton-Based Synchronous Language},
  volume =	 27,
  number =	 {1-3},
  journal =	 "{Computer Languages}",
  author =	 {Florence Maraninchi and Yann Remond},
  year =	 2001,
  pages =	 {61--92}
}

@Misc{mattson_streaming_2003,
  address =	 {Dedham, MA},
  title =	 {{"Streaming"} as a Pattern},
  url =		 {\url{http://cag.csail.mit.edu/wss03/}},
  author =	 {Peter Mattson and Richard Lethin},
  month =	 aug,
  year =	 2003
},

@Article{may87communicating,
  author =	 "David May and Roger Shepherd and Catherine Keane",
  title =	 {Communicating Process Architecture: {Transputers} and {Occam}},
  journal =	 {Future Parallel Computers: An Advanced Course (Lecture Notes in Computer Science)},
  volume =	 272,
  pages =	 "35--81",
  year =	 1987
},

@InProceedings{mccool_shader_2002,
  title =	 {Shader metaprogramming},
  booktitle =	 {SIGGRAPH},
  author =	 {Michael D. {McCool} and Zheng Qin and Tiberiu S. Popa},
  year =	 2002,
},

@InProceedings{mccool_shader_2004,
  title =	 {Shader algebra},
  booktitle =	 {SIGGRAPH},
  author =	 {Michael {McCool} and Stefanus Du Toit and Tiberiu Popa and Bryan Chan and Kevin Moule},
  year =	 2004,
},

@TechReport{mcgraw_sisal:_1985,
  type =	 {Language reference manual, version 1.2},
  title =	 {{SISAL: Streams} and Iteration in a Single Assignment Language},
  institution =	 {Lawrence Livermore National Laboratory},
  author =	 {J. McGraw and S. Skedzielewski and S. Allan and R. Oldhoeft and J. Glauert and C.C. Kirkham and B. Noyce and R. Thomas},
  year =	 1985
},

@Article{medford_microsoft/yahoo_2008,
  title =	 {{Microsoft/Yahoo} is Mobile Equal of {Google}},
  url =		 {\url{http://www.redherring.com/Home/23680}},
  journal =	 {Red Herring},
  author =	 {Cassimir Medford},
  month =	 feb,
  year =	 2008
}

@Article{misra99,
  title =	 {A memory efficient method for fast transposing run-length encoded images},
  author =	 {Misra, V. and Arias, JF and Chhabra, AK},
  journal =	 {International Conference on Document Analysis and Recognition},
  pages =	 {161--164},
  year =	 1999
}

@InProceedings{mitchel06modeling,
  title =	 {Modeling runtime behavior in framework-based applications},
  author =	 {Nick Mitchell and Gary Sevitsky and Harini Srinivasan},
  booktitle =	 {European Conference on Object-Oriented Programming (ECOOP)},
  year =	 2006
}

@Article{mukherjee02,
  title =	 {Image resizing in the compressed domain using subband {DCT}},
  author =	 {Mukherjee, J. and Mitra, SK},
  journal =	 {IEEE Transactions on Circuits and Systems for Video Technology},
  volume =	 12,
  number =	 7,
  pages =	 {620--627},
  year =	 2002
}

@Article{murata_petri_1989,
  title =	 {Petri nets: {Properties}, analysis and applications},
  volume =	 77,
  abstract =	 {Starts with a brief review of the history and the application areas considered in the literature. The author then proceeds with
                  introductory modeling examples, behavioral and structural properties, three methods of analysis, subclasses of Petri nets and their
                  analysis. In particular, one section is devoted to marked graphs, the concurrent system model most amenable to
                  analysis. Introductory discussions on stochastic nets with their application to performance modeling, and on high-level nets with
                  their application to logic programming, are provided. Also included are recent results on reachability criteria. Suggestions are
                  provided for further reading on many subject areas of Petri nets},
  number =	 4,
  journal =	 {Proceedings of the IEEE},
  author =	 {T. Murata},
  year =	 1989,
  keywords =	 {behavioural properties,concurrent system model,high-level nets,logic programming,marked graphs,performance modeling,Petri
                  nets,reachability criteria,stochastic nets,stochastic processes,structural properties,subclasses},
  pages =	 {541--580}
}

@InProceedings{murt1999x3,
  author =	 {P. K. Murthy and S. S. Bhattacharyya},
  title =	 {A Buffer Merging Technique for Reducing Memory Requirements of Synchronous Dataflow Specifications},
  booktitle =	 {Proceedings of the International Symposium on System Synthesis},
  year =	 1999,
  pages =	 {78--84},
  address =	 {San Jose, California},
  pdf =		 {murt1999x3.pdf}
}

@Article{murthy_buffer_2004,
  title =	 {Buffer merging -- a powerful technique for reducing memory requirements of synchronous dataflow specifications},
  volume =	 9,
  doi =		 {10.1145/989995.989999},
  abstract =	 {We develop a new technique called buffer merging for reducing memory requirements of synchronous dataflow (SDF) specifications. SDF
                  has proven to be an attractive model for specifying DSP systems, and is used in many commercial tools like System Canvas, SPW, and
                  Cocentric. Good synthesis from an SDF specification depends crucially on scheduling, and memory is an important metric for
                  generating efficient schedules. Previous techniques on memory minimization have either not considered buffer sharing at all, or have
                  done so at a fairly coarse level (the meaning of this will be made more precise in the Article). In this Article, we develop a
                  buffer overlaying strategy that works at the level of an input/output edge pair of an actor. It works by algebraically encapsulating
                  the lifetimes of the tokens on the input/output edge pair, and determines the maximum amount of the input buffer space that can be
                  reused by the output. We develop the mathematical basis for performing merging operations, and develop several algorithms and
                  heuristics for using the merging technique for generating efficient implementations. We show improvements of up to 48\&percnt; over
                  previous techniques.},
  number =	 2,
  journal =	 {ACM Transactions on Design Automation for Electronic Systems},
  author =	 {Praveen K. Murthy and Shuvra S. Bhattacharyya},
  year =	 2004,
  keywords =	 {array lifetime,block diagram compiler,buffer overlaying,dataflow,design methodology,dsp and embedded systems,graph coloring,lifetime
                  analysis,memory optimization,path covering,synchronous dataflow},
  pages =	 {212--237}
}

@InProceedings{murthy_minimizing_1994,
  title =	 {Minimizing memory requirements for chain-structured synchronous dataflow programs},
  abstract =	 {This paper addresses trade-offs between the minimization of program memory and data memory requirements in the compilation of
                  dataflow programs for multirate signal processing. Our techniques are specific to the synchronous dataflow (SDF) model of Lee and
                  Messerschmitt (1987), which has been used extensively in software synthesis environments for DSP. We focus on programs that are
                  represented as chain-structured SDF graphs. We show that there is an O(n 3) dynamic programming algorithm for determining a schedule
                  that minimizes data memory usage among the set of schedules that minimize program memory usage. A practical example to illustrate
                  the efficacy of this approach is given. Some extensions of this algorithm are also given; for example, we show that the algorithm
                  applies to the more general class of well-ordered graphs},
  booktitle =	 {International Conference on Acoustics, Speech, and Signal Processing (ICASSP)},
  author =	 {P.K. Murthy and S.S. Bhattacharyya and E.A. Lee},
  year =	 1994,
  keywords =	 {chain-structured SDF graphs,chain-structured synchronous dataflow programs,data flow computing,data flow graphs,data memory,digital
                  storage,DSP,dynamic programming,dynamic programming algorithm,memory requirements minimisation,minimisation,multirate signal
                  processing,program memory,signal processing,software synthesis environments,well-ordered graphs},
}

@Article{murthy_multidimensional_2002,
  title =	 {Multidimensional synchronous dataflow},
  volume =	 50,
  issn =	 {1053-587X},
  doi =		 {10.1109/TSP.2002.800830},
  abstract =	 {Signal flow graphs with dataflow semantics have been used in signal processing system simulation, algorithm development, and
                  real-time system design. Dataflow semantics implicitly expose function parallelism by imposing only a partial ordering constraint on
                  the execution of functions. One particular form of dataflow called synchronous dataflow (SDF) has been quite popular in programming
                  environments for digital signal processing (DSP) since it has strong formal properties and is ideally suited for expressing
                  multirate DSP algorithms. However, SDF and other dataflow models use first-in first-out (FIFO) queues on the communication channels
                  and are thus ideally suited only for one-dimensional (1-D) signal processing algorithms. While multidimensional systems can also be
                  expressed by collapsing arrays into 1-D streams, such modeling is often awkward and can obscure potential data parallelism that
                  might be present. SDF can be generalized to multiple dimensions; this model is called multidimensional synchronous dataflow
                  (MDSDF). This paper presents MDSDF and shows how MDSDF can be efficiently used to model a variety of multidimensional DSP systems,
                  as well as other types of systems that are not modeled elegantly in SDF. However, MDSDF generalizes the FIFO queues used in SDF to
                  arrays and, thus, is capable only of expressing systems sampled on rectangular lattices. This paper also presents a generalization
                  of MDSDF that is capable of handling arbitrary sampling lattices and lattice-changing operations such as nonrectangular decimation
                  and interpolation. An example of a practical system is given to show the usefulness of this model. The key challenge in generalizing
                  the MDSDF model is preserving static schedulability, which eliminates the overhead associated with dynamic scheduling, and
                  preserving a model where data parallelism, as well as functional parallelism, is fully explicit},
  number =	 8,
  journal =	 {IEEE Transactions on Signal Processing},
  author =	 {P.K. Murthy and E.A. Lee},
  year =	 2002,
  keywords =	 {algorithm development,communication channels,data flow computing,data flow graphs,data parallelism,dataflow semantics,digital signal
                  processing,FIFO queues,first-in first-out queues,functional parallelism,graphical programming model,interpolation,lattice-changing
                  operations,multidimensional DSP systems,multidimensional signal processing,multidimensional synchronous dataflow,multirate DSP
                  algorithms,nonrectangular decimation,partial ordering constraint,programming environments,queueing theory,real-time system
                  design,rectangular lattices,sampling lattices,signal flow graphs,signal processing system simulation,signal sampling,static
                  scheduling},
  pages =	 {2064--2079}
},

@Article{murthy_shared_2001,
  title =	 {Shared buffer implementations of signal processing systems using lifetime analysis techniques},
  volume =	 20,
  issn =	 {0278-0070},
  abstract =	 {There has been a proliferation of block-diagram environments for specifying and prototyping digital signal processing (DSP)
                  systems. These include tools from academia such as Ptolemy and commercial tools such as DSPCanvas from Angeles Design Systems,
                  signal processing work system (SPW) from Cadence, and COSSAP from Synopsys. The block diagram languages used in these environments
                  are usually based on dataflow semantics because various subsets of dataflow have proven to be good matches for expressing and
                  modeling signal processing systems. In particular, synchronous dataflow (SDF) has been found to be a particularly good match for
                  expressing multirate signal processing systems. One of the key problems that arises during synthesis from an SDF specification is
                  scheduling. Past work on scheduling from SDF has focused on optimization of program memory and buffer memory under a model that did
                  not exploit sharing opportunities. In this paper, we build on our previously developed analysis and optimization framework for
                  looped schedules to formally tackle the problem of generating optimally compact schedules for SDF graphs. We develop techniques for
                  computing these optimally compact schedules in a manner that also attempts to minimize buffering memory under the assumption that
                  buffers will be shared. This results in schedules whose data memory usage is drastically lower than methods in the past have
                  achieved. The method we use is that of lifetime analysis; we develop a model for buffer lifetimes in SDF graphs and develop
                  scheduling algorithms that attempt to generate schedules that minimize the maximum number of live tokens under the particular buffer
                  lifetime model. We develop several efficient algorithms for extracting the relevant lifetimes from the SDF schedule. We then use the
                  well-known first-fit heuristic for packing arrays efficiently into memory. We report extensive experimental results on applying
                  these techniques to several practical SDF systems and show improvements that average 50\% over previous techniques, with some
                  systems exhibiting up to an 83\% improvement over previous techniques },
  number =	 2,
  journal =	 {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  author =	 {P.K. Murthy and S.S. Bhattacharyya},
  year =	 2001,
  keywords =	 {block-diagram environments,buffer lifetime model,buffer lifetimes,buffer storage,data flow computing,data memory usage,dataflow
                  semantics,digital signal processing chips,digital signal processing systems,dynamic programming,first-fit heuristic,graph
                  colouring,lifetime analysis techniques,live tokens,multirate signal processing,optimally compact schedules,program
                  compilers,scheduling,shared buffer implementations,shared memory systems,storage allocation,synchronous dataflow},
  pages =	 {177--198}
}

@InProceedings{murthy_system_2001,
  title =	 {System canvas: {A} new design environment for embedded {DSP} and telecommunication systems},
  abstract =	 {We present a new design environment, called System Canvas, targeted at DSP and telecommunication system designs. Our environment
                  uses an easy-to-use block-diagram syntax to specify systems at a very high level of abstraction. The block diagram syntax is based
                  on formal semantics, and uses a number of different models of computation including cyclo-static dataflow, dynamic dataflow, and a
                  discrete-event model. A key feature of our tool is that the user does not need to have an awareness of which model is being used;
                  the models can be freely mixed and matched and a simulation can consist of an arbitrary combination of models. The blocks are
                  written in `C'or `C++' and it is straightforward to write custom blocks and incorporate them into custom libraries. Other key
                  features include the ability to control simulations via language-neutral scripts, and a powerful optimization engine that enables
                  optimization of the system over arbitrarily specified parameters, constraints, and cost functions. Fixed-point analysis capability
                  allows any signal or variable in the system to be set to any type of number system before the simulation proceeds. The tool is
                  available on the Windows NT platform and incorporates modern and ubiquitous Windows GUI look and feel.},
  booktitle =	 {International Symposium on Hardware/Software Codesign (CODES)},
  author =	 {Praveen K. Murthy and Etan G. Cohen and Steve Rowland},
  year =	 2001,
},

@Article{nang00,
  title =	 {Caption processing for {MPEG} video in {MC-DCT} compressed domain},
  author =	 {Nang, J. and Kwon, O. and Hong, S.},
  journal =	 {ACM Multimedia},
  pages =	 {211--218},
  year =	 2000,
},

@Article{navarro03regular,
  author =	 {Gonzalo Navarro},
  title =	 {Regular expression searching on compressed text},
  journal =	 {Journal of Discrete Algorithms},
  year =	 2003,
  volume =	 1
}

@Article{navarro05lzgrep,
  author =	 {Gonzalo Navarro and Jorma Tarhio},
  title =	 {{LZgrep}: {A} {Boyer-Moore} string matching tool for {Ziv-Lempel} compressed text},
  journal =	 {Software: Practice and Experience},
  year =	 2005,
  volume =	 35
}

@InProceedings{nethercote03redux,
  title =	 {Redux: {A} dynamic dataflow tracer},
  author =	 {Nethercote, N. and Mycroft, A.},
  booktitle =	 {Workshop on Runtime Verification},
  year =	 2003
}

@InProceedings{nethercote07valgrind,
  title =	 {Valgrind: {A} framework for heavyweight dynamic binary instrumentation},
  author =	 {Nicholas Nethercote and Julian Seward},
  booktitle =	 {Conference on Programming Language Design and Implementation (PLDI)},
  year =	 2007
}

@Misc{nikhil_id_1991,
  title =	 {{ID} Language Reference Manual, Version 90.1},
  howpublished = "{Computation Structures Group Memo 284-2, Massachusetts Institute of Technology}",
  author =	 {Rishiyur S.  Nikhil},
  year =	 1991,
}

@book{nikhil_implicit_2001,
  edition =	 {1st},
  title =	 {Implicit Parallel Programming in {pH}},
  publisher =	 {Morgan Kaufmann},
  author =	 {Rishiyur Nikhil and Arvind},
  year =	 2001,
  pages =	 400
}

@Manual{occammanual,
  title =	 {Occam 2 Reference Manual},
  author =	 "{Inmos Corporation}",
  organization = {Prentice Hall},
  year =	 1988
}

@TechReport{ola-techrep,
  author =	 {Ola Johnsson and Magnus Stenemo and Zain ul-Abdin},
  title =	 {Programming and Implementation of Streaming Applications},
  institution =	 {Halmstad University},
  year =	 2005,
  number =	 {IDE0405},
}

@Book{oppenheim-symbolic,
  editor =	 {Alan V. Oppenheim and S. Hamid Nawab},
  title =	 {Symbolic and Knowledge-Based Signal Processing},
  publisher =	 {Prentice Hall},
  year =	 1992,
}

@InProceedings{ottoni05decoupled,
  author =	 {Guilherme Ottoni and Ram Rangan and Adam Stoler and David I. August},
  title =	 {Automatic thread extraction with decoupled software pipelining},
  booktitle =	 {International Symposium on Microarchitecture (MICRO)},
  year =	 2005
}

@Article{padua80highspeed,
  author =	 {D.A. Padua and D.J Kuck and D.H. Lawrie},
  title =	 {{High-speed multiprocessors and compilation techniques}},
  journal =	 {Transactions on Computers},
  year =	 1980,
  volume =	 {C-29},
  number =	 9,
}

@InProceedings{parks_comparison_1995,
  title =	 {A comparison of synchronous and cycle-static dataflow},
  abstract =	 {We compare synchronous dataflow (SDF) and cyclo-static dataflow (CSDF), which are each special cases of a model of computation we
                  call dataflow process networks. In SDF actors have static firing rules: they consume and produce a fixed number of data tokens in
                  each firing. This model is well suited to multirate signal processing applications and lends itself to efficient static scheduling,
                  avoiding the run-time scheduling overhead incurred by general implementations of process networks. In CSDF which is a generalization
                  of SDF actors have cyclically changing firing rules. In some situations, the added generality of CSDF can unnecessarily complicate
                  the scheduling. We show how higher-order functions can be used to transform a CSDF graph into a SDF graph, simplifying the
                  scheduling problem. In other situations, CSDF has a genuine advantage over SDF: simpler precedence constraints. We show how this
                  makes it possible to eliminate unnecessary computations and expose additional parallelism. We use digital sample rate conversion as
                  an example to illustrate these advantages of CSDF. },
  booktitle =	 {Asilomar Conference on Signals, Systems, and Computers},
  author =	 {Thomas M Parks and Jose Luis Pino and Edward A Lee},
  year =	 1995,
  keywords =	 {data flow computing; scheduling; data flow graphs; signal sampling; cycle-static dataflow; synchronous dataflow; computation model;
                  dataflow process networks; static firing rules; data tokens; multirate signal processing applications; static scheduling;
                  higher-order functions; CSDF graph; SDF graph; scheduling problem; precedence constraints; parallelism; digital sample rate
                  conversion}
}

@PhDThesis{petri_communication_1962,
  type =	 "{Ph.D. Thesis}",
  title =	 {Communication with Automata},
  school =	 {Darmstadt Institue of Technology},
  author =	 {C.A. Petri},
  year =	 1962
}

@Article{pipeline-sdf,
  author =	 {E. and D. Messerschmitt},
  title =	 {Pipeline interleaved programmable {DSP's: Synchronous} data flow programming},
  journal =	 {IEEE Transactions on Signal Processing},
  volume =	 35,
  number =	 9,
  year =	 1987,
}

@Book{pogue-anim,
  author =	 {David Pogue},
  title =	 {IMovie 3 \& {IDVD: The} Missing Manual},
  publisher =	 {O'Reilly},
  year =	 2003
}

@Book{press_numerical_1992,
  edition =	 {2nd},
  title =	 {Numerical Recipes in {C: The} Art of Scientific Computing},
  publisher =	 "{Cambridge University Press}",
  author =	 {William H. Press and Brian P. Flannery and Saul A. Teukolsky and William T. Vetterling},
  month =	 oct,
  year =	 1992,
},

@Article{price06bdds,
  author =	 {Graham D. Price and Manish Vachharajani},
  title =	 {A case for compressing traces with {BDDs}},
  journal =	 {{Computer Architecture Letters}},
  year =	 2006,
  volume =	 5,
  number =	 2,
}

@PhdThesis{printz91thesis,
  type =	 "{Ph.D. Thesis}",
  author =	 {Harry Printz},
  title =	 {Automatic Mapping of Large Signal Processing Systems to a Parallel Machine},
  school =	 {Carnegie Mellon University},
  year =	 1991
}

@PhdThesis{lam87thesis,
  type =	 "{Ph.D. Thesis}",
  author =	 {Monica Lam},
  title =	 {A Systolic Array Optimizing Compiler},
  school =	 {Carnegie Mellon University},
  year =	 1987
}

@PhdThesis{tseng89thesis,
  author =	 {Ping-Sheng Tseng},
  title =	 {A Parallelizing Compiler for Disributed Memory Parallel Computers},
  school =	 {Carnegie Mellon University},
  year =	 1989
}

@inproceedings{huang_ecos_1992,
  title =	 {{ECOS} graphs: {A} dataflow programming language},
  booktitle =	 {Symposium on Applied Computing},
  author =	 {J. C. Huang and Jos{\'e} Mu{\~n}oz and Hal Watt and George Zvara},
  year =	 1992,
},

@InProceedings{pro96,
  author =	 "Todd A. Proebsting and Scott A. Watterson",
  title =	 {Filter Fusion},
  booktitle =	 {Symposium on the Principles of Programming Languages (POPL)},
  year =	 1996,
  url =		 "citeseer.nj.nec.com/proebsting96filter.html"
}

@TechReport{ptolemy03overview,
  author =	 {Edward A. Lee},
  title =	 {Overview of the {Ptolemy} Project},
  institution =	 {Tech Memo UCB/ERL M03/25, UC Berkeley},
  year =	 2003
}

@InProceedings{pugh97slice,
  author =	 "William Pugh and Evan Rosser",
  title =	 {Iteration Based Slicing and its Application to Communication Optimization},
  booktitle =	 {International Conference on Supercomputing},
  year =	 1997
}

@PhDThesis{ram07pipelined,
  type =	 "{Ph.D. Thesis}",
  author =	 {Ram Rangan},
  title =	 {Pipelined Multithreading Transformations and Support Mechanisms},
  school =	 {Princeton University},
  year =	 2007
}

@InProceedings{rangan04array,
  title =	 {Decoupled software pipelining with the synchronization array},
  author =	 {Rangan, R. and Vachharajani, N. and Vachharajani, M. and August, D.I.},
  booktitle =	 {International Conference on Parallel Architectures and Compilation Techniques (PACT)},
  year =	 2004
}

@InProceedings{rangan06amortizing,
  title =	 {Amortizing software queue overhead for pipelined inter-thread communication},
  author =	 {Rangan, R. and August, D.I.},
  booktitle =	 {Workshop on Programming Models for Ubiquitous Parallelism},
  year =	 2006
}

@Article{rauchwerger98runtime,
  author =	 {Lawrence Rauchwerger},
  title =	 {{Run-time parallelization: {Its} time has come}},
  journal =	 {Parallel Computing},
  year =	 1998,
  volume =	 24,
  number =	 {3-4},
},

@Article{raw,
  author =	 "Elliot Waingold and Michael Taylor and Devabhaktuni Srikrishna and Vivek Sarkar and Walter Lee and others",
  title =	 {Baring It All to Software: {Raw} Machines},
  journal =	 "IEEE Computer",
  volume =	 30,
  number =	 9,
  pages =	 "86--93",
  year =	 1997,
  url =		 "citeseer.nj.nec.com/waingold97baring.html"
}

@Article{raw10,
  author =	 "Michael Bedford Taylor and Jason Kim and Jason Miller and David Wentzlaff and Fae Ghodrat and Ben Greenwald and Henry Hoffman and
                  Jae-Wook Lee and Paul Johnson and Walter Lee and Albert Ma and Arvind Saraf and Mark Seneski and Nathan Shnidman and Volker Strumpen
                  and Matt Frank and Saman Amarasinghe and Anant Agarwal",
  title =	 {The {Raw} Microprocessor: {A} Computational Fabric for Software Circuits and General Purpose Programs},
  journal = "IEEE MICRO",
  volume = 22,
  issue = 2,
  year =	 2002
},

@TechReport{reuther03gmti,
  author =	 {A.I. Reuther},
  title =	 {Preliminary design review: {GMTI} narrowband for the basic {PCA} integrated radar-tracker application},
  institution =	 {MIT Lincoln Laboratory},
  year =	 2003,
  number =	 {ESC-TR-2003-076},
}

@MastersThesis{reyes-thesis,
  author =	 {Juan C. Reyes},
  title =	 {A Graph Editing Framework for the {StreamIt} Language},
  school =	 "{Massachusetts Institute of Technology}",
  year =	 2004,
  type =	 "{M.Eng. Thesis}",
},

@InProceedings{rul06functionlevel,
  author =	 {Rul, Sean and Vandierendonck, Hans and De Bosschere, Koen},
  title =	 {Function level parallelism driven by data dependencies},
  booktitle =	 {Workshop on Design, Architecture and Simulation of Chip Multi-Processors},
  year =	 2006,
},

@Article{ryan92,
  author =	 {Steven Ryan},
  title =	 {Linear data flow analysis},
  journal =	 {ACM SIGPLAN Notices},
  volume =	 27,
  number =	 4,
  year =	 1992,
  issn =	 {0362-1340},
  pages =	 {59--67},
  publisher =	 {ACM Press},
}

@MastersThesis{seneff80thesis,
  author = 	 {S. Seneff},
  title = 	 {Speech transformation system (spectrum and/or excitation) without pitch extraction},
  school = 	 {Massachussetts Institute of Technology},
  year = 	 1980,
  type = 	 {Master's Thesis}
}

@InProceedings{sermulins-lctes05,
  title =	 {Cache Aware Optimization of Stream Programs},
  author =	 {Janis Sermulins and William Thies and Rodric Rabbah and Saman Amarasinghe},
  booktitle =	 "{Conference on Languages, Compilers, Tools for Embedded Systems (LCTES)}",
  year =	 2005,
},

@MastersThesis{sermulins-thesis,
  author =	 {Janis Sermulins},
  title =	 {{Cache Optimizations for Stream Programs}},
  school =	 "{Massachusetts Institute of Technology}",
  year =	 2005,
  type =	 "{M.Eng. Thesis}",
}

@Article{shen96,
  title =	 {{Direct feature extraction from compressed images}},
  author =	 {Shen, B. and Sethi, I.K.},
  journal =	 {SPIE Storage \& Retrieval for Image and Video Databases IV},
  volume =	 2670,
  year =	 1996
},

@Article{shen96b,
  title =	 {Convolution-based edge detection for image/video in block {DCT} domain},
  author =	 {Shen, B. and Sethi, I.K.},
  journal =	 {Journal of Visual Communication and Image Representation},
  volume =	 7,
  number =	 4,
  pages =	 {411--423},
  year =	 1996,
  publisher =	 {Academic Press}
}

@Article{shen98,
  title =	 {Block-based manipulations on transform-compressed images and videos},
  author =	 {Shen, B. and Sethi, I.K.},
  journal =	 {Multimedia Systems},
  volume =	 6,
  number =	 2,
  pages =	 {113--124},
  year =	 1998,
  publisher =	 {Springer}
}

@Article{shoji95,
  title =	 {An algorithm for affine transformation of binary images stored in pxy tables by run format},
  author =	 {K. Shoji},
  journal =	 {Systems and Computers in Japan},
  volume =	 26,
  number =	 7,
  pages =	 {69--78},
  year =	 1995,
  publisher =	 {Scripta Technica}
}

@Book{sipser97,
  author =	 "{Michael Sipser}",
  title =	 {Introduction to the Theory of Computation},
  publisher =	 {PWS Publishing Company},
  year =	 1997,
}

@Misc{smith95survey,
  title =	 {A survey of compressed domain processing techniques},
  author =	 {Smith, B.C.},
  howpublished = "{Cornell University}",
  year =	 1995
}

@Article{smith96b,
  title =	 {Compressed domain processing of {JPEG-encoded} images},
  author =	 {Smith, B.C. and Rowe, L.},
  journal =	 {Real-Time Imaging},
  volume =	 2,
  number =	 2,
  pages =	 {3--17},
  year =	 1996,
  publisher =	 {Academic Press}
}

@Article{smith98,
  title =	 {Compressed domain transcoding of {MPEG}},
  author =	 {Acharya, S. and Smith, B.},
  journal =	 {International Conference on Multimedia Computing and Systems},
  pages =	 {295--304},
  year =	 1998
}

@InProceedings{spidle03,
  author =	 {Consel, C. and Hamdi, H. and R{\'e}veill{\`e}re, L. and Singaravelu, L. and Yu, H. and Pu, C.},
  title =	 {Spidle: {A DSL} Approach to Specifying Streaming Applications},
  booktitle =	 {International Conference on Generative Programming and Component Engineering},
  year =	 2003
}

@InProceedings{spur05samos,
  author =	 {Dan Zhang and Zeng-Zhi Li and Hong Song and Long Liu},
  title =	 {A Programming Model for an Embedded Media Processing Architecture},
  booktitle =	 {International Symposium on Systems, Architectures, Modeling, and Simulation (SAMOS)},
  year =	 2005
}

@Article{stephens_survey_1997,
  title =	 {A survey of stream processing},
  volume =	 34,
  doi =		 {10.1007/s002360050095},
  abstract =	 {Abstract.    Stream processing is a term that is used widely in the literature to describe a variety of systems. We present an
                  overview of the historical development of stream processing and a detailed discussion of the different languages and techniques for
                  programming with streams that can be found in the literature. This includes an analysis of dataflow, specialized  functional and
                  logic programming with streams, reactive systems, signal processing systems, and the use of streams in the design and verification
                  of hardware. The aim of this survey is an analysis of the development of each of these specialized topics to determine if a general
                  theory of stream processing has emerged. As such, we discuss and classify the different classes of stream processing systems found
                  in the literature from the perspective of programming primitives, implementation techniques, and computability issues, including a
                  comparison of the semantic models that are used to formalize stream based computation. },
  number =	 7,
  journal =	 {Acta Informatica},
  author =	 {Robert Stephens},
  year =	 1997,
  pages =	 {491--541}
}

@Misc{streamit-cookbook,
  key =		 {StreamIt Cookbook},
  title =	 {{StreamIt} Cookbook},
  howpublished = {\\ \url{http://cag.csail.mit.edu/streamit/papers/streamit-cookbook.pdf}}
}

@Misc{streamit-lang-spec,
  key =		 {StreamIt Language Specification},
  title =	 {{StreamIt} Language Specification},
  howpublished = {\\ \url{http://cag.csail.mit.edu/streamit/papers/streamit-lang-spec.pdf}}
}

@Misc{streamitweb,
  key =		 {StreamIt},
  title =	 {Stream{I}t Homepage},
  howpublished = {\url{http://cag.csail.mit.edu/streamit}}
}

@book{stroustrup_design_1994,
  title =	 "{The Design and Evolution of C++}",
  publisher =	 {Addison-Wesley Professional},
  author =	 {Bjarne Stroustrup},
  year =	 1994,
}

@InProceedings{stuijk_exploring_2006,
  title =	 {Exploring trade-offs in buffer requirements and throughput constraints for synchronous dataflow graphs},
  abstract =	 {Multimedia applications usually have throughput constraints. An implementation must meet these constraints, while it minimizes
                  resource usage and energy consumption. The compute intensive kernels of these applications are often specified as Synchronous
                  Dataflow Graphs. Communication between nodes in these graphs requires storage space which influences throughput. We present exact
                  techniques to chart the Pareto space of throughput and storage trade-offs, which can be used to determine the minimal storage space
                  needed to execute a graph under a given throughput constraint. The feasibility of the approach is demonstrated with a number of
                  examples.},
  booktitle =	 {Design Automation Conference (DAC)},
  author =	 {Sander Stuijk and Marc Geilen and Twan Basten},
  year =	 2006,
  keywords =	 {buffering,optimization,synchronous dataflow,throughput},
}

@InProceedings{swartz95,
  title =	 {{RIVL}: {A} resolution independent video language},
  author =	 {Swartz, J. and Smith, B.C.},
  booktitle =	 {Proceedings of the Tcl/TK Workshop},
  year =	 1995
}

@InProceedings{tarditi_accelerator_2006,
  title =	 {Accelerator: {Using} data parallelism to program {GPUs} for general-purpose uses},
  booktitle =	 {International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)},
  author =	 {David Tarditi and Sidd Puri and Jose Oglesby},
  year =	 2006,
}

@InProceedings{taylor2004,
  author =	 {Michael Bedford Taylor and Walter Lee and Jason Miller and David Wentzlaff. and Ian Bratt and Ben Greenwald and Henry Hoffmann and
                  Paul Johnson and Jason Kim and James Psota and Arvind Saraf and Nathan Shnidman and Volker Strumpen and Matt Frank and Saman
                  Amarasinghe and Anant Agarwal},
  title =	 {Evaluation of the {Raw} Microprocessor: {An} Exposed-Wire-Delay Architecture for {ILP} and Streams},
  booktitle =	 {International Symposium on Computer Architecture (ISCA)},
  year =	 2004
}

@InProceedings{teich_3d_1999,
  title =	 {{3D} exploration of software schedules for {DSP} algorithms},
  abstract =	 {Note: OCR errors may be found in this Reference List extracted from the full text Article. ACM has opted to expose the complete List
                  rather than only correct and linked references.},
  booktitle =	 {International Workshop on Hardware/Software Codesign (CODES)},
  author =	 {J. Teich and E. Zitzler and S. S. Bhattacharyya},
  year =	 1999,
}

@Article{tennenhouse_spectrumware_1996,
	title = {The {SpectrumWare} approach to wireless signal processing},
	volume = 2,
	number = 1,
	journal = {Wireless Networks},
	author = {David L. Tennenhouse and Vanu G. Bose},
	year = 1996,
	pages = {1--12}
}

@TechReport{terraserver,
  author =	 {Tom Barclay and Jim Gray and Wyman Chong},
  title =	 {{TerraServer} bricks -- {A} high availability cluster alternative},
  institution =	 {Microsoft Research},
  year =	 2004,
  number =	 {MSR-TR-2004-107}
}

@InProceedings{thies-can02,
  title =	 {A Common Machine Language for Grid-Based Architectures},
  author =	 {William Thies and Michal Karczmarek and Michael Gordon and David Maze and Jeremy Wong and Henry Hoffmann and Matthew Brown and Saman
                  Amarasinghe},
  booktitle =	 "{ACM SIGARCH Computer Architecture News}",
  year =	 2002,
},

@InProceedings{thies-cc02,
  title =	 {{StreamIt: A} Language for Streaming Applications},
  author =	 {William Thies and Michal Karczmarek and Saman Amarasinghe},
  booktitle =	 "{International Conference on Compiler Construction (CC)}",
  year =	 2002,
}

@InProceedings{thies-micro07,
  title =	 {A Practical Approach to Exploiting Coarse-Grained Pipeline Parallelism in {C} Programs},
  author =	 {William Thies and Vikram Chandrasekhar and Saman Amarasinghe},
  booktitle =	 "{International Symposium on Microarchitecture (MICRO)}",
  year =	 2007,
}

@InProceedings{thies-ppopp05,
  title =	 {Teleport Messaging for Distributed Stream Programs},
  author =	 {William Thies and Michal Karczmarek and Janis Sermulins and Rodric Rabbah and Saman Amarasinghe},
  booktitle =	 "{Symposium on Principles and Practice of Parallel Programming (PPoPP)}",
  year =	 2005,
}

@Article{tip95slice,
  author =	 "Frank Tip",
  title =	 {A survey of program slicing techniques},
  journal =	 "Journal of Programming Languages",
  volume =	 3,
  number =	 3,
  year =	 1995
}

@Article{unfolding,
  author =	 {Liang-Fang Chao and Edwin Hsing-Mean Sha},
  title =	 {Scheduling Data-Flow Graphs via Retiming and Unfolding},
  journal =	 {IEEE Transactions on Parallel and Distributed Systems},
  volume =	 08,
  number =	 12,
  year =	 1997,
  issn =	 {1045-9219},
  pages =	 {1259-1267},
  publisher =	 {IEEE Computer Society},
  address =	 {Los Alamitos, CA, USA},
}

@Article{unfolding2,
  author =	 {K.K. Parhi and D.G. Messerschmitt},
  title =	 {Static Rate-Optimal Scheduling of Iterative Data-Flow Programs Via Optimum Unfolding},
  journal =	 {IEEE Transactions on Computers},
  volume =	 40,
  number =	 2,
  year =	 1991,
  issn =	 {0018-9340},
  pages =	 {178-195},
  publisher =	 {IEEE Computer Society},
  address =	 {Los Alamitos, CA, USA},
}

@Misc{usgs,
  author =	 "{U.S. Geological Survey}",
  title =	 {Annual Report of Data Sales, Distribution, and Archiving},
  howpublished = {National Center for {EROS}},
  year =	 2004,
  note =	 {\url{http://edc.usgs.gov/about/reports/sales2004.pdf}}
}

@InProceedings{vachharajani07speculation,
  author =	 {Neil Vachharajani and Ram Rangan and Easwaran Raman and Matthew J. Bridges and Guilherme Ottoni and David I. August},
  title =	 {Speculative Decoupled Software Pipelining},
  booktitle =	 {Parallel Architectures and Compilation Techniques (PACT)},
  year =	 2007,
}

@Article{vasudev98,
  title =	 {Compressed-domain reverse play of {MPEG} video streams},
  author =	 {Vasudev, B.},
  journal =	 {SPIE Conference on Multimedia Systems and Applications},
  pages =	 {237--248},
  year =	 1998
}

@Article{watkins_mash_2006,
  title =	 "{Mash Hits}",
  journal =	 {The Guardian},
  author =	 {David Watkins},
  month =	 apr,
  year =	 2006
}

@Article{wee02survey,
  title =	 {Compressed-domain video processing},
  author =	 {Wee, S. and Shen, B. and Apostolopoulos, J.},
  journal =	 {HP Labs Technical Report, HPL-2002},
  volume =	 282,
  year =	 2002
}

@PhDThesis{wolfe82,
  type =	 "{Ph.D. Thesis}",
  author =	 {M. Wolfe},
  title =	 {Optimizing Supercompilers for Supercomputers},
  school =	 {University of Illinois, Urbana-Champaign},
  year =	 1982
}

@PhDThesis{won-thesis,
  type =	 "{Ph.D. Thesis}",
  author =	 {Won So},
  title =	 {Software Thread Integration for Instruction Level Parallelism},
  school =	 "{North Carolina State University}",
  year =	 2007,
}

@MastersThesis{wong-thesis,
  author =	 {Jeremy Wong},
  title =	 {Modeling the Scalability of Acyclic Stream Programs},
  school =	 "{Massachusetts Institute of Technology}",
  year =	 2004,
  type =	 "{M.Eng. Thesis}",
}

@InProceedings{wsj-youtube,
  author =	 {Lee Gomes},
  title =	 {Will all of us get our 15 minutes on a {YouTube} video?},
  booktitle =	 {Wall Street Journal},
  year =	 2006,
  month =	 {August 30}
}

@Article{wyner94optimal,
  author =	 {A.D. Wyner and J. Ziv},
  title =	 {The sliding-window {Lempel-Ziv} algorithm is asymptotically optimal},
  journal =	 {Proceedings of the IEEE},
  year =	 1994,
  volume =	 82,
  number =	 6
}

@Article{xbox360,
  author =	 {J. Andrews and N. Baker},
  title =	 {Xbox 360 System Architecture},
  journal =	 {IEEE Micro},
  volume =	 26,
  number =	 2,
  year =	 2006,
  issn =	 {0272-1732},
  pages =	 {25-37},
  publisher =	 {IEEE Computer Society},
  address =	 {Los Alamitos, CA, USA},
}

@PhDThesis{xiong-thesis,
  type =	 "{Ph.D. Thesis}",
  author =	 {Jianxin Xiong},
  title =	 {Automatic Optimization of {DSP} Algorithms},
  school =	 {Univ. of Illinois at Urbana-Champaign},
  year =	 2001
}

@InProceedings{xiong01spl,
  author =	 "Jianxin Xiong and Jeremy Johnson and Robert W. Johnson and David A. Padua",
  title =	 {{SPL}: {A} Language and Compiler for {DSP} Algorithms},
  booktitle =	 "Conference on Programming Language Design and Implementation (PLDI)",
  pages =	 "298-308",
  year =	 2001,
  url =		 "citeseer.nj.nec.com/xiong01spl.html"
}

@Misc{youtube,
  key =		 {youtube},
  title =	 {{YouTube} fact sheet},
  month =	 {November},
  year =	 2006,
  note =	 {{\scriptsize{\url{youtube.com/t/fact_sheet}}}}
}

@MastersThesis{zhang-thesis,
  author =	 "Xin David Zhang",
  year =	 2007,
  title =	 {A Streaming Computation Framework for the {Cell} Processor},
  type =	 "{M.Eng. Thesis}",
  address =	 "Cambridge, MA",
  school =	 "Massachusetts Institute of Technology"
}

@InProceedings{zhang_lightweight_2007,
  author =	 {David Zhang and Qiuyuan J. Li and Rodric Rabbah and Saman Amarasinghe},
  title =	 {A lightweight streaming layer for multicore execution},
  booktitle =	 {Workshop on Design, Architecture, and Simulation of Chip Multi-Processors (dasCMP)},
  year =	 2008,
}

@Article{zitzler_multidimensional_2000,
  title =	 {Multidimensional Exploration of Software Implementations for {DSP} Algorithms},
  volume =	 24,
  number =	 1,
  journal =	 {Journal of VLSI Signal Processing},
  author =	 {Eckart Zitzler and J{\"u}rgen Teich and Shuvra S. Bhattacharyya},
  year =	 2000,
  pages =	 {83--98}
}

@Article{ziviani00compression,
  title =	 {Compression: {A} key for next-generation text retrieval systems},
  author =	 {Ziviani, N. and Silva de Moura, E. and Navarro, G. and Baeza-Yates, R.},
  journal =	 {IEEE Computer},
  volume =	 33,
  number =	 11,
  year =	 2000
}
