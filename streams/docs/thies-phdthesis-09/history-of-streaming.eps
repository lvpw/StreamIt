%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: history-of-streaming.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 8/26/2008, 9:54:35 PM
%%BoundingBox: -491 490 268 758
%%HiResBoundingBox: -490.0363 490.0364 267.4038 757.4401
%%CropBox: -490.0363 490.0364 267.4038 757.4401
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4238 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   xap:CreatorTool="PScript5.dll Version 5.2.2"
   xap:ModifyDate="2008-08-26T21:53:51-04:00"
   xap:CreateDate="2008-08-26T21:53:51-04:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)"
   xapMM:DocumentID="uuid:00aa4960-f248-4a46-9e58-ca9196847c62"
   xapMM:InstanceID="uuid:56d4b371-b2b1-483c-8867-54ed905c4dca">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft PowerPoint - history-of-streaming</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Bill Thies</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -757.44 translate
pgsv
[0 1 -1 0 267.404 0 ]ct
gsave
np
gsave
0 0 mo
0 757.44 li
267.404 757.44 li
267.404 0 li
cp
clp
[1 0 0 1 -170.272 0 ]ct
gsave
435.66 757.14 mo
176.4 757.14 li
176.4 -2.45996 li
435.66 -2.45996 li
cp
eclp
176.4 757.14 mo
435.66 757.14 li
435.66 -2.45996 li
176.4 -2.45996 li
cp
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
1 lw
1 lc
0 lj
8 ml
[] 0 dsh
false sadj
340.8 755.28 mo
391.92 755.28 li
391.92 3.12006 li
340.8 3.12006 li
cp
285.54 755.28 mo
334.26 755.28 li
334.26 3.12006 li
285.54 3.12006 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
grestore
207.3 516.54 mo
210.78 516.54 li
210.78 28.62 li
207.3 28.62 li
cp
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
1 lw
1 lc
0 lj
8 ml
[] 0 dsh
false sadj
207.3 516.54 mo
210.78 516.54 li
210.78 28.62 li
207.3 28.62 li
cp
@
/1 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma Initial
ct_T42Dict begin
-0.598 -0.207 1.336 1.031
 256 array 0 1 255 {1 index exch /.notdef put} for  /Tahoma
Type42DictBegin
[<00010000000c000c000c000c4f532f32bf5a9663000000cc000000566376
7420786581fc00000124000002e66670676d3a0260f80000040c0000063c
676c79663130d15100005d780003edca68656164d0d2970a00000a480000
0036686865610ded0be600000a8000000024686d7478378288ef00000aa4
00001fc86c6f63611208826400002a6c00001fcc6d6178700ba907700000
4a38000000206e616d650f5c1eac00004a5800000da4707265705e2e63ad
000057fc00000579676469720000000000000000000000000001038e0190
00050008059a053300000125059a0533000003a0008202b10800020b0604
03050404020461007a878000000000000008000000004d53202000400020
fffc061efe59003b080101a7200101ff202800000000061e061405f005d1
047c045d03d200100000ffe7ffe1fe78fe64fe59039b00270000009600aa
00b900c600ce000000000000000000bc00c200000000007600b200c000cb
0000000000000000000000000081009400a600cc00da00ef000000000000
00000098009e00ab00b000000097009e007d0166017c00900098009e00a4
00a900ae00b300ba00c30000000000000000000000000000000000000000
00000000000000000000000000d3011d00000000000000c3021401c20000
000000e9000c02d10173018e009700970042004200c60000000000000000
000000880080003900390000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000001ff0249033f025a02cc0289026f0237000000000000027a009400c0
03d203a7004c004c00c000d600be00000000000000000000000000000000
0000008101f901f9007400e500b900ca019502c600ac00a7008500880091
009800a500ac006f0087008f009b00a00000000000000000000000000000
0000068a051104f200000000000000000000000000b800ad0086005c00db
00cb00c400a0008600530000009700910000007d000a001a001f05600000
0000000000aa00a200000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000045e02b50094
009402cd034202bc02b0032f020403bc0191061405fa0304006000600059
007d004c008f0066004b008700a600a800bc007d00000000008c00b200b2
008e00a40000000000710071009a00f8008302aa004c00750075039c0331
00a400bc003d0062017b01080087003900b6019e00e2005a005a007000af
00e201c300b90071007104bc00680000403d543b3a393837363534333231
302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716151413
1211100f0e0d0c0b0a090807060504030201002c01b0184358b119072b1b
212121592d2c01b0184358b11a072b1b212121592d2c01b0184358b00325
10f221b000121b212121592d2c01b0184358b11b072b1b212121592d2c01
b0184358b11c072b1b212121592d2c01b0184358b11d072b1b212121592d
2c01b0184358b11e072b1b212121592d2c4eb00014b046234344b0032510
b10046e6b00013b00114b00010f221b001134db000122d2c01b018435845
646a234569b01943646060b0462344231020b046f02fb000121b21212121
592d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0462370b1
01463e01b0462370b10246453ab10200080d2d2cb0122bb0022545b00225
456ab0408b60b0022523442121212d2cb0132bb0022545b00225456ab8ff
c08c60b0022523442121212d2cb000b0122b2121212d2cb000b0132b2121
212d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810
0062602b0c642364615c58b00361592d2cb100032545685458b0032545b0
032545606820b004252344b0042523441bb00325204568208a2344b00325
456860b003252344592d2cb00325204568208a2344b00325456860b00325
23442d2cb00943588721c01bb01243588745b0112bb0472344b0477ae41b
038a45186920b04723448a8a8720b0a05158b0112bb0472344b0477ae41b
21b0477ae4595959182d2c208a4523456860442d2c456a422d2c01182f2d
2c21212d2c01b0022545b002254564606ab00325456a6120b00425456a20
8a8b65b0042523448cb00325234421212d2c01456823456961b00325456a
6120b00425456a208a8b65b0042523448cb00325234421212d2c018a8a45
642345646164422d2c01b0022543b04054b0022543b000545a58b0032520
45b040614459b0022543b00054b0022543b040545a58b004252045b04060
4459212121212d2c014b525843b00225452361441b2121592d2c014b5258
43b00225452360441b2121592d2c4b525845441b2121592d2c0120b00325
2349b04060b0206320b000525823b002253823b002256538008a63381b21
2121212159012d2c4b505845441b2121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c462346608a8a462320468a608a61b8ff8062232010238ab1
4b4b8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d
2c2045b003254652583f1b2111592d2c2045b003254650583f1b2111592d
2c00b00743b006430b2d2c4b5258b00425b0042549b00425b00425496120
b0005458212043b0005558591bb04054582043b0005458591b2043b00054
581bb00325b8ffc03859595959212121212d2c4b52584365381b2121592d
2c4b525843381b2121592d2c21210c6423648bb84000622d2c21b0805158
0c6423648bb82000621bb200402f2b59b002602d2c21b0c051580c642364
8bb81555621bb200802f2b59b002602d2c0c6423648bb84000626023212d
2cb4000100000015b00826b00826b00826b008260f10161345683ab00116
2d2cb4000100000015b00826b00826b00826b008260f1016134568653ab0
01162d2cb0134358031b02592d2cb0134358021b03592d2cb00a2b231020
3cb0172b2d2cb0282b8a102320d023b0102bb00558c01b3c59201011b000
12012d2c4b53234b515a5820458a60441b2121592d2c4b53234b515a5838
1b2121592d2c20b003254523452361688a204568208a234460442d2c20b0
03254523452361688a204568208a234460442d2c4b5358b00425b0042549
6423456469b0408b6120b080626ab00225b00225618cb0462344218a10b0
46f6211b218a11231220392f592d2cb0024354584b53234b515a58381b21
21591b21212121592d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d00010000000323d7
68c484845f0f3cf5001b080000000000aec0ba1c00000000bcf76d7afb34
fe580ab50846000000090002000100000000000100000801fe5900000b20
fb34fa7a0ab50001000000000000000000000000000007f2080001000000
0000028000000280000002a800e40336007205d2008e045e006a07d00066
0564004301b000690310006c0310004a045e007005d2009d026c004a02e8
005a026c00be030fffe8045e0053045e00e2045e006d045e0061045e0028
045e007c045e0055045e0063045e004a045e004302d400f302d4007a05d2
00c905d200c005d200d703ca006d0746008404ccfff604b7009704ce0042
056d0097047d0097042c0097055700420567009702fc005d0355000904b4
009703fb0097062a00970557009705a900420469009705a9004204f70097
0475004d04acffff053f008504c6fff80737001a04a50008049cfff50479
003c031000a6030f00340310006205d20085045efff0045e00f80433003a
046c008803b1003b046c003b0436003b028c001d046c003b0476008801d4
007f0241ffa603fc008801d4008c06b800880476008804580039046c0088
046c003b02e200880392004302ad00150476008003fc000605f0001e03f6
000a03fc0006038e003103d8003c030f013403d8006205d2008604ccfff6
04ccfff604ce0042047d00970557009705a90042053f00850433003a0433
003a0433003a0433003a0433003a0433003a03b1003b0436003b0436003b
0436003b0436003b01d4007801d4ffff01d4ffca01d4ffda047600880458
003904580039045800390458003904580039047600800476008004760080
04760080045e008703c40065045e0072045e0059045e007703a30072045e
003904630088076e0056076e00560702006b045e01c1045e00fd05d200c0
074effd905a900420746006e05d200a205d200c905d200d7045e0038048b
0088045e00430517007e0571009c04820088045e004a03f2007203f20055
059e002b070a003a0458002903ca003a02a800e405d2009d05d20051045e
ffcf05d200be04f4fff60496006704960083068a00b104ccfff604ccfff6
05a9004207d0004207450039045efffc0746fffc0336ffc00336006b01b0
ffc001b0006105d2009d05d2007703fc0006049cfff50376ffe3045effe4
0310007b031000970444001d043e001d045e0087026c00be01b0fff3032e
fff80b20006604ccfff6047d009704ccfff6047d0097047d009702fc005d
02fc002a02fc004c02fc005d05a9004205a9004205a90042053f0085053f
0085053f008501d4008c045e00da045e00a1045e00b6045e00e6045e01c4
045e00fd045e0121045e00fa045e0156045e00d604240018023200180475
004d039200430479003c038e0031030f013405960018045e0039049cfff5
03fc000604860097046c008805d200b605d200d003f200f803f200b903f2
00b8080000ab080000ab0800008c045e002205570042046c003b02fc005d
0475004d0392004304ce004203b1003b04ce004203b1003b0496003b045e
fff002d400f304ccfff60433003a04ccfff60433003a056d0097057f003b
05960018047d00970436003b047d00970436003b03fb009701d4007203fb
009702e3008c03fb00970390008c05570097047600880557009704760088
05a900420458003904f7009702e2008804f7009702e200360475004d0392
004304acffff02ad001504acffff03bf0015053f008504760080053f0085
047600800479003c038e00310479003c038e0031040f009705a9004205fd
00420470003b0458003903a4003c04a7003903bc000405a60039045efff0
047800e403f2007d07a200a705d9005d0420007f058a0021025a008903cc
008907d000660296000f04d5009202d6008302d6008304d500b102d60070
04ccfff60433003a04ce004203b1003b04ce004203b1003b047d00970436
003b047d00970436003b047d00970436003b05570042046c003b05570042
046c003b05570042046c003b056700970476008805b9001804a0000c02fc
000a01d4ffca02fc003701d4ffe002fc005401d4ffd202fc005d01d4005f
035500090241ffa604b4009703fc008803fc008803fb009701d4ffd60557
009704760088055700970476008805a900420458003905a9004204580039
04f7009702e2ffea0475004d0392004304acffff02b7001f053f00850476
0080053f008504760080053f008504760080053f0085047600800737001a
05f0001e049cfff503fc00060208008c04ccfff60433003a074effd9070a
003a05a900420458002902d400f30737001a05f0001e0737001a05f0001e
0737001a05f0001e049cfff503fc000601b0ffc0045effd0045e00590510
0059080000ab0800008c0800008a0800009901b00061045e0121045e01b6
045e00ae04ccfff6056d00000657000003e200000667000005be00000666
000001d4ff9c04ccfff604b7009704f4fff6047d00970479003c05670097
02fc005d04b4009704c6fff6062a0097055700970488004305a900420567
0097046900970473004104acffff049cfff504a5000806590082059e002b
02fc004c049cfff50470003b03a4003c0476008801d40071047400800471
008803fc00060321003b047600880470005801d4008c03fc008803fc0005
048b008803fc00060377003704580039046a007e0371003a0474008003fa
fffb05b7007f05cc004001d4ffda04740080045800390474008005cc0040
047d009705bfffff040f009704cc00420475004d02fc005d02fc004c0355
00090803000f07df009705beffff04d20097049affff0567009704ccfff6
04b7009704b70097040f009705780012047d00970727fff20443001f055c
0097055c009704d20097056c000f062a00970567009705a9004205670097
0469009704ce004204acffff049affff05fd004204a50008057b00970516
005d078c009707aa00970584ffff064f009704a9009704cc002b079c0097
04e4fffb0433003a046600430432008803520088047700080436003b05d8
000803a90020048200880482008803fc00880471000f051c008804810088
0458003904820088046c008803b1003b03bc000403fc00060614003e03f6
000a0493008804580060063a008806520088048c0004058b008804010088
03c5002a06180088043900150436003b04a0000c0352008803c5003d0392
004301d4007f01d4ffda0241ffa6069c000f0697008804a0000c03fc0088
03fc00060482008804100097035200880746006e0920009704820088045e
004108000000080001000800010008000100080001000800010008000100
080001000800010008000100060300420480003905c1008504da00800000
01ad000001c40000fcfe0000fd7f045e00da045effa7045e00da045e00c9
045e00e6045e00e6045e00e6045e00c9045e01ad045e00da045e00e6045e
00e6045e00e6045e00e6045e00da04ccfff60433003a04ccfff60433003a
04ccfff60433003a04ccffce0433ff8e04ccfff60433003a04ccfff60433
003a04ccfff60433003a04ccfff60433003a04ccfff60433003a04ccfff6
0433003a04ccfff60433003a04ccfff60433003a047d00970436003b047d
00970436003b047d00970436003b047d00970436003b047dffe30436ffb5
047d00970436003b047d00970436003b047d00970436003b02fc005d01d4
006802fc005d01d4007f0000fd290000fd760800010008000100042c01d3
042c011d042c012d042c012d042c01d3042c016e042c0178042c0190042c
0175042c01d3042c011d042c01d3042c01e80310007d042c019001cf0091
042c01d3042cff8e02d400f305620088051e003c03c4001c04ce0014057a
009702310014027e003b057a0097059800950231001404f8001504f8003d
04f80048057a0097057a005602e5001e0335003205d8001405300032054c
00690537006903cf002804bb0046056b0097048e001e0686009705ac001e
04620014046200140462001401b000610336006b06ae00970231ff8e04f8
001504f8001504f8ff8e04f8ff8e05300032068600970686009706860097
06860097056200880562008805620088051e003c03c4001c04ce0014057a
00970231fffe02ccfffe059800950231fffe04f8001504f8003d04f80048
057a00560335003205d80014054c00690537006904bb0046056b0097048e
001e0686009705ac001e02310014051e003c04f8003d0537006905760029
0000ffdc0000ff250000ffdc0000fe5102d500f602d500f403cb0054030e
006a020cffba023d000002620000023d0000023d000001f00000023d0000
02c8003101790000049301500493013b0493004204930025049300930493
00480493005c0493002d0493002b0493007b0493004a02d500ee045e003f
0348ffba02cfffba03c5005c02d501100493004204930048049300dd026e
00ed026e0067026e0059026e0059023dffba026a0002080001000408ffba
08000100073f005c0348ffba020000580408ffba0200fffc0400ffba077f
005c08000100073f005c0675005c077f005c023dffba02cfffba06f6005c
071d005c0675005c06f6005c04df0050059a00500546ffba0571ffba02e5
ff930356ff930764005c07be005c03d7ffba0442ffba0764005c07be005c
03d7ffba0442ffba06fa005c07fa005c0800010008000100080001000800
010008000100080001000800010008000100080001000800010008000100
08000100080001000800010008000100080001000265ffdd026a00020266
0000026600000266000005a900420458003905a900420458003905a90042
0458003905a900410458ffa605a900420458003905a900420458003905a9
004204580039060300420480003906030042048000390603004204800039
06030042048000390603004204800039053f008504760080053f00850476
008005c1008504da008005c1008504da008005c1008504da008005c10085
04da008005c1008504da0080049cfff503fc0006049cfff503fc0006049c
fff503fc0006049cfff503fc00060496003b0000fc330310006c0310004a
0800010007c30052030e006a01eefff2025efffc01ee004f025e00770356
ff89038dff8901ee0052025e00a406fa005c07fa005c023dffba02cfffba
01ee00a4025e00a40675005c077f005c023dffba02cfffba03c5005c0498
00520675005c077f005c023dffba02cfffba0675005c077f005c023dffba
02cfffba04df0050059a00500546ffba0571ffba04df0050059a00500546
ffba0571ffba04df0050059a00500546ffba0571ffba03be005c045e0046
03be005c045e004602e5ff930356ff9302e5ff930356ff9309ae005c0a5c
005c07d7ffba087dffba09ae005c0a5c005c07d7ffba087dffba093d005c
0950005c0610ffba0623ffba093d005c0950005c0610ffba0623ffba0564
ffba05a2ffba0564ffba05a2ffba0564ffba05a2ffba0564ffba05a2ffba
04d9005204b0005c04beffba03ddffba04d9005204b0005c04beffba03dd
ffba06f6005c073f005c0348ffba0408ffba06f6005c071d005c0348ffba
0408ffba05cd005c0666005c03d7ffba0442ffba052d005c05c9005c023f
ffba02cfffba04baff62057fff600414ffba04dbffba054c005c0606005c
023dffba02cfffba03c5005c049800520560ffba0466ffba0356ff89038d
ff8906fa005c07fa005c06fa005c07fa005c023dffba02cfffba04dfffa4
05aeffa404df002505ae002104df003505ae003504df003505ae003503c5
005803c50058049800520000feb50000fd290000fea10000fd8e0000fd66
0000fe750000fce90000fe0a0000fd1b0000fcc30000fed80000fd2b0000
fe970000fd630000fd430000fefc0000fc260000fb340000fb4e0000fc78
0000fc1e0000fbcd0000fd0c0000fd950000fefc0000fc600000fe660000
fb8e0000fd830000fcb50000fc5b0000fcee0000fc6c0000fd700000fdba
0000fd6b0000fd430000fd550000fcf10000fe210000feb50000fd480000
feae0475004d0392004304acffff02ad00150436003b047d009704820088
055c0097015a006204c3009304e7003d053d003d04ec007f04ec007f0562
003f03f0001d0473006404f60052050400520581005206e500a606a8007b
04f8005204f8003d047300560679005206fa007f06d3007f04ec007f04ec
007f04ae007f05ba00520452005604e5003d050a0052050a0052050e00a8
050e00a805aa003d0596003d04f8005204cb003d04a200a8036f00290489
007b04ee008f04f8005203e1003704ec007f05f4005204dd008f055c003d
05b8003d04c300a004c3008d043b003d0396005c0000fd3b03e1003703e1
fe640000fbe00000fbe00000fbe00000fbe00000fe5a0000fd2f0000fea6
04b6009802a800a804bc00a803f0003d0389003d0417002303e1003703fe
003d0000fca80000fea10000fdb10000fdd50000fe4e0000fe020000fe64
0000fde104d1007504d10075050e007f057b00a80581007f05dd007f05dd
007f052b000c0631007f0631007f05b8007f058d003d0885009104a60052
0000fb420000fb420000fb420000fb420000fd4f0000fc370000fb990000
fcda0000fc820000fec30000fd0b0000fd2f0000fe4e0000fe0006a6007b
0000fb770000fcdf0000fb9a0000fe030000fdd30000fce10000fd580000
fd720000fe5a0000fd2f0000fea601b0006b031f00b6023dffba02fc005d
0355000901d4007f0241ffa6040f00230352002e076afff2060200080512
0097042f008804d2009703fc008805850097049a0088049cfff503fc0006
049cfff503fc000604e80008041e000a0516005d04580060051600970476
008805a900420436003605a90042045800390000ffdc0000ff160000ffdc
0000ff200000ffdc0000ff200266002c0675005c077f005c023dffba02cf
ffba03be005c045e004602e5ff930356ff93054c005c0606005c042a0064
023dffba03dcffba042a0064042a00640750001307500013075000130750
0013020c002803c5005c0000ffd20000fe310000feda04730069049d0032
04ce004204ce004206b8008805570000091c00970737000004b4000004ac
ffff080000290200000d0200000f026e00ed026e006701ae001d06f6005c
02640032020000580200005801ee000d025e000d01ee000f025e000f01ee
000f025e000f01ee00a4025e00a40356ff89038dff890356ff89038dff89
06fa005c07fa005c0675005c077f005c023dffba02cfffba0675005c077f
005c023dffba02cfffba0675005c077f005c023dffba02cfffba0675005c
077f005c023dffba02cfffba0675005c077f005c023dffba02cfffba0675
005c077f005c023dffba02cfffba04df0050059a00500546ffba0571ffba
04df0050059a00500546ffba0571ffba04df0050059a00500546ffba0571
ffba04df0050059a00500546ffba0571ffba04df0050059a00500546ffba
0571ffba04df0050059a00500546ffba0571ffba03be005c045e004603be
005c045e004603be005c045e004603be005c045e004603be005c045e0046
03be005c045e004603be005c045e004602e5ff930356ff9302e5ff930356
ff9302e5ff930356ff9302e5ff930356ff9302e5ff930356ff9302e5ff93
0356ff9302e5ff930356ff9309ae005c0a5c005c07d7ffba087dffba09ae
005c0a5c005c07d7ffba087dffba09ae005c0a5c005c07d7ffba087dffba
093d005c0950005c0610ffba0623ffba093d005c0950005c0610ffba0623
ffba0564ffba05a2ffba04d9005204b0005c04beffba03ddffba06f6005c
073f005c0348ffba0408ffba06f6005c073f005c0348ffba0408ffba06f6
005c073f005c0348ffba0408ffba06f6005c073f005c0348ffba0408ffba
06f6005c071d005c06f6005c071d005c08ae005c08ae005c08aeffba08ae
ffba0764005c07be005c03d7ffba0442ffba05cd005c0666005c03d7ffba
0442ffba05cd005c0666005c03d7ffba0442ffba05cd005c0666005c03d7
ffba0442ffba0764005c07be005c03d7ffba0442ffba0764005c07be005c
03d7ffba0442ffba0764005c07be005c03d7ffba0442ffba0764005c07be
005c03d7ffba0442ffba0764005c07be005c03d7ffba0442ffba052d005c
05c9005c023fffba02cfffba052d005c05c9005c023fffba02cfffba052d
005c05c9005c023fffba02cfffba052d005c05c9005c023fffba02cfffba
054c005c0606005c023dffba02cfffba054c005c0606005c054c005c0606
005c023dffba02cfffba054c005c0606005c04df0050059a00500546ffba
0571ffba0356ff74038dff740356ff89038dff890356ff89038dff890356
ff89038dff890356ff89038dff890356ff89038dff890356ff89038dff89
0356ff89038dff89076400000864000006fa005c07fa005c023dffba02cf
ffba0356ff89038dff8906fa005c07fa005c06fa005c07fa005c0000fdfe
0000ff3f0000ff300000ffa70000fe2208fc003208ad00320000ffb50000
ffb60000fefb0000fefe0000fe220000ff9701cd0032035300280000fe84
0000ff0b04cd00320000ff580000ff580000fefe09ae005c0a5c005c07d7
ffba087dffba093d005c0950005c0610ffba0623ffba04d9005204b0005c
04beffba03ddffba030e006a04baff6203be005c045e0046045e00b6045e
00b6045e00b6045e00b6045e00fd045e00fd045e00e6045e00a1045e00e6
045e00a1045e01c4045e01c1045e00da045e00da045e00b6045e00b6047d
00970436003b045e017a04ccfff60433003a04b70097046c008804b70097
046c008804b70097046c008804ce004203b1003b056d0097046c003b056d
0097046c003b056d0097046c003b056d0097046c003b056d0097046c003b
047d00970436003b047d00970436003b047d00970436003b047d00970436
003b047d00970436003b042c0097028c001d05570042046c003b05670097
04760088056700970476008805670097047600880567fffe0476ffe10567
00970476008802fcffed01d4ff5702fc004c01d4ffb304b4009703fc0088
04b4009703fc008804b4009703fc008803fb009701d4007a03fb009701d4
ff7603fb009701d4ff7603fb009701d4ff90062a009706b80088062a0097
06b80088062a009706b80088055700970476008805570097047600880557
009704760088055700970476008805a900420458003905a9004204580039
05a900420458003905a900420458003904690097046c008804690097046c
008804f7009702e2008804f7009702e2008804f7009702e2003404f70097
02e200340475004d039200430475004d039200430475004d039200430475
004d039200430475004d0392004304acffff02ad001504acffff02ad0015
04acffff02ad001504acffff02ad0015053f008504760080053f00850476
0080053f008504760080053f008504760080053f00850476008004c6fff8
03fc000604c6fff803fc00060737001a05f0001e0737001a05f0001e04a5
000803f6000a04a5000803f6000a049cfff503fc00060479003c038e0031
0479003c038e00310479003c038e00310476008802adffd105f0001e03fc
00060433003a0208008c0470003b0470003b0470003b0470003b0470003b
0470003b0470003b0470003b04ccfff604ccfff60592000005920000052e
0000052e0000055800010558000103a4003c03a4003c03a4003c03a4003c
03a4003c03a4003c04fd000004fd0000063d0000063d0000061500000615
000004760088047600880476008804760088047600880476008804760088
0476008805e7000005e70000072700000727000006ff000006ff0000071e
0000071e000001d4008c01d4008c01d4ffda01d4ffda01d4fff801d4fff8
01d4ff6101d4ff6103a4000003a4000004f8000004f8000004bc000004bc
000004db000004db00000458003904580039045800390458003904580039
0458003905a90000060d0000076900000769000006dd000006dd00000474
008004740080047400800474008004740080047400800474008004740080
05a8000006d4000006d4000006df000005cc004005cc004005cc004005cc
004005cc004005cc004005cc004005cc0040059e000006020000075e0000
075e000006d2000006d2000007410000074100000470003b0470003b03a4
003c03a4003c047600880476008801d4001101d400890458003904580039
047400800474008005cc004005cc00400470003b0470003b0470003b0470
003b0470003b0470003b0470003b0470003b04ccfff604ccfff6059c0000
059c0000053800000538000005580001055800010476007f0476007f0476
007f0476007f0476007f0476007f0476007f0476007f05e7000005e70000
072700000727000006ff000006ff0000071e0000071e000005cc004005cc
004005cc004005cc004005cc004005cc004005cc004005cc0040059e0000
06020000075e0000075e000006d2000006d2000007410000074100000470
003b0470003b0470003b0470003b0470003b0470003b0470003b04ccfff6
04ccfff604ccfff604ccfff604ccfff602d50110045e01c902d50110045e
00a1045e00a10476007f0476007f0476007f047600880476007f05700000
05200000065a0000060a00000567009702d5005c02d5005c045e00a101d4
ff9c01d4ff6c01d4ff6401d4ff6401d4ff5701d4ff5702fc003202fc0002
042b000003db000002d5005c02d5005c045e00a104740080047400800474
008004740080046a007e046a007e0474008004740080049cfff5049cfff5
0607000005df000004e90000045e00ae045e00ae045e017905cc004005cc
004005cc004005cc004005cc00400674000005a9000006690000059e0000
059e002b045e01a102d501100000feaa0000fe870000fdc10000feb60000
ff950000fecd0000fece0000fe700000feaa0000ffbf0000ff3d0000fe70
0000feb60000feb70000ffa10000ffa10000ffa1000000640000ff2d0000
ff2d0000ff440000ff440000fe87000000000000ffa30000ff440000ff44
0000ff440000fe870000fea9000000000000fecd0000ff470000ffa10000
ff0e0000ff240000ffbf0000fe870000febb0000feaa0000feaa0000feb6
0000feb70000fe710000fe870000fdc10000fdc10000fe710000fe870000
fdc10000fe870000fe880000ffa30000fe870000ff440000feba0000ff23
0000ff9a0000fdc10000fe710000ffa10000fe7e0000ff990000fe870000
fdc10000ff3d0000ff440000fe700000fe710000fe6c0000ff030000ff44
0000ff530000ff530000ff5305570042046c003205570042046c003b04b4
009703fc008805a90042045800390443001f038e000a0443001f038e000a
000000000000003e0000003e0000003e0000003e000000c2000001120000
023e000003e20000053e000006b6000006f6000007900000083c00000918
000009a0000009f400000a2c00000a6a00000ab000000bea00000c960000
0d8800000efe00000fb8000010e00000125c000012d0000014a20000161c
00001666000016dc0000175e000017aa0000182e0000193200001a920000
1baa00001d7200001ed200001fdc000020800000211e000022a800002406
000024d400002594000026b2000027260000287c000029e000002b2e0000
2c4600002dec00002f360000311c000031ea000033280000344e0000359c
000036ea000037ca0000386e000038bc0000390a0000395e000039e20000
3a0e00003a4a00003c8400003e2600003faa0000414a000043360000446a
00004648000047b20000490000004a2600004b9400004c6e00004eda0000
5044000051b80000535a000054a200005582000057bc000058cc00005a50
00005b6e00005d2000005e7800005f7000006008000061140000614e0000
626e00006386000063c0000065620000670c0000673a0000676200006794
000067d6000067fa0000681e00006842000068680000688c00006a7c0000
6bf800006c2200006c4600006c6a00006c9000006cb600006ce600006da6
00006e7e00006ea200006ec600006eea00006f0e00006f4800006f6c0000
6f9000006fb400006fd800006ffe00007076000070f8000071f0000072bc
000074c00000750e0000757a000076ba0000784e000079aa00007a680000
7aa600007aea00007bae00007cb200007e4400007f7200007ff40000808e
00008126000081fc000082da000083f20000849e00008508000085660000
85fc000086fa0000878a000088de00008b1000008c7800008d4000008db8
00008dfa00008e7400008f5e0000906c00009122000091d2000092840000
92d80000930c0000933c000093620000949000009678000096a4000096d0
00009756000097d80000982a0000987c000098f20000998e000099b40000
99e600009a2000009b5c00009bbc00009c1e00009d1c00009e1800009ec8
00009ef200009f3e00009fbc0000a1860000a1ac0000a1da0000a2080000
a23e0000a2700000a29e0000a2cc0000a3340000a36a0000a39c0000a3ca
0000a3fe0000a4380000a4660000a49e0000a5220000a5720000a6220000
a6580000a6c60000a6f20000a7700000a7d40000a84e0000a8b40000a906
0000a9d20000aa9a0000aac80000aaec0000ab1a0000ab3e0000ab920000
acba0000adfe0000ae2c0000ae500000af420000b0300000b0600000b0d0
0000b1380000b1e80000b2f60000b4120000b4e40000b6720000b73a0000
b7680000b78c0000b7ba0000b9de0000bbf20000bc200000bc440000bc72
0000bc9a0000bde00000be0a0000be340000be620000be860000bff00000
c1980000c1c60000c3020000c42a0000c5180000c6ac0000c6de0000c702
0000c7300000c7720000c8160000c89c0000c92c0000c9a20000c9d00000
c9f40000ca220000ca460000ca780000ca9e0000cacc0000caf20000cb20
0000cb460000cb740000cb9a0000cc7c0000cdb20000cde00000ceda0000
cf0c0000cf3c0000cf7a0000cfa00000cfce0000cffa0000d0280000d04c
0000d0a60000d1f60000d3460000d4440000d5b00000d6e00000d7ca0000
d83e0000d99c0000d9ee0000da260000dac00000dce80000ddec0000def8
0000e0140000e05a0000e0de0000e2880000e3ac0000e4020000e4360000
e4840000e4d60000e58e0000e5b60000e5da0000e60c0000e6300000e65e
0000e6820000e6aa0000e6ce0000e6fc0000e7200000e74e0000e7720000
e7a00000e7c40000e7f20000e8160000e9c60000eb4a0000eb780000ebb4
0000ecb40000ede20000eedc0000f0040000f0a20000f1480000f2020000
f2d60000f3be0000f4de0000f50c0000f5f60000f61a0000f6400000f740
0000f8080000f8e80000f90c0000f9300000fa720000fb660000fb8c0000
fbb00000fbde0000fc020000fc260000fd340000fd620000fd860000fe46
0000ff520000ff780000ff9c0000ffc20000ffe600010014000100380001
019e000102ae000102dc000103020001033000010354000103e60001058e
00010784000107b2000107dc0001080e000108320001085c000108920001
08c2000108f0000109160001094800010970000109a6000109d400010a1c
00010a4600010b3800010c1c00010db400010ffa000112080001139c0001
13e60001144e0001147a000114ec0001153200011592000115f00001165c
000116ae00011716000117720001185a0001186a0001187a0001188a0001
189a000118aa000118ba000118ca000118da000119b0000119c0000119d0
00011a5200011a6200011afc00011b0c00011bdc00011bec00011bfc0001
1c0c00011d2a00011d3a00011da200011dd400011df800011e1c00011e40
00011e6e00011e9600011fe0000120dc000121de00012298000123e00001
246400012570000126520001266200012672000128060001281600012922
00012a2a00012af200012c1800012d5a00012ec200012ed200012ef80001
2f1c00012f4000012f6600012f9c000130bc000130e80001321c0001322c
0001323c000132a4000132b40001342a0001355a000136500001367e0001
3800000138c0000138d0000139ba000139ca00013a2400013b0400013b14
00013cbe00013e4400013f2a000140620001418200014286000142960001
42a6000142b600014350000143600001437000014380000144b4000145ec
000145fc000146c00001478c0001487e0001497000014a7800014b8a0001
4c6000014d6a00014ebe00014fb600014fc6000151340001527a000152e6
000153d0000153e000015590000156c80001578e000157b0000158ca0001
59ba00015aba00015b5a00015b6a00015bea00015bfa00015c0a00015ca0
00015cb000015e5400015e6400015f2200015ff2000160ae000161980001
629a000163ae0001648c000165c2000166d2000167ca000167f000016984
000169a800016abe00016ace00016ade00016aee00016afe00016c600001
6d9000016eb800016eee00016f1000016fb000017026000170ac000170d8
00017222000172320001731c00017728000177520001777c000177a60001
77d0000177fa000178240001784e00017878000178a200017a0e00017b36
00017c6400017d9200017e1800017e4400017e5600017e6800017eda0001
7f4c00018018000180d400018154000181d2000182a600018372000183f8
000184b200018534000185c0000186980001877000018840000188620001
888c000188b8000188e40001891a0001893e0001896400018988000189ba
000189de00018a0800018a2c00018a6000018a9800018abc00018ae00001
8b0400018b2800018b4c00018b7000018b9400018bb800018bf600018c2e
00018c5000018c7200018ca600018cd000018cfc00018d1e00018d4e0001
8d7200018da200018dc600018dea00018e1800018e3c00018e6000018e9e
00018ed000018f0200018f2e00018f5200018f7600018f9000018fda0001
90040001902e0001909e000191ae000192460001930400019346000193c2
00019474000194a800019504000195560001961c000196680001969e0001
96c800019702000197380001978a000197dc0001981c000198f40001998a
00019a6c00019ac600019b7200019be400019cbc00019d4a00019e0a0001
9e6c00019ef200019f980001a04a0001a0d40001a1d40001a24e0001a2c2
0001a3a00001a4680001a53e0001a6360001a7180001a8280001a8e80001
a9720001aa700001ab660001ac3e0001ad180001adf20001ae440001aec6
0001afa80001afbe0001affe0001b0420001b0680001b0b00001b1680001
b18c0001b1b80001b20a0001b2600001b2840001b2a80001b2e80001b312
0001b3440001b36c0001b3a60001b3d80001b40e0001b4320001b4840001
b4a60001b4c80001b4fc0001b52c0001b55a0001b57e0001b5b40001b5ea
0001b6280001b6500001b6720001b6b20001b6d60001b6fa0001b71c0001
b73e0001b7600001b8600001b8880001b8f20001b94a0001b9ae0001ba2e
0001baca0001bbde0001bcb00001bce00001bd580001be700001beee0001
bf340001bffa0001c0400001c1300001c1b80001c2300001c2b40001c38e
0001c47e0001c5b00001c6820001c7460001c7ce0001c8500001c9660001
cab80001cb280001cc740001cd820001ce260001cf720001cfea0001d108
0001d20c0001d2f80001d3260001d36c0001d3e40001d4600001d4c60001
d60c0001d6360001d6700001d69a0001d6ce0001d7020001d7b20001d926
0001d9d20001da020001dae60001db100001dc920001dcd80001dd1e0001
dd620001dda60001ddda0001df1a0001dfdc0001e0f20001e1300001e16a
0001e19e0001e1e40001e2240001e2600001e3c80001e55e0001e6800001
e7d80001e9b00001ebaa0001ed340001eefa0001f07e0001f20e0001f238
0001f2620001f28c0001f2b60001f2e00001f30a0001f3340001f35e0001
f3880001f3b20001f3dc0001f4060001f4300001f45a0001f4840001f4ae
0001f6960001f7ce0001f8ea0001fa8c0001fba60001fbca0001fbec0001
fc1a0001fc420001fc740001fca20001fcd40001fcf80001fd280001fd56
0001fd7c0001fda00001fde20001fe140001fe440001fe660001fe980001
fec20001fef40001ff160001ff3a0001ff680001ff8c0001ffae0001ffd0
0001fff2000200260002004800020082000200a4000200dc000200fe0002
0134000201560002017a0002019c000201be000201e00002021800020244
0002026600020294000202c2000202ee0002031c0002033e000204a20002
04b4000204c4000204d4000204fe00020712000207220002074c00020776
000207a2000207ce0002080c0002084a0002088e000208ce000209020002
092e0002096000020990000209cc00020a3600020a6600020a9600020ac6
00020af600020b2a00020b5e00020b9200020bc600020bfa00020c2a0002
0c6200020c9a00020cd200020d0a00020d3600020d6200020d8e00020dc2
00020ec2000210120002109e0002117c000211ac000211d80002120a0002
123c000212e8000213ba000213e600021412000214980002156c000215a0
000215d400021734000218cc000219de00021b2400021b5800021b8c0002
1bc000021bf400021d6200021f080002202400022190000221bc000221e8
0002221e000222540002235800022490000224a0000224b0000224dc0002
250800022534000225600002268c000228ca000229ac00022b0400022b30
00022b5c00022b8800022bb400022be000022c0c00022c3800022c640002
2db600022de600022e1600022e4600022fbe000231520002316200023172
0002322e0002330200023372000234160002354a000236be000237b40002
38d8000239b800023abc00023ae800023b1400023b2400023bfa00023d04
00023e2600023f1a00024028000240380002404800024080000242700002
42a4000242e00002430a000243340002436c000243a4000243de00024418
000244ce000245bc000245f6000246300002466600024692000246be0002
46d0000246fe000247100002473a0002476400024776000247a2000247b4
000248200002488c0002489e0002490a0002491c000249780002498a0002
499c000249ae000249c0000249d2000249e4000249f600024a0800024a64
00024a7600024ad200024ae400024af600024b0800024b1a00024b2c0002
4b3e00024b5000024b6200024b7400024b8600024b9800024baa00024bbc
00024bce00024be000024bf200024c1600024c4200024c6600024c8c0002
4cae00024cde00024d0400024d3200024d6a00024e5200024fcc0002518c
0002532e0002552200025778000258d800025a5200025ca200025e7e0002
609c00026298000265600002680200026b1400026e0600027060000272de
0002754e00027762000279f000027b9800027d9000027eb80002808a0002
81aa000282ca00028440000285b60002872c0002889e00028a1a00028bd2
00028d5400028e9c0002904e000291fc00029382000294980002969c0002
990000029b0e00029d1200029f240002a06c0002a2a00002a3d60002a682
0002a7d40002a8540002a86a0002a8fa0002a9a60002aad60002aba40002
aca60002adc40002ae0a0002af680002b0360002b04e0002b1be0002b3c2
0002b5960002b61c0002b7e60002b98e0002b9b80002bb220002bd260002
bd820002be9a0002bf5e0002c0520002c19e0002c2520002c3b00002c5ec
0002c7660002c9760002cc480002cdde0002cff20002d20c0002d3ec0002
d5200002d6da0002d8e80002d90c0002d9300002d9560002d97a0002d998
0002d9b80002d9d80002da040002da240002da4c0002da6c0002da8c0002
daae0002dace0002dc800002dd8c0002de4e0002de600002de720002dfdc
0002dfee0002e00c0002e13e0002e2400002e35e0002e3a40002e3e60002
e4420002e4760002e4860002e4960002e4a60002e4b60002e5420002e5e0
0002e78c0002e91a0002ea340002eb6e0002ecae0002edca0002ee780002
ef3c0002ef4c0002f0160002f0fa0002f2020002f2ee0002f3f00002f4ee
0002f5ee0002f6b40002f6c40002f7dc0002f8e80002f9f20002faf80002
fb3e0002fb880002fbb80002fbf00002fc200002fc660002fce20002fd12
0002fd420002fd780002fda80002fdd80002fe080002fe3c0002fe700002
ff2600030000000300760003010e00030298000302ce000302fe000303ac
000304320003046400030496000304c2000304d2000304fa000305e20003
065600030782000308a000030a7c00030ba400030ccc00030e8400030eaa
000310e8000311b6000312dc000314f40003158e00031624000316720003
16f40003175400031870000318c6000318d800031902000319300003195e
00031988000319b2000319de00031a0a00031a3600031a6200031a940003
1ac600031b1000031b5a00031b9400031bc600031bf600031c2600031c56
00031c8600031cbc00031cf200031d2800031d5e00031db000031e020003
1e5400031ea600031eda00031f0e00031f4200031f7a00031fb200031fea
000320220003205a00032092000320ca000321020003213a0003216c0003
219e000321d8000322120003224200032272000322a2000322d200032302
000323320003236200032392000323ce0003240a0003243a0003246a0003
249e000324d2000325060003253a00032576000325b2000325ea00032622
0003265c00032696000326da0003271e0003274e0003277e000327ae0003
27de00032812000328460003287a000328ae000328e60003291e0003294e
0003297e000329ae000329de00032a0a00032a3a00032a7e00032ac20003
2b0400032b4600032b8000032bba00032bfc00032c3e00032c8200032cc6
00032d0a00032d4e00032d8e00032dce00032e0e00032e4e00032eaa0003
2f0600032f6200032fbe00032fee0003301e0003304e0003307e000330b2
000330e60003311a0003314e00033182000331b6000331ea0003321e0003
325200033286000332b2000332de0003330a0003333600033376000333b6
000333f60003343600033476000334b6000334f4000335340003356c0003
35a4000335dc000336140003364600033672000336ac000336e0000337d2
000338de0003399e00033a7400033aae00033ae800033b2400033b600003
3b9000033bc000033bf400033c2800033c5c00033c9000033cc800033d00
00033d4000033d8000033dbe00033dfc00033e3400033e6c00033ea80003
3ee400033f4400033fa400033ff80003404c0003407c000340ac000340dc
0003410c0003414200034178000341ae000341e40003427c000343140003
43a2000344300003445c00034488000344b4000344e00003451000034540
00034570000345a0000345dc000346180003465400034690000346d00003
47fc0003483a00034878000348b0000349b4000349f400034a3400034a64
00034a9400034ad200034c1c00034c6a00034cb800034cec00034d200003
4d6c00034db800034e0200034e5600034e9c00034ee200034faa00035092
000350c6000350fa000351320003516a0003519e000351d2000352040003
52360003526c000352a2000352dc000353160003542e0003555e0003558a
000355b6000355fa0003563e00035670000356a2000356d80003583e0003
587e000359e400035b2800035bc000035c7800035cc600035d8600035ff0
00036176000361b8000361e600036256000362d4000363060003635e0003
63ea0003646000036472000364f20003666e00036680000366d8000366ea
0003673600036782000367ce0003681a0003685e000368a2000368e60003
692a0003696e000369be00036a0200036a4600036b2400036c1e00036c4a
00036c7600036cea00036d5000036dc000036e2800036ec200036f4a0003
6ffc000370a00003716e0003723c000372bc00037306000373b000037414
0003747a000374d6000375aa0003772e000377c0000377e60003780c0003
7832000378560003787a0003789e000378cc000378fa0003792000037944
0003796a00037992000379b6000379da00037a0800037a3600037a5c0003
7a8200037aa800037ace00037af400037b1a00037b4000037b6600037b8c
00037bb200037be000037c0e00037c3400037c5800037c7e00037cc60003
7cec00037d1000037d3600037d5c00037d8200037da600037dce00037df6
00037f12000380280003805c00038090000380be000380ec000381160003
8140000381660003818c000381b0000381d4000382020003823000038254
0003827a000382b00003830a00038338000383660003838c000383b20003
83d8000383fe000384240003844a0003847000038496000384bc000384e0
000385060003852a0003855800038586000385ac000385d2000385fa0003
86200003864a000386720003869a000386c0000386e80003870e00038734
000387580003877e000387a2000387c8000387ec00038810000388340003
886a000388a0000388ce000388fc00038922000389460003896a0003898e
000389b8000389e200038a0800038a2e00038a6400038a9800038abe0003
8ae400038b0800038b2c00038b5a00038b8800038bae00038bd400038c06
00038c3800038c6600038c9400038cba00038ce000038d0600038d2c0003
8d5400038d7c00038daa00038dce00038df200038e1600038e3c00038e62
00038e8800038eae00038ed400038ef800038f2000038f4600038f6c0003
8f9000038fbe00038fe2000390060003902a0003905800039086000390b4
000390dc000391040003912a000392d20003931a00039340000393660003
938e000393b6000393de000394060003942c0003945200039496000394ce
0003950e0003954e0003958a000395c6000396220003967e000396a40003
96ca000397040003973e00039778000397b2000397fa0003983800039874
000398b0000398e800039920000399460003996c00039994000399bc0003
99e400039a0c00039a3200039a5800039a9e00039ae400039b1a00039b50
00039b8200039bb400039bf400039c3400039c5a00039c8000039cba0003
9cf400039d2c00039d6400039d8c00039db400039dec00039e2400039e4e
00039e7800039eaa00039edc00039f1600039f5000039f7600039f9c0003
9fc400039fec0003a0140003a03c0003a06c0003a0a60003a0dc0003a112
0003a14a0003a1820003a1a80003a1ce0003a2120003a2560003a2900003
a2ca0003a2f00003a3160003a34e0003a3800003a3a80003a3d40003a3fa
0003a4200003a45a0003a4940003a4ce0003a5080003a5300003a5580003
a5900003a5c80003a5f00003a6180003a6520003a68c0003a6c00003a6f4
0003a7180003a73c0003a7600003a7840003a7a80003a7cc0003a7f20003
a8180003a83c0003a8600003a8840003a8a80003a8cc0003a8f20003a928
0003a95e0003a9960003a9ce0003aa060003aa3e0003aa740003aaaa0003
aafe0003ab440003ab800003abbc0003abf60003ac300003ac900003acf0
0003ad2c0003ad680003ada60003ade40003ae220003ae600003ae9c0003
aed80003af1e0003af640003afa40003afe40003b0220003b0600003b0ac
0003b0f80003b1300003b1680003b1b40003b2000003b24c0003b2980003
b2d20003b30c0003b3560003b38e0003b3c80003b4020003b4480003b48e
0003b4d40003b51a0003b53e0003b5620003b5960003b5ba0003b5ee0003
b6120003b6460003b66c0003b6920003b6c40003b6ec0003b7100003b77c
0003b7da0003b8480003b8bc0003b9700003b9aa0003b9d40003ba0e0003
ba320003ba6c0003baa40003bad20003bb0a0003bb360003bb5c0003bbf0
0003bc8a0003bd640003bd940003bdba0003bde80003be120003be380003
be620003be8c0003beb20003bee60003bf120003bfa40003c0360003c112
0003c1360003c15a0003c1820003c1aa0003c1d00003c1f60003c21a0003
c2420003c2680003c28e0003c2ca0003c2fa0003c3380003c3a20003c40e
0003c43e0003c4740003c49a0003c4d20003c4f80003c5300003c5660003
c58e0003c5b60003c5e80003c60e0003c6400003c6aa0003c6f60003c72a
0003c75a0003c7c00003c7ec0003c82e0003c8a80003c91a0003c96a0003
c9940003c9d80003ca4e0003cad20003cb2a0003cb9c0003cc0c0003cc7e
0003ccf00003cd300003cd700003cdd00003ce320003ce640003ceac0003
cf400003cf9a0003cff60003d0720003d09a0003d10c0003d1740003d1ba
0003d2680003d2ec0003d34c0003d3ae0003d3d80003d41c0003d4b20003
d50c0003d5660003d5de0003d6480003d6f00003d7180003d7400003d796
0003d83c0003d8640003d88c0003d8c40003d90e0003d9a40003d9e80003
da3a0003daec0003db960003dc180003dc640003dd0e0003dd7e0003ddea
0003de480003de940003deea0003df2e0003df700003e0cc0003e1ee0003
e3160003e3c80003e42c0003e4ac0003e5000003e57a0003e6b20003e84a
0003e87c0003e8a00003e8e60003e91e0003ea560003eb640003ec4e0003
ed740003eda60003edca0001000007f2008c001000640008000200100040
005500000336063c000300020000002d0222000100000000000000320000
000100000000000100060032000100000000000200070038000100000000
00030018003f0001000000000004000600570001000000000005000c005d
0001000000000006000600690001000000000007002f006f000300010403
0002000c009e0003000104050002001000aa0003000104060002000c00ba
0003000104070002001000c60003000104080002001000d6000300010409
0000006400e60003000104090001000c014a0003000104090002000e0156
0003000104090003003001640003000104090004000c0194000300010409
0005001801a00003000104090006000c01b80003000104090007005e01c4
0003000104090008001e02220003000104090009001c0240000300010409
000a07d4025c000300010409000b00460a3000030001040a0002000c0a76
00030001040b000200100a8200030001040c0002000c0a9200030001040e
0002000c0a9e0003000104100002000e0aaa000300010413000200120ab8
0003000104140002000c0aca000300010415000200100ad6000300010416
0002000c0ae60003000104190002000e0af200030001041b000200100b00
00030001041d0002000c0b1000030001041f0002000c0b1c000300010424
0002000e0b2800030001042a0002000e0b3600030001042d0002000e0b44
00030001080a0002000c0b520003000108160002000c0b5e000300010c0a
0002000c0b6a000300010c0c0002000c0b76a92032303034204d6963726f
736f667420436f72706f726174696f6e2e20416c6c207269676874732072
657365727665642e5461686f6d61526567756c61724d6963726f736f6674
205461686f6d6120526567756c61725461686f6d6156657273696f6e2033
2e31345461686f6d615461686f6d6120697320612074726164656d61726b
206f66204d6963726f736f667420436f72706f726174696f6e2e004e006f
0072006d0061006c006f00620079010d0065006a006e00e9006e006f0072
006d0061006c005300740061006e0064006100720064039a03b103bd03bf
03bd03b903ba03ac00a9002000320030003000340020004d006900630072
006f0073006f0066007400200043006f00720070006f0072006100740069
006f006e002e00200041006c006c00200072006900670068007400730020
00720065007300650072007600650064002e005400610068006f006d0061
0052006500670075006c00610072004d006900630072006f0073006f0066
00740020005400610068006f006d006100200052006500670075006c0061
0072005400610068006f006d006100560065007200730069006f006e0020
0033002e00310034005400610068006f006d0061005400610068006f006d
006100200069007300200061002000740072006100640065006d00610072
006b0020006f00660020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e002e004d00690063
0072006f0073006f0066007400200043006f00720070002e004d00610074
00740068006500770020004300610072007400650072005400610068006f
006d00610020006900730020006f006e00650020006f00660020004d0069
00630072006f0073006f00660074002700730020006e0065007700200073
0061006e0073002000730065007200690066002000740079007000650066
006100630065002000660061006d0069006c006900650073002e00200049
007400200063006f006e007300690073007400730020006f006600200074
0077006f002000570069006e0064006f0077007300200054007200750065
005400790070006500200066006f006e0074007300200028007200650067
0075006c0061007200200061006e006400200062006f006c00640029002c
00200061006e006400200077006100730020006300720065006100740065
006400200074006f00200061006400640072006500730073002000740068
00650020006300680061006c006c0065006e0067006500730020006f0066
0020006f006e002d00730063007200650065006e00200064006900730070
006c00610079002c00200070006100720074006900630075006c00610072
006c007900200061007400200073006d0061006c006c002000730069007a
0065007300200069006e0020006400690061006c006f006700200062006f
00780065007300200061006e00640020006d0065006e00750073002e000d
000a000d000a00530069006e006300650020007400680065002000540061
0068006f006d006100730020006100720065002000540072007500650054
00790070006500200066006f006e00740073002c00200074006800650079
002000630061006e00200062006500200072006f00740061007400650064
00200061006e00640020007300630061006c0065006400200074006f0020
0061006e0079002000730069007a0065002c00200061006e006400200061
006e00740069002d0061006c006900610073006500640020006200790020
00740068006500200072006100730074006500720069007a006500720020
006200750069006c007400200069006e0074006f0020004d006900630072
006f0073006f00660074002000570069006e0064006f0077007300200039
003500200061006e00640020004d006900630072006f0073006f00660074
002000570069006e0064006f007700730020004e005400200034002e0030
002e00200054006800650073006500200066006500610074007500720065
007300200067006900760065002000740068006500200066006f006e0074
00730020007300690067006e00690066006900630061006e007400200061
006400760061006e007400610067006500730020006f0076006500720020
006200690074006d00610070002000730079007300740065006d00200066
006f006e00740073002000730075006300680020006100730020004d0053
002000530061006e0073002000530065007200690066002e000d000a000d
000a0054006800650020004c006100740069006e002c0020004700720065
0065006b00200061006e006400200043007900720069006c006c00690063
002000630068006100720061006300740065007200730020007700650072
0065002000640065007300690067006e0065006400200062007900200077
006f0072006c0064002000720065006e006f0077006e0065006400200074
007900700065002000640065007300690067006e006500720020004d0061
007400740068006500770020004300610072007400650072002c00200061
006e0064002000680061006e0064002d0069006e00730074007200750063
0074006500640020006200790020006c0065006100640069006e00670020
00680069006e00740069006e00670020006500780070006500720074002c
0020004d006f006e006f00740079007000650027007300200054006f006d
0020005200690063006b006e00650072002e002000540068006500200041
00720061006200690063002c002000480065006200720065007700200061
006e00640020005400680061006900200063006800610072006100630074
00650072007300200077006500720065002000640065007300690067006e
0065006400200062007900200074006800650020004d006f006e006f0074
007900700065002000440072006100770069006e00670020004f00660066
00690063006500200074006f00200063006f006d0070006c0065006d0065
006e007400200043006100720074006500720027007300200069006e0069
007400690061006c002000640065007300690067006e0073002e00200054
00610068006f006d0061002000730065007400730020006e006500770020
007300740061006e0064006100720064007300200069006e002000730079
007300740065006d00200066006f006e0074002000640065007300690067
006e002e00200049007400200069007300200069006400650061006c0020
0066006f0072002000750073006500200069006e00200055007300650072
00200049006e00740065007200660061006300650020005300630065006e
006100720069006f007300200061006e00640020006f0074006800650072
00200073006900740075006100740069006f006e00730020007200650071
0075006900720069006e0067002000740068006500200070007200650073
0065006e0074006100740069006f006e0020006f006600200069006e0066
006f0072006d006100740069006f006e0020006f006e0020007400680065
002000730063007200650065006e002e0068007400740070003a002f002f
007700770077002e006d006900630072006f0073006f00660074002e0063
006f006d002f007400790070006f006700720061007000680079004e006f
0072006d0061006c004e006f0072006d00610061006c0069004e006f0072
006d0061006c004e006f0072006d00e1006c004e006f0072006d0061006c
0065005300740061006e00640061006100720064004e006f0072006d0061
006c004e006f0072006d0061006c006e0079004e006f0072006d0061006c
041e0431044b0447043d044b0439004e006f0072006d00e1006c006e0065
004e006f0072006d0061006c004e006f0072006d0061006c004e00610076
00610064006e006f0074006801b001a10300006e00670041007200720075
006e00740061004e006f0072006d0061006c004e006f0072006d0061006c
004e006f0072006d0061006c004e006f0072006d0061006cb15440b8016f
b3282d3640b8016fb2171b36b80171b3033a2190411a0171000100300171
0050017100700171009f017100bf017100df01710006000f0171003f0171
005f0171007f01710004ffc00153b21c1d36b9ffc00163b2121336b9ffc0
014eb2333436b9ffc0014eb2242636b8014eb33c161f0fbd015b00ef015b
00020040015ab3191a3640b8015ab315153640b8015ab2101036b9ffc001
59b3090a3640b80170b3282d3640b80170b2171b36b9ffc0015db2151b36
b9ffc00162b2141536b9ffc00162b21c1d36b9ffc00152b21c1d36b9ffc0
0167b22f3636b9ffc00167b20e2636b9ffc00166b2090d36b9ffc00161b2
090d36b9ffc00165b2333636b9ffc00165b2282a36b9ffc00165b21d2036
b80165b21a191fb9ffc00161b24f5136b9ffc00161b23e3f36b9ffc00161
b2191d36b9ffc00161b313153640b80161b30b0d3640b8015fb2283236b9
ffc0014fb2565a36b9ffc0014fb3393b36304116014f0040014f0050014f
00030070014f0080014f00020000016400100164000200d0016400e00164
00020164b270641fb9ffc00146b2131436b9ffc00146b2161636b9ffc001
46b2090a36b9ffc00142b2111336b9ffc40142b20a0e36b9ffc0013eb217
1836b9ffc0013db20b1836b90130012f400b321fe7e8641fe8d2301f20bc
01390030013900020139b203181f410a013b01320010001f01370132000d
001f01350132b2141f2f410c0132000101360133000e001f013401330014
001f01310133b2101f40ba013800900138402f020fe32fe30240da222436
d1d73f1fd6d71a1f80d501d5d71a1f1fd70170d701cac92a1fcac93938ca
010bc844c802b8ffc0b6dc0911364fd201b8ffc0401eb229323610b220b2
40b250b270b280b2a0b2b0b2d0b2e0b20ac0b2f0b202b8ffc0407bb51718
361f44010f561f56024f555f550238bf2a1f6fbf019fbfafbf0237b9151f
2fbb01bcbe171fbdbe161fbebd151fbab9521fb6b9291fb7b9321fb8b932
1fb935391f3c3f321f3d3f3d1f3e3f211f433f1d1f423f521f413f521f40
3f521f3f35321f3233641f3335341f3534541f34351e1fd034e034f03403
b8ffeeb3b4254836b8ffe0b3b4102336b8ffee400eb4090f36b41a481fd0
6e01e07101b8ffc0400998090a364071091136b8ffc1400970121536406f
131536b8ffc0401a6e0912367099014067090f3670668066a066b06604af
65bf6502b8ffc040de640911366f937f93026f9001708e017f8c9f8c0280
a00100625062c062034061706102105b205b905b036814481fb314481f2d
14111f2c14251f2b14391f2a14131fdf28ef2802cf28df28ef2803281410
1f9e20431f1f141e1f2120431f20143c1f9f1a521f1a1b471f1b1a3c1f1a
14321f1514391f1314411f12141a1f11141a1f7014014014414336000601
0f01010f012f013f016f017f01af01bf01cf01ef01ff010a0f00010f002f
003f006f007f00af00bf00cf00ef00ff000a0a09371f0f020f0302cf02cf
03ff02ff03040c0d39050439030239010039500501b801ff01b0124b004b
5442b013014b004b5342b109322b4bb0645242858d8d1db0964b5258b080
1d59b808004b5458b001b0018e59b0084b5358b001b0018e59002b2b2b2b
73742b73747374b00345b006456861b006234473b00345b00e456861b00e
2344b00e45b00f456861b00f234401b0144568b01423442b732b2b2b2b2b
2b2b2b2b2b2b2b2b73742b2b2b2b2b2b73737373737373732b73732b732b
2b2b2b2b73742b2b2b2b00752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b742b73742b7373742b73742b01742b0073732b2b73742b732b2b2b73
732b2b2b732b2b2b2b732b2b2b2b2b2b2b2b2b2b2b737474752b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b73002b2b2b2b2bb801
714568b8017123447374752b2b2b2b00000000>
[15493 15845 15653 16309 16145 15565 16333 16377 14725 16049 15681 16185 16081
15877 16321 16297 2563 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2736 19 <00020053ffe1040b05ef000b002300c2401534013b0b45014a0b7a11053a
1535214a1545210409b8fff040180e0f3703100e0f3715b9090221b9030a
0f2110007f000200b8ffd4b40d0d023b00b8fff0b40c0c023b00b8ffd6b4
0b0b023b00b8ffe0b40c0c063b00b8ffe0b40d0d063b00b8fffc402c0b0b
063b00001b21a006c0060206100d0d023b06100c0c023b06160b0b023b06
0c0d0d063b060c0c0c063b06b8ffe2b40b0b063b06b8ffc0b30d1137062f
2b2b2b2b2b2b2b5ded332f2b2b2b2b2b2b5ded003fed3fed2b2b5d31305d
011002232202111012333212013636353426272626232206070606151416
171616333236040be9f3f6e6e9f3f6e6ff001d18181e1e6954536b1f1e16
13201d6b56536b02e9fe6ffe89017e018801930175fe7efcb64ae29a99e2
4b4c4f4f4e4ce8929cd2534d534f>Tahoma AddT42Char 
1 3050 20 <000100e2000003b805d6000c007b402505b6060609030b03b801082f0001
af000100050100090b080c0c023b0b2001200380030203b8ffeeb40d0d02
3b03b8fffe400b0c0c023b030c0b0b023b03b8fff4b40c0c063b03b8fff4
400e0d0d063b030c0b0b063b03030e0d1112392f2b2b2b2b2b2b5d33ed2b
39322f332f5d71003ffd3c3f332fed313021213521112135323637331121
03b8fd2a010efef29991099b01089803e6885779fac2>Tahoma AddT42Char 
1 3222 21 <0001006d0000040405f00026007a40331a2225172b1f2b213c0536173923
4c054617492354175a215b226517601b7417771b7b207f221314140eba19
020225ba010825b8ffc0401f0b1037262608213f1c4f1c021c1a0c0c023b
1c1625161c032f0201c0020102b8ffc0b30a0d37022f2b5d7117332f2f2b
5ded332f2b003ffd323fed332f31305d2121353636373636353426272626
232206070606072335363633321615140607060607060607210404fc6963
b054aa7c2722235c37356d322a4e180b3edd63d0ec292425683a5ee74502
dcd15eac5dbbe1783e5e1f1e1e1b14113011d41f3bddbd57943f41803e66
dc40>Tahoma AddT42Char 
1 4320 25 <00020055ffe1041b05ed0025003a00c94045091c05231710191c15233928
3234323a49284234443a5902571052235224642364247434121d062cb920
20061216161aba120238b9060a15180d0d063b1515262110000100b8ffd6
b40d0d023b00b8fff0b40c0c023b00b8ffd6b40b0b023b00b8ffe040100d
0d063b001d2f003221a00cc00c020cb8ffc040160c11370c100d0d023b0c
100c0c023b0c160b0b023b0cb8ffe4400b0b0b063b0c0c0d0d063b0c2f2b
2b2b2b2b2b5ded3332322f2b2b2b2b5ded332f2b003fed3ffd322f111239
2fed123931305d0114060706062322262726023534123736243332161715
232626232206073636333216171616073426272626232206070606151416
171616333236041b4c4043a66465a53f4d575053510100a8325621091b66
3abae5154796595783475250cb303627633446844002023d2d2b5b357895
01e373c2414547444351010fc6c2013974717f0a0bbf0f19fbf732362335
3ebe885c7c2c20142a2816291f9bbe312f26ac00>Tahoma AddT42Char 
1 4700 26 <000100630000041405d10006004c402f030001019e020314020203000203
ba050302080301002b027402020202041000010000200430044004600480
0405042f5d332f5d12392f5d123939003f3ffd1139313087052e2b877dc4
010123012135210414fd7cd502aafcfe03b104f2fb0e0522af00>Tahoma AddT42Char 
1 4816 27 <0003004affde041405f3000e001d003a011fb6150c0c0d063b0cb8fff4b4
0c0d063b0bb8fff4b40c0d063b0ab8fff4b40c0d063b09b8fff440630c0d
063b2a113008300e301932324008400e4019423259015a0554085f115a12
5f175419541d532953335d37640a65176c216026632c6330643669397c12
762c73301f27150c350912061e03b72e021bb81e0a002031313815282b0f
21340c10380138b8ffe0b40d0d023b38b8ffd2b40b0b023b38b8ffe0b50d
0d063b3806b8fff4b40d0d023b06b8fffe40110d0d063b06212b382b1821
a024c0240224b8ffc040160e113724100d0d023b240c0c0c023b24160b0b
023b24b8ffe0400b0b0b063b240c0d0d063b242f2b2b2b2b2b2b5ded3333
2fed2b2b2f2b2b2b5d3939ed11393911332fed003fed3fed12173931305d
2b2b2b2b2b01342623220615141617161617363613342627262627060615
141633323601222627262635343637352626353436333216151406071516
16151400032b86776d8b47471f7f34573e1c48672271475358a37b7e98fe
e86fb6403f41817b6e6afec3cbf5756e8286feeb0476648678664a662911
3c11438dfd715c6c38132c1e37a16787b097fed4423e3ca55c79cb3c0640
9872a8e0d5a664c437063dae89bffefe>Tahoma AddT42Char 
1 5282 28 <00020043ffe3040905ef0014003a00c6404004310a3816311a3829253d02
3d08350b4d024b08450b541758255a385b396b386c397a02702213321b0f
b935352706b91b022b2b2fba270a3212002110210121b8ffd6b40d0d023b
21b8fff0b40c0c023b21b8ffd6b40b0b023b21b8ffe0b50d0d063b212ab8
ffe040250d0d063b2a212a092170158015a015c0150415160d0d023b1516
0c0c023b15160b0b023b15b8ffe4400b0b0b063b15100d0d063b152f2b2b
2b2b2b5ded33332f2b2f2b2b2b2b5dfd3232003ffd322f3fed12392fed12
3931305d0134262726262322061514161716163332363736362534363736
363332161716121514020706062322262735331616333212370606232226
272626034038312c5a367b9230362660374094370103fd034b413eb35c67
a73d4d55535156f1b1285a270a196a37c4e00f5091555388455052036d98
bf343024b0a75e7a2c1f152d250f319e73be45424a454152fef6cbb9feb5
6d747a090cbf0e1a0102f0363224343dbb00>Tahoma AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
0000>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/zero 19 def
/one 20 def
/two 21 def
/six 25 def
/seven 26 def
/eight 27 def
/nine 28 def
end
Tahoma /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
pop
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma /Tahoma findfont ct_VMDictPut
/QNZHTL+Tahoma*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 198{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -21 -21 0 0 0 ]msf
195.9 530.52 mo
(19601970198019902000)
[-11.5081 -11.5081 -11.5081 -72.3619 -11.5081 -11.5081 -11.5081 -74.1616 -11.5081 -11.5081 -11.5081 -71.4631 
-11.5081 -11.5081 -11.5081 -72.5425 -11.5081 -11.5081 -11.5081 0 ]ysh
0 lc
201 486.78 mo
216.3 486.78 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
201 465.54 mo
216.3 465.54 li
@
201 443.88 mo
216.3 443.88 li
@
201 422.52 mo
216.3 422.52 li
@
201 379.62 mo
216.3 379.62 li
@
201 358.26 mo
216.3 358.26 li
@
201 336.78 mo
216.3 336.78 li
@
201 315.24 mo
216.3 315.24 li
@
201 272.4 mo
216.3 272.4 li
@
201 251.04 mo
216.3 251.04 li
@
201 229.5 mo
216.3 229.5 li
@
201 208.02 mo
216.3 208.02 li
@
201 165.24 mo
216.3 165.24 li
@
201 143.76 mo
216.3 143.76 li
@
201.78 57.78 mo
217.02 57.78 li
@
201 100.92 mo
216.3 100.92 li
@
3 lw
199.38 508.26 mo
219.42 508.26 li
@
199.38 401.04 mo
219.42 401.04 li
@
199.38 293.76 mo
219.42 293.76 li
@
199.38 186.66 mo
219.42 186.66 li
@
199.38 79.38 mo
219.42 79.38 li
@
1 lw
201.78 36.42 mo
217.02 36.42 li
@
200.28 122.4 mo
215.4 122.4 li
@
201.78 79.38 mo
217.02 79.38 li
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma-Bold Initial
ct_T42Dict begin
-0.695 -0.207 1.625 1.063
 256 array 0 1 255 {1 index exch /.notdef put} for  /Tahoma-Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f32c0869908000000cc000000566376
7420aa628df300000124000003ea6670676dc2cde7490000051000000682
676c79664d99a122000063a800038b4c68656164d267be0900000b940000
0036686865610f6f0e0700000bcc00000024686d7478c582639800000bf0
00001fc86c6f63610fccd85200002bb800001fcc6d6178700c8107ef0000
4b84000000206e616d65af1d57c700004ba400001146707265707e1dcf9a
00005cec000006ba676469720000000000000000000000000001040c02bc
00050008059a053300000125059a0533000003a000c902b10800020b0804
03050404020461007a878000000000000008000000004d53202000200020
fffc061efe59003b080101a7200101ff202800000000061e061405f005d1
0486046303b700100000ffe2ffddfe78fe64fe59039b0018000001560160
016a017601820000000000000000015e01670000000000a40161016b0177
000000000000000000000000004c00b500bf00da00e300f1000000000000
000000ff010401100119000000e50113007d0167000000d300de00df00f4
00fb01050111011a01230000000000000000000000000000000000000000
000000000000000000000000009a00ae00000000000000d601b802070000
0000000a008c029f00c701fe009a009a00430043017700ea027c03850307
00000086007d003400340000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000030d028f015c027700a001a10243025802dd02aa0000000000000000
000000000108004c016b0172019200000000000000000000000000000000
00000116011f012f013a014601520162018a01ef0233014100e900f300fd
01040113011f00ba00dc00e400ec010201080114014a0189024d02fb01fe
016a068a051104f2000000000000000000000000016901480086005c0173
0168016800f6008600530000009a00940000006e000c001a001f00000000
00000116012b00c1016a0131010c036202b2034c037a03f2050a03b20000
05d1001a061002f4026600af007f0093009300590059012d006000830081
00cd012300f001fc0029009a009a009d007f006b006b00df0463047903c7
01b200660056006601b200d3005a019000630089012f014d011902cb0014
00b302e500a100d9015c03410093037901c20113010f016f000001940056
00dc00b3008f04d100000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000404054483a3c3b3a393837363534333231302f2e2d2c2b2a
292827262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c
0b0a090807060504030201002c01b0184358b119072b1b212121592d2c01
b0184358b11a072b1b212121592d2c01b0184358b0032510f221b000121b
212121592d2c01b0184358b11b072b1b212121592d2c01b0184358b11c07
2b1b212121592d2c01b0184358b11d072b1b212121592d2c01b0184358b1
1e072b1b212121592d2c4eb00014b046234344b0032510b10046e6b00013
b00114b00010f221b001134db000122d2c01b018435845646a234569b019
43646060b0462344231020b046f02fb000121b21212121592d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0462370b101463e01b04623
70b10246453ab10200080d2d2cb0122bb0022545b00225456ab0408b60b0
022523442121212d2cb0132bb0022545b00225456ab8ffc08c60b0022523
442121212d2cb000b0122b2121212d2cb000b0132b2121212d2c01b00643
b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c6423
64615c58b00361592d2cb100032545685458b0032545b0032545606820b0
04252344b0042523441bb00325204568208a2344b00325456860b0032523
44592d2cb00325204568208a2344b00325456860b0032523442d2cb00943
588721c01bb01243588745b0112bb0472344b0477ae41b038a45186920b0
4723448a8a8720b0a05158b0112bb0472344b0477ae41b21b0477ae45959
59182d2c208a4523456860442d2c456a422d2c01182f2d2c21212d2c01b0
022545b002254564606ab00325456a6120b00425456a208a8b65b0042523
448cb00325234421212d2c01456823456961b00325456a6120b00425456a
208a8b65b0042523448cb00325234421212d2c018a8a4564234564616442
2d2c01b0022543b04054b0022543b000545a58b003252045b040614459b0
022543b00054b0022543b040545a58b004252045b040604459212121212d
2c014b525843b00225452361441b2121592d2c014b525843b00225452360
441b2121592d2c4b525845441b2121592d2c0120b003252349b04060b020
6320b000525823b002253823b002256538008a63381b212121212159012d
2c4b505845441b2121592d2c01b005251023208af500b0016023edec2d2c
01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c46
2346608a8a462320468a608a61b8ff8062232010238ab14b4b8a70456020
b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c2045b0032546
52583f1b2111592d2c2045b003254650583f1b2111592d2c00b00743b006
430b2d2c4b5258b00425b0042549b00425b00425496120b0005458212043
b0005558591bb04054582043b0005458591b2043b00054581bb00325b8ff
c03859595959212121212d2c4b52584365381b2121592d2c4b525843381b
2121592d2c21210c6423648bb84000622d2c21b08051580c6423648bb820
00621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb2
00802f2b59b002602d2c0c6423648bb84000626023212d2cb40001000000
15b00826b00826b00826b008260f10161345683ab001162d2cb400010000
0015b00826b00826b00826b008260f1016134568653ab001162d2cb01343
58031b02592d2cb0134358021b03592d2cb00a2b2310203cb0172b2d2cb0
282b8a102320d023b0102bb00558c01b3c59201011b00012012d2c4b5323
4b515a5820458a60441b2121592d2c4b53234b515a58381b2121592d2c20
b003254523452361688a204568208a234460442d2c20b003254523452361
688a204568208a234460442d2c4b5358b00425b00425496423456469b040
8b6120b080626ab00225b00225618cb0462344218a10b046f6211b218a11
231220392f592d2c01b0022510d023c901b00113b0001410b0013cb00116
2d2c01b00013b001b0032549b0031738b001132d2c4b5358b00425b00425
496423456469b0408b6120b080626ab00225b00225618cb0462344218a10
b046f6211b218a11231220392f592d2c4b53234b515a58381b2121592d2c
b1020042b123018851b1400188535a58b910000020885458b20201024360
4259b12401885158b920000040885458b202020243604259b12401885458
b2022002436042004b014b5258b2020802436042591bb940000080885458
b202040243604259b94000008063b80100885458b202080243604259b940
00010063b80200885458b2021002436042595959592d0000000100000003
23d70f1229595f0f3cf5001b080000000000aed2e07800000000bcf76ddd
fa6bfe580d000886000100090002000100000000000100000801fe590000
0d68fa6bfa530d000001000000000000000000000000000007f208000100
00000000025800000258000002be009803ea007f068c007d051800600997
006b064000550234007703a2006e03a2004f05180080068c00c20280fffb
0373006e0280008f049e00760518004e051800c305180097051800670518
002d0518007805180062051800750518003f0518004402e800c302e8002f
068c00b5068c00e0068c00d30488006f075c0076057afffa057d009a0557
0043060f009a04ec009a04a6009a05f60043061d009a03de005e04010006
0592009a0494009a0725009a062a009a062900430542009a0629004305cf
009a0511004904e6000005e900850566fff00839001e057afff4055dffed
04fb003603a200a6049e00c203a20087068c00ad0518fff0045e010e04ca
0032050e0086043800340509003604c00034030f001505090036051f0086
026a007c02e7ffac04d20086026a008607a10086051f008604f000340509
00860509003603780086041e003b03530015051f007d04a10000071e000f
04d6fffc049bfffd0435003004fc0038051801ff04fc0089068c0087057a
fffa057afffa0557004304ec009a062a009a0629004305e9008504ca0032
04ca003204ca003204ca003204ca003204ca00320438003404c0003404c0
003404c0003404c00034026a0060026a0001026affd4026affdc051f0086
04f0003404f0003404f0003404f0003404f00034051f007d051f007d051f
007d051f007d051800a80428007e05180096051800780518006a051800a4
05180042052a0086076e0056076e005606e30056045e0155045e00ac068c
00e007e9ffee06290043080000aa068c00c2068c00c1068c00c205180015
053500860518004405ad007e064900b0052c008605180051041000480450
00630628002d077f003204f000340488004c02be0098068c00c2068c0065
0518001c068c00bb05a2fffa05a0008005a000b6080000ab057afffa057a
fffa06290043084b004307e200340518fffc0746fffc03eaffe603ea005f
0234ffe60234005f068c00c2068c0095049bfffd055dffed0376ffa10518
ffda03660080036600b6056b0015057a0015051800a80280008f0234002c
03ea002f0d68006b057afffa04ec009a057afffa04ec009a04ec009a03de
005e03de004c03de005e03de005e06290043062900430629004305e90085
05e9008505e90085026a0086045e008a045e0079045e00a8045e00be045e
017b045e00fd045e011f045e00b4045e0123045e007304b6001202ae0012
05110049041e003b04fb003604350030051801ff0631001204f50034055d
ffed049bfffd0546009a05090086068c00d3068c00ee045000e4045000b1
045000ab0906008f090600a30906008d0518002605f600430509003603de
005e05110049041e003b0557004304380034055700430438003405000036
0518fff002e800c3057afffa04ca0032057afffa04ca0032060f009a068a
00360631001204ec009a04c0003404ec009a04c000340494009a026a0065
0494009a03eb00860494009a03e60086062a009a051f0086062a009a051f
00860629004304f0003405cf009a0378008605cf009a0378002f05110049
041e003b04e600000353001504e6000004f4001505e90085051f007d05e9
0085051f007d04fb00360435003004fb0036043500300486009a06290043
070400390509003604f000340430003705400034042a000a06b100340518
fff0051c00980450008a09e800bb0785005e052f007c05f0ffda02800051
045600510997006a0296000f04d5009202d6008302d6008304d500b102d6
0070057afffa04ca00320557004304380034055700430438003404ec009a
04c0003404ec009a04c0003404ec009a04c0003405f600430509003605f6
00430509003605f6004305090036061d009a051f0086064100270515fffd
03de0038026affd303de005e026a000e03de005e026afffd03de005e026a
007c0401000602e7ffac0592009a04d2008604d200860494009a026a0018
062a009a051f0086062a009a051f00860629004304f000340629004304f0
003405cf009a03b4004705110049041e003b04e600000353001505e90085
051f007d05e90085051f007d05e90085051f007d05e90085051f007d0839
001e071e000f055dffed049bfffd02940086057afffa04ca003207e9ffee
077f00320629004304f0003402e800c30839001e071e000f0839001e071e
000f0839001e071e000f055dffed049bfffd0234ffea0518ffcc05180078
05780049090600990906007909060084090600900234000f045e011f045e
0176045e002d05d6fff6064bfff6077cfff6054bfff6072bfff60705fff6
0738fff6026aff83057afffa057d009a05a2fffa04ec009a04fb0036061d
009a03de005e0592009a0566fff00725009a062a009a050e006006290043
061d009a0542009a04e4004204e60000055dffed057afff4073700670628
002d03de005e055dffed0509003604300037051d0086026a007c0514007b
0521008604a1000003db0037051d0086050c0053026a008604cc0086049f
00000535008604a10000041a003204f0003405090086040800340514007b
0481ffe906d6007a067a0037026affdc0514007b04f000340514007b067a
003704ec009a067400000486009a055700430511004903de005e03de005e
0401000608e6000308cd009a06930000059a009a055a00020621009a057a
fffa057d009a057d009a0486009a0623000c04ec009a085affee0516002a
0634009a0634009a059a009a063600030725009a061d009a06290043061d
009a0542009a0557004304e60000055a000207040039057afff40636009a
05c0005f08b7009a08d3009a0673000007af009a056a009a055700380905
009a05bbffed04ca00320506004f04dd008603fd0086052d000904c00034
0716000a0432001d053700860537008604d30086053b0005060e00860532
008604f00034052c00860509008604380034042a000a049bfffd071a0036
04d6fffc053f008604ed005a0763008607780086056a000a06c300860499
00860440001f0762008604e0fffd04c000340515fffd03fd008604400034
041e003b026a007c026affdc02e7ffac07610005075100860515fffd04d3
0086049bfffd053000860486009a03fd00860746006009dd009a052c0086
051800720800000008000100080001000800010008000100080001000800
010008000100080001000800010006bb004305040034064d008505b5007d
00000185000001790000fc830000fd59045e008a045eff25045e008a045e
0079045e00be045e00be045e00be045e0079045e0185045e00b2045e00be
045e00be045e00be045e00b4045e008a057afffa04ca0032057afffa04ca
0032057afffa04ca0032057affb304caff39057afffa04ca0032057afffa
04ca0032057afffa04ca0032057afffa04ca0032057afffa04ca0032057a
fffa04ca0032057afffa04ca0032057afffa04ca003204ec009a04c00034
04ec009a04c0003404ec009a04c0003404ec009a04c0003404ecff8c04c0
ff7904ec009a04c0003404ec009a04c0003404ec009a04c0003403de005e
026a008603de005e026a007c0800fc870000fcdc0800010008000100042c
01d3042c011d042c012d042c012d042c01d3042c016e042c0178042c0190
042c0175042c01d3042c011d042c01d3042c01e803760083042c01900270
0094042c01d3042cff8e02e800c3061c00860596003a0455000c05460012
061c009a02de001202ff003a061c009a062e009602c00012056900300561
004e0538004d061c009a061c002d0361001203df0046065b003005d40032
0593005a05770064048a00250558004205bb009a052f003006d6009a0668
003b05bc001205a80012059400120234005f03ea005f0751009a02deff8e
05690030056900300538ff840538ff8405d4003206d6009a06d6009a06d6
009a06d6009a061c0086061c0086061c00860596003a0455000c05460012
061c009a02defff40339fff4062e009602c0fff4056900300561004e0538
004d061c002d03df0046065b00300593005a057700640558004205bb009a
052f003006d6009a0668003b02de00120596003a0561004e057700640668
00240000ffdc0000ff250000ffdc0000fe5102e700c302e700c304880064
03620062024affba023d000002620000023d0000023d000001f00000023d
000002c800310179000004e500f804e500fa04e500230517001b05170071
05170048051700250517000805170008051700b605d9004802e700c304b4
00500456ffba0319ffba045a005802d500ee0517004405170054051700e5
026e00ed026e0067026e0059026e005902baffba026a0002080001000493
ffba08000100086a007f0456ffba020000580493ffba0200fffc043dffba
083b007d08000100086a007f076d0081083b007d02baffba0319ffba082f
007b0875007b076d0081082f007b0591007b0652007b0602ffba0602ffba
03b2ffa40412ffa4081d007d0873007d0473ffba04c9ffba081d007d0873
007d0473ffba04c9ffba07c7007908c7007b080001000800010008000100
080001000800010008000100080001000800010008000100080001000800
010008000100080001000800010008000100080001000265ffdd026a0002
0266000002660000026600000629004304f000340629004304f000340629
004304f000340629000a04f0ff720629004304f000340629004304f00034
0629004304f0003406bb00430504003406bb00430504003406bb00430504
003406bb00430504003406bb00430504003405e90085051f007d05e90085
051f007d064d008505b5007d064d008505b5007d064d008505b5007d064d
008505b5007d064d008505b5007d055dffed049bfffd055dffed049bfffd
055dffed049bfffd055dffed049bfffd050000360000fbd703a2006e03a2
004f0800010009b6007b036200620273002d02ba002d0273008102ba0077
043bffa40485ffc10273007a02ba00a207c7007908c7007b02baffba0319
ffba027300a402ba00a2076d0081083b007d02baffba0319ffba045a0058
05520071076d0081083b007d02baffba0319ffba076d0081083b007d02ba
ffba0319ffba0591007b0652007b0602ffba0602ffba0591007b0652007b
0602ffba0602ffba0591007b0652007b0602ffba0602ffba045a0050049a
0066045a0050049a006603b2ffa40412ffa403b2ffa40412ffa40b37007b
0bbc007b08c7ffba091fffba0b37007b0bbc007b08c7ffba091fffba0b5e
007b0be3007b0771ffba07e7ffba0b5e007b0be3007b0771ffba07e7ffba
067fffba06e5ffba067fffba06e5ffba067fffba06e5ffba067fffba06e5
ffba059300770568007b056fffba04b8ffba059300770568007b056fffba
04b8ffba082f007b086a007f0456ffba0493ffba07e7007b0875007b0456
ffba0493ffba06d5007b0733007b0473ffba04c9ffba062b007b068b007b
02baffba031dffba056aff7f05e7ff7f04c5ffba0546ffba0637007b06c1
007b02baffba0319ffba045a0058055200710639ffba04a2ffba043bffa4
0485ffc107c7007908c7007b07c700790929007b02baffba0319ffba0577
000205d5000f0577005c05d500210577007105d500710577007105d50071
045a0058045a0058055200710000fea30000fccc0000fe1c0000fd100000
fcb70000fe6f0000fc960000fd830000fc6a0000fc4b0000fec90000fcb2
0000fe230000fcdc0000fcd60000fec20000fb840000faa30000faeb0000
fbd70000fb860000fb1f0000fc5a0000fd130000fec20000fbf40000fe72
0000fb2b0000fcf40000fc350000fba30000fc6d0000fbeb0000fcc30000
fd0d0000fcd60000fcd60000fcb50000fc1f0000fd5d0000fe2b0000fca2
0000fe9c05110049041e003b04e600000353001504c0003404ec009a0537
00860634009a042c00ea057100850598002905be00230580005605800056
05db0029045a001004f000730560005a05f40029062b00290793008507a8
0085059300290593002904d5008106be0029080e00560839008505800056
058000560571008505d3004e04c7006a056f0029057300290573002905d7
009a05d7009a066800290668002905930029055e00290552009804330029
057100850525008f05930029043f00290581005605aa00290525008f05ae
0029069300290510006a051000830481002903cf00440000fc27043f0029
043ffe020000fb6a0000fb6a0000fb6a0000fb6a0000fe420000fd060000
fe7f057d009a02be009a050c009a03d9000003d900230431ffec043f0029
045800290000fc7d0000fe4b0000fcfe0000fcd50000fdcf0000fdc70000
fe020000fde104f20052050e005205ba00520637009a05a80052063d0052
063d00520573000c07ba00460631005206cb0046063d0029085a005204d5
00480000fa840000fa840000fa840000fa840000fca90000faec0000fa6b
0000fc1c0000fc660000fe870000fd7b0000fc8b0000fdfe0000fdcb07a8
00850000faa20000fcaa0000faec0000fd660000fd1b0000fc840000fce9
0000fcc90000fe420000fd060000fe7f0234002d037100b602baffba03de
005e04010006026a007c02e7ffac0486003303fd00340872ffee071d000a
05b5009a04e30086059a009a04d300860639009a05480086055dffed049b
fffd055dffed049bfffd059ffff40501fffc05c0005f04ed005a05c0009a
051f00860629004304c0002e0629004304f000340000ffdc0000ff160000
ffdc0000ff200000ffdc0000ff200266002c076d0081083b007d02baffba
0319ffba045a0050049a006603b2ffa40412ffa40637007b06c1007b042a
004602baffba03dcffba042a0046042a0046074b0013074b0013074b0013
074b0013024a0028045a00580000ffac0000fdd10000fec204730069052a
0032055700430557004307a10086062a00000aa9009a0839000005920000
04e60000090000140200000d0200000f026e00ed026e006701ae002707e7
007b0264003202000058020000580273003602ba00360273003802ba0038
0273003802ba0038027300a402ba00a2043bffa40485ffc1043bffa40485
ffc107c7007908c7007b076d0081083b007d02baffba0319ffba076d0081
083b007d02baffba0319ffba076d0081083b007d02baffba0319ffba076d
0081083b007d02baffba0319ffba076d0081083b007d02baffba0319ffba
076d0081083b007d02baffba0319ffba0591007b0652007b0602ffba0602
ffba0591007b0652007b0602ffba0602ffba0591007b0652007b0602ffba
0602ffba0591007b0652007b0602ffba0602ffba0591007b0652007b0602
ffba0602ffba0591007b0652007b0602ffba0602ffba045a0050049a0066
045a0050049a0066045a0050049a0066045a0050049a0066045a0050049a
0066045a0050049a0066045a0050049a006603b2ffa40412ffa403b2ffa4
0412ffa403b2ffa40412ffa403b2ffa40412ffa403b2ffa40412ffa403b2
ffa40412ffa403b2ffa40412ffa40b37007b0bbc007b08c7ffba091fffba
0b37007b0bbc007b08c7ffba091fffba0b37007b0bbc007b08c7ffba091f
ffba0b5e007b0be3007b0771ffba07e7ffba0b5e007b0be3007b0771ffba
07e7ffba067fffba06e5ffba059300770568007b056fffba04b8ffba082f
007b086a007f0456ffba0493ffba082f007b086a007f0456ffba0493ffba
082f007b086a007f0456ffba0493ffba082f007b086a007f0456ffba0493
ffba07e7007b0875007b07e7007b0875007b08ae007d08ae007d08aeffba
08aeffba081d007d0873007d0473ffba04c9ffba06d5007b0733007b0473
ffba04c9ffba06d5007b0733007b0473ffba04c9ffba06d5007b0733007b
0473ffba04c9ffba081d007d0873007d0473ffba04c9ffba081d007d0873
007d0473ffba04c9ffba081d007d0873007d0473ffba04c9ffba081d007d
0873007d0473ffba04c9ffba081d007d0873007d0473ffba04c9ffba062b
007b068b007b02baffba031dffba062b007b068b007b02baffba031dffba
062b007b068b007b02baffba031dffba062b007b068b007b02baffba031d
ffba0637007b06c1007b02baffba0319ffba0637007b06c1007b0637007b
06c1007b02baffba0319ffba0637007b06c1007b0591007b0652007b0602
ffba0602ffba043bff740485ff88043bffa40485ffc1043bffa40485ffc1
043bffa40485ffc1043bffa40485ffc1043bffa40485ffc1043bffa40485
ffc1043bffa40485ffc107c7000008c7000007c7007908c7007b02baffba
0319ffba043bffa40485ffc107c700790929007b07c700790929007b0000
fda10000ff1c0000ff140000ffa70000fdf308fc003208ad00320000ffb5
0000ffb60000fed80000fee90000fdf30000ff97020a0032035200320000
fe890000fef304cd00320000ff580000ff580000fee90b37007b0bbc007b
08c7ffba091fffba0b5e007b0be3007b0771ffba07e7ffba059300770568
007b056fffba04b8ffba03620062056aff7f045a0050049a0066045e00a8
045e00a8045e00a8045e00a8045e00fd045e00ac045e00b4045e0079045e
00b4045e0079045e01c4045e0155045e00b2045e008a045e00a8045e00a8
04ec009a04c00034045e017a057afffa04ca0032057d009a050e0086057d
009a050e0086057d009a050e00860557004304380034060f009a05090036
060f009a05090036060f009a05090036060f009a05090036060f009a0509
003604ec009a04c0003404ec009a04c0003404ec009a04c0003404ec009a
04c0003404ec009a04c0003404a6009a030f001505f6004305090036061d
009a051f0086061d009a051f0086061d009a051f0086061d009a051f0086
061d009a051f008603de0029026aff7f03de005e026affb50592009a04d2
00860592009a04d200860592009a04d200860494009a026a007f0494009a
026affae0494009a026affae0494009a026aff900725009a07a100860725
009a07a100860725009a07a10086062a009a051f0086062a009a051f0086
062a009a051f0086062a009a051f00860629004304f000340629004304f0
00340629004304f000340629004304f000340542009a050900860542009a
0509008605cf009a0378008605cf009a0378008605cf009a0378008005cf
009a0378007605110049041e003b05110049041e003b05110049041e003b
05110049041e003b05110049041e003b04e600000353001504e600000353
001504e600000353001504e600000353001505e90085051f007d05e90085
051f007d05e90085051f007d05e90085051f007d05e90085051f007d0566
fff004a100000566fff004a100000839001e071e000f0839001e071e000f
057afff404d6fffc057afff404d6fffc055dffed049bfffd04fb00360435
003004fb00360435003004fb003604350030051f00860353ffda071e000f
049bfffd04ca003202940086050900360509003605090036050900360509
0036050900360509003605090036057afffa057afffa06b2000006b20000
05ea000005ea0000061a0000061a00000430003704300037043000370430
0037043000370430003705a2000005a20000073c0000073c000006c40000
06c40000051d0086051d0086051d0086051d0086051d0086051d0086051d
0086051d008606d3000006d30000086d0000086d000007f5000007f50000
07d5000007d50000026a0086026a0086026afff4026afff4026a0026026a
0026026affc4026affc404d0000004d00000066a0000066a000005f20000
05f2000005d2000005d2000004f0003404f0003404f0003404f0003404f0
003404f0003406670000068f000007ed000007ed000006fd000006fd0000
0514007b0514007b0514007b0514007b0514007b0514007b0514007b0514
007b068b00000839000007ad0000078d0000067a0037067a0037067a0037
067a0037067a0037067a0037067a0037067a0037067a000006ca000007ec
000007ec000007240000072400000768000007cc00000509003605090036
0430003704300037051d0086051d0086026a0003026a008604f0003404f0
00340514007b0514007b067a0037067a0037050900360509003605090036
0509003605090036050900360509003605090036057afffa057afffa06b2
000006b2000005ea000005ea0000061a0000061a0000051d0086051d0086
051d0086051d0086051d0086051d0086051d0086051d008606d3000006d3
0000086d0000086d000007f5000007f5000007d5000007d50000067a0037
067a0037067a0037067a0037067a0037067a0037067a0037067a0037067a
000006ca000007ec000007ec000007240000072400000768000007cc0000
05090036050900360509003605090036050900360509003605090036057a
fffa057afffa057afffa057afffa057afffa02d500ee045e019302d500ee
045e0079045e0079051d0086051d0086051d0086051d0086051d00860615
0000058900000746000006ba0000061d009a045e00e4045e00e4045e00b4
026affc4026affae026aff33026aff33026aff7f026aff7f03de005e03de
005e0557000004b70000045e00e4045e00e4045e00b40514007b0514007b
0514007b0514007b05090086050900860514007b0514007b055dffed055d
ffed0726000006ae000005f80000045e002d045e002d045e012f067a0037
067a0037067a0037067a0037067a00370716000006290003071500000628
00030628002d045e01a702d500ee0000fe5a0000fe790000fd640000fe8e
0000ff4c0000fe800000fece0000fe4d0000fe460000ffbf0000ff3d0000
fe4d0000fe8e0000fe8e0000ff890000ff890000ff89000000640000fef3
0000fef30000ff440000ff440000fe87000000000000ffa30000ff440000
ff440000ff440000fe790000fea9000000000000fe800000ff470000ffa1
0000feee0000fef00000ffbf0000fe870000fea70000fe460000fe5a0000
fe8f0000fe8e0000fe480000fe790000fd640000fd640000fe480000fe79
0000fd640000fe870000fe480000ffa30000fe870000ff440000fea60000
ff230000ff860000fd640000fe480000ff890000fdfe0000ff640000fe87
0000fd640000ff3d0000ff440000fe480000fe480000fe480000ff030000
ff440000ff530000ff530000ff5305f600430509003605f6004305090036
0592009a04d200860629004304f000340518005a043500170518005a0435
00170000000000000046000000460000004600000046000000a400000112
0000024e0000043e000005d2000007be00000800000008a8000009520000
0a4600000aa600000af200000b2c00000b5e00000bbe00000c7e00000d00
00000df800000f6e000010220000112c0000125e000012ec000014620000
1598000015ea00001662000016e600001734000017be000018c600001aa0
00001b7200001c7e00001db400001e5c00001eda00001f5c000020700000
20de0000214c000021ca00002286000022d000002406000024e0000025cc
00002696000027ee000028d400002a4600002a9e00002b2800002bf20000
2d5c00002e9600002f7c0000301c00003074000030d60000312e000031b8
000031e4000032240000332e000033d8000034c000003576000036620000
370a0000382a000038b000003914000039b400003a9600003ad800003bc0
00003c4600003cec00003daa00003e6c00003f1c00004066000041160000
419e0000426400004360000044b6000045a80000462e000046f200004730
0000480c000048e00000491600004a5600004bcc00004bf800004c240000
4c5e00004c9800004cba00004ce600004d0800004d2c00004d4e00004ec8
00004ffc000050260000504e0000507000005094000050b8000050dc0000
515a000051f600005218000052440000526600005288000052b8000052da
000053060000532e0000535000005374000053f000005474000055700000
564e0000580a0000585a000058d4000059ca00005b5800005cca00005d86
00005dc600005e1200005ede00005fb40000612800006258000062d20000
63760000641c000064ea0000657a000066b200006774000067c600006810
000068a8000069a000006a3c00006b6a00006d2a00006e4400006f440000
6fa000006fe4000070860000718c000072d8000073920000741a000074a6
0000750c000075380000755c00007588000076a00000781a000078480000
7876000078fe0000797a000079c000007a0600007a7e00007af600007b24
00007b5400007b9600007cdc00007d2800007d7800007e4600007f000000
7fbe00007ff200008012000080340000826000008284000082b0000082dc
0000830c0000834200008378000083a4000083e6000084120000843e0000
846a00008496000084c6000084f20000852a0000856c000085ce0000865e
000086940000870200008738000087aa0000880e00008876000088e40000
8936000089d000008a4800008a7400008a9600008ac200008ae400008b3e
00008c1800008d6a00008d9800008dc600008e9400008f5200008f8c0000
9042000090ae000091660000927e000093b2000094c00000969400009718
000097480000976a000097960000997000009b2e00009b6000009b8a0000
9bb600009bda00009cbc00009ce800009d1800009d4600009d6a00009e84
00009fd80000a0060000a1020000a1120000a1e60000a3260000a3540000
a3780000a39c0000a3dc0000a4580000a4ba0000a5260000a5820000a5b8
0000a5e40000a6160000a63a0000a6740000a69a0000a6c80000a6f80000
a7260000a74a0000a77e0000a7aa0000a8540000a9680000a9960000aa7c
0000aab00000aad60000ab0c0000ab320000ab680000ab960000abc20000
abe60000ac320000ad580000ae640000af220000b0320000b1760000b23c
0000b2940000b3ae0000b4080000b4280000b4c20000b6bc0000b7a00000
b86c0000b92e0000b96e0000b9d80000bb820000bca20000bcf80000bd2c
0000bd740000bdb80000be220000be4e0000be7c0000beb20000beda0000
bf0c0000bf380000bf640000bf860000bfb20000bfd40000c0000000c022
0000c0560000c0780000c0a80000c0ca0000c2400000c3900000c3bc0000
c3f60000c4b00000c5600000c58c0000c6400000c67a0000c6dc0000c708
0000c78c0000c84e0000c9040000c9300000c9e80000ca0a0000ca2c0000
cb0e0000cbac0000cc420000cc6e0000cc980000cdb60000ce680000ce94
0000ceb60000cee20000cf040000cf260000d0280000d0540000d0760000
d0fe0000d1d60000d2020000d2240000d2500000d2720000d29e0000d2c0
0000d3a60000d47a0000d4a60000d4ca0000d4f60000d5180000d57e0000
d6c60000d87a0000d8a60000d8d00000d90a0000d9360000d9660000d992
0000d9b60000d9ea0000da180000da540000da880000daac0000dace0000
db160000db420000dc440000dd380000ded20000e1400000e3580000e516
0000e55c0000e56c0000e5b00000e6360000e67a0000e6b60000e6fe0000
e73e0000e7880000e7d40000e80e0000e8b60000e8c60000e8d60000e8e6
0000e8f60000e9060000e9160000e9260000e9360000e9dc0000e9ec0000
e9fc0000ea9c0000eaac0000eaf60000eb060000ebd60000ebe60000ebf6
0000ec060000ecb40000ede20000ee240000ee540000ee760000ee980000
eeba0000eede0000ef060000f0020000f0940000f1900000f21a0000f34a
0000f38c0000f4980000f5400000f5500000f5600000f69c0000f6ac0000
f7600000f8660000f8dc0000fa140000fade0000fbfc0000fc980000fcc8
0000fcea0000fd0c0000fd300000fd600000fe3a0000fe660000ffaa0000
ffba0000ffca0001000c0001001c0001013c00010210000102c0000102f4
0001044c000104b6000104c60001057600010586000105d2000106820001
0692000108240001095600010a1c00010b5600010c7200010d2800010d38
00010d4800010d5800010da200010db200010dc200010dd200010ec80001
0fd400010fe400011056000110ec0001115e000111ec0001129a0001135a
000113fa000115200001166c0001175a0001176a000118900001196c0001
19b800011a6600011a7600011c0c00011d4000011df200011f0000011ff2
0001209600012162000121d2000121e20001222c0001223c0001224c0001
22a4000122b4000123d2000123e20001245a000124ec0001255e000125f2
000126a6000127680001280a00012910000129f800012ab000012ad40001
2bde00012c0a00012d1600012d2600012d3600012d4600012d5600012e6e
00012f4600012ff8000130260001317e000131f600013252000132b00001
32de0001345e0001346e000135d2000139de00013a0800013a3200013a5c
00013a8600013ab000013ada00013b0400013b2e00013b5800013cb60001
3daa00013e7600013f3e00013fca0001400000014012000140240001409e
0001411a000141fa000142d4000143880001443a0001452e000146240001
46b20001478200014820000148c0000149c200014ab600014b9c00014bc0
00014be200014c1000014c3200014c6200014c8600014cac00014cd00001
4d0000014d2400014d4a00014d6e00014da400014dd600014dfc00014e20
00014e4600014e6a00014e9000014eb400014eda00014efe00014f3e0001
4f7000014f9200014fb400014fe2000150100001503c0001505e0001509c
000150c0000150f00001511400015146000151780001519c000151c00001
51fe000152300001525a0001527e000152a0000152c4000152d600015320
0001534a00015374000153e4000154f40001558c0001564a0001568c0001
5708000157ba000157ee0001584a0001589c00015962000159ae000159e4
00015a1000015a4a00015a8000015ad200015b2400015b6800015c4e0001
5ce600015dd400015e1800015ebc00015f2000015fda0001606000016112
0001618800016202000162c20001637c000163fa000165060001656a0001
65ec000166a20001675e0001682c0001693800016a1a00016b2400016bdc
00016c4e00016d3400016e1000016ed200016fa000017070000170b60001
7132000172340001724a00017288000172d60001730a0001736000017426
0001744a0001747c000174ea0001756600017596000175c4000176000001
76220001764a00017684000176c4000176fe000177560001777a000177b4
000177e000017802000178380001785c00017888000178ac000178da0001
79080001794000017978000179a400017a0200017a3400017a5600017a78
00017a9a00017abc00017bc400017bec00017c5600017cae00017d120001
7d9400017e3600017f7c0001805400018080000180f80001822a000182ba
00018306000183f40001843a0001850e00018596000185e40001867a0001
87420001884a0001899600018a2a00018ad600018ba400018c7000018d62
00018e1a00018e7a00018f9c0001906e000190f0000191e0000192480001
935c000194740001954a00019572000195ae000196080001966a000196ba
000197f00001981a000198440001986e00019898000198c2000199720001
9a6000019af600019b2200019bfa00019c2400019d4400019d8a00019dd0
00019e1400019e5800019e8200019fdc0001a0800001a1b40001a1fe0001
a24a0001a2740001a2ba0001a2f20001a32a0001a4560001a5b00001a696
0001a7a60001a9120001aaa80001abc80001ad140001ae440001afc40001
afee0001b0180001b0420001b06c0001b0960001b0c00001b0ea0001b114
0001b13e0001b1680001b1920001b1bc0001b1e60001b2100001b23a0001
b2640001b4440001b56a0001b66a0001b7fe0001b8fc0001b9200001b942
0001b9660001b9880001b9c60001b9fa0001ba2a0001ba4e0001ba820001
bab60001badc0001bb000001bb400001bb720001bb9e0001bbca0001bbf6
0001bc180001bc3c0001bc5e0001bc8a0001bcb80001bcdc0001bcfe0001
bd220001bd440001bd680001bd8a0001bdba0001bde60001be120001be3a
0001be5e0001be800001bea40001bec60001beea0001bf0c0001bf300001
bf520001bf760001bf9e0001bfc20001bfe40001c0100001c0320001c134
0001c1460001c1560001c1660001c1900001c39e0001c3ae0001c3e80001
c4220001c45e0001c49a0001c4cc0001c4fe0001c5400001c57e0001c5b2
0001c5e80001c61a0001c6560001c69e0001c7180001c7480001c77a0001
c7ac0001c7de0001c8120001c8420001c8720001c8a20001c8d20001c908
0001c93c0001c9700001c9a40001c9de0001ca0a0001ca360001ca620001
ca8e0001cb5a0001cc720001cd180001cdd80001ce080001ce380001ce64
0001ce900001cf240001cfd20001cffe0001d02a0001d0c40001d1980001
d1c80001d1f80001d3600001d4d60001d5c20001d6de0001d7120001d746
0001d77a0001d7ae0001d8d40001da360001db200001dc320001dc5e0001
dc8a0001dcb60001dce20001ddb60001deb40001dec40001ded40001df00
0001df2c0001df580001df840001e0940001e21e0001e2d60001e4440001
e4700001e49c0001e4c80001e4f40001e5200001e54c0001e5780001e5a4
0001e6ea0001e71a0001e74a0001e77a0001e8e60001ea8a0001ea9a0001
eaaa0001eb520001ec220001ec780001ecf00001edc00001eecc0001ef80
0001f0720001f13c0001f23a0001f2660001f2980001f2a80001f36e0001
f44e0001f5220001f6240001f7400001f7500001f7600001f7960001f960
0001f9960001f9cc0001fa060001fa400001fa7a0001fab40001faf20001
fb300001fbea0001fcce0001fd060001fd3e0001fd700001fd9c0001fdca
0001fddc0001fe0a0001fe1c0001fe460001fe720001fe840001feb00001
fec20001ff2e0001ff9a0001ffac000200180002002a0002008600020098
000200aa000200bc000200ce000200e0000200f200020104000201160002
017200020184000201e0000201f20002020400020216000202280002023a
0002024c0002025e000202700002028200020294000202a6000202b80002
02ca000202dc000202ee00020300000203280002035000020378000203a0
000203c8000203fe00020424000204520002048e0002054e000206a40002
0854000209a400020b5400020d8200020ea600020fce000211ba00021380
0002157000021760000219b800021b9000021d8e0002204c000222360002
248e00022680000227b40002297800022aae00022bd600022ce400022e36
00022f1600022ff6000230f6000231f200023340000234860002359c0002
36d6000237fa0002398c00023ac000023c6600023d8200023e9000024048
00024292000244860002462c000247dc0002492a00024b5c00024c4c0002
4daa00024e9400024f3c00024f5200024fbc00025032000250fc00025198
0002522e000252f000025338000254800002552600025672000257e60002
597a00025aae00025b5800025c7c00025dd000025e1800025efa00026032
0002607600026136000261d6000262940002636c000264040002655e0002
6678000267b20002692c00026b1400026c6a00026dd200026f5a000270fa
0002721a00027390000275b80002764a000276de000277d2000278960002
78ce000279be00027af800027b6c00027c2e00027c5a00027d3c00027e66
00027eba00027f7c000280d8000281be0002824200028396000283e80002
84f0000286240002869000028750000287e6000288a8000288f000028934
00028974000289aa000289ba000289ca000289da000289ea00028a640002
8ade00028c6400028e0600028efa00028ff8000290e6000291dc0002925e
000292d6000292e6000293940002946a00029542000296280002970a0002
97cc0002989e0002990c0002991c00029a0000029aa600029b8000029c28
00029c6e00029cb800029ce800029d2000029d5000029d9600029e100002
9e4000029e7000029ea600029edc00029f1000029f4400029f7800029fac
0002a0580002a1360002a19a0002a21a0002a3c40002a3f60002a42a0002
a4c20002a5300002a5620002a5960002a5c40002a5d40002a5fc0002a6e2
0002a75c0002a8880002a97e0002ab360002ac4c0002ad660002aed40002
aefa0002b0b40002b16c0002b2600002b4480002b4d60002b56a0002b5b6
0002b62c0002b66e0002b75e0002b7a00002b7b20002b7d20002b8120002
b8520002b88e0002b8ca0002b8f60002b9220002b94e0002b97a0002b9a6
0002b9d20002ba160002ba5a0002ba980002bad00002bb000002bb300002
bb660002bb9c0002bbcc0002bbfc0002bc2c0002bc600002bcac0002bcf8
0002bd4a0002bd9c0002bdd00002be040002be460002be880002bec00002
bef80002bf3c0002bf800002bfb80002bff00002c0280002c0600002c092
0002c0c40002c0f60002c1280002c15e0002c1940002c1ca0002c2000002
c2300002c2600002c2900002c2c00002c2f00002c3200002c3500002c380
0002c3ba0002c3f40002c42e0002c4680002c4b00002c4f80002c5300002
c5680002c59c0002c5d00002c6140002c6580002c6880002c6b80002c6e8
0002c7180002c74c0002c7800002c7b80002c7f00002c8280002c8600002
c8960002c8cc0002c9020002c9380002c9640002c9900002c9c20002c9f4
0002ca360002ca780002caac0002cae00002cb1c0002cb580002cba20002
cbec0002cc360002cc800002ccc00002cd000002cd400002cd800002cddc
0002ce380002ce940002cef00002cf280002cf600002cf980002cfd00002
d0040002d0380002d06c0002d0a00002d0d40002d1080002d13c0002d170
0002d1a40002d1d80002d20c0002d2400002d2740002d2a80002d2f20002
d33c0002d3860002d3d00002d4100002d4500002d48e0002d4ce0002d506
0002d53e0002d5760002d5ae0002d5da0002d6060002d63a0002d66e0002
d74e0002d83a0002d8fa0002d9ca0002da100002da560002da9c0002dae2
0002db1a0002db520002db840002dbb60002dbf00002dc2a0002dc640002
dc9e0002dcde0002dd1e0002dd5c0002dd9a0002dde00002de260002de6c
0002deb20002def00002df2e0002df6c0002dfaa0002dfe20002e01a0002
e0520002e08a0002e0ba0002e0ea0002e11a0002e14a0002e1900002e1d6
0002e21c0002e2620002e2a00002e2de0002e31c0002e35a0002e3980002
e3d60002e4140002e4520002e49a0002e4e20002e52a0002e5720002e5b2
0002e68e0002e6cc0002e70a0002e74c0002e81a0002e8640002e8b40002
e8e40002e9140002e9500002ea6c0002eaba0002eb0e0002eb420002eb76
0002ebbe0002ec0a0002ec520002eca60002ecda0002ed0e0002edc20002
ee7a0002eeaa0002eeda0002ef140002ef4e0002ef7a0002efa60002efd2
0002effe0002f02e0002f05e0002f0920002f0c60002f1b00002f2a80002
f2d40002f3000002f35a0002f3b40002f3e00002f40c0002f43c0002f560
0002f5a00002f6c60002f7fa0002f8800002f91c0002f96a0002fa360002
fc900002fe0e0002fe4a0002fe720002fedc0002ff6c0002ff8c0002ffe4
000300840003010600030118000301a80003032400030336000303a60003
03c80003041a0003046c000304be000305100003055a000305a4000305ee
0003063800030682000306cc000307160003076000030832000309020003
09360003096a000309ca00030a3200030a9200030afa00030b7400030bec
00030c9a00030d4600030e1600030ec400030f2c00030f84000310380003
10bc00031120000311800003124e0003136a000313d6000313fe00031424
0003144a0003147000031496000314bc000314ea000315180003153e0003
156200031588000315d0000315f60003161a00031648000316760003169c
000316c2000316f00003171e000317440003176a00031790000317b60003
17e400031812000318460003187a000318a0000318c4000318ea0003192c
00031952000319760003199c000319c2000319e800031a0c00031a340003
1a5c00031b1e00031bf400031c2800031c5c00031c9000031cc400031cf0
00031d1a00031d4000031d6600031d8c00031db000031dde00031e0c0003
1e3000031e5600031e8c00031ed800031f0600031f3400031f6200031f90
00031fb600031fdc00032002000320280003204e000320740003209a0003
20be000320e400032108000321360003216400032192000321c0000321e8
0003220e000322360003225c00032284000322aa000322d2000322f80003
231e00032342000323680003238c000323b2000323d6000323fc00032420
000324580003248c000324ba000324e80003250e00032532000325560003
257a000325a2000325c8000325f0000326160003264c00032680000326a6
000326cc000326f00003271400032742000327700003279e000327cc0003
280000032834000328680003289c000328ca000328f80003292000032946
0003297000032998000329be000329e200032a0800032a2c00032a520003
2a7800032a9e00032ac400032aea00032b0e00032b3600032b5c00032b82
00032ba600032bcc00032bf000032c1400032c3800032c6600032c940003
2cc200032cea00032d1e00032d5000032e8e00032ed000032ef600032f1c
00032f4200032f6800032f9000032fb800032fde00033004000330460003
3080000330be000330fc00033156000331b0000331f80003324000033266
0003328c000332b2000332d8000332fe0003332400033364000333a40003
33e80003342c0003345600033480000334a6000334cc000334f200033518
00033540000335680003358e000335b4000335f4000336340003367c0003
36c4000336f20003372000033762000337a4000337d20003380000033828
0003385000033878000338a0000338d60003390c0003394c0003398c0003
39ce00033a1000033a3e00033a6c00033aa800033ae400033b0a00033b30
00033b5600033b7c00033ba400033bcc00033c0800033c4400033c7a0003
3cb000033cf800033d4000033d6600033d8c00033db200033dd800033e00
00033e2800033e4e00033e7400033eac00033ee200033f1200033f4e0003
3f7400033f9a00033fc200033fea000340120003403a0003406c0003409e
000340da0003410a0003413a0003416a000341a8000341e6000342200003
425c00034280000342a4000342c8000342ec00034310000343340003435a
00034380000343a4000343c8000343ec00034410000344360003445c0003
4492000344c8000344fe000345340003456c000345a4000345da00034610
00034664000346b60003470e00034766000347de00034856000348be0003
49260003495e00034996000349ce00034a0600034a4000034a7a00034ab2
00034aea00034b3e00034b9200034bf800034c5e00034cb400034d0a0003
4d7000034dd600034e0e00034e4600034e8000034eba00034ef400034f2e
00034f7200034fb60003500a00035056000350b600035116000351760003
51d80003522c00035290000352b4000352d80003530c0003533000035364
00035388000353bc000353e2000354080003543a00035482000354a80003
551400035554000355c00003562a000356d0000357060003572c00035762
00035786000357bc000357f00003583000035868000358aa000358d00003
595a000359e800035ab200035ad800035afe00035b2800035b5200035b78
00035ba200035bc800035bee00035c2800035c6a00035cf200035d7e0003
5e4a00035e6e00035e9200035eba00035ee200035f0800035f2e00035f52
00035f7a00035fa000035fc600036002000360440003608c000360fa0003
616600036194000361cc000361f20003622a0003625000036288000362be
000362f60003632e000363660003638c000363ba0003642a0003648e0003
64c2000364ee000365520003657e000365c6000366300003668a000366d0
000366fa0003673e000367980003681c0003687c000368e0000369480003
69b600036a2000036a5c00036a9600036b1600036b9600036bd400036c28
00036ca800036d2a00036dae00036e4a00036e7c00036ed600036f2c0003
6f7a0003701e00037078000370d20003713c0003719e0003721a000372ca
0003732c000373a800037428000374a40003752e00037560000375880003
760e0003768c000376b4000376dc0003771800037772000377f400037870
00037922000379c800037a8000037afe00037b8400037c0200037c6a0003
7cd600037d1400037d6000037de600037e6600037ed40003803a0003812c
000381f2000382b600038342000383d80003842a000384ba000385ba0003
86b2000386de000387080003873400038760000388800003896600038a4c
00038af600038b2200038b4c0001000007f2008c00100065000800020010
004000550000040e06ba0003000200000046034e00010000000000000032
000000010000000000010006003200010000000000020004003800010000
000000030015003c0001000000000004000b00510001000000000005000c
005c0001000000000006000b00680001000000000007002f007300030001
04030002000e00a20003000104030004001c00b00003000104050002000a
00cc0003000104050004001800d60003000104060002000600ee00030001
04060004001400f400030001040700020008010800030001040700040016
01100003000104080002000c01260003000104080004001a013200030001
040900000064014c0003000104090001000c01b000030001040900020008
01bc0003000104090003002a01c40003000104090004001601ee00030001
040900050018020400030001040900060016021c0003000104090007005e
02320003000104090008001e02900003000104090009001c02ae00030001
0409000a07d402ca000300010409000b00460a9e00030001040a0002000e
0ae400030001040a0004001c0af200030001040b000200120b0e00030001
040b000400200b2000030001040c000200080b4000030001040c00040016
0b4800030001040e000200100b5e00030001040e0004001e0b6e00030001
0410000200120b8c000300010410000400200b9e00030001041300020006
0bbe000300010413000400140bc40003000104140002000e0bd800030001
04140004001c0be6000300010415000200140c0200030001041500040022
0c160003000104160002000e0c380003000104160004001c0c4600030001
0419000200140c62000300010419000400220c7600030001041b0002000a
0c9800030001041b000400180ca200030001041d000200060cba00030001
041d000400140cc000030001041f0002000a0cd400030001041f00040018
0cde0003000104240002000c0cf60003000104240004001a0d0200030001
042a000200080d1c00030001042a000400160d2400030001042d0002000a
0d3a00030001042d000400180d4400030001080a0002000e0d5c00030001
080a0004001c0d6a0003000108160002000e0d860003000108160004001c
0d94000300010c0a0002000e0db0000300010c0a0004001c0dbe00030001
0c0c000200080dda000300010c0c000400160de2a92032303034204d6963
726f736f667420436f72706f726174696f6e2e20416c6c20726967687473
2072657365727665642e5461686f6d61426f6c644d6963726f736f667420
5461686f6d6120426f6c645461686f6d6120426f6c6456657273696f6e20
332e31345461686f6d612d426f6c645461686f6d61206973206120747261
64656d61726b206f66204d6963726f736f667420436f72706f726174696f
6e2e004e006500670072006500740061005400610068006f006d00610020
004e00650067007200650074006100740075010d006e00e9005400610068
006f006d0061002000740075010d006e00e9006600650064005400610068
006f006d006100200066006500640046006500740074005400610068006f
006d006100200046006500740074038803bd03c403bf03bd03b100540061
0068006f006d00610020038803bd03c403bf03bd03b100a9002000320030
003000340020004d006900630072006f0073006f0066007400200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
007200690067006800740073002000720065007300650072007600650064
002e005400610068006f006d00610042006f006c0064004d006900630072
006f0073006f006600740020005400610068006f006d006100200042006f
006c0064005400610068006f006d006100200042006f006c006400560065
007200730069006f006e00200033002e00310034005400610068006f006d
0061002d0042006f006c0064005400610068006f006d0061002000690073
00200061002000740072006100640065006d00610072006b0020006f0066
0020004d006900630072006f0073006f0066007400200043006f00720070
006f0072006100740069006f006e002e004d006900630072006f0073006f
0066007400200043006f00720070002e004d006100740074006800650077
0020004300610072007400650072005400610068006f006d006100200069
00730020006f006e00650020006f00660020004d006900630072006f0073
006f00660074002700730020006e00650077002000730061006e00730020
007300650072006900660020007400790070006500660061006300650020
00660061006d0069006c006900650073002e00200049007400200063006f
006e007300690073007400730020006f0066002000740077006f00200057
0069006e0064006f00770073002000540072007500650054007900700065
00200066006f006e00740073002000280072006500670075006c00610072
00200061006e006400200062006f006c00640029002c00200061006e0064
00200077006100730020006300720065006100740065006400200074006f
002000610064006400720065007300730020007400680065002000630068
0061006c006c0065006e0067006500730020006f00660020006f006e002d
00730063007200650065006e00200064006900730070006c00610079002c
00200070006100720074006900630075006c00610072006c007900200061
007400200073006d0061006c006c002000730069007a0065007300200069
006e0020006400690061006c006f006700200062006f0078006500730020
0061006e00640020006d0065006e00750073002e000d000a000d000a0053
0069006e0063006500200074006800650020005400610068006f006d0061
007300200061007200650020005400720075006500540079007000650020
0066006f006e00740073002c00200074006800650079002000630061006e
00200062006500200072006f0074006100740065006400200061006e0064
0020007300630061006c0065006400200074006f00200061006e00790020
00730069007a0065002c00200061006e006400200061006e00740069002d
0061006c0069006100730065006400200062007900200074006800650020
0072006100730074006500720069007a006500720020006200750069006c
007400200069006e0074006f0020004d006900630072006f0073006f0066
0074002000570069006e0064006f0077007300200039003500200061006e
00640020004d006900630072006f0073006f00660074002000570069006e
0064006f007700730020004e005400200034002e0030002e002000540068
006500730065002000660065006100740075007200650073002000670069
00760065002000740068006500200066006f006e00740073002000730069
0067006e00690066006900630061006e007400200061006400760061006e
007400610067006500730020006f0076006500720020006200690074006d
00610070002000730079007300740065006d00200066006f006e00740073
002000730075006300680020006100730020004d0053002000530061006e
0073002000530065007200690066002e000d000a000d000a005400680065
0020004c006100740069006e002c00200047007200650065006b00200061
006e006400200043007900720069006c006c006900630020006300680061
007200610063007400650072007300200077006500720065002000640065
007300690067006e0065006400200062007900200077006f0072006c0064
002000720065006e006f0077006e00650064002000740079007000650020
00640065007300690067006e006500720020004d00610074007400680065
00770020004300610072007400650072002c00200061006e006400200068
0061006e0064002d0069006e007300740072007500630074006500640020
006200790020006c0065006100640069006e0067002000680069006e0074
0069006e00670020006500780070006500720074002c0020004d006f006e
006f00740079007000650027007300200054006f006d0020005200690063
006b006e00650072002e0020005400680065002000410072006100620069
0063002c002000480065006200720065007700200061006e006400200054
006800610069002000630068006100720061006300740065007200730020
0077006500720065002000640065007300690067006e0065006400200062
007900200074006800650020004d006f006e006f00740079007000650020
00440072006100770069006e00670020004f006600660069006300650020
0074006f00200063006f006d0070006c0065006d0065006e007400200043
006100720074006500720027007300200069006e0069007400690061006c
002000640065007300690067006e0073002e0020005400610068006f006d
0061002000730065007400730020006e006500770020007300740061006e
0064006100720064007300200069006e002000730079007300740065006d
00200066006f006e0074002000640065007300690067006e002e00200049
007400200069007300200069006400650061006c00200066006f00720020
00750073006500200069006e0020005500730065007200200049006e0074
0065007200660061006300650020005300630065006e006100720069006f
007300200061006e00640020006f00740068006500720020007300690074
0075006100740069006f006e007300200072006500710075006900720069
006e00670020007400680065002000700072006500730065006e00740061
00740069006f006e0020006f006600200069006e0066006f0072006d0061
00740069006f006e0020006f006e00200074006800650020007300630072
00650065006e002e0068007400740070003a002f002f007700770077002e
006d006900630072006f0073006f00660074002e0063006f006d002f0074
00790070006f006700720061007000680079004e00650067007200690074
0061005400610068006f006d00610020004e006500670072006900740061
004c0069006800610076006f006900740075005400610068006f006d0061
0020004c0069006800610076006f00690074007500470072006100730054
00610068006f006d006100200047007200610073004600e9006c006b00f6
007600e90072005400610068006f006d00610020004600e9006c006b00f6
007600e9007200470072006100730073006500740074006f005400610068
006f006d0061002000470072006100730073006500740074006f00560065
0074005400610068006f006d0061002000560065007400480061006c0076
006600650074005400610068006f006d0061002000480061006c00760066
006500740050006f00670072007500620069006f006e0079005400610068
006f006d006100200050006f00670072007500620069006f006e0079004e
00650067007200690074006f005400610068006f006d00610020004e0065
0067007200690074006f041f043e043b0443043604380440043d044b0439
005400610068006f006d00610020041f043e043b0443043604380440043d
044b043900540075010d006e00e9005400610068006f006d006100200054
0075010d006e00e9004600650074005400610068006f006d006100200046
00650074004b0061006c0131006e005400610068006f006d00610020004b
0061006c0131006e004b007200650070006b006f005400610068006f006d
00610020004b007200650070006b006f011100e20323006d005400610068
006f006d00610020011100e20323006d004c006f00640069006100540061
0068006f006d00610020004c006f006400690061004e0065006700720069
00740061005400610068006f006d00610020004e00650067007200690074
0061004e00650067007200690074006f005400610068006f006d00610020
004e00650067007200690074006f004e0065006700720069007400610054
00610068006f006d00610020004e00650067007200690074006100470072
00610073005400610068006f006d0061002000470072006100730000ba00
54ffc0012bb20c0d36b9ffc0012cb2252936b9ffc0012cb2142136b9ffc0
012cb309103640b80128b21a1a36b9ffc00128b30d0d3640b80125b34646
3640b80125b21f2036b9ffc00125b21b1c36b9ffc00125b2151636b9ffc0
0125b20f1136b9ffc00125b20a0c36b9ffc00122b2272736b9ffc00122b2
1e1e36b9ffc00122b30a0a3640b80122b30c0c3640b80121b317193640b8
0103b2171736b9ffc00103b2191a36b9ffc20115b21e1f36b9ffc20115b2
0a1436b9ffc20113b20a0a36b9ffc10116b2535536b9ffc10116b24e4f36
b9ffc10116b2454536b9ffc10116b2434336b9ffc10116b2292936b9ffc1
0116b324263640b80116b2191936b9ffc00116b2161636b9ffc00116b211
1136b9ffc00116b2090d36b9ffc00119b2313136b9ffc00119b32c2c3640
b80119b21f2136b9ffc00119b21d1e36b9ffc00119b2171736b9ffc00112
b316163640b80112b2181936b9ffc00112b24e4e36b9ffc00112b2454736
b9ffc00112b2252636b9ffc00112b2111136b9ffc00112b20c0d36b9ffc0
011fb20b0b36b9ffc0011fb20d0d36b9ffc0011fb2111136b9ffc0011fb2
131336b9ffc0011fb2161636b9ffc0011fb2272736b901270101b2321f40
b80106b2121236b9ffc00102b2282936b9ffc00101b327293640b80102b3
17173640b80101b2171736b9ffc00124b2181836b9ffc00124b20f1036bd
010e01050011001fffc10105b30d103640b80104b311113640b80104b209
0a36b9ffc00104b2191936b9ffc00104b23c3d36b9ffc00104b24a4a36b9
ffc00104b357593640b8012fb2090b36b9ffc10108b2091a36b9ffc10109
b2404336b9ffc10109b23c3d36b9ffc10109b22e3036b9ffc10109b2272a
36b9ffc10109b2222436b9ffc10109b21a1a36b9ffc10109b2141536b9ff
c10114b2242436b9ffc10114b2262736b9ffc10114b30c13360f410e0133
003f0133005f01330003001f011100010110010f0034001f010fb204501f
b9ffc00100401f0b1836ffe91f1feaeb1a1f30eb01e9141a1fefec101fee
ec101f00f640f602b8ff804018f60b0c36f6011a1fedec0b1f10f08ff002
40ec70ecbfec03b8ffc0b3fa101436b8ffc0403af9121436e7e61a1fe635
1a1f40da2224363fd801d1d73f1fd6d71a1f80d501d5d71a1f60d770d702
cac92a1fcac93938ca010bc844c802b0dc01b8ffc0b6dc09103670d201b8
ffc04085d20a1336248c548c748c848ca48cb08cc48c0740c30137b9111f
69b9111fc1b9111fbfb9111fbeb9111fbdb9111fbcb9111fbb56111fbab9
1b1fb5b9111fb6b91a1fb7b91a1fb8b91a1fb9351a1f3c3f111f3d3f111f
3e3f111f443f111f433f111f423f151f413f151f403f111f3f35111f3233
141f3335141f3534141f3435141fa03501b8ffc04021350b103640713a3a
36df710140710913368f70b07002df6f01406f121436d06e01b8ffc04016
6e09103670669066b066034067090f369f6501b06401b8ffc0403b640910
3640a0012095b095023f92015f8f7f8f02208dc08d02206b406b02006801
006801006850686068037f6101305b405b7f5b805b04389c111fb8ffc040
f39c0c103640c50140b301b1141a1fb014151faf14111fae14111fad1411
1fac140b1fab140e1faa140e1f2b2a111f702a012c2d0e1f2d140d1f9e20
431f1f141e1f2120431f20143c1fb41a241f9f1a651f1b1a321f7f1a8f1a
021a14221fc713481f15142f1f1314201f30124012501290120470128012
d012031214181f1114181f00140150146014701403300e010006010f0101
0f012f013f016f017f01af01bf01cf01ef01ff010a0f00010f002f003f00
6f007f00af00bf00cf00ef00ff000a0a09371f0f020f0302cf02cf03ff02
ff03040a09371f09082a1f04052a1f0203261f0c0d390504390302390100
39500501b801ff01b0124b004b5442b013014b004b5342b109322b4bb064
5242858d8d1db0964b5258b0801d59b808004b5458b001b0018e59b0084b
5358b001b0018e59002b2b2b2b2b2b2b2b73742b73747374b00345b00645
6861b006234473b00345b00e456861b00e234473b00e45b00f456861b00f
234401b0144568b014234473742b2b74752b2b2b2b752b2b2b2b2b2b2b2b
2b732b2b2b2b2b2b2b2b2b73732b2b73737373747373737373732b73732b
732b752b75732b752b002b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b7373012b732b730073732b2b732b732b2b732b012b
2b2b2b0073732b2b2b732b2b2b732b2b2b2b2b74732b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b000000>
[16157 16357 16253 16101 15865 16229 16077 16345 15421 15861 16081 16209 16205
16253 6869 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> Tahoma-Bold AddT42Char 
1 2910 18 <00010076febc03e606140003003f40173903010300010138020314020203
020301001809103702b8ffe8b5091037000002b8ffc0b3090d37022f2b33
2f2b2b003f2f313087052e2b877dc4015d0101210103e6fdaffee1024e06
14f8a8075800>Tahoma-Bold AddT42Char 
1 7294 38 <00010043ffe3051505ee002d00a24021040a0a2a140a1b2a3d18311c4d18
401c5816571e7904740b7c290d23680e103711b8ff84b30e103702b8ffb6
4009090d37044a090d371db8ffc0402c090d371740090d372f0d2027022f
0d2027026f0d010d0d14357a0601060260270127272035750001000a0d28
b8ffc04012090f3728282f0f2f402f5f2f031a1503662e10f4ed5d11332f
2b3c003f5ded332f5d3f5ded332f5d5d5d31302b2b2b2b2b2b5d05200011
100021321617161617112326262726262322060706061514161716163332
363736363733110606070606031cfeb1fe76018b014f598e41337825261b
5234347d4451873d38474a3c3a8f474a862e324c1c22296c39467a1d0195
016f016201a514120f3413fe9d184320202d333f39c2848bbd3a3832311e
1f4019fea21331111516>Tahoma-Bold AddT42Char 
1 7772 40 <0001009a0000048905d1000b004c40310835300540056005700504050500
04350103093500080006400602060206000b100b020b0b0d200d400d0205
091400640c10f6fd325d11332f5d33332f5d003fed3fed12392f5ded3130
3311211121112111211121119a03effd850249fdb7027b05d1fee4fefbfe
e4fe88fee400>Tahoma-Bold AddT42Char 
1 8838 47 <0001009a0000047c05d100050029b602030435010800b8ffc0400e091037
0000070f0701041401640610f6ed5d11332f2b003fed3f31302121112111
21047cfc1e0176026c05d1fb4b00>Tahoma-Bold AddT42Char 
1 8912 48 <0001009a0000068b05d1000c00f9b9000affae403c0e103705780e103702
780e1037050a0203090a041a042f043f04400460047004070404070b0903
010708090a0b0305021400650e0f0e400e500e0305b8ffc0b70910370512
07640d10f6ed2b5d10f6ed111739003f3c3f3c12392f5d1217392b2b2bb1
0602435458b50a400e103702b8ffc0b30e103705b8ffc0b30e10370ab8ff
c0400d090d370240090d370540090d37002b2b2b2b2b2b31301b404b0f02
0f05000a034f024f05024f024f05720aaf02af05a00a0652035c045f0b60
036f046a0a6f0b70037f047a0a7f0b0b0b0a090b1b0a190b2c0b30033d04
390a3d0b40034f044f09490a0d3130015d5d005d5d715921211101230111
211121010121068bfe8cfef1fffef1fea001af014a014901af03dbfd8302
7dfc2505d1fd2102df00>Tahoma-Bold AddT42Char 
1 12836 68 <00020032ffe2044d0483000c002d007c4014022a132a5a055a196a056a19
74087222752a0926b8ffd6b50c1037013c1cb8ffc040370c0d371c1c1328
1f242f247f248f24042424203f28042d080a3f130a1d002d1a2c6f2f0f2f
011610090b370f251f25022525071a16702e10f6ed332f5d2b5d10f6fd32
32003fed3f3fed332f5d1112392f2bed31302b5d01350606070606151416
333236170606070606232226353436373624373534262322060723113636
33200415112102f1596e352e3355532e60272439302f595095c5645e5f01
089889893ea64f1e34e87601220109fea40125ea090d131041364f3b2a88
1e30181718c8987d9a2d2e240a065d472d23010f0f29c1c6fd04>Tahoma-Bold AddT42Char 
1 13504 71 <00020036ffe104830614001600230043402d3b0d3b1d4c0d4c1d70130523
2a0c1037032a0c103715001b41110401082142080a1417011a006f251e1b
0b702410f6ed10fdfd3232003fed3f3fed3f31302b2b5d21213506060706
062322021134363736363332161711210111262623220615141633323604
83fea22257212a5239c0e04c433dae6158714b015efea21a541e7e7f6571
2e5e751c40101414013e010a93d8504955252701defb2202270d11b09ea6
9424>Tahoma-Bold AddT42Char 
1 13686 72 <00020034ffe204920486001e002500674023250d340d41024f04410d5324
73027a15081a2a0c1037253c0b0b00223e0604a0180118b8ffc0b30e1037
18b8ffc04019090b3718181140000919191f1a0a71270f2701250b1a0370
2610f6fd325d10f4ed332f003fed332f2b2b5d3fed12392fed31302b5d05
200011100021200011152116161716163332363736363733110606070606
1326262322060702c5fec2fead013c011c01020104fd0105382e2d78473d
76312b4917252b473e39791d0361646673061e0130011901130148feeafe
fd7e4e691f1f1b1b16132c11fedf111d0f0f1102e06f747a6900>Tahoma-Bold AddT42Char 
1 14090 74 <00020036fe5904830482000f0039007040513c064b06401343247002791d
7a1e703608292a0c1037180c171837182a0d10370f2a0c10373905044134
040d422b07101a201a301a701ad01a051a1a2141160d3700281a106f3b40
19011919071b2e703a10f6ed332f5d10f6fd3232003fed332f5d3fed3fed
3f31302b2b2b2b5d01112626232206151416171616333236051406070606
232226271133161617161633323637363635350606232202113436373636
33321617372103251a4c267e7f131a19513f2f5b01875a4e4eda8570c94a
291a47242b522b59771e1e183b9b52daed49413eb05f5688380d01530162
01fd0c10a392496527262720c39cda3d3e371d1301190a180a0b0e252223
5f4815343f011c012284d24a474d2c253200>Tahoma-Bold AddT42Char 
1 14512 76 <0002007c000001ee061400030007003b401406400d103706420505020501
08049f055f001a01b8ffc0400e090e3701010908300940095009035d1112
392f2bedf4ed003f3f332fed2b3130212111213721112101e4fea2015e0a
fe8e01720463a0011100>Tahoma-Bold AddT42Char 
1 14998 79 <00010086000001e4061400030027b602010108001a01b8ffc0400e090e37
01010504300540055005035d1112392f2bed003f3f31302121112101e4fe
a2015e061400>Tahoma-Bold AddT42Char 
1 15064 80 <00010086000007240482002b0062402f0620062715201527040713441b21
24000c05181e04190518082b1a006121170b1a0c1b171a1861800cb00cd0
0c030cb8ffc04010090d370c0c2d2c102d2f2d402d602d045d1112392f2b
5df4fd3210ed1139f4ed003f3f3f121739fd3231305d2111342627262623
220607112111342627262623220607112111211536363332161736363332
16171616151105c4060f0f3f39284e2efea0070f0f3f382b5227fea2015e
56985f679c2965b35c4e7c2b2f2f023153722424212320fce40231527324
2421281bfce404637c495262615e653232369578fd25>Tahoma-Bold AddT42Char 
1 15296 81 <00010086000004a2048200160039402402141314340a450a701505100d08
4413040e05010d08011a006f18601801100b1a0d6e1710f6fd325d10f6ed
003f3c3f3fed123931305d21211134262726262322060711211121153636
3332161504a2fea00b0f1244392b5832fea2015e56a363acb6022d448720
26212023fce404637c4952d9ce00>Tahoma-Bold AddT42Char 
1 15430 82 <00020034ffdd04bc0486000b002300254015124009041e40030a0c1b0071
253f2501181b06702410f6ed5d10f4ed003fed3fed313001100021200011
100021200001342627262623220607060615141617161633323637363604
bcfed1feebfeedfecf0131011301140130fe99211d1f4e322f4c201e2422
1b1c54332a571a1f200231feebfec1013f01150118013dfec1fee8648528
2a211d29278867677f26272424242b79>Tahoma-Bold AddT42Char 
1 15596 83 <00020086fe6404d304820010001d005640123501351d4401441d550f630f
7d057d190816b8ffe0b30c10370cb8ffea401e0c10370b060314420e0409
051b410309080c111b00711f0b17071a086e1e10f4fd323210f6ed003f3f
ed3f3fed12393931302b2b5d011000232226271121112115363633321201
34262322060711161633323604d3feefc8547c46fea2015e4da069c3d6fe
9a656b2f5d2d1c432e807c0241fef3feb62628fe2c05ff754252fecafeee
a4941e1efdcb0c0aa700>Tahoma-Bold AddT42Char 
1 15980 85 <0001008600000378046700150063b50c0912000004b8ffc0400c09103704
4412050a05090800b8ffc040110911370000170f171f17020c071a096e16
10f6fd325d11332f2b003f3f3ffd2b322f111239b10602435458b9000cff
c0b2091337002b31301bb9000effe0b2090b3731302b5901232626232206
07112111211536363736363332161703781d144c2e377939fea2015e1855
2326652d112a11031807072016fd100463a11643141721020200>Tahoma-Bold AddT42Char 
2 0 86 <0001003bffe103fd04820039009d401a0f1500321f1510323a1533324432
65156a1a7a1a7238a61f0c1fb8ffe040230c123702200c11372140090b37
172b0e3404001d6f217f21022121283f1d04a0040104b8ffc0b30e103704
b8ffc0400f090b3704040b3f00092020170e1b34b8ffc040140916373434
3b03032b1b70179017a017b01704172f5ded332f11332f2bed12392f003f
ed332f2b2b5d3fed332f5d111217392b31302b2b5d052226271133161617
161633323635342627262627262635343637363633321617112326262726
2623220615141617161617161615140607060601dc7cdd481d194039317b
484a71344b287a2f8485454343c57c76c6441c124e252c6d394c6934572d
7536797d4a4448c31f36240128132e1917212e322728120a170f29a1834b
8534333c2f21fee40e2f11141a342b262c150b151227977d4f8f31353a00
>Tahoma-Bold AddT42Char 
2 330 87 <00010015ffea034a05a4001b005840150b011c010208080d043f0a070518
18143f0009180bb8ffc040200910370b0b1d3f1d4f1d02060a0d1a070f06
1f062003030600031003af0303032f5d335d33fd322f5d11332f2b33003f
fd322f3f33fd32332f31305d052226351123353311211121152111141617
161633323637331506060234d6c38686015e0151feaf020f0e47441c5b12
1e398016b0c8020df40141febff4fe723b58232329180af70f11>Tahoma-Bold AddT42Char 
2 506 88 <0001007dffe1049904630016003b40250b061d067d070313200c10370215
05090501081144050a14011a006f186018010a1a096e1710f6ed5d10f6fd
32003fed3f3f12393931302b5d2121350606232226351121111416171616
3332363711210499fea25b9869a7bb0160091110433c25652b015e7c4c4f
d3d402dbfdd3576e262324241f031c00>Tahoma-Bold AddT42Char 
2 642 89 <00010000000004a104630006009b4010000502050315030203052a020102
0800b8ffc0400c0910370000080f082f0802032f5d11332f2b003f5d3f5d
123939b10602435458b90005ffe0b2091437002b31301b402886018902d4
01db02040601090216011902680205050405061a00010005041a03020300
280d103703b8ffd840140d10370b0004031b0014032a0025033b00350308
3130015d2b2b8710fdc08710fd08c0015d71590101210121131304a1fe6d
fe82fe700170e6e30463fb9d0463fd1902e7>Tahoma-Bold AddT42Char 
1 0 0 <0002010000000700060000030007001d400f060204000602043000400050
0003002f5dcdddcd002fcdddcd3130211121112521112101000600fa8005
00fb000600fa00800500>Tahoma-Bold AddT42Char 
Tahoma-Bold /CharStrings get begin
/space 3 def
/slash 18 def
/C 38 def
/E 40 def
/L 47 def
/M 48 def
/a 68 def
/d 71 def
/e 72 def
/g 74 def
/i 76 def
/l 79 def
/m 80 def
/n 81 def
/o 82 def
/p 83 def
/r 85 def
/s 86 def
/t 87 def
/u 88 def
/v 89 def
end
Tahoma-Bold /Encoding get
dup 32 /space put
dup 47 /slash put
dup 67 /C put
dup 69 /E put
dup 76 /L put
dup 77 /M put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
pop
end
%ADOEndSubsetFont
reset_gvm
/QNZHTM+Tahoma-Bold /Tahoma-Bold findfont ct_VMDictPut
/QNZHTM+Tahoma-Bold*1 
[32{/.notdef}rp /space 14{/.notdef}rp /slash 19{/.notdef}rp /C /.notdef /E 
6{/.notdef}rp /L /M 19{/.notdef}rp /a 2{/.notdef}rp /d /e 
/.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /v 
137{/.notdef}rp]
QNZHTM+Tahoma-Bold nf
QNZHTM+Tahoma-Bold*1 [0 -19.02 -19.02 0 0 0 ]msf
386.52 743.88 mo
(Languages / Compilers)
[-10.8738 -11.3873 -12.1671 -11.9578 -12.1671 -11.3873 -11.9578 -11.2921 -9.78961 -5.58044 -10.9688 -5.58044 
-12.6808 -11.7297 -18.1393 -11.9578 -5.73834 -5.73834 -11.2921 -8.24908 0 ]ysh
328.619 743.88 mo
(Modeling Environments)
[-16.9831 -11.7335 -11.9616 -11.2958 -5.74219 -5.74219 -12.1709 -11.9616 -5.58044 -11.6955 -12.1709 -11.0106 
-5.74219 -8.25287 -11.7336 -12.1708 -18.1431 -11.2959 -12.1709 -7.9104 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 12086 54 <0001004dffe5044205ec0033014c40462f0d29142b2b3902390d361c3527
4a02450a4a0c451c492444275a02560a590f5a18551c5e2465066a136c15
6618651c6628602c6830761c1c7a0e742802282b110e04001a1eb8ffc040
150b0b063b1f1e2f1e7f1e031e1e22341a0271050105b8ffc04021090b37
05400b0b063b05050834000a282b110e042e171e1e0b0c0d0d063b0b152e
b8ffc0400a0914372e0c0b0b023b2eb8ffd4b40d0d023b2eb8ffe8b40f0f
063b2eb8ffeeb40c0c063b2eb8ffe6b40d0d063b2eb8ffd0400f0b0b063b
2e2e350f354f3502040425b8fff440300d0d063b2515a017b0170217100b
0b023b170c0c0c023b170c0d0d023b170e0f0f063b170c0c0c063b170c0d
0d063b17b8ffdcb40b0b063b17b8ffc0b30c1137172f2b2b2b2b2b2b2b2b
5ded2b332f5d11332f2b2b2b2b2b2b2bed2b332f11121739003fed332f2b
2b5d3fed332f5d2b111217395d31305d0522262735331616333236353426
272626272626272626353424333216171523262623220615141617161617
16161514060706060236a2e3640e62f873a4a858604572564d7a2f2e3301
1adb7ddf5f0f47de7a8aaa645f3fb63c9a8e474048b51b4331f85c658970
59701b141a16143e32318557b5f5322eed416181695f701a112b122fbe8b
57aa3b414600>Tahoma AddT42Char 
1 14922 68 <0002003affe103b30478000c00360193b10602435458b9000cffeab40d0d
063b00b8ffea400c0d0d063b00010d0a131f3d01b8ffc0401d0c0c063b10
0101000101010113263f2e040a41133608130a35361f0036b8fff4400b0c
0c063b360c0f0f063b36b8ffe040220b0b063b3636383707190c1010063b
190c0f0f063b190c0c0c063b19160d0d063b19b8ffdcb70b0b063b191938
371112392f2b2b2b2b2bcd1112392f2b2b2bd0c010cd003f3f10ed3fed12
392f5d5d2bed11123911393130002b2b1bb638400c0c023b0cb8ffeab40d
0d023b0db8ffeab40d0d023b00b8ffeab40d0d023b2cb8fff0b31619372e
b8fff0b3090a372bb8ffc0b50e1137013d1fb8ffc0401c0c0d371f1f132e
4f2a012a2a263f2e04000e1336080a41130a1f0036b8fff840490c0c023b
361a351a0f0f023b351a0c0c023b35060d0d023b356f3819100e10371910
090b372b40090b372b2b071b19160f0f023b19200b0b023b191a0c0c023b
19120d0d023b19703710f42b2b2b2bed332f2b2b2b10f62b2b2bfd2b3c3c
003fed3f1133333fed332f5d1112392f2bed2b2b31302b2b2b2b012b5901
110606070606151416333236170606070606232226272626353436373624
37353426272626232206072335363633321617161615112302f843cd3f4b
626c6859903f174d24325d54457c2f2d36626a5e010094282424683741b0
580b34c25f739e3f3d3cbb01130136061513175f5560624d64113d121a1c
342f2e874b74a3302b210824425116170f2725bf0f24242f2e9269fd0400
>Tahoma AddT42Char 
2 2862 76 <0002007f0000015505db00030007012bb106024354584009054406030205
010804b8fffc40260b0b063b040005021010063b050a0f0f063b05040d0d
063b05060c0c063b05040b0b063b0500b8fff2b40f0f063b00b8fff8b50c
0c063b0001b8fff440171010063b01080f0f063b01040d0d063b010c0c0c
063b01b8ffd2b70b0b063b010109081112392f2b2b2b2b2bcd2b2bc62b2b
2b2b2b10c62b003f3f3fed31301b4009054406030205010804b8fffab40f
10023b04b8fffa40260c0c023b049f05020f10023b05040c0c023b056000
080c0c023b001a4f01b001c001d0010401b8ffc0b3090f3701b8fffcb410
10023b01b8fffe401e0f0f023b01020d0d023b01060c0c023b01040b0b02
3b010109084f090109b8ffc0b20b0f372b5d1112392f2b2b2b2b2b2b5ded
2bf42b2bed2b2b003f3f3fed31305921231133372335330148bcbc0dd6d6
045dbbc3>Tahoma AddT42Char 
2 3856 79 <0001008c000001480614000300c1b10602435458b40201010800b8fff2b4
0f0f063b00b8fff8b50c0c063b0001b8fff440171010063b01080f0f063b
01040d0d063b010c0c0c063b01b8ffd2b70b0b063b010105041112392f2b
2b2b2b2bcd2b2b003f3f31301b40160201010800080c0c023b001a4f01b0
01c001d0010401b8ffc0b6090f374f050101b8fffcb41010023b01b8fffe
401b0f0f023b01020d0d023b01060c0c023b01040b0b023b0101050405b8
ffc0b20b0f372b1112392f2b2b2b2b2b5d2b5ded2b003f3f313059212311
330148bcbc061400>Tahoma AddT42Char 
2 6398 86 <00010043ffe5036b047800360198b10602435458401c31111a28041d0021
21253e1d0404040b3e000920110e0d0d063b1131b8ffeab41010063b31b8
ffe6400b0f0f063b310e0d0d063b31b8ffd640230b0b063b313138370328
1a041010063b1a0c0f0f063b1a160d0d063b1a0c0c0c063b1ab8ffe0b70b
0b063b1a1a38371112392f2b2b2b2b2bcdc41112392f2b2b2b2bcd2bc400
3fed332f3fed332f1112173931301b407a38400c0c023b38400b0b023b0a
18062f1a18152f26072923360739234a02451f59025918541f502f690265
1f652d632f7902761f841f84231619141917291429173b143b1706141717
b42b2e142b2b2e752b8b2b8b2e032b2e171404001d9021012121253e1d04
04040b3e000903202b2e17140320061a111b31b8ffc0b309163731b8ffe0
b41010023b31b8fff4b40f0f023b31b8ffee40100d0d023b310c0b0b023b
313138281b1ab8ffc0401c0e15371a120f0f023b1a120d0d023b1a160c0c
023b1a120b0b023b1a2f2b2b2b2b2bed11332f2b2b2b2b2bed1217392f2f
003fed332f3fed332f5d111217395d870e2e2b0e7d10c4007131305d012b
2b5905222627353316161716163332363736363534262726262726263534
36333216171523262623220615141617161617161615140607060601b670
c3400a18413630733e2d6619231f495d2474318074e4bd5dbc400a48b15a
5d804c542a67397c7d39373c971b3c22d3132e1916221510173434434417
09180e259b6e97be2e23c939424e4f4645160b150e1f907c48812e323400
>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/S 54 def
/a 68 def
/i 76 def
/l 79 def
/s 86 def
end
Tahoma /Encoding get
dup 83 /S put
dup 97 /a put
dup 105 /i put
dup 108 /l put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 25{/.notdef}rp /S 13{/.notdef}rp /a 7{/.notdef}rp /i 2{/.notdef}rp 
/l 6{/.notdef}rp /s 140{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
363.06 285.78 mo
(Sisal)
[-9.47327 -3.90375 -7.58835 -8.92966 0 ]ysh
344.04 260.88 mo
344.04 262.02 344.94 262.92 346.02 262.92 cv
347.1 262.92 348 262.02 348 260.88 cv
348 259.8 347.1 258.9 346.02 258.9 cv
344.94 258.9 344.04 259.8 344.04 260.88 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
1 lc
1 lj
10 ml
344.04 260.88 mo
344.04 262.02 344.94 262.92 346.02 262.92 cv
347.1 262.92 348 262.02 348 260.88 cv
348 259.8 347.1 258.9 346.02 258.9 cv
344.94 258.9 344.04 259.8 344.04 260.88 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 10720 50 <00020042ffe1056705f00017002900c540210a0905151a0915155a095515
061e3415022734090a18060d0d063b181578030103b8ffeab40b0b023b03
b8ffe0b40d0d023b03b8ffecb40c0c063b03b8ffecb40d0d063b03b8ffdc
40140b0b063b03672b0f2b1f2b3f2b7f2b040f2b0124b8fff840340d0d06
3b2415770f010f160d0d023b0f160c0c023b0f200b0b023b0f0e1010063b
0f0e0f0f063b0f140d0d063b0f160c0c063b0fb8ffe0b60b0b063b0f662a
10f62b2b2b2b2b2b2b2b5ded2b5d5d10f62b2b2b2b2b5ded2b003fed3fed
5d3130011612151402070606232226272602353412373636333216133426
27262623220607060615101233321204b4555e5c575bf39297f257565c5d
5656f39698f439403a3ba7686ca13e3b3ff6cfcff5052662fedebab5fedc
6368636665630122b7bc011c6663676afd6294e44b4d4d4b4f4ce691fedb
fec90137>Tahoma AddT42Char 
2 418 70 <0001003bffe7038e04770027010cb1060243545840362f103f1002100f17
3f0c04221d2021302102211d3f00090f222229281a06121010063b06160f
0f063b061c0c0c063b06160d0d063b06b8ffe0b70b0b063b060629281112
392f2b2b2b2b2bcd1112392fb00b4b5458b90022ffea3859c0003fedcd5d
12393fed39cd5d31301b400e3b19311b4d19401b5902550a0622b8ffc040
0a0e11023b22400e103721b8ffc040090b0d3710400b0d370fb8ffc04019
0e113710100f400e11023b0f173f0c042121221d3f00090f22b8ffc04026
091d372222295f29011a1b06160f0f023b061a0b0b023b061a0c0c023b06
1a0d0d023b06702810f42b2b2b2bed5d11332f2b3c003fed33332f3fed33
2b332f2b2b2b2b2b31305d59052226272626353436373636333216171523
26262726262322061514163332363733150606070606024473c045454c4f
4242c5715cab430b143f2d276a3192b1ab985ca6400b1c5422304c194748
48db9493d649494f3422d3112c17141eddcac6dd4c3cd30d25090e0f>Tahoma AddT42Char 
2 4074 80 <0001008800000638047c002e01e0b1060243545840181e210a2416074227
164221270421041c0600080f081b082eb8fffcb60c0c063b2e000eb8fffc
b60c0c063b0e0f1ab8fffcb60c0c063b1a1b00b8ffe8400b1010063b0008
0f0f063b00b8fffe400b0d0d063b002a0c0c063b00b8ffd2b70b0b063b00
002f0fb8fff440111010063b0f040d0d063b0f180c0c063b0fb8ffd0b70b
0b063b0f0f2f1bb8fffeb41010063b1bb8fff440110f0f063b1b060d0d06
3b1b020c0c063b1bb8ffccb70b0b063b1b1b302f1112392f2b2b2b2b2b11
392f2b2b2b2b11392f2b2b2b2b2b10cd2b10cd2b10cd2b003f3f3f3f3f3f
10ed10ed113333123931301b403530400c0c023b0523052a1523152a2623
262a391f070a2427191e0716422721041c05000f1b082d080c0c023b2d1a
00160f0f023b00b8fffc400b0d0d023b000c0c0c023b00b8ffea40120b0b
023b00970a241a0e080c0c023b0e1a0fb8fffa40211010023b0f160f0f02
3b0f020d0d023b0f180c0c023b0f1e1a080c0c023b1a1a1bb8fff4b41010
023b1bb8fffe402c0f0f023b1b060d0d023b1b080c0c023b1b060b0b023b
1b97000f100f200f900fb00f050f0f302f20307f30025d1112392f5df42b
2b2b2b2bfd2b32102b2b2b2bed2b113939f42b2b2b2bed2b003f3c3c3f3f
3cfd3c333311333331305d012b5921113426272626232206071616151123
113426272626232206071123113315363633321617363633321617161615
11057c0c13144a3f3a85470103bc0c13144a3f3d863fbcbc4a9157639928
55a25f48762c2d3102864d832528264743112f20fd2102864d832528264c
3bfcbe045d7c4a515a675f622d32339873fd2100>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/O 50 def
/c 70 def
/m 80 def
end
Tahoma /Encoding get
dup 79 /O put
dup 99 /c put
dup 109 /m put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 21{/.notdef}rp /O 3{/.notdef}rp /S 13{/.notdef}rp /a /.notdef 
/c 5{/.notdef}rp /i 2{/.notdef}rp /l /m 5{/.notdef}rp /s 
140{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
386.28 282.54 mo
(Occam)
[-12.0387 -7.84473 -7.84473 -8.9314 0 ]ysh
368.04 260.16 mo
368.04 261.24 368.94 262.14 370.02 262.14 cv
371.1 262.14 372 261.24 372 260.16 cv
372 259.02 371.1 258.12 370.02 258.12 cv
368.94 258.12 368.04 259.02 368.04 260.16 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
368.04 260.16 mo
368.04 261.24 368.94 262.14 370.02 262.14 cv
371.1 262.14 372 261.24 372 260.16 cv
372 259.02 371.1 258.12 370.02 258.12 cv
368.94 258.12 368.04 259.02 368.04 260.16 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 9906 47 <00010097000003f605d100050055b602030435010800b8ffc0b30a113700
b8ffbe400a0b0b063b000007041401b8fffeb40d0d023b01b8fff4400b10
10063b010b0d0d063b01b8ffc8b60b0b063b01640610f62b2b2b2bed1133
2f2b2b003fed3f313021211133112103f6fca1c6029905d1fadf>Tahoma AddT42Char 
2 806 71 <0002003bffe103e40614001900260128b1060243545840141a2402081717
1418001e42140401082442080a00b8fff640140c0c063b00171a01101010
063b01060f0f063b01b8fff4b40c0c063b01b8ffe040220b0b063b010128
27210e101010063b0e140f0f063b0e140c0c063b0e160d0d063b0eb8ffdc
b70b0b063b0e0e28271112392f2b2b2b2b2bcd1112392f2b2b2b2bc0c0cd
2b003fed3f3fed3f1133321133113331301b402a28400b0b023b3a033d20
34223a264f204422791c071a02081b171418001e41140401082442080a17
1a01b8fff840130c0c023b011a00200b0b023b000a0c0c023b00b8ffee40
240d0d023b006f28211b0e160f0f023b0e200b0b023b0e1a0c0c023b0e1a
0d0d023b0e702710f62b2b2b2bed10f62b2b2bfd2b3c3c003fed3f3fed3f
11333311333331305d012b59212335060607060623222627262635343637
36363332161711330311262623220615141633323603e4bc2c402b285639
5b9b36373c4c433dad5f547c45bcbc466f4191a47e8b4a96722530141315
4c494ad98d93d7504953252701e4fafc0284221ad9cdc5d14300>Tahoma AddT42Char 
2 7240 88 <00010080ffe103ee045d00190132b10602435458b90000fff4b40c0c063b
19b8fff440120c0c063b18050c05010817021442050a1701b8ffe6400b10
10063b01020f0f063b01b8fffeb40d0d063b01b8fff4b40c0c063b01b8ff
e0400a0b0b063b01011b1a0e0bb8fffa400b0f0f063b0b0c0d0d063b0bb8
ffcab70b0b063b0b0b1b1a1112392f2b2b2bcd1112392f2b2b2b2b2bc000
3fed33333f3f3f3130012b2b1bb9001bffc0401d1010023b09087d087909
741604b80501180c05010817021442050a1701b8fff8b60c0c023b011a00
b8ffdeb41010023b00b8fffeb40f0f023b00b8ffeab40d0d023b00b8ffea
40100b0b023b006f1b0e080c0c023b0e1a0bb8fff640191010023b0b060d
0d023b0b040c0c023b0b060b0b023b0b6e1a10f62b2b2b2bed2b10f42b2b
2b2bfd2b3c003fed33333f3f3c5d31305d012b5921233506062322262726
2635113311141617161633323637113303eebc579c604981303035bc0d17
174f4a459c41bc7c4c4f3034349e7102d5fd8459752c2b284e390342>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/L 47 def
/d 71 def
/u 88 def
end
Tahoma /Encoding get
dup 76 /L put
dup 100 /d put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 18{/.notdef}rp /L 2{/.notdef}rp /O 3{/.notdef}rp /S 13{/.notdef}rp 
/a /.notdef /c /d 4{/.notdef}rp /i 2{/.notdef}rp /l 
/m 5{/.notdef}rp /s /.notdef /u 138{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
363.9 379.26 mo
(Lucid)
[-8.47305 -9.49179 -7.84473 -3.90546 0 ]ysh
344.76 358.74 mo
344.76 359.88 345.66 360.78 346.8 360.78 cv
347.88 360.78 348.78 359.88 348.78 358.74 cv
348.78 357.66 347.88 356.76 346.8 356.76 cv
345.66 356.76 344.76 357.66 344.76 358.74 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
344.76 358.74 mo
344.76 359.88 345.66 360.78 346.8 360.78 cv
347.88 360.78 348.78 359.88 348.78 358.74 cv
348.78 357.66 347.88 356.76 346.8 356.76 cv
345.66 356.76 344.76 357.66 344.76 358.74 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 9222 44 <0001005d0000029f05d1000b00a3b10602435458400c09043206030a0332
01080203b8fff2b41010063b03b8fff440110f0f063b03100c0c063b031c
0d0d063b03b8ffd4b70b0b063b03030d0c1112392f2b2b2b2b2bcd003ffd
c03ffdc031301b403609043206030a03320108080ba00a140502a09003a0
03b00303030e0b0b023b03060c0c023b03020d0d023b03030d0c0f0d400d
500d035d1112392f2b2b2b5ded32fded32003fed323fed32313059212135
331123352115231133029ffdbebebe0242bebe9804a19898fb5f>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/I 44 def
end
Tahoma /Encoding get
dup 73 /I put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 15{/.notdef}rp /I 2{/.notdef}rp /L 2{/.notdef}rp /O 3{/.notdef}rp 
/S 13{/.notdef}rp /a /.notdef /c /d 4{/.notdef}rp /i 
2{/.notdef}rp /l /m 5{/.notdef}rp /s /.notdef /u 138{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
363.9 323.28 mo
(Id)
[-6.35904 0 ]ysh
344.04 314.76 mo
344.04 315.9 344.94 316.74 346.02 316.74 cv
347.1 316.74 348 315.9 348 314.76 cv
348 313.68 347.1 312.78 346.02 312.78 cv
344.94 312.78 344.04 313.68 344.04 314.76 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
344.04 314.76 mo
344.04 315.9 344.94 316.74 346.02 316.74 cv
347.1 316.74 348 315.9 348 314.76 cv
348 313.68 347.1 312.78 346.02 312.78 cv
344.94 312.78 344.04 313.68 344.04 314.76 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 6802 36 <0002fff6000004d605d10007000a00e0b10602435458b90002fff4401f0d
0d063b010c0d0d063b080a050a3406060900010304080008030409000709
b8ffdeb70b0b063b09090c0b1112392f2bd4cd10d4cd003f3f3f1239392f
edc010c03130012b2b1b404a05000a0325002a030409090a080587040104
14030203090a06870701071400000105010a0215011a022601290245004a
0145024a0375007a030c0634300a400a020a090a010303000803b8ffc040
1509113703030c0f0c1f0c3f0c7f0c8f0c050f0c01002f5d5d11332f2b00
3f3c3f39392f5ded3130015d8710fd5dc0c0c08710fd5dc0c008c0015d59
23013301230321030103030a01f6f401f6d187fdc7870289e6e505d1fa2f
01a0fe60024902befd42>Tahoma AddT42Char 
1 13096 57 <0001fff8000004ce05d1000600fab10602435458b90005ffdeb40c11063b
01b8fff4b40d0d063b01b8fffa40180b0b063b02060b0b063b0503020603
030302080006030406b8ffe0400d0b0b063b0604200b0b063b0405b8ffe0
b70b0b063b050508071112392f2bcd2bcd2b10cd10cd003f3f3f11123931
30012b2b2b002b1b403d0504050706370657068606040614000001050704
3704570486040404140302034c0046014902430356015902060005020303
0208790076030202010300b8ffc040210c14370500150024009f00040000
080f0820083f08030f080103031303240303032f5d5d5d11332f5d2b1139
395d003f3f1239393130015d8710fd5dc08710fd5d08c059010123013301
0104cefe00d6fe00d4019c019c05d1fa2f05d1fb2c04d400>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/A 36 def
/V 57 def
end
Tahoma /Encoding get
dup 65 /A put
dup 86 /V put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 7{/.notdef}rp /A 7{/.notdef}rp /I 2{/.notdef}rp /L 2{/.notdef}rp 
/O 3{/.notdef}rp /S 2{/.notdef}rp /V 10{/.notdef}rp /a /.notdef 
/c /d 4{/.notdef}rp /i 2{/.notdef}rp /l /m 5{/.notdef}rp 
/s /.notdef /u 138{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
387.06 317.64 mo
(VAL)
[-10.1506 -10.2017 0 ]ysh
367.26 302.76 mo
367.26 303.9 368.16 304.74 369.3 304.74 cv
370.38 304.74 371.28 303.9 371.28 302.76 cv
371.28 301.68 370.38 300.78 369.3 300.78 cv
368.16 300.78 367.26 301.68 367.26 302.76 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
367.26 302.76 mo
367.26 303.9 368.16 304.74 369.3 304.74 cv
370.38 304.74 371.28 303.9 371.28 302.76 cv
371.28 301.68 370.38 300.78 369.3 300.78 cv
368.16 300.78 367.26 301.68 367.26 302.76 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
2 8692 92 <00010006fe6403f6045d000700c84029160639065c066c06041903260102
03040306050602070a0f11063b39075907690703071a0001000605b8fff6
401a0f11063b36055605660503051a04030418001704290026040401b8ff
ea40090e1037030e0e103704b8ffea40170e103700160e10370306000302
0405020c030201030400b8ffc0b309153700b8ffd440190b0b063b000009
0f09010f091f092f095f096f0905ef0401042f5d5d5d11332f2b2b121739
003f3f1217393130012b2b2b2b5d8710fd5d2bc08710fd5d2bc008c008c0
015d005d010123130133010103f6fda7c9c8fe6acb01310130045dfa0701
d20427fcc5033b00>Tahoma AddT42Char 
2 8940 93 <0001003100000366045d0009006a401969070103070808b4020314020203
02083e010807033e050509b8ffe6400d0b0b063b090409030408030207b8
ffe6b50b0b063b0707b8ffc0b5091437070b02b8ffeeb40b0b063b022f2b
11332b2f2b121739332f2f2b003fed393ffd3987052e2b877dc43130015d
212135012135211501210366fccb0248fdd00312fdb502568b03379b86fc
c600>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/y 92 def
/z 93 def
end
Tahoma /Encoding get
dup 121 /y put
dup 122 /z put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 7{/.notdef}rp /A 7{/.notdef}rp /I 2{/.notdef}rp /L 2{/.notdef}rp 
/O 3{/.notdef}rp /S 2{/.notdef}rp /V 10{/.notdef}rp /a /.notdef 
/c /d 4{/.notdef}rp /i 2{/.notdef}rp /l /m 5{/.notdef}rp 
/s /.notdef /u 3{/.notdef}rp /y /z 133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
387.06 351.24 mo
(lazy)
[-3.89359 -8.91949 -7.54422 0 ]ysh
368.76 336.42 mo
368.76 337.5 369.66 338.4 370.8 338.4 cv
371.88 338.4 372.78 337.5 372.78 336.42 cv
372.78 335.28 371.88 334.38 370.8 334.38 cv
369.66 334.38 368.76 335.28 368.76 336.42 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
368.76 336.42 mo
368.76 337.5 369.66 338.4 370.8 338.4 cv
371.88 338.4 372.78 337.5 372.78 336.42 cv
372.78 335.28 371.88 334.38 370.8 334.38 cv
369.66 334.38 368.76 335.28 368.76 336.42 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 8478 42 <00010042ffe304f505ec003000ee404432400b0b023b0a0306111d031a16
2a163711342c47115a025a04560a6b156b170d283540290129290c007f13
0113131a340c022334000a13292906132714002a102a022ab8ffea400b0c
0c023b2a020d0d023b2ab8ffeab40c0c063b2ab8ffeeb40d0d063b2ab8ff
d2400d0b0b063b2a2a320f324032021db8fff840340d0d063b1d15750601
06160c0c023b06200b0b023b06160d0d023b060e1010063b060e0f0f063b
06160c0c063b06100d0d063b06b8ffe0b60b0b063b06663110f42b2b2b2b
2b2b2b2b5ded2b5d11332f2b2b2b2b2b5ded3312392f2f003fed3fed332f
5d1112392f5ded31305d012b052224272602353412373624333216171616
171523262627262623220011141617161633323637112135211106060706
0603069efefa5e5e64655e5b010a9e4b8a3f327b2611254f483c9c5ad7fe
f7464240b57154a639fea8021c267f3749761d6062630124beb4011d6562
6a16130f3513ef213b221e28febcfef396e04e4d5118180181aefd761134
0f161600>Tahoma AddT42Char 
2 0 69 <00020088ffe104310614000c001d013db106024354584012061803421b04
1601150807130a40100a000db8fff0b41010063b0db8ffe8b40f0f063b0d
b8ffdab40c0c063b0db8fff0b40d0d063b0db8ffd2400b0b0b063b0d0d1f
1e180713b8fffcb50c0c063b1315b8fff4400b0f0f063b15080d0d063b15
b8ffcab70b0b063b15151f1e1112392f2b2b2bdd2bc0c01112392f2b2b2b
2b2bcd003fed33333f3f3fed33333130b00b4b5458b9000cfff438591b40
301f400f0f023b1f400b0b023b3a01330c360e4b01420c450e561c661c75
0709061803421b041601150807130a40100a00b8fff840130c0c023b001b
0d160f0f023b0d160b0b023b0db8fff2b40c0c023b0db8ffd640200d0d02
3b0d711f180713080c0c023b131a15060b0b023b15020d0d023b156e1e10
f62b2bfd2b3c3c10f42b2b2b2bed2b003fed33333f3f3fed333331305d01
2b2b59013426232206071116163332363710002322262707231133113636
333212036f7a874d9d40476e4290a4c2fef6c85b813f0cb0bc47a669bdda
0232c8cf4837fd80231dccebfeeefeb22d26340614fdd44054fed100>Tahoma AddT42Char 
2 1222 72 <0002003bffe60400047c001e002b015db1060243545840162b3c0e0e0025
3d0604201801181819113f0009191f0db8fff4b41010063b0db8ffeab40f
0f063b0db8ffeab40d0d063b0db8ffe0b40c0c063b0db8ffd6400a0b0b06
3b0d0d2d2c2b0eb8fff8401e0f0f063b0e03101010063b03160f0f063b03
120d0d063b031e0c0c063b03b8ffdcb70b0b063b03032d2c1112392f2b2b
2b2b2bdd2bc01112392f2b2b2b2b2bcdc6003fed33332f5d3fed12392fed
31301b40202d400c0c023b250f2d1a340f450f59229904aa040725180c0d
3719300c0f3706b8fff8b50f10372b3c0eb8ffc0401a1213023b0e0e0025
3d0604181819113f0009670c0119191f1a0cb8ffe4b41010023b0cb8ffe6
40340d0d023b0c712d3f2d012b0e100c0c023b0e1a03161010023b03160f
0f023b031a0d0d023b031a0c0c023b03200b0b023b03702c10f62b2b2b2b
2bfd2b3c5d10f62b2bed332f5d003fed33332f3fed12392f2bed2b2b2b31
305d012b5905200011100033321617161615152114163332363736363733
15060607060613262627262623220607060607026dfef5fed9011ee768a0
3c3c40fcfac4ad3e77303346170b21622737599802201e21674c4b692b2a
2c061a012d0115011101433c4040b98666c3ce1c16172b13cd0d270b0f10
02c54c6e262a2c2d2b2c6b47>Tahoma AddT42Char 
2 6174 85 <00010088000002d8045d0012009e401b000d100d200d300d040c090f0000
7f048f040204440a0f05090800b8ffc0b30a123700b8ffc0400f0b0b063b
0000140c07080c0c023b07b8fffab60c0c063b071a09b8fff04011101002
3b09020d0d023b09040b0b023b09b8fffcb41010063b09b8fffe400b0f0f
063b090c0c0c063b09b8ffcab60b0b063b096e1310f62b2b2b2b2b2b2bfd
2b2b3c11332f2b2b003f3f3cfd5d322f11123931305d0123262623220607
112311331536363332161702d80a152f214c9643bcbc6799481d1d120393
06034241fce7045da65b4b030300>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/G 42 def
/b 69 def
/e 72 def
/r 85 def
end
Tahoma /Encoding get
dup 71 /G put
dup 98 /b put
dup 101 /e put
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 7{/.notdef}rp /A 5{/.notdef}rp /G /.notdef /I 2{/.notdef}rp 
/L 2{/.notdef}rp /O 3{/.notdef}rp /S 2{/.notdef}rp /V 10{/.notdef}rp 
/a /b /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp 
/l /m 4{/.notdef}rp /r /s /.notdef /u 3{/.notdef}rp 
/y /z 133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
330.18 229.62 mo
(Gabriel)
[-11.3309 -8.91949 -9.39496 -6.11786 -3.89362 -8.93658 0 ]ysh
311.88 198.78 mo
311.88 199.86 312.78 200.76 313.92 200.76 cv
315 200.76 315.9 199.86 315.9 198.78 cv
315.9 197.64 315 196.74 313.92 196.74 cv
312.78 196.74 311.88 197.64 311.88 198.78 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
311.88 198.78 mo
311.88 199.86 312.78 200.76 313.92 200.76 cv
315 200.76 315.9 199.86 315.9 198.78 cv
315.9 197.64 315 196.74 313.92 196.74 cv
312.78 196.74 311.88 197.64 311.88 198.78 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 8156 40 <000100970000043a05d1000b007640180835050500043501030935000800
0610062006030602060bb8ffe0400e0b0b063b0b670d0f0d0105091400b8
fffeb40d0d023b00b8fff4b41010063b00b8fffc400b0c0c063b00070d0d
063b00b8ffc2b60b0b063b00640c10f62b2b2b2b2bfd325d10f62b32322f
5d003fed3fed12392fed31303311211521112115211121159703a3fd2302
abfd5502dd05d1b0fe68b0fdd7b0>Tahoma AddT42Char 
1 11054 51 <000200970000044305d10010001f00af402c3a143a1d4b144b1d500e540f
650f781c081934000710074f070307070918340a03090811100d0d063b11
1500b8ffc0b309113700b8fff4b40c0c023b00b8ffd6b40c0c063b00b8ff
cc40140b0b063b00080d0d063b0000210f210119071409b8fffeb40d0d02
3b09b8fff2400b1010063b09060d0d063b09b8fffcb40c0c063b09b8ffc6
b60b0b063b09642010f42b2b2b2b2bfd325d11332f2b2b2b2b2bed2b003f
3fed12392f5ded3130015d01140607060623231123112132161716160734
262726262323113332363736360443453d4dd09fa8c6017684ba47535ece
35362f7d5da4877894312c28041061ad3d4c4efdd505d12c3139af814d72
241f1afdad27322d6a00>Tahoma AddT42Char 
1 11756 53 <000200970000051805d10010001f00e04050450f451d020a0119012c013a
003d014c014a145a015914591d6b016a14790177107b140f010c0d0d063b
0201b300100010071a3402400f0f063b0202051834060300050811150f0d
010d0c0b0b023b0db8fff4401b0c0c023b0d100d0d023b0d0c0c0c063b0d
0c0d0d063b0d0d100500b8ffc0b309113700b8ffc8400b0b0b063b000021
19031405b8fffeb40d0d023b05b8fff4400b1010063b05040d0d063b05b8
ffc4b60b0b063b05642010f42b2b2b2bfd3211332f2b2b1239392f2b2b2b
2b2b5ded003f3c3fed12392f2bed123931300187107afd18c0012b5d005d
212101231123112132161716161514060713342627262623231133323637
36360518fefffe28e2c6018080ad4e4e5ba68f662e302a7053c4ae558830
2b290250fdb005d11c33329e75a4dc3501a64165201c17fdce1e2f2a7400
>Tahoma AddT42Char 
1 12572 55 <0001ffff000004ad05d1000700aab10602435458400b0601350303000805
070200b8fff4b41010063b00b8fff4400b0f0f063b00200c0c063b00b8ff
e9b40d0d063b00b8ffd4b70b0b063b000009081112392f2b2b2b2b2bc6dd
c6003f3ffdc031301b401c060135030300080f093f0902055b0714025b10
0020009000a0000400b8fffc400b0c0c023b000c0b0b023b00b8ffee400d
0d0d023b000009086f097f09025d1112392f2b2b2b5de4fde45d003f3ffd
32313059211121352115211101f3fe0c04aefe0c0521b0b0fadf>Tahoma AddT42Char 
1 12778 56 <00010085ffe104ba05d1001d00dd400c1f400b0b023b3a004a000200b8ff
e8b40c0c023b0cb8fff4b40d0d063b00b8ffe8400d0d0d063b170703270f
010f3400b8ffe840090c0c063b000a161417b8fffc40110c0c023b170e0b
0b023b171a0d0d023b17b8ffeeb41010063b17b8ffe0b40f0f063b17b8ff
f4b40c0c063b17b8fffbb40d0d063b17b8ffe0400f0b0b063b17171f0f1f
401f02081407b8ffc0400a09113707060b0b023b07b8fff6400b1010063b
070e0d0d063b07b8ffc4b60b0b063b07071e11332f2b2b2b2b2bed5d1133
2f2b2b2b2b2b2b2b2bed003f2bed5d3f3c2b2b2b5d3130012b0522262726
26351133111416171616333236373636351133111406070606029f83c445
4e40c61a262889635d9028251bc63f4f47bd1f45444ed99f03a1fc5f678d
383c3e3e3c398a6403a6fc5f9bde4d454400>Tahoma AddT42Char 
2 5056 82 <00020039ffe1041f047c000b0017011bb10602435458400d153f03080f3f
09040c00120600b8fff0b41010063b00b8ffecb40f0f063b00b8fff0b40d
0d063b00b8ffe8b40c0c063b00b8ffd240200b0b063b0000180610101006
3b06140f0f063b06120d0d063b06180c0c063b06b8ffe0b70b0b063b0606
19181112392f2b2b2b2b2b11392f2b2b2b2b2b10cd10cd003fed3fed3130
1b403419400f0f023b19400b0b023b3b0e341034143b164b0e441044144b
16080f3f0904153f030a0c1b00081010023b00220f0f023b00b8ffe0b40d
0d023b00b8fffa40330c0c023b00100b0b023b0071191f1901121b061610
10023b06160f0f023b061a0d0d023b061a0c0c023b06200b0b023b067018
10f62b2b2b2b2bed5d10f62b2b2b2b2bed003fed3fed3130015d2b2b5901
1000232200111000333200033426232206151416333236041ffef0e2e9fe
f50113e1e20110c29e92939f9f93919f022efee6fecd013d011001180136
fecbfee7d9d3d3d9d2d9d500>Tahoma AddT42Char 
2 6968 87 <00010015ffea02aa059e001b00b840251d401010023b0120090b3708080d
043e0a07051818143f00093f1d0118000b100b200b030bb8fff4b40c0c06
3b0bb8ffe0400a0b0b063b0b0b1d0a0d06b8ffe8401d0c0c063b060d080c
0c023b0d1a070f061f062003030603261010023b03b8fffeb40f0f023b03
b8fffeb40d0d023b03b8fff2400b0f0f063b030c0d0d063b03b8fffeb60b
0b063b03981c10f42b2b2b2b2b2b325d3ced2b2f2b103c11332f2b2b5d3c
5d003ffd322f3f3cfd3c332f3130002b012b052226351123353311331121
1521111416171616333236373315060601da9aac7f7fbc015afea6061411
4c412e56130b356d16afbd026b9c0141febf9cfded555c2823231b09a90f
1100>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/E 40 def
/P 51 def
/R 53 def
/T 55 def
/U 56 def
/o 82 def
/t 87 def
end
Tahoma /Encoding get
dup 69 /E put
dup 80 /P put
dup 82 /R put
dup 84 /T put
dup 85 /U put
dup 111 /o put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 7{/.notdef}rp /A 3{/.notdef}rp /E /.notdef /G /.notdef 
/I 2{/.notdef}rp /L 2{/.notdef}rp /O /P /.notdef /R 
/S /T /U /V 10{/.notdef}rp /a /b /c 
/d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /.notdef 
/o 2{/.notdef}rp /r /s /t /u 3{/.notdef}rp /y 
/z 133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
386.28 224.52 mo
(LUSTRE)
[-8.45099 -11.1339 -9.45288 -9.91125 -10.5395 0 ]ysh
306.18 209.64 mo
(Ptolemy)
[-9.36951 -5.68488 -9.2337 -3.9021 -8.94507 -14.2767 0 ]ysh
288.66 172.26 mo
288.66 173.4 289.56 174.24 290.64 174.24 cv
291.78 174.24 292.62 173.4 292.62 172.26 cv
292.62 171.18 291.78 170.28 290.64 170.28 cv
289.56 170.28 288.66 171.18 288.66 172.26 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
288.66 172.26 mo
288.66 173.4 289.56 174.24 290.64 174.24 cv
291.78 174.24 292.62 173.4 292.62 172.26 cv
292.62 171.18 291.78 170.28 290.64 170.28 cv
289.56 170.28 288.66 171.18 288.66 172.26 cv
cp
@
0 gry
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
362.28 190.38 mo
(Esterel)
[-9.52924 -7.57648 -5.67468 -8.93494 -6.11621 -8.93488 0 ]ysh
368.04 380.4 mo
368.04 381.48 368.94 382.38 370.02 382.38 cv
371.1 382.38 372 381.48 372 380.4 cv
372 379.26 371.1 378.42 370.02 378.42 cv
368.94 378.42 368.04 379.26 368.04 380.4 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
368.04 380.4 mo
368.04 381.48 368.94 382.38 370.02 382.38 cv
371.1 382.38 372 381.48 372 380.4 cv
372 379.26 371.1 378.42 370.02 378.42 cv
368.94 378.42 368.04 379.26 368.04 380.4 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 2548 16 <0001005a0231028e02e60003001d40090142027f0001000002b8ffc0b30c
1137022f2b332f5d002fed313001213521028efdcc02340231b5>Tahoma AddT42Char 
1 7538 38 <00010042ffe504ac05ec003300c1403908040711083018041a16142a2b16
242a3a16332a4611482f5a025a04570a5711106e137f130213131a340c02
602d702d022d2d2634000a132eb8ffc0b3091e372eb8ffcc40120b0b063b
2e2e350f35010f351f355f350320b8fffa40340d0d063b20157706010616
0c0c023b06200b0b023b06160d0d023b060e1010063b060e0f0f063b0616
0c0c063b06160d0d063b06b8ffe0b60b0b063b06663410f42b2b2b2b2b2b
2b2b5ded2b5d5d11332f2b2b3c003fed332f5d3fed332f5d31305d052226
272602353412373636333216171616171523262627262623220607060615
1416171616333236373636373315060607060602dd92f55959625f5b59f4
974b8338306531101a523b3986585faa403f464a403ea85e569239375017
0f31573e416f1b6261610122bcbb011667646916110f2d1bef1844211f28
4e4c4ce69099dd4c4a4b2a201f4117ec172a14151600>Tahoma AddT42Char 
2 5428 83 <00020088fe640431047c0010001d013db1060243545840110b060314420e
0409051b400309080c1100b8fff0b41010063b00b8ffe8b40f0f063b00b8
fff0b40d0d063b00b8ffe0b40c0c063b00b8ffde400b0b0b063b00001f1e
0b1707b8fff8b50c0c063b0708b8fff4400b0f0f063b08080d0d063b08b8
ffcab70b0b063b08081f1e1112392f2b2b2bdd2bc0c01112392f2b2b2b2b
2bcd003f3fed3f3fed12393931301b402d1f400f0f023b1f400b0b023b35
013b12311d43014b12401d570f660f080b060314420e0409051b40030908
0c11b8fff8400d0c0c023b111b00160f0f023b00b8ffdab40d0d023b00b8
fff440180c0c023b000e0b0b023b00711f0b1707060c0c023b071a08b8ff
f040191010023b08020d0d023b08060c0c023b08060b0b023b086e1e10f6
2b2b2b2bfd2b323210f62b2b2b2bed2b003f3fed3f3fed12393931305d01
2b2b59011000232226271123113315363633321203342623220607111616
3332360431fef5cc538043bcbc46ab65c0d7c27a895095434a694492a202
4cfee9feb52628fe2c05f9753f55fed0feebbfd34738fd87241ad600>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/hyphen 16 def
/C 38 def
/p 83 def
end
Tahoma /Encoding get
dup 45 /hyphen put
dup 67 /C put
dup 112 /p put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 3{/.notdef}rp /six 
/seven /eight /nine 7{/.notdef}rp /A /.notdef /C /.notdef 
/E /.notdef /G /.notdef /I 2{/.notdef}rp /L 2{/.notdef}rp 
/O /P /.notdef /R /S /T /U /V 
10{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp /i 
2{/.notdef}rp /l /m /.notdef /o /p /.notdef /r 
/s /t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
387.9 385.62 mo
(C)sh
330.18 164.88 mo
(Grape-II)
[-11.336 -6.12299 -8.92456 -9.40002 -8.94171 -6.17401 -6.34375 0 ]ysh
312.66 132.24 mo
312.66 133.38 313.56 134.28 314.64 134.28 cv
315.78 134.28 316.62 133.38 316.62 132.24 cv
316.62 131.16 315.78 130.26 314.64 130.26 cv
313.56 130.26 312.66 131.16 312.66 132.24 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
312.66 132.24 mo
312.66 133.38 313.56 134.28 314.64 134.28 cv
315.78 134.28 316.62 133.38 316.62 132.24 cv
316.62 131.16 315.78 130.26 314.64 130.26 cv
313.56 130.26 312.66 131.16 312.66 132.24 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 2604 17 <000100be000001ad011d00030025400a025601082f0501002d01b8ffe240
0a0b0b063b6f017f0102012f5d2bed5d003fed31302123113301adefef01
1d00>Tahoma AddT42Char 
1 2666 18 <0001ffe8febc02d806140003002640140300010138020314020203020301
2000010000022f332f5d003f2f313087052e2b877dc40101230102d8fdb9
a902440614f8a8075800>Tahoma AddT42Char 
1 10022 48 <000100970000059305d1000c011c4017560a0138023805360a6f026f0560
0a7f027f05700a0903b8fff2b40b0b063b04b8fff240390b0b063b550956
0a5a0b03760901050a0203090204120429043504440454046b040704200d
0d023b0404070b0903010708090a0b0305021400b8ffec40110c0c023b00
060b0b023b00020d0d023b00b8ffe8b41010063b00b8ffeab40f0f063b00
b8fffa400b0c0c063b000c0d0d063b00b8ffe6401b0b0b063b00650e0f0e
500e02050a0c0c023b050a0c0c063b051307b8fff4b41010063b07b8fffe
b40d0d023b07b8fff840110f0f063b07050c0c063b07030d0d063b07b8ff
c8b60b0b063b07640d10f62b2b2b2b2b2bed2b2b5d10f62b2b2b2b2b2b2b
2bed111739003f3c3f3c12392f2b5d1217393130015d72002b2b5d722123
11012301112311210101210593c6fe7c78fe7fb9010e0174016701130503
fc970369fafd05d1fcc3033d>Tahoma AddT42Char 
2 2022 74 <0002003bfe5903e4047c000c0033013fb1060243545840232a0501290440
2604001a0a411d07333313402f0d29001a101010063b1a020f0f063b1ab8
ffe840230b0b063b1a1a3534320720101010063b20140f0f063b20100d0d
063b20140c0c063b20b8ffdab70b0b063b202035341112392f2b2b2b2b2b
cdc41112392f2b2b2bd0c0003fed332f3fed33333fed33333f31301b403e
35400b0b023b3e0634083c0c3c1b4c064508490c7d017d31094033012f18
0e0f37491d012a05012904402604001a0a411d07333313402f0d0f320129
001ab8fff8400d0c0c023b1a1a2c1a1010023b2cb8ffee40380d0d023b2c
060c0c023b2c200b0b023b2c6f353232071b20161010023b20160f0f023b
201a0d0d023b201a0c0c023b20200b0b023b20703410f42b2b2b2b2bed33
2f10f42b2b2b2bfd2b3c3c5d003fed332f3fed33333fed33333f5d2b5d31
305d012b5901112626232206151416333236011616171616333236373636
353506062322021134363736363332161737331110022322262735032846
773b8fa47d8c499bfdc6134a2f345834577922201a4c926ebfe24e423fac
5c577f400bb1f8ff52ab4a012f0265221dd2c4bac23afe52081b0c0d102e
29296c4562423f011c010a8bd74b484e292630fc22fee4fef61a16c4>Tahoma AddT42Char 
2 3490 78 <00010088000004260614000b013ab10602435458400e0302080b04050a05
07010105080bb8ffeeb71010063b090a0100b8ffe4b40d0d063b00b8fffa
40090b0b063b0000050803b8fff8b50c0c063b0305b8fffa400b0f0f063b
05060d0d063b05b8ffcab70b0b063b05050d0c1112392f2b2b2bdd2bc011
332f2b2bcdd6cd2b003fc03f3f12173931301b40192802d801db09030901
1f011d021f0d2d01480179017609080bb8ffc0b30c0f370bb8fff4b40d0d
023b08b8fff4403f0d0d023b350b450b02020203011a000b000809b4020b
0a030a0802050a0507010105080b02500a600a020a0a700001000f0d0100
0d0803080c0c023b031a05b8fff040131010023b05020d0d023b05040b0b
023b056e0c10f42b2b2bfd2b3c11335d2f5d332f5d3939003f3c3f3f1239
393130018710c0c07af51804c0018710fd08c0005d2b012b2b5d71592123
010711231133110133010426f7fe5f4abcbc01baeafe35021b48fe2d0614
fc7101d8fe2d>Tahoma AddT42Char 
2 4694 81 <00010088000003f6047c00160120b10602435458400d0b10084213040e06
01080d0800b8fff8b50c0c063b0001b8ffe0b41010063b01b8fffab40d0d
063b01b8fff4b40c0c063b01b8ffe4400a0b0b063b01011817100cb8fff8
b50c0c063b0c0db8fff4400b0f0f063b0d080d0d063b0db8ffcab70b0b06
3b0d0d18171112392f2b2b2bdd2bc01112392f2b2b2b2bcd2b003f3f3f3f
ed393231301b401303151615761503100d084213040e05010d0801b8fff8
400d0c0c023b011a00161010023b00b8fffeb40f0f023b00b8ffea400b0d
0d023b00060c0c023b00b8ffea40110b0b023b006f18100b080c0c023b0b
1a0db8fff640191010023b0d020d0d023b0d060c0c023b0d020b0b023b0d
6e1710f62b2b2b2bfd2b3210f42b2b2b2b2bed2b003f3c3f3fed12393130
5d59212311342627262623220607112311331536363332161503f6bc0f15
175247469547bcbc54a45ba5ba027c4d85282a294b3cfcbe045d7c4b50d9
ce00>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/period 17 def
/slash 18 def
/M 48 def
/g 74 def
/k 78 def
/n 81 def
end
Tahoma /Encoding get
dup 46 /period put
dup 47 /slash put
dup 77 /M put
dup 103 /g put
dup 107 /k put
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[45{/.notdef}rp /hyphen /period /slash /zero /one /two 3{/.notdef}rp 
/six /seven /eight /nine 7{/.notdef}rp /A /.notdef /C 
/.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L 
/M /.notdef /O /P /.notdef /R /S /T 
/U /V 10{/.notdef}rp /a /b /c /d /e 
/.notdef /g /.notdef /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
3{/.notdef}rp /y /z 133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
306.18 142.38 mo
(Matlab/Simulink)
[-13.0915 -8.91443 -5.67133 -3.88849 -8.91437 -9.38983 -6.48645 -9.45795 -3.88849 -14.2631 -9.47485 -3.88849 
-3.88849 -9.47479 0 ]ysh
327.66 66.5405 mo
(etc.)
[-8.9502 -5.68994 -7.84644 0 ]ysh
363.06 243.781 mo
(Erlang)
[-9.53094 -6.11792 -3.89355 -8.91949 -9.47992 0 ]ysh
344.04 220.38 mo
344.04 221.52 344.94 222.42 346.02 222.42 cv
347.1 222.42 348 221.52 348 220.38 cv
348 219.3 347.1 218.4 346.02 218.4 cv
344.94 218.4 344.04 219.3 344.04 220.38 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
344.04 220.38 mo
344.04 221.52 344.94 222.42 346.02 222.42 cv
347.1 222.42 348 221.52 348 220.38 cv
348 219.3 347.1 218.4 346.02 218.4 cv
344.94 218.4 344.04 219.3 344.04 220.38 cv
cp
@
367.5 173.64 mo
367.5 174.72 368.4 175.62 369.54 175.62 cv
370.62 175.62 371.52 174.72 371.52 173.64 cv
371.52 172.56 370.62 171.66 369.54 171.66 cv
368.4 171.66 367.5 172.56 367.5 173.64 cv
ef
367.5 173.64 mo
367.5 174.72 368.4 175.62 369.54 175.62 cv
370.62 175.62 371.52 174.72 371.52 173.64 cv
371.52 172.56 370.62 171.66 369.54 171.66 cv
368.4 171.66 367.5 172.56 367.5 173.64 cv
cp
@
343.26 164.04 mo
343.26 165.12 344.16 166.02 345.3 166.02 cv
346.38 166.02 347.28 165.12 347.28 164.04 cv
347.28 162.9 346.38 162 345.3 162 cv
344.16 162 343.26 162.9 343.26 164.04 cv
ef
343.26 164.04 mo
343.26 165.12 344.16 166.02 345.3 166.02 cv
346.38 166.02 347.28 165.12 347.28 164.04 cv
347.28 162.9 346.38 162 345.3 162 cv
344.16 162 343.26 162.9 343.26 164.04 cv
cp
@
368.04 154.38 mo
368.04 155.52 368.94 156.42 370.02 156.42 cv
371.1 156.42 372 155.52 372 154.38 cv
372 153.3 371.1 152.4 370.02 152.4 cv
368.94 152.4 368.04 153.3 368.04 154.38 cv
ef
368.04 154.38 mo
368.04 155.52 368.94 156.42 370.02 156.42 cv
371.1 156.42 372 155.52 372 154.38 cv
372 153.3 371.1 152.4 370.02 152.4 cv
368.94 152.4 368.04 153.3 368.04 154.38 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 8872 43 <00010097000004d005d1000b012fb50d400b0b023bb10602435458b20335
08b8ffc040100f0f063b0808050a0703010508000109b8fff4b41010063b
09b8ffe0b40f0f063b09b8fffcb40c0c063b09b8ffffb40d0d063b09b8ff
eab60b0b063b090001b8fff4b41010063b01b8ffe2b40f0f063b01b8fffa
b40c0c063b01b8fffcb40d0d063b01b8ffe6400b0b0b063b01010d0c0803
05b8fff4b41010063b05b8fff8400b0f0f063b05040d0d063b05b8ffc4b7
0b0b063b05050d0c1112392f2b2b2b2bddc01112392f2b2b2b2b2b10cd2b
2b2b2b2b10cd003fc03fc012392f2bed31301b401503350808050a070301
0508090214000c0b0b023b00b8fff440160c0c023b000e0d0d023b00650d
0f0d400d0208031405b8fffeb60d0d023b05640c10f62bfd325d10f62b2b
2bfd32003f3c3f3c12392fed313059012b21231121112311331121113304
d0c6fd53c6c602adc602d9fd2705d1fdb8024800>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/H 43 def
end
Tahoma /Encoding get
dup 72 /H put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[45{/.notdef}rp /hyphen /period /slash /zero /one /two 3{/.notdef}rp 
/six /seven /eight /nine 7{/.notdef}rp /A /.notdef /C 
/.notdef /E /.notdef /G /H /I 2{/.notdef}rp /L 
/M /.notdef /O /P /.notdef /R /S /T 
/U /V 10{/.notdef}rp /a /b /c /d /e 
/.notdef /g /.notdef /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
3{/.notdef}rp /y /z 133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
385.44 160.5 mo
(pH)
[-9.36438 0 ]ysh
gsave
435.66 757.14 mo
176.4 757.14 li
176.4 -2.45996 li
435.66 -2.45996 li
cp
eclp
0 lj
8 ml
229.26 755.28 mo
278.04 755.28 li
278.04 2.88 li
229.26 2.88 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
grestore
true set_gvm
%ADOBeginSubsetFont: Tahoma-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma-Bold gcheck setglobal} if
1 13922 73 <0001001500000354061e00180059403c0000044015000b0e3f0811050d08
0f000f1a1f00200930094009060909000e0808000f0f1f0f2f0f030f110f
00030b1a000e100e200ea00eb00e050e2f5ded17332f5d2f322f1112392f
5d003f3f33fd323ffd322f31300123262623220615152115211121112335
333534363332161703541b1455266a4d0116fef6fea28c8cd8db4c843005
0c06134e6b09f4fc91036ff41fcece0b0900>Tahoma-Bold AddT42Char 
Tahoma-Bold /CharStrings get begin
/f 73 def
end
Tahoma-Bold /Encoding get
dup 102 /f put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTM+Tahoma-Bold*1 
[32{/.notdef}rp /space 14{/.notdef}rp /slash 19{/.notdef}rp /C /.notdef /E 
6{/.notdef}rp /L /M 19{/.notdef}rp /a 2{/.notdef}rp /d /e 
/f /g /.notdef /i 2{/.notdef}rp /l /m /n 
/o /p /.notdef /r /s /t /u /v 
137{/.notdef}rp]
QNZHTM+Tahoma-Bold nf
QNZHTM+Tahoma-Bold*1 [0 -19.02 -19.02 0 0 0 ]msf
273.12 743.16 mo
(Models of Computation)
[-16.983 -11.7335 -11.9616 -11.2959 -5.74219 -9.7934 -5.58044 -11.7335 -7.26379 -5.58044 -12.6846 -11.7335 
-18.1431 -11.9617 -12.1708 -7.91046 -11.3911 -7.9104 -5.74219 -11.7335 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if

1 0 3 <> Tahoma AddT42Char 
1 10364 49 <00010097000004c005d100090137404e0b400b0b023b7607010c071b0724
0734074507500769026107790271070a0f0100061f011106260134064406
53066b0160067c0170060c0c010406025a0155060201060d11063b010c0b
0c063b06b8fff440110b11063b02070108060301040806010207b8fffcb4
0c0c023b07b8fff4400d0c0c063b071300200f0f063b00b8fff0b4101006
3b00b8fff640110c0c023b000e0b0b023b00160d0d023b00b8fffeb40c0c
063b00b8fffeb40d0d063b00b8ffe6401b0b0b063b00650b0f0b400b0202
040c0c023b02040c0c063b021304b8fff0b41010063b04b8fffeb40d0d02
3b04b8fff840110f0f063b04020c0c063b040c0d0d063b04b8ffc6b60b0b
063b04640a10f62b2b2b2b2b2bed2b2b5d10f62b2b2b2b2b2b2b2bfd2b2b
113939003f3c3f3c1239393130012b2b2b72715d005d5d012b2123011123
112101113304c0defd6eb901190257b90504fafc05d1fb65049b>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/space 3 def
/N 49 def
end
Tahoma /Encoding get
dup 32 /space put
dup 78 /N put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /slash /zero /one 
/two 3{/.notdef}rp /six /seven /eight /nine 7{/.notdef}rp /A 
/.notdef /C /.notdef /E /.notdef /G /H /I 
2{/.notdef}rp /L /M /N /O /P /.notdef /R 
/S /T /U /V 10{/.notdef}rp /a /b /c 
/d /e /.notdef /g /.notdef /i /.notdef /k 
/l /m /n /o /p /.notdef /r /s 
/t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
249.54 509.52 mo
(Petri Nets)
[-9.37967 -8.95526 -5.6951 -6.13657 -3.91226 -5.34875 -11.3496 -8.95526 -5.69507 0 ]ysh
230.88 442.5 mo
230.88 443.64 231.78 444.54 232.92 444.54 cv
234 444.54 234.9 443.64 234.9 442.5 cv
234.9 441.42 234 440.52 232.92 440.52 cv
231.78 440.52 230.88 441.42 230.88 442.5 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
230.88 442.5 mo
230.88 443.64 231.78 444.54 232.92 444.54 cv
234 444.54 234.9 443.64 234.9 442.5 cv
234.9 441.42 234 440.52 232.92 440.52 cv
231.78 440.52 230.88 441.42 230.88 442.5 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
2 2500 75 <00010088000003f6061400160120b10602435458400d0b10084213040e01
01080d0800b8fff8b50c0c063b0001b8ffe0b41010063b01b8fff8b40d0d
063b01b8fff4b40c0c063b01b8ffe4400a0b0b063b01011817100cb8fff8
b50c0c063b0c0db8fff4400b0f0f063b0d060d0d063b0db8ffcab70b0b06
3b0d0d18171112392f2b2b2bdd2bc01112392f2b2b2b2bcd2b003f3f3f3f
ed393231301b401303151615761503100d084213040e01010d0802b8fff8
400d0c0c023b021a00161010023b00b8fffeb40f0f023b00b8ffea400b0d
0d023b00060c0c023b00b8ffea40110b0b023b006f18100b080c0c023b0b
1a0db8fff640191010023b0d020d0d023b0d060c0c023b0d020b0b023b0d
6e1710f62b2b2b2bfd2b3c10f42b2b2b2b2bed2b003f3c3f3fed12393130
5d59212311342627262623220607112311331136363332161503f6bc0f15
175247469547bcbc54a45ba5ba027c4d85282a294b3cfcbe0614fdcd4b50
d9ce>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/h 75 def
end
Tahoma /Encoding get
dup 104 /h put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /slash /zero /one 
/two 3{/.notdef}rp /six /seven /eight /nine 7{/.notdef}rp /A 
/.notdef /C /.notdef /E /.notdef /G /H /I 
2{/.notdef}rp /L /M /N /O /P /.notdef /R 
/S /T /U /V 10{/.notdef}rp /a /b /c 
/d /e /.notdef /g /h /i /.notdef /k 
/l /m /n /o /p /.notdef /r /s 
/t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
274.02 500.88 mo
(Comp. Graphs)
[-10.2219 -9.23712 -14.2801 -9.4068 -5.1618 -5.34875 -11.3428 -6.12979 -8.93137 -9.40683 -9.49179 0 
]ysh
255.66 432.42 mo
255.66 433.5 256.56 434.4 257.64 434.4 cv
258.78 434.4 259.62 433.5 259.62 432.42 cv
259.62 431.28 258.78 430.38 257.64 430.38 cv
256.56 430.38 255.66 431.28 255.66 432.42 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
255.66 432.42 mo
255.66 433.5 256.56 434.4 257.64 434.4 cv
258.78 434.4 259.62 433.5 259.62 432.42 cv
259.62 431.28 258.78 430.38 257.64 430.38 cv
256.56 430.38 255.66 431.28 255.66 432.42 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 9620 46 <00010097000004d405d1000b00e8405c190956015c0903280938094a0968
098909d809060a011e0119022a01240b39013909350b49014909450b5c01
650b7c017b090f02020364010101b3000b00080920090e3709b3020b0a03
0a740b010802050a07030105080b020a0a00b8ffc0b309103700b8fff0b4
0d0d063b00b8ffe040100b0b063b00000d0f0d400d0208031405b8fffeb4
0d0d023b05b8fffab41010063b05b8fff8400b0f0f063b050c0d0d063b05
b8ffc8b60b0b063b05640c10f62b2b2b2b2bfd325d11332f2b2b2b332f39
39003f3c3f3c12393931305d018710c0c07afd2b1804c00187107afd5d18
08c0015d717221210107112311331101330104d4fefffde157c6c60262f1
fd9802b562fdad05d1fd5302adfd6700>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/K 46 def
end
Tahoma /Encoding get
dup 75 /K put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /slash /zero /one 
/two 3{/.notdef}rp /six /seven /eight /nine 7{/.notdef}rp /A 
/.notdef /C /.notdef /E /.notdef /G /H /I 
/.notdef /K /L /M /N /O /P /.notdef 
/R /S /T /U /V 10{/.notdef}rp /a /b 
/c /d /e /.notdef /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
249.42 420.66 mo
(Kahn Proc. Nets)
[-10.0063 -8.93649 -9.49689 -9.49689 -5.31821 -9.37796 -6.13489 -9.24219 -7.84985 -5.16687 -5.31821 -11.3479 
-8.95355 -5.69339 0 ]ysh
231.66 358.02 mo
231.66 359.1 232.56 360 233.64 360 cv
234.78 360 235.62 359.1 235.62 358.02 cv
235.62 356.94 234.78 356.04 233.64 356.04 cv
232.56 356.04 231.66 356.94 231.66 358.02 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
231.66 358.02 mo
231.66 359.1 232.56 360 233.64 360 cv
234.78 360 235.62 359.1 235.62 358.02 cv
235.62 356.94 234.78 356.04 233.64 356.04 cv
232.56 356.04 231.66 356.94 231.66 358.02 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
2 5846 84 <0002003bfe6403e4047c0013002000de402922400b0b023b3b033d1a301c
3d204c034b1a461c4b2008120502110418400e04010c1e420509111402b8
fff8400d0c0c023b021a001a1010023b00b8ffee40110d0d023b00080c0c
023b00200b0b023b00b8ffe4b41010063b00b8fff0b40c0c063b00b8ffe6
40400b0b063b006f221b1b08161010023b08160f0f023b081a0d0d023b08
1a0c0c023b08200b0b023b08101010063b08180f0f063b081c0d0d063b08
160c0c063b08b8ffe8b60b0b063b08702110f42b2b2b2b2b2b2b2b2b2bed
10f62b2b2b2b2b2b2bfd2b3232003fed3f3fed1239393f31305d012b0123
110606232202113436373636333216173733031126262322061514163332
3603e4bc529c5fbee24f413eac5d567e420cb0bc47704094a080874f96fe
6402164b450131011090dd4b4950282730fcbb027c231cd6c9c4d344>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/q 84 def
end
Tahoma /Encoding get
dup 113 /q put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /slash /zero /one 
/two 3{/.notdef}rp /six /seven /eight /nine 7{/.notdef}rp /A 
/.notdef /C /.notdef /E /.notdef /G /H /I 
/.notdef /K /L /M /N /O /P /.notdef 
/R /S /T /U /V 10{/.notdef}rp /a /b 
/c /d /e /.notdef /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
274.02 319.5 mo
(Communicating Sequential Processes)
[-10.2236 -9.2388 -14.2818 -14.2818 -9.4935 -9.49347 -3.90717 -7.84644 -8.93311 -5.69 -3.90717 -9.49347 
-9.40851 -5.31818 -9.47668 -8.95013 -9.40851 -9.49353 -8.95013 -9.49353 -5.68994 -3.90717 -8.93304 -3.90717 
-5.31824 -9.37457 -6.13147 -9.23877 -7.84644 -8.9502 -7.59167 -7.5918 -8.95013 0 ]ysh
254.88 316.38 mo
254.88 317.52 255.78 318.42 256.92 318.42 cv
258 318.42 258.9 317.52 258.9 316.38 cv
258.9 315.3 258 314.4 256.92 314.4 cv
255.78 314.4 254.88 315.3 254.88 316.38 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
254.88 316.38 mo
254.88 317.52 255.78 318.42 256.92 318.42 cv
258 318.42 258.9 317.52 258.9 316.38 cv
258.9 315.3 258 314.4 256.92 314.4 cv
255.78 314.4 254.88 315.3 254.88 316.38 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 7890 39 <000200970000052d05d1000e001d00a440211f400b0b023b3812361b4812
461b67020516340803173407080f15680077000200b8ffe0b40c0c023b00
b8fff4b40d0d023b00b8ffeab40c0c063b00b8ffeab40d0d063b00b8ffd8
400f0b0b063b00671f0f1f401f02171407b8fffeb40d0d023b07b8fff4b4
1010063b07b8fff8400b0f0f063b070d0d0d063b07b8ffc8b60b0b063b07
641e10f42b2b2b2b2bed5d10f62b2b2b2b2b5ded003fed3fed31305d012b
011402070606232111213216171612073426272626232311333236373636
052da58b71e9b5fea90153d2ef54909ece72704fb486979784c652676802
e7ccfeb85c473005d13f375ffec5d7acf344302afb832a3946e9>Tahoma AddT42Char 
2 1714 73 <0001001d000002d4061e001800e7b10602435458402118150000043f1500
0b0e3e11080511050d080909000e08960b000f000f110b1a0eb8fff64011
1010063b0e240f0f063b0e0c0c0c063b0eb8fff4b40b0b063b0e2f2b2b2b
2bedc033332f2f10e51112392f003f3f3f10fdc03fed322f113931301b40
3c08143914020000043f15000b0e3e0811050d080909000e08960b000f0f
1f0f2f0f030f000f110b080c0c023b0b1a000e100e200e030e161010023b
0eb8fffab40f0f023b0eb8fffab40d0d023b0eb8fffeb40c0c023b0e2f2b
2b2b2b5ded2b3c33332f5d2f10e41112392f003f3f3cfd3c3ffd322f3130
015d31305901232626232206151521152111231123353335343633321617
02d40a195e2577650137fecfbc7f7fc2b5346429056009116b8c269cfc3f
03c19c25cad20b07>Tahoma AddT42Char 
2 7914 90 <0001001e000005d2045d000c0171b10602435458b603180a11063b0bb8ff
e8b40a11063b08b8ffe840210a11063b080b030306050c05090506050208
0508000c0b06070e0b0b063b070803b8ffdcb70b0b063b03030d0bb8ffe0
b70b0b063b0b0b0d04b8ffffb40d0d063b0ab8ffff400b0d0d063b090c0d
0d063b08b8fff2b40d0d063b08b8ffd2b70b0b063b08080e0d1112392f2b
2b2b2b2b11392f2b11392f2b10dd2bcd10ddb00b4b5458b9000cfff43859
cd003f3f3f3f3f1112173931302b2b2b1bb9000afff8b40b0b023b01b8ff
f440760b0b023b0b01050605070609090b1b01150615071709190b2c012a
022504260524082b0b34013b0544014b0557015905570b690066016a0264
04680564086a09640a6b0b7c027304780576087a09740a790b2700031003
2703030c1a000100071a06050608090b000203060506050508090a030306
00b8ffc0401009153700000e0f0e1f0e3f0e600e04062f5d11332f2b1217
39003f3f1117393130018710fd8710fd005d015d2b2b5901012301012301
33130133011305d2fee5aefeeffef1adfee2c4c501099b0110ba045dfba3
035dfca3045dfc9f0361fc9f0361>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/D 39 def
/f 73 def
/w 90 def
end
Tahoma /Encoding get
dup 68 /D put
dup 102 /f put
dup 119 /w put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /slash /zero /one 
/two 3{/.notdef}rp /six /seven /eight /nine 7{/.notdef}rp /A 
/.notdef /C /D /E /.notdef /G /H /I 
/.notdef /K /L /M /N /O /P /.notdef 
/R /S /T /U /V 10{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /.notdef /w /.notdef /y /z 
133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
249.42 277.62 mo
(Synchronous Dataflow)
[-9.47836 -8.47644 -9.49518 -7.84814 -9.49518 -6.13318 -9.24054 -9.49518 -9.24048 -9.49518 -7.59351 -5.28931 
-11.5327 -8.93475 -5.69171 -8.93475 -5.41992 -3.90887 -9.24048 0 ]ysh
230.88 220.92 mo
230.88 222 231.78 222.9 232.92 222.9 cv
234 222.9 234.9 222 234.9 220.92 cv
234.9 219.78 234 218.88 232.92 218.88 cv
231.78 218.88 230.88 219.78 230.88 220.92 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
230.88 220.92 mo
230.88 222 231.78 222.9 232.92 222.9 cv
234 222.9 234.9 222 234.9 220.92 cv
234.9 219.78 234 218.88 232.92 218.88 cv
231.78 218.88 230.88 219.78 230.88 220.92 cv
cp
@
255.66 369.66 mo
255.66 370.74 256.56 371.64 257.64 371.64 cv
258.78 371.64 259.62 370.74 259.62 369.66 cv
259.62 368.52 258.78 367.62 257.64 367.62 cv
256.56 367.62 255.66 368.52 255.66 369.66 cv
ef
255.66 369.66 mo
255.66 370.74 256.56 371.64 257.64 371.64 cv
258.78 371.64 259.62 370.74 259.62 369.66 cv
259.62 368.52 258.78 367.62 257.64 367.62 cv
256.56 367.62 255.66 368.52 255.66 369.66 cv
cp
@
0 gry
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
274.02 383.64 mo
(Actors)
[-10.2051 -7.84473 -5.68829 -9.23712 -6.12979 0 ]ysh
340.8 135 mo
391.92 135 li
391.92 3.23999 li
340.8 3.23999 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.91765 .91765 .91765 colr
f
0 lj
8 ml
340.8 135 mo
391.92 135 li
391.92 3.23999 li
340.8 3.23999 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
0 gry
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
362.52 131.16 mo
(StreamIt)
[-9.46649 -5.67975 -6.12134 -8.94 -8.92285 -14.2717 -6.34204 0 ]ysh
343.5 69.54 mo
343.5 70.6201 344.4 71.52 345.54 71.52 cv
346.62 71.52 347.52 70.6201 347.52 69.54 cv
347.52 68.4 346.62 67.5001 345.54 67.5001 cv
344.4 67.5001 343.5 68.4 343.5 69.54 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
1 lj
10 ml
343.5 69.54 mo
343.5 70.62 344.4 71.52 345.54 71.52 cv
346.62 71.52 347.52 70.62 347.52 69.54 cv
347.52 68.4 346.62 67.5 345.54 67.5 cv
344.4 67.5 343.5 68.4 343.5 69.54 cv
cp
@
367.92 102.12 mo
367.92 103.26 368.82 104.16 369.9 104.16 cv
370.98 104.16 371.88 103.26 371.88 102.12 cv
371.88 101.04 370.98 100.14 369.9 100.14 cv
368.82 100.14 367.92 101.04 367.92 102.12 cv
ef
367.92 102.12 mo
367.92 103.26 368.82 104.16 369.9 104.16 cv
370.98 104.16 371.88 103.26 371.88 102.12 cv
371.88 101.04 370.98 100.14 369.9 100.14 cv
368.82 100.14 367.92 101.04 367.92 102.12 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma gcheck setglobal} if
1 7082 37 <000300970000048905d100150024003301254020050c150c270c39314a14
4a315502561569237a190a280e0b0b063b12112c341eb8ffc040500f0f06
3b1e1e071d3408032d34070816060d0d063b1615122c000f400f500f030f
161010063b0f160f0f063b0f0c0c0c023b0f0c0d0d023b0f060c0c063b0f
060d0d063b0f0e0b0b063b0f0f07251500b8ffc0b309163700b8ffeab40f
0f063b00b8ffe0b40c0c023b00b8fff2b40d0d023b00b8ffe4b40c0c063b
00b8ffdeb40d0d063b00b8ffca40120b0b063b0000350f354035cf35031e
2c1407b8fffab41010063b07b8fff8b40f0f063b07b8fffe400b0d0d023b
070d0d0d063b07b8ffc4b60b0b063b07643410f62b2b2b2b2bfd325d1133
2f2b2b2b2b2b2b2bed12392f2b2b2b2b2b2b2b5d1239ed2b003fed3fed12
392f2bed393931302b015d01140607060623211121321617161615140607
151616013426272626232311333236373636133426272626232311333236
3736360489544754c098fe55018b9f9f49504a6f628592feec2428307668
bee15d582f2d264630492f6f66e1a1829639383401c96faa37423705d115
272b8b5e69a62f0824bf020d364f171b0cfe4c131e1d5efda1546d26190e
fdda18272763>Tahoma AddT42Char 
Tahoma /CharStrings get begin
/B 37 def
end
Tahoma /Encoding get
dup 66 /B put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTL+Tahoma*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period /slash /zero /one 
/two 3{/.notdef}rp /six /seven /eight /nine 7{/.notdef}rp /A 
/B /C /D /E /.notdef /G /H /I 
/.notdef /K /L /M /N /O /P /.notdef 
/R /S /T /U /V 10{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /.notdef /w /.notdef /y /z 
133{/.notdef}rp]
QNZHTL+Tahoma nf
QNZHTL+Tahoma*1 [0 -16.98 -16.98 0 0 0 ]msf
385.44 117.66 mo
(Cg)
[-10.2067 0 ]ysh
385.021 86.5204 mo
(StreamC)
[-9.4563 -5.66962 -6.11108 -8.92981 -8.91266 -14.2615 0 ]ysh
362.52 61.3798 mo
(Brook)
[-10.0166 -6.12805 -9.23541 -9.23541 0 ]ysh
343.14 47.76 mo
343.14 48.9 344.04 49.74 345.12 49.74 cv
346.26 49.74 347.16 48.9 347.16 47.76 cv
347.16 46.68 346.26 45.78 345.12 45.78 cv
344.04 45.78 343.14 46.68 343.14 47.76 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
343.14 47.76 mo
343.14 48.9 344.04 49.74 345.12 49.74 cv
346.26 49.74 347.16 48.9 347.16 47.76 cv
347.16 46.68 346.26 45.78 345.12 45.78 cv
344.04 45.78 343.14 46.68 343.14 47.76 cv
cp
@
367.92 90.1201 mo
367.92 91.2601 368.82 92.16 369.9 92.16 cv
370.98 92.16 371.88 91.2601 371.88 90.1201 cv
371.88 89.04 370.98 88.1401 369.9 88.1401 cv
368.82 88.1401 367.92 89.04 367.92 90.1201 cv
ef
367.92 90.1201 mo
367.92 91.2601 368.82 92.16 369.9 92.16 cv
370.98 92.16 371.88 91.2601 371.88 90.1201 cv
371.88 89.0401 370.98 88.1401 369.9 88.1401 cv
368.82 88.1401 367.92 89.0401 367.92 90.1201 cv
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Tahoma-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal Tahoma-Bold gcheck setglobal} if
1 9676 51 <0002009a0000051405d100130025004e4020350535234505452375057622
061c350a0a0c1b350d030c085700670002141500b8ffc040110911370000
270f274027021b0a140c642610f6fd325d11332f2bed5d003f3fed12392f
ed31305d0114060706060706062323112111213216171616053426272626
2323113332363736363736360514423e265b37378150c4fe8a024281bb4c
545cfe803c2a356153351a355e231e4312261b03fb68bc3f274217171afe
1905d12f3338bb8a3f5b111707fe420206051d122550>Tahoma-Bold AddT42Char 
1 10452 54 <00010049ffe504ec05ec003300cfb9001fff5c40520e103705a40e103705
110a150a2b052f15111a151a2b152f35063f103b123918361f3a20332a33
2b363245064f104b124918461f4a20432a432b46325a0c5b105b16542a54
306c13662d7b11742b7430241cb8ffe0402e090d370220090a3720050120
052f1e020917011728310e04001a1e1e22341a0270050105050834000a1e
1e0e1531b8ffc04010091c37313135040428159017b0170217b8ffc0b30d
1037172f2b5ded332f11332f2bed332f003fed332f5d3fed332f11121739
715d5d31302b2b5d012b2b05222427113316043332363736363534262726
262726263534002132041711232626232206070606151416171616171616
1514000266abfefd6f2270010e7f2069202736583d4cad4bad9601620109
850107682153ef7e314e2b233351744b8b4f9b97fea31b423101625f660e
0f113d3238461014241a3dce9bd10103362efeac47620e14103f2739431b
11201c38bd9bdefef200>Tahoma-Bold AddT42Char 
2 14682 179 <0002ffe603c7038b0614000300070059b5660366070205b8ffeab30b0e37
01b8ffea400c0b0e3704010701020100b202b8ffec400e090e372f026f02
7f02030204b206b8ffec400c090e370220066006700603062f5d332bed2f
5d2bed003f33332f333130012b2b5d0123012101230121038be0fef10152
fee7e0fef1015203c7024dfdb3024d00>Tahoma-Bold AddT42Char 
2 14818 180 <0002005f03c70404061400030007004e401d690369070205160b0e370116
0b0e3706010401030100b20214090e3702b8ffc0400c0c0e370204b20614
090e3706b8ffc0b40b103702062f332b2bed2f2b2bed003f33332f333130
012b2b5d01012313230123130404fef1e09d64fef1e09d0614fdb3024dfd
b3024d00>Tahoma-Bold AddT42Char 
Tahoma-Bold /CharStrings get begin
/P 51 def
/S 54 def
/quotedblleft 179 def
/quotedblright 180 def
end
Tahoma-Bold /Encoding get
dup 80 /P put
dup 83 /S put
dup 147 /quotedblleft put
dup 148 /quotedblright put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/QNZHTM+Tahoma-Bold*1 
[32{/.notdef}rp /space 14{/.notdef}rp /slash 19{/.notdef}rp /C /.notdef /E 
6{/.notdef}rp /L /M 2{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp 
/a 2{/.notdef}rp /d /e /f /g /.notdef /i 
2{/.notdef}rp /l /m /n /o /p /.notdef /r 
/s /t /u /v 28{/.notdef}rp /quotedblleft /quotedblright 107{/.notdef}rp]
QNZHTM+Tahoma-Bold nf
QNZHTM+Tahoma-Bold*1 [0 -16.98 -16.98 -5.8073 0 0 ]msf
410.52 137.04 mo
(\223Stream)
[-8.32867 -10.7737 -7.08911 -7.3949 -10.1115 -10.1965 0 ]ysh
430.92 132.06 mo
(Programming\224)
[-11.1796 -7.39319 -10.5005 -10.7042 -7.39319 -10.1948 -16.2226 -16.2226 -5.15173 -10.891 -10.7042 0 
]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/QNZHTM+Tahoma-Bold*1 uf
/QNZHTM+Tahoma-Bold uf
/Tahoma-Bold uf
/QNZHTL+Tahoma*1 uf
/QNZHTL+Tahoma uf
/Tahoma uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
