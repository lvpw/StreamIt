* grant numbers
* check acks with stakeholders (gordo, rodric, karczma)
* related work
  - add umich and ibm research references to conclusion and intro (as users of streamit)
  - general diff to brook 
  - peeking has been done before
    - sliding windows were in Signal (1986)
    - looks like SA-C has sliding windows (1999) yup.
      http://www.cs.colostate.edu/cameron/SACoverview.html#Anchor-Th-17671
    - blocking them (paper sent to mike)
    - check language in intro, summary, conclusions, etc.
  - diff to sh (they coarsen granularity)
* fix bibliography
  - cite seneff vocoder article (from asplos'02) so it appears in appendix
  - cite Tennenhouse, D., Bose, V.: The SpectrumWare Approach to
    Wireless Signal Processing. Wireless Networks (1999)) for OFDM
* proofread
  - check correctness of compression section
  - check that messaging speedup makes sense?
  - check layout

----------------------------------------------------------------------------

Mindless:
. indicate messaging pairs on mpeg encode, mpeg decode, mosaic stream graph
. adjust lists in intro (stream benchmarks, SDF analyses, etc.)
. more CD-DAT references
n make cd-dat and jpeg look exactly the same in language section
n make pullSchedule font same as repeat_lengths font, etc.
n improve formatting of code (bold the keywords)

Probably not fixing:
n in language section, propagate benchmark numbers to summary
n mention StreaMIT pronunciation?
n Mosaic might have a [1,*,1] rate lingering
n continue app evaluation
  - more detailed characterization of splitjoins?  + identity filters.
  - explain filter / graph reuse across the suite (will require refactoring)
  - were built-in splitter joiner types sufficient?  what would have benefitted more?
n compare streamit GMTI to dynamically-extracted GMTI (or MP3, MPEG-2)
n check if messaging speedup makes any sense?
n mildly bothersome: the cache section is somewhat inconsistent about
  referring to static state of a filter as only instructions
  vs. instructions+data
n big thing missing: some review of the basic compiler?  stages, flow, etc.
n add section on embedding streamit in a general purpose language? mention java lib 
n it looks like the filterbank linear flops removed doesn't match pldi (but does
  match aalamb thesis).  check numbers are sound.
n copyright infringement on numerical recipes?
n redo graphs of sorts, a few dcts (missing hierarchy)?

Related work:
- Automatic generation of systolic programs from nested loops (CMU)
- Automatic mapping of large signal processing systems to a parallel machine (CMU)
- other things in research/streams/notes/reading/notes
- everything in my phdthesis/related folder
- everything on my desktop
- everything in my streams filing folder
- everything in my streams directory
- everything from my job talk notes
- everything from Ed Lee's emails
- lucid synchrone?
- improve comparison to brook
- onanian, j.s. a signal processing language for coase grain dataflow
  multiprocessors'', mit-lcs-tr-449, 1989
  http://library.mit.edu/F/U5BDSQEUGUH54XNE5XNDF2NCSGNXS6FI1VPIX9GH7UFG84HF8F-03143?func=item-global&doc_library=MIT01&doc_number=000399046&year=&volume=&sub_library=ARC
- papers to cite
  - Structuring Protocols with Data Streams
  - Protocol implementation using integrated layer processing
  - generating efficient protocol code from an abstract specification
  - structuring and destructuring protocols (thesis + paper)
  - a data-stream language for protocols
  - distributed stream control for self-managing media processing graphs
  - stream computations organized for reconfigurable execution (score):
  - introduction and tutorial
  - parallel signal processing for everyone
  - compile-time scheduling of dyanmic constructs in dataflow program graphs
  - ecos graphs: a dataflow programming language
  - static mapping of functional programs an example in signal processing
  - stream data types for signal processing
  - domain flow and streaming architectures
  - a constraint optimization framework for mapping a digital signal
  - processing application onto a parallel architecfture
  - filter fusion
  - partial evaluation for media processing
  - design of the promis compiler - towards multi-level parallelization
  - an esterel compiler for large control-dominated systems
  - mibench: a free, commercially representative embedded benchmark suite
  - piperench: a receonfigurable architecture and compiler
  - cheops: a reconfigurable data-flow system for video processing
  - PCI-PipeRench and the SwordAPI:  a system for stream-based
  - reconfigurable computing
  - piperench: a coprocessor for streaming multimedia acceleration

Submitting: 
- in 38-444:
  - 2 copies on acid-free paper (turn off hyperref, hypcap; remove extra page)
  - an extra copy of your abstract
  x complete UMI form (University Microfilms Inc.)
  x complete SED form (Survey of Earned Doctorates)
