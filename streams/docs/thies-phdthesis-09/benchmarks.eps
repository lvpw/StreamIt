%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: benchmarks.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:38:11 PM
%%BoundingBox: -1 0 463 649
%%HiResBoundingBox: 0 0 462.4379 648.2589
%%CropBox: 0 0 462.4379 648.2589
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4122 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)"
   xap:CreatorTool="PScript5.dll Version 5.2.2"
   xap:ModifyDate="2008-12-05T23:38:02+05:30"
   xap:CreateDate="2008-12-05T23:38:02+05:30"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:558ebb7b-e655-42e2-8f3c-c35db277f22c"
   xapMM:InstanceID="uuid:9f060f86-1b43-4f46-a9c6-5d759ad52975">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">benchmarks.xls</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Bill Thies</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -648.259 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 648.259 li
462.438 648.259 li
462.438 0 li
cp
clp
[1 0 0 1 -70.7577 0 ]ct
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Arial-BoldMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation. registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Bold) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 65 /A put
dup 66 /B put
dup 68 /D put
dup 76 /L put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
def
/UniqueID 44341 def
/FontBBox {-167 -250 1006 939} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 355 -210 -197] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [109] def
/StdVW [137] def
/StemSnapH [109 121] def
/StemSnapV [137 144] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
23 dict dup begin
/space <1C60D8A8C9B854D0F4790807CBACD8FD659970B8> |-
/A <1C60D8A8C9B6079F193403306BC71AE1BBB65449E4A2D90B53F2083B0B22
D1D6D82EF2751F9408D471EC2CA7C793C3A436197F1511CCAA6243CEAE586304
428F3A0E6F597999> |-
/B <1C60D8A8C9B6079F435CD302861DAA6229412F5FA101CA810DE86D18C58C
DAD5CFA3C73732FD68B56427907C3B94A29033AC2EA791C88B5A35BAAB6BCC73
3C1DEF9057183BA13744EEE90EDA67274BB5712DF9D1A9B7D162B1533322A191
9EC8A1C3FFE4EECF68D814324EEBED5A1260322CAA6D653D0BF6A45B7D040848
1970B0313CA16EB9ABDEB0E51C740D9A818BCA3E98AF498E65FEB015D226BB04
D0A4502C6E28BF4CE135704C308A6C540F9C74721D0B610525A3961268D9A2D6
C00E83E08AB607FE> |-
/D <1C60D8A8C9B6079F435CD302861DAA6229412F5FA10E9B9FE075C49337BB
F723E728CE163F54DFDDA1C67A6C183AFB1416A5570D0C59379FB1573872CF6D
C45001BD010DF8B229A36662EAD8D156F10289EA53AE5FBB28F40A3EC95267DB
FA0D> |-
/L <1C60D8A8C9B7D8BE3737E72EB9C380B2A1EF42496044DD422AFC79560B22
A3CCABF6016D4819E0> |-
/U <1C60D8A8C9B6079F435CD30286354F408E71F4540349219FD73143638126
F864AC327F7AA3E0427861D12B03391C5EA9757D65BFDDF1BE05A15457F4765A
C8B769DC223210E11741B859F2061A59143F5CECC010E3349DC4EF98> |-
/a <1C60D8A8C9B7EF326DB97D6F43409870DDE68B36E786E1CEB8C520798D75
A089914E6D50A78DBDE606DB1E7A7A8A7E9EBB3907821FBB6528D5604AE78DFC
F7C60D51B8097B66F1ABB013D9B0783FE79A8A07EEB9D0E55921B5EA14136EF4
D4629A27554D96FEE6DC8B31E0625B1401D62376758CA8D1FE53560B6C98E394
A2FA3EA31E7F994C1FBC689A2BB92D1634E7FC7597B84CCC44D98860261A174B
D9B54FE8C42C72F0CE477BB0756B270C987530EE723AA3D0D89B094F519F7001
647A92AB31595C> |-
/b <1C60D8A8C9B7D8BE2E8969E41767A50AC5667D3B64010783805F48F72157
1532BCC161DF6CE2C0DF9545B37E4D11132F9C0BD39E22C92B3FC86D9CE5DA95
A3D93F38AE09235C108E4BAA0F762F5FD5B9DB5E618BC7FEEEB85393DF015C92
42EB05F211CDC010CF2078AFE05DF19DFBF3243EBD9E123A5AAC9CA5EA6CE250
53799CA79AE1D8> |-
/c <1C60D8A8C9B7EF326A1572E83D714470118FDB578BF17067C3D6074E5867
EBE537A9330F0B16B9465DF152DBD1446ABD0FF4A160712BE2CB96FAAE20EFDA
96F75F80042DA3827757BEAFB3CA088896EBEF2A6C67A840982C0866> |-
/d <1C60D8A8C9B7D8BE54D5898D0F1241BAF5CE10A639D27365AB0DE8F0649A
BD4BD5D80C84B14C6B3DABEDB581BAAF2E659E1D99336B93D073BA229F593ED3
D237ACA024AE0716833AE6B4D65F3D22EF0AC9A5CC74593FDCBB8D8727D8DAB3
EDC76C00329856A8FD551FE0F30DE401254996F6961AFD368B3F3D2134441595
55C32186A0DA15365A2B898181EF8324BB009725C41F9F450D890DD24A735F22
C38FD32A84AB9FD3FBDAC06F3A548E5FB76C1F60E76F06EE546B6ABA16ECAF09
0618BF9E24E58B48D86B> |-
/e <1C60D8A8C9B7EF327170CEA4018476226C697B4144AC96594938D62BFBFA
88A2435693228FF048F202912B04439DD491C783E3C9EDA3A0ECF0A9763B2DA5
61371E6C00F9929F77F043560BA16BB7BCD3A5B5FBA94C358937B721512CC833
A6D9E0F4C499FF052890E101427575BE8CD6602A95B8> |-
/h <1C60D8A8C9B7D8BE30EC60D657F53493D6A9005A307158F1312B9A48ED7F
5A4BE2BA7F405DA4BA80093FC29024643F661785C633DB7B9A56502C85C0AAE5
0F587FF572B87331864F867905837D687C95CFFF0B33663829851B> |-
/i <1C60D8A8C9B854D0D10D4D348B649B6FF4ED290F8DE2C6F987DAC372F583
5820362D4099CF3F8BF6A4DCF04A7640C7AA37> |-
/k <1C60D8A8C9B7EF32134C2EA17A75CFD15615538081D9C00907C7C391B439
8EA100587F3D0F95AAD3BD387EEFE443D0782C2F6197EA114AA16204E97138D4
2FCA82F26754> |-
/m <1C60D8A8C9B59F85DABCEED9E2B55A82FCE33D33512D09C488E4202F4B8C
841DEEB7C6815BB8BAB99EFF5558A1EC6E19D3A918855F92406B7568E5E94C76
D9C7886C30D62B0C6F7D79708144CB267ABB419520058D24F7E10A99D890843C
A8501EFC4D1DD6CCE757E7A8BEAB149C3B64658987F12F8586D084DD13A0F1BD
D17707C2992A601E7947C7EDADD7C01E63AF9EB29D0797677C3ADD6695A042BA
0E321A68E840092B8D00EE27BC491F2791> |-
/n <1C60D8A8C9B7D8BE311EE1D5AD9369197FDEA8E999B7FE1D92C1E7368175
09C153C8825C21AF043584B3C7AB318B54A4375FDC168F0AAA42780648DE7B0E
E6000E7A12C12CC6A6D9318B94056D8EE48D4652C631D30EC08CC082E5EC5436
405E13CA8F20648C0066A19A2EABBAF7F341464B3A3A214CC2FCDFB0487F3B94
1FFB8804CC351FB575530108E5D9617963BCF8> |-
/o <1C60D8A8C9B7D8BE501F5C8FB2FBA72D8923E47835DE04B22A6DB6CD384A
8F505FD4DB2070BE21A07902695A4B01FE95621D4795A955A214F8A522B40E7F
49FC473B0C330EA40629155ACC203AB3D22D764D7002A9F475F185DD03> |-
/p <1C60D8A8C9B7D8BE2E8969E41767A50AC53DB864890F8AC4DB5FFC4864AA
9CFB9901D942AA1EE14992E778D2D546105E1240E0409DA6B2235C9A673AB724
DB51D485B2313D5C9592A2AA32B34AC9A7F78B4DF9E416924A27C6FCA9D3EEC2
A0B3D0F0FA2FE27D6217E678CF3187D2A8B8701F4A150C604DA2ECB34E742B81
55857713AF16103FD8900AC6D68B9EA979E837394C08D3DF4CEEC1DF2C05FE9D
CB7D5C3EF3C33AB755F40D57404D635BEB3C73A7ADEE00FCD36C54912F7D4DCD
219CB47430A21E8D6E03C6> |-
/r <1C60D8A8C9B7361F3A2E2EA543DCA8575071FD31784B4748C250AC0B4D39
056998178576FBEA7C529C1AE8759F8FD6FF2D6A8EDF25FCBB23C7E2E993575B
970C791C6D557486F04956E12464BB4F3640FB1D9F5678F71A545AF506F8A208
D3469C> |-
/s <1C60D8A8C9B7EF321E6D62106D71367A30B92B79921F3B990CD6460AD600
F2C8A6FD77E2623F886FB64866A4819705B687650A9EED80C7AB2F37F2310234
6BE9E56CDEFED10A033E1015835DBED2258FF415A2EE3EC3CB9E3D8BC8E48FB1
9637F96518BD7F873BD31905E290B05414AE5BA1E97DE5CE72A46C64C9962757
16A7E487FAE966> |-
/t <1C60D8A8C9B81F2C14E05CE4A197E2108EFA556D82D4CBC77481E17DCF9B
9D8D9068CDA17B502BC71DA7C6F937765FE6AADE863E87299714A1550013E8EA
F90212914FD27571E22A8C7E69815A1556764DCA9CCB40C26B0BB1E0782AFF> |-
/u <1C60D8A8C9B7D8BE30EC60D657F53493D6A9005A30D66A5EF6D35D0F7DCE
F50CCE4574406031EA587157F01BD3B08C2A7AEEC0BF96E018E0D0D63956BEB2
63C3EA7254A97F7B297731ED15D642B722A623E0069B961F11DBB791516B4722
8DB7F76B9060753A620DBDFA0D2F0C7E3B2E1915C724CFAB766E> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LVUVOU+Arial-BoldMT /Arial-BoldMT findfont ct_VMDictPut
/LVUVOU+Arial-BoldMT*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /B /.notdef /D 7{/.notdef}rp 
/L 8{/.notdef}rp /U 11{/.notdef}rp /a /b /c /d 
/e 2{/.notdef}rp /h /i /.notdef /k /.notdef /m 
/n /o /p /.notdef /r /s /t /u 
138{/.notdef}rp]
LVUVOU+Arial-BoldMT nf
LVUVOU+Arial-BoldMT*1 [6 0 0 -6 0 0 ]msf
73.44 6.82404 mo
(BenchmarkDescription)
[4.332 3.336 3.66595 3.336 3.66595 5.33405 3.336 2.33405 52.7352 4.332 3.336 3.336 
3.336 2.33405 1.668 3.66595 1.99796 1.668 3.66595 0 ]xsh
387.36 6.82404 mo
(AuthorLibraries Used)
[4.332 3.66595 1.99796 3.66595 3.66595 44.1133 3.66595 1.668 3.66595 2.33405 3.336 2.33405 
1.668 3.336 3.336 1.668 4.332 3.336 3.336 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation, registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Regular) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 57 /nine put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 122 /z put
def
/UniqueID 44339 def
/FontBBox {-222 -250 1006 922} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 358 -210 -199] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [72] def
/StdVW [88] def
/StemSnapH [72 85] def
/StemSnapV [88 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
57 dict dup begin
/space <1C60D8A8C9B854D0F4790807CBACD8FD659970B8> |-
/parenleft <1C60D8A8C9B81F2C0AE10AF89E3640E5FA79D7BBCA6A55D92CE2
2B86ADE2026877CED638BBD1D038B6C5AE7C6B3A0E455DCDF62CCEA75767688A
69D21C517ADCEC9A0C655792B4578CB6B74D47> |-
/parenright <1C60D8A8C9B81F2C3AF105008BF4C14977A5391C97502518193
ED7EC3F60D4E4A6A615277E5A76DF130278E01F945101C3D52F6F19B3C51C139
EAF392FE494F85B575CEA750D305AD09C5B0136> |-
/plus <1C60D8A8C9B7F374892CE9FE6A3CA4C7DB992F62DF7147786F7E7D77E
AA4CF7C1914D460E70D00E467396B000E8E4C160CFCD97D> |-
/comma <1C60D8A8C9B854D0E60655E7F7F9E83D757EFA35086EED0E1F7E8A4C
D57C31A7DF335284A0C0F1E669> |-
/hyphen <1C60D8A8C9B81F2C66C118D247F858C73C47E3F4E6A6D96F995D033
A910C> |-
/period <1C60D8A8C9B854D0E75742B9D043C6A41D6AC2C1AC7FD995> |-
/zero <1C60D8A8C9B7EF3264E9A457F3D33D6290D3A89A0F9EA99B935F291ED
EA5F36814FC71C8696CF8866C4D705094EB17FAF968E3B08837417D9AC79839A
3608C771C6D331E60F1D30D7E8C4166F3CD35B73496A3A8C8196A69E41679> |-
/one <1C60D8A8C9B7EF322BA6DCE9BD5DF3DFF7C357023322936E9155634E4F
EAE48170BD90CB497150A64DE8E375FCCE900D> |-
/two <1C60D8A8C9B7EF3267924C0E841D844D96E52D213648D8C77257F2277B
A4C41FB5CAF249253485C39B4DE4DC6EDB2B1015C856CF7517B514C527C22A86
B6B9D1C6F1114C96115314170D8261584309E37DE43EA36E0BC6C93BC2D7793C
3C49D34F50BC163C785C4D45779EEA84466CA0BBF46D1A8CF13659> |-
/three <1C60D8A8C9B7EF32244785CEA209A0B1AB0C166286B08980771F18A2
E624A38924FBFF483B4270DC9D2DC0993B70234B4EC1271E14F4287F0E8138B3
113D3A2C3498A3A798175EFF8586ADBE42A40FAC722F4FFCCFD944A826B23E73
4742DC56E9B6688C0E5FD7D21A139B312D91D5BDCE396FF7BBECCF42DB4AFC88
249D903E724B304FA10CF534B30789F272BA1A52010A84503E2C2B5833B0AC24
972C530E56F2DDCFAF7F3D2938A2BD7EE7BA1ABFF97A9E066AC38570B8> |-
/four <1C60D8A8C9B7EF322BCC006C030AB64D3EF833D53BD938867216DA205
B962D9925E09EE08B8DF37F6D3209FE507D562DC51C880758EA796E486DE516B
D20E232A65BA2969E> |-
/five <1C60D8A8C9B7EF32244A3E5F405B6D31E38A8EB7FBE5BAFC15835DF10
683C93AD804B5613AE64B5A58D8A22AA4318A2891CDF2D9FA16ACA439A9E54B8
8A475D9ABD1CB4EFDCF42DF6ED8297C59B8090B6E4B555FB696152B8F5A84767
58BEDA9F9B241E9B4EA7BFF7E> |-
/six <1C60D8A8C9B7EF3269F625B6673B9EA52CBA62CA672C606BDB5B836B17
C2CE80FAB2D897CADEAB175E6C7DC01291E9F7084B4CBF4BC2C2DC4CD8B1CF88
C1312A30A6A1D5F0021F394973BE4EB0C30E6B34C0E729C5127993481ED48F35
3CCB40BC49153F289F22306CD57489660BDF3D9EB6D0D1FB1EA6FEEC6C28437D
C20763E0A7D9F9FB> |-
/seven <1C60D8A8C9B7EF32678F87B9D82F33C2763FDC174393BC303A2D81AC
CE93232B948D7D44A221C1A98883F594CEFC6F8AFF7961EEFD185D08> |-
/nine <1C60D8A8C9B7EF326A070A65AA287C43A03B4D5F73EC727D97DC0FFDE
8DAE30E82E4BE1D073379A11D4FDDDCB8C8CD3A0A3F27971AE9B21760038F1CD
78A68C283D39B09C4A66CF65E0F779BC1F6F58D247BA8C08230721BC535F69F0
9F20FFAB5EC9E9C699029E2E59CFE48273A61B0354A1A84482E9BD65E9FA84D9
D6B9CB6> |-
/A <1C60D8A8C9B64EDF8977515DB02E44D95543E9BEC95DDDCF0F21345E0F42
C2506841E85F5717164E0178CCC038B3D70AB38E2F87BC06D551137856AECFE3
168812213742C560A5BC35AA7F1A90401E384111AAFC95FC4FA6CA4410813097> |-
/B <1C60D8A8C9B64EDFD64EC1CDF4C66671F5ABC1DBFA2CA033B7D47887F2C1
96D36DF144B19BA964612FE540DF30FE33A0D90CFC4C72E8748F0E736CC330C5
8BAB9416B34F9BD17BC411FF1754E99C29319CFCF32A76BCD7CCBD9C7C8E11EC
1B51809BE491E7F15D7A6512C742DE70DD1AC1B752609EA789CB65265067D2FF
1FE160D25C56CC1EA900CCA874AD7D3C75D66B52A1A1CDF14C86C7C53CE808D5
16633456CEA140E2D671589013D03D2FE087858392B24DFC7EC6A1> |-
/C <1C60D8A8C9B6079F2BBCE5C47E75BE3527F6B78597E39EC3276E45713B0D
EC9B66AA272DF435296E2CCC0F75C8B0819E3C1633E0F7AC1D705FA6BD3380EE
CC5CA4565D21CEA33ED72F7AABE254D282E5A91A3F316BB024268DCEBBF96AB7
B424FAD71A20D1F69947AF7C173A23F918> |-
/D <1C60D8A8C9B6079F4E60D0639C32FEACC03B0DACFBD6AE5D8F6B7900D311
03A1800BBB323D9D74595B4166AA79FB875416694A4FB5440BAC276D3E62F0DB
C22F126BA4271411AE03FA02C599FDA80058B41925F18C1F5A71CB16C01078> |-
/E <1C60D8A8C9B64EDFD9FA41F8CC36958CDEA4DCCE5E9504179D5A3E85A392
73B22A442E4A2F78FF37332DF9EE59F39432625F893B773CBA08> |-
/F <1C60D8A8C9B7D8BE3AC1DA04C2E27D2663A4BBBCC06FF4E8940D746F72C3
1DA8A76704B4F2529FC129DF90FD06E05664C365> |-
/G <1C60D8A8C9B6FF86BD2B36A2682275E9FA60B02780929EC0D83DDC8707B7
093D25704C8887D3840E8B3E7F2036B616B69C938C5FB020A02C600101605727
B7178FC03F0BEE55ABB067B5181E45F78900BAFD1AEE443C7A3BCA9CFC573E71
2F4109D1E64DA6E4FC31DFC453FD238A955489030E968F1A4AA0> |-
/I <1C60D8A8C9B854D0E4A6262EF3DF16941D2CC64C813A21E5AA377D59B3> |-
/J <1C60D8A8C9B7A73DE8EC8C61A173D98F35584D13763019ADE1DC76584026
DEE3538BB89611839C0C7A96C8523DC94110E2498C5608033B35A96CB7124756
26D55BAFC8B6CAC5> |-
/K <1C60D8A8C9B64EDFD799D56F8FC9701C457210134CB97B19180256F5DA70
BDD4C7295B1A7DC947D7236A120B9927B9CFAA64FD09EFF50FB4DD372E2CD728
3C> |-
/M <1C60D8A8C9B6B41C9B4618E51F265BD84159AE0981501CA373679B285971
302A86BCA2434DB6EEF255F4E2EDCE14EC2FE5B5F5D63C7F5423CA1AA73A85F7
A2DF84E5C647F2831D14DFD49979B2307A88930CA27D15204D595BE7D4E80328
D58B10B2BB19D96FBD7B7040F861EFABCB7793EAD2AF289E6421> |-
/N <1C60D8A8C9B6079F4FBD68EC25315F2E333858CC86CF15AC412B9F98F2BB
1EDC180807AF0DA3260EF1DD02E3379E3FFDA5BB12CA07329F8D948A38F6CCD8
834A3B7700C4F0D7FF27645031AB589E88B401539C133A13D96DA85499> |-
/P <1C60D8A8C9B64EDFDB46508B03C1BA6617F29183AF5EE7DAA30A7F3EAEFD
6705D076E189BB1A87CDB7C450A455C6805A14C586D23F384F91EA7EE81F47D3
E589D76281953FC78FC31419C210C171DEED3AED0423B40B0A22D7EF236E1666
D38D1CDBA171> |-
/R <1C60D8A8C9B6079F4E60D063F0767E7F02FAC09A4010F4F0744E7BB7FD45
5FB6472FCC081F13976DD2CC9C30E89BAD096507542A0B90314DE7A4367ADD1E
412A0C92B1370A0844B40884679F91D8D6B7B5DBAD4EABF06DB35B8498117918
0699157C2C0BF36C5D1BFA24B06C1EDE922D86E780BE47A7050C9F38AF083E0C
F03CCAA0FF> |-
/S <1C60D8A8C9B64EDFBB3A5B862221482F2D53BE6E1EB4E35A4CBE07CB5C2D
64D2D07C0CC147AA531B7B80CCECF41634AEE57E633F1CAD7A5070EC14A23719
E1718E2C3429E8CFDC3FDAD6D7218E028544DC28ABE9439F7237BD95D394886F
451B091A081226B3D24DA505E271E50F3BFACB5C6257058EF7790EF0D3FB9FDE
B0643BD72FE6EF11B4F4745C85FF3D18441D7C3B9FC7E7DD2AF1F9AB6DA890B5
3CB95B1E78E6726A598D9B> |-
/T <1C60D8A8C9B7D8BE16B1D13146B900C9D9FC54E41477185687A83686CBE6
5FB0B29E1AC69D892699EDA5> |-
/a <1C60D8A8C9B7EF326DA7DF6E992BB0067378CC2864443DD75F40C3F59BFA
E780442B93B6E9E205685F556603FDD13F43D7CFBA44B5FD94B172C1BAEAE134
90EC3F3CBF4B3033E0CFFB04D712ACAE53AC93BF916BCE432A2C3D908CE096B9
470EA658F5F9B573FFD8FE15CC5DA0E3B4E98C53A962DFC58BD092E98919B03F
2DF5CDAD8B352EA1AE212E81DCE57F9D7572BFCCB2BA60A4A5C55A7B7D088869
29F7B538F6F40182A00EFF18601643CDBDB7C59D7FDE2FDC86297A0526C719D7
1338> |-
/b <1C60D8A8C9B7EF32120E99BF5D6FDFA51EBA929839068E186A7585CF179D
244BA0D588E65EBBB54420F952448D4C61DAF9F2A6CDA5B0E462CC5E57DE3F1F
11ABF2DB3178023445F95D57E212CA3ABC0A1F66804EAA458C64AB599AEEC1F7
6389CDECEFE4DF62CF692E9473CEDF02EEA259C34C06F7D6C8BE8CD2FE7AE1BD
E16E05B4B0D10B1E46A889B8DBD1A50EED11E65B782E1E6169CEC85C3BA8E2FD
357543C750C79E7A94AD6F39869D668D6F86BD306947AD0A319F9342857BCE61> |-
/c <1C60D8A8C9B7A73DFCC965B95B407B63A21A323AC35889E4BD58B575823F
3D4C1849E342B371D24262A00F1B2118FF5BEF66219ACE8843324D9DE60D5A0C
40D6B21D6BB545548D091BEA6C08BFEE3773C5CA8BCA4E16C0DF3B738B5B4CA6
F12725C716> |-
/d <1C60D8A8C9B7EF3273C171068F62243BF01CC0C4D8381A7B2A867BADD60E
EBDBBCFCC2F160DF11BDB7215B491AD7372B807EAD45F0EB713C717DE04C81DC
09113D38FC1FB63D793773AC6DBAE4611FE34B05C715FE44AF0E3CB2174BCD4B
F27A94E00504EC9EC5ED70070823B29317827C565409EA89B7820A022152> |-
/e <1C60D8A8C9B7EF326EF6294025B34AF8B77127E7F5CCDC823B159C13132C
3295CF49F6A5E65F9D32A6B27FFE75A3202DC7616AE9AD8F25F262C93EB25396
788B17C2E53B1B8B0A6290B9834F52C8CD0E8836227E2B0A022437C715658851
A54DA2FE5AC89A0FFE5C038A14D6FDB4> |-
/f <1C60D8A8C9B854D0E25300C1033D084D3E3FA81917E5ADD0B9DA1351F7FD
3AAC2B70EF411921F694858E04249D9A8BE20511DC688639D3DFFABC674C2916
DC5B30BA73BC052CC06B98539BA221A7B290CC957DF864585C60D269558E77F8
A5665EC838BC3CA3E7B7D796FF> |-
/g <1C60D8A8C9B7EF327162A0E60DEADFC4B71361DE17F3AD9FB4F969218EFD
9B98EE4AD3F5ACD5F672F213D044BBEEED89EBDDAB7DBE036D1A33D4A3E36E30
BD6ACBDFC7B895FD67DBFFC2DCCD8F029AF9A8D463D2017E62B2B24BC48A314E
98D224948385897F08D68B6A608A8AC850FEB8FA1430D9D80A70CBD24E459805
E5F67372A3BB992C8607CF47679AE0B13147AC8AB721879D5078B035826B670D
317DB6BF95F3193D61C90A3EA0C99AB8ED74AF6617CFA5889BB7C23B99A42272
15> |-
/h <1C60D8A8C9B7EF32120E99BF44821945DDC2B4EFD38037A015A75CE173B6
AC0B36FA7934ECB2789D63BE76D2E6D4AB6FB403DBC988B8E6745C79D28C1F4C
9AFD120F64FD9576BF5E839856324CA83C437F59568D46BC0A0523> |-
/i <1C60D8A8C9B88C084B70B34E18F97CF1997FF6644A06C3E9D2A9D91E0589
7D24E504390D1AACAF3599CA> |-
/j <1C60D8A8C9B88C084B70B3153F7F27B811DFB92B1332F2D1C9B310C0094E
D30A4833236A69F339AC008A7AFF844465300573D24BA4AD4DD2B055A65513F9
2B898EA14E86855C3CD067CC57A55BAFC6E4D013C8BDA72AAEBED91D24> |-
/k <1C60D8A8C9B7A73D83781950B4D038AC57EA363B4AB0970C5F471D898D29
03F7B639BED95ACE9D7946BFAC8330F32FB34EEC2D828BA2215C06E943604BEC
FC5CDF> |-
/l <1C60D8A8C9B88C084B70B34E18F97D598FFC8BBB87271DAB31AE82C7D5> |-
/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103ED63F6704BBF19B
FEDC611823F708F8CDC822B4765D0EA33D8918C5115C458B26634AC5E2670C4B
8962BBF3CF9C48946A0DC46F480672849B689EA7D57F5DF91E25DFD9B529EB14
2A1A839E512F7962D9E8B6440BB69ED272488E4A704361F8BFC3459B2DF3FCAF
F00E5B9790F065B3476716D31B338D> |-
/n <1C60D8A8C9B7EF321358E32ACCD81AA16D19D782C50D8000CD7A7C03D382
AEFC72232E29A1B08D01004D3E9E50AA00D3BA506AE663B158755F270EA082AF
3827056B839C61FDB7B509318DF83E0B8CA2F21F3DB8BF9A12D0B81EEC234F1F
3832DAEA2C1BF9B7> |-
/o <1C60D8A8C9B7EF3272B38E4A6C94951E5562623629B934E27FB2180BD8D3
F6BE8C185E818E4FFC52D5CEB593503DF4218821B72034CF2A9A1A709533B323
EFB4629DFAE9D5E18F3D4BFACB0FD28655332930944FE909D271FBC01B5A1CBF
248702BAFDF5EBE494117F5AB7> |-
/p <1C60D8A8C9B7EF321358E32AAA345A5AF7CCBB1B651263DA97D7C5AD4C64
3ABAC27108E1DC5F64D49651712DD7CE0160F049F6EAB9902AA41DF02BCF26FA
46D961F9B17F535020755D6B92404E78327CEC4AF30ECBF0272F4F90D10655F4
9F35FD26E66BF3BA885DEFB8EF681D39EDE55C6486BE902F809F2A18F9343840
2E800ADB6004F556B7630C5D9436F57AA86148630065BC5512A0B98761542B41
43ECE97D8275> |-
/r <1C60D8A8C9B81F2C062E4A14544392D75EFC1DE071A88148476E7F4ADEB8
F773ACAC5F6D1E41C9D8141AD151602045512C4C321BE5332ACD4A9A1A81F153
B5A575F3D6F73178CB085E6B21> |-
/s <1C60D8A8C9B7A73DF6B5A4EE8BDAC430AB40D072096BA1391FB87ABD8D54
3094852EEAF06243E7B5ADCF9C1EF5646B8FC5B51310596E132370ECE7C9D12E
2BFFBF299CB441CA112192E2BF1E03F6D4324D162B40F907462F1CDA63BEAC17
54B4842C0FABDAE30E17E7E60566DCCF4C8EA4CA26C6ED> |-
/t <1C60D8A8C9B854D0DFA7F3C3CFE997A880BB6118223EC140BB1D072976EE
7376E92C1688A186F47CEAAFED94409C37AA8625569840A3000DBDC757F1162E
2C0A9076C5CFF3F8D5838450BDCD> |-
/u <1C60D8A8C9B7EF3211FDB400F617E7ECE548A197892E72A9234771BE08CC
6A8D56A742A5122BE141318E124044E0D30B7644714B00B3BB9E61860FF6B41C
B17A850FE04ABD34133958C1F083E2DB097DB78C54871A4F3A0E7E828AD0BBA0
152EE27D2C480103CEE5B367EED1D0AF3404> |-
/v <1C60D8A8C9B7A73DD670D8CCE0234201EC3AD84A54EE34C4FD7DB23A3EB7
0267F978B174D45344F2D200D4642C2B282F7C63098E852FCF0F744206601558
80D950D3A20BE6063D141970> |-
/w <1C60D8A8C9B6079F0554428DD2722D7B886074B66801AE765D865D3A567F
8CE0BEC00B52F6A95B62A0B1F50A88B966A535ADB260E0918D96ABE6A0F45C93
9163505ECBEE08801069458D6E2BDBB599CED992E4DF5B396C718AB6F48AF3A4
1A8B86E407AF9633A703DB911FAAB1270F0AF18E9590BAAF46264C62E4035C95
310AC48893BA35998EBA7C94B2AC718847AE78EBEB4C9E25EF3D5BD07D64F106
362F8ABFAD9589757D7755282C8282D007> |-
/x <1C60D8A8C9B7A73DDCA69ACC039A7324A9F11A26534FD5F49B0943F1EA3D
460BE17BE972EBF8A1804F0B9CEA4BF1AB6C02F2A58F7013FBD2891146500214
AE893EF814CC1B353118B31DF90C3046B68F4A21D587C8F0AB8055> |-
/z <1C60D8A8C9B7A73DD17879DBFD9B7743800E320EEA5BAAAC99C8CDE0BEDD
149EBD4303B9E9FF7B55D829443418C7AA72872BB27EE4755A9DDAC5BF453524
9A5768F5E411E036571BB86A82608C47F5> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LVUVOV+ArialMT /ArialMT findfont ct_VMDictPut
/LVUVOV+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma 
/hyphen /period /.notdef /zero /one /two /three /four 
/five /six /seven /.notdef /nine 7{/.notdef}rp /A /B 
/C /D /E /F /G /.notdef /I /J 
/K /.notdef /M /N /.notdef /P /.notdef /R 
/S /T 12{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /.notdef /z 133{/.notdef}rp]
LVUVOV+ArialMT nf
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
73.44 29.744 mo
(MPEG2 encoderMPEG2 video encoder \(Drake, 2006\)Matthew DrakeDCT2D, IDCT2D4041)
[4.99796 4.00204 4.00204 4.668 3.336 1.668 3.336 3.336 3 3.336 3.336 3.336 
39.7224 4.99796 4.00204 4.00204 4.668 3.336 1.668 3 1.332 3.336 3.336 3.336 
1.668 3.336 3.336 3 3.336 3.336 3.336 1.99796 1.668 1.99796 4.332 1.99796 
3.336 3 3.336 1.668 1.668 3.336 3.336 3.336 3.336 135.122 4.99799 3.336 
1.66797 1.66803 3.336 3.336 4.33197 1.66803 4.33197 1.99799 3.336 3 24.4283 4.33203 
4.33203 3.66595 3.336 4.33197 1.66803 1.66797 1.66803 4.33197 4.33203 3.66595 3.336 25.209 
3.336 3.336 3.336 0 ]xsh
73.44 37.664 mo
(MPEG2 decoderMPEG2 vivdeo decoder \(Drake, 2006\)Matthew DrakeIDCT2D3961)
[4.99796 4.00204 4.00204 4.668 3.336 1.668 3.336 3.336 3 3.336 3.336 3.336 
39.7224 4.99796 4.00204 4.00204 4.668 3.336 1.668 3 1.332 3 3.336 3.336 
3.336 1.668 3.336 3.336 3 3.336 3.336 3.336 1.99796 1.668 1.99796 4.332 
1.99796 3.336 3 3.336 1.668 1.668 3.336 3.336 3.336 3.336 132.122 4.99799 
3.336 1.66797 1.66803 3.336 3.336 4.33197 1.66803 4.33197 1.99799 3.336 3 24.4283 
1.66803 4.33197 4.33203 3.66595 3.336 48.5442 3.336 3.336 3.336 0 ]xsh
73.44 45.584 mo
(GMTIGround moving target indicatorSitij Agrawal --2707)
[4.668 4.99796 3.66595 68.751 4.668 1.99796 3.336 3.336 3.336 3.336 1.668 4.99796 
3.336 3 1.332 3.336 3.336 1.668 1.668 3.33601 1.99796 3.336 3.336 1.668 
1.668 1.332 3.336 3.336 1.332 3 3.336 1.668 3.336 151.461 4.00201 1.33203 
1.66797 1.33203 1.33197 1.66803 4.00201 3.336 1.99799 3.336 4.33197 3.336 29.7606 1.66803 
1.99792 62.2146 3.336 3.336 3.336 0 ]xsh
73.44 53.504 mo
(MosaicMosaic imaging with RANSAC algorithm \(Aziz, 2007\)Basier AzizFFT2367)
[4.99796 3.336 3 3.336 1.332 66.075 4.99796 3.336 3 3.336 1.332 3 
1.668 1.332 4.99796 3.336 3.336 1.332 3.336 3.336 1.668 4.33202 1.332 1.668 
3.336 1.668 4.332 4.00204 4.332 4.00204 4.00204 4.332 1.668 3.336 1.332 3.336 
3.336 1.99796 1.332 1.668 3.33601 4.99792 1.66803 1.99792 4.00208 3 1.33197 3 
1.66803 1.66797 3.336 3.336 3.336 3.336 93.1224 4.00201 3.336 3 1.33203 3.336 
1.99792 1.66803 4.00201 3 1.33203 34.431 3.66595 3.66595 58.551 3.336 3.336 3.336 
0 ]xsh
73.44 61.424 mo
(MP3 subsetMP3 decoder \(excluding parsing + huffman coding\)Michal Karczmarek --1209)
[4.99796 4.00204 3.336 1.668 3 3.336 3.336 3 3.336 52.0662 4.99796 4.00204 
3.336 1.668 3.336 3.336 3 3.336 3.336 3.336 1.99796 1.668 1.99796 3.336 
3 2.99998 1.332 3.336 3.336 1.332 3.336 3.336 1.668 3.336 3.336 1.99796 
3 1.332 3.336 3.336 1.668 3.504 1.668 3.336 3.336 1.66798 1.66803 4.99792 
3.336 3.336 1.66803 3 3.336 3.336 1.33197 3.336 3.336 97.9266 4.99799 1.33197 
3 3.336 3.336 1.33203 1.66797 4.00208 3.336 1.99792 3 3 4.99799 3.336 
1.99792 3.336 13.4286 1.66803 1.99792 62.2146 3.336 3.336 3.336 0 ]xsh
73.44 69.3439 mo
(MPDMedian pulse compression doppler radar \(Johnsson et al., 2005\))
[4.99796 4.00204 73.0788 4.99796 3.336 3.336 1.332 3.336 3.336 1.668 3.336 3.336 
1.332 3 3.336 1.668 3 3.336 4.99796 3.336 1.99796 3.336 3 3 
1.332 3.336 3.336 1.668 3.336 3.336 3.336 3.336 1.332 3.336 1.99796 1.668 
1.99796 3.336 3.33598 3.336 1.99799 1.668 1.99796 3 3.336 3.336 3.336 3 
3 3.336 3.336 1.668 3.336 1.668 1.668 3.336 1.332 1.668 1.668 1.668 
3.336 3.336 3.336 3.336 0 ]xsh
387.36 69.2239 mo
(Johnsson et al.)
[3 3.336 3.336 3.336 3 3 3.336 3.336 1.668 3.336 1.668 1.668 
3.336 1.332 0 ]xsh
gsave
427.92 67.1241 mo
430.14 67.1241 li
430.14 63.4641 li
427.92 63.4641 li
cp
clp
LVUVOV+ArialMT*1 [4.02 0 0 -4.02 0 0 ]msf
427.92 66.2241 mo
(2)sh
grestore
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LVUVOV+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7EF320E563C3C84629D9CDD8EC54756AB4CA2ECAAE0CB
DFD538CB076321DF3BBA91DB406224E5032EC97EC52BE61522713FBC0651BB75
1F3B16D43FD62825691BBE000AF7C20CB461087E44EC6E9A6FBAB46C183F59BD
BC180167F908DE4267E999CAADD914887CF41A0B1EC39B73D41E641C2AE79DCF
9C4C58CD1DE18E50FF34AF2836D6B8335531D81763C3B33A41AE3BA501CC4102
BA27FFD4F5F3B39542F4DBCF3ACF00CC8FFA571889C16F2EE624EBAF6BF988CD
2084E149B894BC1BCC135C3882F8AEFCEFD298863E7CAF2BFCB723B0A069BF9F
5E786847D3D05AFFAB34F803AC9946B37ECFBAC37A942BF0FC8B6BEA45D122B8
2FE88849E19E8D24BDEB48E272B7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LVUVOV+ArialMT /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
reset_gvm
/LVUVOV+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma 
/hyphen /period /.notdef /zero /one /two /three /four 
/five /six /seven /eight /nine 7{/.notdef}rp /A /B 
/C /D /E /F /G /.notdef /I /J 
/K /.notdef /M /N /.notdef /P /.notdef /R 
/S /T 12{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /x /.notdef /z 133{/.notdef}rp]
LVUVOV+ArialMT nf
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
448.8 69.3439 mo
(FFT1027)
[3.66595 3.66595 58.551 3.336 3.336 3.336 0 ]xsh
73.44 77.2639 mo
(JPEG decoderJPEG decoder)
[3 4.00204 4.00204 4.668 1.668 3.336 3.336 3 3.336 3.336 3.336 45.0575 
3 4.00204 4.00204 4.668 1.668 3.336 3.336 3 3.336 3.336 3.336 0 
]xsh
387.36 77.2639 mo
(Matthew DrakeIDCT2D1021)
[4.99796 3.336 1.668 1.668 3.336 3.336 4.332 1.668 4.332 1.99796 3.336 3 
24.4284 1.668 4.332 4.332 3.66595 3.336 48.5442 3.336 3.336 3.336 0 ]xsh
73.44 85.1839 mo
(JPEG transcoderJPEG transcoder \(decode, then re-encode at higher compression\)Matthew DrakeDCT2D, IDCT2D978)
[3 4.00204 4.00204 4.668 1.668 1.668 1.99796 3.336 3.336 3 3 3.336 
3.336 3.336 38.3922 3 4.00204 4.00204 4.668 1.668 1.668 1.99796 3.336 3.336 
3 3 3.336 3.336 3.336 1.99796 1.66798 1.99796 3.336 3.336 3 3.336 
3.336 3.336 1.668 1.668 1.668 3.336 3.336 3.336 1.668 1.99796 3.336 1.99796 
3.336 3.336 2.99998 3.336 3.336 3.336 1.66803 3.336 1.66797 1.66803 3.336 1.33197 
3.336 3.336 3.336 1.99799 1.66797 3 3.336 4.99799 3.336 1.99792 3.336 3 
3 1.33203 3.336 3.336 58.4111 4.99799 3.336 1.66797 1.66803 3.336 3.336 4.33197 
1.66803 4.33197 1.99799 3.336 3 24.4284 4.33197 4.33203 3.66595 3.336 4.33197 1.66803 
1.66797 1.66803 4.33197 4.33203 3.66595 3.336 28.569 3.336 3.336 0 ]xsh
73.44 93.1039 mo
(FAT)
[3.66595 4.00204 0 ]xsh
155.52 92.9839 mo
(Feature-aided tracker)
[3.66595 3.336 3.336 1.668 3.336 1.99796 3.336 1.99796 3.336 1.332 3.336 3.336 
3.336 1.668 1.668 1.99796 3.336 3 3 3.336 0 ]xsh
gsave
213.06 90.884 mo
215.28 90.884 li
215.28 87.2241 li
213.06 87.2241 li
cp
clp
LVUVOV+ArialMT*1 [4.02 0 0 -4.02 0 0 ]msf
213.06 89.9841 mo
(3)sh
grestore
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LVUVOV+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D088EAD778E1B6FF7213E9210DE0A8E95DFC79C4D5
88384C94> |-
/H <1C60D8A8C9B6079F4E60D063F9364CB6995577B1039782AF569836662C85
F425F30A8DB92DC7B4CCD334AC92306185B5CECAF55D4D348A1BB8F81D> |-
/V <1C60D8A8C9B64EDF9236466E91B3A5D76F35C61C5E519EFA72F490DAEF36
561BE81F3096367E025BFA9D7CA7604F38E22541F1663461489D96894BB74136
8509ED79A7B312A2B601083C5FCAA2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LVUVOV+ArialMT /Encoding get
dup 47 /slash put
dup 72 /H put
dup 86 /V put
pop
%ADOEndSubsetFont
reset_gvm
/LVUVOV+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma 
/hyphen /period /slash /zero /one /two /three /four 
/five /six /seven /eight /nine 7{/.notdef}rp /A /B 
/C /D /E /F /G /H /I /J 
/K /.notdef /M /N /.notdef /P /.notdef /R 
/S /T /.notdef /V 10{/.notdef}rp /a /b /c 
/d /e /f /g /h /i /j /k 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w /x /.notdef /z 133{/.notdef}rp]
LVUVOV+ArialMT nf
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
387.36 93.1041 mo
(Ali MeliFFT865)
[4.00204 1.332 1.332 1.668 4.99796 3.336 1.332 43.4358 3.66595 3.66595 61.9109 3.336 
3.336 0 ]xsh
73.44 101.024 mo
(HDTV)
[4.332 4.332 3.66595 0 ]xsh
155.52 100.904 mo
(HDTV encoder/decoder)
[4.332 4.332 3.66595 4.00204 1.668 3.336 3.336 3 3.336 3.336 3.336 1.99796 
1.668 3.336 3.336 3 3.336 3.336 3.336 0 ]xsh
gsave
218.82 98.8041 mo
221.04 98.8041 li
221.04 95.1441 li
218.82 95.1441 li
cp
clp
LVUVOV+ArialMT*1 [4.02 0 0 -4.02 0 0 ]msf
218.82 97.9041 mo
(3)sh
grestore
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LVUVOV+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B854D0E60655E7F7F9F591B2694E5AF4B9E9D558E4C2E7
E3BB42FA60C73ED8C39D> |-
/L <1C60D8A8C9B7EF320A93069A93ABA30649DD8752D76D55ACC30C661B3ED0
5CAF59D1D9> |-
/O <1C60D8A8C9B6FF86B85371260B0136719D088BF407AD0A472F72831D31DA
7BF0D9715E78D6DA5DFB44A54441EF53B0260A3D4F03BB408831E0AE9C54CABF
2A4B219CCBE8BA9A9A37F6BEDF2A0979038A7B03ACBC2BD372B02B20A8B0447F
F3E8784C134935E3C0055E92BA> |-
/W <1C60D8A8C9B5D6EF221D1CE60D972FCF2CBA68DC7A8392C9ED8868B9DE5D
B2862F0433DEC8A0C8F32967567C7E476EBB7E438DAD3907575E083A992EDA98
2339E22481E5385714A058AC6E0D2569FC86040F82D948EF3D37B64140FAA9B3
4BEA0D39644AD6DDC1CC532CDAD14ABA79550378A62BD1136020FDBAC03D5636
7A37> |-
/q <1C60D8A8C9B7EF326DAB15E6B8DD43C07043A30A9E7D02FC7DDB1D8015D4
F8F0737414EA2E77AAF03B101050C13E965F0B2DEBF6D24C0A327EEB11BECE7A
F6A7DC9E1EA00DEDD015E5AEFEE2FC12BEB05050671B109F6750B070DD6ACC30
20A9261788F770939CF927DED46612BB77B23B795EEA1E9BD5892D8B385729DB
F16F50925DC3FB5E6CDDF42067232989A4A958F6> |-
/y <1C60D8A8C9B7A73DD541474E761A6B88B5FB25AF673FAAB86D3D3B06CF0F
DEE771E7EA11E3B595003274EC30647995D9CC896E925421106ABC2540062D11
122831B905F7CF0D35C6DDD15ED4FC285FE52F8A59E6608206A8D8E9596AB334
85224EC7B018F61788AC131ACEE93E23EC1A7B5FE7C3A8B53EAB567E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LVUVOV+ArialMT /Encoding get
dup 58 /colon put
dup 76 /L put
dup 79 /O put
dup 87 /W put
dup 113 /q put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LVUVOV+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma 
/hyphen /period /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 6{/.notdef}rp /A 
/B /C /D /E /F /G /H /I 
/J /K /L /M /N /O /P /.notdef 
/R /S /T /.notdef /V /W 9{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/j /k /l /m /n /o /p /q 
/r /s /t /u /v /w /x /y 
/z 133{/.notdef}rp]
LVUVOV+ArialMT nf
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
387.36 101.024 mo
(Andrew Lamb --845)
[4.00204 3.336 3.336 1.99796 3.336 4.332 1.668 3.336 3.336 4.99796 27.7566 1.668 
1.99799 65.5745 3.336 3.336 0 ]xsh
73.44 108.944 mo
(H264 subset16x16 intra-prediction stage of H264 encodingShirley Fung --788)
[4.332 3.336 3.336 3.336 1.668 3 3.336 3.336 3 3.336 50.0598 3.336 
3.336 3 3.336 3.336 1.668 1.332 3.336 1.668 1.99796 3.336 1.99796 3.336 
1.99796 3.336 3.336 1.332 3 1.668 1.332 3.336 3.336 1.668 3 1.668 
3.336 3.336 3.336 1.668 3.336 1.668 1.668 4.332 3.336 3.336 3.336 1.668 
3.336 3.336 3 3.336 3.336 1.332 3.336 112.428 4.00208 3.336 1.33197 1.99799 
1.33197 3.336 3 1.66803 3.66595 3.336 3.336 31.0932 1.66797 1.99799 65.5746 3.336 
3.336 0 ]xsh
73.44 116.864 mo
(SARSynthetic aperture radarRodric Rabbah --698)
[4.00204 4.00204 74.0748 4.00204 3 3.336 1.668 3.336 3.336 1.668 1.332 3 
1.668 3.336 3.336 3.336 1.99796 1.668 3.336 1.99796 3.336 1.668 1.99796 3.336 
3.336 3.336 169.47 4.33203 3.336 3.336 1.99792 1.33203 3 1.66797 4.33203 3.336 
3.336 3.336 3.336 24.7536 1.66797 1.99799 65.5745 3.336 3.336 0 ]xsh
73.44 124.784 mo
(GSMGSM decoder)
[4.668 4.00204 73.4111 4.668 4.00204 4.99796 1.668 3.336 3.336 3 3.336 3.336 
3.336 0 ]xsh
387.36 124.784 mo
(Jeremy Wong --691)
[3 3.336 1.99796 3.336 4.99796 3 1.668 5.664 3.336 3.336 27.765 1.66803 
1.99792 65.5745 3.33606 3.33594 0 ]xsh
73.44 132.704 mo
(802.11a802.11a transmitterSitij AgrawalFFT690)
[3.336 3.336 3.336 1.668 3.336 3.336 63.7278 3.336 3.336 3.336 1.668 3.336 
3.336 3.336 1.668 1.668 1.99796 3.336 3.336 3 4.99796 1.332 1.668 1.668 
3.336 182.144 4.00201 1.33203 1.66797 1.33203 1.33197 1.66803 4.00201 3.336 1.99799 3.336 
4.33197 3.336 29.7606 3.66595 3.66595 61.9109 3.336 3.336 0 ]xsh
73.44 140.624 mo
(DESDES encryptionRodric Rabbah --567)
[4.332 4.00204 73.7448 4.332 4.00204 4.00204 1.668 3.336 3.336 3 1.99796 3 
3.336 1.668 1.332 3.336 193.489 4.33203 3.336 3.336 1.99792 1.33203 3 1.66797 
4.33203 3.336 3.336 3.336 3.336 24.7535 1.66803 1.99792 65.5746 3.336 3.336 0 
]xsh
73.44 148.544 mo
(SerpentSerpent encryptionRodric Rabbah --550)
[4.00204 3.336 1.99796 3.336 3.336 3.336 62.7336 4.00204 3.336 1.99796 3.336 3.336 
3.336 1.668 1.668 3.336 3.336 3 1.99796 3 3.336 1.668 1.332 3.33601 
184.812 4.33203 3.336 3.336 1.99792 1.33203 3 1.66797 4.33203 3.336 3.336 3.336 
3.336 24.7536 1.66797 1.99799 65.5745 3.336 3.336 0 ]xsh
73.44 156.464 mo
(VocoderPhase vocoder, offers independent control over pitch and speed \(Senef, 1980\)Chris Leger --513)
[4.00204 3.336 3 3.336 3.336 3.336 61.7304 4.00204 3.336 3.336 3 3.336 
1.668 3 3.336 3 3.336 3.336 3.336 1.99796 1.668 1.668 3.336 1.668 
1.668 3.336 1.99796 3 1.668 1.332 3.336 3.336 3.336 3.336 3.336 3.336 
3.336 3.336 3.336 1.668 1.668 3 3.336 3.336 1.668 1.99796 3.33597 1.33203 
1.66797 3.336 3 3.336 1.99799 1.66797 3.336 1.33203 1.66797 3 3.336 1.66803 
3.336 3.336 3.336 1.66797 3 3.336 3.336 3.336 3.336 1.66803 1.99792 4.00208 
3.336 3.336 3.336 1.66797 1.66803 1.66797 3.336 3.336 3.336 3.336 25.701 4.33197 
3.336 1.99799 1.33197 3 1.66803 3.336 3.336 3.336 3.336 32.4246 1.66797 1.99799 
65.5745 3.336 3.336 0 ]xsh
73.44 164.384 mo
(3GPP3GPP radio access protocol - physical layerAli Meli --387)
[3.336 4.668 4.00204 70.0741 3.336 4.668 4.00204 4.00204 1.668 1.99796 3.336 3.336 
1.332 3.336 1.668 3.336 3 3 3.336 3 3 1.668 3.336 1.99796 
3.336 1.668 3.336 3 3.336 1.332 1.668 1.99796 1.668 3.336 3.336 3 
3 1.332 3 3.336 1.332 1.668 1.332 3.336 3 3.336 117.787 4.00201 
1.33203 1.33197 1.66803 4.99792 3.336 1.33203 43.4358 1.66797 1.99799 65.5745 3.336 3.336 
0 ]xsh
73.44 172.304 mo
(Radar \(coarse\)Radar array front end \(coarse-grained filters, equivalent functionality\))
[4.332 3.336 3.336 3.336 1.99796 1.668 1.99796 3 3.336 3.336 1.99796 3 
3.336 44.0646 4.332 3.336 3.336 3.336 1.99796 1.668 3.336 1.99796 1.99796 3.336 
3 1.668 1.668 1.99796 3.336 3.336 1.668 1.668 3.336 3.336 3.336 1.668 
1.99796 3 3.336 3.336 1.99796 3 3.336 1.99796 3.336 1.99796 3.336 1.332 
3.336 3.336 3.336 1.668 1.668 1.332 1.332 1.668 3.336 1.99796 3 1.668 
1.668 3.336 3.336 3.336 1.332 3 3.336 1.332 3.336 3.336 1.668 1.668 
1.668 3.336 3.336 3 1.668 1.332 3.336 3.336 3.336 1.332 1.33203 1.66797 
3 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: Arial-ItalicMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Arial-ItalicMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation, registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Regular) def
/ItalicAngle -12 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 112 /p put
dup 116 /t put
dup 117 /u put
def
/UniqueID 44340 def
/FontBBox {-261 -250 1059 936} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 358 -210 -199] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [72] def
/StdVW [88] def
/StemSnapH [72 81] def
/StemSnapV [88 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/e <1C60D8A8C9B7EF321C1E8ACCC7D09A023042D90BE5D1EA563C909BDD033A
0FB8561F142300E7268D12D746DACC3F4A7A97F9B40781EFFB1CA1B9F31E51D1
3355EC2F6F9CDDC9DBA0762FC08E08CDA1008440931D6BC434A8BD12A11D9186
CD66868FB0154BC2177EB7E019995AB92E363DA36317815DE5DB> |-
/i <1C60D8A8C9B88C082D95EF87D70BBC01773D885656612F2664B1EBBF74FD
DA3A99656275184DDA6DB5627B57AEC600> |-
/l <1C60D8A8C9B88C082010D53CF1A8D4CD196DF6A30943D4B76D6352A37443
0CD7> |-
/m <1C60D8A8C9B6B41CB5FDB9792344521E1AEA2BA61247D6FB1E955402FB7D
9745765E01F5869C077D6CC7D8FA8762EA2FAAD00EFA20FA9FD54BF08673D816
D65648D0F21C5AC43B5C7D45A230DC6D87999F4FFE385A75A08017A81ECEED56
8207ACEB3366B82463E2C5959DE8438994123763ED8AB616C8BC086F211515A4
94F98AB4DE826C118FE7523AE84F1ADFAFBC946608C2760DCBED55D0F6> |-
/p <1C60D8A8C9B7EF322425E24BBF205D0D28F6A72EB6470F2FDDD4B97193E8
EC3AA7AD14C760E3B194983EC4D64865917F03CA67729CEA1EE9C42CAAD8FE9F
E2CB135A5623E89E005ECACD2EC5442BC972438A4FF009A192AB0441908381BB
20156904349778823B7039773C7847600AAE6723D98B6D218A26175899FC4C6A
B198FA471A84023AD03549B1B049B6488850E599406282B49873C17C379E1D56
831013E19FEEE0FDCBD1720B> |-
/t <1C60D8A8C9B854D0C0AD17A70317BAE2408AB69F18E1EA4CA155B4984F69
E1CD18D066F5AFEA435850F58BFF00D7F0397258752F2B43057B16E549ECF164
E4C9E8CF52B7DF93325D9D5D9C9DBA9D9DA628D8EC62AE861608914D113B772F
BF4DBDEFE2> |-
/u <1C60D8A8C9B7EF3217161211D4684A520DECA7EC32EF836D54C3A907BFE0
2F841CCA12F08922F0D3E766C756AAA747795503B7D9412650D2609585B2F58D
852A5E5E242BD1F31936C390E310BBF632545B2D8476B88E95031F231588F4A1
2862234E2CD54BB61DEEDEA6CB3A5B8D8FE325BDE7D2E24A> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LVUVOW+Arial-ItalicMT /Arial-ItalicMT findfont ct_VMDictPut
/LVUVOW+Arial-ItalicMT*1 
[101{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 2{/.notdef}rp 
/p 3{/.notdef}rp /t /u 138{/.notdef}rp]
LVUVOW+Arial-ItalicMT nf
LVUVOW+Arial-ItalicMT*1 [6 0 0 -6 0 0 ]msf
387.36 172.304 mo
(multiple)
[4.99796 3.336 1.332 1.668 1.332 3.336 1.332 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
448.8 172.304 mo
( --203)
[1.668 1.99796 65.5746 3.33594 3.33606 0 ]xsh
73.44 180.224 mo
(Radar \(fine\)Radar array front end \(fine-grained filters, equivalent functionality\))
[4.332 3.336 3.336 3.336 1.99796 1.668 1.99796 1.668 1.332 3.336 3.336 52.3992 
4.332 3.336 3.336 3.336 1.99796 1.668 3.336 1.99796 1.99796 3.336 3 1.668 
1.668 1.99796 3.336 3.336 1.668 1.668 3.336 3.336 3.336 1.668 1.99796 1.668 
1.332 3.336 3.336 1.99796 3.336 1.99796 3.336 1.332 3.336 3.336 3.336 1.668 
1.668 1.332 1.332 1.668 3.336 1.99796 3 1.668 1.668 3.336 3.336 3.336 
1.332 3 3.336 1.332 3.336 3.336 1.668 1.668 1.668 3.336 3.336 3 
1.668 1.332 3.336 3.336 3.336 1.332 1.332 1.668 3 0 ]xsh
LVUVOW+Arial-ItalicMT*1 [6 0 0 -6 0 0 ]msf
387.36 180.224 mo
(multiple)
[4.99796 3.336 1.332 1.668 1.332 3.336 1.332 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
448.8 180.224 mo
( --201)
[1.668 1.99796 65.5746 3.33594 3.33606 0 ]xsh
73.44 188.144 mo
(AudiobeamAudio beamformer, steers channels into a single beamRodric Rabbah --167)
[4.00204 3.336 3.336 1.332 3.336 3.336 3.336 3.336 56.7234 4.00204 3.336 3.336 
1.332 3.336 1.668 3.336 3.336 3.336 4.99796 1.668 3.336 1.99796 4.99796 3.336 
1.99796 1.668 1.668 3 1.668 3.336 3.336 1.99796 3 1.668 3 3.336 
3.336 3.336 3.336 3.336 1.332 3 1.668 1.332 3.336 1.668 3.336 1.668 
3.336 1.668 3 1.332 3.336 3.336 1.332 3.336 1.668 3.336 3.336 3.336 
91.7597 4.33203 3.336 3.336 1.99792 1.33203 3 1.66797 4.33203 3.336 3.336 3.336 
3.336 24.7536 1.668 1.99796 65.5746 3.336 3.336 0 ]xsh
73.44 196.064 mo
(FHR \(feedback loop\)Frequency hopping radio \(using feedback loop for hop signal\)Rodric RabbahFFT161)
[3.66595 4.332 4.332 1.668 1.99796 1.668 3.336 3.336 3.336 3.336 3.336 3 
3 1.668 1.332 3.336 3.336 3.336 28.7214 3.66595 1.99796 3.336 3.336 3.336 
3.336 3.336 3 3 1.668 3.336 3.336 3.336 3.336 1.332 3.33598 3.336 
1.668 1.99796 3.336 3.336 1.332 3.336 1.668 1.99796 3.336 3 1.332 3.336 
3.336 1.668 1.668 3.336 3.336 3.336 3.336 3.336 3 3 1.668 1.332 
3.336 3.336 3.336 1.668 1.668 3.336 1.99796 1.668 3.336 3.336 3.336 1.668 
3 1.332 3.336 3.336 3.336 1.332 70.7333 4.33203 3.336 3.336 1.99792 1.33203 
3 1.66797 4.33203 3.336 3.336 3.336 3.336 24.7536 3.66595 3.66595 61.911 3.336 
3.336 0 ]xsh
73.44 203.984 mo
(OFDMOrthogonal frequency division multiplexer \(Tennenhouse et al., 1999\)Michael Gordon --148)
[4.668 3.66595 4.332 69.4152 4.668 1.99796 1.668 3.336 3.336 3.336 3.336 3.336 
3.336 1.332 1.668 1.668 1.99796 3.336 3.336 3.336 3.336 3.336 3 3 
1.668 3.336 1.332 3 1.332 3 1.332 3.336 3.336 1.668 4.99796 3.336 
1.332 1.668 1.332 3.336 1.332 3.336 3 3.336 1.99796 1.668 1.99796 3.66595 
3.336 3.336 3.336 3.336 3.336 3.336 3.336 3.336 3 3.336 1.668 3.336 
1.668 1.668 3.336 1.332 1.668 1.668 1.668 3.336 3.33597 3.336 3.336 50.0646 
4.99796 1.332 3 3.336 3.336 3.336 1.332 1.668 4.668 3.336 1.99796 3.336 
3.336 22.4214 1.66803 1.99792 65.5746 3.336 3.336 0 ]xsh
73.44 211.904 mo
(ChannelVocoderChannel voice coderAndrew Lamb --135)
[4.332 3.336 3.336 3.336 3.336 3.336 1.332 4.00204 3.336 3 3.336 3.336 
3.336 39.3798 4.332 3.336 3.336 3.336 3.336 3.336 1.332 1.668 3 3.336 
1.332 3 3.336 1.668 3 3.336 3.336 3.336 179.138 4.00204 3.336 3.336 
1.99796 3.336 4.332 1.668 3.336 3.336 4.99796 27.7566 1.668 1.99796 65.5746 3.336 
3.336 0 ]xsh
73.44 219.824 mo
(FilterbankFilter bank for multi-rate signal processingAndrew Lamb --134)
[3.66595 1.332 1.332 1.668 3.336 1.99796 3.336 3.336 3.336 58.7364 3.66595 1.332 
1.332 1.668 3.336 1.99796 1.668 3.336 3.336 3.336 3 1.668 1.668 3.336 
1.99796 1.668 4.99796 3.336 1.332 1.668 1.332 1.99796 1.99796 3.336 1.668 3.336 
1.668 3 1.332 3.336 3.336 3.336 1.332 1.668 3.336 1.99796 3.336 3 
3.336 3 3 1.332 3.336 123.798 4.00201 3.336 3.336 1.99799 3.336 4.33197 
1.66803 3.336 3.336 4.99792 27.7566 1.66803 1.99792 65.5746 3.336 3.336 0 ]xsh
73.44 227.744 mo
(TargetDetectTarget detection using matched filters and thresholdAndrew Lamb --127)
[3.66595 3.336 1.99796 3.336 3.336 1.668 4.332 3.336 1.668 3.336 3 49.0662 
3.66595 3.336 1.99796 3.336 3.336 1.668 1.668 3.336 3.336 1.668 3.336 3 
1.668 1.332 3.336 3.336 1.668 3.33598 3 1.332 3.336 3.336 1.668 4.99796 
3.336 1.668 3 3.336 3.336 3.336 1.668 1.668 1.332 1.332 1.668 3.336 
1.99796 3 1.668 3.336 3.336 3.336 1.668 1.668 3.336 1.99796 3.336 3 
3.336 3.336 1.332 97.0968 4.00204 3.336 3.336 1.99796 3.336 4.332 1.668 3.336 
3.336 4.99796 27.7566 1.668 1.99796 65.5746 3.336 3.336 0 ]xsh
73.44 235.664 mo
(FMRadioFM radio with equalizer)
[3.66595 4.99796 4.332 3.336 3.336 1.332 61.0764 3.66595 4.99796 1.668 1.99796 3.336 
3.336 1.332 3.336 1.668 4.332 1.332 1.668 3.336 1.668 3.336 3.336 3.336 
3.336 1.332 1.332 3 3.336 0 ]xsh
LVUVOW+Arial-ItalicMT*1 [6 0 0 -6 0 0 ]msf
387.36 235.664 mo
(multiple)
[4.99796 3.336 1.332 1.668 1.332 3.336 1.332 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
448.8 235.664 mo
( --121)
[1.668 1.99796 65.5746 3.33594 3.33606 0 ]xsh
73.44 243.584 mo
(FHR \(teleport messaging\)Frequency hopping radio \(using teleport messaging for hop signal\)Rodric RabbahFFT110)
[3.66595 4.332 4.332 1.668 1.99796 1.668 3.336 1.332 3.336 3.336 3.336 1.99796 
1.668 1.668 4.99796 3.336 3 3 3.33599 3.336 1.332 3.336 3.336 15.3888 
3.66595 1.99796 3.336 3.336 3.336 3.336 3.336 3 3 1.668 3.336 3.336 
3.336 3.336 1.332 3.336 3.336 1.668 1.99796 3.336 3.336 1.332 3.336 1.668 
1.99796 3.336 3 1.332 3.336 3.336 1.668 1.668 3.336 1.332 3.336 3.336 
3.336 1.99796 1.668 1.668 4.99796 3.336 3 3 3.336 3.336 1.332 3.336 
3.336 1.668 1.668 3.336 1.99796 1.668 3.336 3.336 3.336 1.668 3 1.332 
3.336 3.336 3.336 1.332 57.4001 4.332 3.336 3.336 1.99796 1.332 3 1.668 
4.332 3.336 3.336 3.336 3.336 24.7536 3.66595 3.66595 61.9109 3.336 3.336 0 
]xsh
73.44 251.504 mo
(DToAAudio post-processing and 1-bit D/A converterAndrew LambOversampler100)
[4.332 3.66595 3.336 70.7448 4.00204 3.336 3.336 1.332 3.336 1.668 3.336 3.336 
3 1.668 1.99796 3.336 1.99796 3.336 3 3.336 3 3 1.332 3.336 
3.336 1.668 3.336 3.336 3.336 1.668 3.336 1.99796 3.336 1.332 1.668 1.668 
4.332 1.668 4.00204 1.668 3 3.336 3.336 3.00003 3.336 1.99796 1.668 3.336 
111.107 4.00204 3.336 3.336 1.99796 3.336 4.332 1.668 3.336 3.336 4.99796 27.7566 
4.668 3 3.336 1.99796 3 3.336 4.99796 3.336 1.332 3.336 36.8964 3.336 
3.336 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: Arial-BoldItalicMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Arial-BoldItalicMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation, registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Bold) def
/ItalicAngle -12 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 52 /four put
dup 58 /colon put
dup 71 /G put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 114 /r put
dup 115 /s put
def
/UniqueID 44342 def
/FontBBox {-248 -250 1079 944} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 355 -212 -198] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [102] def
/StdVW [140] def
/StemSnapH [102 120] def
/StemSnapV [140 147] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/space <1C60D8A8C9B854D0F4790807CBACD8FD659970B8> |-
/parenleft <1C60D8A8C9B81F2C000082B296D91060A6EB85E7C27614064612
7C9E2DAF09CC97AF67ACBF5F3785FAF5621C6FD94D411BA3FB711530520303BB
5103355C9B3783E77C8BD6D02474> |-
/parenright <1C60D8A8C9B81F2C3A82953C59690A3DA2B27903D61DC757F84
D452DC073F8E86D0A49729C65DFE179A090F9FCDA0BD59A50C91DD8AA4804EC2
DC452C8A1289842EFDFA3496BEC7BAF> |-
/four <1C60D8A8C9B7EF32740BE291E1C3DFF610360C9C165A942CBBBC0FA7F
6F748AFF43BC512E6EBEC144B85EE8444D681DFDB21725EC2328F54B4BD0CB26
E350DE45C3E0C8BE4B483DD1BDC20546102621BC0CB219A> |-
/colon <1C60D8A8C9B81F2C1C7CF84588196311D24043AFED4D84E8C967227A
44EF0FE29D8FC0B0442DC0125A26AB18CC750AC9833E07F823526DBD> |-
/G <1C60D8A8C9B6FF86E0083B97DD5C5C6FC8A42F8C1B7EA956C92DED0DFBE4
CBE86518B3C6D051C3A38EA6741752249958509431ED073973195E8F58990D9B
5BA9704DA6E3C54C970833FB9E1027BCB7B59C64E9F32BBE39E5194A750099EF
C57F580D76365BA04E99B75BE4AF7C1258A352A445F1A6421539B275359EC975
6E> |-
/P <1C60D8A8C9B64EDFFBB9ACB01E9094327A78B5E1DCF021FFDA09218F8D48
F8895B8EF892091EA257CB4C5B42A06D7A0BD0DEBC93854D6E1B6FEDED0030AF
EE6F734D36543A05518DC4BA96E5923F4BA5CB764F975B3BCF3A22A70B361131
92> |-
/a <1C60D8A8C9B7EF32665EDE143FDE9F0F65C232710AEC5444B878B235727E
8DAB2BBB9ED41B060F0F15156881A21E0FBF39499D9091B406B3517B41961E62
F2468F951C13C0D37D80F982738CC3066B7D363F41DA62E4BA40AA7E24ED2D7E
B29E405306830310C72D804D90F754B0A9CDD1BC72B4DC299B0D991C8011CAF8
E11F5827B6880131199734174BF110D944281C41CF2D5781D5327E06394D50ED
46AC15B4FF0811BF98525A42A178E63B3472DC35A5BBCD18B81717EB27A8F9DC
9D0467A0EC69FE280A90C9ED64815E2DA4DEC8E5778D069CE9B165> |-
/c <1C60D8A8C9B7EF3215AF23F01C02C4EB77F592C374D1AF161A05A7D62BDF
07590BF918B0E397A349C1608BF0C4A02E52AB266F30B99DAFDEF9DABABA7E27
3D6C4C5D18087AB39A1124F6677137CCA0FAFE4806B56F707B68CB5B9FB34B07
7F> |-
/e <1C60D8A8C9B7EF321BD8F13576E37170E767E8C759BDF54602CC37092D8B
0FA8AFF0846A9F083CBB4E0092961920D6F1458527F6830817732742E040886A
1BEE236BBED61C18FA20D3FEF3AF29177A7DD389B4B1910DCEDF03004032093E
BEE2A8CC22A11D387A085B0110EF> |-
/h <1C60D8A8C9B7D8BE527DC7FCA1176390599428391ACC49C912BAE56E7E37
290A04F7DCA0230B1A32EAAE24DA9F8B8E72EB8A2B977D6E04C98DB77100CDCA
E29515BB56D63625804DE7E46C8355DBFA886E01B29E208137D3B41BDAD582BA
9913B7CAF0F2CA3B057040A446D7DBB149186841A2CCD62FFC> |-
/i <1C60D8A8C9B854D0B0A985A00579CD64216EE251A7E1FDAB733B623A17BF
4B6ACAE72088AECD35F0168E82F7B16E4984AA95A6B50FF3AA1576CD98CF> |-
/l <1C60D8A8C9B854D0B0A985A00579CD65EAB0940F235D28733D9D5EA6F547
A3D3FA5B> |-
/n <1C60D8A8C9B7D8BE19DC40CEBAF9F66A9A3476F614F1310AB3A93A7F3D19
1F1A9F227AC6F271C0271B2CD4E12CE0E27D6CB1BA225D0795C340505ECB10B5
AEDEA1DF49F93AE3C1D1B51349DB78B69690A0D4C9E3C9064F4C76AF37752EA0
D2193691CB99EF2746AC2BB5F9EE763BE770337E4D3CF970EACF64B58BE4DC6F
5820D3040E63A28E8C23293BAE4EDC0C05> |-
/p <1C60D8A8C9B7D8BE19E8930B678A036F36770E813F2A61C5D6750AC5870C
491A29AABAF95076472D950411D8EE502822BB5795F6A696C2B22B4E686C684A
5C88114CF50BEA77C0194390C49FFEEC5F53D568ACB79FD408CADA9C5FD3B545
90A9243DBBD32C0D95A4CD2EC804C554BA830AD1AA8E321B094511ABFBC1D864
16B5FFD680434011917F63A88DF402D55FF3E911FDC806CC4F540BD75E0D945A
174725C4E424> |-
/r <1C60D8A8C9B7361F58F2190E74A8AD568BEF6A9C7E8835469A1880C21BA0
622C2520034CFF40610FE270F19BC6DE483AD6F8860B20C1C576B9E64E9DFC13
FB4CAFBEFD55FB68D5C7E87FB036E3EBB737F0CDF5E01C46312B5C224B3A0E95
A218A9290A19AB5325465EB906FF6217> |-
/s <1C60D8A8C9B7EF322D4524808DE0C0CC29283027D4A7643DEA73D5C50B6F
E7CF64E15C4412FA2EDA27A6102FB3DA8C8E1EA6F3E6CD0E3A22BDD31DFCB231
A20A371E0C5111F86E7AFA720C900C160E515F0E512784FB581F97179A0EF0AC
219D1FE2B2F4BB54C0EFE3D467F4E54659F2209B4C60410B> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LVUVOX+Arial-BoldItalicMT /Arial-BoldItalicMT findfont ct_VMDictPut
/LVUVOX+Arial-BoldItalicMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 10{/.notdef}rp /four 5{/.notdef}rp 
/colon 12{/.notdef}rp /G 8{/.notdef}rp /P 16{/.notdef}rp /a /.notdef 
/c /.notdef /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l 
/.notdef /n /.notdef /p /.notdef /r /s 140{/.notdef}rp]
LVUVOX+Arial-BoldItalicMT nf
LVUVOX+Arial-BoldItalicMT*1 [6 0 0 -6 0 0 ]msf
73.44 265.604 mo
(Graphics Pipelines \(4\):)
[4.668 2.33405 3.336 3.66595 3.66595 1.668 3.336 3.336 1.668 4.00204 1.668 3.66595 
3.336 1.668 1.668 3.66595 3.336 3.336 1.66799 1.99796 3.336 1.99796 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
73.44 273.524 mo
(GP - reference version)
[4.668 4.00204 1.668 1.99796 1.668 1.99796 3.336 1.668 3.336 1.99796 3.336 3.336 
3 3.336 1.668 3 3.336 1.99796 3 1.332 3.33599 0 ]xsh
155.52 273.404 mo
(General-purpose rendering pipeline: 6 vertex shaders, 15 pixel pipes)
[4.668 3.336 3.336 3.336 1.99796 3.336 1.332 1.99796 3.336 3.336 1.99796 3.336 
3.336 3 3.336 1.668 1.99796 3.336 3.336 3.336 3.336 1.99796 1.332 3.336 
3.336 1.668 3.336 1.332 3.336 3.336 1.332 1.332 3.336 3.336 1.668 1.668 
3.336 1.668 3 3.336 1.99796 1.668 3.336 3 1.668 3 3.336 3.336 
3.336 3.336 1.99796 3 1.668 1.668 3.336 3.336 1.668 3.336 1.332 3 
3.336 1.332 1.668 3.336 1.332 3.336 3.336 0 ]xsh
gsave
338.1 271.304 mo
340.32 271.304 li
340.32 267.644 li
338.1 267.644 li
cp
clp
LVUVOV+ArialMT*1 [4.02 0 0 -4.02 0 0 ]msf
338.1 270.404 mo
(4)sh
grestore
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LVUVOV+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Z <1C60D8A8C9B7D8BE7C9BCEB13D088E796A972FAA8BB32D4F23F2937C1C74
6F1BA00085ABA303300369C8990F1F550860C086B38E3306BC2B238E185AE566
25D84AC1905A> |-
/quotesingle <1C60D8A8C9B8ADAC12B46A3FA39C8D3667125B722DD7694BBB
2312E01C55B89AEF73CE60> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LVUVOV+ArialMT /Encoding get
dup 90 /Z put
dup 169 /quotesingle put
pop
%ADOEndSubsetFont
reset_gvm
/LVUVOV+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma 
/hyphen /period /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 6{/.notdef}rp /A 
/B /C /D /E /F /G /H /I 
/J /K /L /M /N /O /P /.notdef 
/R /S /T /.notdef /V /W 2{/.notdef}rp /Z 
6{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z 46{/.notdef}rp /quotesingle 86{/.notdef}rp]
LVUVOV+ArialMT nf
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
387.36 273.524 mo
(Jiawen Chen --641)
[3 1.332 3.336 4.332 3.336 3.336 1.668 4.332 3.336 3.336 30.0888 1.668 
1.99796 65.5745 3.336 3.336 0 ]xsh
73.44 281.444 mo
(GP - phong shadingPhong shading rendering pipeline: 1 vertex shader, 12 two-part pixel pipelinesJiawen Chen --649)
[4.668 4.00204 1.668 1.99796 1.668 3.336 3.336 3.336 3.336 3.336 1.668 3 
3.336 3.336 3.336 1.332 3.336 32.046 4.00204 3.336 3.336 3.336 3.336 1.668 
3 3.336 3.336 3.336 1.332 3.336 3.336 1.668 1.99796 3.33598 3.336 3.336 
3.336 1.99796 1.332 3.336 3.336 1.668 3.336 1.332 3.336 3.336 1.332 1.332 
3.336 3.336 1.668 1.668 3.336 1.668 3.00002 3.336 1.99792 1.66803 3.336 3 
1.66797 3 3.336 3.336 3.336 3.336 1.99799 1.66797 1.66803 3.336 3.336 1.66797 
1.66803 4.33197 3.336 1.99799 3.336 3.336 1.99792 1.66803 1.66797 3.336 1.33203 3 
3.336 1.33197 1.66803 3.336 1.33197 3.336 3.336 1.33203 1.33197 3.336 3.336 28.0422 
3 1.33203 3.336 4.33197 3.336 3.336 1.66803 4.33197 3.336 3.336 30.0888 1.66803 
1.99792 65.5746 3.336 3.336 0 ]xsh
73.44 289.364 mo
(GP - shadow volumesShadow volumes rendering pipeline: 1 vertex shader, 20 rasterizersJiawen Chen --460)
[4.668 4.00204 1.668 1.99796 1.668 3 3.336 3.336 3.336 3.336 4.332 1.668 
3 3.336 1.332 3.336 4.99796 3.336 26.3898 4.00204 3.336 3.336 3.336 3.336 
4.332 1.668 3 3.336 1.332 3.336 4.99796 3.336 3 1.668 1.99796 3.336 
3.336 3.336 3.336 1.99796 1.332 3.336 3.336 1.668 3.336 1.332 3.336 3.336 
1.332 1.332 3.336 3.336 1.668 1.668 3.33598 1.66803 3 3.336 1.99792 1.66803 
3.336 3 1.66797 3 3.336 3.336 3.336 3.336 1.99799 1.66797 1.66803 3.336 
3.336 1.66797 1.99799 3.336 3 1.66797 3.336 1.99799 1.33197 3 3.336 1.99799 
55.4112 3 1.33197 3.336 4.33203 3.336 3.336 1.66797 4.33203 3.336 3.336 30.0888 
1.66797 1.99799 65.5745 3.336 3.336 0 ]xsh
73.44 297.284 mo
(GP - particle systemParticle system pipeline: 9 vertex shaders, 12 pixel pipelines, split triangle setupJiawen Chen --631)
[4.668 4.00204 1.668 1.99796 1.668 3.336 3.336 1.99796 1.668 1.332 3 1.332 
3.336 1.668 3 3 3 1.668 3.336 33.0659 4.00204 3.336 1.99796 1.668 
1.332 3 1.332 3.336 1.668 3 3 3 1.668 3.336 4.99796 1.668 
3.336 1.332 3.336 3.336 1.332 1.332 3.336 3.336 1.668 1.668 3.336 1.668 
3 3.336 1.99796 1.668 3.336 3 1.668 3 3.336 3.336 3.33601 3.336 
1.99792 3.00003 1.668 1.668 3.336 3.336 1.668 3.336 1.332 3 3.336 1.332 
1.668 3.336 1.332 3.336 3.336 1.332 1.332 3.336 3.336 3 1.668 1.668 
3 3.336 1.332 1.332 1.66803 1.66797 1.66803 1.99792 1.33203 3.336 3.336 3.336 
1.33197 3.336 1.66803 3 3.336 1.66797 3.336 23.4006 3 1.33197 3.336 4.33203 
3.336 3.336 1.66797 4.33203 3.336 3.336 30.0888 1.66797 1.99799 65.5745 3.336 3.336 
0 ]xsh
true set_gvm
%ADOBeginSubsetFont: Arial-BoldItalicMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LVUVOX+Arial-BoldItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D0B7F44C9028A7FD98D7EB3EE38D94B08D5294A06A
D4E5566598> |-
/one <1C60D8A8C9B7EF322B184654D1FFBECB49566855657E6C478E69B423FB
D330E5127FCB570FEF9F3CC307C424D5DA403F33960FDE04FEFF49> |-
/two <1C60D8A8C9B7EF322439D5C65A75D1BCAD5878F95DE58A6DD56C6F30E7
05976ED9F84782160A9D11813BD8E4F008C0B0166C5493678A6FF75AA9D240B9
00602F0660460EC66A8431646DECF61C67A8B9BF87F8212276CAF9F8B34A6605
86F7F3B49865C7BE5977> |-
/seven <1C60D8A8C9B7EF3228523340DFFF626036244AD4AF8D528B97EC5999
35C46C5BB17B66F49319BEE9AF56B196193610386066B30C30925D056C14BB2D> |-
/eight <1C60D8A8C9B7EF322B374979D260FB5B6ACFC5396850867A53239926
3D94BFCCB26F63BFE38B61760CB26B4F945666441AF7732CD02C7FF363C56D5B
5563BD0360495CC40CDABDCDBC57273C35D0C28C37837AD900C3F83E4F0E9B7A
DB69A2A0258ECF256A2C4BABC049DA6855C537D91F1718D8F6A3E707F9835CE9
D3D1BBC2A1C959F972DB5D5FD593A385B9C21DEF26EE0859D213A2F20D793481
4063F3F8BCFE9DED1E477B6EBA557C603566FB4AD512F6BE40D62DBE208C8FF7
7FDE1BA9E9D2A618597298AF167CF16FDA7B60B036B2DE9F8D6D4A7F5D181C60
0EF406955662E0DC936FAA4D1F5EC7A6BBDC54CDEA2BFF591FCBDDB03E767005
2FA2E71256FC> |-
/nine <1C60D8A8C9B7EF322D45204A784A39AAB454669548ACFCBA72208520D
E6751BDC2D1E2B198D72449C8DE08ED1C94FCE3FC156E9ADC5F53539791F843C
BD818DA08D5D3B7AC2425DDEE9964F376A537C0D5B7562F2CE425A835A54C012
BB571EE8B18A03845B698E243FE0777355DC559F7DA6EB58A66B783FD18CCB1F
B308A63596B2C> |-
/E <1C60D8A8C9B64EDFB4C3A45652AA5EA6423563F2AF10BC178DE2CDD37340
E901A55CC1AB9C25FA947AF7A6279D794CE97DA6C6D106FEA96DA9208E8BFAB1
4A8956B9AC7C> |-
/K <1C60D8A8C9B6079F22F6B0DB20C07A3D2AF0A2BF9E44DE471043168C0C47
E0C6D35DD265FE11CB75FDC78B06C9D59B2F7C79C49E0AE1359F2F3FD8F1BB18
FDD86832F8C5A59091> |-
/L <1C60D8A8C9B7D8BE5647F13D0A44448849A9870691AC9FCEA1FE3FBE7014
831D994EACCF1875EC2F25CD> |-
/R <1C60D8A8C9B6079F6D6F69D2A24D814F192AD12D02D165B5D48B1DE3C67E
A0990B60DC0E8AC6D99A5D0A580E2F2D9885668FB2C008A0DC1F4057F8FD5707
BF33AF31431F2E2863E4869400BE289C642CEC52B2C2EED2CCBC7341E9768E87
7AFE1EFF0C8124F49B4A2CACBE8259DA668BF275531A708E5FC3B0DBED7126F1
5DFF69> |-
/S <1C60D8A8C9B64EDFCA0080E4A84A6881F511F7E443A409FAA54D57F586F6
4CB4D6597A8ACCB728A3D47CE7C496D9827CCA5807645132E9EC2B99960D1647
9D4F549F282BD54AE187A6A969BB2F00BC17D1F8E5C7679506066E5784A9347E
EB1A7D7C05E864DC74D69B91F0BDA6041F3A69F7F0F1F36730E33A5A25741551
E91F2C17D605293E02F205899CDDF403ECE121B05D6169B878B9CD0A9E3AAF55
0C8D9608A4690DE08B827E1AA310BF80> |-
/T <1C60D8A8C9B7D8BE162F90BF5DB02E44D627593D74BE3A14CA63F18B850D
489B22F7F8B109F58F389BE07C70A8F56445E3D07A62E1> |-
/b <1C60D8A8C9B7D8BE19EB3899BB1C6E48C85DC401DA6230308541A4A357A6
FDFFF874F6529C02869CE8269F155732A6C5D8618F4D5E7DE2445BF0A40C75AB
0425F4DE85F543054B5CF947CE3503C08CDE9BF46C4B181DFED84733C53DD5C6
1E82E22AF9230515D4A4AA1997FFCFBF983F16423A6939C82CE4> |-
/g <1C60D8A8C9B7D8BE272EC65B7ADB46B46A35400A139720E078C6C4BEFF55
FD27FA9D65D29B3DF233E01E2C0FB3431D2A69096672A64A4CA3836640F9D1D7
0AB7510C0D9C6FF75C19397D0158936F18F0DFDCF1141E15EC952C6C6FC05BC0
CFABB43D5AAD8DEB58FCFBED806FDD5F0B24880F43F9D0860313492C9113EFDF
C29BD3CABE03EE85AA001E0ED776ECF194D14BEAC99FD3F28F706ADEBA857B0E
B74F82837775612DDC63> |-
/m <1C60D8A8C9B59F85A30BD89460CF351A8FCA96AAB3443B343500CDC36B43
4DACC7C72F22D0AD046D776FBFFE2499A9D899E0DF6FFA151570E15D625432FA
92D15F6544FE3ABADA911154E9287AC2C0EDD9F7BF387ECCAF41EF938462EB0A
7E7D1310CEFCDE748D7BC143C323B453EBB1841682F4ACF3A36B8F251C0B1A2D
601C89CA1FB4939A90AE6F27989DC313B3C731D99649ACC087CEA40712E1F4B9
836331A115742EEEE56FD4D06F309E5283F460422271E41D500821AD00E03A14
CA695B91905447E1> |-
/o <1C60D8A8C9B7D8BE26FD35097C26E6278C87B84A8D11985167C4B75B6F62
A69E949CF91CA418F7E9E97183C02D3D6654BE79C475131B88DCFD8C2B66BEC7
7D14CEBE31954F7DE5B5E7DC7EB1DCFCFA0725CE70F5CC9E0992AE> |-
/t <1C60D8A8C9B81F2C115B117DF29C11CC35DAFBEB2FE0C57D32283832879F
0F39BDFB1BEC4C5BC3C09891A5DDE36A985EC1EEAD32BE8E69BE8DAAC9FF6C6B
D5BF52E2B4386FB7C9AA87318762222165275B95684F3ED996D75DB199417EE9
950034D02AF855694071> |-
/x <1C60D8A8C9B7EF32ABB582BDD18D552754E31E3C12622DB22FB3544A5D26
8927B37594CCB2DB54D258EF9666AF891B0D6D95CC335F9B6E555E58BD924E6E
B90B1B24D9EB8EB4EA> |-
/y <1C60D8A8C9B7EF324FE53900410DD4A80ECB9A467FCD4A96B1A69FC5324A
7E1482158B2B1DFB5F0DE51A1A1F12B77558C67255432B2A875FB72574D3902C
708D48EEE2EB88072FE3EFCFACF84EC9A8620AFE85A5F6801549054FCD68F8D5
5548AD4A4145681C355BE7D9D2F415> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LVUVOX+Arial-BoldItalicMT /Encoding get
dup 47 /slash put
dup 49 /one put
dup 50 /two put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 69 /E put
dup 75 /K put
dup 76 /L put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 98 /b put
dup 103 /g put
dup 109 /m put
dup 111 /o put
dup 116 /t put
dup 120 /x put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LVUVOX+Arial-BoldItalicMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /.notdef 
/one /two /.notdef /four 2{/.notdef}rp /seven /eight /nine 
/colon 10{/.notdef}rp /E /.notdef /G 3{/.notdef}rp /K /L 
3{/.notdef}rp /P /.notdef /R /S /T 12{/.notdef}rp /a 
/b /c /.notdef /e /.notdef /g /h /i 
2{/.notdef}rp /l /m /n /o /p /.notdef /r 
/s /t 3{/.notdef}rp /x /y 134{/.notdef}rp]
LVUVOX+Arial-BoldItalicMT nf
LVUVOX+Arial-BoldItalicMT*1 [6 0 0 -6 0 0 ]msf
73.44 311.384 mo
(Libraries / Kernels \(19\):)
[3.66595 1.668 3.66595 2.33405 3.336 2.33405 1.668 3.336 3.336 1.668 1.668 1.668 
4.332 3.336 2.33405 3.66595 3.336 1.668 3.336 1.668 1.99796 3.336 3.336 1.99796 
0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
73.44 319.304 mo
(CholeskyNxN cholesky decompositionAli Meli --85)
[4.332 3.336 3.336 1.332 3.336 3 3 60.4032 4.332 3 4.332 1.668 
2.99998 3.336 3.336 1.332 3.336 3 3 3 1.668 3.336 3.336 3 
3.336 4.99796 3.336 3.336 3 1.332 1.668 1.332 3.336 158.143 4.00201 1.33203 
1.33197 1.66803 4.99792 3.336 1.33203 43.4358 1.66797 1.99799 68.9346 3.336 0 ]xsh
73.44 327.224 mo
(CRCCRC encoder using 32-bit generator polynomialJeremy Wong --131)
[4.332 4.332 73.413 4.332 4.332 4.332 1.668 3.336 3.336 3 3.336 3.336 
3.336 1.99796 1.668 3.336 3 1.332 3.33598 3.336 1.668 3.336 3.336 1.99796 
3.336 1.332 1.668 1.668 3.336 3.336 3.336 3.336 1.99796 3.336 1.668 3.336 
1.99796 1.668 3.33598 3.336 1.33203 3 3.336 3.336 4.99792 1.33203 3.336 106.436 
3 3.336 1.99792 3.336 4.99799 3 1.66797 5.664 3.336 3.336 27.765 1.66797 
1.99799 65.5746 3.336 3.336 0 ]xsh
73.44 335.144 mo
(DCT \(float\)N-point, one-dimensional DCT \(floating point\)Ali Meli --105)
[4.332 4.332 3.66595 1.668 1.99796 1.668 1.332 3.336 3.336 1.668 54.7428 4.332 
1.99796 3.336 3.336 1.332 3.336 1.668 1.668 1.668 3.336 3.336 3.336 1.99796 
3.336 1.332 4.99796 3.336 3.336 3 1.332 3.336 3.336 3.336 1.332 1.668 
4.332 4.332 3.66595 1.668 1.99796 1.668 1.332 3.336 3.336 1.668 1.332 3.336 
3.336 1.668 3.336 3.336 1.33203 3.336 1.66797 113.449 4.00208 1.33197 1.33203 1.66797 
4.99799 3.336 1.33197 43.4359 1.66797 1.99799 65.5745 3.336 3.336 0 ]xsh
73.44 343.064 mo
(DCT2D \(NxM, float\)NxM DCT \(floating point\)Ali Meli --115)
[4.332 4.332 3.66595 3.336 4.332 1.668 1.99796 4.332 3 4.99796 1.668 1.668 
1.668 1.332 3.336 3.336 1.668 31.4082 4.332 3 4.99796 1.668 4.332 4.332 
3.66595 1.668 1.99796 1.668 1.332 3.336 3.336 1.668 1.332 3.33598 3.336 1.668 
3.336 3.336 1.332 3.336 1.668 167.821 4.00201 1.33203 1.33197 1.66803 4.99792 3.336 
1.33203 43.4358 1.66803 1.99792 65.5746 3.336 3.336 0 ]xsh
73.44 350.984 mo
(DCT2D \(NxN, int, reference\)NxN DCT \(IEEE-compliant integral transform, reference version\)Matthew Drake --59)
[4.332 4.332 3.66595 3.336 4.332 1.668 1.99796 4.332 3 4.332 1.668 1.668 
1.332 3.336 1.668 1.668 1.668 1.99796 3.336 1.668 3.336 1.99796 3.336 3.336 
3 3.336 8.39516 4.332 3 4.332 1.668 4.332 4.332 3.66595 1.668 1.99796 
1.668 4.00204 4.00204 4.00204 1.99796 3 3.336 4.99796 3.336 1.332 1.332 3.336 
3.336 1.668 1.668 1.332 3.336 1.668 3.336 3.336 1.99796 3.336 1.332 1.668 
1.668 1.99796 3.336 3.336 3 1.668 3.336 1.99796 4.99796 1.668 1.668 1.99796 
3.336 1.668 3.336 1.99796 3.336 3.336 3 3.336 1.668 3 3.336 1.99796 
3 1.332 3.336 3.336 63.1194 4.99799 3.336 1.66797 1.66803 3.336 3.336 4.33197 
1.66803 4.33197 1.99799 3.336 3 24.4284 1.66797 1.99799 68.9345 3.336 0 ]xsh
73.44 358.904 mo
(IDCT \(float\)N-point, one-dimensional IDCT \(floating point\)Ali Meli --105)
[1.668 4.332 4.332 3.66595 1.668 1.99796 1.668 1.332 3.336 3.336 1.668 53.0759 
4.332 1.99796 3.336 3.336 1.33202 3.336 1.668 1.668 1.668 3.336 3.336 3.336 
1.99796 3.336 1.332 4.99796 3.336 3.336 3 1.332 3.336 3.336 3.336 1.332 
1.668 1.668 4.332 4.332 3.66595 1.668 1.99796 1.668 1.332 3.336 3.336 1.668 
1.332 3.33601 3.336 1.66797 3.336 3.336 1.33203 3.336 1.66797 111.781 4.00201 1.33203 
1.33197 1.66803 4.99792 3.336 1.33203 43.4358 1.66797 1.99799 65.5745 3.336 3.336 0 
]xsh
73.44 366.824 mo
(IDCT2D \(NxM, float\)NxM IDCT \(floating point\)Ali Meli --115)
[1.668 4.332 4.332 3.66595 3.336 4.332 1.668 1.99796 4.332 3 4.99796 1.668 
1.668 1.668 1.332 3.336 3.336 1.668 29.7408 4.332 3 4.99796 1.668 1.668 
4.332 4.332 3.66595 1.668 1.99796 1.668 1.332 3.336 3.336 1.668 1.332 3.336 
3.336 1.668 3.336 3.336 1.332 3.336 1.668 166.153 4.00201 1.33203 1.33197 1.66803 
4.99792 3.336 1.33203 43.4358 1.66797 1.99799 65.5746 3.336 3.336 0 ]xsh
73.44 374.744 mo
(IDCT2D \(NxN, int, reference\)NxN IDCT \(IEEE-compliant integral transform, reference version\)Matthew Drake --60)
[1.668 4.332 4.332 3.66595 3.336 4.332 1.668 1.99796 4.332 3 4.332 1.668 
1.668 1.332 3.336 1.668 1.668 1.668 1.99796 3.336 1.668 3.336 1.99796 3.336 
3.336 3 3.336 6.72835 4.332 3 4.332 1.668 1.668 4.332 4.332 3.66595 
1.668 1.99796 1.668 4.00204 4.00204 4.00204 1.99796 3 3.336 4.99796 3.336 1.332 
1.332 3.336 3.336 1.668 1.668 1.332 3.336 1.668 3.336 3.336 1.99796 3.336 
1.332 1.668 1.668 1.99796 3.336 3.336 3 1.668 3.336 1.99796 4.99796 1.668 
1.668 1.99796 3.336 1.668 3.336 1.99796 3.336 3.336 3 3.336 1.668 3 
3.336 1.99796 3 1.332 3.336 3.336 61.4519 4.99799 3.336 1.66797 1.66803 3.336 
3.336 4.33197 1.66803 4.33197 1.99799 3.336 3 24.4284 1.66797 1.99799 68.9345 3.336 
0 ]xsh
73.44 382.664 mo
(IDCT2D \(8x8, int, coarse\)8x8 IDCT \(IEEE-compliant integral transform, optimized version, coarse-grained\)Matthew Drake --139)
[1.668 4.332 4.332 3.66595 3.336 4.332 1.668 1.99796 3.336 3 3.336 1.668 
1.668 1.332 3.336 1.668 1.668 1.668 3 3.336 3.336 1.99796 3 3.336 
16.0596 3.336 3 3.336 1.668 1.668 4.332 4.332 3.66595 1.668 1.99796 1.668 
4.00204 4.00204 4.00204 1.99796 3.00002 3.336 4.99796 3.336 1.332 1.332 3.336 3.336 
1.668 1.668 1.332 3.336 1.668 3.336 3.336 1.99796 3.336 1.332 1.668 1.668 
1.99796 3.336 3.33601 3 1.66797 3.336 1.99799 4.99792 1.66803 1.66797 3.336 3.336 
1.66803 1.33197 4.99799 1.33197 3 3.336 3.336 1.66803 3 3.336 1.99792 3 
1.33203 3.336 3.336 1.66797 1.66803 3 3.336 3.336 1.99792 3 3.336 1.99799 
3.336 1.99792 3.336 1.33203 3.336 3.336 3.336 19.7567 4.99799 3.336 1.66797 1.66803 
3.336 3.336 4.33197 1.66803 4.33197 1.99799 3.336 3 24.4284 1.66797 1.99799 65.5745 
3.336 3.336 0 ]xsh
73.44 390.584 mo
(IDCT2D \(8x8, int, fine\)8x8 IDCT \(IEEE-compliant integral transform, optimized version, fine-grained\)Matthew Drake --146)
[1.668 4.332 4.332 3.66595 3.336 4.332 1.668 1.99796 3.336 3 3.336 1.668 
1.668 1.332 3.336 1.668 1.668 1.668 1.668 1.332 3.336 3.336 24.3941 3.336 
3 3.336 1.668 1.668 4.332 4.332 3.66595 1.668 1.99796 1.668 4.00204 4.00204 
4.00204 1.99796 3.00002 3.336 4.99796 3.336 1.332 1.332 3.336 3.336 1.668 1.668 
1.332 3.336 1.668 3.336 3.336 1.99796 3.336 1.332 1.668 1.668 1.99796 3.336 
3.33598 3 1.66803 3.336 1.99792 4.99799 1.66797 1.66803 3.336 3.336 1.66797 1.33203 
4.99792 1.33203 3 3.336 3.336 1.66797 3 3.336 1.99799 3 1.33197 3.336 
3.336 1.66803 1.66797 1.66803 1.33197 3.336 3.336 1.99799 3.336 1.99792 3.336 1.33203 
3.336 3.336 3.336 28.0919 4.99799 3.336 1.66797 1.66803 3.336 3.336 4.33197 1.66803 
4.33197 1.99799 3.336 3 24.4284 1.66797 1.99799 65.5745 3.336 3.336 0 ]xsh
73.44 398.504 mo
(FFT \(coarse - default\)N-point FFT \(coarse-grained\)Michal Karczmarek --116)
[3.66595 3.66595 3.66595 1.668 1.99796 3 3.336 3.336 1.99796 3 3.336 1.668 
1.99796 1.668 3.336 3.336 1.668 3.336 3.336 1.332 1.668 26.0646 4.332 1.99796 
3.336 3.336 1.332 3.336 1.668 1.668 3.66595 3.66595 3.66595 1.668 1.99796 3 
3.336 3.336 1.99796 3 3.336 1.99796 3.336 1.99796 3.336 1.332 3.336 3.336 
3.336 156.149 4.99799 1.33197 3 3.336 3.336 1.33203 1.66797 4.00208 3.336 1.99792 
3 3 4.99799 3.336 1.99792 3.336 13.4286 1.66803 1.99792 65.5746 3.336 3.336 
0 ]xsh
73.44 406.424 mo
(FFT \(medium\)N-point FFT \(medium-grained butterfly, no bit-reverse\))
[3.66595 3.66595 3.66595 1.668 1.99796 4.99796 3.336 3.336 1.332 3.336 4.99796 46.08 
4.332 1.99796 3.336 3.336 1.332 3.336 1.668 1.668 3.66595 3.66595 3.66595 1.668 
1.99796 4.99796 3.336 3.336 1.332 3.336 4.99796 1.99796 3.336 1.99796 3.336 1.332 
3.336 3.336 3.336 1.668 3.336 3.336 1.668 1.668 3.336 1.99796 1.668 1.332 
3.00002 1.66797 1.66803 3.336 3.336 1.66797 3.336 1.33203 1.66797 1.99799 1.99792 3.336 
3 3.336 1.99799 3 3.336 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: Arial-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LVUVOW+Arial-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/k <1C60D8A8C9B7A73DE3FB3F5FDD7A035C9714884F69A1132813088B9B9876
6DC46BDCF696D068BCE1E62619EF839115B8E4A4E417AA549B6D752AD951C27A
26232BAD5363CF> |-
/n <1C60D8A8C9B7EF32243C6E9D7F5F381084FDC03363F7D1CF44694F9455A1
1002394CC78A59DC9EC4BCE0E14100DCA50F04A049D04F81BF505C372DE9E1F6
73E527FCE130BDECF1A9A10EC328C45FDED066F63968E68751B5E9F2E05F00A6
E1755BE8B4A864B11344EE32> |-
/o <1C60D8A8C9B7EF32628C772DE6E397E65479FFA0766E31A0E619CDF4C4DC
4CC3E6514703E474B4280A88D04D50E73BAE799C94015B42BA9F77179B03E534
EAE2CCFC401140682DA526CA1A105618EC153D2E89597FEDB26D9101> |-
/w <1C60D8A8C9B6079F6DB2729CC7E34CEC0E0DDF65E1C808E946DC1324D0C4
B05919BB9E5A8B57F677A072F827561A0AFB9BFD4C842AB6681A115152F6D4C3
5C74D18CC0D3039D91CEE2971FFA0EE07FAB5C43F3B3ED79E6E27714FD160F01
3C386DB575AC69025FFADB9C115402669669876B937E08AD31832B9A7FDEAA33
91FDF9F246DB561B4B7CA8836DEC2E56AA592F43C37BC5446AC62F86D9BBCE72
551A06B08476071515BA21E46FD26F5644117ED7DAA899B780AA18B1E186> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LVUVOW+Arial-ItalicMT /Encoding get
dup 107 /k put
dup 110 /n put
dup 111 /o put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/LVUVOW+Arial-ItalicMT*1 
[101{/.notdef}rp /e 3{/.notdef}rp /i /.notdef /k /l /m 
/n /o /p 3{/.notdef}rp /t /u /.notdef /w 
136{/.notdef}rp]
LVUVOW+Arial-ItalicMT nf
LVUVOW+Arial-ItalicMT*1 [6 0 0 -6 0 0 ]msf
387.36 406.424 mo
(multiple)
[4.99796 3.336 1.332 1.668 1.332 3.336 1.332 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
448.8 406.424 mo
( --53)
[1.668 1.99796 68.9346 3.336 0 ]xsh
73.44 414.344 mo
(FFT \(fine 1\)N-point FFT \(fine-grained butterfly, coarse-grained bit-reverse\)Mani Narayanan --139)
[3.66595 3.66595 3.66595 1.668 1.99796 1.668 1.332 3.336 3.336 1.668 3.336 52.7418 
4.332 1.99796 3.336 3.336 1.332 3.336 1.668 1.668 3.66595 3.66595 3.66595 1.668 
1.99796 1.668 1.332 3.336 3.336 1.99796 3.336 1.99796 3.336 1.332 3.336 3.336 
3.336 1.668 3.336 3.336 1.668 1.668 3.336 1.99796 1.668 1.332 3 1.668 
1.668 3 3.336 3.336 1.99796 3 3.336 1.99796 3.336 1.99796 3.336 1.332 
3.336 3.336 3.336 1.668 3.336 1.332 1.668 1.99796 1.99796 3.336 3 3.336 
1.99796 3 3.336 68.1084 4.99792 3.336 3.336 1.33203 1.66797 4.33203 3.336 1.99792 
3.336 3 3.336 3.336 3.336 20.7516 1.668 1.99796 65.5745 3.336 3.336 0 
]xsh
73.44 422.264 mo
(FFT \(fine 2\)N-point FFT \(fine-grained butterfly, fine-grained bit-reverseSatish Ramaswamy --90)
[3.66595 3.66595 3.66595 1.668 1.99796 1.668 1.332 3.336 3.336 1.668 3.336 52.7418 
4.332 1.99796 3.336 3.336 1.332 3.336 1.668 1.668 3.66595 3.66595 3.66595 1.668 
1.99796 1.668 1.332 3.336 3.336 1.99796 3.336 1.99796 3.336 1.332 3.336 3.336 
3.336 1.668 3.336 3.336 1.668 1.668 3.336 1.99796 1.668 1.332 3 1.668 
1.668 1.668 1.332 3.336 3.336 1.99796 3.336 1.99796 3.336 1.332 3.336 3.336 
3.336 1.668 3.336 1.332 1.668 1.99796 1.99796 3.336 3 3.336 1.99796 3 
79.7796 4.00201 3.336 1.66803 1.33197 3 3.336 1.66803 4.33197 3.336 4.99799 3.336 
3 4.33197 3.336 4.99799 11.4246 1.66803 1.99792 68.9346 3.336 0 ]xsh
73.44 430.184 mo
(MatrixMult \(fine\)Fine-grained matrix multiplyMichal Karczmarek --79)
[4.99796 3.336 1.668 1.99796 1.332 3 4.99796 3.336 1.332 1.668 1.668 1.99796 
1.668 1.332 3.336 3.336 41.073 3.66595 1.332 3.336 3.336 1.99796 3.336 1.99796 
3.336 1.332 3.336 3.336 3.336 1.668 4.99796 3.336 1.668 1.99796 1.332 3 
1.668 4.99796 3.336 1.332 1.668 1.332 3.336 1.332 161.15 4.99796 1.332 3 
3.336 3.336 1.332 1.668 4.00204 3.336 1.99796 3 3 4.99796 3.336 1.99796 
3.336 13.4286 1.668 1.99796 68.9345 3.336 0 ]xsh
73.44 438.104 mo
(MatrixMult \(coarse\)Blocked matrix multiplyMichal Karczmarek --120)
[4.99796 3.336 1.668 1.99796 1.332 3 4.99796 3.336 1.332 1.668 1.668 1.99796 
3 3.336 3.336 1.99796 3 3.336 32.7384 4.00204 1.332 3.336 3 3 
3.336 3.336 1.668 4.99796 3.336 1.668 1.99796 1.332 3 1.668 4.99796 3.336 
1.332 1.668 1.332 3.336 1.332 173.489 4.99796 1.332 3 3.336 3.336 1.332 
1.668 4.00204 3.336 1.99796 3 3 4.99796 3.336 1.99796 3.336 13.4286 1.668 
1.99796 65.5746 3.336 3.336 0 ]xsh
73.44 446.024 mo
(Oversampler16x oversampler \(found in many CD players\)Andrew Lamb -69)
[4.668 3 3.336 1.99796 3 3.336 4.99796 3.336 1.332 3.336 49.7364 3.336 
3.336 3 1.668 3.336 3 3.336 1.99796 3 3.336 4.99796 3.336 1.332 
3.336 1.99796 1.668 1.99796 1.668 3.336 3.336 3.336 3.336 1.668 1.332 3.336 
1.668 4.99796 3.336 3.336 3 1.668 4.332 4.332 1.668 3.336 1.332 3.336 
3 3.336 1.99796 3 114.79 4.00204 3.336 3.336 1.99796 3.336 4.332 1.668 
3.336 3.336 4.99796 27.7566 1.668 70.9331 3.336 0 ]xsh
73.44 453.944 mo
(RateConvertAudio down-sampler, converts rate by 2/3Andrew Lamb --58)
[4.332 3.336 1.668 3.336 4.332 3.336 3.336 3 3.336 1.99796 50.0652 4.00204 
3.336 3.336 1.332 3.336 1.668 3.336 3.336 4.332 3.336 1.99796 3 3.336 
4.99796 3.336 1.332 3.336 1.99796 1.668 1.668 3 3.336 3.336 3 3.336 
1.99796 1.668 3 1.668 1.99796 3.336 1.668 3.336 1.668 3.336 3 1.668 
3.336 1.668 124.454 4.00208 3.336 3.336 1.99792 3.336 4.33203 1.66797 3.336 3.336 
4.99799 27.7566 1.66797 1.99799 68.9345 3.336 0 ]xsh
73.44 461.864 mo
(TDETime-delay equalization \(convolution in frequency domain\)Jinwoo SuhFFT102)
[3.66595 4.332 74.0821 3.66595 1.332 4.99796 3.336 1.99796 3.336 3.336 1.332 3.336 
3 1.668 3.336 3.336 3.336 3.336 1.332 1.332 3 3.336 1.668 1.332 
3.336 3.336 1.668 1.99796 3 3.336 3.336 3 3.336 1.332 3.336 1.668 
1.332 3.336 3.336 1.668 1.332 3.336 1.668 1.668 1.99796 3.336 3.336 3.336 
3.336 3.336 3 3 1.668 3.336 3.336 4.99796 3.336 1.332 3.336 78.7548 
3 1.33197 3.336 4.33203 3.336 3.336 1.66797 4.00208 3.336 33.7566 3.66595 3.66595 
61.9109 3.336 3.336 0 ]xsh
LVUVOX+Arial-BoldItalicMT*1 [6 0 0 -6 0 0 ]msf
73.44 475.964 mo
(Sorting Examples \(8\):)
[4.00204 3.66595 2.33405 1.99796 1.668 3.66595 3.66595 1.668 4.00204 3.336 3.336 5.33405 
3.66595 1.668 3.336 3.336 1.668 1.99796 3.33599 1.99796 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
73.44 483.884 mo
(BitonicSort \(coarse\)Bitonic sort \(coarse-grained\)Chris Leger --73)
[4.00204 1.332 1.668 3.336 3.336 1.332 3 4.00204 3.336 1.99796 1.668 1.668 
1.99796 3 3.336 3.336 1.99796 3 3.336 31.3932 4.00204 1.332 1.668 3.336 
3.336 1.332 3 1.668 3 3.336 1.99796 1.668 1.668 1.99796 3 3.336 
3.336 1.99796 3 3.336 1.99796 3.336 1.99796 3.336 1.332 3.336 3.336 3.336 
158.475 4.332 3.336 1.99796 1.332 3 1.668 3.336 3.336 3.336 3.336 32.4245 
1.66803 1.99792 68.9346 3.336 0 ]xsh
73.44 491.804 mo
(BitonicSort \(fine, iterative\)Bitonic sort \(fine-grained, iterative\)Mani Narayanan  --121)
[4.00204 1.332 1.668 3.336 3.336 1.332 3 4.00204 3.336 1.99796 1.668 1.668 
1.99796 1.668 1.332 3.336 3.336 1.668 1.668 1.332 1.668 3.336 1.99796 3.33599 
1.668 1.332 3 3.336 15.3858 4.00204 1.332 1.668 3.336 3.336 1.332 3 
1.668 3 3.336 1.99796 1.668 1.668 1.99796 1.668 1.332 3.336 3.336 1.99796 
3.336 1.99796 3.336 1.332 3.336 3.336 3.336 1.668 1.668 1.332 1.668 3.336 
1.99796 3.336 1.668 1.332 3 3.336 142.467 4.99799 3.336 3.336 1.33197 1.66803 
4.33197 3.336 1.99799 3.336 3 3.336 3.336 3.336 3.336 17.4168 1.66797 1.99799 
65.5746 3.336 3.336 0 ]xsh
73.44 499.724 mo
(BitonicSort \(fine, recursive\)Bitonic sort \(fine-grained, recursive\)Mani Narayanan  --80)
[4.00204 1.332 1.668 3.336 3.336 1.332 3 4.00204 3.336 1.99796 1.668 1.668 
1.99796 1.668 1.332 3.336 3.336 1.668 1.668 1.99796 3.336 3 3.33599 1.99796 
3 1.332 3 3.336 12.0546 4.00204 1.332 1.668 3.336 3.336 1.332 3 
1.668 3 3.336 1.99796 1.668 1.668 1.99796 1.668 1.332 3.336 3.336 1.99796 
3.336 1.99796 3.336 1.332 3.336 3.336 3.336 1.668 1.668 1.99796 3.336 3 
3.336 1.99796 3 1.332 3 3.336 139.136 4.99792 3.336 3.336 1.33203 1.66797 
4.33203 3.336 1.99792 3.336 3 3.336 3.336 3.336 3.336 17.4168 1.66803 1.99792 
68.9346 3.336 0 ]xsh
73.44 507.644 mo
(BubbleSortBubble sort)
[4.00204 3.336 3.336 3.336 1.332 3.336 4.00204 3.336 1.99796 54.0612 4.00204 3.336 
3.336 3.336 1.332 3.336 1.668 3 3.336 1.99796 0 ]xsh
387.36 507.644 mo
(Chris Leger --61)
[4.332 3.336 1.99796 1.332 3 1.668 3.336 3.336 3.336 3.336 32.4246 1.668 
1.99796 68.9346 3.33594 0 ]xsh
73.44 515.564 mo
(ComparisonCountingCompares each element to every other to determine n\251th outputChris Leger --67)
[4.332 3.336 4.99796 3.336 3.336 1.99796 1.332 3 3.336 3.336 4.332 3.336 
3.336 3.336 1.668 1.332 3.336 29.052 4.332 3.336 4.99796 3.336 3.336 1.99796 
3.336 3 1.668 3.336 3.336 3 3.336 1.668 3.33601 1.332 3.336 4.99796 
3.336 3.336 1.668 1.668 1.668 3.336 1.668 3.336 3 3.336 1.99796 3 
1.668 3.336 1.668 3.336 3.33598 1.99799 1.66797 1.66803 3.336 1.66797 3.336 3.336 
1.66803 3.336 1.99792 4.99799 1.33197 3.336 3.336 1.66803 3.336 1.14594 1.66803 3.336 
1.66797 3.336 3.336 1.66803 3.336 3.336 65.268 4.33197 3.336 1.99799 1.33197 3 
1.66803 3.336 3.336 3.336 3.336 32.4246 1.66797 1.99799 68.9345 3.336 0 ]xsh
73.44 523.484 mo
(InsertionSortInsertion sort)
[1.668 3.336 3 3.336 1.99796 1.668 1.332 3.336 3.336 4.00204 3.336 1.99796 
49.7316 1.668 3.336 3 3.336 1.99796 1.66801 1.332 3.336 3.336 1.668 3 
3.336 1.99796 0 ]xsh
387.36 523.484 mo
(Chris Leger --61)
[4.332 3.336 1.99796 1.332 3 1.668 3.336 3.336 3.336 3.336 32.4246 1.668 
1.99796 68.9346 3.33594 0 ]xsh
73.44 531.404 mo
(MergeSortMerge sort)
[4.99796 3.336 1.99796 3.336 3.336 4.00204 3.336 1.99796 55.737 4.99796 3.336 1.99796 
3.336 3.33601 1.668 3 3.336 1.99796 0 ]xsh
387.36 531.404 mo
(Bill Thies --66)
[4.00204 1.332 1.332 1.332 1.668 3.66595 3.336 1.332 3.336 40.1004 1.668 1.99796 
68.9345 3.33606 0 ]xsh
73.44 539.324 mo
(RadixSortRadix sort)
[4.332 3.336 3.336 1.332 3 4.00204 3.336 1.99796 57.4044 4.332 3.336 3.336 
1.332 3 1.668 3 3.336 1.99796 0 ]xsh
387.36 539.324 mo
(Chris Leger --52)
[4.332 3.336 1.99796 1.332 3 1.668 3.336 3.336 3.336 3.336 32.4246 1.668 
1.99796 68.9346 3.33594 0 ]xsh
LVUVOX+Arial-BoldItalicMT*1 [6 0 0 -6 0 0 ]msf
73.44 553.424 mo
(Toy Examples \(7\):)
[3.66595 3.66595 3.336 1.668 4.00204 3.336 3.336 5.33405 3.66595 1.668 3.336 3.336 
1.668 1.99796 3.336 1.99796 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
73.44 561.344 mo
(AutocorProduce auto-correlation seriesBill Thies --29)
[4.00204 3.336 1.668 3.336 3 3.336 63.4002 4.00204 1.99796 3.336 3.336 3.336 
3 3.336 1.668 3.336 3.336 1.668 3.336 1.99796 3 3.336 1.99794 1.99796 
3.336 1.332 3.336 1.668 1.332 3.336 3.336 1.668 3 3.336 1.99796 1.332 
3.336 151.464 4.00201 1.33203 1.33197 1.33203 1.66797 3.66595 3.336 1.33203 3.336 40.1003 
1.66803 1.99792 68.9346 3.336 0 ]xsh
73.44 569.264 mo
(FibFibonacci number generatorDavid Maze --21)
[3.66595 1.332 77.0808 3.66595 1.332 3.336 3.336 3.336 3.336 3 3 1.332 
1.668 3.336 3.336 4.99796 3.336 3.336 1.99796 1.668 3.336 3.336 3.336 3.336 
1.99796 3.336 1.668 3.336 158.797 4.33197 3.336 3 1.33203 3.336 1.66797 4.99799 
3.336 3 33.0972 1.66803 1.99792 68.9346 3.336 0 ]xsh
73.44 577.184 mo
(LatticeTen-stage lattice filterAli Meli --58)
[3.336 3.336 1.668 1.668 1.332 3 67.7382 3.66595 3.336 3.336 1.99796 3 
1.668 3.336 3.336 3.336 1.668 1.332 3.336 1.668 1.668 1.332 3 3.336 
1.66798 1.668 1.332 1.332 1.668 3.336 176.48 4.00208 1.33197 1.33203 1.66797 4.99799 
3.336 1.33197 43.4358 1.66803 1.99792 68.9346 3.336 0 ]xsh
73.44 585.104 mo
(RayTracer1Raytracer \(ported from Intel\)Janis Sermulins --407)
[4.332 3.336 3 3.66595 1.99796 3.336 3 3.336 1.99796 54.0744 4.332 3.336 
3 1.668 1.99796 3.336 3 3.336 1.99796 1.668 1.99796 3.336 3.336 1.99796 
1.668 3.336 3.336 1.668 1.668 1.99796 3.336 4.99796 1.668 1.668 3.336 1.668 
3.336 1.332 158.48 3 3.336 3.336 1.33203 3 1.66797 4.00208 3.336 1.99792 
4.99799 3.336 1.33197 1.33203 3.336 22.0914 1.66803 1.99792 65.5746 3.336 3.336 0 
]xsh
73.44 593.024 mo
(RayTracer2Raytracer \(rudimentary skeleton\)Amy Williams --154)
[4.332 3.336 3 3.66595 1.99796 3.336 3 3.336 1.99796 54.0744 4.332 3.336 
3 1.668 1.99796 3.336 3 3.336 1.99796 1.668 1.99796 1.99796 3.336 3.336 
1.332 4.99796 3.336 3.336 1.668 3.336 1.99796 3 1.668 3 3 3.336 
1.332 3.336 1.668 3.336 3.336 146.475 4.00201 4.99799 3 1.66797 5.664 1.33203 
1.33197 1.33203 1.33197 3.336 4.99799 28.443 1.66803 1.99792 65.5745 3.336 3.336 0 
]xsh
73.44 600.944 mo
(SampleTrellisTrellis encoder/decoder system, decodes blocks of 8 bytesAndrew Lamb --162)
[4.00204 3.336 4.99796 3.336 1.332 3.336 3.66595 1.99796 3.336 1.332 1.332 1.332 
48.7374 3.66595 1.99796 3.336 1.332 1.332 1.332 3 1.668 3.336 3.336 3 
3.336 3.336 3.336 1.99796 1.668 3.336 3.336 3 3.336 3.336 3.336 1.99796 
1.668 3 3 3 1.668 3.336 4.99796 1.668 1.668 3.336 3.336 3 
3.336 3.33598 3.336 3 1.66803 3.336 1.332 3.336 3 3 3 1.668 
3.336 1.668 1.668 3.336 1.668 3.336 3 1.668 3.336 79.098 4.00201 3.336 
3.336 1.99799 3.336 4.33197 1.66803 3.336 3.336 4.99792 27.7566 1.66803 1.99792 65.5746 
3.336 3.336 0 ]xsh
73.44 608.864 mo
(VectAddVector-vector addition)
[4.00204 3.336 3 1.668 4.00204 3.336 62.7342 4.00204 3.336 3 1.668 3.336 
1.99796 1.99796 3 3.336 3 1.668 3.336 1.99796 1.668 3.336 3.336 3.33598 
1.332 1.668 1.332 3.336 0 ]xsh
LVUVOW+Arial-ItalicMT*1 [6 0 0 -6 0 0 ]msf
387.36 608.864 mo
(unknown)
[3.336 3.336 3 3.336 3.336 4.332 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
448.8 608.864 mo
( --31)
[1.668 1.99796 68.9346 3.336 0 ]xsh
LVUVOV+ArialMT*1 [4.02 0 0 -4.02 0 0 ]msf
73.2 634.364 mo
(  3)
[1.11756 1.11756 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
77.7 637.364 mo
( Some helper functions in FAT, HDTV, and SampleTrellis remain untranslated from the Java-based StreamIt syntax.)
[1.668 4.00204 3.336 4.99796 3.336 1.668 3.336 3.336 1.332 3.336 3.336 1.99796 
1.668 1.668 3.336 3.336 3 1.668 1.332 3.336 3.336 3 1.668 1.332 
3.336 1.668 3.66595 4.00204 3.66595 1.668 1.668 4.332 4.332 3.66595 4.00204 1.668 
1.668 3.336 3.336 3.336 1.668 4.00204 3.336 4.99796 3.336 1.332 3.336 3.66595 
1.99796 3.336 1.332 1.332 1.332 3 1.668 1.99796 3.336 4.99796 3.336 1.332 
3.336 1.668 3.336 3.33601 1.66797 1.99799 3.336 3.336 3 1.33197 3.336 1.66803 
3.336 3.336 1.66797 1.66803 1.99792 3.336 4.99799 1.66797 1.66803 3.336 3.336 1.66797 
3 3.336 3 3.336 1.99799 3.336 3.336 3 3.336 3.336 1.66797 4.00208 
1.66797 1.99799 3.336 3.336 4.99792 1.66803 1.66797 1.66803 3 3 3.336 1.66797 
3.336 3 0 ]xsh
LVUVOV+ArialMT*1 [4.02 0 0 -4.02 0 0 ]msf
73.2 642.704 mo
(  4)
[1.11756 1.11756 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
77.7 645.704 mo
( The graphics pipelines are described in more detail in Chen et al., 2005.)
[1.668 3.66595 3.336 3.336 1.668 3.336 1.99796 3.336 3.336 3.336 1.332 3 
3 1.668 3.336 1.332 3.336 3.336 1.332 1.332 3.336 3.336 3 1.668 
3.336 1.99796 3.336 1.668 3.336 3.336 3 3 1.99796 1.332 3.336 3.336 
3.336 1.668 1.332 3.336 1.668 4.99796 3.336 1.99796 3.336 1.668 3.336 3.336 
1.668 3.336 1.332 1.332 1.668 1.332 3.336 1.668 4.332 3.336 3.336 3.336 
1.668 3.336 1.668 1.668 3.336 1.332 1.668 1.668 1.668 3.33598 3.336 3.336 
3.336 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LVUVOU+Arial-BoldMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7EF322B83F1A238159729EA2763BDA5644B7FF29C77F1E7
767C551E80A4119E3DEFE62470265720EBA9CD1A4DBD0027> |-
/C <1C60D8A8C9B6079F29433629160CFF8C0ED394DAF78ABC659D3C1CA35A71
24F3EC60D99D402EF815BBAD183DF52A632874467D7EAD718D8FFCEFADFCF793
B6AB7419428601D191F7033C3B817C9BA6FA6DF9FDEC520C6F71A6522E372C77
BA9557779C66B2293B99A1FC76> |-
/f <1C60D8A8C9B81F2C2EF90798875F55C6B7C9208D714355EF726A351D6815
982DB68413ADC09EF04A61699F666099EE693D8E6D61A084A3164CA8570BB0C4
70CCFFE68639B9D9AED0B640B5FA6767AFA6B9DF91EE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LVUVOU+Arial-BoldMT /Encoding get
dup 49 /one put
dup 67 /C put
dup 102 /f put
pop
%ADOEndSubsetFont
reset_gvm
/LVUVOU+Arial-BoldMT*1 
[32{/.notdef}rp /space 16{/.notdef}rp /one 15{/.notdef}rp /A /B /C 
/D 7{/.notdef}rp /L 8{/.notdef}rp /U 11{/.notdef}rp /a /b 
/c /d /e /f /.notdef /h /i /.notdef 
/k /.notdef /m /n /o /p /.notdef /r 
/s /t /u 138{/.notdef}rp]
LVUVOU+Arial-BoldMT nf
LVUVOU+Arial-BoldMT*1 [6 0 0 -6 0 0 ]msf
503.1 6.70404 mo
(Lines of )
[3.66595 1.668 3.66595 3.336 3.336 1.66803 3.66589 1.99799 0 ]xsh
506.04 15.524 mo
(Code)
[4.332 3.66595 3.66595 0 ]xsh
LVUVOU+Arial-BoldMT*1 [4.02 0 0 -4.02 0 0 ]msf
521.04 12.524 mo
(1)sh
LVUVOX+Arial-BoldItalicMT*1 [6 0 0 -6 0 0 ]msf
73.44 21.824 mo
(Realistic apps \(29\):)
[4.332 3.336 3.336 1.668 1.668 3.336 1.99796 1.668 3.336 1.668 3.336 3.66595 
3.66595 3.336 1.668 1.99796 3.336 3.336 1.99796 0 ]xsh
LVUVOV+ArialMT*1 [4.02 0 0 -4.02 0 0 ]msf
73.2 617.684 mo
(  1)
[1.11756 1.11756 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
77.7 620.684 mo
( Only non-comment, non-blank lines of code are counted.  Line counts do not include libraries used.)
[1.668 4.668 3.336 1.332 3 1.668 3.336 3.336 3.336 1.99796 3 3.336 
4.99796 4.99796 3.336 3.336 1.668 1.668 1.668 3.336 3.336 3.336 1.99796 3.336 
1.332 3.336 3.336 3 1.668 1.332 1.332 3.336 3.336 3 1.668 3.336 
1.668 1.668 3 3.336 3.336 3.336 1.668 3.336 1.99796 3.336 1.668 3 
3.336 3.336 3.336 1.668 3.336 3.336 1.668 1.668 1.668 3.336 1.332 3.336 
3.336 1.668 3 3.336 3.33598 3.336 1.66803 3 1.66797 3.336 3.336 1.66803 
3.336 3.336 1.66797 1.66803 1.33197 3.336 3 1.33203 3.336 3.336 3.336 1.66797 
1.33203 1.33197 3.336 1.99799 3.336 1.99792 1.33203 3.336 3 1.66797 3.336 3 
3.336 3.336 0 ]xsh
LVUVOV+ArialMT*1 [4.02 0 0 -4.02 0 0 ]msf
73.2 626.024 mo
(  2)
[1.11756 1.11756 0 ]xsh
LVUVOV+ArialMT*1 [6 0 0 -6 0 0 ]msf
77.7 629.024 mo
( The authors of MPD are Ola Johnsson, Magnus Stenemo, and Zain ul-Abdin.)
[1.668 3.66595 3.336 3.336 1.668 3.336 3.336 1.668 3.336 3.336 1.99796 3 
1.668 3.336 1.668 1.668 4.99796 4.00204 4.332 1.668 3.336 1.99796 3.336 1.668 
4.668 1.332 3.336 1.668 3 3.336 3.336 3.336 3 3 3.336 3.336 
1.668 1.668 4.99796 3.336 3.336 3.336 3.336 3 1.668 4.00204 1.668 3.336 
3.336 3.336 4.99796 3.336 1.668 1.668 3.336 3.336 3.336 1.668 3.66595 3.336 
1.332 3.33598 1.66803 3.336 1.33197 1.99799 4.00201 3.336 3.336 1.33203 3.336 0 
]xsh
72 610.904 mo
72.6 610.904 li
72.6 .344055 li
72 .344055 li
cp
f
154.08 610.904 mo
154.68 610.904 li
154.68 .944031 li
154.08 .944031 li
cp
f
385.92 610.904 mo
386.52 610.904 li
386.52 .944031 li
385.92 .944031 li
cp
f
447.36 610.904 mo
447.96 610.904 li
447.96 .944031 li
447.36 .944031 li
cp
f
499.2 610.904 mo
499.8 610.904 li
499.8 .944031 li
499.2 .944031 li
cp
f
528.96 610.904 mo
529.56 610.904 li
529.56 .944031 li
528.96 .944031 li
cp
f
72.6 .944031 mo
529.56 .944031 li
529.56 .344055 li
72.6 .344055 li
cp
f
72.6 8.86407 mo
499.8 8.86407 li
499.8 8.26404 li
72.6 8.26404 li
cp
f
499.8 16.3641 mo
529.56 16.3641 li
529.56 15.764 li
499.8 15.764 li
cp
f
72.6 23.8641 mo
529.56 23.8641 li
529.56 23.264 li
72.6 23.264 li
cp
f
72.6 31.7841 mo
529.56 31.7841 li
529.56 31.184 li
72.6 31.184 li
cp
f
72.6 39.704 mo
529.56 39.704 li
529.56 39.1041 li
72.6 39.1041 li
cp
f
72.6 47.6241 mo
529.56 47.6241 li
529.56 47.024 li
72.6 47.024 li
cp
f
72.6 55.5441 mo
529.56 55.5441 li
529.56 54.9441 li
72.6 54.9441 li
cp
f
72.6 63.4641 mo
529.56 63.4641 li
529.56 62.864 li
72.6 62.864 li
cp
f
72.6 71.384 mo
529.56 71.384 li
529.56 70.784 li
72.6 70.784 li
cp
f
72.6 79.3041 mo
529.56 79.3041 li
529.56 78.7041 li
72.6 78.7041 li
cp
f
72.6 87.2241 mo
529.56 87.2241 li
529.56 86.624 li
72.6 86.624 li
cp
f
72.6 95.144 mo
529.56 95.144 li
529.56 94.544 li
72.6 94.544 li
cp
f
72.6 103.064 mo
529.56 103.064 li
529.56 102.464 li
72.6 102.464 li
cp
f
72.6 110.984 mo
529.56 110.984 li
529.56 110.384 li
72.6 110.384 li
cp
f
72.6 118.904 mo
529.56 118.904 li
529.56 118.304 li
72.6 118.304 li
cp
f
72.6 126.824 mo
529.56 126.824 li
529.56 126.224 li
72.6 126.224 li
cp
f
72.6 134.744 mo
529.56 134.744 li
529.56 134.144 li
72.6 134.144 li
cp
f
72.6 142.664 mo
529.56 142.664 li
529.56 142.064 li
72.6 142.064 li
cp
f
72.6 150.584 mo
529.56 150.584 li
529.56 149.984 li
72.6 149.984 li
cp
f
72.6 158.504 mo
529.56 158.504 li
529.56 157.904 li
72.6 157.904 li
cp
f
72.6 166.424 mo
529.56 166.424 li
529.56 165.824 li
72.6 165.824 li
cp
f
72.6 174.344 mo
529.56 174.344 li
529.56 173.744 li
72.6 173.744 li
cp
f
72.6 182.264 mo
529.56 182.264 li
529.56 181.664 li
72.6 181.664 li
cp
f
72.6 190.184 mo
529.56 190.184 li
529.56 189.584 li
72.6 189.584 li
cp
f
72.6 198.104 mo
529.56 198.104 li
529.56 197.504 li
72.6 197.504 li
cp
f
72.6 206.024 mo
529.56 206.024 li
529.56 205.424 li
72.6 205.424 li
cp
f
72.6 213.944 mo
529.56 213.944 li
529.56 213.344 li
72.6 213.344 li
cp
f
72.6 221.864 mo
529.56 221.864 li
529.56 221.264 li
72.6 221.264 li
cp
f
72.6 229.784 mo
529.56 229.784 li
529.56 229.184 li
72.6 229.184 li
cp
f
72.6 237.704 mo
529.56 237.704 li
529.56 237.104 li
72.6 237.104 li
cp
f
72.6 245.624 mo
529.56 245.624 li
529.56 245.024 li
72.6 245.024 li
cp
f
72.6 253.544 mo
529.56 253.544 li
529.56 252.944 li
72.6 252.944 li
cp
f
72.6 267.644 mo
529.56 267.644 li
529.56 267.044 li
72.6 267.044 li
cp
f
72.6 275.564 mo
529.56 275.564 li
529.56 274.964 li
72.6 274.964 li
cp
f
72.6 283.484 mo
529.56 283.484 li
529.56 282.884 li
72.6 282.884 li
cp
f
72.6 291.404 mo
529.56 291.404 li
529.56 290.804 li
72.6 290.804 li
cp
f
72.6 299.324 mo
529.56 299.324 li
529.56 298.724 li
72.6 298.724 li
cp
f
72.6 313.424 mo
529.56 313.424 li
529.56 312.824 li
72.6 312.824 li
cp
f
72.6 321.344 mo
529.56 321.344 li
529.56 320.744 li
72.6 320.744 li
cp
f
72.6 329.264 mo
529.56 329.264 li
529.56 328.664 li
72.6 328.664 li
cp
f
72.6 337.184 mo
529.56 337.184 li
529.56 336.584 li
72.6 336.584 li
cp
f
72.6 345.104 mo
529.56 345.104 li
529.56 344.504 li
72.6 344.504 li
cp
f
72.6 353.024 mo
529.56 353.024 li
529.56 352.424 li
72.6 352.424 li
cp
f
72.6 360.944 mo
529.56 360.944 li
529.56 360.344 li
72.6 360.344 li
cp
f
72.6 368.864 mo
529.56 368.864 li
529.56 368.264 li
72.6 368.264 li
cp
f
72.6 376.784 mo
529.56 376.784 li
529.56 376.184 li
72.6 376.184 li
cp
f
72.6 384.704 mo
529.56 384.704 li
529.56 384.104 li
72.6 384.104 li
cp
f
72.6 392.624 mo
529.56 392.624 li
529.56 392.024 li
72.6 392.024 li
cp
f
72.6 400.544 mo
529.56 400.544 li
529.56 399.944 li
72.6 399.944 li
cp
f
72.6 408.464 mo
529.56 408.464 li
529.56 407.864 li
72.6 407.864 li
cp
f
72.6 416.384 mo
529.56 416.384 li
529.56 415.784 li
72.6 415.784 li
cp
f
72.6 424.304 mo
529.56 424.304 li
529.56 423.704 li
72.6 423.704 li
cp
f
72.6 432.224 mo
529.56 432.224 li
529.56 431.624 li
72.6 431.624 li
cp
f
72.6 440.144 mo
529.56 440.144 li
529.56 439.544 li
72.6 439.544 li
cp
f
72.6 448.064 mo
529.56 448.064 li
529.56 447.464 li
72.6 447.464 li
cp
f
72.6 455.984 mo
529.56 455.984 li
529.56 455.384 li
72.6 455.384 li
cp
f
72.6 463.904 mo
529.56 463.904 li
529.56 463.304 li
72.6 463.304 li
cp
f
72.6 478.004 mo
529.56 478.004 li
529.56 477.404 li
72.6 477.404 li
cp
f
72.6 485.924 mo
529.56 485.924 li
529.56 485.324 li
72.6 485.324 li
cp
f
72.6 493.844 mo
529.56 493.844 li
529.56 493.244 li
72.6 493.244 li
cp
f
72.6 501.764 mo
529.56 501.764 li
529.56 501.164 li
72.6 501.164 li
cp
f
72.6 509.684 mo
529.56 509.684 li
529.56 509.084 li
72.6 509.084 li
cp
f
72.6 517.604 mo
529.56 517.604 li
529.56 517.004 li
72.6 517.004 li
cp
f
72.6 525.524 mo
529.56 525.524 li
529.56 524.924 li
72.6 524.924 li
cp
f
72.6 533.444 mo
529.56 533.444 li
529.56 532.844 li
72.6 532.844 li
cp
f
72.6 541.364 mo
529.56 541.364 li
529.56 540.764 li
72.6 540.764 li
cp
f
72.6 555.464 mo
529.56 555.464 li
529.56 554.864 li
72.6 554.864 li
cp
f
72.6 563.384 mo
529.56 563.384 li
529.56 562.784 li
72.6 562.784 li
cp
f
72.6 571.304 mo
529.56 571.304 li
529.56 570.704 li
72.6 570.704 li
cp
f
72.6 579.224 mo
529.56 579.224 li
529.56 578.624 li
72.6 578.624 li
cp
f
72.6 587.144 mo
529.56 587.144 li
529.56 586.544 li
72.6 586.544 li
cp
f
72.6 595.064 mo
529.56 595.064 li
529.56 594.464 li
72.6 594.464 li
cp
f
72.6 602.984 mo
529.56 602.984 li
529.56 602.384 li
72.6 602.384 li
cp
f
72.6 610.904 mo
529.56 610.904 li
529.56 610.304 li
72.6 610.304 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/LVUVOX+Arial-BoldItalicMT*1 uf
/LVUVOX+Arial-BoldItalicMT uf
/Arial-BoldItalicMT uf
/LVUVOU+Arial-BoldMT*1 uf
/LVUVOU+Arial-BoldMT uf
/Arial-BoldMT uf
/LVUVOV+ArialMT*1 uf
/LVUVOV+ArialMT uf
/ArialMT uf
/LVUVOW+Arial-ItalicMT*1 uf
/LVUVOW+Arial-ItalicMT uf
/Arial-ItalicMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
