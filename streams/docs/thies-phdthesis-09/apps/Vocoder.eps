%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Vocoder.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:10:26 PM
%%BoundingBox: 0 0 468 404
%%HiResBoundingBox: 0 0 468 404
%%CropBox: 0 0 468 404
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -404 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 404 li
468 404 li
468 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 405 mo
504 405 li
504 0 li
35 0 li
cp
clp
.1237 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
36.9896 403.01 mo
502.844 403.01 li
502.844 1.48035 li
36.9896 1.48035 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 76 /L put
dup 84 /T put
dup 86 /V put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 108 /l put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 118 /v put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/L <1C60D8A8C9B7D8BE1621F7F8A9A93A327F755C3E81E8F6E5B36D5D09EC27
E8352590DCF5FBB39847107CDCA7E2F69BF8A0E97E902F61DA0FFC19F5F5635E
A2E6B7FBC25C45E39802E8D22E33BC6334A08FAC75B725C0C2D4D8BA4EE1> |-
/T <1C60D8A8C9B7D8BE16B2E353E3300378A32828826C127DE3D6A3769F5542
8119DC48F4B555CFAC557278838F3EC6C5F7B64F6B44DFEFCBC8AF8174185170
E165701BB15CF1CB88629A978EF6D86FB8> |-
/V <1C60D8A8C9B6079F005CDC6370483696E1EAFC944BD4E06D86DBD18EB735
2F45C381C0DF5B906978D128771DD089E21DCCBC0592B3A6BE45DFF941B3D9AF
82C0E5BBEE832081C600F8D424981C94A7921155A8C74A96B13AD2AF06E82571
B4060A57A3D45E0E99876FCE9C38AE3E4A7F8C> |-
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
/p <1C60D8A8C9B7A73D9AFACE39AE6BAA6E09D7322029CE296F526808097535
692942DF193E08360A1A27EB6A08251F7D53D3FA96D22918185F2823E13833F6
44411211FB9E60C91D24768368C1EE71DFEA1AF8285D596D61CE8A067C14BC2E
E1974A4DF14D782DBEDB8D2CE5673BB9634CC4945A7FA5A5E1B87E0F2D94F438
C21548DAE429B68406206429A87E1B462DA7A9D2> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
/v <1C60D8A8C9B7A73DDA3AE0A055993EE6BE7DFD4A4A2DB6881516C07791ED
230086728F5F7B4242AB79AA3E9EFA40308C16768E728C96C19C447086D3AC82
2F0AB1C43C44A30591856370C72E911DB5FEBBFD365EF7E42462BF4A23A3EEAE
F504CBF5C917EC0A44C5B6D735> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDTA+TimesNewRomanPSMT*1 
[76{/.notdef}rp /L 7{/.notdef}rp /T /.notdef /V 12{/.notdef}rp /c 
/d /e 6{/.notdef}rp /l 2{/.notdef}rp /o /p /.notdef 
/r 3{/.notdef}rp /v 137{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
37.8164 2.86595 mo
(VocoderTopLevel)
[1.25033 .865902 .768894 .865898 .865902 .76889 .576679 1.05812 .865898 .865898 1.05812 .76889 
.865902 .768894 0 ]xsh
54.555 78.916 mo
473.651 78.916 li
473.651 43.043 li
54.555 43.043 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/B <1C60D8A8C9B64EDFF4D0475F24A0512970A16CFF6BFBD1A1A12D07A62723
BF27DBD01B60ACEC3C9DB4E627348B4F9C96D245E2397B81856FE7B9149C0D88
A0B1C89901A357B578317FC0F49D1050D95CF70B7F7A7C5741B1B644F20C16DB
8F1BD7E6C45546C9302E6AD757CA73E92696A658F8A903A2E6B5FA3BE24637C3
3393411FB0E113E4BDFEBF11B4E90F57471B306273B2241C3C23457DA84CC16B
22781151F6DE159B155116967F7D53FA1DDDDF14084F0631BA1C08300F50E5BA
9DC336D8349BEA3371DCAFDF658781D6> |-
/F <1C60D8A8C9B7EF322B10A2A8DE6CF647A07CB452C54BD470E6C4C389B7AB
8653B88FE6E4626649FABCEAB5DAD30BD9C2A2F1F8512C1A1DC93BDB928A3688
B193ECEDB997255AB4DCBBC4BBB3FF147299B3653B9E76139CB6E91A13A47208
F2688B5C42863D22FFBF8FD8DF09F08A1966F6652461EEB3D18F0F0CB5B8E18D
6016409AA3D413D5FA051FCF9B4DFF0734259E7DCF> |-
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 66 /B put
dup 70 /F put
dup 97 /a put
dup 105 /i put
dup 107 /k put
dup 110 /n put
dup 116 /t put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B 3{/.notdef}rp /F 5{/.notdef}rp /L 7{/.notdef}rp /T 
/.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /.notdef /n /o 
/p /.notdef /r /.notdef /t /.notdef /v 137{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
55.4276 44.4289 mo
(FilterBank)
[.962879 .481441 .481441 .481438 .768894 .576675 1.1551 .768894 .865898 0 ]xsh
38.9688 243.19 mo
500.865 243.19 li
500.865 94.255 li
38.9688 94.255 li
cp
1 gry
@
40.948 234.284 mo
86.717 234.284 li
86.717 100.688 li
40.948 100.688 li
cp
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B59F85E7C3D982C036A83A051CFEB65CDD644D44695DA87381
2F9E0DA4474B3DF6D63B3341F86CDE23D0512CA425D085DC5BA255E6B3240439
E201FEC100F452F18CDA5E088317BF79F4C8FC952A839FE77A57A286C006FAF4
6CE1F964CD62165C424C020FEAD96AC86FEFFC256D> |-
/S <1C60D8A8C9B7EF320E2EFDBCAC7BC76D0C8C1FC222AFE4F464C56D04CD48
5F140DB725EC46F068943283C9A43A14A852E22E87331165F602FD95AC890BE8
83DAD7F63C31168B480A95AC244C28C8F37F118A399681DB4822661628FBDA87
D99D0367C013E32688035EC31A5C3FC194FEB20C4FCD84A9EB3547C0D5A421A0
1B87DFDA871D7919B7251A9EC84A645CA15425845057F189EC65A90DD4028CC5
B10853B05E6F7AF9E84AC6588CDCE11B6EF766B248A8304E38964E579F6EF2DC
2D4971ED042868564E8E982FE2B2> |-
/f <1C60D8A8C9B81F2C3AAA7F9332A1FC560AB2BC70F6F61F670AD82FC8B626
674790DAFBDF46077811E1DF38721CA7CA8FBC2C5E006E567037490710BD3A02
BCB7C7EDEC00C0FF3F7CF7FF144794FA5B0DC9D77482C00E98ABF65E83ECDA1A
E1009D> |-
/g <1C60D8A8C9B7A73D85D7E997B7B5DF7D7777AF52CC5562CB6E990E974840
46648599A1D9C4DB63B2EA37B7BBC0C3039255635B40FAB067F562720BFA98A6
8AA5F28640EAE52B9FE1BA9F5F2A49A2F977CAB7D5C25E3626BAA2BEB9E431EA
60B6FFDB96CDFE0161651CB3C7DDAAF79341AA1B63131C7BD07B3EF7C547B329
2DEEC810138CCDC2FA69E1A2AD41097A54F4DBBBA72B1810538F2F0FBA5B3B54
046B0BB798F435A12098BB54904B4FA0166943538B1D7B8EA5970358CDBCC48E
31C506A3AAB0AC2519075E7791339AF09F8C1F93B0D81A9E5ED3B02D4C03B817
17F61566CDC855CB444B31FBC8E71F4A79E39CF6ED7B9B21E0269B8614410251
F072B930BD3C2C0B5BE3125CE4461E97B369DD7B68AF48B8706DE7D2976BB7A8
F7FA6E1A10F519A6E8E51022609E6B7A2E822DDCD222A999CAA520FD83CCB934
D41B4EF6E07BE85DFA424019E44CA0D51152EDBDE920B3C59D4A719415BD84E9
F231F0CBEF222AB9855B090598B4D01FCC8283B4EC699D2D8EDA681DF37E56EB
75FAFC019A1A3645CA60183B64A594CD3556BA6088F7C2AF3F05FDD0875B0187
C18BC8AC2785F74D85EFAA74EA4D56B1D0576FD461BA0B37199C> |-
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 77 /M put
dup 83 /S put
dup 102 /f put
dup 103 /g put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B 3{/.notdef}rp /F 5{/.notdef}rp /L /M 5{/.notdef}rp 
/S /T /.notdef /V 10{/.notdef}rp /a /.notdef /c 
/d /e /f /g /.notdef /i /.notdef /k 
/l /.notdef /n /o /p /.notdef /r /.notdef 
/t /u /v 137{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
41.773 102.073 mo
(MagnitudeStuff)
[1.53956 .76889 .865902 .865898 .481441 .481441 .865898 .865902 .76889 .962879 .481441 .865902 
.576675 0 ]xsh
50.5966 138.292 mo
83.7482 138.292 li
83.7482 103.656 li
50.5966 103.656 li
cp
1 gry
@
42.9272 208.554 mo
84.7378 208.554 li
84.7378 160.558 li
42.9272 160.558 li
cp
@
56.7816 199.648 mo
82.7586 199.648 li
82.7586 171.444 li
56.7816 171.444 li
cp
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/R <1C60D8A8C9B64EDFF4D0475F241567109AA60E358A72CDD6748BBE527383
3D9930EA16405C9FA084F4E606B7DF07A2CCABEF78658BA281F5D25760E71232
16C34541C223BEC48612BD7C0052F7AD27E210716125E9B30EDB889188D65976
1E4423BF9E66EB5CCCE83D82A2DB04554982E2E899847CA739A4B92152682375
567D18A66EABD5068029F8FB7424BADB87039D0F6B1530> |-
/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C86
82F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CB
A64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762
A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A
9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61F
B9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 82 /R put
dup 109 /m put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B 3{/.notdef}rp /F 5{/.notdef}rp /L /M 4{/.notdef}rp 
/R /S /T /.notdef /V 10{/.notdef}rp /a /.notdef 
/c /d /e /f /g /.notdef /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/.notdef /t /u /v 137{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
57.5523 172.829 mo
(Remapper)
[1.1551 .76889 1.34734 .76889 .865902 .865898 .768894 0 ]xsh
83.9956 199.648 mo
498.886 199.648 li
498.886 100.688 li
83.9956 100.688 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7EF322B10A2A8DE6EF0A6CE60E86B1DF5C68015667A2338DB
07BCF91C9D8DCCB5967A656E7EB6651B3E305A306DA1BB8C1BAEECFC60DC00D8
8AEC56E3DF7455D57CB9BB0CC9A32704D4F0F1C39C5B2EDC70F42754CACE7253
FF5FDAE4B675FFF987E22613E24B8956EFA9C2C5B9AC406D966F459601B2046A
C9E54A3BB37C45EDEB> |-
/h <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA64197CEECB76B9E4
D2E9F717E2E21BA6AFBDB9D486017DE1334EE2B8AC7E25B49C380829180892EE
A76E25D726C9DCA303C64F5FE456E4A565D8D0ED565D009BA02A6DD13A835659
5990FC1760FC10BB02F96DEC2D5390B1C4D4059132A392595F028220DA07D2CD
E701448700C9> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 80 /P put
dup 104 /h put
dup 115 /s put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B 3{/.notdef}rp /F 5{/.notdef}rp /L /M 2{/.notdef}rp 
/P /.notdef /R /S /T /.notdef /V 10{/.notdef}rp 
/a /.notdef /c /d /e /f /g /h 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u /v 137{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
84.8206 102.073 mo
(PhaseStuff)
[.962883 .865898 .76889 .67366 .76889 .962883 .481438 .865898 .576683 0 ]xsh
85.9748 183.319 mo
496.906 183.319 li
496.906 103.656 li
85.9748 103.656 li
cp
1 gry
@
87.954 170.454 mo
113.931 170.454 li
113.931 110.583 li
87.954 110.583 li
cp
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 73 /I put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B 3{/.notdef}rp /F 2{/.notdef}rp /I 2{/.notdef}rp /L 
/M 2{/.notdef}rp /P /.notdef /R /S /T /.notdef 
/V 10{/.notdef}rp /a /.notdef /c /d /e /f 
/g /h /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u /v 
137{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
88.8075 111.969 mo
(InnerPhaseStuff)
[.576675 .865898 .865906 .76889 .576675 .962883 .865898 .76889 .67366 .76889 .962883 .481438 
.865906 .576675 0 ]xsh
115.168 170.454 mo
141.145 170.454 li
141.145 110.583 li
115.168 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
116.022 111.969 mo
(InnerPhaseStuff)
[.576675 .865898 .865906 .76889 .576675 .962883 .865898 .76889 .67366 .76889 .962883 .481438 
.865898 .576683 0 ]xsh
142.382 170.454 mo
168.359 170.454 li
168.359 110.583 li
142.382 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
143.235 111.969 mo
(InnerPhaseStuff)
[.576675 .865906 .865891 .768906 .576675 .962875 .865906 .76889 .673645 .768906 .962875 .481445 
.865891 .576675 0 ]xsh
169.596 170.454 mo
195.573 170.454 li
195.573 110.583 li
169.596 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
170.45 111.969 mo
(InnerPhaseStuff)
[.576675 .865906 .865891 .768906 .576675 .962875 .865906 .76889 .673645 .768906 .962875 .481445 
.865891 .576675 0 ]xsh
196.81 170.454 mo
222.787 170.454 li
222.787 110.583 li
196.81 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
197.664 111.969 mo
(InnerPhaseStuff)
[.576675 .865906 .865891 .76889 .576691 .962875 .865891 .768906 .673645 .768906 .962875 .481445 
.865891 .576675 0 ]xsh
224.024 170.454 mo
250.001 170.454 li
250.001 110.583 li
224.024 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
224.878 111.969 mo
(InnerPhaseStuff)
[.576675 .865906 .865891 .768906 .576675 .962875 .865906 .76889 .673645 .768906 .962875 .481445 
.865891 .576675 0 ]xsh
251.238 170.454 mo
277.215 170.454 li
277.215 110.583 li
251.238 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
252.091 111.969 mo
(InnerPhaseStuff)
[.576675 .865906 .865891 .76889 .576691 .96286 .865906 .76889 .673676 .76889 .962891 .481415 
.865906 .576691 0 ]xsh
278.452 170.454 mo
304.429 170.454 li
304.429 110.583 li
278.452 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
279.305 111.969 mo
(InnerPhaseStuff)
[.576691 .865875 .865906 .76889 .576691 .96286 .865906 .76889 .673676 .76889 .962891 .481415 
.865906 .576691 0 ]xsh
305.666 170.454 mo
331.643 170.454 li
331.643 110.583 li
305.666 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
306.52 111.969 mo
(InnerPhaseStuff)
[.576691 .865875 .865906 .76889 .576691 .96286 .865906 .76889 .673676 .76889 .96286 .481445 
.865906 .576691 0 ]xsh
332.88 170.454 mo
358.857 170.454 li
358.857 110.583 li
332.88 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
333.733 111.969 mo
(InnerPhaseStuff)
[.576691 .865875 .865906 .76889 .576691 .96286 .865906 .76889 .673676 .76889 .96286 .481445 
.865906 .576691 0 ]xsh
360.094 170.454 mo
386.071 170.454 li
386.071 110.583 li
360.094 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
360.948 111.969 mo
(InnerPhaseStuff)
[.576691 .865875 .865906 .76889 .576691 .96286 .865906 .76889 .673676 .76889 .962891 .481415 
.865906 .576691 0 ]xsh
387.308 170.454 mo
413.285 170.454 li
413.285 110.583 li
387.308 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
388.161 111.969 mo
(InnerPhaseStuff)
[.576691 .865875 .865906 .76889 .576691 .96286 .865906 .76889 .673676 .76889 .962891 .481415 
.865906 .576691 0 ]xsh
414.522 170.454 mo
440.499 170.454 li
440.499 110.583 li
414.522 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
415.375 111.969 mo
(InnerPhaseStuff)
[.576691 .865875 .865906 .76889 .576691 .96286 .865906 .76889 .673676 .76889 .962891 .481415 
.865906 .576691 0 ]xsh
441.736 170.454 mo
467.713 170.454 li
467.713 110.583 li
441.736 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
442.59 111.969 mo
(InnerPhaseStuff)
[.576691 .865875 .865906 .76889 .576691 .96286 .865906 .76889 .673676 .76889 .96286 .481445 
.865906 .576691 0 ]xsh
468.95 170.454 mo
494.927 170.454 li
494.927 110.583 li
468.95 110.583 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
469.803 111.969 mo
(InnerPhaseStuff)
[.576691 .865875 .865906 .76889 .576691 .96286 .865906 .76889 .673676 .76889 .96286 .481445 
.865906 .576691 0 ]xsh
69.5227 361.447 mo
126.548 361.447 li
126.548 256.549 li
69.5227 256.549 li
cp
@
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
70.3402 257.935 mo
(SumReals)
[.962883 .865898 1.34734 1.1551 .768898 .76889 .481438 0 ]xsh
71.5019 352.541 mo
114.302 352.541 li
114.302 264.961 li
71.5019 264.961 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H <1C60D8A8C9B6079F62AF7EE2120CD8667DDD4FA2DBFCE5E63E48B84464C1
802A269C64DF6D959EDF25835FFE2A562C206570E6F5B714FC53C2D5C307E1C8
A7B7F4078E600204C204D1FAC19490C22F80872356DF60239B84CD61D63A7DAA
1B4B4595C75AFC0D0514E00256BFA54FA5E3DE43161DB123A8A356631F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 72 /H put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B 3{/.notdef}rp /F /.notdef /H /I 2{/.notdef}rp 
/L /M 2{/.notdef}rp /P /.notdef /R /S /T 
/.notdef /V 10{/.notdef}rp /a /.notdef /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v 137{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
72.2727 266.347 mo
(SumRealsRealHandler)
[.962883 .865898 1.34734 1.1551 .768898 .76889 .481438 .67366 1.1551 .76889 .768898 .481438 
1.25034 .76889 .865898 .865906 .481438 .76889 0 ]xsh
73.4811 296.134 mo
112.323 296.134 li
112.323 267.93 li
73.4811 267.93 li
cp
1 gry
@
85.2326 326.811 mo
112.199 326.811 li
112.199 298.607 li
85.2326 298.607 li
cp
@
273.999 10.139 mo
273.999 7.06497 269.568 4.57297 264.103 4.57297 cv
258.637 4.57297 254.207 7.06497 254.207 10.139 cv
254.207 13.213 258.637 15.706 264.103 15.706 cv
269.568 15.706 273.999 13.213 273.999 10.139 cv
0 gry
@
273.999 10.139 mo
273.999 7.06497 269.568 4.57297 264.103 4.57297 cv
258.637 4.57297 254.207 7.06497 254.207 10.139 cv
254.207 13.213 258.637 15.706 264.103 15.706 cv
269.568 15.706 273.999 13.213 273.999 10.139 cv
/1 
[/DeviceRGB] /CSA add_res
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/asterisk <1C60D8A8C9B7A73DB9A0737247D562C61165E8E636EE73CF26D64
F3C6728422CEE27A3F00DC7152CA3773F07EA559F0959F48B519FDEC6150629C
166D2B4FBEF2A598C45B9530847243905C1F3F150F0DD5877800507BF2B97A2E
4942336B61DB2054C6AB2AE38E3AEA192A16823CC1BE212834012F90F71E96A0
46E312361C7B9D33CA838F52208FFCDFB3B3A9B2A9728D3AFAB94EEE3598CA05
C0D62AFFA345B041C6B4E56F6827F181D11C4BECD0C9CCA67> |-
/hyphen <1C60D8A8C9B81F2C7E673161CF52871F3F524B3A1BAC5ADA04F510A
476> |-
/slash <1C60D8A8C9B854D088EAD778FBC18D924BA165ED7CB0EB5700C3B61B
62ACF96E65C0BF> |-
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
/colon <1C60D8A8C9B854D0E389293C42E83787A5BE0CE9B5745E40D1B32D07
F826004562E0981DB26F3EF2E2B5CD932C33C49C462F9673F306A9A8ECFFE93D
9FCE8BF4190AA3F1208FCCE1> |-
/equal <1C60D8A8C9B7E7C1C7C30B941AA047473EBF9655DE246137CE0666A3
DD27E47997A26319529C8C4FF5C38D266AE0> |-
/greater <1C60D8A8C9B7E7C1C7C30B940B3D62C7A181F0EBB0723CBB160375
71F050C44CCE59A85ACB3DB6BF9B03383F> |-
/A <1C60D8A8C9B6079F005CDFC8A94B75FD7D89F5577E741BA5E9223B5FB59E
3315C336CDEC6F323D18A178B38DCEDA9B451B37165385283368F94E5EC5086C
A620D2549B18425DA74331F96252E5D5358EE44D33B708D9B8822975F755BF6A
D18C81AA5BF9B47D39D0AFBBC3A6521D0B18D90963534584D1092363898607EF
C07B44A235786C96> |-
/E <1C60D8A8C9B7D8BE1621F7F8DAEB9FA9CBAFC8F4F4D756F2191C830A0E4A
58F87E3DDE67D49AF36DDF5F1FB2D74CAA0A1A0C249C8C349E149A4722F92BF7
61EFA3C2F9EC864F14F3A3AC121B867A3642166A4B07211381D27468A1D61050
1454C0DD1325D701AB4ADD917E16E61514B3C2631A525AEC590FB4C52AA73BF6
506DADDCC92C07368DF00A34F77E6ED1C2061C6913B4C24C30A64720E240E09F
9DD8F5EF76F17E9EEAE569D41B7D8D946B46BFFC> |-
/O <1C60D8A8C9B6079F258D65BC2331B95A484F6FB0C89DE7976C286549CD33
A4D7316575EC038BAA234ED3FB5DEACB25E52512A7CBD428E6DBD2EB830622E8
8A44262525560702DCFFFB3478FE1A2C6113548B23F661EC01296D75C1A7D5FE
B75CD951FFE5A9> |-
/U <1C60D8A8C9B6079F675A124E1112F68E116C07D407D6BD729F3D1467FEC9
DB1B717EDCA1CB257898FAA810DC98AD012099D6E27B9582DB9C127CF24AAE1E
5B37683D2BCD64B5A5B8A07FAB5E4A8A80CE7FE3009E0C18967F5352FF3AD65B
1392BE000C7D33B48AEC2DD2A19998C5FE8EA47D78> |-
/w <1C60D8A8C9B6079F6CBBA5F366E947F933D60DF598D919B1B7650559D736
37DABDC1EE55BCEC17305D792CEB494E24BD853631335C74FFCA113C4D914522
6940D65B0FA636B78B1332922431C88D4DDF20C0A3C1C91D0C3F0EC21F67A6EF
80D94D8DD0BC64DA8FAF76B12BBC90C7B441833497F4FAAF7AFFFE22453504D1
C6C3D3F89787D8CE910F64CD7AC81F424C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 42 /asterisk put
dup 45 /hyphen put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 58 /colon put
dup 61 /equal put
dup 62 /greater put
dup 65 /A put
dup 69 /E put
dup 79 /O put
dup 85 /U put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 9{/.notdef}rp /asterisk 2{/.notdef}rp /hyphen /.notdef /slash 
/zero /one /two 7{/.notdef}rp /colon 2{/.notdef}rp /equal /greater 
2{/.notdef}rp /A /B 2{/.notdef}rp /E /F /.notdef /H 
/I 2{/.notdef}rp /L /M /.notdef /O /P /.notdef 
/R /S /T /U /V 10{/.notdef}rp /a /.notdef 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /v /w 136{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
260.159 7.56596 mo
(StepSource)
[.962891 .481415 .768921 .865875 .962891 .865906 .865906 .57666 .76889 0 ]xsh
260.969 9.54527 mo
(work=21)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
260.849 11.5245 mo
(I/O: 0->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
256.743 13.5036 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
269.917 24.488 mo
269.917 22.166 267.314 20.283 264.103 20.283 cv
260.892 20.283 258.289 22.166 258.289 24.488 cv
258.289 26.811 260.892 28.694 264.103 28.694 cv
267.314 28.694 269.917 26.811 269.917 24.488 cv
@
269.917 24.488 mo
269.917 22.166 267.314 20.283 264.103 20.283 cv
260.892 20.283 258.289 22.166 258.289 24.488 cv
258.289 26.811 260.892 28.694 264.103 28.694 cv
267.314 28.694 269.917 26.811 269.917 24.488 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7A73DF81BACD811429F931042E1295F1D2320E46DE79DF7
47FCAABFFD92F045A475E54E15C8E93ECB3BD59C8545C0EF45BF22429615FC68
5C033A02F070B2C6D7D737838C1853D297AC8915086E73952A7A9847D6F588AB
17767CC39CB62607242BC1B7BFF5295CEB6C03755CD9B53DA2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 9{/.notdef}rp /asterisk 2{/.notdef}rp /hyphen /.notdef /slash 
/zero /one /two 3{/.notdef}rp /six 3{/.notdef}rp /colon 2{/.notdef}rp 
/equal /greater 2{/.notdef}rp /A /B 2{/.notdef}rp /E /F 
/.notdef /H /I 2{/.notdef}rp /L /M /.notdef /O 
/P /.notdef /R /S /T /U /V 10{/.notdef}rp 
/a /.notdef /c /d /e /f /g /h 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u /v /w 136{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
260.399 22.9049 mo
(IntToFloat)
[.576691 .865875 .481445 1.05814 .865875 .962891 .481445 .865906 .76889 0 ]xsh
261.403 24.8841 mo
(work=6)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
260.849 26.8633 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
264.103 15.829 mo
264.103 16.943 264.103 18.056 264.103 19.046 cv
@
263.855 19.046 mo
264.103 20.283 li
264.474 19.046 li
cp
@
263.855 19.046 mo
264.103 20.283 li
264.474 19.046 li
f
269.422 37.353 mo
269.422 35.03 267.04 33.147 264.103 33.147 cv
261.165 33.147 258.784 35.03 258.784 37.353 cv
258.784 39.676 261.165 41.559 264.103 41.559 cv
267.04 41.559 269.422 39.676 269.422 37.353 cv
@
269.422 37.353 mo
269.422 35.03 267.04 33.147 264.103 33.147 cv
261.165 33.147 258.784 35.03 258.784 37.353 cv
258.784 39.676 261.165 41.559 264.103 41.559 cv
267.04 41.559 269.422 39.676 269.422 37.353 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F62AF7EE2124AC712AE5D5419E262A0C00C6163DFBCB2
A6FA65DDDD5062250DB8BBFB46EB35827750F9FCEE696526B20FE9266474B179
350945BBDAF7180FAB04D619EB38198FC722361E0B3B5E50F9017F19C7BDCABB
285F506A04FE32C63936689B1F9C81923B03440D57336303C59B59E8D3C0659D
33> |-
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 68 /D put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 9{/.notdef}rp /asterisk 2{/.notdef}rp /hyphen /.notdef /slash 
/zero /one /two 3{/.notdef}rp /six 3{/.notdef}rp /colon 2{/.notdef}rp 
/equal /greater 2{/.notdef}rp /A /B /.notdef /D /E 
/F /.notdef /H /I 2{/.notdef}rp /L /M /.notdef 
/O /P /.notdef /R /S /T /U /V 
10{/.notdef}rp /a /.notdef /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
/.notdef /y 134{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
262.035 35.7699 mo
(Delay)
[1.25034 .76889 .481445 .76889 0 ]xsh
261.402 37.7491 mo
(work=6)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
260.849 39.7283 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
264.103 28.694 mo
264.103 29.684 264.103 30.797 264.103 31.91 cv
@
263.855 31.91 mo
264.103 33.147 li
264.474 31.91 li
cp
@
263.855 31.91 mo
264.103 33.147 li
264.474 31.91 li
f
278.576 48.239 mo
278.576 47.009 272.096 46.012 264.103 46.012 cv
256.11 46.012 249.63 47.009 249.63 48.239 cv
249.63 49.469 256.11 50.465 264.103 50.465 cv
272.096 50.465 278.576 49.469 278.576 48.239 cv
@
278.576 48.239 mo
278.576 47.009 272.096 46.012 264.103 46.012 cv
256.11 46.012 249.63 47.009 249.63 48.239 cv
249.63 49.469 256.11 50.465 264.103 50.465 cv
272.096 50.465 278.576 49.469 278.576 48.239 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two 3{/.notdef}rp /six 
3{/.notdef}rp /colon 2{/.notdef}rp /equal /greater 2{/.notdef}rp /A /B 
/.notdef /D /E /F /.notdef /H /I 2{/.notdef}rp 
/L /M /.notdef /O /P /.notdef /R /S 
/T /U /V 10{/.notdef}rp /a /.notdef /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /.notdef /y 134{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
250.827 48.635 mo
(duplicate\(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\))
[.865906 .865891 .865906 .481445 .48143 .76889 .768906 .48143 .76889 .576691 .865906 .432922 
.865906 .432953 .865906 .432953 .865906 .432953 .865875 .432953 .865906 .432953 .865906 .432953 
.865906 .432922 .865906 .432953 .865906 .432953 .865906 .432953 .865875 .432953 .865906 .432953 
.865906 .432953 .865906 0 ]xsh
264.103 41.559 mo
264.103 42.672 264.103 43.786 264.103 44.899 cv
@
263.855 44.775 mo
264.103 46.012 li
264.474 44.775 li
cp
@
263.855 44.775 mo
264.103 46.012 li
264.474 44.775 li
f
81.2742 61.97 mo
81.2742 58.144 75.5144 55.042 68.4094 55.042 cv
61.3044 55.042 55.5446 58.144 55.5446 61.97 cv
55.5446 65.795 61.3044 68.897 68.4094 68.897 cv
75.5144 68.897 81.2742 65.795 81.2742 61.97 cv
@
81.2742 61.97 mo
81.2742 58.144 75.5144 55.042 68.4094 55.042 cv
61.3044 55.042 55.5446 58.144 55.5446 61.97 cv
55.5446 65.795 61.3044 68.897 68.4094 68.897 cv
75.5144 68.897 81.2742 65.795 81.2742 61.97 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7A73D9EB159A3CFECEE26FAC12AD4B6691842B4C84783
E84E1D8CD272AEC54014C937C15B810E403549328E3DC44B6A66E9E0AE5509A1
20FFE6F694340EC43D35C59CD7D1B2F14C1F1D5BA576A10F77E962817750FC0E
DC62627EE0E94BCE030A10C59143A015250A384C09B6A65F8572DF3FCBF68CF8
0D23E4E88D0691BD2178810DDABD5F40D8018F795B8CB5A52DDDD05F80E9A2BC
CDF3A5E14C701FBADF0447A7AE0E47FA8F86216AC25155BFF3569B19382CA905
7B18009FE630A2D7CEFDC3A4A3> |-
/K <1C60D8A8C9B6079F62AF7EE261D2819ED7974217E7034289FA7C1BABF100
C6A5480EF2F67F33525B9F0C3A7EBEA8703E8C35FFE54D3010A9809D5E12442C
409B269A7D4346FFD3D0C882E0638FE5876FB72290B12BADDE73C28ABC60097D
5F47A0B45D92F7FD41DF8475D961E4F5A95EF6558D45744A11DE71603FC94A1B
038775E2BC960C01D2B930F2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 56 /eight put
dup 75 /K put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two 3{/.notdef}rp /six 
/.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 2{/.notdef}rp 
/A /B /.notdef /D /E /F /.notdef /H 
/I /.notdef /K /L /M /.notdef /O /P 
/.notdef /R /S /T /U /V 10{/.notdef}rp /a 
/.notdef /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
64.8974 58.407 mo
(DFTFilter)
[1.25034 .962875 1.05812 .962875 .481445 .481438 .481438 .768898 0 ]xsh
65.2757 60.3862 mo
(work=66)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
65.1554 62.3653 mo
(I/O: 1->2)
[.576675 .481438 1.25034 .481445 .432945 .865898 .576675 .97673 0 ]xsh
58.4041 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865898 .865902 .865898 .432953 .962879 1.05812 1.05812 1.25034 .962875 .432953 .865898 .865898 
.432953 1.25034 1.25033 1.05812 1.25034 1.25033 .432953 .865898 .865898 0 ]xsh
61.0494 66.3237 mo
(*** STATEFUL ***)
[.865898 .865902 .865898 .432953 .962883 1.05811 1.25034 1.05811 1.05812 .962875 1.25034 1.05811 
.432953 .865898 .865906 0 ]xsh
249.63 48.239 mo
193.841 48.61 137.805 51.084 82.0164 54.919 cv
80.7794 55.042 79.1713 55.537 77.5632 56.279 cv
@
77.6869 55.908 mo
76.6973 56.65 li
77.9343 56.403 li
cp
@
77.6869 55.908 mo
76.6973 56.65 li
77.9343 56.403 li
f
109.23 61.97 mo
109.23 58.144 103.471 55.042 96.3656 55.042 cv
89.2605 55.042 83.5008 58.144 83.5008 61.97 cv
83.5008 65.795 89.2605 68.897 96.3656 68.897 cv
103.471 68.897 109.23 65.795 109.23 61.97 cv
@
109.23 61.97 mo
109.23 58.144 103.471 55.042 96.3656 55.042 cv
89.2605 55.042 83.5008 58.144 83.5008 61.97 cv
83.5008 65.795 89.2605 68.897 96.3656 68.897 cv
103.471 68.897 109.23 65.795 109.23 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
92.8536 58.407 mo
(DFTFilter)
[1.25034 .962875 1.05812 .962883 .481438 .481438 .481438 .768898 0 ]xsh
93.2319 60.3862 mo
(work=66)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
93.1116 62.3653 mo
(I/O: 1->2)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
86.3603 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865898 .865898 .865906 .432945 .962883 1.05811 1.05812 1.25034 .962875 .432953 .865898 .865898 
.432953 1.25034 1.25033 1.05812 1.25033 1.25034 .432953 .865898 .865898 0 ]xsh
89.0056 66.3237 mo
(*** STATEFUL ***)
[.865898 .865898 .865906 .432945 .962883 1.05812 1.25033 1.05812 1.05811 .962883 1.25033 1.05812 
.432953 .865898 .865898 0 ]xsh
249.877 48.61 mo
219.818 49.476 149.557 51.826 109.973 54.919 cv
108.736 55.042 107.127 55.537 105.643 56.279 cv
@
105.767 55.908 mo
104.777 56.65 li
106.014 56.403 li
cp
@
105.767 55.908 mo
104.777 56.65 li
106.014 56.403 li
f
137.187 61.97 mo
137.187 58.144 131.427 55.042 124.322 55.042 cv
117.217 55.042 111.457 58.144 111.457 61.97 cv
111.457 65.795 117.217 68.897 124.322 68.897 cv
131.427 68.897 137.187 65.795 137.187 61.97 cv
@
137.187 61.97 mo
137.187 58.144 131.427 55.042 124.322 55.042 cv
117.217 55.042 111.457 58.144 111.457 61.97 cv
111.457 65.795 117.217 68.897 124.322 68.897 cv
131.427 68.897 137.187 65.795 137.187 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
120.81 58.407 mo
(DFTFilter)
[1.25034 .962875 1.05812 .962875 .481445 .481438 .481438 .768898 0 ]xsh
121.188 60.3862 mo
(work=66)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
121.068 62.3653 mo
(I/O: 1->2)
[.576675 .481438 1.25034 .481445 .432945 .865898 .576675 .97673 0 ]xsh
114.317 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865898 .865898 .865906 .432945 .962883 1.05812 1.05811 1.25034 .962875 .432953 .865898 .865898 
.432953 1.25034 1.25033 1.05812 1.25034 1.25034 .432953 .865891 .865906 0 ]xsh
116.962 66.3237 mo
(*** STATEFUL ***)
[.865898 .865898 .865906 .432945 .962883 1.05811 1.25034 1.05812 1.05811 .962883 1.25034 1.05811 
.432953 .865906 .865891 0 ]xsh
250.372 48.981 mo
217.715 50.713 137.929 54.919 137.929 54.919 cv
136.692 55.042 135.084 55.537 133.599 56.279 cv
@
133.847 55.785 mo
132.857 56.65 li
134.094 56.403 li
cp
@
133.847 55.785 mo
132.857 56.65 li
134.094 56.403 li
f
165.143 61.97 mo
165.143 58.144 159.383 55.042 152.278 55.042 cv
145.173 55.042 139.413 58.144 139.413 61.97 cv
139.413 65.795 145.173 68.897 152.278 68.897 cv
159.383 68.897 165.143 65.795 165.143 61.97 cv
@
165.143 61.97 mo
165.143 58.144 159.383 55.042 152.278 55.042 cv
145.173 55.042 139.413 58.144 139.413 61.97 cv
139.413 65.795 145.173 68.897 152.278 68.897 cv
159.383 68.897 165.143 65.795 165.143 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
148.766 58.407 mo
(DFTFilter)
[1.25034 .962875 1.05812 .962875 .481445 .481445 .48143 .76889 0 ]xsh
149.144 60.3862 mo
(work=66)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
149.024 62.3653 mo
(I/O: 1->2)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
142.273 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.05811 1.25034 .962891 .432938 .865906 .865906 
.432953 1.25032 1.25034 1.05812 1.25034 1.25034 .432953 .865891 .865906 0 ]xsh
144.918 66.3237 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
249.63 48.363 mo
221.674 49.105 193.717 51.579 165.885 54.919 cv
164.648 55.166 163.164 55.661 161.679 56.403 cv
@
161.803 56.032 mo
160.813 56.774 li
162.05 56.527 li
cp
@
161.803 56.032 mo
160.813 56.774 li
162.05 56.527 li
f
193.099 61.97 mo
193.099 58.144 187.339 55.042 180.234 55.042 cv
173.129 55.042 167.369 58.144 167.369 61.97 cv
167.369 65.795 173.129 68.897 180.234 68.897 cv
187.339 68.897 193.099 65.795 193.099 61.97 cv
@
193.099 61.97 mo
193.099 58.144 187.339 55.042 180.234 55.042 cv
173.129 55.042 167.369 58.144 167.369 61.97 cv
167.369 65.795 173.129 68.897 180.234 68.897 cv
187.339 68.897 193.099 65.795 193.099 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
176.722 58.407 mo
(DFTFilter)
[1.25034 .962875 1.05812 .962875 .481445 .481445 .48143 .76889 0 ]xsh
177.1 60.3862 mo
(work=66)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
176.98 62.3653 mo
(I/O: 1->2)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
170.229 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.05811 1.25034 .962891 .432938 .865906 .865906 
.432953 1.25032 1.25034 1.05812 1.25034 1.25034 .432953 .865891 .865906 0 ]xsh
172.874 66.3237 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
250.867 49.105 mo
235.281 50.342 209.304 52.445 193.841 54.919 cv
192.604 55.166 191.12 55.661 189.635 56.403 cv
@
189.883 55.908 mo
188.893 56.774 li
190.13 56.527 li
cp
@
189.883 55.908 mo
188.893 56.774 li
190.13 56.527 li
f
221.055 61.97 mo
221.055 58.144 215.295 55.042 208.19 55.042 cv
201.085 55.042 195.326 58.144 195.326 61.97 cv
195.326 65.795 201.085 68.897 208.19 68.897 cv
215.295 68.897 221.055 65.795 221.055 61.97 cv
@
221.055 61.97 mo
221.055 58.144 215.295 55.042 208.19 55.042 cv
201.085 55.042 195.326 58.144 195.326 61.97 cv
195.326 65.795 201.085 68.897 208.19 68.897 cv
215.295 68.897 221.055 65.795 221.055 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
204.678 58.407 mo
(DFTFilter)
[1.25034 .962875 1.05812 .962875 .481445 .481445 .48143 .76889 0 ]xsh
205.056 60.3862 mo
(work=66)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
204.936 62.3653 mo
(I/O: 1->2)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
198.185 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.05811 1.25034 .962891 .432938 .865906 .865906 
.432953 1.25032 1.25034 1.05812 1.25034 1.25034 .432953 .865891 .865906 0 ]xsh
200.83 66.3237 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
252.97 49.723 mo
243.445 50.96 230.085 52.939 221.797 54.919 cv
220.684 55.29 219.2 55.785 217.839 56.403 cv
@
217.963 56.032 mo
216.973 56.774 li
218.21 56.527 li
cp
@
217.963 56.032 mo
216.973 56.774 li
218.21 56.527 li
f
249.011 61.97 mo
249.011 58.144 243.252 55.042 236.147 55.042 cv
229.042 55.042 223.282 58.144 223.282 61.97 cv
223.282 65.795 229.042 68.897 236.147 68.897 cv
243.252 68.897 249.011 65.795 249.011 61.97 cv
@
249.011 61.97 mo
249.011 58.144 243.252 55.042 236.147 55.042 cv
229.042 55.042 223.282 58.144 223.282 61.97 cv
223.282 65.795 229.042 68.897 236.147 68.897 cv
243.252 68.897 249.011 65.795 249.011 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
232.635 58.407 mo
(DFTFilter)
[1.25034 .962875 1.05812 .962875 .481445 .481445 .48143 .76889 0 ]xsh
233.013 60.3862 mo
(work=66)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
232.893 62.3653 mo
(I/O: 1->2)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
226.142 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.05811 1.25034 .962891 .432938 .865906 .865906 
.432953 1.25032 1.25034 1.05812 1.25034 1.25034 .432953 .865891 .865906 0 ]xsh
228.787 66.3237 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
259.526 50.342 mo
256.433 51.826 252.351 53.682 249.754 54.919 cv
248.764 55.413 247.527 56.032 246.29 56.774 cv
@
246.414 56.403 mo
245.424 57.145 li
246.661 56.898 li
cp
@
246.414 56.403 mo
245.424 57.145 li
246.661 56.898 li
f
276.968 61.97 mo
276.968 58.144 271.208 55.042 264.103 55.042 cv
256.998 55.042 251.238 58.144 251.238 61.97 cv
251.238 65.795 256.998 68.897 264.103 68.897 cv
271.208 68.897 276.968 65.795 276.968 61.97 cv
@
276.968 61.97 mo
276.968 58.144 271.208 55.042 264.103 55.042 cv
256.998 55.042 251.238 58.144 251.238 61.97 cv
251.238 65.795 256.998 68.897 264.103 68.897 cv
271.208 68.897 276.968 65.795 276.968 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
260.591 58.407 mo
(DFTFilter)
[1.25034 .962891 1.05811 .962891 .481415 .481445 .481445 .76889 0 ]xsh
260.969 60.3862 mo
(work=66)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
260.849 62.3653 mo
(I/O: 1->2)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
254.098 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865891 .865891 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .865906 
.432953 1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865875 0 ]xsh
256.743 66.3237 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
264.103 50.465 mo
264.103 51.331 264.103 52.445 264.103 53.558 cv
@
263.855 53.682 mo
264.103 54.919 li
264.474 53.682 li
cp
@
263.855 53.682 mo
264.103 54.919 li
264.474 53.682 li
f
304.924 61.97 mo
304.924 58.144 299.164 55.042 292.059 55.042 cv
284.954 55.042 279.194 58.144 279.194 61.97 cv
279.194 65.795 284.954 68.897 292.059 68.897 cv
299.164 68.897 304.924 65.795 304.924 61.97 cv
@
304.924 61.97 mo
304.924 58.144 299.164 55.042 292.059 55.042 cv
284.954 55.042 279.194 58.144 279.194 61.97 cv
279.194 65.795 284.954 68.897 292.059 68.897 cv
299.164 68.897 304.924 65.795 304.924 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
288.547 58.407 mo
(DFTFilter)
[1.25034 .962891 1.05811 .962891 .481415 .481445 .481445 .76889 0 ]xsh
288.925 60.3862 mo
(work=66)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
288.805 62.3653 mo
(I/O: 1->2)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
282.054 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .865906 
.432953 1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865875 0 ]xsh
284.699 66.3237 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
268.68 50.342 mo
271.772 51.826 275.854 53.682 278.452 54.919 cv
279.442 55.413 280.679 56.032 281.916 56.774 cv
@
281.544 56.898 mo
282.781 57.145 li
281.792 56.403 li
cp
@
281.544 56.898 mo
282.781 57.145 li
281.792 56.403 li
f
332.88 61.97 mo
332.88 58.144 327.12 55.042 320.015 55.042 cv
312.91 55.042 307.15 58.144 307.15 61.97 cv
307.15 65.795 312.91 68.897 320.015 68.897 cv
327.12 68.897 332.88 65.795 332.88 61.97 cv
@
332.88 61.97 mo
332.88 58.144 327.12 55.042 320.015 55.042 cv
312.91 55.042 307.15 58.144 307.15 61.97 cv
307.15 65.795 312.91 68.897 320.015 68.897 cv
327.12 68.897 332.88 65.795 332.88 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
316.503 58.407 mo
(DFTFilter)
[1.25034 .962891 1.05811 .962891 .481415 .481445 .481445 .76889 0 ]xsh
316.881 60.3862 mo
(work=66)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
316.761 62.3653 mo
(I/O: 1->2)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
310.01 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .865906 
.432953 1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865875 0 ]xsh
312.655 66.3237 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
275.236 49.723 mo
284.761 50.96 298.12 52.939 306.408 54.919 cv
307.521 55.166 308.758 55.661 309.995 56.279 cv
@
309.995 56.65 mo
311.232 56.774 li
310.243 56.032 li
cp
@
309.995 56.65 mo
311.232 56.774 li
310.243 56.032 li
f
360.836 61.97 mo
360.836 58.144 355.076 55.042 347.971 55.042 cv
340.866 55.042 335.107 58.144 335.107 61.97 cv
335.107 65.795 340.866 68.897 347.971 68.897 cv
355.076 68.897 360.836 65.795 360.836 61.97 cv
@
360.836 61.97 mo
360.836 58.144 355.076 55.042 347.971 55.042 cv
340.866 55.042 335.107 58.144 335.107 61.97 cv
335.107 65.795 340.866 68.897 347.971 68.897 cv
355.076 68.897 360.836 65.795 360.836 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
344.459 58.407 mo
(DFTFilter)
[1.25034 .962891 1.05811 .962891 .481415 .481445 .481445 .76889 0 ]xsh
344.837 60.3862 mo
(work=66)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
344.717 62.3653 mo
(I/O: 1->2)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
337.966 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .865906 
.432953 1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865875 .865906 0 ]xsh
340.611 66.3237 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
277.339 49.105 mo
293.049 50.342 319.026 52.445 334.364 54.919 cv
335.601 55.166 337.086 55.661 338.57 56.403 cv
@
338.199 56.527 mo
339.436 56.774 li
338.446 56.032 li
cp
@
338.199 56.527 mo
339.436 56.774 li
338.446 56.032 li
f
388.792 61.97 mo
388.792 58.144 383.033 55.042 375.928 55.042 cv
368.823 55.042 363.063 58.144 363.063 61.97 cv
363.063 65.795 368.823 68.897 375.928 68.897 cv
383.033 68.897 388.792 65.795 388.792 61.97 cv
@
388.792 61.97 mo
388.792 58.144 383.033 55.042 375.928 55.042 cv
368.823 55.042 363.063 58.144 363.063 61.97 cv
363.063 65.795 368.823 68.897 375.928 68.897 cv
383.033 68.897 388.792 65.795 388.792 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
372.416 58.407 mo
(DFTFilter)
[1.25034 .962891 1.05811 .962891 .481415 .481445 .481445 .76889 0 ]xsh
372.794 60.3862 mo
(work=66)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
372.674 62.3653 mo
(I/O: 1->2)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
365.923 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .865906 
.432953 1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865875 .865906 0 ]xsh
368.568 66.3237 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
277.957 48.857 mo
299.11 49.847 339.189 52.074 362.321 54.919 cv
363.434 55.166 364.795 55.537 366.155 56.156 cv
@
366.155 56.527 mo
367.392 56.774 li
366.403 55.908 li
cp
@
366.155 56.527 mo
367.392 56.774 li
366.403 55.908 li
f
416.749 61.97 mo
416.749 58.144 410.989 55.042 403.884 55.042 cv
396.779 55.042 391.019 58.144 391.019 61.97 cv
391.019 65.795 396.779 68.897 403.884 68.897 cv
410.989 68.897 416.749 65.795 416.749 61.97 cv
@
416.749 61.97 mo
416.749 58.144 410.989 55.042 403.884 55.042 cv
396.779 55.042 391.019 58.144 391.019 61.97 cv
391.019 65.795 396.779 68.897 403.884 68.897 cv
410.989 68.897 416.749 65.795 416.749 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
400.372 58.407 mo
(DFTFilter)
[1.25034 .962891 1.05811 .962891 .481415 .481445 .481445 .76889 0 ]xsh
400.75 60.3862 mo
(work=66)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
400.63 62.3653 mo
(I/O: 1->2)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
393.879 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .865906 
.432953 1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865875 0 ]xsh
396.524 66.3237 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
278.576 48.363 mo
315.933 48.857 353.29 51.331 390.277 54.919 cv
391.514 55.042 393.122 55.537 394.606 56.279 cv
@
394.235 56.403 mo
395.472 56.65 li
394.483 55.908 li
cp
@
394.235 56.403 mo
395.472 56.65 li
394.483 55.908 li
f
444.705 61.97 mo
444.705 58.144 438.945 55.042 431.84 55.042 cv
424.735 55.042 418.975 58.144 418.975 61.97 cv
418.975 65.795 424.735 68.897 431.84 68.897 cv
438.945 68.897 444.705 65.795 444.705 61.97 cv
@
444.705 61.97 mo
444.705 58.144 438.945 55.042 431.84 55.042 cv
424.735 55.042 418.975 58.144 418.975 61.97 cv
418.975 65.795 424.735 68.897 431.84 68.897 cv
438.945 68.897 444.705 65.795 444.705 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
428.328 58.407 mo
(DFTFilter)
[1.25034 .962891 1.05811 .962891 .481415 .481445 .481445 .76889 0 ]xsh
428.706 60.3862 mo
(work=66)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
428.586 62.3653 mo
(I/O: 1->2)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
421.835 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .865906 
.432953 1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865875 .865906 0 ]xsh
424.48 66.3237 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
278.576 48.363 mo
325.211 48.734 371.845 51.208 418.233 54.919 cv
419.47 55.042 420.831 55.537 422.191 56.156 cv
@
422.191 56.527 mo
423.428 56.65 li
422.439 55.908 li
cp
@
422.191 56.527 mo
423.428 56.65 li
422.439 55.908 li
f
472.661 61.97 mo
472.661 58.144 466.901 55.042 459.796 55.042 cv
452.691 55.042 446.931 58.144 446.931 61.97 cv
446.931 65.795 452.691 68.897 459.796 68.897 cv
466.901 68.897 472.661 65.795 472.661 61.97 cv
@
472.661 61.97 mo
472.661 58.144 466.901 55.042 459.796 55.042 cv
452.691 55.042 446.931 58.144 446.931 61.97 cv
446.931 65.795 452.691 68.897 459.796 68.897 cv
466.901 68.897 472.661 65.795 472.661 61.97 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
456.284 58.407 mo
(DFTFilter)
[1.25034 .962891 1.05811 .962891 .481415 .481445 .481445 .76889 0 ]xsh
456.662 60.3862 mo
(work=66)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
456.542 62.3653 mo
(I/O: 1->2)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
449.791 64.3445 mo
(*** PEEKS 28 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .865906 
.432953 1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865875 0 ]xsh
452.436 66.3237 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
278.576 48.239 mo
334.488 48.61 390.524 51.084 446.189 54.919 cv
447.426 55.042 448.911 55.413 450.271 56.032 cv
@
450.271 56.403 mo
451.508 56.65 li
450.519 55.785 li
cp
@
450.271 56.403 mo
451.508 56.65 li
450.519 55.785 li
f
279.318 75.7 mo
279.318 74.471 272.506 73.474 264.103 73.474 cv
255.7 73.474 248.888 74.471 248.888 75.7 cv
248.888 76.93 255.7 77.927 264.103 77.927 cv
272.506 77.927 279.318 76.93 279.318 75.7 cv
@
279.318 75.7 mo
279.318 74.471 272.506 73.474 264.103 73.474 cv
255.7 73.474 248.888 74.471 248.888 75.7 cv
248.888 76.93 255.7 77.927 264.103 77.927 cv
272.506 77.927 279.318 76.93 279.318 75.7 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two 3{/.notdef}rp /six 
/.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 2{/.notdef}rp 
/A /B /.notdef /D /E /F /.notdef /H 
/I /.notdef /K /L /M /.notdef /O /P 
/.notdef /R /S /T /U /V 10{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
250.153 76.096 mo
(roundrobin\(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2\))
[.576675 .865906 .865891 .865906 .865906 .576675 .865891 .865891 .481445 .865906 .576691 .865875 
.432953 .865906 .432953 .865906 .432953 .865906 .432922 .865906 .432953 .865906 .432953 .865906 
.432953 .865875 .432953 .865906 .432953 .865906 .432953 .865906 .432953 .865875 .432953 .865906 
.432953 .865906 .432953 .865875 0 ]xsh
273.133 86.586 mo
273.133 84.263 269.09 82.38 264.103 82.38 cv
259.116 82.38 255.073 84.263 255.073 86.586 cv
255.073 88.909 259.116 90.792 264.103 90.792 cv
269.09 90.792 273.133 88.909 273.133 86.586 cv
@
273.133 86.586 mo
273.133 84.263 269.09 82.38 264.103 82.38 cv
259.116 82.38 255.073 84.263 255.073 86.586 cv
255.073 88.909 259.116 90.792 264.103 90.792 cv
269.09 90.792 273.133 88.909 273.133 86.586 cv
.843 .18 .157 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73DB9D92E2C498F1C8C272174C48D3E3EA8F27C6E6BA
93064621D133D030C551A42025686691A783FB90A2D496BEF06790AC79A6878D
99BC23CD14D9CFD812148CC847ABD0CF7E73A1A9D5ACE6E2E3BBFD4DD> |-
/nine <1C60D8A8C9B7A73DFCCE6C978678EE12F2E62BD7D7FA244984C1E12F1
0EB0B8765182EBCE165DFB850DB8B03381969B80BB1CA53FFB24B5DE34530C8C
83A80415FE19B7C2B551E605143CF6469C8BCE336F9A5E5012DD932CF553D663
37837328637F50B90FF9AE8815D00BBA7EFCE6D508C5B6EBE2D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 53 /five put
dup 57 /nine put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two 2{/.notdef}rp /five 
/six /.notdef /eight /nine /colon 2{/.notdef}rp /equal /greater 
2{/.notdef}rp /A /B /.notdef /D /E /F /.notdef 
/H /I /.notdef /K /L /M /.notdef /O 
/P /.notdef /R /S /T /U /V 10{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u /v /w /.notdef 
/y 134{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
257.129 85.002 mo
(RectangularToPolar)
[1.15509 .76889 .76889 .481445 .76889 .865906 .865906 .865906 .481445 .76889 .57666 1.05814 
.865875 .962891 .865906 .481445 .76889 0 ]xsh
260.103 86.9812 mo
(work=9105)
[1.25034 .865906 .57666 .865906 .976715 .865906 .865906 .865906 0 ]xsh
260.849 88.9603 mo
(I/O: 2->2)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
264.103 77.927 mo
264.103 78.793 264.103 80.03 264.103 81.143 cv
@
263.855 81.143 mo
264.103 82.38 li
264.474 81.143 li
cp
@
263.855 81.143 mo
264.103 82.38 li
264.474 81.143 li
f
76.6973 67.289 mo
78.5528 68.278 80.4083 68.897 82.0164 69.02 cv
129.146 72.36 213.138 74.587 248.145 75.329 cv
@
247.774 75.577 mo
249.011 75.329 li
247.774 74.958 li
cp
@
247.774 75.577 mo
249.011 75.329 li
247.774 74.958 li
f
104.653 67.289 mo
106.509 68.155 108.488 68.897 109.973 69.02 cv
148.814 72.237 216.849 74.463 247.898 75.329 cv
@
247.898 75.577 mo
249.135 75.329 li
247.898 74.958 li
cp
@
247.898 75.577 mo
249.135 75.329 li
247.898 74.958 li
f
132.733 67.289 mo
134.589 68.155 136.444 68.897 137.929 69.02 cv
168.606 72.113 221.674 74.34 248.269 75.205 cv
@
248.022 75.453 mo
249.259 75.205 li
248.022 74.834 li
cp
@
248.022 75.453 mo
249.259 75.205 li
248.022 74.834 li
f
160.813 67.289 mo
162.545 68.155 164.401 68.897 165.885 69.02 cv
188.398 71.866 226.745 73.968 248.269 75.082 cv
@
248.269 75.329 mo
249.506 75.082 li
248.269 74.711 li
cp
@
248.269 75.329 mo
249.506 75.082 li
248.269 74.711 li
f
188.769 67.165 mo
190.625 68.031 192.357 68.773 193.841 69.02 cv
208.809 71.494 233.549 73.474 249.259 74.587 cv
@
249.011 74.834 mo
250.248 74.711 li
249.011 74.216 li
cp
@
249.011 74.834 mo
250.248 74.711 li
249.011 74.216 li
f
216.849 67.165 mo
218.705 68.031 220.437 68.649 221.797 69.02 cv
229.714 71 242.332 72.855 251.609 74.092 cv
@
251.238 74.34 mo
252.475 74.216 li
251.238 73.721 li
cp
@
251.238 74.34 mo
252.475 74.216 li
251.238 73.721 li
f
245.424 66.794 mo
247.032 67.66 248.517 68.402 249.754 69.02 cv
252.104 70.134 255.444 71.742 258.289 73.103 cv
@
258.165 73.35 mo
259.402 73.597 li
258.413 72.855 li
cp
@
258.165 73.35 mo
259.402 73.597 li
258.413 72.855 li
f
264.103 69.02 mo
264.103 70.134 264.103 71.371 264.103 72.36 cv
@
263.855 72.237 mo
264.103 73.474 li
264.474 72.237 li
cp
@
263.855 72.237 mo
264.103 73.474 li
264.474 72.237 li
f
282.781 66.794 mo
281.173 67.66 279.689 68.402 278.452 69.02 cv
276.102 70.134 272.762 71.742 269.917 73.103 cv
@
269.793 72.855 mo
268.803 73.597 li
270.04 73.35 li
cp
@
269.793 72.855 mo
268.803 73.597 li
270.04 73.35 li
f
311.356 67.165 mo
309.624 68.031 307.893 68.649 306.408 69.02 cv
298.491 71 285.998 72.855 276.596 74.092 cv
@
276.968 73.721 mo
275.731 74.216 li
276.968 74.34 li
cp
@
276.968 73.721 mo
275.731 74.216 li
276.968 74.34 li
f
339.436 67.165 mo
337.704 68.155 335.849 68.773 334.364 69.02 cv
319.397 71.494 294.657 73.474 278.947 74.587 cv
@
279.194 74.216 mo
277.957 74.711 li
279.194 74.834 li
cp
@
279.194 74.216 mo
277.957 74.711 li
279.194 74.834 li
f
367.392 67.289 mo
365.66 68.155 363.805 68.897 362.321 69.02 cv
339.56 71.866 300.842 74.092 279.565 75.082 cv
@
279.936 74.711 mo
278.699 75.082 li
279.936 75.329 li
cp
@
279.936 74.711 mo
278.699 75.082 li
279.936 75.329 li
f
395.472 67.289 mo
393.617 68.155 391.885 68.897 390.277 69.02 cv
359.723 72.113 306.532 74.34 279.936 75.205 cv
@
280.184 74.834 mo
278.947 75.205 li
280.184 75.453 li
cp
@
280.184 74.834 mo
278.947 75.205 li
280.184 75.453 li
f
423.552 67.289 mo
421.697 68.278 419.841 68.897 418.233 69.02 cv
379.515 72.237 311.48 74.463 280.307 75.329 cv
@
280.307 74.958 mo
279.07 75.329 li
280.307 75.577 li
cp
@
280.307 74.958 mo
279.07 75.329 li
280.307 75.577 li
f
451.508 67.289 mo
449.653 68.278 447.797 68.897 446.189 69.02 cv
399.059 72.36 315.067 74.587 280.06 75.329 cv
@
280.431 74.958 mo
279.194 75.329 li
280.431 75.577 li
cp
@
280.431 74.958 mo
279.194 75.329 li
280.431 75.577 li
f
270.906 97.471 mo
270.906 96.242 267.86 95.245 264.103 95.245 cv
260.345 95.245 257.299 96.242 257.299 97.471 cv
257.299 98.701 260.345 99.698 264.103 99.698 cv
267.86 99.698 270.906 98.701 270.906 97.471 cv
@
270.906 97.471 mo
270.906 96.242 267.86 95.245 264.103 95.245 cv
260.345 95.245 257.299 96.242 257.299 97.471 cv
257.299 98.701 260.345 99.698 264.103 99.698 cv
267.86 99.698 270.906 98.701 270.906 97.471 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
258.596 97.867 mo
(roundrobin\(1,1\))
[.576691 .865875 .865906 .865906 .865906 .57666 .865906 .865906 .481445 .865906 .57666 .865906 
.432953 .865906 0 ]xsh
264.103 90.792 mo
264.103 91.905 264.103 93.018 264.103 94.132 cv
@
263.855 94.008 mo
264.103 95.245 li
264.474 94.008 li
cp
@
263.855 94.008 mo
264.103 95.245 li
264.474 94.008 li
f
82.7586 106.873 mo
82.7586 105.643 80.0448 104.646 76.6973 104.646 cv
73.3498 104.646 70.636 105.643 70.636 106.873 cv
70.636 108.102 73.3498 109.099 76.6973 109.099 cv
80.0448 109.099 82.7586 108.102 82.7586 106.873 cv
@
82.7586 106.873 mo
82.7586 105.643 80.0448 104.646 76.6973 104.646 cv
73.3498 104.646 70.636 105.643 70.636 106.873 cv
70.636 108.102 73.3498 109.099 76.6973 109.099 cv
80.0448 109.099 82.7586 108.102 82.7586 106.873 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
71.8639 107.268 mo
(duplicate\(1,1\))
[.865898 .865898 .865906 .481438 .481438 .768898 .76889 .481438 .768898 .576675 .865898 .432953 
.865898 0 ]xsh
257.299 97.471 mo
231.199 97.595 136.197 98.09 85.1089 100.688 cv
83.3771 100.811 81.1505 102.419 79.5424 103.904 cv
@
79.295 103.656 mo
78.6765 104.77 li
79.7898 104.151 li
cp
@
79.295 103.656 mo
78.6765 104.77 li
79.7898 104.151 li
f
292.925 106.873 mo
292.925 105.643 286.113 104.646 277.71 104.646 cv
269.307 104.646 262.495 105.643 262.495 106.873 cv
262.495 108.102 269.307 109.099 277.71 109.099 cv
286.113 109.099 292.925 108.102 292.925 106.873 cv
@
292.925 106.873 mo
292.925 105.643 286.113 104.646 277.71 104.646 cv
269.307 104.646 262.495 105.643 262.495 106.873 cv
262.495 108.102 269.307 109.099 277.71 109.099 cv
286.113 109.099 292.925 108.102 292.925 106.873 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
263.76 107.268 mo
(roundrobin\(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\))
[.576691 .865875 .865906 .865906 .865906 .57666 .865906 .865906 .481445 .865906 .57666 .865906 
.432953 .865906 .432953 .865875 .432953 .865906 .432953 .865906 .432953 .865906 .432922 .865906 
.432953 .865906 .432953 .865906 .432953 .865875 .432953 .865906 .432953 .865906 .432953 .865875 
.432953 .865906 .432953 .865906 0 ]xsh
267.072 99.451 mo
269.051 100.811 271.525 102.543 273.504 104.028 cv
@
273.257 104.275 mo
274.494 104.646 li
273.628 103.78 li
cp
@
273.257 104.275 mo
274.494 104.646 li
273.628 103.78 li
f
115.786 239.974 mo
115.786 238.744 112.74 237.747 108.983 237.747 cv
105.226 237.747 102.179 238.744 102.179 239.974 cv
102.179 241.203 105.226 242.2 108.983 242.2 cv
112.74 242.2 115.786 241.203 115.786 239.974 cv
@
115.786 239.974 mo
115.786 238.744 112.74 237.747 108.983 237.747 cv
105.226 237.747 102.179 238.744 102.179 239.974 cv
102.179 241.203 105.226 242.2 108.983 242.2 cv
112.74 242.2 115.786 241.203 115.786 239.974 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
103.476 240.37 mo
(roundrobin\(1,1\))
[.576675 .865898 .865906 .865898 .865898 .576675 .865898 .865906 .481438 .865898 .576675 .865906 
.432945 .865898 0 ]xsh
118.013 250.859 mo
118.013 248.537 113.97 246.654 108.983 246.654 cv
103.996 246.654 99.9529 248.537 99.9529 250.859 cv
99.9529 253.182 103.996 255.065 108.983 255.065 cv
113.97 255.065 118.013 253.182 118.013 250.859 cv
@
118.013 250.859 mo
118.013 248.537 113.97 246.654 108.983 246.654 cv
103.996 246.654 99.9529 248.537 99.9529 250.859 cv
99.9529 253.182 103.996 255.065 108.983 255.065 cv
113.97 255.065 118.013 253.182 118.013 250.859 cv
.992 .863 .565 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
102.009 249.276 mo
(PolarToRectangular)
[.962883 .865898 .481438 .768898 .576675 1.05811 .865898 1.1551 .768898 .76889 .481438 .768898 
.865898 .865898 .865906 .481438 .76889 0 ]xsh
104.983 251.255 mo
(work=5060)
[1.25034 .865898 .576675 .865898 .97673 .865898 .865898 .865906 0 ]xsh
105.729 253.234 mo
(I/O: 2->2)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
108.983 242.2 mo
108.983 243.066 108.983 244.303 108.983 245.417 cv
@
108.736 245.417 mo
108.983 246.654 li
109.354 245.417 li
cp
@
108.736 245.417 mo
108.983 246.654 li
109.354 245.417 li
f
69.8938 119.243 mo
69.8938 116.92 65.7955 115.037 60.74 115.037 cv
55.6845 115.037 51.5862 116.92 51.5862 119.243 cv
51.5862 121.565 55.6845 123.448 60.74 123.448 cv
65.7955 123.448 69.8938 121.565 69.8938 119.243 cv
@
69.8938 119.243 mo
69.8938 116.92 65.7955 115.037 60.74 115.037 cv
55.6845 115.037 51.5862 116.92 51.5862 119.243 cv
51.5862 121.565 55.6845 123.448 60.74 123.448 cv
65.7955 123.448 69.8938 121.565 69.8938 119.243 cv
.882 .953 .973 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73DB9E68392B0D8A76464A51F2E94D7CC8D0C2C4EA9
EB677CBC38A50658519E8BF18CD893FCF8B1BA3E22E132B8EDB4B7CD483A2AC4
23E82DF2F3816B8AE8EA5F180D3F5DFF2BF284FCE4CE5C4E107DDB61A9BE179C
50061EE6040417B0DF341D85D92A63653C2A28BA649E4CD9966C4B081E30F323
54693AC79886604480856D93C0D7CC0DE6962663CC1F198BBFA4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /.notdef 
/five /six /.notdef /eight /nine /colon 2{/.notdef}rp /equal 
/greater 2{/.notdef}rp /A /B /.notdef /D /E /F 
/.notdef /H /I /.notdef /K /L /M /.notdef 
/O /P /.notdef /R /S /T /U /V 
10{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
/.notdef /y 134{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
53.7151 117.659 mo
(FIRSmoothingFilter)
[.962879 .576679 1.15509 .962883 1.34734 .865898 .865902 .481438 .865902 .481441 .865898 .865898 
.962883 .481438 .481445 .481438 .76889 0 ]xsh
56.7405 119.638 mo
(work=3300)
[1.25033 .865902 .576675 .865902 .976727 .865898 .865902 .865898 0 ]xsh
56.6202 121.617 mo
(I/O: 15->15)
[.576675 .481441 1.25033 .481441 .432949 .865902 .865898 .576675 .97673 .865898 0 ]xsh
73.4811 108.728 mo
72.4915 109.347 71.3782 110.089 70.636 110.584 cv
69.2753 111.573 67.5435 113.181 65.9354 114.542 cv
@
65.688 114.418 mo
64.9458 115.408 li
66.0591 114.789 li
cp
@
65.688 114.418 mo
64.9458 115.408 li
66.0591 114.789 li
f
82.7586 119.243 mo
82.7586 116.92 80.3771 115.037 77.4395 115.037 cv
74.5018 115.037 72.1204 116.92 72.1204 119.243 cv
72.1204 121.565 74.5018 123.448 77.4395 123.448 cv
80.3771 123.448 82.7586 121.565 82.7586 119.243 cv
@
82.7586 119.243 mo
82.7586 116.92 80.3771 115.037 77.4395 115.037 cv
74.5018 115.037 72.1204 116.92 72.1204 119.243 cv
72.1204 121.565 74.5018 123.448 77.4395 123.448 cv
80.3771 123.448 82.7586 121.565 82.7586 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
74.7457 117.659 mo
(Identity)
[.576675 .865898 .768898 .865898 .481438 .481445 .481438 0 ]xsh
74.3058 119.638 mo
(work=90)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
74.1854 121.617 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
76.821 109.099 mo
76.9447 110.336 77.0684 112.068 77.0684 113.8 cv
@
76.821 113.8 mo
77.1921 115.037 li
77.3158 113.8 li
cp
@
76.821 113.8 mo
77.1921 115.037 li
77.3158 113.8 li
f
71.9967 135.076 mo
71.9967 133.847 68.9506 132.85 65.1932 132.85 cv
61.4357 132.85 58.3897 133.847 58.3897 135.076 cv
58.3897 136.306 61.4357 137.303 65.1932 137.303 cv
68.9506 137.303 71.9967 136.306 71.9967 135.076 cv
@
71.9967 135.076 mo
71.9967 133.847 68.9506 132.85 65.1932 132.85 cv
61.4357 132.85 58.3897 133.847 58.3897 135.076 cv
58.3897 136.306 61.4357 137.303 65.1932 137.303 cv
68.9506 137.303 71.9967 136.306 71.9967 135.076 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
59.6861 135.472 mo
(roundrobin\(1,1\))
[.576675 .865902 .865898 .865902 .865898 .576679 .865898 .865898 .481445 .865898 .576675 .865898 
.432953 .865898 0 ]xsh
71.3782 149.425 mo
71.3782 147.103 68.6091 145.22 65.1932 145.22 cv
61.7773 145.22 59.0082 147.103 59.0082 149.425 cv
59.0082 151.748 61.7773 153.631 65.1932 153.631 cv
68.6091 153.631 71.3782 151.748 71.3782 149.425 cv
@
71.3782 149.425 mo
71.3782 147.103 68.6091 145.22 65.1932 145.22 cv
61.7773 145.22 59.0082 147.103 59.0082 149.425 cv
59.0082 151.748 61.7773 153.631 65.1932 153.631 cv
68.6091 153.631 71.3782 151.748 71.3782 149.425 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /.notdef /eight /nine /colon 2{/.notdef}rp /equal 
/greater 2{/.notdef}rp /A /B /.notdef /D /E /F 
/.notdef /H /I /.notdef /K /L /M /.notdef 
/O /P /.notdef /R /S /T /U /V 
10{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
/.notdef /y 134{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
61.0092 147.842 mo
(Deconvolve)
[1.25033 .768894 .768894 .865902 .865898 .865898 .865898 .481445 .865898 0 ]xsh
61.6266 149.821 mo
(work=450)
[1.25033 .865902 .576679 .865898 .976723 .865906 .865898 0 ]xsh
61.9392 151.8 mo
(I/O: 2->2)
[.576675 .481441 1.25034 .481438 .432953 .865898 .576675 .97673 0 ]xsh
65.1932 137.303 mo
65.1932 139.035 65.1932 141.632 65.1932 143.983 cv
@
64.9458 143.983 mo
65.1932 145.22 li
65.5643 143.983 li
cp
@
64.9458 143.983 mo
65.1932 145.22 li
65.5643 143.983 li
f
61.977 123.448 mo
62.5955 126.046 63.5851 129.386 64.3273 131.86 cv
@
63.9562 131.736 mo
64.5747 132.85 li
64.5747 131.613 li
cp
@
63.9562 131.736 mo
64.5747 132.85 li
64.5747 131.613 li
f
74.7181 122.83 mo
72.4915 125.551 69.5227 129.51 67.4198 132.107 cv
@
67.2961 131.736 mo
66.8013 132.973 li
67.7909 132.107 li
cp
@
67.2961 131.736 mo
66.8013 132.973 li
67.7909 132.107 li
f
71.9967 163.775 mo
71.9967 162.545 68.9506 161.548 65.1932 161.548 cv
61.4357 161.548 58.3897 162.545 58.3897 163.775 cv
58.3897 165.004 61.4357 166.001 65.1932 166.001 cv
68.9506 166.001 71.9967 165.004 71.9967 163.775 cv
@
71.9967 163.775 mo
71.9967 162.545 68.9506 161.548 65.1932 161.548 cv
61.4357 161.548 58.3897 162.545 58.3897 163.775 cv
58.3897 165.004 61.4357 166.001 65.1932 166.001 cv
68.9506 166.001 71.9967 165.004 71.9967 163.775 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
59.6861 164.17 mo
(roundrobin\(1,1\))
[.576675 .865902 .865898 .865902 .865898 .576679 .865898 .865898 .481445 .865898 .576675 .865898 
.432953 .865898 0 ]xsh
65.1932 153.631 mo
65.1932 155.858 65.1932 158.456 65.1932 160.435 cv
@
64.9458 160.311 mo
65.1932 161.548 li
65.5643 160.311 li
cp
@
64.9458 160.311 mo
65.1932 161.548 li
65.5643 160.311 li
f
55.5446 180.103 mo
55.5446 177.78 52.9416 175.897 49.7307 175.897 cv
46.5198 175.897 43.9168 177.78 43.9168 180.103 cv
43.9168 182.426 46.5198 184.309 49.7307 184.309 cv
52.9416 184.309 55.5446 182.426 55.5446 180.103 cv
@
55.5446 180.103 mo
55.5446 177.78 52.9416 175.897 49.7307 175.897 cv
46.5198 175.897 43.9168 177.78 43.9168 180.103 cv
43.9168 182.426 46.5198 184.309 49.7307 184.309 cv
52.9416 184.309 55.5446 182.426 55.5446 180.103 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
46.0273 178.52 mo
(Duplicator)
[1.25033 .865902 .865898 .481441 .481441 .76889 .768894 .481441 .865898 0 ]xsh
46.1641 180.499 mo
(work=195)
[1.25033 .865902 .576675 .865902 .976727 .865898 .865902 0 ]xsh
46.4767 182.478 mo
(I/O: 3->4)
[.576675 .481441 1.25033 .481441 .432949 .865902 .576675 .976727 0 ]xsh
62.4718 165.878 mo
60.3689 167.486 57.5238 169.836 55.9157 171.444 cv
55.0498 172.434 53.9365 173.794 53.0706 175.155 cv
@
52.6995 175.031 mo
52.3284 176.268 li
53.318 175.402 li
cp
@
52.6995 175.031 mo
52.3284 176.268 li
53.318 175.402 li
f
81.769 180.103 mo
81.769 177.029 76.3969 174.537 69.7701 174.537 cv
63.1433 174.537 57.7712 177.029 57.7712 180.103 cv
57.7712 183.177 63.1433 185.669 69.7701 185.669 cv
76.3969 185.669 81.769 183.177 81.769 180.103 cv
@
81.769 180.103 mo
81.769 177.029 76.3969 174.537 69.7701 174.537 cv
63.1433 174.537 57.7712 177.029 57.7712 180.103 cv
57.7712 183.177 63.1433 185.669 69.7701 185.669 cv
76.3969 185.669 81.769 183.177 81.769 180.103 cv
.455 .686 .812 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
63.4223 177.53 mo
(LinearInterpolator)
[1.05812 .481438 .865906 .76889 .76889 .576675 .576683 .865898 .481438 .768898 .576675 .865898 
.865898 .481445 .76889 .481438 .865898 0 ]xsh
65.7705 179.509 mo
(work=2010)
[1.25034 .865898 .576675 .865898 .97673 .865898 .865898 .865906 0 ]xsh
66.5161 181.488 mo
(I/O: 1->4)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
60.1977 183.468 mo
(*** PEEKS 1 AHEAD ***)
[.865898 .865902 .865898 .432953 .962879 1.05812 1.05811 1.25034 .962875 .432953 .865898 .432953 
1.25034 1.25033 1.05812 1.25033 1.25034 .432953 .865898 .865898 0 ]xsh
65.8117 166.001 mo
66.4302 167.98 67.2961 170.949 67.9146 173.671 cv
@
67.5435 173.423 mo
68.162 174.537 li
68.162 173.3 li
cp
@
67.5435 173.423 mo
68.162 174.537 li
68.162 173.3 li
f
76.5736 205.338 mo
76.5736 204.108 73.5275 203.111 69.7701 203.111 cv
66.0126 203.111 62.9666 204.108 62.9666 205.338 cv
62.9666 206.568 66.0126 207.564 69.7701 207.564 cv
73.5275 207.564 76.5736 206.568 76.5736 205.338 cv
@
76.5736 205.338 mo
76.5736 204.108 73.5275 203.111 69.7701 203.111 cv
66.0126 203.111 62.9666 204.108 62.9666 205.338 cv
62.9666 206.568 66.0126 207.564 69.7701 207.564 cv
73.5275 207.564 76.5736 206.568 76.5736 205.338 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
64.263 205.734 mo
(roundrobin\(1,1\))
[.576675 .865898 .865906 .865898 .865898 .576675 .865898 .865906 .481438 .865898 .576675 .865906 
.432945 .865898 0 ]xsh
79.5424 216.223 mo
79.5424 213.901 77.0501 212.018 73.9759 212.018 cv
70.9016 212.018 68.4094 213.901 68.4094 216.223 cv
68.4094 218.546 70.9016 220.429 73.9759 220.429 cv
77.0501 220.429 79.5424 218.546 79.5424 216.223 cv
@
79.5424 216.223 mo
79.5424 213.901 77.0501 212.018 73.9759 212.018 cv
70.9016 212.018 68.4094 213.901 68.4094 216.223 cv
68.4094 218.546 70.9016 220.429 73.9759 220.429 cv
77.0501 220.429 79.5424 218.546 79.5424 216.223 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
70.4639 214.64 mo
(Multiplier)
[1.53956 .865898 .481438 .481445 .481438 .865898 .481445 .481438 .76889 0 ]xsh
70.4093 216.619 mo
(work=220)
[1.25034 .865898 .576675 .865898 .97673 .865898 .865898 0 ]xsh
70.7219 218.598 mo
(I/O: 2->1)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
70.636 207.564 mo
71.0071 208.554 71.5019 209.791 71.873 211.028 cv
@
71.6256 211.152 mo
72.3678 212.141 li
72.1204 210.904 li
cp
@
71.6256 211.152 mo
72.3678 212.141 li
72.1204 210.904 li
f
50.4729 184.309 mo
51.3388 188.886 53.1943 196.184 55.9157 199.648 cv
57.2764 201.379 60.2452 202.74 62.9666 203.606 cv
@
62.9666 203.977 mo
64.2036 203.977 li
63.0903 203.359 li
cp
@
62.9666 203.977 mo
64.2036 203.977 li
63.0903 203.359 li
f
75.4603 194.452 mo
75.4603 192.129 72.9127 190.246 69.7701 190.246 cv
66.6275 190.246 64.0799 192.129 64.0799 194.452 cv
64.0799 196.775 66.6275 198.658 69.7701 198.658 cv
72.9127 198.658 75.4603 196.775 75.4603 194.452 cv
@
75.4603 194.452 mo
75.4603 192.129 72.9127 190.246 69.7701 190.246 cv
66.6275 190.246 64.0799 192.129 64.0799 194.452 cv
64.0799 196.775 66.6275 198.658 69.7701 198.658 cv
72.9127 198.658 75.4603 196.775 75.4603 194.452 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
66.1152 192.869 mo
(Decimator)
[1.25034 .76889 .76889 .481445 1.34734 .768898 .481438 .865898 0 ]xsh
66.2035 194.848 mo
(work=320)
[1.25034 .865898 .576675 .865898 .97673 .865898 .865898 0 ]xsh
66.5161 196.827 mo
(I/O: 3->1)
[.576675 .481438 1.25034 .481445 .432945 .865898 .576675 .97673 0 ]xsh
69.7701 185.793 mo
69.7701 186.907 69.7701 188.02 69.7701 189.009 cv
@
69.5227 189.009 mo
69.7701 190.246 li
70.1412 189.009 li
cp
@
69.5227 189.009 mo
69.7701 190.246 li
70.1412 189.009 li
f
69.7701 198.658 mo
69.7701 199.771 69.7701 200.885 69.7701 201.998 cv
@
69.5227 201.874 mo
69.7701 203.111 li
70.1412 201.874 li
cp
@
69.5227 201.874 mo
69.7701 203.111 li
70.1412 201.874 li
f
81.6453 229.088 mo
81.6453 226.765 79.1531 224.882 76.0788 224.882 cv
73.0045 224.882 70.5123 226.765 70.5123 229.088 cv
70.5123 231.411 73.0045 233.294 76.0788 233.294 cv
79.1531 233.294 81.6453 231.411 81.6453 229.088 cv
@
81.6453 229.088 mo
81.6453 226.765 79.1531 224.882 76.0788 224.882 cv
73.0045 224.882 70.5123 226.765 70.5123 229.088 cv
70.5123 231.411 73.0045 233.294 76.0788 233.294 cv
79.1531 233.294 81.6453 231.411 81.6453 229.088 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
73.385 227.505 mo
(Identity)
[.576675 .865898 .768898 .865898 .481438 .481445 .481438 0 ]xsh
72.5122 229.484 mo
(work=120)
[1.25034 .865898 .576675 .865898 .97673 .865898 .865898 0 ]xsh
72.8248 231.463 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
74.7181 220.429 mo
74.9655 221.543 75.0892 222.78 75.2129 224.017 cv
@
74.8418 223.645 mo
75.3366 224.882 li
75.4603 223.645 li
cp
@
74.8418 223.645 mo
75.3366 224.882 li
75.4603 223.645 li
f
79.0476 232.676 mo
79.7898 233.418 80.532 234.036 81.2742 234.284 cv
86.717 236.015 95.7471 237.871 101.932 238.861 cv
@
101.561 239.108 mo
102.798 238.984 li
101.561 238.489 li
cp
@
101.561 239.108 mo
102.798 238.984 li
101.561 238.489 li
f
111.828 119.243 mo
111.828 116.168 107.397 113.676 101.932 113.676 cv
96.4667 113.676 92.0361 116.168 92.0361 119.243 cv
92.0361 122.317 96.4667 124.809 101.932 124.809 cv
107.397 124.809 111.828 122.317 111.828 119.243 cv
@
111.828 119.243 mo
111.828 116.168 107.397 113.676 101.932 113.676 cv
96.4667 113.676 92.0361 116.168 92.0361 119.243 cv
92.0361 122.317 96.4667 124.809 101.932 124.809 cv
107.397 124.809 111.828 122.317 111.828 119.243 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7A73DFE313D538903D2D688A80497AF19F58251B88346
588CB5A8F94928A032E7AE04ED687068FF5EFE684F47125CC227938E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 
/greater 2{/.notdef}rp /A /B /.notdef /D /E /F 
/.notdef /H /I /.notdef /K /L /M /.notdef 
/O /P /.notdef /R /S /T /U /V 
10{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
/.notdef /y 134{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
96.0172 116.67 mo
(PhaseUnwrapper)
[.962883 .865898 .76889 .67366 .76889 1.25034 .865898 1.25034 .576675 .76889 .865906 .865898 
.76889 0 ]xsh
98.7984 118.649 mo
(work=73)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
98.678 120.628 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
94.572 122.608 mo
(*** STATEFUL ***)
[.865898 .865898 .865906 .432945 .962883 1.05812 1.25033 1.05812 1.05811 .962883 1.25033 1.05812 
.432953 .865898 .865898 0 ]xsh
262.618 107.244 mo
222.292 108.11 114.302 110.584 114.302 110.584 cv
112.323 110.707 109.849 112.192 107.746 113.924 cv
@
107.87 113.429 mo
107.004 114.418 li
108.241 114.047 li
cp
@
107.87 113.429 mo
107.004 114.418 li
108.241 114.047 li
f
139.166 119.243 mo
139.166 116.168 134.735 113.676 129.27 113.676 cv
123.804 113.676 119.374 116.168 119.374 119.243 cv
119.374 122.317 123.804 124.809 129.27 124.809 cv
134.735 124.809 139.166 122.317 139.166 119.243 cv
@
139.166 119.243 mo
139.166 116.168 134.735 113.676 129.27 113.676 cv
123.804 113.676 119.374 116.168 119.374 119.243 cv
119.374 122.317 123.804 124.809 129.27 124.809 cv
134.735 124.809 139.166 122.317 139.166 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
123.355 116.67 mo
(PhaseUnwrapper)
[.962883 .865898 .76889 .67366 .76889 1.25033 .865906 1.25034 .576675 .76889 .865906 .865891 
.768906 0 ]xsh
126.136 118.649 mo
(work=73)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
126.016 120.628 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481445 .432953 .865891 .576675 .97673 0 ]xsh
121.91 122.608 mo
(*** STATEFUL ***)
[.865898 .865898 .865906 .432945 .962883 1.05811 1.25034 1.05812 1.05812 .962875 1.25034 1.05811 
.432953 .865906 .865891 0 ]xsh
262.742 107.244 mo
227.859 108.233 143.743 110.46 141.516 110.584 cv
139.537 110.831 137.187 112.192 135.084 113.924 cv
@
135.207 113.429 mo
134.341 114.418 li
135.578 114.047 li
cp
@
135.207 113.429 mo
134.341 114.418 li
135.578 114.047 li
f
166.38 119.243 mo
166.38 116.168 161.949 113.676 156.484 113.676 cv
151.018 113.676 146.588 116.168 146.588 119.243 cv
146.588 122.317 151.018 124.809 156.484 124.809 cv
161.949 124.809 166.38 122.317 166.38 119.243 cv
@
166.38 119.243 mo
166.38 116.168 161.949 113.676 156.484 113.676 cv
151.018 113.676 146.588 116.168 146.588 119.243 cv
146.588 122.317 151.018 124.809 156.484 124.809 cv
161.949 124.809 166.38 122.317 166.38 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
150.569 116.67 mo
(PhaseUnwrapper)
[.962875 .865906 .76889 .67366 .76889 1.25034 .865906 1.25032 .576675 .768906 .865891 .865906 
.76889 0 ]xsh
153.35 118.649 mo
(work=73)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
153.23 120.628 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
149.124 122.608 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
262.866 107.367 mo
233.425 108.357 170.586 110.46 168.73 110.584 cv
166.751 110.831 164.401 112.192 162.298 113.924 cv
@
162.421 113.429 mo
161.679 114.418 li
162.792 113.924 li
cp
@
162.421 113.429 mo
161.679 114.418 li
162.792 113.924 li
f
193.47 119.243 mo
193.47 116.168 189.04 113.676 183.574 113.676 cv
178.109 113.676 173.678 116.168 173.678 119.243 cv
173.678 122.317 178.109 124.809 183.574 124.809 cv
189.04 124.809 193.47 122.317 193.47 119.243 cv
@
193.47 119.243 mo
193.47 116.168 189.04 113.676 183.574 113.676 cv
178.109 113.676 173.678 116.168 173.678 119.243 cv
173.678 122.317 178.109 124.809 183.574 124.809 cv
189.04 124.809 193.47 122.317 193.47 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
177.659 116.67 mo
(PhaseUnwrapper)
[.962875 .865906 .76889 .67366 .76889 1.25034 .865906 1.25032 .576675 .768906 .865891 .865906 
.76889 0 ]xsh
180.44 118.649 mo
(work=73)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
180.32 120.628 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
176.214 122.608 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
262.989 107.491 mo
240.723 108.357 200.768 109.965 195.944 110.584 cv
193.965 110.955 191.615 112.192 189.635 113.924 cv
@
189.759 113.429 mo
188.893 114.418 li
190.13 114.047 li
cp
@
189.759 113.429 mo
188.893 114.418 li
190.13 114.047 li
f
220.684 119.243 mo
220.684 116.168 216.253 113.676 210.788 113.676 cv
205.323 113.676 200.892 116.168 200.892 119.243 cv
200.892 122.317 205.323 124.809 210.788 124.809 cv
216.253 124.809 220.684 122.317 220.684 119.243 cv
@
220.684 119.243 mo
220.684 116.168 216.253 113.676 210.788 113.676 cv
205.323 113.676 200.892 116.168 200.892 119.243 cv
200.892 122.317 205.323 124.809 210.788 124.809 cv
216.253 124.809 220.684 122.317 220.684 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
204.873 116.67 mo
(PhaseUnwrapper)
[.962875 .865906 .76889 .67366 .76889 1.25034 .865906 1.25032 .576675 .768906 .865891 .865906 
.76889 0 ]xsh
207.654 118.649 mo
(work=73)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
207.534 120.628 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
203.428 122.608 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
263.855 107.739 mo
248.022 108.852 224.271 110.46 223.158 110.584 cv
221.303 110.955 218.952 112.315 216.849 113.924 cv
@
216.973 113.429 mo
216.107 114.418 li
217.344 114.047 li
cp
@
216.973 113.429 mo
216.107 114.418 li
217.344 114.047 li
f
247.898 119.243 mo
247.898 116.168 243.467 113.676 238.002 113.676 cv
232.537 113.676 228.106 116.168 228.106 119.243 cv
228.106 122.317 232.537 124.809 238.002 124.809 cv
243.467 124.809 247.898 122.317 247.898 119.243 cv
@
247.898 119.243 mo
247.898 116.168 243.467 113.676 238.002 113.676 cv
232.537 113.676 228.106 116.168 228.106 119.243 cv
228.106 122.317 232.537 124.809 238.002 124.809 cv
243.467 124.809 247.898 122.317 247.898 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
232.087 116.67 mo
(PhaseUnwrapper)
[.962875 .865906 .76889 .67366 .76889 1.25034 .865906 1.25032 .576675 .768906 .865891 .865906 
.76889 0 ]xsh
234.868 118.649 mo
(work=73)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
234.748 120.628 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
230.642 122.608 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
264.598 107.986 mo
259.526 108.604 254.083 109.47 250.372 110.584 cv
248.64 111.078 246.414 112.563 244.434 114.047 cv
@
244.558 113.552 mo
243.692 114.542 li
244.929 114.171 li
cp
@
244.558 113.552 mo
243.692 114.542 li
244.929 114.171 li
f
275.112 119.243 mo
275.112 116.168 270.681 113.676 265.216 113.676 cv
259.751 113.676 255.32 116.168 255.32 119.243 cv
255.32 122.317 259.751 124.809 265.216 124.809 cv
270.681 124.809 275.112 122.317 275.112 119.243 cv
@
275.112 119.243 mo
275.112 116.168 270.681 113.676 265.216 113.676 cv
259.751 113.676 255.32 116.168 255.32 119.243 cv
255.32 122.317 259.751 124.809 265.216 124.809 cv
270.681 124.809 275.112 122.317 275.112 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
259.301 116.67 mo
(PhaseUnwrapper)
[.962891 .865875 .768921 .673645 .76889 1.25034 .865906 1.25034 .57666 .76889 .865906 .865906 
.76889 0 ]xsh
262.082 118.649 mo
(work=73)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
261.962 120.628 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
257.856 122.608 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
275.483 109.099 mo
274.122 110.46 272.391 112.192 270.783 113.676 cv
@
270.783 113.181 mo
270.164 114.295 li
271.277 113.676 li
cp
@
270.783 113.181 mo
270.164 114.295 li
271.277 113.676 li
f
300.223 119.243 mo
300.223 116.168 295.793 113.676 290.327 113.676 cv
284.862 113.676 280.431 116.168 280.431 119.243 cv
280.431 122.317 284.862 124.809 290.327 124.809 cv
295.793 124.809 300.223 122.317 300.223 119.243 cv
@
300.223 119.243 mo
300.223 116.168 295.793 113.676 290.327 113.676 cv
284.862 113.676 280.431 116.168 280.431 119.243 cv
280.431 122.317 284.862 124.809 290.327 124.809 cv
295.793 124.809 300.223 122.317 300.223 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
284.412 116.67 mo
(PhaseUnwrapper)
[.962891 .865875 .768921 .673645 .76889 1.25034 .865906 1.25034 .57666 .76889 .865906 .865906 
.76889 0 ]xsh
287.193 118.649 mo
(work=73)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
287.073 120.628 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
282.967 122.608 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
279.936 109.099 mo
281.173 110.336 282.905 111.944 284.39 113.429 cv
@
284.266 113.676 mo
285.379 114.295 li
284.637 113.305 li
cp
@
284.266 113.676 mo
285.379 114.295 li
284.637 113.305 li
f
327.437 119.243 mo
327.437 116.168 323.007 113.676 317.541 113.676 cv
312.076 113.676 307.645 116.168 307.645 119.243 cv
307.645 122.317 312.076 124.809 317.541 124.809 cv
323.007 124.809 327.437 122.317 327.437 119.243 cv
@
327.437 119.243 mo
327.437 116.168 323.007 113.676 317.541 113.676 cv
312.076 113.676 307.645 116.168 307.645 119.243 cv
307.645 122.317 312.076 124.809 317.541 124.809 cv
323.007 124.809 327.437 122.317 327.437 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
311.626 116.67 mo
(PhaseUnwrapper)
[.962891 .865875 .768921 .673645 .76889 1.25034 .865906 1.25034 .57666 .76889 .865906 .865906 
.76889 0 ]xsh
314.407 118.649 mo
(work=73)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
314.287 120.628 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
310.181 122.608 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
290.946 107.986 mo
296.017 108.604 301.584 109.47 305.295 110.584 cv
306.903 111.078 309.13 112.315 310.985 113.676 cv
@
310.861 113.924 mo
311.975 114.542 li
311.232 113.552 li
cp
@
310.861 113.924 mo
311.975 114.542 li
311.232 113.552 li
f
354.651 119.243 mo
354.651 116.168 350.221 113.676 344.755 113.676 cv
339.29 113.676 334.859 116.168 334.859 119.243 cv
334.859 122.317 339.29 124.809 344.755 124.809 cv
350.221 124.809 354.651 122.317 354.651 119.243 cv
@
354.651 119.243 mo
354.651 116.168 350.221 113.676 344.755 113.676 cv
339.29 113.676 334.859 116.168 334.859 119.243 cv
334.859 122.317 339.29 124.809 344.755 124.809 cv
350.221 124.809 354.651 122.317 354.651 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
338.84 116.67 mo
(PhaseUnwrapper)
[.962891 .865875 .768921 .673645 .76889 1.25034 .865906 1.25034 .57666 .76889 .865906 .865906 
.76889 0 ]xsh
341.621 118.649 mo
(work=73)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
341.501 120.628 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
337.395 122.608 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
291.812 107.739 mo
307.027 108.604 329.54 110.089 332.509 110.584 cv
334.241 110.955 336.467 112.192 338.446 113.676 cv
@
338.323 113.924 mo
339.436 114.418 li
338.694 113.429 li
cp
@
338.323 113.924 mo
339.436 114.418 li
338.694 113.429 li
f
381.865 119.243 mo
381.865 116.168 377.435 113.676 371.969 113.676 cv
366.504 113.676 362.073 116.168 362.073 119.243 cv
362.073 122.317 366.504 124.809 371.969 124.809 cv
377.435 124.809 381.865 122.317 381.865 119.243 cv
@
381.865 119.243 mo
381.865 116.168 377.435 113.676 371.969 113.676 cv
366.504 113.676 362.073 116.168 362.073 119.243 cv
362.073 122.317 366.504 124.809 371.969 124.809 cv
377.435 124.809 381.865 122.317 381.865 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
366.054 116.67 mo
(PhaseUnwrapper)
[.962891 .865875 .768921 .673645 .76889 1.25034 .865906 1.25034 .57666 .76889 .865906 .865906 
.76889 0 ]xsh
368.835 118.649 mo
(work=73)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
368.715 120.628 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
364.609 122.608 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
292.43 107.491 mo
314.696 108.357 354.899 109.965 359.723 110.584 cv
361.578 110.955 363.805 112.068 365.784 113.552 cv
@
365.66 113.8 mo
366.774 114.418 li
366.032 113.429 li
cp
@
365.66 113.8 mo
366.774 114.418 li
366.032 113.429 li
f
409.079 119.243 mo
409.079 116.168 404.649 113.676 399.183 113.676 cv
393.718 113.676 389.287 116.168 389.287 119.243 cv
389.287 122.317 393.718 124.809 399.183 124.809 cv
404.649 124.809 409.079 122.317 409.079 119.243 cv
@
409.079 119.243 mo
409.079 116.168 404.649 113.676 399.183 113.676 cv
393.718 113.676 389.287 116.168 389.287 119.243 cv
389.287 122.317 393.718 124.809 399.183 124.809 cv
404.649 124.809 409.079 122.317 409.079 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
393.268 116.67 mo
(PhaseUnwrapper)
[.962891 .865875 .768921 .673645 .76889 1.25034 .865906 1.25034 .57666 .76889 .865906 .865906 
.76889 0 ]xsh
396.049 118.649 mo
(work=73)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
395.929 120.628 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
391.823 122.608 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
292.554 107.367 mo
321.747 108.233 383.597 110.336 386.937 110.584 cv
388.792 110.831 391.143 112.068 393.122 113.552 cv
@
392.998 113.8 mo
394.111 114.418 li
393.369 113.429 li
cp
@
392.998 113.8 mo
394.111 114.418 li
393.369 113.429 li
f
436.293 119.243 mo
436.293 116.168 431.863 113.676 426.397 113.676 cv
420.932 113.676 416.501 116.168 416.501 119.243 cv
416.501 122.317 420.932 124.809 426.397 124.809 cv
431.863 124.809 436.293 122.317 436.293 119.243 cv
@
436.293 119.243 mo
436.293 116.168 431.863 113.676 426.397 113.676 cv
420.932 113.676 416.501 116.168 416.501 119.243 cv
416.501 122.317 420.932 124.809 426.397 124.809 cv
431.863 124.809 436.293 122.317 436.293 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
420.482 116.67 mo
(PhaseUnwrapper)
[.962891 .865875 .768921 .673645 .76889 1.25034 .865906 1.25034 .57666 .76889 .865906 .865906 
.76889 0 ]xsh
423.263 118.649 mo
(work=73)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
423.143 120.628 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
419.037 122.608 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
292.677 107.244 mo
327.685 108.233 412.048 110.46 414.151 110.584 cv
416.006 110.831 418.357 112.068 420.336 113.552 cv
@
420.212 113.8 mo
421.325 114.418 li
420.583 113.429 li
cp
@
420.212 113.8 mo
421.325 114.418 li
420.583 113.429 li
f
463.507 119.243 mo
463.507 116.168 459.077 113.676 453.611 113.676 cv
448.146 113.676 443.715 116.168 443.715 119.243 cv
443.715 122.317 448.146 124.809 453.611 124.809 cv
459.077 124.809 463.507 122.317 463.507 119.243 cv
@
463.507 119.243 mo
463.507 116.168 459.077 113.676 453.611 113.676 cv
448.146 113.676 443.715 116.168 443.715 119.243 cv
443.715 122.317 448.146 124.809 453.611 124.809 cv
459.077 124.809 463.507 122.317 463.507 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
447.696 116.67 mo
(PhaseUnwrapper)
[.962891 .865875 .768921 .673645 .76889 1.25034 .865906 1.25034 .57666 .76889 .865906 .865906 
.76889 0 ]xsh
450.477 118.649 mo
(work=73)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
450.357 120.628 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
446.251 122.608 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
292.801 107.244 mo
333.251 108.11 441.365 110.584 441.365 110.584 cv
443.22 110.707 445.571 111.944 447.55 113.552 cv
@
447.426 113.8 mo
448.539 114.418 li
447.797 113.429 li
cp
@
447.426 113.8 mo
448.539 114.418 li
447.797 113.429 li
f
490.721 119.243 mo
490.721 116.168 486.291 113.676 480.825 113.676 cv
475.36 113.676 470.929 116.168 470.929 119.243 cv
470.929 122.317 475.36 124.809 480.825 124.809 cv
486.291 124.809 490.721 122.317 490.721 119.243 cv
@
490.721 119.243 mo
490.721 116.168 486.291 113.676 480.825 113.676 cv
475.36 113.676 470.929 116.168 470.929 119.243 cv
470.929 122.317 475.36 124.809 480.825 124.809 cv
486.291 124.809 490.721 122.317 490.721 119.243 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
474.91 116.67 mo
(PhaseUnwrapper)
[.962891 .865875 .768921 .673645 .76889 1.25034 .865906 1.25034 .57666 .76889 .865906 .865906 
.76889 0 ]xsh
477.691 118.649 mo
(work=73)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
477.571 120.628 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
473.465 122.608 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
292.925 106.873 mo
328.674 106.996 418.48 107.615 468.579 110.584 cv
470.434 110.707 472.785 111.944 474.764 113.552 cv
@
474.64 113.8 mo
475.753 114.418 li
475.011 113.429 li
cp
@
474.64 113.8 mo
475.753 114.418 li
475.011 113.429 li
f
292.925 180.103 mo
292.925 178.873 286.113 177.876 277.71 177.876 cv
269.307 177.876 262.495 178.873 262.495 180.103 cv
262.495 181.333 269.307 182.33 277.71 182.33 cv
286.113 182.33 292.925 181.333 292.925 180.103 cv
@
292.925 180.103 mo
292.925 178.873 286.113 177.876 277.71 177.876 cv
269.307 177.876 262.495 178.873 262.495 180.103 cv
262.495 181.333 269.307 182.33 277.71 182.33 cv
286.113 182.33 292.925 181.333 292.925 180.103 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
263.76 180.499 mo
(roundrobin\(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1\))
[.576691 .865875 .865906 .865906 .865906 .57666 .865906 .865906 .481445 .865906 .57666 .865906 
.432953 .865906 .432953 .865875 .432953 .865906 .432953 .865906 .432953 .865906 .432922 .865906 
.432953 .865906 .432953 .865906 .432953 .865875 .432953 .865906 .432953 .865906 .432953 .865875 
.432953 .865906 .432953 .865906 0 ]xsh
190.996 194.452 mo
190.996 192.129 188.393 190.246 185.182 190.246 cv
181.971 190.246 179.368 192.129 179.368 194.452 cv
179.368 196.775 181.971 198.658 185.182 198.658 cv
188.393 198.658 190.996 196.775 190.996 194.452 cv
@
190.996 194.452 mo
190.996 192.129 188.393 190.246 185.182 190.246 cv
181.971 190.246 179.368 192.129 179.368 194.452 cv
179.368 196.775 181.971 198.658 185.182 198.658 cv
188.393 198.658 190.996 196.775 190.996 194.452 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
181.479 192.869 mo
(Duplicator)
[1.25034 .865891 .865906 .481445 .48143 .768906 .76889 .48143 .865906 0 ]xsh
181.616 194.848 mo
(work=195)
[1.25034 .865891 .576691 .865891 .97673 .865906 .865891 0 ]xsh
181.928 196.827 mo
(I/O: 3->4)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
267.195 181.711 mo
248.022 184.804 207.696 190.989 191.862 193.463 cv
@
192.109 193.092 mo
190.872 193.586 li
192.109 193.71 li
cp
@
192.109 193.092 mo
190.872 193.586 li
192.109 193.71 li
f
112.941 135.076 mo
112.941 132.002 107.569 129.51 100.942 129.51 cv
94.3157 129.51 88.9436 132.002 88.9436 135.076 cv
88.9436 138.15 94.3157 140.643 100.942 140.643 cv
107.569 140.643 112.941 138.15 112.941 135.076 cv
@
112.941 135.076 mo
112.941 132.002 107.569 129.51 100.942 129.51 cv
94.3157 129.51 88.9436 132.002 88.9436 135.076 cv
88.9436 138.15 94.3157 140.643 100.942 140.643 cv
107.569 140.643 112.941 138.15 112.941 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
95.6528 132.503 mo
(FirstDifference)
[.962883 .481438 .576675 .67366 .481438 1.25034 .481438 .576675 .576675 .768898 .576675 .76889 
.865898 .768898 0 ]xsh
97.8088 134.482 mo
(work=14)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
97.6884 136.461 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
91.3701 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865898 .865898 .865906 .432945 .962883 1.05812 1.05811 1.25034 .962875 .432953 .865898 .432953 
1.25034 1.25033 1.05812 1.25033 1.25034 .432953 .865898 .865898 0 ]xsh
101.561 124.809 mo
101.437 125.922 101.437 127.036 101.437 128.149 cv
@
101.19 128.149 mo
101.314 129.386 li
101.685 128.149 li
cp
@
101.19 128.149 mo
101.314 129.386 li
101.685 128.149 li
f
108.983 149.425 mo
108.983 147.103 105.605 145.22 101.437 145.22 cv
97.2699 145.22 93.8916 147.103 93.8916 149.425 cv
93.8916 151.748 97.2699 153.631 101.437 153.631 cv
105.605 153.631 108.983 151.748 108.983 149.425 cv
@
108.983 149.425 mo
108.983 147.103 105.605 145.22 101.437 145.22 cv
97.2699 145.22 93.8916 147.103 93.8916 149.425 cv
93.8916 151.748 97.2699 153.631 101.437 153.631 cv
105.605 153.631 108.983 151.748 108.983 149.425 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B64EDFB39C8FA0E3107D39E1E26D40368A6A59D36B799EDDCB
A8AF8BCAEA2E296C5BB00979C4073082C4AC62DAAE27F25BE45DFF121DF075F7
3D37111C10DFF7C6BD4BFE8AE73B4FADB84F0E8B5722DEA1CA14F5AFDC440B45
4F635F5576E82C8F45782F1EDE0EC9CA59D48E4C0F81> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 67 /C put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 
/greater 2{/.notdef}rp /A /B /C /D /E /F 
/.notdef /H /I /.notdef /K /L /M /.notdef 
/O /P /.notdef /R /S /T /U /V 
10{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
/.notdef /y 134{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
95.9043 147.842 mo
(ConstMultiplier)
[1.1551 .865898 .865898 .67366 .481438 1.53956 .865898 .481445 .481438 .481438 .865906 .481438 
.481438 .76889 0 ]xsh
98.7366 149.821 mo
(work=8)
[1.25034 .865898 .576675 .865898 .97673 0 ]xsh
98.1833 151.8 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481445 .432945 .865898 .576675 .97673 0 ]xsh
101.19 140.766 mo
101.19 141.88 101.314 142.993 101.314 143.983 cv
@
101.066 143.983 mo
101.314 145.22 li
101.685 143.983 li
cp
@
101.066 143.983 mo
101.314 145.22 li
101.685 143.983 li
f
112.323 163.775 mo
112.323 160.7 107.892 158.208 102.427 158.208 cv
96.9615 158.208 92.5309 160.7 92.5309 163.775 cv
92.5309 166.849 96.9615 169.341 102.427 169.341 cv
107.892 169.341 112.323 166.849 112.323 163.775 cv
@
112.323 163.775 mo
112.323 160.7 107.892 158.208 102.427 158.208 cv
96.9615 158.208 92.5309 160.7 92.5309 163.775 cv
92.5309 166.849 96.9615 169.341 102.427 169.341 cv
107.892 169.341 112.323 166.849 112.323 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
97.9061 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34734 .865906 .481438 .76889 .481438 .865906 0 ]xsh
99.2932 163.181 mo
(work=14)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
99.1729 165.16 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
95.0668 167.14 mo
(*** STATEFUL ***)
[.865898 .865898 .865906 .432945 .962883 1.05812 1.25033 1.05812 1.05811 .962883 1.25033 1.05812 
.432953 .865898 .865898 0 ]xsh
101.685 153.631 mo
101.808 154.621 101.808 155.734 101.932 156.847 cv
@
101.685 156.847 mo
102.056 158.084 li
102.179 156.847 li
cp
@
101.685 156.847 mo
102.056 158.084 li
102.179 156.847 li
f
108.612 168.228 mo
110.591 169.341 112.694 170.331 114.302 170.454 cv
155.989 174.413 229.59 177.876 261.876 179.485 cv
@
261.876 179.732 mo
263.113 179.485 li
261.876 179.113 li
cp
@
261.876 179.732 mo
263.113 179.485 li
261.876 179.113 li
f
140.155 135.076 mo
140.155 132.002 134.783 129.51 128.156 129.51 cv
121.53 129.51 116.158 132.002 116.158 135.076 cv
116.158 138.15 121.53 140.643 128.156 140.643 cv
134.783 140.643 140.155 138.15 140.155 135.076 cv
@
140.155 135.076 mo
140.155 132.002 134.783 129.51 128.156 129.51 cv
121.53 129.51 116.158 132.002 116.158 135.076 cv
116.158 138.15 121.53 140.643 128.156 140.643 cv
134.783 140.643 140.155 138.15 140.155 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
122.867 132.503 mo
(FirstDifference)
[.962883 .481438 .576675 .67366 .481438 1.25034 .481438 .576683 .576675 .76889 .576675 .76889 
.865906 .76889 0 ]xsh
125.023 134.482 mo
(work=14)
[1.25034 .865898 .576675 .865898 .97673 .865906 0 ]xsh
124.903 136.461 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481445 .432953 .865891 .576675 .97673 0 ]xsh
118.584 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865898 .865898 .865906 .432945 .962883 1.05811 1.05812 1.25034 .962875 .432953 .865906 .432938 
1.25034 1.25034 1.05812 1.25034 1.25034 .432938 .865906 .865891 0 ]xsh
128.899 124.809 mo
128.775 125.922 128.775 127.036 128.651 128.149 cv
@
128.404 128.149 mo
128.528 129.386 li
128.899 128.149 li
cp
@
128.404 128.149 mo
128.528 129.386 li
128.899 128.149 li
f
136.197 149.425 mo
136.197 147.103 132.819 145.22 128.651 145.22 cv
124.484 145.22 121.106 147.103 121.106 149.425 cv
121.106 151.748 124.484 153.631 128.651 153.631 cv
132.819 153.631 136.197 151.748 136.197 149.425 cv
@
136.197 149.425 mo
136.197 147.103 132.819 145.22 128.651 145.22 cv
124.484 145.22 121.106 147.103 121.106 149.425 cv
121.106 151.748 124.484 153.631 128.651 153.631 cv
132.819 153.631 136.197 151.748 136.197 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
123.118 147.842 mo
(ConstMultiplier)
[1.1551 .865898 .865898 .67366 .481438 1.53957 .865891 .481445 .48143 .481445 .865906 .48143 
.481445 .76889 0 ]xsh
125.95 149.821 mo
(work=8)
[1.25034 .865898 .576675 .865906 .976715 0 ]xsh
125.397 151.8 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481445 .432953 .865891 .576675 .97673 0 ]xsh
128.404 140.766 mo
128.404 141.88 128.528 142.993 128.528 143.983 cv
@
128.28 143.983 mo
128.528 145.22 li
128.899 143.983 li
cp
@
128.28 143.983 mo
128.528 145.22 li
128.899 143.983 li
f
139.537 163.775 mo
139.537 160.7 135.106 158.208 129.641 158.208 cv
124.175 158.208 119.745 160.7 119.745 163.775 cv
119.745 166.849 124.175 169.341 129.641 169.341 cv
135.106 169.341 139.537 166.849 139.537 163.775 cv
@
139.537 163.775 mo
139.537 160.7 135.106 158.208 129.641 158.208 cv
124.175 158.208 119.745 160.7 119.745 163.775 cv
119.745 166.849 124.175 169.341 129.641 169.341 cv
135.106 169.341 139.537 166.849 139.537 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
125.12 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865898 1.34735 .865891 .481445 .76889 .481445 .865891 0 ]xsh
126.507 163.181 mo
(work=14)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
126.387 165.16 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481445 .432953 .865891 .576675 .97673 0 ]xsh
122.281 167.14 mo
(*** STATEFUL ***)
[.865898 .865898 .865906 .432945 .962883 1.05811 1.25034 1.05812 1.05812 .962875 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
128.899 153.631 mo
129.022 154.621 129.022 155.734 129.146 156.847 cv
@
128.899 156.847 mo
129.27 158.084 li
129.393 156.847 li
cp
@
128.899 156.847 mo
129.27 158.084 li
129.393 156.847 li
f
135.826 168.104 mo
137.805 169.341 139.908 170.331 141.516 170.454 cv
175.162 174.289 234.291 177.753 262.247 179.361 cv
@
262.124 179.608 mo
263.361 179.361 li
262.124 178.99 li
cp
@
262.124 179.608 mo
263.361 179.361 li
262.124 178.99 li
f
167.369 135.076 mo
167.369 132.002 161.997 129.51 155.37 129.51 cv
148.744 129.51 143.372 132.002 143.372 135.076 cv
143.372 138.15 148.744 140.643 155.37 140.643 cv
161.997 140.643 167.369 138.15 167.369 135.076 cv
@
167.369 135.076 mo
167.369 132.002 161.997 129.51 155.37 129.51 cv
148.744 129.51 143.372 132.002 143.372 135.076 cv
143.372 138.15 148.744 140.643 155.37 140.643 cv
161.997 140.643 167.369 138.15 167.369 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
150.081 132.503 mo
(FirstDifference)
[.962875 .481445 .576675 .67366 .48143 1.25034 .481445 .576675 .576675 .76889 .576675 .768906 
.865891 .76889 0 ]xsh
152.237 134.482 mo
(work=14)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
152.117 136.461 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
145.798 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.05811 1.25034 .962891 .432938 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865891 0 ]xsh
156.113 124.809 mo
155.989 125.922 155.989 127.036 155.865 128.149 cv
@
155.618 128.149 mo
155.742 129.386 li
156.113 128.149 li
cp
@
155.618 128.149 mo
155.742 129.386 li
156.113 128.149 li
f
163.906 149.425 mo
163.906 147.103 160.527 145.22 156.36 145.22 cv
152.193 145.22 148.814 147.103 148.814 149.425 cv
148.814 151.748 152.193 153.631 156.36 153.631 cv
160.527 153.631 163.906 151.748 163.906 149.425 cv
@
163.906 149.425 mo
163.906 147.103 160.527 145.22 156.36 145.22 cv
152.193 145.22 148.814 147.103 148.814 149.425 cv
148.814 151.748 152.193 153.631 156.36 153.631 cv
160.527 153.631 163.906 151.748 163.906 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
150.827 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53957 .865891 .481445 .48143 .481445 .865906 .48143 
.481445 .76889 0 ]xsh
153.659 149.821 mo
(work=8)
[1.25034 .865891 .576691 .865891 .97673 0 ]xsh
153.106 151.8 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
155.742 140.766 mo
155.865 141.88 155.865 142.993 155.989 143.983 cv
@
155.742 143.983 mo
155.989 145.22 li
156.36 143.983 li
cp
@
155.742 143.983 mo
155.989 145.22 li
156.36 143.983 li
f
166.875 163.775 mo
166.875 160.7 162.444 158.208 156.979 158.208 cv
151.513 158.208 147.083 160.7 147.083 163.775 cv
147.083 166.849 151.513 169.341 156.979 169.341 cv
162.444 169.341 166.875 166.849 166.875 163.775 cv
@
166.875 163.775 mo
166.875 160.7 162.444 158.208 156.979 158.208 cv
151.513 158.208 147.083 160.7 147.083 163.775 cv
147.083 166.849 151.513 169.341 156.979 169.341 cv
162.444 169.341 166.875 166.849 166.875 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
152.458 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34734 .865906 .48143 .768906 .48143 .865906 0 ]xsh
153.845 163.181 mo
(work=14)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
153.725 165.16 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
149.619 167.14 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
156.484 153.631 mo
156.607 154.621 156.607 155.734 156.607 156.847 cv
@
156.36 156.847 mo
156.731 158.084 li
156.855 156.847 li
cp
@
156.36 156.847 mo
156.731 158.084 li
156.855 156.847 li
f
163.164 168.228 mo
165.019 169.341 167.122 170.331 168.73 170.454 cv
194.831 174.042 239.734 177.382 262.989 178.99 cv
@
262.618 179.237 mo
263.855 179.113 li
262.618 178.619 li
cp
@
262.618 179.237 mo
263.855 179.113 li
262.618 178.619 li
f
194.583 135.076 mo
194.583 132.002 189.211 129.51 182.584 129.51 cv
175.958 129.51 170.586 132.002 170.586 135.076 cv
170.586 138.15 175.958 140.643 182.584 140.643 cv
189.211 140.643 194.583 138.15 194.583 135.076 cv
@
194.583 135.076 mo
194.583 132.002 189.211 129.51 182.584 129.51 cv
175.958 129.51 170.586 132.002 170.586 135.076 cv
170.586 138.15 175.958 140.643 182.584 140.643 cv
189.211 140.643 194.583 138.15 194.583 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
177.295 132.503 mo
(FirstDifference)
[.962875 .481445 .576675 .67366 .481445 1.25032 .481445 .576675 .576675 .76889 .576675 .768906 
.865891 .76889 0 ]xsh
179.451 134.482 mo
(work=14)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
179.331 136.461 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
173.012 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.05811 1.25034 .962891 .432938 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865891 .865906 0 ]xsh
183.203 124.809 mo
183.079 125.922 183.079 127.036 183.079 128.149 cv
@
182.832 128.149 mo
182.956 129.386 li
183.327 128.149 li
cp
@
182.832 128.149 mo
182.956 129.386 li
183.327 128.149 li
f
191.12 149.425 mo
191.12 147.103 187.741 145.22 183.574 145.22 cv
179.407 145.22 176.028 147.103 176.028 149.425 cv
176.028 151.748 179.407 153.631 183.574 153.631 cv
187.741 153.631 191.12 151.748 191.12 149.425 cv
@
191.12 149.425 mo
191.12 147.103 187.741 145.22 183.574 145.22 cv
179.407 145.22 176.028 147.103 176.028 149.425 cv
176.028 151.748 179.407 153.631 183.574 153.631 cv
187.741 153.631 191.12 151.748 191.12 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
178.041 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53957 .865891 .481445 .48143 .481445 .865906 .48143 
.481445 .76889 0 ]xsh
180.873 149.821 mo
(work=8)
[1.25034 .865891 .576691 .865891 .97673 0 ]xsh
180.32 151.8 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
182.956 140.766 mo
183.079 141.88 183.079 142.993 183.203 143.983 cv
@
182.956 143.983 mo
183.203 145.22 li
183.574 143.983 li
cp
@
182.956 143.983 mo
183.203 145.22 li
183.574 143.983 li
f
194.089 163.775 mo
194.089 160.7 189.658 158.208 184.193 158.208 cv
178.727 158.208 174.297 160.7 174.297 163.775 cv
174.297 166.849 178.727 169.341 184.193 169.341 cv
189.658 169.341 194.089 166.849 194.089 163.775 cv
@
194.089 163.775 mo
194.089 160.7 189.658 158.208 184.193 158.208 cv
178.727 158.208 174.297 160.7 174.297 163.775 cv
174.297 166.849 178.727 169.341 184.193 169.341 cv
189.658 169.341 194.089 166.849 194.089 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
179.672 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34734 .865906 .48143 .768906 .48143 .865906 0 ]xsh
181.059 163.181 mo
(work=14)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
180.939 165.16 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
176.833 167.14 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
183.698 153.631 mo
183.821 154.621 183.821 155.734 183.821 156.847 cv
@
183.574 156.847 mo
183.945 158.084 li
184.069 156.847 li
cp
@
183.574 156.847 mo
183.945 158.084 li
184.069 156.847 li
f
190.501 168.104 mo
192.357 169.217 194.336 170.207 195.944 170.454 cv
214.375 173.671 245.795 177.011 263.732 178.742 cv
@
263.608 178.99 mo
264.845 178.866 li
263.608 178.371 li
cp
@
263.608 178.99 mo
264.845 178.866 li
263.608 178.371 li
f
221.797 135.076 mo
221.797 132.002 216.425 129.51 209.798 129.51 cv
203.172 129.51 197.8 132.002 197.8 135.076 cv
197.8 138.15 203.172 140.643 209.798 140.643 cv
216.425 140.643 221.797 138.15 221.797 135.076 cv
@
221.797 135.076 mo
221.797 132.002 216.425 129.51 209.798 129.51 cv
203.172 129.51 197.8 132.002 197.8 135.076 cv
197.8 138.15 203.172 140.643 209.798 140.643 cv
216.425 140.643 221.797 138.15 221.797 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
204.509 132.503 mo
(FirstDifference)
[.962875 .481445 .576675 .67366 .48143 1.25034 .481445 .576675 .576675 .76889 .576675 .768906 
.865891 .76889 0 ]xsh
206.665 134.482 mo
(work=14)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
206.545 136.461 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
200.226 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.05811 1.25034 .962891 .432938 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865891 0 ]xsh
210.417 124.809 mo
210.293 125.922 210.293 127.036 210.293 128.149 cv
@
210.046 128.149 mo
210.17 129.386 li
210.541 128.149 li
cp
@
210.046 128.149 mo
210.17 129.386 li
210.541 128.149 li
f
218.334 149.425 mo
218.334 147.103 214.955 145.22 210.788 145.22 cv
206.621 145.22 203.242 147.103 203.242 149.425 cv
203.242 151.748 206.621 153.631 210.788 153.631 cv
214.955 153.631 218.334 151.748 218.334 149.425 cv
@
218.334 149.425 mo
218.334 147.103 214.955 145.22 210.788 145.22 cv
206.621 145.22 203.242 147.103 203.242 149.425 cv
203.242 151.748 206.621 153.631 210.788 153.631 cv
214.955 153.631 218.334 151.748 218.334 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
205.255 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53957 .865891 .481445 .48143 .481445 .865906 .48143 
.481445 .76889 0 ]xsh
208.087 149.821 mo
(work=8)
[1.25034 .865891 .576691 .865891 .97673 0 ]xsh
207.534 151.8 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
210.17 140.766 mo
210.293 141.88 210.293 142.993 210.417 143.983 cv
@
210.17 143.983 mo
210.417 145.22 li
210.788 143.983 li
cp
@
210.17 143.983 mo
210.417 145.22 li
210.788 143.983 li
f
221.303 163.775 mo
221.303 160.7 216.872 158.208 211.407 158.208 cv
205.941 158.208 201.511 160.7 201.511 163.775 cv
201.511 166.849 205.941 169.341 211.407 169.341 cv
216.872 169.341 221.303 166.849 221.303 163.775 cv
@
221.303 163.775 mo
221.303 160.7 216.872 158.208 211.407 158.208 cv
205.941 158.208 201.511 160.7 201.511 163.775 cv
201.511 166.849 205.941 169.341 211.407 169.341 cv
216.872 169.341 221.303 166.849 221.303 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
206.886 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34734 .865906 .48143 .768906 .48143 .865906 0 ]xsh
208.273 163.181 mo
(work=14)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
208.153 165.16 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
204.047 167.14 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
210.912 153.631 mo
211.035 154.621 211.035 155.734 211.035 156.847 cv
@
210.788 156.847 mo
211.159 158.084 li
211.283 156.847 li
cp
@
210.788 156.847 mo
211.159 158.084 li
211.283 156.847 li
f
217.839 168.104 mo
219.694 169.217 221.674 170.083 223.158 170.454 cv
234.538 173.3 253.712 176.392 265.958 178.371 cv
@
265.835 178.619 mo
267.072 178.495 li
265.835 178 li
cp
@
265.835 178.619 mo
267.072 178.495 li
265.835 178 li
f
249.011 135.076 mo
249.011 132.002 243.639 129.51 237.012 129.51 cv
230.386 129.51 225.014 132.002 225.014 135.076 cv
225.014 138.15 230.386 140.643 237.012 140.643 cv
243.639 140.643 249.011 138.15 249.011 135.076 cv
@
249.011 135.076 mo
249.011 132.002 243.639 129.51 237.012 129.51 cv
230.386 129.51 225.014 132.002 225.014 135.076 cv
225.014 138.15 230.386 140.643 237.012 140.643 cv
243.639 140.643 249.011 138.15 249.011 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
231.723 132.503 mo
(FirstDifference)
[.962875 .481445 .576675 .67366 .481445 1.25032 .481445 .576675 .576675 .76889 .576675 .768906 
.865891 .76889 0 ]xsh
233.879 134.482 mo
(work=14)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
233.759 136.461 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
227.44 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.05811 1.25034 .962891 .432938 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865891 .865906 0 ]xsh
237.631 124.809 mo
237.507 125.922 237.507 127.036 237.507 128.149 cv
@
237.26 128.149 mo
237.384 129.386 li
237.755 128.149 li
cp
@
237.26 128.149 mo
237.384 129.386 li
237.755 128.149 li
f
245.053 149.425 mo
245.053 147.103 241.675 145.22 237.507 145.22 cv
233.34 145.22 229.962 147.103 229.962 149.425 cv
229.962 151.748 233.34 153.631 237.507 153.631 cv
241.675 153.631 245.053 151.748 245.053 149.425 cv
@
245.053 149.425 mo
245.053 147.103 241.675 145.22 237.507 145.22 cv
233.34 145.22 229.962 147.103 229.962 149.425 cv
229.962 151.748 233.34 153.631 237.507 153.631 cv
241.675 153.631 245.053 151.748 245.053 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
231.974 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53957 .865891 .481445 .48143 .481445 .865906 .48143 
.481445 .76889 0 ]xsh
234.806 149.821 mo
(work=8)
[1.25034 .865891 .576691 .865891 .97673 0 ]xsh
234.253 151.8 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
237.26 140.766 mo
237.26 141.88 237.384 142.993 237.384 143.983 cv
@
237.136 143.983 mo
237.384 145.22 li
237.755 143.983 li
cp
@
237.136 143.983 mo
237.384 145.22 li
237.755 143.983 li
f
248.393 163.775 mo
248.393 160.7 243.962 158.208 238.497 158.208 cv
233.031 158.208 228.601 160.7 228.601 163.775 cv
228.601 166.849 233.031 169.341 238.497 169.341 cv
243.962 169.341 248.393 166.849 248.393 163.775 cv
@
248.393 163.775 mo
248.393 160.7 243.962 158.208 238.497 158.208 cv
233.031 158.208 228.601 160.7 228.601 163.775 cv
228.601 166.849 233.031 169.341 238.497 169.341 cv
243.962 169.341 248.393 166.849 248.393 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
233.976 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34734 .865906 .48143 .768906 .48143 .865906 0 ]xsh
235.363 163.181 mo
(work=14)
[1.25034 .865891 .576691 .865891 .97673 .865906 0 ]xsh
235.243 165.16 mo
(I/O: 1->1)
[.576675 .481445 1.25034 .48143 .432953 .865906 .576675 .97673 0 ]xsh
231.137 167.14 mo
(*** STATEFUL ***)
[.865906 .865891 .865906 .432953 .962875 1.05812 1.25034 1.05811 1.05812 .962875 1.25034 1.05812 
.432953 .865891 .865906 0 ]xsh
237.755 153.631 mo
237.878 154.621 237.878 155.734 238.002 156.847 cv
@
237.755 156.847 mo
238.126 158.084 li
238.249 156.847 li
cp
@
237.755 156.847 mo
238.126 158.084 li
238.249 156.847 li
f
245.3 167.857 mo
247.156 168.846 249.011 169.836 250.372 170.454 cv
255.815 172.681 264.474 175.774 270.535 177.753 cv
@
270.164 178 mo
271.401 178 li
270.288 177.382 li
cp
@
270.164 178 mo
271.401 178 li
270.288 177.382 li
f
276.225 135.076 mo
276.225 132.002 270.853 129.51 264.226 129.51 cv
257.6 129.51 252.228 132.002 252.228 135.076 cv
252.228 138.15 257.6 140.643 264.226 140.643 cv
270.853 140.643 276.225 138.15 276.225 135.076 cv
@
276.225 135.076 mo
276.225 132.002 270.853 129.51 264.226 129.51 cv
257.6 129.51 252.228 132.002 252.228 135.076 cv
252.228 138.15 257.6 140.643 264.226 140.643 cv
270.853 140.643 276.225 138.15 276.225 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
258.937 132.503 mo
(FirstDifference)
[.962891 .481415 .576691 .673645 .481445 1.25034 .481445 .576691 .57666 .76889 .576691 .76889 
.865906 .76889 0 ]xsh
261.093 134.482 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
260.973 136.461 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
254.654 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865906 0 ]xsh
264.845 124.809 mo
264.721 125.922 264.721 127.036 264.721 128.149 cv
@
264.474 128.149 mo
264.598 129.386 li
264.969 128.149 li
cp
@
264.474 128.149 mo
264.598 129.386 li
264.969 128.149 li
f
272.267 149.425 mo
272.267 147.103 268.889 145.22 264.721 145.22 cv
260.554 145.22 257.176 147.103 257.176 149.425 cv
257.176 151.748 260.554 153.631 264.721 153.631 cv
268.889 153.631 272.267 151.748 272.267 149.425 cv
@
272.267 149.425 mo
272.267 147.103 268.889 145.22 264.721 145.22 cv
260.554 145.22 257.176 147.103 257.176 149.425 cv
257.176 151.748 260.554 153.631 264.721 153.631 cv
268.889 153.631 272.267 151.748 272.267 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
259.188 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53955 .865906 .481445 .481445 .481445 .865875 .481445 
.481445 .76889 0 ]xsh
262.02 149.821 mo
(work=8)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
261.467 151.8 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
264.474 140.766 mo
264.474 141.88 264.598 142.993 264.598 143.983 cv
@
264.35 143.983 mo
264.598 145.22 li
264.969 143.983 li
cp
@
264.35 143.983 mo
264.598 145.22 li
264.969 143.983 li
f
275.607 163.775 mo
275.607 160.7 271.176 158.208 265.711 158.208 cv
260.245 158.208 255.815 160.7 255.815 163.775 cv
255.815 166.849 260.245 169.341 265.711 169.341 cv
271.176 169.341 275.607 166.849 275.607 163.775 cv
@
275.607 163.775 mo
275.607 160.7 271.176 158.208 265.711 158.208 cv
260.245 158.208 255.815 160.7 255.815 163.775 cv
255.815 166.849 260.245 169.341 265.711 169.341 cv
271.176 169.341 275.607 166.849 275.607 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
261.19 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34735 .865875 .481445 .76889 .481445 .865906 0 ]xsh
262.577 163.181 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
262.457 165.16 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
258.351 167.14 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
264.969 153.631 mo
265.092 154.621 265.092 155.734 265.216 156.847 cv
@
264.969 156.847 mo
265.34 158.084 li
265.463 156.847 li
cp
@
264.969 156.847 mo
265.34 158.084 li
265.463 156.847 li
f
269.546 168.97 mo
271.401 171.568 273.751 174.784 275.359 177.011 cv
@
274.988 177.011 mo
275.978 177.876 li
275.483 176.639 li
cp
@
274.988 177.011 mo
275.978 177.876 li
275.483 176.639 li
f
303.439 135.076 mo
303.439 132.002 298.067 129.51 291.44 129.51 cv
284.814 129.51 279.442 132.002 279.442 135.076 cv
279.442 138.15 284.814 140.643 291.44 140.643 cv
298.067 140.643 303.439 138.15 303.439 135.076 cv
@
303.439 135.076 mo
303.439 132.002 298.067 129.51 291.44 129.51 cv
284.814 129.51 279.442 132.002 279.442 135.076 cv
279.442 138.15 284.814 140.643 291.44 140.643 cv
298.067 140.643 303.439 138.15 303.439 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
286.151 132.503 mo
(FirstDifference)
[.962891 .481415 .576691 .673645 .481445 1.25034 .481445 .576691 .57666 .76889 .576691 .76889 
.865906 .76889 0 ]xsh
288.307 134.482 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
288.187 136.461 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
281.868 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865906 0 ]xsh
290.698 124.809 mo
290.822 125.922 290.822 127.036 290.946 128.149 cv
@
290.698 128.149 mo
291.069 129.386 li
291.193 128.149 li
cp
@
290.698 128.149 mo
291.069 129.386 li
291.193 128.149 li
f
298.368 149.425 mo
298.368 147.103 294.989 145.22 290.822 145.22 cv
286.655 145.22 283.276 147.103 283.276 149.425 cv
283.276 151.748 286.655 153.631 290.822 153.631 cv
294.989 153.631 298.368 151.748 298.368 149.425 cv
@
298.368 149.425 mo
298.368 147.103 294.989 145.22 290.822 145.22 cv
286.655 145.22 283.276 147.103 283.276 149.425 cv
283.276 151.748 286.655 153.631 290.822 153.631 cv
294.989 153.631 298.368 151.748 298.368 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
285.289 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53955 .865906 .481445 .481445 .481445 .865875 .481445 
.481445 .76889 0 ]xsh
288.121 149.821 mo
(work=8)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
287.568 151.8 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
291.193 140.766 mo
291.193 141.88 291.069 142.993 291.069 143.983 cv
@
290.822 143.983 mo
291.069 145.22 li
291.44 143.983 li
cp
@
290.822 143.983 mo
291.069 145.22 li
291.44 143.983 li
f
299.728 163.775 mo
299.728 160.7 295.298 158.208 289.832 158.208 cv
284.367 158.208 279.936 160.7 279.936 163.775 cv
279.936 166.849 284.367 169.341 289.832 169.341 cv
295.298 169.341 299.728 166.849 299.728 163.775 cv
@
299.728 163.775 mo
299.728 160.7 295.298 158.208 289.832 158.208 cv
284.367 158.208 279.936 160.7 279.936 163.775 cv
279.936 166.849 284.367 169.341 289.832 169.341 cv
295.298 169.341 299.728 166.849 299.728 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
285.312 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34735 .865875 .481445 .76889 .481445 .865906 0 ]xsh
286.699 163.181 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
286.579 165.16 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
282.473 167.14 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
290.575 153.631 mo
290.451 154.745 290.327 155.982 290.327 157.219 cv
@
290.08 156.847 mo
290.203 158.084 li
290.698 156.847 li
cp
@
290.08 156.847 mo
290.203 158.084 li
290.698 156.847 li
f
285.998 168.97 mo
284.018 171.568 281.668 174.784 280.06 177.011 cv
@
279.936 176.639 mo
279.442 177.876 li
280.431 177.011 li
cp
@
279.936 176.639 mo
279.442 177.876 li
280.431 177.011 li
f
330.653 135.076 mo
330.653 132.002 325.281 129.51 318.654 129.51 cv
312.028 129.51 306.656 132.002 306.656 135.076 cv
306.656 138.15 312.028 140.643 318.654 140.643 cv
325.281 140.643 330.653 138.15 330.653 135.076 cv
@
330.653 135.076 mo
330.653 132.002 325.281 129.51 318.654 129.51 cv
312.028 129.51 306.656 132.002 306.656 135.076 cv
306.656 138.15 312.028 140.643 318.654 140.643 cv
325.281 140.643 330.653 138.15 330.653 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
313.365 132.503 mo
(FirstDifference)
[.962891 .481415 .576691 .673645 .481445 1.25034 .481445 .576691 .57666 .76889 .576691 .76889 
.865906 .76889 0 ]xsh
315.521 134.482 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
315.401 136.461 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
309.082 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865906 0 ]xsh
317.912 124.809 mo
318.036 125.922 318.036 127.036 318.16 128.149 cv
@
317.912 128.149 mo
318.283 129.386 li
318.407 128.149 li
cp
@
317.912 128.149 mo
318.283 129.386 li
318.407 128.149 li
f
325.582 149.425 mo
325.582 147.103 322.203 145.22 318.036 145.22 cv
313.869 145.22 310.49 147.103 310.49 149.425 cv
310.49 151.748 313.869 153.631 318.036 153.631 cv
322.203 153.631 325.582 151.748 325.582 149.425 cv
@
325.582 149.425 mo
325.582 147.103 322.203 145.22 318.036 145.22 cv
313.869 145.22 310.49 147.103 310.49 149.425 cv
310.49 151.748 313.869 153.631 318.036 153.631 cv
322.203 153.631 325.582 151.748 325.582 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
312.503 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53955 .865906 .481445 .481445 .481445 .865875 .481445 
.481445 .76889 0 ]xsh
315.335 149.821 mo
(work=8)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
314.782 151.8 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
318.407 140.766 mo
318.407 141.88 318.283 142.993 318.283 143.983 cv
@
318.036 143.983 mo
318.283 145.22 li
318.654 143.983 li
cp
@
318.036 143.983 mo
318.283 145.22 li
318.654 143.983 li
f
326.942 163.775 mo
326.942 160.7 322.512 158.208 317.046 158.208 cv
311.581 158.208 307.15 160.7 307.15 163.775 cv
307.15 166.849 311.581 169.341 317.046 169.341 cv
322.512 169.341 326.942 166.849 326.942 163.775 cv
@
326.942 163.775 mo
326.942 160.7 322.512 158.208 317.046 158.208 cv
311.581 158.208 307.15 160.7 307.15 163.775 cv
307.15 166.849 311.581 169.341 317.046 169.341 cv
322.512 169.341 326.942 166.849 326.942 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
312.526 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34735 .865875 .481445 .76889 .481445 .865906 0 ]xsh
313.913 163.181 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
313.793 165.16 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
309.687 167.14 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
317.789 153.631 mo
317.665 154.745 317.541 155.982 317.541 157.219 cv
@
317.294 156.847 mo
317.417 158.084 li
317.912 156.847 li
cp
@
317.294 156.847 mo
317.417 158.084 li
317.912 156.847 li
f
310.367 167.98 mo
308.511 168.97 306.779 169.96 305.295 170.454 cv
299.976 172.681 291.193 175.774 285.008 177.753 cv
@
285.255 177.382 mo
284.142 178 li
285.379 178 li
cp
@
285.255 177.382 mo
284.142 178 li
285.379 178 li
f
357.867 135.076 mo
357.867 132.002 352.495 129.51 345.868 129.51 cv
339.242 129.51 333.87 132.002 333.87 135.076 cv
333.87 138.15 339.242 140.643 345.868 140.643 cv
352.495 140.643 357.867 138.15 357.867 135.076 cv
@
357.867 135.076 mo
357.867 132.002 352.495 129.51 345.868 129.51 cv
339.242 129.51 333.87 132.002 333.87 135.076 cv
333.87 138.15 339.242 140.643 345.868 140.643 cv
352.495 140.643 357.867 138.15 357.867 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
340.579 132.503 mo
(FirstDifference)
[.962891 .481415 .576691 .673645 .481445 1.25034 .481445 .576691 .57666 .76889 .576691 .76889 
.865906 .76889 0 ]xsh
342.735 134.482 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
342.615 136.461 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
336.296 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865875 0 ]xsh
345.126 124.809 mo
345.25 125.922 345.25 127.036 345.374 128.149 cv
@
345.126 128.149 mo
345.497 129.386 li
345.621 128.149 li
cp
@
345.126 128.149 mo
345.497 129.386 li
345.621 128.149 li
f
352.796 149.425 mo
352.796 147.103 349.417 145.22 345.25 145.22 cv
341.083 145.22 337.704 147.103 337.704 149.425 cv
337.704 151.748 341.083 153.631 345.25 153.631 cv
349.417 153.631 352.796 151.748 352.796 149.425 cv
@
352.796 149.425 mo
352.796 147.103 349.417 145.22 345.25 145.22 cv
341.083 145.22 337.704 147.103 337.704 149.425 cv
337.704 151.748 341.083 153.631 345.25 153.631 cv
349.417 153.631 352.796 151.748 352.796 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
339.717 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53955 .865906 .481445 .481445 .481445 .865875 .481445 
.481445 .76889 0 ]xsh
342.549 149.821 mo
(work=8)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
341.996 151.8 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
345.621 140.766 mo
345.621 141.88 345.497 142.993 345.497 143.983 cv
@
345.25 143.983 mo
345.497 145.22 li
345.868 143.983 li
cp
@
345.25 143.983 mo
345.497 145.22 li
345.868 143.983 li
f
354.156 163.775 mo
354.156 160.7 349.726 158.208 344.26 158.208 cv
338.795 158.208 334.364 160.7 334.364 163.775 cv
334.364 166.849 338.795 169.341 344.26 169.341 cv
349.726 169.341 354.156 166.849 354.156 163.775 cv
@
354.156 163.775 mo
354.156 160.7 349.726 158.208 344.26 158.208 cv
338.795 158.208 334.364 160.7 334.364 163.775 cv
334.364 166.849 338.795 169.341 344.26 169.341 cv
349.726 169.341 354.156 166.849 354.156 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
339.74 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34735 .865875 .481445 .76889 .481445 .865906 0 ]xsh
341.127 163.181 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
341.007 165.16 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
336.901 167.14 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
345.003 153.631 mo
344.879 154.745 344.755 155.982 344.755 157.219 cv
@
344.508 156.847 mo
344.631 158.084 li
345.126 156.847 li
cp
@
344.508 156.847 mo
344.631 158.084 li
345.126 156.847 li
f
337.828 168.104 mo
335.972 169.217 334.117 170.083 332.509 170.454 cv
321.128 173.3 301.955 176.392 289.585 178.371 cv
@
289.709 178 mo
288.472 178.495 li
289.709 178.619 li
cp
@
289.709 178 mo
288.472 178.495 li
289.709 178.619 li
f
385.081 135.076 mo
385.081 132.002 379.709 129.51 373.082 129.51 cv
366.456 129.51 361.084 132.002 361.084 135.076 cv
361.084 138.15 366.456 140.643 373.082 140.643 cv
379.709 140.643 385.081 138.15 385.081 135.076 cv
@
385.081 135.076 mo
385.081 132.002 379.709 129.51 373.082 129.51 cv
366.456 129.51 361.084 132.002 361.084 135.076 cv
361.084 138.15 366.456 140.643 373.082 140.643 cv
379.709 140.643 385.081 138.15 385.081 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
367.793 132.503 mo
(FirstDifference)
[.962891 .481415 .576691 .673645 .481445 1.25034 .481445 .576691 .57666 .76889 .576691 .76889 
.865906 .76889 0 ]xsh
369.949 134.482 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
369.829 136.461 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
363.51 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865875 0 ]xsh
372.34 124.809 mo
372.464 125.922 372.464 127.036 372.588 128.149 cv
@
372.34 128.149 mo
372.711 129.386 li
372.835 128.149 li
cp
@
372.34 128.149 mo
372.711 129.386 li
372.835 128.149 li
f
380.01 149.425 mo
380.01 147.103 376.631 145.22 372.464 145.22 cv
368.297 145.22 364.918 147.103 364.918 149.425 cv
364.918 151.748 368.297 153.631 372.464 153.631 cv
376.631 153.631 380.01 151.748 380.01 149.425 cv
@
380.01 149.425 mo
380.01 147.103 376.631 145.22 372.464 145.22 cv
368.297 145.22 364.918 147.103 364.918 149.425 cv
364.918 151.748 368.297 153.631 372.464 153.631 cv
376.631 153.631 380.01 151.748 380.01 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
366.931 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53955 .865906 .481445 .481445 .481445 .865875 .481445 
.481445 .76889 0 ]xsh
369.763 149.821 mo
(work=8)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
369.21 151.8 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
372.835 140.766 mo
372.835 141.88 372.711 142.993 372.711 143.983 cv
@
372.464 143.983 mo
372.711 145.22 li
373.082 143.983 li
cp
@
372.464 143.983 mo
372.711 145.22 li
373.082 143.983 li
f
381.37 163.775 mo
381.37 160.7 376.94 158.208 371.474 158.208 cv
366.009 158.208 361.578 160.7 361.578 163.775 cv
361.578 166.849 366.009 169.341 371.474 169.341 cv
376.94 169.341 381.37 166.849 381.37 163.775 cv
@
381.37 163.775 mo
381.37 160.7 376.94 158.208 371.474 158.208 cv
366.009 158.208 361.578 160.7 361.578 163.775 cv
361.578 166.849 366.009 169.341 371.474 169.341 cv
376.94 169.341 381.37 166.849 381.37 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
366.954 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34735 .865875 .481445 .76889 .481445 .865906 0 ]xsh
368.341 163.181 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
368.221 165.16 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
364.115 167.14 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
372.217 153.631 mo
372.093 154.745 371.969 155.982 371.969 157.219 cv
@
371.722 156.847 mo
371.845 158.084 li
372.34 156.847 li
cp
@
371.722 156.847 mo
371.845 158.084 li
372.34 156.847 li
f
365.166 168.104 mo
363.31 169.217 361.331 170.207 359.723 170.454 cv
341.168 173.671 309.748 177.011 291.688 178.742 cv
@
291.812 178.371 mo
290.575 178.866 li
291.812 178.99 li
cp
@
291.812 178.371 mo
290.575 178.866 li
291.812 178.99 li
f
412.295 135.076 mo
412.295 132.002 406.923 129.51 400.296 129.51 cv
393.67 129.51 388.298 132.002 388.298 135.076 cv
388.298 138.15 393.67 140.643 400.296 140.643 cv
406.923 140.643 412.295 138.15 412.295 135.076 cv
@
412.295 135.076 mo
412.295 132.002 406.923 129.51 400.296 129.51 cv
393.67 129.51 388.298 132.002 388.298 135.076 cv
388.298 138.15 393.67 140.643 400.296 140.643 cv
406.923 140.643 412.295 138.15 412.295 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
395.007 132.503 mo
(FirstDifference)
[.962891 .481415 .576691 .673645 .481445 1.25034 .481445 .576691 .57666 .76889 .576691 .76889 
.865906 .76889 0 ]xsh
397.163 134.482 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
397.043 136.461 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
390.724 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865875 0 ]xsh
399.554 124.809 mo
399.678 125.922 399.678 127.036 399.802 128.149 cv
@
399.554 128.149 mo
399.925 129.386 li
400.049 128.149 li
cp
@
399.554 128.149 mo
399.925 129.386 li
400.049 128.149 li
f
407.224 149.425 mo
407.224 147.103 403.845 145.22 399.678 145.22 cv
395.511 145.22 392.132 147.103 392.132 149.425 cv
392.132 151.748 395.511 153.631 399.678 153.631 cv
403.845 153.631 407.224 151.748 407.224 149.425 cv
@
407.224 149.425 mo
407.224 147.103 403.845 145.22 399.678 145.22 cv
395.511 145.22 392.132 147.103 392.132 149.425 cv
392.132 151.748 395.511 153.631 399.678 153.631 cv
403.845 153.631 407.224 151.748 407.224 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
394.145 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53955 .865906 .481445 .481445 .481445 .865875 .481445 
.481445 .76889 0 ]xsh
396.977 149.821 mo
(work=8)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
396.424 151.8 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
400.049 140.766 mo
400.049 141.88 399.925 142.993 399.925 143.983 cv
@
399.678 143.983 mo
399.925 145.22 li
400.296 143.983 li
cp
@
399.678 143.983 mo
399.925 145.22 li
400.296 143.983 li
f
408.584 163.775 mo
408.584 160.7 404.154 158.208 398.688 158.208 cv
393.223 158.208 388.792 160.7 388.792 163.775 cv
388.792 166.849 393.223 169.341 398.688 169.341 cv
404.154 169.341 408.584 166.849 408.584 163.775 cv
@
408.584 163.775 mo
408.584 160.7 404.154 158.208 398.688 158.208 cv
393.223 158.208 388.792 160.7 388.792 163.775 cv
388.792 166.849 393.223 169.341 398.688 169.341 cv
404.154 169.341 408.584 166.849 408.584 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
394.168 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34735 .865875 .481445 .76889 .481445 .865906 0 ]xsh
395.555 163.181 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
395.435 165.16 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
391.329 167.14 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
399.431 153.631 mo
399.307 154.745 399.183 155.982 399.183 157.219 cv
@
398.936 156.847 mo
399.059 158.084 li
399.554 156.847 li
cp
@
398.936 156.847 mo
399.059 158.084 li
399.554 156.847 li
f
392.503 168.228 mo
390.648 169.341 388.669 170.331 386.937 170.454 cv
360.96 174.042 315.686 177.382 292.43 178.99 cv
@
292.801 178.619 mo
291.564 179.113 li
292.801 179.237 li
cp
@
292.801 178.619 mo
291.564 179.113 li
292.801 179.237 li
f
439.509 135.076 mo
439.509 132.002 434.137 129.51 427.51 129.51 cv
420.884 129.51 415.512 132.002 415.512 135.076 cv
415.512 138.15 420.884 140.643 427.51 140.643 cv
434.137 140.643 439.509 138.15 439.509 135.076 cv
@
439.509 135.076 mo
439.509 132.002 434.137 129.51 427.51 129.51 cv
420.884 129.51 415.512 132.002 415.512 135.076 cv
415.512 138.15 420.884 140.643 427.51 140.643 cv
434.137 140.643 439.509 138.15 439.509 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
422.221 132.503 mo
(FirstDifference)
[.962891 .481415 .576691 .673645 .481445 1.25034 .481445 .576691 .57666 .76889 .576691 .76889 
.865906 .76889 0 ]xsh
424.377 134.482 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
424.257 136.461 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
417.938 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865906 0 ]xsh
426.768 124.809 mo
426.892 125.922 426.892 127.036 427.016 128.149 cv
@
426.768 128.149 mo
427.139 129.386 li
427.263 128.149 li
cp
@
426.768 128.149 mo
427.139 129.386 li
427.263 128.149 li
f
434.438 149.425 mo
434.438 147.103 431.059 145.22 426.892 145.22 cv
422.725 145.22 419.346 147.103 419.346 149.425 cv
419.346 151.748 422.725 153.631 426.892 153.631 cv
431.059 153.631 434.438 151.748 434.438 149.425 cv
@
434.438 149.425 mo
434.438 147.103 431.059 145.22 426.892 145.22 cv
422.725 145.22 419.346 147.103 419.346 149.425 cv
419.346 151.748 422.725 153.631 426.892 153.631 cv
431.059 153.631 434.438 151.748 434.438 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
421.359 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53955 .865906 .481445 .481445 .481445 .865875 .481445 
.481445 .76889 0 ]xsh
424.191 149.821 mo
(work=8)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
423.638 151.8 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
427.263 140.766 mo
427.263 141.88 427.139 142.993 427.139 143.983 cv
@
426.892 143.983 mo
427.139 145.22 li
427.51 143.983 li
cp
@
426.892 143.983 mo
427.139 145.22 li
427.51 143.983 li
f
435.798 163.775 mo
435.798 160.7 431.368 158.208 425.902 158.208 cv
420.437 158.208 416.006 160.7 416.006 163.775 cv
416.006 166.849 420.437 169.341 425.902 169.341 cv
431.368 169.341 435.798 166.849 435.798 163.775 cv
@
435.798 163.775 mo
435.798 160.7 431.368 158.208 425.902 158.208 cv
420.437 158.208 416.006 160.7 416.006 163.775 cv
416.006 166.849 420.437 169.341 425.902 169.341 cv
431.368 169.341 435.798 166.849 435.798 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
421.382 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34735 .865875 .481445 .76889 .481445 .865906 0 ]xsh
422.769 163.181 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
422.649 165.16 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
418.543 167.14 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
426.645 153.631 mo
426.521 154.745 426.397 155.982 426.397 157.219 cv
@
426.15 156.847 mo
426.273 158.084 li
426.768 156.847 li
cp
@
426.15 156.847 mo
426.273 158.084 li
426.768 156.847 li
f
419.717 168.228 mo
417.862 169.341 415.883 170.331 414.151 170.454 cv
380.381 174.289 321.128 177.753 293.172 179.361 cv
@
293.296 178.99 mo
292.059 179.361 li
293.296 179.608 li
cp
@
293.296 178.99 mo
292.059 179.361 li
293.296 179.608 li
f
466.723 135.076 mo
466.723 132.002 461.351 129.51 454.724 129.51 cv
448.098 129.51 442.726 132.002 442.726 135.076 cv
442.726 138.15 448.098 140.643 454.724 140.643 cv
461.351 140.643 466.723 138.15 466.723 135.076 cv
@
466.723 135.076 mo
466.723 132.002 461.351 129.51 454.724 129.51 cv
448.098 129.51 442.726 132.002 442.726 135.076 cv
442.726 138.15 448.098 140.643 454.724 140.643 cv
461.351 140.643 466.723 138.15 466.723 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
449.435 132.503 mo
(FirstDifference)
[.962891 .481415 .576691 .673645 .481445 1.25034 .481445 .576691 .57666 .76889 .576691 .76889 
.865906 .76889 0 ]xsh
451.591 134.482 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
451.471 136.461 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
445.152 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865906 0 ]xsh
453.982 124.809 mo
454.106 125.922 454.106 127.036 454.23 128.149 cv
@
453.982 128.149 mo
454.353 129.386 li
454.477 128.149 li
cp
@
453.982 128.149 mo
454.353 129.386 li
454.477 128.149 li
f
461.652 149.425 mo
461.652 147.103 458.273 145.22 454.106 145.22 cv
449.939 145.22 446.56 147.103 446.56 149.425 cv
446.56 151.748 449.939 153.631 454.106 153.631 cv
458.273 153.631 461.652 151.748 461.652 149.425 cv
@
461.652 149.425 mo
461.652 147.103 458.273 145.22 454.106 145.22 cv
449.939 145.22 446.56 147.103 446.56 149.425 cv
446.56 151.748 449.939 153.631 454.106 153.631 cv
458.273 153.631 461.652 151.748 461.652 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
448.573 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53955 .865906 .481445 .481445 .481445 .865875 .481445 
.481445 .76889 0 ]xsh
451.405 149.821 mo
(work=8)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
450.852 151.8 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
454.477 140.766 mo
454.477 141.88 454.353 142.993 454.353 143.983 cv
@
454.106 143.983 mo
454.353 145.22 li
454.724 143.983 li
cp
@
454.106 143.983 mo
454.353 145.22 li
454.724 143.983 li
f
463.012 163.775 mo
463.012 160.7 458.582 158.208 453.116 158.208 cv
447.651 158.208 443.22 160.7 443.22 163.775 cv
443.22 166.849 447.651 169.341 453.116 169.341 cv
458.582 169.341 463.012 166.849 463.012 163.775 cv
@
463.012 163.775 mo
463.012 160.7 458.582 158.208 453.116 158.208 cv
447.651 158.208 443.22 160.7 443.22 163.775 cv
443.22 166.849 447.651 169.341 453.116 169.341 cv
458.582 169.341 463.012 166.849 463.012 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
448.596 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34735 .865875 .481445 .76889 .481445 .865906 0 ]xsh
449.983 163.181 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
449.863 165.16 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
445.757 167.14 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865906 0 ]xsh
453.859 153.631 mo
453.735 154.745 453.611 155.982 453.611 157.219 cv
@
453.364 156.847 mo
453.487 158.084 li
453.982 156.847 li
cp
@
453.364 156.847 mo
453.487 158.084 li
453.982 156.847 li
f
446.931 168.228 mo
445.076 169.341 443.097 170.331 441.365 170.454 cv
399.554 174.413 325.334 177.876 293.172 179.485 cv
@
293.543 179.113 mo
292.306 179.485 li
293.543 179.732 li
cp
@
293.543 179.113 mo
292.306 179.485 li
293.543 179.732 li
f
493.937 135.076 mo
493.937 132.002 488.565 129.51 481.938 129.51 cv
475.312 129.51 469.94 132.002 469.94 135.076 cv
469.94 138.15 475.312 140.643 481.938 140.643 cv
488.565 140.643 493.937 138.15 493.937 135.076 cv
@
493.937 135.076 mo
493.937 132.002 488.565 129.51 481.938 129.51 cv
475.312 129.51 469.94 132.002 469.94 135.076 cv
469.94 138.15 475.312 140.643 481.938 140.643 cv
488.565 140.643 493.937 138.15 493.937 135.076 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
476.649 132.503 mo
(FirstDifference)
[.962891 .481415 .576691 .673645 .481445 1.25034 .481445 .576691 .57666 .76889 .576691 .76889 
.865906 .76889 0 ]xsh
478.805 134.482 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
478.685 136.461 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
472.366 138.441 mo
(*** PEEKS 1 AHEAD ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.05814 1.25034 .96286 .432953 .865906 .432953 
1.25034 1.25034 1.05811 1.25034 1.25034 .432953 .865906 .865906 0 ]xsh
481.196 124.809 mo
481.32 125.922 481.32 127.036 481.444 128.149 cv
@
481.196 128.149 mo
481.567 129.386 li
481.691 128.149 li
cp
@
481.196 128.149 mo
481.567 129.386 li
481.691 128.149 li
f
488.866 149.425 mo
488.866 147.103 485.487 145.22 481.32 145.22 cv
477.153 145.22 473.774 147.103 473.774 149.425 cv
473.774 151.748 477.153 153.631 481.32 153.631 cv
485.487 153.631 488.866 151.748 488.866 149.425 cv
@
488.866 149.425 mo
488.866 147.103 485.487 145.22 481.32 145.22 cv
477.153 145.22 473.774 147.103 473.774 149.425 cv
473.774 151.748 477.153 153.631 481.32 153.631 cv
485.487 153.631 488.866 151.748 488.866 149.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
475.787 147.842 mo
(ConstMultiplier)
[1.15509 .865906 .865906 .673645 .481445 1.53955 .865906 .481445 .481445 .481445 .865875 .481445 
.481445 .76889 0 ]xsh
478.619 149.821 mo
(work=8)
[1.25034 .865906 .57666 .865906 .976715 0 ]xsh
478.066 151.8 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
481.691 140.766 mo
481.691 141.88 481.567 142.993 481.567 143.983 cv
@
481.32 143.983 mo
481.567 145.22 li
481.938 143.983 li
cp
@
481.32 143.983 mo
481.567 145.22 li
481.938 143.983 li
f
490.226 163.775 mo
490.226 160.7 485.796 158.208 480.33 158.208 cv
474.865 158.208 470.434 160.7 470.434 163.775 cv
470.434 166.849 474.865 169.341 480.33 169.341 cv
485.796 169.341 490.226 166.849 490.226 163.775 cv
@
490.226 163.775 mo
490.226 160.7 485.796 158.208 480.33 158.208 cv
474.865 158.208 470.434 160.7 470.434 163.775 cv
470.434 166.849 474.865 169.341 480.33 169.341 cv
485.796 169.341 490.226 166.849 490.226 163.775 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
475.81 161.202 mo
(Accumulator)
[1.25034 .76889 .76889 .865906 1.34735 .865875 .481445 .76889 .481445 .865906 0 ]xsh
477.197 163.181 mo
(work=14)
[1.25034 .865906 .57666 .865906 .976715 .865906 0 ]xsh
477.077 165.16 mo
(I/O: 1->1)
[.576691 .481415 1.25034 .481445 .432953 .865906 .57666 .976746 0 ]xsh
472.971 167.14 mo
(*** STATEFUL ***)
[.865906 .865906 .865875 .432953 .962891 1.05811 1.25034 1.05814 1.05811 .962891 1.25034 1.05811 
.432953 .865906 .865875 0 ]xsh
481.073 153.631 mo
480.949 154.621 480.949 155.734 480.825 156.847 cv
@
480.578 156.847 mo
480.701 158.084 li
481.073 156.847 li
cp
@
480.578 156.847 mo
480.701 158.084 li
481.073 156.847 li
f
474.269 168.228 mo
472.29 169.465 470.311 170.331 468.579 170.454 cv
418.851 174.537 329.54 178.124 293.543 179.608 cv
@
293.791 179.237 mo
292.554 179.608 li
293.791 179.856 li
cp
@
293.791 179.237 mo
292.554 179.608 li
293.791 179.856 li
f
180.605 197.174 mo
166.875 205.338 126.054 229.707 113.065 237.5 cv
@
113.189 237.005 mo
112.323 237.995 li
113.56 237.624 li
cp
@
113.189 237.005 mo
112.323 237.995 li
113.56 237.624 li
f
115.786 261.745 mo
115.786 260.515 112.74 259.518 108.983 259.518 cv
105.226 259.518 102.179 260.515 102.179 261.745 cv
102.179 262.975 105.226 263.972 108.983 263.972 cv
112.74 263.972 115.786 262.975 115.786 261.745 cv
@
115.786 261.745 mo
115.786 260.515 112.74 259.518 108.983 259.518 cv
105.226 259.518 102.179 260.515 102.179 261.745 cv
102.179 262.975 105.226 263.972 108.983 263.972 cv
112.74 263.972 115.786 262.975 115.786 261.745 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
103.476 262.141 mo
(roundrobin\(1,1\))
[.576675 .865898 .865906 .865898 .865898 .576675 .865898 .865906 .481438 .865898 .576675 .865906 
.432945 .865898 0 ]xsh
108.983 255.065 mo
108.983 256.179 108.983 257.292 108.983 258.405 cv
@
108.736 258.281 mo
108.983 259.518 li
109.354 258.281 li
cp
@
108.736 258.281 mo
108.983 259.518 li
109.354 258.281 li
f
106.014 271.146 mo
106.014 269.917 102.525 268.92 98.2211 268.92 cv
93.9171 268.92 90.428 269.917 90.428 271.146 cv
90.428 272.376 93.9171 273.373 98.2211 273.373 cv
102.525 273.373 106.014 272.376 106.014 271.146 cv
@
106.014 271.146 mo
106.014 269.917 102.525 268.92 98.2211 268.92 cv
93.9171 268.92 90.428 269.917 90.428 271.146 cv
90.428 272.376 93.9171 273.373 98.2211 273.373 cv
102.525 273.373 106.014 272.376 106.014 271.146 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
91.6317 271.542 mo
(roundrobin\(1,18,1\))
[.576675 .865898 .865906 .865898 .865898 .576675 .865898 .865906 .481438 .865898 .576675 .865906 
.432945 .865898 .865906 .432945 .865906 0 ]xsh
106.633 263.848 mo
105.025 265.085 103.169 266.817 101.561 268.301 cv
@
101.437 268.054 mo
100.695 269.043 li
101.808 268.425 li
cp
@
101.437 268.054 mo
100.695 269.043 li
101.808 268.425 li
f
125.559 282.032 mo
125.559 279.709 123.067 277.826 119.992 277.826 cv
116.918 277.826 114.426 279.709 114.426 282.032 cv
114.426 284.355 116.918 286.238 119.992 286.238 cv
123.067 286.238 125.559 284.355 125.559 282.032 cv
@
125.559 282.032 mo
125.559 279.709 123.067 277.826 119.992 277.826 cv
116.918 277.826 114.426 279.709 114.426 282.032 cv
114.426 284.355 116.918 286.238 119.992 286.238 cv
123.067 286.238 125.559 284.355 125.559 282.032 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
116.48 280.448 mo
(FloatVoid)
[.962883 .481438 .865898 .768898 .481438 1.25034 .865898 .481438 0 ]xsh
116.858 282.427 mo
(work=60)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
116.738 284.406 mo
(I/O: 1->0)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
112.075 263.724 mo
112.57 264.095 112.941 264.59 113.189 264.961 cv
114.797 267.93 116.776 273.002 118.137 276.713 cv
@
117.889 276.96 mo
118.632 277.95 li
118.508 276.713 li
cp
@
117.889 276.96 mo
118.632 277.95 li
118.508 276.713 li
f
116.529 358.231 mo
116.529 357.001 113.483 356.004 109.725 356.004 cv
105.968 356.004 102.922 357.001 102.922 358.231 cv
102.922 359.461 105.968 360.458 109.725 360.458 cv
113.483 360.458 116.529 359.461 116.529 358.231 cv
@
116.529 358.231 mo
116.529 357.001 113.483 356.004 109.725 356.004 cv
105.968 356.004 102.922 357.001 102.922 358.231 cv
102.922 359.461 105.968 360.458 109.725 360.458 cv
113.483 360.458 116.529 359.461 116.529 358.231 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
104.218 358.627 mo
(roundrobin\(1,0\))
[.576675 .865898 .865906 .865898 .865898 .576675 .865898 .865906 .481438 .865898 .576675 .865906 
.432945 .865898 0 ]xsh
122.219 370.601 mo
122.219 367.527 116.625 365.034 109.725 365.034 cv
102.825 365.034 97.2315 367.527 97.2315 370.601 cv
97.2315 373.675 102.825 376.167 109.725 376.167 cv
116.625 376.167 122.219 373.675 122.219 370.601 cv
@
122.219 370.601 mo
122.219 367.527 116.625 365.034 109.725 365.034 cv
102.825 365.034 97.2315 367.527 97.2315 370.601 cv
97.2315 373.675 102.825 376.167 109.725 376.167 cv
116.625 376.167 122.219 373.675 122.219 370.601 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
106.503 368.028 mo
(InvDelay)
[.576675 .865898 .865906 1.25033 .768898 .481438 .76889 0 ]xsh
107.024 370.007 mo
(work=9)
[1.25034 .865898 .576675 .865898 .97673 0 ]xsh
106.471 371.986 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481445 .432945 .865898 .576675 .97673 0 ]xsh
99.7196 373.966 mo
(*** PEEKS 13 AHEAD ***)
[.865898 .865898 .865906 .432945 .962883 1.05812 1.05811 1.25034 .962875 .432953 .865898 .865898 
.432953 1.25034 1.25033 1.05812 1.25034 1.25033 .432953 .865898 .865898 0 ]xsh
109.725 360.458 mo
109.725 361.323 109.725 362.437 109.725 363.55 cv
@
109.478 363.674 mo
109.725 364.911 li
110.096 363.674 li
cp
@
109.478 363.674 mo
109.725 364.911 li
110.096 363.674 li
f
85.1089 282.032 mo
85.1089 279.709 82.7274 277.826 79.7898 277.826 cv
76.8521 277.826 74.4707 279.709 74.4707 282.032 cv
74.4707 284.355 76.8521 286.238 79.7898 286.238 cv
82.7274 286.238 85.1089 284.355 85.1089 282.032 cv
@
85.1089 282.032 mo
85.1089 279.709 82.7274 277.826 79.7898 277.826 cv
76.8521 277.826 74.4707 279.709 74.4707 282.032 cv
74.4707 284.355 76.8521 286.238 79.7898 286.238 cv
82.7274 286.238 85.1089 284.355 85.1089 282.032 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
77.096 280.448 mo
(Identity)
[.576675 .865898 .768898 .865898 .481438 .481445 .481438 0 ]xsh
77.089 282.427 mo
(work=6)
[1.25034 .865898 .576675 .865898 .97673 0 ]xsh
76.5357 284.406 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481445 .432945 .865898 .576675 .97673 0 ]xsh
94.5101 273.125 mo
91.7887 274.61 88.2014 276.465 85.8511 277.826 cv
85.48 278.073 84.9852 278.321 84.4904 278.692 cv
@
84.6141 278.197 mo
83.7482 279.187 li
84.9852 278.816 li
cp
@
84.6141 278.197 mo
83.7482 279.187 li
84.9852 278.816 li
f
98.4685 282.032 mo
98.4685 279.709 95.9762 277.826 92.902 277.826 cv
89.8277 277.826 87.3355 279.709 87.3355 282.032 cv
87.3355 284.355 89.8277 286.238 92.902 286.238 cv
95.9762 286.238 98.4685 284.355 98.4685 282.032 cv
@
98.4685 282.032 mo
98.4685 279.709 95.9762 277.826 92.902 277.826 cv
89.8277 277.826 87.3355 279.709 87.3355 282.032 cv
87.3355 284.355 89.8277 286.238 92.902 286.238 cv
95.9762 286.238 98.4685 284.355 98.4685 282.032 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
90.0645 280.448 mo
(Doubler)
[1.25034 .865898 .865898 .865898 .481445 .76889 0 ]xsh
89.3354 282.427 mo
(work=252)
[1.25034 .865898 .576675 .865898 .97673 .865898 .865898 0 ]xsh
89.648 284.406 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
97.1078 273.373 mo
96.613 274.486 95.8708 275.971 95.1286 277.331 cv
@
95.0049 276.836 mo
94.7575 278.073 li
95.6234 277.084 li
cp
@
95.0049 276.836 mo
94.7575 278.073 li
95.6234 277.084 li
f
111.333 282.032 mo
111.333 279.709 108.952 277.826 106.014 277.826 cv
103.077 277.826 100.695 279.709 100.695 282.032 cv
100.695 284.355 103.077 286.238 106.014 286.238 cv
108.952 286.238 111.333 284.355 111.333 282.032 cv
@
111.333 282.032 mo
111.333 279.709 108.952 277.826 106.014 277.826 cv
103.077 277.826 100.695 279.709 100.695 282.032 cv
100.695 284.355 103.077 286.238 106.014 286.238 cv
108.952 286.238 111.333 284.355 111.333 282.032 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
103.32 280.448 mo
(Identity)
[.576675 .865898 .768898 .865898 .481438 .481445 .481438 0 ]xsh
103.313 282.427 mo
(work=6)
[1.25034 .865898 .576675 .865898 .97673 0 ]xsh
102.76 284.406 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481445 .432945 .865898 .576675 .97673 0 ]xsh
99.8292 273.373 mo
100.571 274.61 101.685 275.971 102.674 277.331 cv
@
102.427 277.455 mo
103.416 278.321 li
102.922 277.084 li
cp
@
102.427 277.455 mo
103.416 278.321 li
102.922 277.084 li
f
100.819 292.917 mo
100.819 291.688 97.3297 290.691 93.0257 290.691 cv
88.7217 290.691 85.2326 291.688 85.2326 292.917 cv
85.2326 294.147 88.7217 295.144 93.0257 295.144 cv
97.3297 295.144 100.819 294.147 100.819 292.917 cv
@
100.819 292.917 mo
100.819 291.688 97.3297 290.691 93.0257 290.691 cv
88.7217 290.691 85.2326 291.688 85.2326 292.917 cv
85.2326 294.147 88.7217 295.144 93.0257 295.144 cv
97.3297 295.144 100.819 294.147 100.819 292.917 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
86.4363 293.313 mo
(roundrobin\(1,18,1\))
[.576675 .865898 .865906 .865898 .865898 .576675 .865906 .865898 .481438 .865898 .576683 .865898 
.432945 .865906 .865898 .432945 .865906 0 ]xsh
99.8292 301.824 mo
99.8292 300.594 96.7831 299.597 93.0257 299.597 cv
89.2682 299.597 86.2222 300.594 86.2222 301.824 cv
86.2222 303.053 89.2682 304.05 93.0257 304.05 cv
96.7831 304.05 99.8292 303.053 99.8292 301.824 cv
@
99.8292 301.824 mo
99.8292 300.594 96.7831 299.597 93.0257 299.597 cv
89.2682 299.597 86.2222 300.594 86.2222 301.824 cv
86.2222 303.053 89.2682 304.05 93.0257 304.05 cv
96.7831 304.05 99.8292 303.053 99.8292 301.824 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
87.5186 302.22 mo
(roundrobin\(1,1\))
[.576675 .865898 .865906 .865898 .865898 .576675 .865898 .865906 .481438 .865898 .576675 .865906 
.432945 .865898 0 ]xsh
93.0257 295.144 mo
93.0257 296.134 93.0257 297.247 93.0257 298.36 cv
@
92.7783 298.36 mo
93.0257 299.597 li
93.3968 298.36 li
cp
@
92.7783 298.36 mo
93.0257 299.597 li
93.3968 298.36 li
f
83.5008 285.124 mo
85.3563 286.732 87.7066 288.588 89.5621 290.072 cv
@
89.3147 290.196 mo
90.428 290.815 li
89.6858 289.825 li
cp
@
89.3147 290.196 mo
90.428 290.815 li
89.6858 289.825 li
f
92.902 286.238 mo
92.902 287.351 93.0257 288.464 93.0257 289.578 cv
@
92.7783 289.454 mo
93.0257 290.691 li
93.3968 289.454 li
cp
@
92.7783 289.454 mo
93.0257 290.691 li
93.3968 289.454 li
f
102.303 285.124 mo
100.448 286.732 98.2211 288.588 96.3656 290.072 cv
@
96.2419 289.825 mo
95.4997 290.815 li
96.613 290.196 li
cp
@
96.2419 289.825 mo
95.4997 290.815 li
96.613 290.196 li
f
97.6026 312.709 mo
97.6026 310.387 95.055 308.504 91.9124 308.504 cv
88.7698 308.504 86.2222 310.387 86.2222 312.709 cv
86.2222 315.032 88.7698 316.915 91.9124 316.915 cv
95.055 316.915 97.6026 315.032 97.6026 312.709 cv
@
97.6026 312.709 mo
97.6026 310.387 95.055 308.504 91.9124 308.504 cv
88.7698 308.504 86.2222 310.387 86.2222 312.709 cv
86.2222 315.032 88.7698 316.915 91.9124 316.915 cv
95.055 316.915 97.6026 315.032 97.6026 312.709 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
89.7485 311.126 mo
(Adder)
[1.25034 .865898 .865898 .768898 0 ]xsh
88.7787 313.105 mo
(work=73)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
88.2254 315.084 mo
(I/O: 10->1)
[.576675 .481438 1.25034 .481438 .432953 .865898 .865906 .576675 .976723 0 ]xsh
92.7783 304.05 mo
92.6546 305.04 92.5309 306.401 92.4072 307.638 cv
@
92.1598 307.267 mo
92.2835 308.504 li
92.7783 307.267 li
cp
@
92.1598 307.267 mo
92.2835 308.504 li
92.7783 307.267 li
f
111.21 312.709 mo
111.21 310.387 108.662 308.504 105.519 308.504 cv
102.377 308.504 99.8292 310.387 99.8292 312.709 cv
99.8292 315.032 102.377 316.915 105.519 316.915 cv
108.662 316.915 111.21 315.032 111.21 312.709 cv
@
111.21 312.709 mo
111.21 310.387 108.662 308.504 105.519 308.504 cv
102.377 308.504 99.8292 310.387 99.8292 312.709 cv
99.8292 315.032 102.377 316.915 105.519 316.915 cv
108.662 316.915 111.21 315.032 111.21 312.709 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
103.356 311.126 mo
(Adder)
[1.25034 .865898 .865898 .768898 0 ]xsh
102.386 313.105 mo
(work=73)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
101.833 315.084 mo
(I/O: 10->1)
[.576675 .481438 1.25034 .481445 .432945 .865898 .865906 .576675 .976723 0 ]xsh
95.376 303.927 mo
96.9841 305.287 98.9633 307.019 100.819 308.627 cv
@
100.695 308.875 mo
101.808 309.493 li
101.066 308.504 li
cp
@
100.695 308.875 mo
101.808 309.493 li
101.066 308.504 li
f
111.21 323.595 mo
111.21 322.365 108.164 321.368 104.406 321.368 cv
100.649 321.368 97.6026 322.365 97.6026 323.595 cv
97.6026 324.825 100.649 325.822 104.406 325.822 cv
108.164 325.822 111.21 324.825 111.21 323.595 cv
@
111.21 323.595 mo
111.21 322.365 108.164 321.368 104.406 321.368 cv
100.649 321.368 97.6026 322.365 97.6026 323.595 cv
97.6026 324.825 100.649 325.822 104.406 325.822 cv
108.164 325.822 111.21 324.825 111.21 323.595 cv
1 gry
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
98.899 323.991 mo
(roundrobin\(1,1\))
[.576675 .865898 .865906 .865898 .865898 .576675 .865898 .865906 .481438 .865898 .576675 .865906 
.432945 .865898 0 ]xsh
110.22 334.481 mo
110.22 332.158 107.672 330.275 104.53 330.275 cv
101.387 330.275 98.8396 332.158 98.8396 334.481 cv
98.8396 336.803 101.387 338.686 104.53 338.686 cv
107.672 338.686 110.22 336.803 110.22 334.481 cv
@
110.22 334.481 mo
110.22 332.158 107.672 330.275 104.53 330.275 cv
101.387 330.275 98.8396 332.158 98.8396 334.481 cv
98.8396 336.803 101.387 338.686 104.53 338.686 cv
107.672 338.686 110.22 336.803 110.22 334.481 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
100.922 332.897 mo
(Subtractor)
[.962883 .865898 .865898 .481438 .576683 .76889 .76889 .481445 .865898 0 ]xsh
101.396 334.876 mo
(work=14)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
101.275 336.855 mo
(I/O: 2->1)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
104.406 325.822 mo
104.406 326.688 104.53 327.925 104.53 329.038 cv
@
104.282 329.038 mo
104.53 330.275 li
104.901 329.038 li
cp
@
104.282 329.038 mo
104.53 330.275 li
104.901 329.038 li
f
95.6234 315.926 mo
97.4789 317.534 99.4581 319.266 101.19 320.75 cv
@
100.942 320.874 mo
102.056 321.492 li
101.314 320.503 li
cp
@
100.942 320.874 mo
102.056 321.492 li
101.314 320.503 li
f
105.148 316.915 mo
105.025 318.029 104.901 319.142 104.777 320.255 cv
@
104.53 320.131 mo
104.653 321.368 li
105.148 320.131 li
cp
@
104.53 320.131 mo
104.653 321.368 li
105.148 320.131 li
f
112.199 347.345 mo
112.199 345.023 108.821 343.14 104.653 343.14 cv
100.486 343.14 97.1078 345.023 97.1078 347.345 cv
97.1078 349.668 100.486 351.551 104.653 351.551 cv
108.821 351.551 112.199 349.668 112.199 347.345 cv
@
112.199 347.345 mo
112.199 345.023 108.821 343.14 104.653 343.14 cv
100.486 343.14 97.1078 345.023 97.1078 347.345 cv
97.1078 349.668 100.486 351.551 104.653 351.551 cv
108.821 351.551 112.199 349.668 112.199 347.345 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
99.1205 345.762 mo
(ConstMultiplier)
[1.1551 .865898 .865898 .67366 .481438 1.53956 .865898 .481445 .481438 .481438 .865906 .481438 
.481438 .76889 0 ]xsh
101.953 347.741 mo
(work=8)
[1.25034 .865898 .576675 .865898 .97673 0 ]xsh
101.399 349.72 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481445 .432945 .865898 .576675 .97673 0 ]xsh
104.53 338.686 mo
104.53 339.676 104.653 340.789 104.653 341.903 cv
@
104.406 341.903 mo
104.653 343.14 li
105.025 341.903 li
cp
@
104.406 341.903 mo
104.653 343.14 li
105.025 341.903 li
f
106.509 351.427 mo
107.127 352.541 107.622 353.778 108.117 354.891 cv
@
107.87 355.015 mo
108.612 356.004 li
108.364 354.767 li
cp
@
107.87 355.015 mo
108.612 356.004 li
108.364 354.767 li
f
119.25 286.238 mo
118.384 290.691 117.271 297.618 117.271 301.824 cv
117.271 301.824 117.271 301.824 117.271 334.481 cv
117.271 340.542 117.023 346.851 115.168 352.541 cv
114.921 353.407 114.178 354.396 113.312 355.262 cv
@
113.065 355.015 mo
112.447 356.128 li
113.56 355.51 li
cp
@
113.065 355.015 mo
112.447 356.128 li
113.56 355.51 li
f
116.405 384.95 mo
116.405 382.627 113.414 380.744 109.725 380.744 cv
106.036 380.744 103.045 382.627 103.045 384.95 cv
103.045 387.273 106.036 389.156 109.725 389.156 cv
113.414 389.156 116.405 387.273 116.405 384.95 cv
@
116.405 384.95 mo
116.405 382.627 113.414 380.744 109.725 380.744 cv
106.036 380.744 103.045 382.627 103.045 384.95 cv
103.045 387.273 106.036 389.156 109.725 389.156 cv
113.414 389.156 116.405 387.273 116.405 384.95 cv
.271 .467 .702 rgb
f
0 gry
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
105.107 383.367 mo
(FloatToShort)
[.962883 .481438 .865898 .768898 .481438 1.05811 .865906 .962875 .865898 .865906 .576675 0 
]xsh
106.592 385.346 mo
(work=12)
[1.25034 .865898 .576675 .865898 .97673 .865898 0 ]xsh
106.472 387.325 mo
(I/O: 1->1)
[.576675 .481438 1.25034 .481445 .432945 .865898 .576675 .97673 0 ]xsh
109.725 376.291 mo
109.725 377.404 109.725 378.518 109.725 379.507 cv
@
109.478 379.507 mo
109.725 380.744 li
110.096 379.507 li
cp
@
109.478 379.507 mo
109.725 380.744 li
110.096 379.507 li
f
115.415 397.815 mo
115.415 395.492 112.868 393.609 109.725 393.609 cv
106.583 393.609 104.035 395.492 104.035 397.815 cv
104.035 400.138 106.583 402.021 109.725 402.021 cv
112.868 402.021 115.415 400.138 115.415 397.815 cv
@
115.415 397.815 mo
115.415 395.492 112.868 393.609 109.725 393.609 cv
106.583 393.609 104.035 395.492 104.035 397.815 cv
104.035 400.138 106.583 402.021 109.725 402.021 cv
112.868 402.021 115.415 400.138 115.415 397.815 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDTA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/W <1C60D8A8C9B5D6EF221D1F535C4E993C98F3C3E8C6F16C822BD2743EB782
1EB7D4579AED89E03CEC92EC38206B161850892F887AD5C7930EF4023F5FCBE1
1EE2208AD3E1BD1F677AACB74B3CC3710F142D0BA108A85A0E4D5D852306CED1
4B5207F2E46DF8D6DC78FEF21F895C03164E67E0D168BBFB54CA35ABBA9BABB6
1C9F3A4AAD762B0057729986D9DB719BDE2CE08FDB5B50F7244A0094B314415C
47AAC538D3C6C8E1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDTA+TimesNewRomanPSMT /Encoding get
dup 87 /W put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDTA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 
/greater 2{/.notdef}rp /A /B /C /D /E /F 
/.notdef /H /I /.notdef /K /L /M /.notdef 
/O /P /.notdef /R /S /T /U /V 
/W 9{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/w /.notdef /y 134{/.notdef}rp]
LTFDTA+TimesNewRomanPSMT nf
LTFDTA+TimesNewRomanPSMT*1 [1.7318 0 0 -1.7318 0 0 ]msf
106.118 396.232 mo
(FileWriter)
[.962883 .481438 .481438 .768898 1.63479 .576675 .481445 .481438 .76889 0 ]xsh
107.025 398.211 mo
(work=0)
[1.25034 .865898 .576675 .865898 .97673 0 ]xsh
106.471 400.19 mo
(I/O: 1->0)
[.576675 .481438 1.25034 .481438 .432953 .865898 .576683 .976723 0 ]xsh
109.725 389.156 mo
109.725 390.146 109.725 391.259 109.725 392.372 cv
@
109.478 392.372 mo
109.725 393.609 li
110.096 392.372 li
cp
@
109.478 392.372 mo
109.725 393.609 li
110.096 392.372 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/LTFDTA+TimesNewRomanPSMT*1 uf
/LTFDTA+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
