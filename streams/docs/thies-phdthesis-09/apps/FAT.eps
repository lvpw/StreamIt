%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FAT.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:07:54 PM
%%BoundingBox: 0 0 431 721
%%HiResBoundingBox: 0 0 431 721
%%CropBox: 0 0 431 721
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -721 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 721 li
431 721 li
431 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 722 mo
467 722 li
467 0 li
35 0 li
cp
clp
.225 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
37.8 719.2 mo
464.85 719.2 li
464.85 2.79999 li
37.8 2.79999 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 70 /F put
dup 84 /T put
dup 95 /underscore put
dup 101 /e put
dup 115 /s put
dup 116 /t put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/A <1C60D8A8C9B6079F005CDFC8A94B75FD7D89F5577E741BA5E9223B5FB59E
3315C336CDEC6F323D18A178B38DCEDA9B451B37165385283368F94E5EC5086C
A620D2549B18425DA74331F96252E5D5358EE44D33B708D9B8822975F755BF6A
D18C81AA5BF9B47D39D0AFBBC3A6521D0B18D90963534584D1092363898607EF
C07B44A235786C96> |-
/F <1C60D8A8C9B7EF322B10A2A8DE6CF647A07CB452C54BD470E6C4C389B7AB
8653B88FE6E4626649FABCEAB5DAD30BD9C2A2F1F8512C1A1DC93BDB928A3688
B193ECEDB997255AB4DCBBC4BBB3FF147299B3653B9E76139CB6E91A13A47208
F2688B5C42863D22FFBF8FD8DF09F08A1966F6652461EEB3D18F0F0CB5B8E18D
6016409AA3D413D5FA051FCF9B4DFF0734259E7DCF> |-
/T <1C60D8A8C9B7D8BE16B2E353E3300378A32828826C127DE3D6A3769F5542
8119DC48F4B555CFAC557278838F3EC6C5F7B64F6B44DFEFCBC8AF8174185170
E165701BB15CF1CB88629A978EF6D86FB8> |-
/underscore <1C60D8A8C9B7A73DCDBEB64DA5D4EE31FFCBE2EC06B4C4F1354
CB100A813> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDRB+TimesNewRomanPSMT*1 
[65{/.notdef}rp /A 4{/.notdef}rp /F 13{/.notdef}rp /T 10{/.notdef}rp /underscore 
5{/.notdef}rp /e 13{/.notdef}rp /s /t 139{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
39.2747 5.31992 mo
(FAT_test)
[1.7514 2.27425 1.92463 1.575 .875698 1.39855 1.22533 0 ]xsh
41.4 703 mo
461.25 703 li
461.25 18.1 li
41.4 18.1 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
42.9249 20.6199 mo
(FAT)
[1.7514 2.27425 0 ]xsh
45 637.3 mo
457.65 637.3 li
457.65 23.4999 li
45 23.4999 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/B <1C60D8A8C9B64EDFF4D0475F24A0512970A16CFF6BFBD1A1A12D07A62723
BF27DBD01B60ACEC3C9DB4E627348B4F9C96D245E2397B81856FE7B9149C0D88
A0B1C89901A357B578317FC0F49D1050D95CF70B7F7A7C5741B1B644F20C16DB
8F1BD7E6C45546C9302E6AD757CA73E92696A658F8A903A2E6B5FA3BE24637C3
3393411FB0E113E4BDFEBF11B4E90F57471B306273B2241C3C23457DA84CC16B
22781151F6DE159B155116967F7D53FA1DDDDF14084F0631BA1C08300F50E5BA
9DC336D8349BEA3371DCAFDF658781D6> |-
/W <1C60D8A8C9B5D6EF221D1F535C4E993C98F3C3E8C6F16C822BD2743EB782
1EB7D4579AED89E03CEC92EC38206B161850892F887AD5C7930EF4023F5FCBE1
1EE2208AD3E1BD1F677AACB74B3CC3710F142D0BA108A85A0E4D5D852306CED1
4B5207F2E46DF8D6DC78FEF21F895C03164E67E0D168BBFB54CA35ABBA9BABB6
1C9F3A4AAD762B0057729986D9DB719BDE2CE08FDB5B50F7244A0094B314415C
47AAC538D3C6C8E1> |-
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 66 /B put
dup 87 /W put
dup 97 /a put
dup 100 /d put
dup 105 /i put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[65{/.notdef}rp /A /B 3{/.notdef}rp /F 13{/.notdef}rp /T 2{/.notdef}rp 
/W 7{/.notdef}rp /underscore /.notdef /a 2{/.notdef}rp /d /e 
3{/.notdef}rp /i 4{/.notdef}rp /n 4{/.notdef}rp /s /t 139{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
46.5888 26.0199 mo
(WideBand)
[2.97355 .875698 1.575 1.39856 2.10102 1.39855 1.575 0 ]xsh
48.6 622.9 mo
159.075 622.9 li
159.075 38.8 li
48.6 38.8 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7EF322B10A2A8DE6EF0A6CE60E86B1DF5C68015667A2338DB
07BCF91C9D8DCCB5967A656E7EB6651B3E305A306DA1BB8C1BAEECFC60DC00D8
8AEC56E3DF7455D57CB9BB0CC9A32704D4F0F1C39C5B2EDC70F42754CACE7253
FF5FDAE4B675FFF987E22613E24B8956EFA9C2C5B9AC406D966F459601B2046A
C9E54A3BB37C45EDEB> |-
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 80 /P put
dup 99 /c put
dup 111 /o put
dup 114 /r put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[65{/.notdef}rp /A /B 3{/.notdef}rp /F 9{/.notdef}rp /P 3{/.notdef}rp 
/T 2{/.notdef}rp /W 7{/.notdef}rp /underscore /.notdef /a /.notdef 
/c /d /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o 
2{/.notdef}rp /r /s /t 139{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
50.0382 41.3199 mo
(BandProc)
[2.10102 1.39855 1.575 1.575 1.7514 1.04893 1.575 0 ]xsh
128.025 140.5 mo
151.425 140.5 li
151.425 44.2 li
128.025 44.2 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B7EF320E2EFDBCAC7BC76D0C8C1FC222AFE4F464C56D04CD48
5F140DB725EC46F068943283C9A43A14A852E22E87331165F602FD95AC890BE8
83DAD7F63C31168B480A95AC244C28C8F37F118A399681DB4822661628FBDA87
D99D0367C013E32688035EC31A5C3FC194FEB20C4FCD84A9EB3547C0D5A421A0
1B87DFDA871D7919B7251A9EC84A645CA15425845057F189EC65A90DD4028CC5
B10853B05E6F7AF9E84AC6588CDCE11B6EF766B248A8304E38964E579F6EF2DC
2D4971ED042868564E8E982FE2B2> |-
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 83 /S put
dup 98 /b put
dup 108 /l put
dup 117 /u put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[65{/.notdef}rp /A /B 3{/.notdef}rp /F 9{/.notdef}rp /P 2{/.notdef}rp 
/S /T 2{/.notdef}rp /W 7{/.notdef}rp /underscore /.notdef /a 
/b /c /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /o 2{/.notdef}rp /r /s /t /u 
3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
129.512 46.7199 mo
(SubAnalysis)
[1.7514 1.575 1.575 2.27426 1.575 1.39854 .875702 1.575 1.22533 .875702 0 ]xsh
52.2 523.9 mo
155.475 523.9 li
155.475 157.6 li
52.2 157.6 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
/five <1C60D8A8C9B7A73DB9D92E2C498F1C8C272174C48D3E3EA8F27C6E6BA
93064621D133D030C551A42025686691A783FB90A2D496BEF06790AC79A6878D
99BC23CD14D9CFD812148CC847ABD0CF7E73A1A9D5ACE6E2E3BBFD4DD> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 52 /four put
dup 53 /five put
dup 107 /k put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[52{/.notdef}rp /four /five 11{/.notdef}rp /A /B 3{/.notdef}rp /F 
9{/.notdef}rp /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W 7{/.notdef}rp 
/underscore /.notdef /a /b /c /d /e 3{/.notdef}rp 
/i /.notdef /k /l /.notdef /n /o 2{/.notdef}rp 
/r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
53.6124 160.12 mo
(Block45)
[2.10102 .875702 1.575 1.39856 1.575 1.575 0 ]xsh
55.8 507.7 mo
124.65 507.7 li
124.65 173.8 li
55.8 173.8 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B7D8BE1621F7F8DAEB9FA9CBAFC8F4F4D756F2191C830A0E4A
58F87E3DDE67D49AF36DDF5F1FB2D74CAA0A1A0C249C8C349E149A4722F92BF7
61EFA3C2F9EC864F14F3A3AC121B867A3642166A4B07211381D27468A1D61050
1454C0DD1325D701AB4ADD917E16E61514B3C2631A525AEC590FB4C52AA73BF6
506DADDCC92C07368DF00A34F77E6ED1C2061C6913B4C24C30A64720E240E09F
9DD8F5EF76F17E9EEAE569D41B7D8D946B46BFFC> |-
/p <1C60D8A8C9B7A73D9AFACE39AE6BAA6E09D7322029CE296F526808097535
692942DF193E08360A1A27EB6A08251F7D53D3FA96D22918185F2823E13833F6
44411211FB9E60C91D24768368C1EE71DFEA1AF8285D596D61CE8A067C14BC2E
E1974A4DF14D782DBEDB8D2CE5673BB9634CC4945A7FA5A5E1B87E0F2D94F438
C21548DAE429B68406206429A87E1B462DA7A9D2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 69 /E put
dup 112 /p put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[52{/.notdef}rp /four /five 11{/.notdef}rp /A /B 2{/.notdef}rp /E 
/F 9{/.notdef}rp /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W 
7{/.notdef}rp /underscore /.notdef /a /b /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /.notdef /n /o 
/p /.notdef /r /s /t /u 3{/.notdef}rp /y 
134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
57.2245 176.32 mo
(ElPipe)
[1.92463 .875702 1.7514 .875702 1.575 0 ]xsh
86.85 237.7 mo
110.25 237.7 li
110.25 190 li
86.85 190 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B64EDFB39C8FA0E3107D39E1E26D40368A6A59D36B799EDDCB
A8AF8BCAEA2E296C5BB00979C4073082C4AC62DAAE27F25BE45DFF121DF075F7
3D37111C10DFF7C6BD4BFE8AE73B4FADB84F0E8B5722DEA1CA14F5AFDC440B45
4F635F5576E82C8F45782F1EDE0EC9CA59D48E4C0F81> |-
/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C86
82F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CB
A64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762
A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A
9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61F
B9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 67 /C put
dup 109 /m put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[52{/.notdef}rp /four /five 11{/.notdef}rp /A /B /C /.notdef 
/E /F 9{/.notdef}rp /P 2{/.notdef}rp /S /T 2{/.notdef}rp 
/W 7{/.notdef}rp /underscore /.notdef /a /b /c /d 
/e 3{/.notdef}rp /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u 3{/.notdef}rp 
/y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
88.4737 192.52 mo
(PulseCmp)
[1.7514 1.575 .875694 1.22533 1.39856 2.10102 2.4507 0 ]xsh
59.4 491.5 mo
121.05 491.5 li
121.05 239.5 li
59.4 239.5 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F62AF7EE2124AC712AE5D5419E262A0C00C6163DFBCB2
A6FA65DDDD5062250DB8BBFB46EB35827750F9FCEE696526B20FE9266474B179
350945BBDAF7180FAB04D619EB38198FC722361E0B3B5E50F9017F19C7BDCABB
285F506A04FE32C63936689B1F9C81923B03440D57336303C59B59E8D3C0659D
33> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 68 /D put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[52{/.notdef}rp /four /five 11{/.notdef}rp /A /B /C /D 
/E /F 9{/.notdef}rp /P 2{/.notdef}rp /S /T 2{/.notdef}rp 
/W 7{/.notdef}rp /underscore /.notdef /a /b /c /d 
/e 3{/.notdef}rp /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u 3{/.notdef}rp 
/y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
61.0237 242.02 mo
(DopFilt)
[2.27425 1.575 1.575 1.7514 .875694 .875702 0 ]xsh
63 475.3 mo
117.45 475.3 li
117.45 255.7 li
63 255.7 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/V <1C60D8A8C9B6079F005CDC6370483696E1EAFC944BD4E06D86DBD18EB735
2F45C381C0DF5B906978D128771DD089E21DCCBC0592B3A6BE45DFF941B3D9AF
82C0E5BBEE832081C600F8D424981C94A7921155A8C74A96B13AD2AF06E82571
B4060A57A3D45E0E99876FCE9C38AE3E4A7F8C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 86 /V put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[52{/.notdef}rp /four /five 11{/.notdef}rp /A /B /C /D 
/E /F 9{/.notdef}rp /P 2{/.notdef}rp /S /T /.notdef 
/V /W 7{/.notdef}rp /underscore /.notdef /a /b /c 
/d /e 3{/.notdef}rp /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
64.5127 258.22 mo
(FFTVect)
[1.7514 1.7514 1.92462 2.27425 1.39855 1.39856 0 ]xsh
66.6 444.7 mo
113.85 444.7 li
113.85 287.2 li
66.6 287.2 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73DB9E68392B0D8A76464A51F2E94D7CC8D0C2C4EA9
EB677CBC38A50658519E8BF18CD893FCF8B1BA3E22E132B8EDB4B7CD483A2AC4
23E82DF2F3816B8AE8EA5F180D3F5DFF2BF284FCE4CE5C4E107DDB61A9BE179C
50061EE6040417B0DF341D85D92A63653C2A28BA649E4CD9966C4B081E30F323
54693AC79886604480856D93C0D7CC0DE6962663CC1F198BBFA4> |-
/K <1C60D8A8C9B6079F62AF7EE261D2819ED7974217E7034289FA7C1BABF100
C6A5480EF2F67F33525B9F0C3A7EBEA8703E8C35FFE54D3010A9809D5E12442C
409B269A7D4346FFD3D0C882E0638FE5876FB72290B12BADDE73C28ABC60097D
5F47A0B45D92F7FD41DF8475D961E4F5A95EF6558D45744A11DE71603FC94A1B
038775E2BC960C01D2B930F2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 51 /three put
dup 75 /K put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[51{/.notdef}rp /three /four /five 11{/.notdef}rp /A /B /C 
/D /E /F 4{/.notdef}rp /K 4{/.notdef}rp /P 2{/.notdef}rp 
/S /T /.notdef /V /W 7{/.notdef}rp /underscore /.notdef 
/a /b /c /d /e 3{/.notdef}rp /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
68.0383 289.72 mo
(FFTKernel3)
[1.7514 1.7514 1.92462 2.27425 1.39855 1.04893 1.575 1.39855 .875702 0 ]xsh
70.2 442.9 mo
110.25 442.9 li
110.25 292.6 li
70.2 292.6 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
71.8131 295.12 mo
(AnonFilter_a4)
[2.27425 1.575 1.575 1.575 1.7514 .875702 .875702 .875702 1.39855 1.04893 1.575 1.39855 
0 ]xsh
73.8 361.9 mo
106.65 361.9 li
106.65 298 li
73.8 298 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/R <1C60D8A8C9B64EDFF4D0475F241567109AA60E358A72CDD6748BBE527383
3D9930EA16405C9FA084F4E606B7DF07A2CCABEF78658BA281F5D25760E71232
16C34541C223BEC48612BD7C0052F7AD27E210716125E9B30EDB889188D65976
1E4423BF9E66EB5CCCE83D82A2DB04554982E2E899847CA739A4B92152682375
567D18A66EABD5068029F8FB7424BADB87039D0F6B1530> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 82 /R put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[51{/.notdef}rp /three /four /five 11{/.notdef}rp /A /B /C 
/D /E /F 4{/.notdef}rp /K 4{/.notdef}rp /P /.notdef 
/R /S /T /.notdef /V /W 7{/.notdef}rp /underscore 
/.notdef /a /b /c /d /e 3{/.notdef}rp /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
75.2383 300.52 mo
(FFTReorder)
[1.7514 1.7514 1.92462 2.10103 1.39855 1.575 1.04893 1.575 1.39855 0 ]xsh
128.025 621.1 mo
151.425 621.1 li
151.425 541 li
128.025 541 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/h <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA64197CEECB76B9E4
D2E9F717E2E21BA6AFBDB9D486017DE1334EE2B8AC7E25B49C380829180892EE
A76E25D726C9DCA303C64F5FE456E4A565D8D0ED565D009BA02A6DD13A835659
5990FC1760FC10BB02F96DEC2D5390B1C4D4059132A392595F028220DA07D2CD
E701448700C9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 104 /h put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[51{/.notdef}rp /three /four /five 11{/.notdef}rp /A /B /C 
/D /E /F 4{/.notdef}rp /K 4{/.notdef}rp /P /.notdef 
/R /S /T /.notdef /V /W 7{/.notdef}rp /underscore 
/.notdef /a /b /c /d /e 2{/.notdef}rp /h 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
129.548 543.52 mo
(SubSynth)
[1.7514 1.575 1.575 1.7514 1.575 1.575 .875702 0 ]xsh
146.925 622.9 mo
257.4 622.9 li
257.4 38.8 li
146.925 38.8 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
148.363 41.3199 mo
(BandProc)
[2.10103 1.39854 1.57501 1.575 1.75139 1.04893 1.575 0 ]xsh
228.375 140.5 mo
251.775 140.5 li
251.775 44.2 li
228.375 44.2 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
229.862 46.7199 mo
(SubAnalysis)
[1.7514 1.575 1.575 2.27426 1.575 1.39854 .875702 1.575 1.22533 .875702 0 ]xsh
150.525 523.9 mo
253.8 523.9 li
253.8 157.6 li
150.525 157.6 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
151.937 160.12 mo
(Block45)
[2.10103 .875702 1.575 1.39854 1.57501 1.575 0 ]xsh
154.125 507.7 mo
222.975 507.7 li
222.975 173.8 li
154.125 173.8 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
155.55 176.32 mo
(ElPipe)
[1.92462 .875702 1.7514 .875702 1.575 0 ]xsh
185.175 237.7 mo
208.575 237.7 li
208.575 190 li
185.175 190 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
186.799 192.52 mo
(PulseCmp)
[1.7514 1.575 .875702 1.22533 1.39854 2.10103 2.4507 0 ]xsh
157.725 491.5 mo
219.375 491.5 li
219.375 239.5 li
157.725 239.5 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
159.349 242.02 mo
(DopFilt)
[2.27425 1.57501 1.575 1.7514 .875687 .875702 0 ]xsh
161.325 475.3 mo
215.775 475.3 li
215.775 255.7 li
161.325 255.7 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
162.838 258.22 mo
(FFTVect)
[1.7514 1.75139 1.92464 2.27425 1.39856 1.39854 0 ]xsh
164.925 444.7 mo
212.175 444.7 li
212.175 287.2 li
164.925 287.2 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
166.363 289.72 mo
(FFTKernel3)
[1.7514 1.75139 1.92464 2.27425 1.39856 1.04892 1.575 1.39856 .875702 0 ]xsh
168.525 442.9 mo
208.575 442.9 li
208.575 292.6 li
168.525 292.6 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
170.138 295.12 mo
(AnonFilter_a4)
[2.27425 1.57501 1.575 1.575 1.7514 .875702 .875687 .875702 1.39856 1.04892 1.57501 1.39854 
0 ]xsh
172.125 361.9 mo
204.975 361.9 li
204.975 298 li
172.125 298 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
173.563 300.52 mo
(FFTReorder)
[1.7514 1.75139 1.92464 2.10103 1.39854 1.575 1.04893 1.575 1.39856 0 ]xsh
228.375 621.1 mo
251.775 621.1 li
251.775 541 li
228.375 541 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
229.898 543.52 mo
(SubSynth)
[1.7514 1.575 1.575 1.7514 1.575 1.575 .875702 0 ]xsh
245.25 622.9 mo
355.725 622.9 li
355.725 38.8 li
245.25 38.8 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
246.688 41.3199 mo
(BandProc)
[2.10103 1.39854 1.57501 1.575 1.75139 1.04893 1.57501 0 ]xsh
263.475 140.5 mo
286.875 140.5 li
286.875 44.2 li
263.475 44.2 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
264.962 46.7199 mo
(SubAnalysis)
[1.7514 1.57498 1.57501 2.27426 1.57498 1.39856 .875702 1.57501 1.22531 .875702 0 ]xsh
248.85 523.9 mo
352.125 523.9 li
352.125 157.6 li
248.85 157.6 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
250.262 160.12 mo
(Block45)
[2.10103 .875702 1.575 1.39856 1.57498 1.57501 0 ]xsh
252.45 507.7 mo
321.3 507.7 li
321.3 173.8 li
252.45 173.8 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
253.875 176.32 mo
(ElPipe)
[1.92462 .875702 1.7514 .875702 1.57498 0 ]xsh
275.175 237.7 mo
298.575 237.7 li
298.575 190 li
275.175 190 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
276.799 192.52 mo
(PulseCmp)
[1.7514 1.57498 .875702 1.22534 1.39856 2.10101 2.45071 0 ]xsh
256.05 491.5 mo
317.7 491.5 li
317.7 239.5 li
256.05 239.5 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
257.674 242.02 mo
(DopFilt)
[2.27426 1.57498 1.57501 1.7514 .875702 .875702 0 ]xsh
259.65 475.3 mo
314.1 475.3 li
314.1 255.7 li
259.65 255.7 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
261.163 258.22 mo
(FFTVect)
[1.7514 1.7514 1.92462 2.27426 1.39853 1.39856 0 ]xsh
263.25 444.7 mo
310.5 444.7 li
310.5 287.2 li
263.25 287.2 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
264.688 289.72 mo
(FFTKernel3)
[1.7514 1.7514 1.92462 2.27426 1.39853 1.04895 1.57498 1.39856 .875702 0 ]xsh
266.85 442.9 mo
306.9 442.9 li
306.9 292.6 li
266.85 292.6 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
268.463 295.12 mo
(AnonFilter_a4)
[2.27426 1.57498 1.57501 1.57501 1.75137 .875702 .875702 .875702 1.39856 1.04892 1.57501 1.39853 
0 ]xsh
270.45 361.9 mo
303.3 361.9 li
303.3 298 li
270.45 298 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
271.888 300.52 mo
(FFTReorder)
[1.7514 1.7514 1.92462 2.10101 1.39856 1.57501 1.04892 1.57498 1.39856 0 ]xsh
263.475 621.1 mo
286.875 621.1 li
286.875 541 li
263.475 541 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
264.998 543.52 mo
(SubSynth)
[1.7514 1.57498 1.57501 1.7514 1.57498 1.57501 .875702 0 ]xsh
343.575 622.9 mo
454.05 622.9 li
454.05 38.8 li
343.575 38.8 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
345.013 41.3199 mo
(BandProc)
[2.10101 1.39856 1.57501 1.57498 1.7514 1.04892 1.57501 0 ]xsh
361.8 140.5 mo
385.2 140.5 li
385.2 44.2 li
361.8 44.2 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
363.287 46.7199 mo
(SubAnalysis)
[1.7514 1.57498 1.57501 2.27426 1.57498 1.39856 .875702 1.57501 1.22531 .875702 0 ]xsh
347.175 523.9 mo
450.45 523.9 li
450.45 157.6 li
347.175 157.6 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
348.587 160.12 mo
(Block45)
[2.10101 .875702 1.57501 1.39856 1.57498 1.57501 0 ]xsh
350.775 507.7 mo
419.625 507.7 li
419.625 173.8 li
350.775 173.8 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
352.2 176.32 mo
(ElPipe)
[1.92462 .875702 1.7514 .875702 1.57498 0 ]xsh
373.5 237.7 mo
396.9 237.7 li
396.9 190 li
373.5 190 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
375.124 192.52 mo
(PulseCmp)
[1.7514 1.57498 .875702 1.22534 1.39856 2.10101 2.45071 0 ]xsh
354.375 491.5 mo
416.025 491.5 li
416.025 239.5 li
354.375 239.5 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
355.999 242.02 mo
(DopFilt)
[2.27426 1.57498 1.57501 1.7514 .875702 .875702 0 ]xsh
357.975 475.3 mo
412.425 475.3 li
412.425 255.7 li
357.975 255.7 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
359.488 258.22 mo
(FFTVect)
[1.7514 1.7514 1.92462 2.27426 1.39853 1.39856 0 ]xsh
361.575 444.7 mo
408.825 444.7 li
408.825 287.2 li
361.575 287.2 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
363.013 289.72 mo
(FFTKernel3)
[1.7514 1.7514 1.92462 2.27426 1.39853 1.04895 1.57498 1.39856 .875702 0 ]xsh
365.175 442.9 mo
405.225 442.9 li
405.225 292.6 li
365.175 292.6 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
366.788 295.12 mo
(AnonFilter_a4)
[2.27426 1.57498 1.57501 1.57498 1.7514 .875702 .875702 .875702 1.39856 1.04892 1.57501 1.39856 
0 ]xsh
368.775 361.9 mo
401.625 361.9 li
401.625 298 li
368.775 298 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
370.213 300.52 mo
(FFTReorder)
[1.7514 1.7514 1.92462 2.10101 1.39856 1.57501 1.04892 1.57498 1.39856 0 ]xsh
361.8 621.1 mo
385.2 621.1 li
385.2 541 li
361.8 541 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
363.323 543.52 mo
(SubSynth)
[1.7514 1.57498 1.57501 1.7514 1.57498 1.57501 .875702 0 ]xsh
243 686.8 mo
272.25 686.8 li
272.25 639.1 li
243 639.1 li
cp
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
244.511 641.62 mo
(CFAR)
[2.10103 1.7514 2.27425 0 ]xsh
265.95 12.2499 mo
265.95 10.0129 262.223 8.19995 257.625 8.19995 cv
253.027 8.19995 249.3 10.0129 249.3 12.2499 cv
249.3 14.487 253.027 16.3 257.625 16.3 cv
262.223 16.3 265.95 14.487 265.95 12.2499 cv
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 73 /I put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[51{/.notdef}rp /three /four /five 11{/.notdef}rp /A /B /C 
/D /E /F 2{/.notdef}rp /I /.notdef /K 4{/.notdef}rp 
/P /.notdef /R /S /T /.notdef /V /W 
7{/.notdef}rp /underscore /.notdef /a /b /c /d /e 
2{/.notdef}rp /h /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u 3{/.notdef}rp 
/y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
251.501 12.9699 mo
(IntSource)
[1.04892 1.57501 .875702 1.7514 1.57498 1.57501 1.04892 1.39856 0 ]xsh
265.725 32.95 mo
265.725 30.713 262.098 28.9 257.625 28.9 cv
253.152 28.9 249.525 30.713 249.525 32.95 cv
249.525 35.187 253.152 36.9999 257.625 36.9999 cv
262.098 36.9999 265.725 35.187 265.725 32.95 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
251.851 33.6699 mo
(duplicate)
[1.575 1.575 1.575 .875702 .875702 1.39856 1.39856 .875702 0 ]xsh
257.625 16.3 mo
257.625 19.225 257.625 23.4999 257.625 26.8749 cv
@
257.175 26.65 mo
257.625 28.9 li
258.3 26.65 li
cp
@
257.175 26.65 mo
257.625 28.9 li
258.3 26.65 li
f
149.625 53.65 mo
149.625 51.413 145.193 49.6 139.725 49.6 cv
134.257 49.6 129.825 51.413 129.825 53.65 cv
129.825 55.887 134.257 57.7 139.725 57.7 cv
145.193 57.7 149.625 55.887 149.625 53.65 cv
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
/g <1C60D8A8C9B7A73D85D7E997B7B5DF7D7777AF52CC5562CB6E990E974840
46648599A1D9C4DB63B2EA37B7BBC0C3039255635B40FAB067F562720BFA98A6
8AA5F28640EAE52B9FE1BA9F5F2A49A2F977CAB7D5C25E3626BAA2BEB9E431EA
60B6FFDB96CDFE0161651CB3C7DDAAF79341AA1B63131C7BD07B3EF7C547B329
2DEEC810138CCDC2FA69E1A2AD41097A54F4DBBBA72B1810538F2F0FBA5B3B54
046B0BB798F435A12098BB54904B4FA0166943538B1D7B8EA5970358CDBCC48E
31C506A3AAB0AC2519075E7791339AF09F8C1F93B0D81A9E5ED3B02D4C03B817
17F61566CDC855CB444B31FBC8E71F4A79E39CF6ED7B9B21E0269B8614410251
F072B930BD3C2C0B5BE3125CE4461E97B369DD7B68AF48B8706DE7D2976BB7A8
F7FA6E1A10F519A6E8E51022609E6B7A2E822DDCD222A999CAA520FD83CCB934
D41B4EF6E07BE85DFA424019E44CA0D51152EDBDE920B3C59D4A719415BD84E9
F231F0CBEF222AB9855B090598B4D01FCC8283B4EC699D2D8EDA681DF37E56EB
75FAFC019A1A3645CA60183B64A594CD3556BA6088F7C2AF3F05FDD0875B0187
C18BC8AC2785F74D85EFAA74EA4D56B1D0576FD461BA0B37199C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 48 /zero put
dup 50 /two put
dup 103 /g put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[48{/.notdef}rp /zero /.notdef /two /three /four /five 11{/.notdef}rp 
/A /B /C /D /E /F 2{/.notdef}rp /I 
/.notdef /K 4{/.notdef}rp /P /.notdef /R /S /T 
/.notdef /V /W 7{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /.notdef /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
132.111 54.3699 mo
(FormChg20)
[1.7514 1.575 1.04892 2.4507 2.10103 1.575 1.57501 1.575 0 ]xsh
249.975 34.3 mo
229.5 37.9 173.7 47.575 150.3 51.85 cv
@
150.975 51.175 mo
148.95 52.075 li
151.2 52.3 li
cp
@
150.975 51.175 mo
148.95 52.075 li
151.2 52.3 li
f
249.975 53.65 mo
249.975 51.413 245.543 49.6 240.075 49.6 cv
234.607 49.6 230.175 51.413 230.175 53.65 cv
230.175 55.887 234.607 57.7 240.075 57.7 cv
245.543 57.7 249.975 55.887 249.975 53.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
232.461 54.3699 mo
(FormChg20)
[1.7514 1.575 1.04892 2.4507 2.10103 1.575 1.57501 1.575 0 ]xsh
254.475 36.775 mo
251.775 39.925 247.725 44.65 244.575 48.2499 cv
@
244.35 47.8 mo
243.225 49.825 li
245.025 48.475 li
cp
@
244.35 47.8 mo
243.225 49.825 li
245.025 48.475 li
f
285.075 53.65 mo
285.075 51.413 280.643 49.6 275.175 49.6 cv
269.707 49.6 265.275 51.413 265.275 53.65 cv
265.275 55.887 269.707 57.7 275.175 57.7 cv
280.643 57.7 285.075 55.887 285.075 53.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
267.561 54.3699 mo
(FormChg20)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
260.775 36.775 mo
263.475 39.925 267.525 44.65 270.675 48.2499 cv
@
270.225 48.475 mo
272.025 49.825 li
270.9 47.8 li
cp
@
270.225 48.475 mo
272.025 49.825 li
270.9 47.8 li
f
383.4 53.65 mo
383.4 51.413 378.968 49.6 373.5 49.6 cv
368.032 49.6 363.6 51.413 363.6 53.65 cv
363.6 55.887 368.032 57.7 373.5 57.7 cv
378.968 57.7 383.4 55.887 383.4 53.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
365.886 54.3699 mo
(FormChg20)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
265.275 34.3 mo
285.3 37.9 338.85 47.35 362.475 51.6249 cv
@
362.25 52.075 mo
364.5 52.075 li
362.475 50.95 li
cp
@
362.25 52.075 mo
364.5 52.075 li
362.475 50.95 li
f
263.925 697.15 mo
263.925 694.913 261.104 693.1 257.625 693.1 cv
254.146 693.1 251.325 694.913 251.325 697.15 cv
251.325 699.387 254.146 701.2 257.625 701.2 cv
261.104 701.2 263.925 699.387 263.925 697.15 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
253.514 697.87 mo
(Target)
[1.92462 1.39856 1.04892 1.57501 1.39856 0 ]xsh
264.6 713.35 mo
264.6 711.113 261.477 709.3 257.625 709.3 cv
253.773 709.3 250.65 711.113 250.65 713.35 cv
250.65 715.587 253.773 717.4 257.625 717.4 cv
261.477 717.4 264.6 715.587 264.6 713.35 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
252.987 714.07 mo
(Print3d)
[1.7514 1.04892 .875702 1.57501 .875702 1.57498 0 ]xsh
257.625 701.2 mo
257.625 703 257.625 705.025 257.625 707.05 cv
@
257.175 707.05 mo
257.625 709.3 li
258.3 707.05 li
cp
@
257.175 707.05 mo
257.625 709.3 li
258.3 707.05 li
f
273.375 631.45 mo
273.375 629.213 266.323 627.4 257.625 627.4 cv
248.927 627.4 241.875 629.213 241.875 631.45 cv
241.875 633.687 248.927 635.5 257.625 635.5 cv
266.323 635.5 273.375 633.687 273.375 631.45 cv
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 49 /one put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 3{/.notdef}rp 
/zero /one /two /three /four /five 11{/.notdef}rp /A 
/B /C /D /E /F 2{/.notdef}rp /I /.notdef 
/K 4{/.notdef}rp /P /.notdef /R /S /T /.notdef 
/V /W 7{/.notdef}rp /underscore /.notdef /a /b /c 
/d /e /.notdef /g /h /i /.notdef /k 
/l /m /n /o /p /.notdef /r /s 
/t /u 3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
244.064 632.17 mo
(roundrobin\(1, 1, 1, 1\))
[1.04892 1.57501 1.575 1.575 1.575 1.04893 1.575 1.575 .875702 1.57501 1.04892 1.57498 
.787506 .787506 1.57501 .787476 .787506 1.57501 .787506 .787476 1.57501 0 ]xsh
267.525 648.55 mo
267.525 646.313 263.093 644.5 257.625 644.5 cv
252.157 644.5 247.725 646.313 247.725 648.55 cv
247.725 650.787 252.157 652.6 257.625 652.6 cv
263.093 652.6 267.525 650.787 267.525 648.55 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
250.011 649.27 mo
(FormChg20)
[1.7514 1.575 1.04892 2.45071 2.10101 1.57501 1.57498 1.57501 0 ]xsh
257.625 635.5 mo
257.625 637.525 257.625 640 257.625 642.25 cv
@
257.175 642.25 mo
257.625 644.5 li
258.3 642.25 li
cp
@
257.175 642.25 mo
257.625 644.5 li
258.3 642.25 li
f
267.75 664.75 mo
267.75 662.513 263.217 660.7 257.625 660.7 cv
252.033 660.7 247.5 662.513 247.5 664.75 cv
247.5 666.987 252.033 668.8 257.625 668.8 cv
263.217 668.8 267.75 666.987 267.75 664.75 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
249.75 665.47 mo
(CFAR_Vect)
[2.10103 1.75139 2.27426 2.10101 1.57501 2.27426 1.39853 1.39856 0 ]xsh
257.625 652.6 mo
257.625 654.4 257.625 656.425 257.625 658.45 cv
@
257.175 658.45 mo
257.625 660.7 li
258.3 658.45 li
cp
@
257.175 658.45 mo
257.625 660.7 li
258.3 658.45 li
f
270.45 680.95 mo
270.45 678.713 264.708 676.9 257.625 676.9 cv
250.542 676.9 244.8 678.713 244.8 680.95 cv
244.8 683.187 250.542 685 257.625 685 cv
264.708 685 270.45 683.187 270.45 680.95 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
247.125 681.67 mo
(FormChg21Real)
[1.7514 1.575 1.04892 2.4507 2.10104 1.57498 1.57501 1.57498 1.57501 2.10101 1.39856 1.39856 
0 ]xsh
257.625 685 mo
257.625 686.8 257.625 688.825 257.625 690.85 cv
@
257.175 690.85 mo
257.625 693.1 li
258.3 690.85 li
cp
@
257.175 690.85 mo
257.625 693.1 li
258.3 690.85 li
f
149.625 134.65 mo
149.625 132.413 145.193 130.6 139.725 130.6 cv
134.257 130.6 129.825 132.413 129.825 134.65 cv
129.825 136.887 134.257 138.7 139.725 138.7 cv
145.193 138.7 149.625 136.887 149.625 134.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
132.111 135.37 mo
(FormChg21)
[1.7514 1.575 1.04892 2.4507 2.10103 1.575 1.57501 1.575 0 ]xsh
146.925 150.85 mo
146.925 148.613 142.795 146.8 137.7 146.8 cv
132.605 146.8 128.475 148.613 128.475 150.85 cv
128.475 153.087 132.605 154.9 137.7 154.9 cv
142.795 154.9 146.925 153.087 146.925 150.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
130.614 151.57 mo
(AdapBeam)
[2.27425 1.57501 1.39854 1.575 2.10103 1.39856 1.39854 0 ]xsh
139.275 138.7 mo
139.05 140.5 138.825 142.75 138.375 144.55 cv
@
137.925 144.55 mo
138.15 146.8 li
138.825 144.55 li
cp
@
137.925 144.55 mo
138.15 146.8 li
138.825 144.55 li
f
151.425 167.05 mo
151.425 164.813 144.373 163 135.675 163 cv
126.977 163 119.925 164.813 119.925 167.05 cv
119.925 169.287 126.977 171.1 135.675 171.1 cv
144.373 171.1 151.425 169.287 151.425 167.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
122.114 167.77 mo
(roundrobin\(1024, 32\))
[1.04893 1.575 1.575 1.575 1.575 1.04893 1.575 1.575 .875702 1.575 1.04893 1.575 
1.575 1.575 1.57501 .787491 .787506 1.575 1.575 0 ]xsh
137.25 154.9 mo
137.025 156.7 136.8 158.95 136.35 160.75 cv
@
135.9 160.75 mo
136.125 163 li
136.8 160.75 li
cp
@
135.9 160.75 mo
136.125 163 li
136.8 160.75 li
f
111.825 183.25 mo
111.825 181.013 108.501 179.2 104.4 179.2 cv
100.299 179.2 96.975 181.013 96.975 183.25 cv
96.975 185.487 100.299 187.3 104.4 187.3 cv
108.501 187.3 111.825 185.487 111.825 183.25 cv
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/G <1C60D8A8C9B6079F258D65BC2350A422AEB94BCF2D0F96794C8438625C31
5D886EF37D4AC3C2F1E1338E25B58FA7772E0B9E5E3E726371665F3474CE0B82
EB9690B23BE3168D2BE4F6B0140B5077B79CDED50A140417505C243C7D98789B
5883DC2727B8882D3854E49A79F785598024348D171E79D4C21E1DA76E252BE9
80994299353DC669631C102ABE82C3B639BE771465159436AABE7CB91BD8812B
5152BA3433FC2701117F14E8CD24269DDA8CC4248C3859> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 71 /G put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 3{/.notdef}rp 
/zero /one /two /three /four /five 11{/.notdef}rp /A 
/B /C /D /E /F /G /.notdef /I 
/.notdef /K 4{/.notdef}rp /P /.notdef /R /S /T 
/.notdef /V /W 7{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /.notdef /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
99.1506 183.97 mo
(GenCub)
[2.27425 1.39855 1.575 2.10103 1.575 0 ]xsh
123.525 169.75 mo
119.025 170.875 114.3 172.225 111.15 173.8 cv
109.8 174.475 108.675 175.825 107.775 177.175 cv
@
107.1 176.95 mo
106.425 179.2 li
108.225 177.625 li
cp
@
107.1 176.95 mo
106.425 179.2 li
108.225 177.625 li
f
153.675 199.45 mo
153.675 197.213 145.616 195.4 135.675 195.4 cv
125.734 195.4 117.675 197.213 117.675 199.45 cv
117.675 201.687 125.734 203.5 135.675 203.5 cv
145.616 203.5 153.675 201.687 153.675 199.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
119.927 200.17 mo
(streamit_library_Identity)
[1.22533 .875702 1.04892 1.39856 1.39855 2.45069 .875702 .875702 1.575 .875702 .875702 1.575 
1.04893 1.39854 1.04893 1.575 1.575 1.04892 1.57501 1.39854 1.575 .875702 .875702 .875702 
0 ]xsh
135.675 171.1 mo
135.675 176.725 135.675 186.85 135.675 193.375 cv
@
135.225 193.15 mo
135.675 195.4 li
136.35 193.15 li
cp
@
135.225 193.15 mo
135.675 195.4 li
136.35 193.15 li
f
151.425 518.05 mo
151.425 515.813 144.373 514 135.675 514 cv
126.977 514 119.925 515.813 119.925 518.05 cv
119.925 520.287 126.977 522.1 135.675 522.1 cv
144.373 522.1 151.425 520.287 151.425 518.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
122.114 518.77 mo
(roundrobin\(1024, 32\))
[1.04893 1.575 1.575 1.575 1.575 1.04893 1.575 1.575 .875702 1.575 1.04893 1.575 
1.575 1.575 1.57501 .787491 .787506 1.575 1.575 0 ]xsh
143.775 534.25 mo
143.775 532.013 141.055 530.2 137.7 530.2 cv
134.345 530.2 131.625 532.013 131.625 534.25 cv
131.625 536.487 134.345 538.3 137.7 538.3 cv
141.055 538.3 143.775 536.487 143.775 534.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
133.849 534.97 mo
(STAP)
[1.7514 1.92462 2.27425 0 ]xsh
136.125 522.1 mo
136.35 523.9 136.575 526.15 137.025 527.95 cv
@
136.575 527.95 mo
137.25 530.2 li
137.475 527.95 li
cp
@
136.575 527.95 mo
137.25 530.2 li
137.475 527.95 li
f
149.625 550.45 mo
149.625 548.213 145.193 546.4 139.725 546.4 cv
134.257 546.4 129.825 548.213 129.825 550.45 cv
129.825 552.687 134.257 554.5 139.725 554.5 cv
145.193 554.5 149.625 552.687 149.625 550.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
132.111 551.17 mo
(FormChg20)
[1.7514 1.575 1.04892 2.4507 2.10103 1.575 1.57501 1.575 0 ]xsh
138.15 538.3 mo
138.375 540.1 138.6 542.35 139.05 544.15 cv
@
138.6 544.15 mo
139.275 546.4 li
139.5 544.15 li
cp
@
138.6 544.15 mo
139.275 546.4 li
139.5 544.15 li
f
147.6 566.65 mo
147.6 564.413 144.074 562.6 139.725 562.6 cv
135.376 562.6 131.85 564.413 131.85 566.65 cv
131.85 568.887 135.376 570.7 139.725 570.7 cv
144.074 570.7 147.6 568.887 147.6 566.65 cv
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/U <1C60D8A8C9B6079F675A124E1112F68E116C07D407D6BD729F3D1467FEC9
DB1B717EDCA1CB257898FAA810DC98AD012099D6E27B9582DB9C127CF24AAE1E
5B37683D2BCD64B5A5B8A07FAB5E4A8A80CE7FE3009E0C18967F5352FF3AD65B
1392BE000C7D33B48AEC2DD2A19998C5FE8EA47D78> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 85 /U put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 3{/.notdef}rp 
/zero /one /two /three /four /five 11{/.notdef}rp /A 
/B /C /D /E /F /G /.notdef /I 
/.notdef /K 4{/.notdef}rp /P /.notdef /R /S /T 
/U /V /W 7{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /.notdef /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
134.213 567.37 mo
(UpSamp)
[2.27425 1.57501 1.75139 1.39856 2.4507 0 ]xsh
139.725 554.5 mo
139.725 556.3 139.725 558.325 139.725 560.35 cv
@
139.275 560.35 mo
139.725 562.6 li
140.4 560.35 li
cp
@
139.275 560.35 mo
139.725 562.6 li
140.4 560.35 li
f
148.05 69.85 mo
148.05 67.613 144.323 65.8 139.725 65.8 cv
135.127 65.8 131.4 67.613 131.4 69.85 cv
131.4 72.087 135.127 73.9 139.725 73.9 cv
144.323 73.9 148.05 72.087 148.05 69.85 cv
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/f <1C60D8A8C9B81F2C3AAA7F9332A1FC560AB2BC70F6F61F670AD82FC8B626
674790DAFBDF46077811E1DF38721CA7CA8FBC2C5E006E567037490710BD3A02
BCB7C7EDEC00C0FF3F7CF7FF144794FA5B0DC9D77482C00E98ABF65E83ECDA1A
E1009D> |-
/q <1C60D8A8C9B7A73DE3E34A36AF308D9ABC2F853844620EFD6CFFC4104749
3EE51F7C308065648397927D7AD6C567446138547A09DCE7C6CBE01088E3BD40
921D1BC9722A4A2AD8CAF55B6AA098CBAC7B1D2247D5938BD377626CB643F290
71771A6930DFA9EFF073665E2FEAD391B9A34CF8E9679A4514BB495B1253C227
E51E84> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 102 /f put
dup 113 /q put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 3{/.notdef}rp 
/zero /one /two /three /four /five 11{/.notdef}rp /A 
/B /C /D /E /F /G /.notdef /I 
/.notdef /K 4{/.notdef}rp /P /.notdef /R /S /T 
/U /V /W 7{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
133.775 70.5699 mo
(FreqShift)
[1.7514 1.04892 1.39856 1.575 1.7514 1.575 .875702 1.04892 0 ]xsh
139.725 57.7 mo
139.725 59.4999 139.725 61.525 139.725 63.55 cv
@
139.275 63.55 mo
139.725 65.8 li
140.4 63.55 li
cp
@
139.275 63.55 mo
139.725 65.8 li
140.4 63.55 li
f
147.6 86.05 mo
147.6 83.8129 144.074 81.9999 139.725 81.9999 cv
135.376 81.9999 131.85 83.8129 131.85 86.05 cv
131.85 88.287 135.376 90.1 139.725 90.1 cv
144.074 90.1 147.6 88.287 147.6 86.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
134.039 86.7699 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.575 1.7514 1.04892 0 ]xsh
139.725 73.9 mo
139.725 75.7 139.725 77.725 139.725 79.7499 cv
@
139.275 79.7499 mo
139.725 81.9999 li
140.4 79.7499 li
cp
@
139.275 79.7499 mo
139.725 81.9999 li
140.4 79.7499 li
f
149.4 102.25 mo
149.4 100.013 145.068 98.2 139.725 98.2 cv
134.382 98.2 130.05 100.013 130.05 102.25 cv
130.05 104.487 134.382 106.3 139.725 106.3 cv
145.068 106.3 149.4 104.487 149.4 102.25 cv
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRB+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/w <1C60D8A8C9B6079F6CBBA5F366E947F933D60DF598D919B1B7650559D736
37DABDC1EE55BCEC17305D792CEB494E24BD853631335C74FFCA113C4D914522
6940D65B0FA636B78B1332922431C88D4DDF20C0A3C1C91D0C3F0EC21F67A6EF
80D94D8DD0BC64DA8FAF76B12BBC90C7B441833497F4FAAF7AFFFE22453504D1
C6C3D3F89787D8CE910F64CD7AC81F424C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRB+TimesNewRomanPSMT /Encoding get
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRB+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 3{/.notdef}rp 
/zero /one /two /three /four /five 11{/.notdef}rp /A 
/B /C /D /E /F /G /.notdef /I 
/.notdef /K 4{/.notdef}rp /P /.notdef /R /S /T 
/U /V /W 7{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]
LTFDRB+TimesNewRomanPSMT nf
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
132.288 102.97 mo
(DownSamp)
[2.27425 1.57501 2.27425 1.575 1.7514 1.39854 2.45071 0 ]xsh
139.725 90.1 mo
139.725 91.9 139.725 93.925 139.725 95.95 cv
@
139.275 95.95 mo
139.725 98.2 li
140.4 95.95 li
cp
@
139.275 95.95 mo
139.725 98.2 li
140.4 95.95 li
f
147.6 118.45 mo
147.6 116.213 144.074 114.4 139.725 114.4 cv
135.376 114.4 131.85 116.213 131.85 118.45 cv
131.85 120.687 135.376 122.5 139.725 122.5 cv
144.074 122.5 147.6 120.687 147.6 118.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
134.039 119.17 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.575 1.7514 1.04892 0 ]xsh
139.725 106.3 mo
139.725 108.1 139.725 110.125 139.725 112.15 cv
@
139.275 112.15 mo
139.725 114.4 li
140.4 112.15 li
cp
@
139.275 112.15 mo
139.725 114.4 li
140.4 112.15 li
f
139.725 122.5 mo
139.725 124.3 139.725 126.325 139.725 128.35 cv
@
139.275 128.35 mo
139.725 130.6 li
140.4 128.35 li
cp
@
139.275 128.35 mo
139.725 130.6 li
140.4 128.35 li
f
108.45 199.45 mo
108.45 197.213 104.018 195.4 98.55 195.4 cv
93.0824 195.4 88.65 197.213 88.65 199.45 cv
88.65 201.687 93.0824 203.5 98.55 203.5 cv
104.018 203.5 108.45 201.687 108.45 199.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
90.9365 200.17 mo
(FormChg20)
[1.7514 1.575 1.04893 2.4507 2.10102 1.575 1.575 1.575 0 ]xsh
103.05 187.3 mo
102.375 189.1 101.7 191.35 100.8 193.375 cv
@
100.35 193.15 mo
100.125 195.4 li
101.475 193.375 li
cp
@
100.35 193.15 mo
100.125 195.4 li
101.475 193.375 li
f
106.425 215.65 mo
106.425 213.413 102.899 211.6 98.55 211.6 cv
94.2008 211.6 90.675 213.413 90.675 215.65 cv
90.675 217.887 94.2008 219.7 98.55 219.7 cv
102.899 219.7 106.425 217.887 106.425 215.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
92.8643 216.37 mo
(arrayFIR)
[1.39855 1.04893 1.04893 1.39855 1.575 1.7514 1.04893 0 ]xsh
98.55 203.5 mo
98.55 205.3 98.55 207.325 98.55 209.35 cv
@
98.1 209.35 mo
98.55 211.6 li
99.225 209.35 li
cp
@
98.1 209.35 mo
98.55 211.6 li
99.225 209.35 li
f
108.45 231.85 mo
108.45 229.613 104.018 227.8 98.55 227.8 cv
93.0824 227.8 88.65 229.613 88.65 231.85 cv
88.65 234.087 93.0824 235.9 98.55 235.9 cv
104.018 235.9 108.45 234.087 108.45 231.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
90.9365 232.57 mo
(FormChg21)
[1.7514 1.575 1.04893 2.4507 2.10102 1.575 1.575 1.575 0 ]xsh
103.275 248.95 mo
103.275 246.713 100.354 244.9 96.75 244.9 cv
93.1464 244.9 90.225 246.713 90.225 248.95 cv
90.225 251.187 93.1464 253 96.75 253 cv
100.354 253 103.275 251.187 103.275 248.95 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
92.5495 249.67 mo
(Chg40)
[2.10103 1.575 1.575 1.575 0 ]xsh
98.1 235.9 mo
97.875 237.925 97.65 240.4 97.425 242.65 cv
@
96.975 242.65 mo
97.2 244.9 li
97.875 242.65 li
cp
@
96.975 242.65 mo
97.2 244.9 li
97.875 242.65 li
f
105.525 265.15 mo
105.525 262.913 100.79 261.1 94.95 261.1 cv
89.1096 261.1 84.375 262.913 84.375 265.15 cv
84.375 267.387 89.1096 269.2 94.95 269.2 cv
100.79 269.2 105.525 267.387 105.525 265.15 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
86.6404 265.87 mo
(DecompVect)
[2.27425 1.39855 1.39855 1.575 2.4507 1.575 2.27425 1.39855 1.39855 0 ]xsh
96.3 253 mo
96.075 254.8 95.85 257.05 95.625 258.85 cv
@
95.175 258.85 mo
95.4 261.1 li
96.075 258.85 li
cp
@
95.175 258.85 mo
95.4 261.1 li
96.075 258.85 li
f
107.1 485.65 mo
107.1 483.413 104.179 481.6 100.575 481.6 cv
96.9714 481.6 94.05 483.413 94.05 485.65 cv
94.05 487.887 96.9714 489.7 100.575 489.7 cv
104.179 489.7 107.1 487.887 107.1 485.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
96.3745 486.37 mo
(Chg41)
[2.10103 1.575 1.575 1.575 0 ]xsh
112.275 501.85 mo
112.275 499.613 108.246 497.8 103.275 497.8 cv
98.3044 497.8 94.275 499.613 94.275 501.85 cv
94.275 504.087 98.3044 505.9 103.275 505.9 cv
108.246 505.9 112.275 504.087 112.275 501.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
96.5404 502.57 mo
(DegenTetr)
[2.27425 1.39855 1.575 1.39855 1.575 1.92463 1.39854 .875702 0 ]xsh
101.25 489.7 mo
101.475 491.5 101.925 493.75 102.15 495.55 cv
@
101.7 495.775 mo
102.6 497.8 li
102.6 495.55 li
cp
@
101.7 495.775 mo
102.6 497.8 li
102.6 495.55 li
f
107.775 505.45 mo
109.125 506.35 110.475 507.25 111.6 507.7 cv
115.2 509.5 120.375 511.75 125.1 513.775 cv
@
124.875 514.225 mo
127.125 514.675 li
125.325 513.325 li
cp
@
124.875 514.225 mo
127.125 514.675 li
125.325 513.325 li
f
98.55 219.7 mo
98.55 221.5 98.55 223.525 98.55 225.55 cv
@
98.1 225.55 mo
98.55 227.8 li
99.225 225.55 li
cp
@
98.1 225.55 mo
98.55 227.8 li
99.225 225.55 li
f
103.95 281.35 mo
103.95 279.113 98.8125 277.3 92.475 277.3 cv
86.1375 277.3 81 279.113 81 281.35 cv
81 283.587 86.1375 285.4 92.475 285.4 cv
98.8125 285.4 103.95 283.587 103.95 281.35 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
83.2881 282.07 mo
(AnonFilter_a0)
[2.27425 1.575 1.575 1.575 1.7514 .875702 .875702 .875694 1.39856 1.04892 1.575 1.39855 
0 ]xsh
94.275 269.2 mo
94.05 271 93.6 273.25 93.375 275.05 cv
@
92.925 275.05 mo
93.15 277.3 li
93.825 275.05 li
cp
@
92.925 275.05 mo
93.15 277.3 li
93.825 275.05 li
f
108.225 469.45 mo
108.225 467.213 104.196 465.4 99.225 465.4 cv
94.2544 465.4 90.225 467.213 90.225 469.45 cv
90.225 471.687 94.2544 473.5 99.225 473.5 cv
104.196 473.5 108.225 471.687 108.225 469.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
92.4006 470.17 mo
(CompVect)
[2.10103 1.575 2.4507 1.575 2.27425 1.39856 1.39854 0 ]xsh
99.675 473.5 mo
99.9 475.3 99.9 477.325 100.125 479.35 cv
@
99.675 479.35 mo
100.125 481.6 li
100.8 479.35 li
cp
@
99.675 479.35 mo
100.125 481.6 li
100.8 479.35 li
f
104.85 307.45 mo
104.85 305.213 98.3021 303.4 90.225 303.4 cv
82.1479 303.4 75.6 305.213 75.6 307.45 cv
75.6 309.687 82.1479 311.5 90.225 311.5 cv
98.3021 311.5 104.85 309.687 104.85 307.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
77.9748 308.17 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10103 1.39855 1.575 1.04892 1.575 1.39855 1.04893 1.7514 .875702 
2.4507 1.575 .875702 0 ]xsh
92.025 285.4 mo
91.8 289.675 91.35 296.425 90.9 301.375 cv
@
90.45 301.15 mo
90.675 303.4 li
91.575 301.15 li
cp
@
90.45 301.15 mo
90.675 303.4 li
91.575 301.15 li
f
104.85 323.65 mo
104.85 321.413 98.3021 319.6 90.225 319.6 cv
82.1479 319.6 75.6 321.413 75.6 323.65 cv
75.6 325.887 82.1479 327.7 90.225 327.7 cv
98.3021 327.7 104.85 325.887 104.85 323.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
77.9748 324.37 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10103 1.39855 1.575 1.04892 1.575 1.39855 1.04893 1.7514 .875702 
2.4507 1.575 .875702 0 ]xsh
90.225 311.5 mo
90.225 313.3 90.225 315.325 90.225 317.35 cv
@
89.775 317.35 mo
90.225 319.6 li
90.9 317.35 li
cp
@
89.775 317.35 mo
90.225 319.6 li
90.9 317.35 li
f
106.65 437.05 mo
106.65 434.813 101.714 433 95.625 433 cv
89.5361 433 84.6 434.813 84.6 437.05 cv
84.6 439.287 89.5361 441.1 95.625 441.1 cv
101.714 441.1 106.65 439.287 106.65 437.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
86.8743 437.77 mo
(CombineDFT)
[2.10103 1.575 2.4507 1.575 .875702 1.575 1.39855 2.27425 1.7514 0 ]xsh
108.675 453.25 mo
108.675 451.013 103.537 449.2 97.2 449.2 cv
90.8625 449.2 85.725 451.013 85.725 453.25 cv
85.725 455.487 90.8625 457.3 97.2 457.3 cv
103.537 457.3 108.675 455.487 108.675 453.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
88.0131 453.97 mo
(AnonFilter_a1)
[2.27425 1.575 1.575 1.575 1.7514 .875702 .875702 .875702 1.39855 1.04893 1.575 1.39855 
0 ]xsh
96.075 441.1 mo
96.3 442.9 96.3 444.925 96.525 446.95 cv
@
96.075 446.95 mo
96.75 449.2 li
96.975 446.95 li
cp
@
96.075 446.95 mo
96.75 449.2 li
96.975 446.95 li
f
97.65 457.3 mo
97.875 459.1 98.1 461.35 98.55 463.15 cv
@
98.1 463.15 mo
98.775 465.4 li
99 463.15 li
cp
@
98.1 463.15 mo
98.775 465.4 li
99 463.15 li
f
104.85 356.05 mo
104.85 353.813 98.3021 352 90.225 352 cv
82.1479 352 75.6 353.813 75.6 356.05 cv
75.6 358.287 82.1479 360.1 90.225 360.1 cv
98.3021 360.1 104.85 358.287 104.85 356.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
77.9748 356.77 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10103 1.39855 1.575 1.04892 1.575 1.39855 1.04893 1.7514 .875702 
2.4507 1.575 .875702 0 ]xsh
103.95 372.25 mo
103.95 370.013 99.0139 368.2 92.925 368.2 cv
86.8361 368.2 81.9 370.013 81.9 372.25 cv
81.9 374.487 86.8361 376.3 92.925 376.3 cv
99.0139 376.3 103.95 374.487 103.95 372.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
84.1743 372.97 mo
(CombineDFT)
[2.10103 1.575 2.4507 1.575 .875702 1.575 1.39855 2.27425 1.7514 0 ]xsh
90.9 360.1 mo
91.125 361.9 91.575 364.15 91.8 365.95 cv
@
91.35 366.175 mo
92.25 368.2 li
92.25 365.95 li
cp
@
91.35 366.175 mo
92.25 368.2 li
92.25 365.95 li
f
105.3 388.45 mo
105.3 386.213 100.364 384.4 94.275 384.4 cv
88.1861 384.4 83.25 386.213 83.25 388.45 cv
83.25 390.687 88.1861 392.5 94.275 392.5 cv
100.364 392.5 105.3 390.687 105.3 388.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
85.5243 389.17 mo
(CombineDFT)
[2.10103 1.575 2.4507 1.575 .875694 1.575 1.39855 2.27425 1.7514 0 ]xsh
93.375 376.3 mo
93.6 378.1 93.6 380.125 93.825 382.15 cv
@
93.375 382.15 mo
93.825 384.4 li
94.5 382.15 li
cp
@
93.375 382.15 mo
93.825 384.4 li
94.5 382.15 li
f
105.975 404.65 mo
105.975 402.413 101.039 400.6 94.95 400.6 cv
88.8611 400.6 83.925 402.413 83.925 404.65 cv
83.925 406.887 88.8611 408.7 94.95 408.7 cv
101.039 408.7 105.975 406.887 105.975 404.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
86.1993 405.37 mo
(CombineDFT)
[2.10103 1.575 2.4507 1.575 .875694 1.575 1.39855 2.27425 1.7514 0 ]xsh
94.5 392.5 mo
94.725 394.3 94.725 396.325 94.725 398.35 cv
@
94.275 398.35 mo
94.725 400.6 li
95.4 398.35 li
cp
@
94.275 398.35 mo
94.725 400.6 li
95.4 398.35 li
f
106.425 420.85 mo
106.425 418.613 101.489 416.8 95.4 416.8 cv
89.3111 416.8 84.375 418.613 84.375 420.85 cv
84.375 423.087 89.3111 424.9 95.4 424.9 cv
101.489 424.9 106.425 423.087 106.425 420.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
86.6493 421.57 mo
(CombineDFT)
[2.10103 1.575 2.4507 1.575 .875694 1.575 1.39855 2.27425 1.7514 0 ]xsh
95.175 408.7 mo
95.175 410.5 95.175 412.525 95.175 414.55 cv
@
94.725 414.55 mo
95.4 416.8 li
95.625 414.55 li
cp
@
94.725 414.55 mo
95.4 416.8 li
95.625 414.55 li
f
95.4 424.9 mo
95.625 426.7 95.625 428.725 95.625 430.75 cv
@
95.175 430.75 mo
95.625 433 li
96.3 430.75 li
cp
@
95.175 430.75 mo
95.625 433 li
96.3 430.75 li
f
104.85 339.85 mo
104.85 337.613 98.3021 335.8 90.225 335.8 cv
82.1479 335.8 75.6 337.613 75.6 339.85 cv
75.6 342.087 82.1479 343.9 90.225 343.9 cv
98.3021 343.9 104.85 342.087 104.85 339.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
77.9748 340.57 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10103 1.39855 1.575 1.04892 1.575 1.39855 1.04893 1.7514 .875702 
2.4507 1.575 .875702 0 ]xsh
90.225 327.7 mo
90.225 329.5 90.225 331.525 90.225 333.55 cv
@
89.775 333.55 mo
90.225 335.8 li
90.9 333.55 li
cp
@
89.775 333.55 mo
90.225 335.8 li
90.9 333.55 li
f
90.225 343.9 mo
90.225 345.7 90.225 347.725 90.225 349.75 cv
@
89.775 349.75 mo
90.225 352 li
90.9 349.75 li
cp
@
89.775 349.75 mo
90.225 352 li
90.9 349.75 li
f
135.675 203.5 mo
135.675 210.25 135.675 223.975 135.675 231.85 cv
135.675 231.85 135.675 231.85 135.675 485.65 cv
135.675 492.625 135.675 504.55 135.675 511.75 cv
@
135.225 511.75 mo
135.675 514 li
136.35 511.75 li
cp
@
135.225 511.75 mo
135.675 514 li
136.35 511.75 li
f
147.6 582.85 mo
147.6 580.613 144.074 578.8 139.725 578.8 cv
135.376 578.8 131.85 580.613 131.85 582.85 cv
131.85 585.087 135.376 586.9 139.725 586.9 cv
144.074 586.9 147.6 585.087 147.6 582.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
134.039 583.57 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.575 1.7514 1.04892 0 ]xsh
139.725 570.7 mo
139.725 572.5 139.725 574.525 139.725 576.55 cv
@
139.275 576.55 mo
139.725 578.8 li
140.4 576.55 li
cp
@
139.275 576.55 mo
139.725 578.8 li
140.4 576.55 li
f
148.05 599.05 mo
148.05 596.813 144.323 595 139.725 595 cv
135.127 595 131.4 596.813 131.4 599.05 cv
131.4 601.287 135.127 603.1 139.725 603.1 cv
144.323 603.1 148.05 601.287 148.05 599.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
133.775 599.77 mo
(FreqShift)
[1.7514 1.04892 1.39856 1.575 1.7514 1.575 .875702 1.04892 0 ]xsh
139.725 586.9 mo
139.725 588.7 139.725 590.725 139.725 592.75 cv
@
139.275 592.75 mo
139.725 595 li
140.4 592.75 li
cp
@
139.275 592.75 mo
139.725 595 li
140.4 592.75 li
f
149.625 615.25 mo
149.625 613.013 145.193 611.2 139.725 611.2 cv
134.257 611.2 129.825 613.013 129.825 615.25 cv
129.825 617.487 134.257 619.3 139.725 619.3 cv
145.193 619.3 149.625 617.487 149.625 615.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
132.111 615.97 mo
(FormChg21)
[1.7514 1.575 1.04892 2.4507 2.10103 1.575 1.57501 1.575 0 ]xsh
139.725 603.1 mo
139.725 604.9 139.725 606.925 139.725 608.95 cv
@
139.275 608.95 mo
139.725 611.2 li
140.4 608.95 li
cp
@
139.275 608.95 mo
139.725 611.2 li
140.4 608.95 li
f
149.175 616.6 mo
169.2 619.525 216.45 625.825 241.425 629.425 cv
@
241.425 629.875 mo
243.675 629.65 li
241.425 628.975 li
cp
@
241.425 629.875 mo
243.675 629.65 li
241.425 628.975 li
f
249.975 134.65 mo
249.975 132.413 245.543 130.6 240.075 130.6 cv
234.607 130.6 230.175 132.413 230.175 134.65 cv
230.175 136.887 234.607 138.7 240.075 138.7 cv
245.543 138.7 249.975 136.887 249.975 134.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
232.461 135.37 mo
(FormChg21)
[1.7514 1.575 1.04892 2.4507 2.10103 1.575 1.57501 1.575 0 ]xsh
245.25 150.85 mo
245.25 148.613 241.12 146.8 236.025 146.8 cv
230.93 146.8 226.8 148.613 226.8 150.85 cv
226.8 153.087 230.93 154.9 236.025 154.9 cv
241.12 154.9 245.25 153.087 245.25 150.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
228.939 151.57 mo
(AdapBeam)
[2.27425 1.57501 1.39854 1.575 2.10103 1.39856 1.39854 0 ]xsh
238.95 138.7 mo
238.5 140.5 238.05 142.75 237.375 144.775 cv
@
236.925 144.55 mo
236.925 146.8 li
238.05 144.775 li
cp
@
236.925 144.55 mo
236.925 146.8 li
238.05 144.775 li
f
249.75 167.05 mo
249.75 164.813 242.698 163 234 163 cv
225.302 163 218.25 164.813 218.25 167.05 cv
218.25 169.287 225.302 171.1 234 171.1 cv
242.698 171.1 249.75 169.287 249.75 167.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
220.439 167.77 mo
(roundrobin\(1024, 32\))
[1.04892 1.57501 1.575 1.575 1.575 1.04893 1.575 1.575 .875702 1.575 1.04893 1.575 
1.575 1.575 1.575 .787506 .787506 1.575 1.575 0 ]xsh
235.575 154.9 mo
235.35 156.7 235.125 158.95 234.675 160.75 cv
@
234.225 160.75 mo
234.45 163 li
235.125 160.75 li
cp
@
234.225 160.75 mo
234.45 163 li
235.125 160.75 li
f
210.15 183.25 mo
210.15 181.013 206.826 179.2 202.725 179.2 cv
198.624 179.2 195.3 181.013 195.3 183.25 cv
195.3 185.487 198.624 187.3 202.725 187.3 cv
206.826 187.3 210.15 185.487 210.15 183.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
197.476 183.97 mo
(GenCub)
[2.27425 1.39856 1.575 2.10103 1.575 0 ]xsh
221.85 169.75 mo
217.35 170.875 212.625 172.225 209.475 173.8 cv
208.125 174.475 207 175.825 206.1 177.175 cv
@
205.425 176.95 mo
204.75 179.2 li
206.55 177.625 li
cp
@
205.425 176.95 mo
204.75 179.2 li
206.55 177.625 li
f
252 199.45 mo
252 197.213 243.941 195.4 234 195.4 cv
224.059 195.4 216 197.213 216 199.45 cv
216 201.687 224.059 203.5 234 203.5 cv
243.941 203.5 252 201.687 252 199.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
218.252 200.17 mo
(streamit_library_Identity)
[1.22533 .875702 1.04892 1.39856 1.39854 2.4507 .875702 .875702 1.575 .875702 .875702 1.575 
1.04893 1.39854 1.04893 1.575 1.575 1.04893 1.575 1.39854 1.57501 .875687 .875702 .875702 
0 ]xsh
234 171.1 mo
234 176.725 234 186.85 234 193.375 cv
@
233.55 193.15 mo
234 195.4 li
234.675 193.15 li
cp
@
233.55 193.15 mo
234 195.4 li
234.675 193.15 li
f
249.75 518.05 mo
249.75 515.813 242.698 514 234 514 cv
225.302 514 218.25 515.813 218.25 518.05 cv
218.25 520.287 225.302 522.1 234 522.1 cv
242.698 522.1 249.75 520.287 249.75 518.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
220.439 518.77 mo
(roundrobin\(1024, 32\))
[1.04892 1.57501 1.575 1.575 1.575 1.04893 1.575 1.575 .875702 1.575 1.04893 1.575 
1.575 1.575 1.575 .787506 .787506 1.575 1.575 0 ]xsh
242.1 534.25 mo
242.1 532.013 239.38 530.2 236.025 530.2 cv
232.67 530.2 229.95 532.013 229.95 534.25 cv
229.95 536.487 232.67 538.3 236.025 538.3 cv
239.38 538.3 242.1 536.487 242.1 534.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
232.174 534.97 mo
(STAP)
[1.7514 1.92462 2.27425 0 ]xsh
234.45 522.1 mo
234.675 523.9 234.9 526.15 235.35 527.95 cv
@
234.9 527.95 mo
235.575 530.2 li
235.8 527.95 li
cp
@
234.9 527.95 mo
235.575 530.2 li
235.8 527.95 li
f
249.975 550.45 mo
249.975 548.213 245.543 546.4 240.075 546.4 cv
234.607 546.4 230.175 548.213 230.175 550.45 cv
230.175 552.687 234.607 554.5 240.075 554.5 cv
245.543 554.5 249.975 552.687 249.975 550.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
232.461 551.17 mo
(FormChg20)
[1.7514 1.575 1.04892 2.4507 2.10103 1.575 1.57501 1.575 0 ]xsh
236.925 538.3 mo
237.375 540.1 238.05 542.35 238.5 544.375 cv
@
237.825 544.375 mo
239.175 546.4 li
238.95 544.15 li
cp
@
237.825 544.375 mo
239.175 546.4 li
238.95 544.15 li
f
247.95 566.65 mo
247.95 564.413 244.424 562.6 240.075 562.6 cv
235.726 562.6 232.2 564.413 232.2 566.65 cv
232.2 568.887 235.726 570.7 240.075 570.7 cv
244.424 570.7 247.95 568.887 247.95 566.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
234.563 567.37 mo
(UpSamp)
[2.27425 1.57501 1.75139 1.39856 2.4507 0 ]xsh
240.075 554.5 mo
240.075 556.3 240.075 558.325 240.075 560.35 cv
@
239.625 560.35 mo
240.075 562.6 li
240.75 560.35 li
cp
@
239.625 560.35 mo
240.075 562.6 li
240.75 560.35 li
f
248.4 69.85 mo
248.4 67.613 244.673 65.8 240.075 65.8 cv
235.477 65.8 231.75 67.613 231.75 69.85 cv
231.75 72.087 235.477 73.9 240.075 73.9 cv
244.673 73.9 248.4 72.087 248.4 69.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
234.125 70.5699 mo
(FreqShift)
[1.7514 1.04892 1.39856 1.575 1.7514 1.575 .875702 1.04892 0 ]xsh
240.075 57.7 mo
240.075 59.4999 240.075 61.525 240.075 63.55 cv
@
239.625 63.55 mo
240.075 65.8 li
240.75 63.55 li
cp
@
239.625 63.55 mo
240.075 65.8 li
240.75 63.55 li
f
247.95 86.05 mo
247.95 83.8129 244.424 81.9999 240.075 81.9999 cv
235.726 81.9999 232.2 83.8129 232.2 86.05 cv
232.2 88.287 235.726 90.1 240.075 90.1 cv
244.424 90.1 247.95 88.287 247.95 86.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
234.389 86.7699 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.575 1.7514 1.04892 0 ]xsh
240.075 73.9 mo
240.075 75.7 240.075 77.725 240.075 79.7499 cv
@
239.625 79.7499 mo
240.075 81.9999 li
240.75 79.7499 li
cp
@
239.625 79.7499 mo
240.075 81.9999 li
240.75 79.7499 li
f
249.75 102.25 mo
249.75 100.013 245.418 98.2 240.075 98.2 cv
234.732 98.2 230.4 100.013 230.4 102.25 cv
230.4 104.487 234.732 106.3 240.075 106.3 cv
245.418 106.3 249.75 104.487 249.75 102.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
232.638 102.97 mo
(DownSamp)
[2.27425 1.57501 2.27425 1.575 1.7514 1.39854 2.45071 0 ]xsh
240.075 90.1 mo
240.075 91.9 240.075 93.925 240.075 95.95 cv
@
239.625 95.95 mo
240.075 98.2 li
240.75 95.95 li
cp
@
239.625 95.95 mo
240.075 98.2 li
240.75 95.95 li
f
247.95 118.45 mo
247.95 116.213 244.424 114.4 240.075 114.4 cv
235.726 114.4 232.2 116.213 232.2 118.45 cv
232.2 120.687 235.726 122.5 240.075 122.5 cv
244.424 122.5 247.95 120.687 247.95 118.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
234.389 119.17 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.575 1.7514 1.04892 0 ]xsh
240.075 106.3 mo
240.075 108.1 240.075 110.125 240.075 112.15 cv
@
239.625 112.15 mo
240.075 114.4 li
240.75 112.15 li
cp
@
239.625 112.15 mo
240.075 114.4 li
240.75 112.15 li
f
240.075 122.5 mo
240.075 124.3 240.075 126.325 240.075 128.35 cv
@
239.625 128.35 mo
240.075 130.6 li
240.75 128.35 li
cp
@
239.625 128.35 mo
240.075 130.6 li
240.75 128.35 li
f
206.775 199.45 mo
206.775 197.213 202.343 195.4 196.875 195.4 cv
191.407 195.4 186.975 197.213 186.975 199.45 cv
186.975 201.687 191.407 203.5 196.875 203.5 cv
202.343 203.5 206.775 201.687 206.775 199.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
189.261 200.17 mo
(FormChg20)
[1.7514 1.575 1.04892 2.4507 2.10103 1.575 1.57501 1.575 0 ]xsh
201.375 187.3 mo
200.7 189.1 200.025 191.35 199.125 193.375 cv
@
198.675 193.15 mo
198.45 195.4 li
199.8 193.375 li
cp
@
198.675 193.15 mo
198.45 195.4 li
199.8 193.375 li
f
204.75 215.65 mo
204.75 213.413 201.224 211.6 196.875 211.6 cv
192.526 211.6 189 213.413 189 215.65 cv
189 217.887 192.526 219.7 196.875 219.7 cv
201.224 219.7 204.75 217.887 204.75 215.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
191.189 216.37 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.575 1.7514 1.04892 0 ]xsh
196.875 203.5 mo
196.875 205.3 196.875 207.325 196.875 209.35 cv
@
196.425 209.35 mo
196.875 211.6 li
197.55 209.35 li
cp
@
196.425 209.35 mo
196.875 211.6 li
197.55 209.35 li
f
206.775 231.85 mo
206.775 229.613 202.343 227.8 196.875 227.8 cv
191.407 227.8 186.975 229.613 186.975 231.85 cv
186.975 234.087 191.407 235.9 196.875 235.9 cv
202.343 235.9 206.775 234.087 206.775 231.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
189.261 232.57 mo
(FormChg21)
[1.7514 1.575 1.04892 2.4507 2.10103 1.575 1.57501 1.575 0 ]xsh
201.6 248.95 mo
201.6 246.713 198.679 244.9 195.075 244.9 cv
191.471 244.9 188.55 246.713 188.55 248.95 cv
188.55 251.187 191.471 253 195.075 253 cv
198.679 253 201.6 251.187 201.6 248.95 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
190.874 249.67 mo
(Chg40)
[2.10103 1.575 1.575 1.575 0 ]xsh
196.425 235.9 mo
196.2 237.925 195.975 240.4 195.75 242.65 cv
@
195.3 242.65 mo
195.525 244.9 li
196.2 242.65 li
cp
@
195.3 242.65 mo
195.525 244.9 li
196.2 242.65 li
f
203.85 265.15 mo
203.85 262.913 199.115 261.1 193.275 261.1 cv
187.435 261.1 182.7 262.913 182.7 265.15 cv
182.7 267.387 187.435 269.2 193.275 269.2 cv
199.115 269.2 203.85 267.387 203.85 265.15 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
184.965 265.87 mo
(DecompVect)
[2.27425 1.39856 1.39854 1.57501 2.4507 1.575 2.27425 1.39856 1.39854 0 ]xsh
194.625 253 mo
194.4 254.8 194.175 257.05 193.95 258.85 cv
@
193.5 258.85 mo
193.725 261.1 li
194.4 258.85 li
cp
@
193.5 258.85 mo
193.725 261.1 li
194.4 258.85 li
f
205.425 485.65 mo
205.425 483.413 202.504 481.6 198.9 481.6 cv
195.296 481.6 192.375 483.413 192.375 485.65 cv
192.375 487.887 195.296 489.7 198.9 489.7 cv
202.504 489.7 205.425 487.887 205.425 485.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
194.699 486.37 mo
(Chg41)
[2.10103 1.575 1.575 1.575 0 ]xsh
210.6 501.85 mo
210.6 499.613 206.571 497.8 201.6 497.8 cv
196.629 497.8 192.6 499.613 192.6 501.85 cv
192.6 504.087 196.629 505.9 201.6 505.9 cv
206.571 505.9 210.6 504.087 210.6 501.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
194.865 502.57 mo
(DegenTetr)
[2.27425 1.39856 1.575 1.39856 1.575 1.92462 1.39856 .875702 0 ]xsh
199.575 489.7 mo
199.8 491.5 200.25 493.75 200.475 495.55 cv
@
200.025 495.775 mo
200.925 497.8 li
200.925 495.55 li
cp
@
200.025 495.775 mo
200.925 497.8 li
200.925 495.55 li
f
206.1 505.45 mo
207.45 506.35 208.8 507.25 209.925 507.7 cv
213.525 509.5 218.7 511.75 223.425 513.775 cv
@
223.2 514.225 mo
225.45 514.675 li
223.65 513.325 li
cp
@
223.2 514.225 mo
225.45 514.675 li
223.65 513.325 li
f
196.875 219.7 mo
196.875 221.5 196.875 223.525 196.875 225.55 cv
@
196.425 225.55 mo
196.875 227.8 li
197.55 225.55 li
cp
@
196.425 225.55 mo
196.875 227.8 li
197.55 225.55 li
f
202.275 281.35 mo
202.275 279.113 197.137 277.3 190.8 277.3 cv
184.463 277.3 179.325 279.113 179.325 281.35 cv
179.325 283.587 184.463 285.4 190.8 285.4 cv
197.137 285.4 202.275 283.587 202.275 281.35 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
181.613 282.07 mo
(AnonFilter_a0)
[2.27425 1.57501 1.575 1.575 1.7514 .875702 .875687 .875702 1.39856 1.04892 1.57501 1.39854 
0 ]xsh
192.6 269.2 mo
192.375 271 191.925 273.25 191.7 275.05 cv
@
191.25 275.05 mo
191.475 277.3 li
192.15 275.05 li
cp
@
191.25 275.05 mo
191.475 277.3 li
192.15 275.05 li
f
206.55 469.45 mo
206.55 467.213 202.521 465.4 197.55 465.4 cv
192.579 465.4 188.55 467.213 188.55 469.45 cv
188.55 471.687 192.579 473.5 197.55 473.5 cv
202.521 473.5 206.55 471.687 206.55 469.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
190.726 470.17 mo
(CompVect)
[2.10103 1.575 2.4507 1.575 2.27426 1.39854 1.39856 0 ]xsh
198 473.5 mo
198.225 475.3 198.225 477.325 198.45 479.35 cv
@
198 479.35 mo
198.45 481.6 li
199.125 479.35 li
cp
@
198 479.35 mo
198.45 481.6 li
199.125 479.35 li
f
203.175 307.45 mo
203.175 305.213 196.627 303.4 188.55 303.4 cv
180.473 303.4 173.925 305.213 173.925 307.45 cv
173.925 309.687 180.473 311.5 188.55 311.5 cv
196.627 311.5 203.175 309.687 203.175 307.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
176.3 308.17 mo
(FFTReorderSimple)
[1.7514 1.75139 1.92464 2.10103 1.39854 1.575 1.04893 1.575 1.39856 1.04892 1.7514 .875702 
2.45068 1.57501 .875702 0 ]xsh
190.35 285.4 mo
190.125 289.675 189.675 296.425 189.225 301.375 cv
@
188.775 301.15 mo
189 303.4 li
189.9 301.15 li
cp
@
188.775 301.15 mo
189 303.4 li
189.9 301.15 li
f
203.175 323.65 mo
203.175 321.413 196.627 319.6 188.55 319.6 cv
180.473 319.6 173.925 321.413 173.925 323.65 cv
173.925 325.887 180.473 327.7 188.55 327.7 cv
196.627 327.7 203.175 325.887 203.175 323.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
176.3 324.37 mo
(FFTReorderSimple)
[1.7514 1.75139 1.92464 2.10103 1.39854 1.575 1.04893 1.575 1.39856 1.04892 1.7514 .875702 
2.45068 1.57501 .875702 0 ]xsh
188.55 311.5 mo
188.55 313.3 188.55 315.325 188.55 317.35 cv
@
188.1 317.35 mo
188.55 319.6 li
189.225 317.35 li
cp
@
188.1 317.35 mo
188.55 319.6 li
189.225 317.35 li
f
204.975 437.05 mo
204.975 434.813 200.039 433 193.95 433 cv
187.861 433 182.925 434.813 182.925 437.05 cv
182.925 439.287 187.861 441.1 193.95 441.1 cv
200.039 441.1 204.975 439.287 204.975 437.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
185.199 437.77 mo
(CombineDFT)
[2.10103 1.575 2.4507 1.575 .875702 1.575 1.39856 2.27425 1.7514 0 ]xsh
207 453.25 mo
207 451.013 201.862 449.2 195.525 449.2 cv
189.188 449.2 184.05 451.013 184.05 453.25 cv
184.05 455.487 189.188 457.3 195.525 457.3 cv
201.862 457.3 207 455.487 207 453.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
186.338 453.97 mo
(AnonFilter_a1)
[2.27425 1.57501 1.575 1.575 1.7514 .875702 .875687 .875702 1.39856 1.04892 1.575 1.39856 
0 ]xsh
194.4 441.1 mo
194.625 442.9 194.625 444.925 194.85 446.95 cv
@
194.4 446.95 mo
195.075 449.2 li
195.3 446.95 li
cp
@
194.4 446.95 mo
195.075 449.2 li
195.3 446.95 li
f
195.975 457.3 mo
196.2 459.1 196.425 461.35 196.875 463.15 cv
@
196.425 463.15 mo
197.1 465.4 li
197.325 463.15 li
cp
@
196.425 463.15 mo
197.1 465.4 li
197.325 463.15 li
f
203.175 356.05 mo
203.175 353.813 196.627 352 188.55 352 cv
180.473 352 173.925 353.813 173.925 356.05 cv
173.925 358.287 180.473 360.1 188.55 360.1 cv
196.627 360.1 203.175 358.287 203.175 356.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
176.3 356.77 mo
(FFTReorderSimple)
[1.7514 1.75139 1.92464 2.10103 1.39854 1.575 1.04893 1.575 1.39856 1.04892 1.7514 .875702 
2.45068 1.57501 .875702 0 ]xsh
202.275 372.25 mo
202.275 370.013 197.339 368.2 191.25 368.2 cv
185.161 368.2 180.225 370.013 180.225 372.25 cv
180.225 374.487 185.161 376.3 191.25 376.3 cv
197.339 376.3 202.275 374.487 202.275 372.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
182.499 372.97 mo
(CombineDFT)
[2.10103 1.575 2.4507 1.575 .875702 1.575 1.39856 2.27425 1.7514 0 ]xsh
189.225 360.1 mo
189.45 361.9 189.9 364.15 190.125 365.95 cv
@
189.675 366.175 mo
190.575 368.2 li
190.575 365.95 li
cp
@
189.675 366.175 mo
190.575 368.2 li
190.575 365.95 li
f
203.625 388.45 mo
203.625 386.213 198.689 384.4 192.6 384.4 cv
186.511 384.4 181.575 386.213 181.575 388.45 cv
181.575 390.687 186.511 392.5 192.6 392.5 cv
198.689 392.5 203.625 390.687 203.625 388.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
183.849 389.17 mo
(CombineDFT)
[2.10103 1.575 2.4507 1.575 .875702 1.575 1.39856 2.27425 1.7514 0 ]xsh
191.7 376.3 mo
191.925 378.1 191.925 380.125 192.15 382.15 cv
@
191.7 382.15 mo
192.15 384.4 li
192.825 382.15 li
cp
@
191.7 382.15 mo
192.15 384.4 li
192.825 382.15 li
f
204.3 404.65 mo
204.3 402.413 199.364 400.6 193.275 400.6 cv
187.186 400.6 182.25 402.413 182.25 404.65 cv
182.25 406.887 187.186 408.7 193.275 408.7 cv
199.364 408.7 204.3 406.887 204.3 404.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
184.524 405.37 mo
(CombineDFT)
[2.10103 1.575 2.4507 1.575 .875702 1.575 1.39856 2.27425 1.7514 0 ]xsh
192.825 392.5 mo
193.05 394.3 193.05 396.325 193.05 398.35 cv
@
192.6 398.35 mo
193.05 400.6 li
193.725 398.35 li
cp
@
192.6 398.35 mo
193.05 400.6 li
193.725 398.35 li
f
204.75 420.85 mo
204.75 418.613 199.814 416.8 193.725 416.8 cv
187.636 416.8 182.7 418.613 182.7 420.85 cv
182.7 423.087 187.636 424.9 193.725 424.9 cv
199.814 424.9 204.75 423.087 204.75 420.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
184.974 421.57 mo
(CombineDFT)
[2.10103 1.575 2.4507 1.575 .875702 1.575 1.39856 2.27425 1.7514 0 ]xsh
193.5 408.7 mo
193.5 410.5 193.5 412.525 193.5 414.55 cv
@
193.05 414.55 mo
193.725 416.8 li
193.95 414.55 li
cp
@
193.05 414.55 mo
193.725 416.8 li
193.95 414.55 li
f
193.725 424.9 mo
193.95 426.7 193.95 428.725 193.95 430.75 cv
@
193.5 430.75 mo
193.95 433 li
194.625 430.75 li
cp
@
193.5 430.75 mo
193.95 433 li
194.625 430.75 li
f
203.175 339.85 mo
203.175 337.613 196.627 335.8 188.55 335.8 cv
180.473 335.8 173.925 337.613 173.925 339.85 cv
173.925 342.087 180.473 343.9 188.55 343.9 cv
196.627 343.9 203.175 342.087 203.175 339.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
176.3 340.57 mo
(FFTReorderSimple)
[1.7514 1.75139 1.92464 2.10103 1.39854 1.575 1.04893 1.575 1.39856 1.04892 1.7514 .875702 
2.45068 1.57501 .875702 0 ]xsh
188.55 327.7 mo
188.55 329.5 188.55 331.525 188.55 333.55 cv
@
188.1 333.55 mo
188.55 335.8 li
189.225 333.55 li
cp
@
188.1 333.55 mo
188.55 335.8 li
189.225 333.55 li
f
188.55 343.9 mo
188.55 345.7 188.55 347.725 188.55 349.75 cv
@
188.1 349.75 mo
188.55 352 li
189.225 349.75 li
cp
@
188.1 349.75 mo
188.55 352 li
189.225 349.75 li
f
234 203.5 mo
234 210.25 234 223.975 234 231.85 cv
234 231.85 234 231.85 234 485.65 cv
234 492.625 234 504.55 234 511.75 cv
@
233.55 511.75 mo
234 514 li
234.675 511.75 li
cp
@
233.55 511.75 mo
234 514 li
234.675 511.75 li
f
247.95 582.85 mo
247.95 580.613 244.424 578.8 240.075 578.8 cv
235.726 578.8 232.2 580.613 232.2 582.85 cv
232.2 585.087 235.726 586.9 240.075 586.9 cv
244.424 586.9 247.95 585.087 247.95 582.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
234.389 583.57 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.575 1.7514 1.04892 0 ]xsh
240.075 570.7 mo
240.075 572.5 240.075 574.525 240.075 576.55 cv
@
239.625 576.55 mo
240.075 578.8 li
240.75 576.55 li
cp
@
239.625 576.55 mo
240.075 578.8 li
240.75 576.55 li
f
248.4 599.05 mo
248.4 596.813 244.673 595 240.075 595 cv
235.477 595 231.75 596.813 231.75 599.05 cv
231.75 601.287 235.477 603.1 240.075 603.1 cv
244.673 603.1 248.4 601.287 248.4 599.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
234.125 599.77 mo
(FreqShift)
[1.7514 1.04892 1.39856 1.575 1.7514 1.575 .875702 1.04892 0 ]xsh
240.075 586.9 mo
240.075 588.7 240.075 590.725 240.075 592.75 cv
@
239.625 592.75 mo
240.075 595 li
240.75 592.75 li
cp
@
239.625 592.75 mo
240.075 595 li
240.75 592.75 li
f
249.975 615.25 mo
249.975 613.013 245.543 611.2 240.075 611.2 cv
234.607 611.2 230.175 613.013 230.175 615.25 cv
230.175 617.487 234.607 619.3 240.075 619.3 cv
245.543 619.3 249.975 617.487 249.975 615.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
232.461 615.97 mo
(FormChg21)
[1.7514 1.575 1.04892 2.4507 2.10103 1.575 1.57501 1.575 0 ]xsh
240.075 603.1 mo
240.075 604.9 240.075 606.925 240.075 608.95 cv
@
239.625 608.95 mo
240.075 611.2 li
240.75 608.95 li
cp
@
239.625 608.95 mo
240.075 611.2 li
240.75 608.95 li
f
244.125 619.075 mo
246.375 621.1 249.075 623.8 251.775 626.05 cv
@
251.325 626.275 mo
253.35 627.4 li
252 625.6 li
cp
@
251.325 626.275 mo
253.35 627.4 li
252 625.6 li
f
285.075 134.65 mo
285.075 132.413 280.643 130.6 275.175 130.6 cv
269.707 130.6 265.275 132.413 265.275 134.65 cv
265.275 136.887 269.707 138.7 275.175 138.7 cv
280.643 138.7 285.075 136.887 285.075 134.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
267.561 135.37 mo
(FormChg21)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
292.05 150.85 mo
292.05 148.613 287.92 146.8 282.825 146.8 cv
277.73 146.8 273.6 148.613 273.6 150.85 cv
273.6 153.087 277.73 154.9 282.825 154.9 cv
287.92 154.9 292.05 153.087 292.05 150.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
275.739 151.57 mo
(AdapBeam)
[2.27426 1.57498 1.39856 1.57501 2.10101 1.39856 1.39856 0 ]xsh
276.975 138.7 mo
277.875 140.5 279 142.75 279.9 144.775 cv
@
279.45 145 mo
280.8 146.8 li
280.35 144.55 li
cp
@
279.45 145 mo
280.8 146.8 li
280.35 144.55 li
f
302.625 167.05 mo
302.625 164.813 295.573 163 286.875 163 cv
278.177 163 271.125 164.813 271.125 167.05 cv
271.125 169.287 278.177 171.1 286.875 171.1 cv
295.573 171.1 302.625 169.287 302.625 167.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
273.314 167.77 mo
(roundrobin\(1024, 32\))
[1.04892 1.57501 1.57498 1.57501 1.57501 1.04892 1.57498 1.57501 .875702 1.57501 1.04892 1.57498 
1.57501 1.57501 1.57498 .787506 .787506 1.57498 1.57501 0 ]xsh
283.95 154.9 mo
284.4 156.7 284.85 158.95 285.525 160.975 cv
@
284.85 160.975 mo
285.975 163 li
285.975 160.75 li
cp
@
284.85 160.975 mo
285.975 163 li
285.975 160.75 li
f
294.3 183.25 mo
294.3 181.013 290.976 179.2 286.875 179.2 cv
282.774 179.2 279.45 181.013 279.45 183.25 cv
279.45 185.487 282.774 187.3 286.875 187.3 cv
290.976 187.3 294.3 185.487 294.3 183.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
281.626 183.97 mo
(GenCub)
[2.27426 1.39853 1.57501 2.10101 1.57501 0 ]xsh
286.875 171.1 mo
286.875 172.9 286.875 174.925 286.875 176.95 cv
@
286.425 176.95 mo
286.875 179.2 li
287.55 176.95 li
cp
@
286.425 176.95 mo
286.875 179.2 li
287.55 176.95 li
f
350.325 199.45 mo
350.325 197.213 342.266 195.4 332.325 195.4 cv
322.384 195.4 314.325 197.213 314.325 199.45 cv
314.325 201.687 322.384 203.5 332.325 203.5 cv
342.266 203.5 350.325 201.687 350.325 199.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
316.577 200.17 mo
(streamit_library_Identity)
[1.22531 .875702 1.04895 1.39853 1.39856 2.45071 .875702 .875702 1.57498 .875702 .875702 1.57501 
1.04892 1.39856 1.04892 1.57498 1.57501 1.04892 1.57501 1.39856 1.57498 .875702 .875702 .875702 
0 ]xsh
302.175 167.95 mo
309.825 168.85 318.15 170.425 322.875 173.8 cv
327.825 177.175 330.3 186.85 331.425 193.375 cv
@
330.75 193.15 mo
331.65 195.4 li
331.875 193.15 li
cp
@
330.75 193.15 mo
331.65 195.4 li
331.875 193.15 li
f
302.625 518.05 mo
302.625 515.813 295.573 514 286.875 514 cv
278.177 514 271.125 515.813 271.125 518.05 cv
271.125 520.287 278.177 522.1 286.875 522.1 cv
295.573 522.1 302.625 520.287 302.625 518.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
273.314 518.77 mo
(roundrobin\(1024, 32\))
[1.04892 1.57501 1.57498 1.57501 1.57501 1.04892 1.57498 1.57501 .875702 1.57501 1.04892 1.57498 
1.57501 1.57501 1.57498 .787506 .787506 1.57498 1.57501 0 ]xsh
288.9 534.25 mo
288.9 532.013 286.18 530.2 282.825 530.2 cv
279.47 530.2 276.75 532.013 276.75 534.25 cv
276.75 536.487 279.47 538.3 282.825 538.3 cv
286.18 538.3 288.9 536.487 288.9 534.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
278.974 534.97 mo
(STAP)
[1.7514 1.92462 2.27426 0 ]xsh
285.75 522.1 mo
285.3 523.9 284.85 526.15 284.175 528.175 cv
@
283.725 527.95 mo
283.725 530.2 li
284.85 528.175 li
cp
@
283.725 527.95 mo
283.725 530.2 li
284.85 528.175 li
f
285.075 550.45 mo
285.075 548.213 280.643 546.4 275.175 546.4 cv
269.707 546.4 265.275 548.213 265.275 550.45 cv
265.275 552.687 269.707 554.5 275.175 554.5 cv
280.643 554.5 285.075 552.687 285.075 550.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
267.561 551.17 mo
(FormChg20)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
281.025 538.075 mo
280.125 540.1 279 542.35 278.1 544.375 cv
@
277.65 544.15 mo
277.2 546.4 li
278.55 544.6 li
cp
@
277.65 544.15 mo
277.2 546.4 li
278.55 544.6 li
f
283.05 566.65 mo
283.05 564.413 279.524 562.6 275.175 562.6 cv
270.826 562.6 267.3 564.413 267.3 566.65 cv
267.3 568.887 270.826 570.7 275.175 570.7 cv
279.524 570.7 283.05 568.887 283.05 566.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
269.663 567.37 mo
(UpSamp)
[2.27426 1.57498 1.7514 1.39856 2.45068 0 ]xsh
275.175 554.5 mo
275.175 556.3 275.175 558.325 275.175 560.35 cv
@
274.725 560.35 mo
275.175 562.6 li
275.85 560.35 li
cp
@
274.725 560.35 mo
275.175 562.6 li
275.85 560.35 li
f
283.5 69.85 mo
283.5 67.613 279.773 65.8 275.175 65.8 cv
270.577 65.8 266.85 67.613 266.85 69.85 cv
266.85 72.087 270.577 73.9 275.175 73.9 cv
279.773 73.9 283.5 72.087 283.5 69.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
269.225 70.5699 mo
(FreqShift)
[1.7514 1.04892 1.39856 1.57498 1.7514 1.57501 .875702 1.04892 0 ]xsh
275.175 57.7 mo
275.175 59.4999 275.175 61.525 275.175 63.55 cv
@
274.725 63.55 mo
275.175 65.8 li
275.85 63.55 li
cp
@
274.725 63.55 mo
275.175 65.8 li
275.85 63.55 li
f
283.05 86.05 mo
283.05 83.8129 279.524 81.9999 275.175 81.9999 cv
270.826 81.9999 267.3 83.8129 267.3 86.05 cv
267.3 88.287 270.826 90.1 275.175 90.1 cv
279.524 90.1 283.05 88.287 283.05 86.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
269.489 86.7699 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.57501 1.75137 1.04895 0 ]xsh
275.175 73.9 mo
275.175 75.7 275.175 77.725 275.175 79.7499 cv
@
274.725 79.7499 mo
275.175 81.9999 li
275.85 79.7499 li
cp
@
274.725 79.7499 mo
275.175 81.9999 li
275.85 79.7499 li
f
284.85 102.25 mo
284.85 100.013 280.518 98.2 275.175 98.2 cv
269.832 98.2 265.5 100.013 265.5 102.25 cv
265.5 104.487 269.832 106.3 275.175 106.3 cv
280.518 106.3 284.85 104.487 284.85 102.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
267.738 102.97 mo
(DownSamp)
[2.27426 1.57498 2.27426 1.57501 1.75137 1.39856 2.45071 0 ]xsh
275.175 90.1 mo
275.175 91.9 275.175 93.925 275.175 95.95 cv
@
274.725 95.95 mo
275.175 98.2 li
275.85 95.95 li
cp
@
274.725 95.95 mo
275.175 98.2 li
275.85 95.95 li
f
283.05 118.45 mo
283.05 116.213 279.524 114.4 275.175 114.4 cv
270.826 114.4 267.3 116.213 267.3 118.45 cv
267.3 120.687 270.826 122.5 275.175 122.5 cv
279.524 122.5 283.05 120.687 283.05 118.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
269.489 119.17 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.57501 1.75137 1.04895 0 ]xsh
275.175 106.3 mo
275.175 108.1 275.175 110.125 275.175 112.15 cv
@
274.725 112.15 mo
275.175 114.4 li
275.85 112.15 li
cp
@
274.725 112.15 mo
275.175 114.4 li
275.85 112.15 li
f
275.175 122.5 mo
275.175 124.3 275.175 126.325 275.175 128.35 cv
@
274.725 128.35 mo
275.175 130.6 li
275.85 128.35 li
cp
@
274.725 128.35 mo
275.175 130.6 li
275.85 128.35 li
f
296.775 199.45 mo
296.775 197.213 292.343 195.4 286.875 195.4 cv
281.407 195.4 276.975 197.213 276.975 199.45 cv
276.975 201.687 281.407 203.5 286.875 203.5 cv
292.343 203.5 296.775 201.687 296.775 199.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
279.261 200.17 mo
(FormChg20)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
286.875 187.3 mo
286.875 189.1 286.875 191.125 286.875 193.15 cv
@
286.425 193.15 mo
286.875 195.4 li
287.55 193.15 li
cp
@
286.425 193.15 mo
286.875 195.4 li
287.55 193.15 li
f
294.75 215.65 mo
294.75 213.413 291.224 211.6 286.875 211.6 cv
282.526 211.6 279 213.413 279 215.65 cv
279 217.887 282.526 219.7 286.875 219.7 cv
291.224 219.7 294.75 217.887 294.75 215.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
281.189 216.37 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.57501 1.75137 1.04895 0 ]xsh
286.875 203.5 mo
286.875 205.3 286.875 207.325 286.875 209.35 cv
@
286.425 209.35 mo
286.875 211.6 li
287.55 209.35 li
cp
@
286.425 209.35 mo
286.875 211.6 li
287.55 209.35 li
f
296.775 231.85 mo
296.775 229.613 292.343 227.8 286.875 227.8 cv
281.407 227.8 276.975 229.613 276.975 231.85 cv
276.975 234.087 281.407 235.9 286.875 235.9 cv
292.343 235.9 296.775 234.087 296.775 231.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
279.261 232.57 mo
(FormChg21)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
293.4 248.95 mo
293.4 246.713 290.479 244.9 286.875 244.9 cv
283.271 244.9 280.35 246.713 280.35 248.95 cv
280.35 251.187 283.271 253 286.875 253 cv
290.479 253 293.4 251.187 293.4 248.95 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
282.674 249.67 mo
(Chg40)
[2.10101 1.57501 1.57501 1.57498 0 ]xsh
286.875 235.9 mo
286.875 237.925 286.875 240.4 286.875 242.65 cv
@
286.425 242.65 mo
286.875 244.9 li
287.55 242.65 li
cp
@
286.425 242.65 mo
286.875 244.9 li
287.55 242.65 li
f
297.45 265.15 mo
297.45 262.913 292.715 261.1 286.875 261.1 cv
281.035 261.1 276.3 262.913 276.3 265.15 cv
276.3 267.387 281.035 269.2 286.875 269.2 cv
292.715 269.2 297.45 267.387 297.45 265.15 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
278.565 265.87 mo
(DecompVect)
[2.27426 1.39853 1.39856 1.57501 2.45068 1.57501 2.27426 1.39853 1.39856 0 ]xsh
286.875 253 mo
286.875 254.8 286.875 256.825 286.875 258.85 cv
@
286.425 258.85 mo
286.875 261.1 li
287.55 258.85 li
cp
@
286.425 258.85 mo
286.875 261.1 li
287.55 258.85 li
f
293.4 485.65 mo
293.4 483.413 290.479 481.6 286.875 481.6 cv
283.271 481.6 280.35 483.413 280.35 485.65 cv
280.35 487.887 283.271 489.7 286.875 489.7 cv
290.479 489.7 293.4 487.887 293.4 485.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
282.674 486.37 mo
(Chg41)
[2.10101 1.57501 1.57501 1.57498 0 ]xsh
295.875 501.85 mo
295.875 499.613 291.846 497.8 286.875 497.8 cv
281.904 497.8 277.875 499.613 277.875 501.85 cv
277.875 504.087 281.904 505.9 286.875 505.9 cv
291.846 505.9 295.875 504.087 295.875 501.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
280.14 502.57 mo
(DegenTetr)
[2.27426 1.39853 1.57501 1.39856 1.57498 1.92465 1.39853 .875702 0 ]xsh
286.875 489.7 mo
286.875 491.5 286.875 493.525 286.875 495.55 cv
@
286.425 495.55 mo
286.875 497.8 li
287.55 495.55 li
cp
@
286.425 495.55 mo
286.875 497.8 li
287.55 495.55 li
f
286.875 505.9 mo
286.875 507.7 286.875 509.725 286.875 511.75 cv
@
286.425 511.75 mo
286.875 514 li
287.55 511.75 li
cp
@
286.425 511.75 mo
286.875 514 li
287.55 511.75 li
f
286.875 219.7 mo
286.875 221.5 286.875 223.525 286.875 225.55 cv
@
286.425 225.55 mo
286.875 227.8 li
287.55 225.55 li
cp
@
286.425 225.55 mo
286.875 227.8 li
287.55 225.55 li
f
298.35 281.35 mo
298.35 279.113 293.212 277.3 286.875 277.3 cv
280.538 277.3 275.4 279.113 275.4 281.35 cv
275.4 283.587 280.538 285.4 286.875 285.4 cv
293.212 285.4 298.35 283.587 298.35 281.35 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
277.688 282.07 mo
(AnonFilter_a0)
[2.27426 1.57498 1.57501 1.57501 1.75137 .875702 .875702 .875702 1.39856 1.04892 1.57501 1.39853 
0 ]xsh
286.875 269.2 mo
286.875 271 286.875 273.025 286.875 275.05 cv
@
286.425 275.05 mo
286.875 277.3 li
287.55 275.05 li
cp
@
286.425 275.05 mo
286.875 277.3 li
287.55 275.05 li
f
295.875 469.45 mo
295.875 467.213 291.846 465.4 286.875 465.4 cv
281.904 465.4 277.875 467.213 277.875 469.45 cv
277.875 471.687 281.904 473.5 286.875 473.5 cv
291.846 473.5 295.875 471.687 295.875 469.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
280.051 470.17 mo
(CompVect)
[2.10101 1.57501 2.45071 1.57498 2.27426 1.39856 1.39853 0 ]xsh
286.875 473.5 mo
286.875 475.3 286.875 477.325 286.875 479.35 cv
@
286.425 479.35 mo
286.875 481.6 li
287.55 479.35 li
cp
@
286.425 479.35 mo
286.875 481.6 li
287.55 479.35 li
f
301.5 307.45 mo
301.5 305.213 294.952 303.4 286.875 303.4 cv
278.798 303.4 272.25 305.213 272.25 307.45 cv
272.25 309.687 278.798 311.5 286.875 311.5 cv
294.952 311.5 301.5 309.687 301.5 307.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
274.625 308.17 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10101 1.39856 1.57501 1.04892 1.57498 1.39856 1.04892 1.7514 .875702 
2.45071 1.57498 .875702 0 ]xsh
286.875 285.4 mo
286.875 289.675 286.875 296.425 286.875 301.375 cv
@
286.425 301.15 mo
286.875 303.4 li
287.55 301.15 li
cp
@
286.425 301.15 mo
286.875 303.4 li
287.55 301.15 li
f
301.5 323.65 mo
301.5 321.413 294.952 319.6 286.875 319.6 cv
278.798 319.6 272.25 321.413 272.25 323.65 cv
272.25 325.887 278.798 327.7 286.875 327.7 cv
294.952 327.7 301.5 325.887 301.5 323.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
274.625 324.37 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10101 1.39856 1.57501 1.04892 1.57498 1.39856 1.04892 1.7514 .875702 
2.45071 1.57498 .875702 0 ]xsh
286.875 311.5 mo
286.875 313.3 286.875 315.325 286.875 317.35 cv
@
286.425 317.35 mo
286.875 319.6 li
287.55 317.35 li
cp
@
286.425 317.35 mo
286.875 319.6 li
287.55 317.35 li
f
297.9 437.05 mo
297.9 434.813 292.964 433 286.875 433 cv
280.786 433 275.85 434.813 275.85 437.05 cv
275.85 439.287 280.786 441.1 286.875 441.1 cv
292.964 441.1 297.9 439.287 297.9 437.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
278.124 437.77 mo
(CombineDFT)
[2.10101 1.57501 2.45071 1.57498 .875702 1.57501 1.39853 2.27426 1.7514 0 ]xsh
298.35 453.25 mo
298.35 451.013 293.212 449.2 286.875 449.2 cv
280.538 449.2 275.4 451.013 275.4 453.25 cv
275.4 455.487 280.538 457.3 286.875 457.3 cv
293.212 457.3 298.35 455.487 298.35 453.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
277.688 453.97 mo
(AnonFilter_a1)
[2.27426 1.57498 1.57501 1.57501 1.75137 .875702 .875702 .875702 1.39856 1.04892 1.57501 1.39853 
0 ]xsh
286.875 441.1 mo
286.875 442.9 286.875 444.925 286.875 446.95 cv
@
286.425 446.95 mo
286.875 449.2 li
287.55 446.95 li
cp
@
286.425 446.95 mo
286.875 449.2 li
287.55 446.95 li
f
286.875 457.3 mo
286.875 459.1 286.875 461.125 286.875 463.15 cv
@
286.425 463.15 mo
286.875 465.4 li
287.55 463.15 li
cp
@
286.425 463.15 mo
286.875 465.4 li
287.55 463.15 li
f
301.5 356.05 mo
301.5 353.813 294.952 352 286.875 352 cv
278.798 352 272.25 353.813 272.25 356.05 cv
272.25 358.287 278.798 360.1 286.875 360.1 cv
294.952 360.1 301.5 358.287 301.5 356.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
274.625 356.77 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10101 1.39856 1.57501 1.04892 1.57498 1.39856 1.04892 1.7514 .875702 
2.45071 1.57498 .875702 0 ]xsh
297.9 372.25 mo
297.9 370.013 292.964 368.2 286.875 368.2 cv
280.786 368.2 275.85 370.013 275.85 372.25 cv
275.85 374.487 280.786 376.3 286.875 376.3 cv
292.964 376.3 297.9 374.487 297.9 372.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
278.124 372.97 mo
(CombineDFT)
[2.10101 1.57501 2.45071 1.57498 .875702 1.57501 1.39853 2.27426 1.7514 0 ]xsh
286.875 360.1 mo
286.875 361.9 286.875 363.925 286.875 365.95 cv
@
286.425 365.95 mo
286.875 368.2 li
287.55 365.95 li
cp
@
286.425 365.95 mo
286.875 368.2 li
287.55 365.95 li
f
297.9 388.45 mo
297.9 386.213 292.964 384.4 286.875 384.4 cv
280.786 384.4 275.85 386.213 275.85 388.45 cv
275.85 390.687 280.786 392.5 286.875 392.5 cv
292.964 392.5 297.9 390.687 297.9 388.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
278.124 389.17 mo
(CombineDFT)
[2.10101 1.57501 2.45071 1.57498 .875702 1.57501 1.39853 2.27426 1.7514 0 ]xsh
286.875 376.3 mo
286.875 378.1 286.875 380.125 286.875 382.15 cv
@
286.425 382.15 mo
286.875 384.4 li
287.55 382.15 li
cp
@
286.425 382.15 mo
286.875 384.4 li
287.55 382.15 li
f
297.9 404.65 mo
297.9 402.413 292.964 400.6 286.875 400.6 cv
280.786 400.6 275.85 402.413 275.85 404.65 cv
275.85 406.887 280.786 408.7 286.875 408.7 cv
292.964 408.7 297.9 406.887 297.9 404.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
278.124 405.37 mo
(CombineDFT)
[2.10101 1.57501 2.45071 1.57498 .875702 1.57501 1.39853 2.27426 1.7514 0 ]xsh
286.875 392.5 mo
286.875 394.3 286.875 396.325 286.875 398.35 cv
@
286.425 398.35 mo
286.875 400.6 li
287.55 398.35 li
cp
@
286.425 398.35 mo
286.875 400.6 li
287.55 398.35 li
f
297.9 420.85 mo
297.9 418.613 292.964 416.8 286.875 416.8 cv
280.786 416.8 275.85 418.613 275.85 420.85 cv
275.85 423.087 280.786 424.9 286.875 424.9 cv
292.964 424.9 297.9 423.087 297.9 420.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
278.124 421.57 mo
(CombineDFT)
[2.10101 1.57501 2.45071 1.57498 .875702 1.57501 1.39853 2.27426 1.7514 0 ]xsh
286.875 408.7 mo
286.875 410.5 286.875 412.525 286.875 414.55 cv
@
286.425 414.55 mo
286.875 416.8 li
287.55 414.55 li
cp
@
286.425 414.55 mo
286.875 416.8 li
287.55 414.55 li
f
286.875 424.9 mo
286.875 426.7 286.875 428.725 286.875 430.75 cv
@
286.425 430.75 mo
286.875 433 li
287.55 430.75 li
cp
@
286.425 430.75 mo
286.875 433 li
287.55 430.75 li
f
301.5 339.85 mo
301.5 337.613 294.952 335.8 286.875 335.8 cv
278.798 335.8 272.25 337.613 272.25 339.85 cv
272.25 342.087 278.798 343.9 286.875 343.9 cv
294.952 343.9 301.5 342.087 301.5 339.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
274.625 340.57 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10101 1.39856 1.57501 1.04892 1.57498 1.39856 1.04892 1.7514 .875702 
2.45071 1.57498 .875702 0 ]xsh
286.875 327.7 mo
286.875 329.5 286.875 331.525 286.875 333.55 cv
@
286.425 333.55 mo
286.875 335.8 li
287.55 333.55 li
cp
@
286.425 333.55 mo
286.875 335.8 li
287.55 333.55 li
f
286.875 343.9 mo
286.875 345.7 286.875 347.725 286.875 349.75 cv
@
286.425 349.75 mo
286.875 352 li
287.55 349.75 li
cp
@
286.425 349.75 mo
286.875 352 li
287.55 349.75 li
f
330.75 203.5 mo
328.05 210.25 323.325 223.75 323.325 231.85 cv
323.325 231.85 323.325 231.85 323.325 485.65 cv
323.325 493.075 328.5 502.975 322.875 507.7 cv
318.375 511.75 310.05 514.225 302.4 515.8 cv
@
303.075 515.125 mo
300.825 516.025 li
303.075 516.25 li
cp
@
303.075 515.125 mo
300.825 516.025 li
303.075 516.25 li
f
283.05 582.85 mo
283.05 580.613 279.524 578.8 275.175 578.8 cv
270.826 578.8 267.3 580.613 267.3 582.85 cv
267.3 585.087 270.826 586.9 275.175 586.9 cv
279.524 586.9 283.05 585.087 283.05 582.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
269.489 583.57 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.57501 1.75137 1.04895 0 ]xsh
275.175 570.7 mo
275.175 572.5 275.175 574.525 275.175 576.55 cv
@
274.725 576.55 mo
275.175 578.8 li
275.85 576.55 li
cp
@
274.725 576.55 mo
275.175 578.8 li
275.85 576.55 li
f
283.5 599.05 mo
283.5 596.813 279.773 595 275.175 595 cv
270.577 595 266.85 596.813 266.85 599.05 cv
266.85 601.287 270.577 603.1 275.175 603.1 cv
279.773 603.1 283.5 601.287 283.5 599.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
269.225 599.77 mo
(FreqShift)
[1.7514 1.04892 1.39856 1.57498 1.7514 1.57501 .875702 1.04892 0 ]xsh
275.175 586.9 mo
275.175 588.7 275.175 590.725 275.175 592.75 cv
@
274.725 592.75 mo
275.175 595 li
275.85 592.75 li
cp
@
274.725 592.75 mo
275.175 595 li
275.85 592.75 li
f
285.075 615.25 mo
285.075 613.013 280.643 611.2 275.175 611.2 cv
269.707 611.2 265.275 613.013 265.275 615.25 cv
265.275 617.487 269.707 619.3 275.175 619.3 cv
280.643 619.3 285.075 617.487 285.075 615.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
267.561 615.97 mo
(FormChg21)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
275.175 603.1 mo
275.175 604.9 275.175 606.925 275.175 608.95 cv
@
274.725 608.95 mo
275.175 611.2 li
275.85 608.95 li
cp
@
274.725 608.95 mo
275.175 611.2 li
275.85 608.95 li
f
271.125 619.075 mo
268.875 621.1 266.175 623.8 263.475 626.05 cv
@
263.25 625.6 mo
261.9 627.4 li
263.925 626.275 li
cp
@
263.25 625.6 mo
261.9 627.4 li
263.925 626.275 li
f
383.4 134.65 mo
383.4 132.413 378.968 130.6 373.5 130.6 cv
368.032 130.6 363.6 132.413 363.6 134.65 cv
363.6 136.887 368.032 138.7 373.5 138.7 cv
378.968 138.7 383.4 136.887 383.4 134.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
365.886 135.37 mo
(FormChg21)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
390.375 150.85 mo
390.375 148.613 386.245 146.8 381.15 146.8 cv
376.055 146.8 371.925 148.613 371.925 150.85 cv
371.925 153.087 376.055 154.9 381.15 154.9 cv
386.245 154.9 390.375 153.087 390.375 150.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
374.064 151.57 mo
(AdapBeam)
[2.27426 1.57498 1.39856 1.57501 2.10101 1.39856 1.39856 0 ]xsh
375.3 138.7 mo
376.2 140.5 377.325 142.75 378.225 144.775 cv
@
377.775 145 mo
379.125 146.8 li
378.675 144.55 li
cp
@
377.775 145 mo
379.125 146.8 li
378.675 144.55 li
f
400.95 167.05 mo
400.95 164.813 393.898 163 385.2 163 cv
376.502 163 369.45 164.813 369.45 167.05 cv
369.45 169.287 376.502 171.1 385.2 171.1 cv
393.898 171.1 400.95 169.287 400.95 167.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
371.639 167.77 mo
(roundrobin\(1024, 32\))
[1.04892 1.57501 1.57498 1.57501 1.57501 1.04892 1.57498 1.57501 .875702 1.57501 1.04892 1.57498 
1.57501 1.57501 1.57498 .787506 .787506 1.57498 1.57501 0 ]xsh
382.275 154.9 mo
382.725 156.7 383.175 158.95 383.85 160.975 cv
@
383.175 160.975 mo
384.3 163 li
384.3 160.75 li
cp
@
383.175 160.975 mo
384.3 163 li
384.3 160.75 li
f
392.625 183.25 mo
392.625 181.013 389.301 179.2 385.2 179.2 cv
381.099 179.2 377.775 181.013 377.775 183.25 cv
377.775 185.487 381.099 187.3 385.2 187.3 cv
389.301 187.3 392.625 185.487 392.625 183.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
379.951 183.97 mo
(GenCub)
[2.27426 1.39853 1.57501 2.10101 1.57501 0 ]xsh
385.2 171.1 mo
385.2 172.9 385.2 174.925 385.2 176.95 cv
@
384.75 176.95 mo
385.2 179.2 li
385.875 176.95 li
cp
@
384.75 176.95 mo
385.2 179.2 li
385.875 176.95 li
f
448.65 199.45 mo
448.65 197.213 440.591 195.4 430.65 195.4 cv
420.709 195.4 412.65 197.213 412.65 199.45 cv
412.65 201.687 420.709 203.5 430.65 203.5 cv
440.591 203.5 448.65 201.687 448.65 199.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
414.902 200.17 mo
(streamit_library_Identity)
[1.22531 .875702 1.04895 1.39853 1.39856 2.45071 .875702 .875702 1.57498 .875702 .875702 1.57501 
1.04892 1.39856 1.04892 1.57498 1.57501 1.04892 1.57501 1.39856 1.57498 .875702 .875702 .875702 
0 ]xsh
400.5 167.95 mo
408.15 168.85 416.475 170.425 421.2 173.8 cv
425.925 177.175 428.4 186.85 429.75 193.375 cv
@
429.075 193.15 mo
429.975 195.4 li
430.2 193.15 li
cp
@
429.075 193.15 mo
429.975 195.4 li
430.2 193.15 li
f
400.95 518.05 mo
400.95 515.813 393.898 514 385.2 514 cv
376.502 514 369.45 515.813 369.45 518.05 cv
369.45 520.287 376.502 522.1 385.2 522.1 cv
393.898 522.1 400.95 520.287 400.95 518.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
371.639 518.77 mo
(roundrobin\(1024, 32\))
[1.04892 1.57501 1.57498 1.57501 1.57501 1.04892 1.57498 1.57501 .875702 1.57501 1.04892 1.57498 
1.57501 1.57501 1.57498 .787506 .787506 1.57498 1.57501 0 ]xsh
387.225 534.25 mo
387.225 532.013 384.505 530.2 381.15 530.2 cv
377.795 530.2 375.075 532.013 375.075 534.25 cv
375.075 536.487 377.795 538.3 381.15 538.3 cv
384.505 538.3 387.225 536.487 387.225 534.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
377.299 534.97 mo
(STAP)
[1.7514 1.92462 2.27426 0 ]xsh
384.075 522.1 mo
383.625 523.9 383.175 526.15 382.5 528.175 cv
@
382.05 527.95 mo
382.05 530.2 li
383.175 528.175 li
cp
@
382.05 527.95 mo
382.05 530.2 li
383.175 528.175 li
f
383.4 550.45 mo
383.4 548.213 378.968 546.4 373.5 546.4 cv
368.032 546.4 363.6 548.213 363.6 550.45 cv
363.6 552.687 368.032 554.5 373.5 554.5 cv
378.968 554.5 383.4 552.687 383.4 550.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
365.886 551.17 mo
(FormChg20)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
379.35 538.075 mo
378.45 540.1 377.325 542.35 376.425 544.375 cv
@
375.975 544.15 mo
375.525 546.4 li
376.875 544.6 li
cp
@
375.975 544.15 mo
375.525 546.4 li
376.875 544.6 li
f
381.375 566.65 mo
381.375 564.413 377.849 562.6 373.5 562.6 cv
369.151 562.6 365.625 564.413 365.625 566.65 cv
365.625 568.887 369.151 570.7 373.5 570.7 cv
377.849 570.7 381.375 568.887 381.375 566.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
367.988 567.37 mo
(UpSamp)
[2.27426 1.57498 1.7514 1.39856 2.45068 0 ]xsh
373.5 554.5 mo
373.5 556.3 373.5 558.325 373.5 560.35 cv
@
373.05 560.35 mo
373.5 562.6 li
374.175 560.35 li
cp
@
373.05 560.35 mo
373.5 562.6 li
374.175 560.35 li
f
381.825 69.85 mo
381.825 67.613 378.098 65.8 373.5 65.8 cv
368.902 65.8 365.175 67.613 365.175 69.85 cv
365.175 72.087 368.902 73.9 373.5 73.9 cv
378.098 73.9 381.825 72.087 381.825 69.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
367.55 70.5699 mo
(FreqShift)
[1.7514 1.04892 1.39856 1.57498 1.7514 1.57501 .875702 1.04892 0 ]xsh
373.5 57.7 mo
373.5 59.4999 373.5 61.525 373.5 63.55 cv
@
373.05 63.55 mo
373.5 65.8 li
374.175 63.55 li
cp
@
373.05 63.55 mo
373.5 65.8 li
374.175 63.55 li
f
381.375 86.05 mo
381.375 83.8129 377.849 81.9999 373.5 81.9999 cv
369.151 81.9999 365.625 83.8129 365.625 86.05 cv
365.625 88.287 369.151 90.1 373.5 90.1 cv
377.849 90.1 381.375 88.287 381.375 86.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
367.814 86.7699 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.57501 1.75137 1.04895 0 ]xsh
373.5 73.9 mo
373.5 75.7 373.5 77.725 373.5 79.7499 cv
@
373.05 79.7499 mo
373.5 81.9999 li
374.175 79.7499 li
cp
@
373.05 79.7499 mo
373.5 81.9999 li
374.175 79.7499 li
f
383.175 102.25 mo
383.175 100.013 378.843 98.2 373.5 98.2 cv
368.157 98.2 363.825 100.013 363.825 102.25 cv
363.825 104.487 368.157 106.3 373.5 106.3 cv
378.843 106.3 383.175 104.487 383.175 102.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
366.063 102.97 mo
(DownSamp)
[2.27426 1.57498 2.27426 1.57501 1.75137 1.39856 2.45071 0 ]xsh
373.5 90.1 mo
373.5 91.9 373.5 93.925 373.5 95.95 cv
@
373.05 95.95 mo
373.5 98.2 li
374.175 95.95 li
cp
@
373.05 95.95 mo
373.5 98.2 li
374.175 95.95 li
f
381.375 118.45 mo
381.375 116.213 377.849 114.4 373.5 114.4 cv
369.151 114.4 365.625 116.213 365.625 118.45 cv
365.625 120.687 369.151 122.5 373.5 122.5 cv
377.849 122.5 381.375 120.687 381.375 118.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
367.814 119.17 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.57501 1.75137 1.04895 0 ]xsh
373.5 106.3 mo
373.5 108.1 373.5 110.125 373.5 112.15 cv
@
373.05 112.15 mo
373.5 114.4 li
374.175 112.15 li
cp
@
373.05 112.15 mo
373.5 114.4 li
374.175 112.15 li
f
373.5 122.5 mo
373.5 124.3 373.5 126.325 373.5 128.35 cv
@
373.05 128.35 mo
373.5 130.6 li
374.175 128.35 li
cp
@
373.05 128.35 mo
373.5 130.6 li
374.175 128.35 li
f
395.1 199.45 mo
395.1 197.213 390.668 195.4 385.2 195.4 cv
379.732 195.4 375.3 197.213 375.3 199.45 cv
375.3 201.687 379.732 203.5 385.2 203.5 cv
390.668 203.5 395.1 201.687 395.1 199.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
377.586 200.17 mo
(FormChg20)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
385.2 187.3 mo
385.2 189.1 385.2 191.125 385.2 193.15 cv
@
384.75 193.15 mo
385.2 195.4 li
385.875 193.15 li
cp
@
384.75 193.15 mo
385.2 195.4 li
385.875 193.15 li
f
393.075 215.65 mo
393.075 213.413 389.549 211.6 385.2 211.6 cv
380.851 211.6 377.325 213.413 377.325 215.65 cv
377.325 217.887 380.851 219.7 385.2 219.7 cv
389.549 219.7 393.075 217.887 393.075 215.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
379.514 216.37 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.57501 1.75137 1.04895 0 ]xsh
385.2 203.5 mo
385.2 205.3 385.2 207.325 385.2 209.35 cv
@
384.75 209.35 mo
385.2 211.6 li
385.875 209.35 li
cp
@
384.75 209.35 mo
385.2 211.6 li
385.875 209.35 li
f
395.1 231.85 mo
395.1 229.613 390.668 227.8 385.2 227.8 cv
379.732 227.8 375.3 229.613 375.3 231.85 cv
375.3 234.087 379.732 235.9 385.2 235.9 cv
390.668 235.9 395.1 234.087 395.1 231.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
377.586 232.57 mo
(FormChg21)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
391.725 248.95 mo
391.725 246.713 388.804 244.9 385.2 244.9 cv
381.596 244.9 378.675 246.713 378.675 248.95 cv
378.675 251.187 381.596 253 385.2 253 cv
388.804 253 391.725 251.187 391.725 248.95 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
380.999 249.67 mo
(Chg40)
[2.10101 1.57501 1.57501 1.57498 0 ]xsh
385.2 235.9 mo
385.2 237.925 385.2 240.4 385.2 242.65 cv
@
384.75 242.65 mo
385.2 244.9 li
385.875 242.65 li
cp
@
384.75 242.65 mo
385.2 244.9 li
385.875 242.65 li
f
395.775 265.15 mo
395.775 262.913 391.04 261.1 385.2 261.1 cv
379.36 261.1 374.625 262.913 374.625 265.15 cv
374.625 267.387 379.36 269.2 385.2 269.2 cv
391.04 269.2 395.775 267.387 395.775 265.15 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
376.89 265.87 mo
(DecompVect)
[2.27426 1.39853 1.39856 1.57501 2.45068 1.57501 2.27426 1.39853 1.39856 0 ]xsh
385.2 253 mo
385.2 254.8 385.2 256.825 385.2 258.85 cv
@
384.75 258.85 mo
385.2 261.1 li
385.875 258.85 li
cp
@
384.75 258.85 mo
385.2 261.1 li
385.875 258.85 li
f
391.725 485.65 mo
391.725 483.413 388.804 481.6 385.2 481.6 cv
381.596 481.6 378.675 483.413 378.675 485.65 cv
378.675 487.887 381.596 489.7 385.2 489.7 cv
388.804 489.7 391.725 487.887 391.725 485.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
380.999 486.37 mo
(Chg41)
[2.10101 1.57501 1.57501 1.57498 0 ]xsh
394.2 501.85 mo
394.2 499.613 390.171 497.8 385.2 497.8 cv
380.229 497.8 376.2 499.613 376.2 501.85 cv
376.2 504.087 380.229 505.9 385.2 505.9 cv
390.171 505.9 394.2 504.087 394.2 501.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
378.465 502.57 mo
(DegenTetr)
[2.27426 1.39853 1.57501 1.39856 1.57498 1.92465 1.39853 .875702 0 ]xsh
385.2 489.7 mo
385.2 491.5 385.2 493.525 385.2 495.55 cv
@
384.75 495.55 mo
385.2 497.8 li
385.875 495.55 li
cp
@
384.75 495.55 mo
385.2 497.8 li
385.875 495.55 li
f
385.2 505.9 mo
385.2 507.7 385.2 509.725 385.2 511.75 cv
@
384.75 511.75 mo
385.2 514 li
385.875 511.75 li
cp
@
384.75 511.75 mo
385.2 514 li
385.875 511.75 li
f
385.2 219.7 mo
385.2 221.5 385.2 223.525 385.2 225.55 cv
@
384.75 225.55 mo
385.2 227.8 li
385.875 225.55 li
cp
@
384.75 225.55 mo
385.2 227.8 li
385.875 225.55 li
f
396.675 281.35 mo
396.675 279.113 391.537 277.3 385.2 277.3 cv
378.863 277.3 373.725 279.113 373.725 281.35 cv
373.725 283.587 378.863 285.4 385.2 285.4 cv
391.537 285.4 396.675 283.587 396.675 281.35 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
376.013 282.07 mo
(AnonFilter_a0)
[2.27426 1.57498 1.57501 1.57501 1.75137 .875702 .875702 .875702 1.39856 1.04892 1.57501 1.39853 
0 ]xsh
385.2 269.2 mo
385.2 271 385.2 273.025 385.2 275.05 cv
@
384.75 275.05 mo
385.2 277.3 li
385.875 275.05 li
cp
@
384.75 275.05 mo
385.2 277.3 li
385.875 275.05 li
f
394.2 469.45 mo
394.2 467.213 390.171 465.4 385.2 465.4 cv
380.229 465.4 376.2 467.213 376.2 469.45 cv
376.2 471.687 380.229 473.5 385.2 473.5 cv
390.171 473.5 394.2 471.687 394.2 469.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
378.376 470.17 mo
(CompVect)
[2.10101 1.57501 2.45071 1.57498 2.27426 1.39856 1.39853 0 ]xsh
385.2 473.5 mo
385.2 475.3 385.2 477.325 385.2 479.35 cv
@
384.75 479.35 mo
385.2 481.6 li
385.875 479.35 li
cp
@
384.75 479.35 mo
385.2 481.6 li
385.875 479.35 li
f
399.825 307.45 mo
399.825 305.213 393.277 303.4 385.2 303.4 cv
377.123 303.4 370.575 305.213 370.575 307.45 cv
370.575 309.687 377.123 311.5 385.2 311.5 cv
393.277 311.5 399.825 309.687 399.825 307.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
372.95 308.17 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10101 1.39856 1.57501 1.04892 1.57498 1.39856 1.04892 1.7514 .875702 
2.45071 1.57498 .875702 0 ]xsh
385.2 285.4 mo
385.2 289.675 385.2 296.425 385.2 301.375 cv
@
384.75 301.15 mo
385.2 303.4 li
385.875 301.15 li
cp
@
384.75 301.15 mo
385.2 303.4 li
385.875 301.15 li
f
399.825 323.65 mo
399.825 321.413 393.277 319.6 385.2 319.6 cv
377.123 319.6 370.575 321.413 370.575 323.65 cv
370.575 325.887 377.123 327.7 385.2 327.7 cv
393.277 327.7 399.825 325.887 399.825 323.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
372.95 324.37 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10101 1.39856 1.57501 1.04892 1.57498 1.39856 1.04892 1.7514 .875702 
2.45071 1.57498 .875702 0 ]xsh
385.2 311.5 mo
385.2 313.3 385.2 315.325 385.2 317.35 cv
@
384.75 317.35 mo
385.2 319.6 li
385.875 317.35 li
cp
@
384.75 317.35 mo
385.2 319.6 li
385.875 317.35 li
f
396.225 437.05 mo
396.225 434.813 391.289 433 385.2 433 cv
379.111 433 374.175 434.813 374.175 437.05 cv
374.175 439.287 379.111 441.1 385.2 441.1 cv
391.289 441.1 396.225 439.287 396.225 437.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
376.449 437.77 mo
(CombineDFT)
[2.10101 1.57501 2.45071 1.57498 .875702 1.57501 1.39853 2.27426 1.7514 0 ]xsh
396.675 453.25 mo
396.675 451.013 391.537 449.2 385.2 449.2 cv
378.863 449.2 373.725 451.013 373.725 453.25 cv
373.725 455.487 378.863 457.3 385.2 457.3 cv
391.537 457.3 396.675 455.487 396.675 453.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
376.013 453.97 mo
(AnonFilter_a1)
[2.27426 1.57498 1.57501 1.57501 1.75137 .875702 .875702 .875702 1.39856 1.04892 1.57501 1.39853 
0 ]xsh
385.2 441.1 mo
385.2 442.9 385.2 444.925 385.2 446.95 cv
@
384.75 446.95 mo
385.2 449.2 li
385.875 446.95 li
cp
@
384.75 446.95 mo
385.2 449.2 li
385.875 446.95 li
f
385.2 457.3 mo
385.2 459.1 385.2 461.125 385.2 463.15 cv
@
384.75 463.15 mo
385.2 465.4 li
385.875 463.15 li
cp
@
384.75 463.15 mo
385.2 465.4 li
385.875 463.15 li
f
399.825 356.05 mo
399.825 353.813 393.277 352 385.2 352 cv
377.123 352 370.575 353.813 370.575 356.05 cv
370.575 358.287 377.123 360.1 385.2 360.1 cv
393.277 360.1 399.825 358.287 399.825 356.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
372.95 356.77 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10101 1.39856 1.57501 1.04892 1.57498 1.39856 1.04892 1.7514 .875702 
2.45071 1.57498 .875702 0 ]xsh
396.225 372.25 mo
396.225 370.013 391.289 368.2 385.2 368.2 cv
379.111 368.2 374.175 370.013 374.175 372.25 cv
374.175 374.487 379.111 376.3 385.2 376.3 cv
391.289 376.3 396.225 374.487 396.225 372.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
376.449 372.97 mo
(CombineDFT)
[2.10101 1.57501 2.45071 1.57498 .875702 1.57501 1.39853 2.27426 1.7514 0 ]xsh
385.2 360.1 mo
385.2 361.9 385.2 363.925 385.2 365.95 cv
@
384.75 365.95 mo
385.2 368.2 li
385.875 365.95 li
cp
@
384.75 365.95 mo
385.2 368.2 li
385.875 365.95 li
f
396.225 388.45 mo
396.225 386.213 391.289 384.4 385.2 384.4 cv
379.111 384.4 374.175 386.213 374.175 388.45 cv
374.175 390.687 379.111 392.5 385.2 392.5 cv
391.289 392.5 396.225 390.687 396.225 388.45 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
376.449 389.17 mo
(CombineDFT)
[2.10101 1.57501 2.45071 1.57498 .875702 1.57501 1.39853 2.27426 1.7514 0 ]xsh
385.2 376.3 mo
385.2 378.1 385.2 380.125 385.2 382.15 cv
@
384.75 382.15 mo
385.2 384.4 li
385.875 382.15 li
cp
@
384.75 382.15 mo
385.2 384.4 li
385.875 382.15 li
f
396.225 404.65 mo
396.225 402.413 391.289 400.6 385.2 400.6 cv
379.111 400.6 374.175 402.413 374.175 404.65 cv
374.175 406.887 379.111 408.7 385.2 408.7 cv
391.289 408.7 396.225 406.887 396.225 404.65 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
376.449 405.37 mo
(CombineDFT)
[2.10101 1.57501 2.45071 1.57498 .875702 1.57501 1.39853 2.27426 1.7514 0 ]xsh
385.2 392.5 mo
385.2 394.3 385.2 396.325 385.2 398.35 cv
@
384.75 398.35 mo
385.2 400.6 li
385.875 398.35 li
cp
@
384.75 398.35 mo
385.2 400.6 li
385.875 398.35 li
f
396.225 420.85 mo
396.225 418.613 391.289 416.8 385.2 416.8 cv
379.111 416.8 374.175 418.613 374.175 420.85 cv
374.175 423.087 379.111 424.9 385.2 424.9 cv
391.289 424.9 396.225 423.087 396.225 420.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
376.449 421.57 mo
(CombineDFT)
[2.10101 1.57501 2.45071 1.57498 .875702 1.57501 1.39853 2.27426 1.7514 0 ]xsh
385.2 408.7 mo
385.2 410.5 385.2 412.525 385.2 414.55 cv
@
384.75 414.55 mo
385.2 416.8 li
385.875 414.55 li
cp
@
384.75 414.55 mo
385.2 416.8 li
385.875 414.55 li
f
385.2 424.9 mo
385.2 426.7 385.2 428.725 385.2 430.75 cv
@
384.75 430.75 mo
385.2 433 li
385.875 430.75 li
cp
@
384.75 430.75 mo
385.2 433 li
385.875 430.75 li
f
399.825 339.85 mo
399.825 337.613 393.277 335.8 385.2 335.8 cv
377.123 335.8 370.575 337.613 370.575 339.85 cv
370.575 342.087 377.123 343.9 385.2 343.9 cv
393.277 343.9 399.825 342.087 399.825 339.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
372.95 340.57 mo
(FFTReorderSimple)
[1.7514 1.7514 1.92462 2.10101 1.39856 1.57501 1.04892 1.57498 1.39856 1.04892 1.7514 .875702 
2.45071 1.57498 .875702 0 ]xsh
385.2 327.7 mo
385.2 329.5 385.2 331.525 385.2 333.55 cv
@
384.75 333.55 mo
385.2 335.8 li
385.875 333.55 li
cp
@
384.75 333.55 mo
385.2 335.8 li
385.875 333.55 li
f
385.2 343.9 mo
385.2 345.7 385.2 347.725 385.2 349.75 cv
@
384.75 349.75 mo
385.2 352 li
385.875 349.75 li
cp
@
384.75 349.75 mo
385.2 352 li
385.875 349.75 li
f
429.075 203.5 mo
426.375 210.25 421.425 223.75 421.65 231.85 cv
421.65 231.85 421.65 231.85 421.65 485.65 cv
421.425 493.075 426.6 502.975 421.2 507.7 cv
416.7 511.75 408.375 514.225 400.725 515.8 cv
@
401.4 515.125 mo
399.15 516.025 li
401.4 516.25 li
cp
@
401.4 515.125 mo
399.15 516.025 li
401.4 516.25 li
f
381.375 582.85 mo
381.375 580.613 377.849 578.8 373.5 578.8 cv
369.151 578.8 365.625 580.613 365.625 582.85 cv
365.625 585.087 369.151 586.9 373.5 586.9 cv
377.849 586.9 381.375 585.087 381.375 582.85 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
367.814 583.57 mo
(arrayFIR)
[1.39856 1.04892 1.04892 1.39856 1.57501 1.75137 1.04895 0 ]xsh
373.5 570.7 mo
373.5 572.5 373.5 574.525 373.5 576.55 cv
@
373.05 576.55 mo
373.5 578.8 li
374.175 576.55 li
cp
@
373.05 576.55 mo
373.5 578.8 li
374.175 576.55 li
f
381.825 599.05 mo
381.825 596.813 378.098 595 373.5 595 cv
368.902 595 365.175 596.813 365.175 599.05 cv
365.175 601.287 368.902 603.1 373.5 603.1 cv
378.098 603.1 381.825 601.287 381.825 599.05 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
367.55 599.77 mo
(FreqShift)
[1.7514 1.04892 1.39856 1.57498 1.7514 1.57501 .875702 1.04892 0 ]xsh
373.5 586.9 mo
373.5 588.7 373.5 590.725 373.5 592.75 cv
@
373.05 592.75 mo
373.5 595 li
374.175 592.75 li
cp
@
373.05 592.75 mo
373.5 595 li
374.175 592.75 li
f
383.4 615.25 mo
383.4 613.013 378.968 611.2 373.5 611.2 cv
368.032 611.2 363.6 613.013 363.6 615.25 cv
363.6 617.487 368.032 619.3 373.5 619.3 cv
378.968 619.3 383.4 617.487 383.4 615.25 cv
@
LTFDRB+TimesNewRomanPSMT*1 [3.15 0 0 -3.15 0 0 ]msf
365.886 615.97 mo
(FormChg21)
[1.7514 1.57498 1.04895 2.45068 2.10104 1.57498 1.57501 1.57498 0 ]xsh
373.5 603.1 mo
373.5 604.9 373.5 606.925 373.5 608.95 cv
@
373.05 608.95 mo
373.5 611.2 li
374.175 608.95 li
cp
@
373.05 608.95 mo
373.5 611.2 li
374.175 608.95 li
f
364.05 616.6 mo
344.25 619.525 297.225 626.05 272.925 629.2 cv
@
273.6 628.525 mo
271.575 629.425 li
273.825 629.65 li
cp
@
273.6 628.525 mo
271.575 629.425 li
273.825 629.65 li
f
257.625 668.8 mo
257.625 670.6 257.625 672.625 257.625 674.65 cv
@
257.175 674.65 mo
257.625 676.9 li
258.3 674.65 li
cp
@
257.175 674.65 mo
257.625 676.9 li
258.3 674.65 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/LTFDRB+TimesNewRomanPSMT*1 uf
/LTFDRB+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
