%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: DCT.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:07:38 PM
%%BoundingBox: 0 0 417 649
%%HiResBoundingBox: 0 0 417 649
%%CropBox: 0 0 417 649
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -649 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 649 li
417 649 li
417 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 650 mo
453 650 li
453 0 li
35 0 li
cp
clp
.2994 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
38.3952 646.605 mo
449.771 646.605 li
449.771 3.49377 li
38.3952 3.49377 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 68 /D put
dup 84 /T put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/C <1C60D8A8C9B64EDFB39C8FA0E3107D39E1E26D40368A6A59D36B799EDDCB
A8AF8BCAEA2E296C5BB00979C4073082C4AC62DAAE27F25BE45DFF121DF075F7
3D37111C10DFF7C6BD4BFE8AE73B4FADB84F0E8B5722DEA1CA14F5AFDC440B45
4F635F5576E82C8F45782F1EDE0EC9CA59D48E4C0F81> |-
/D <1C60D8A8C9B6079F62AF7EE2124AC712AE5D5419E262A0C00C6163DFBCB2
A6FA65DDDD5062250DB8BBFB46EB35827750F9FCEE696526B20FE9266474B179
350945BBDAF7180FAB04D619EB38198FC722361E0B3B5E50F9017F19C7BDCABB
285F506A04FE32C63936689B1F9C81923B03440D57336303C59B59E8D3C0659D
33> |-
/T <1C60D8A8C9B7D8BE16B2E353E3300378A32828826C127DE3D6A3769F5542
8119DC48F4B555CFAC557278838F3EC6C5F7B64F6B44DFEFCBC8AF8174185170
E165701BB15CF1CB88629A978EF6D86FB8> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDQV+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 15{/.notdef}rp /T 171{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
40.491 6.8469 mo
(DCT)
[3.02627 2.79576 0 ]xsh
211.448 107.685 mo
274.322 107.685 li
274.322 34.6313 li
211.448 34.6313 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
/v <1C60D8A8C9B7A73DDA3AE0A055993EE6BE7DFD4A4A2DB6881516C07791ED
230086728F5F7B4242AB79AA3E9EFA40308C16768E728C96C19C447086D3AC82
2F0AB1C43C44A30591856370C72E911DB5FEBBFD365EF7E42462BF4A23A3EEAE
F504CBF5C917EC0A44C5B6D735> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 98 /b put
dup 101 /e put
dup 105 /i put
dup 114 /r put
dup 116 /t put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 15{/.notdef}rp /T 13{/.notdef}rp /b 2{/.notdef}rp 
/e 3{/.notdef}rp /i 8{/.notdef}rp /r /.notdef /t /.notdef 
/v 137{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
213.445 37.9839 mo
(bitrev)
[2.09579 1.16527 1.16527 1.39577 1.86101 0 ]xsh
43.1856 615.467 mo
444.981 615.467 li
444.981 140.02 li
43.1856 140.02 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 99 /c put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 15{/.notdef}rp /T 13{/.notdef}rp /b /c 
/.notdef /e 3{/.notdef}rp /i 8{/.notdef}rp /r /s /t 
/u /v 137{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
45.2188 143.373 mo
(recurse)
[1.39577 1.86101 1.86101 2.0958 1.39577 1.6305 0 ]xsh
47.976 565.168 mo
250.969 565.168 li
250.969 160.379 li
47.976 160.379 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 111 /o put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 15{/.notdef}rp /T 13{/.notdef}rp /b /c 
/.notdef /e 3{/.notdef}rp /i 5{/.notdef}rp /o 2{/.notdef}rp /r 
/s /t /u /v 137{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
50.0578 163.733 mo
(DCTcore)
[3.02627 2.79576 2.56104 1.86101 2.0958 1.39577 0 ]xsh
174.922 240.618 mo
236.598 240.618 li
236.598 167.564 li
174.922 167.564 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
176.918 170.918 mo
(bitrev)
[2.09579 1.16527 1.16527 1.39577 1.86101 0 ]xsh
52.7664 562.773 mo
246.178 562.773 li
246.178 272.954 li
52.7664 272.954 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
54.7996 276.307 mo
(recurse)
[1.39577 1.86101 1.86101 2.0958 1.39577 1.6305 0 ]xsh
57.5568 512.474 mo
151.568 512.474 li
151.568 293.313 li
57.5568 293.313 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
59.6386 296.666 mo
(DCTcore)
[3.02627 2.79576 2.56104 1.86101 2.0958 1.39577 0 ]xsh
82.7064 373.552 mo
144.383 373.552 li
144.383 300.498 li
82.7064 300.498 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
84.7031 303.852 mo
(bitrev)
[2.0958 1.16526 1.16527 1.39577 1.86101 0 ]xsh
62.3472 510.078 mo
146.778 510.078 li
146.778 405.887 li
62.3472 405.887 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
64.3804 409.24 mo
(recurse)
[1.39577 1.86101 1.861 2.0958 1.39577 1.6305 0 ]xsh
102.467 488.522 mo
141.988 488.522 li
141.988 427.444 li
102.467 427.444 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 15{/.notdef}rp /T 13{/.notdef}rp /b /c 
/d /e 3{/.notdef}rp /i 5{/.notdef}rp /o 2{/.notdef}rp /r 
/s /t /u /v 137{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
104.332 430.797 mo
(reordDCT)
[1.39577 1.86101 2.09579 1.39577 2.09579 3.02628 2.79576 0 ]xsh
147.377 541.216 mo
241.389 541.216 li
241.389 293.313 li
147.377 293.313 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
149.242 296.666 mo
(reordDCT)
[1.39577 1.86101 2.09581 1.39577 2.09579 3.02628 2.79576 0 ]xsh
158.155 373.552 mo
219.831 373.552 li
219.831 300.498 li
158.155 300.498 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
160.152 303.852 mo
(bitrev)
[2.09579 1.16527 1.16527 1.39577 1.86101 0 ]xsh
152.167 510.078 mo
236.598 510.078 li
236.598 405.887 li
152.167 405.887 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
154.2 409.24 mo
(recurse)
[1.39577 1.86101 1.86101 2.09581 1.39577 1.63049 0 ]xsh
192.287 488.522 mo
231.808 488.522 li
231.808 427.444 li
192.287 427.444 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
194.152 430.797 mo
(reordDCT)
[1.39577 1.86101 2.09581 1.39577 2.09579 3.02628 2.79576 0 ]xsh
237.197 593.91 mo
440.19 593.91 li
440.19 160.379 li
237.197 160.379 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
239.062 163.733 mo
(reordDCT)
[1.39577 1.86101 2.09581 1.39577 2.09579 3.02628 2.79576 0 ]xsh
249.472 240.618 mo
311.148 240.618 li
311.148 167.564 li
249.472 167.564 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
251.469 170.918 mo
(bitrev)
[2.09579 1.16527 1.16527 1.39578 1.86099 0 ]xsh
241.987 562.773 mo
435.399 562.773 li
435.399 272.954 li
241.987 272.954 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
244.02 276.307 mo
(recurse)
[1.39577 1.86101 1.86101 2.09581 1.39577 1.63049 0 ]xsh
246.778 512.474 mo
340.79 512.474 li
340.79 293.313 li
246.778 293.313 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
248.859 296.666 mo
(DCTcore)
[3.02628 2.79576 2.56104 1.86102 2.09579 1.39575 0 ]xsh
270.43 373.552 mo
332.106 373.552 li
332.106 300.498 li
270.43 300.498 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
272.427 303.852 mo
(bitrev)
[2.09579 1.16528 1.16525 1.39578 1.86099 0 ]xsh
251.568 510.078 mo
335.999 510.078 li
335.999 405.887 li
251.568 405.887 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
253.601 409.24 mo
(recurse)
[1.39577 1.86102 1.86099 2.09579 1.39578 1.63049 0 ]xsh
291.688 488.522 mo
331.209 488.522 li
331.209 427.444 li
291.688 427.444 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
293.553 430.797 mo
(reordDCT)
[1.39578 1.86099 2.09579 1.39578 2.09579 3.02628 2.79578 0 ]xsh
336.598 541.216 mo
430.61 541.216 li
430.61 293.313 li
336.598 293.313 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
338.463 296.666 mo
(reordDCT)
[1.39578 1.86099 2.09579 1.39578 2.09579 3.02628 2.79578 0 ]xsh
341.388 373.552 mo
403.064 373.552 li
403.064 300.498 li
341.388 300.498 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
343.385 303.852 mo
(bitrev)
[2.09579 1.16528 1.16525 1.39578 1.86099 0 ]xsh
341.388 510.078 mo
425.819 510.078 li
425.819 405.887 li
341.388 405.887 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
343.421 409.24 mo
(recurse)
[1.39578 1.86099 1.86102 2.09579 1.39575 1.63052 0 ]xsh
381.508 488.522 mo
421.029 488.522 li
421.029 427.444 li
381.508 427.444 li
cp
@
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
383.373 430.797 mo
(reordDCT)
[1.39578 1.86099 2.09579 1.39578 2.09579 3.02628 2.79578 0 ]xsh
255.76 20.8589 mo
255.76 15.237 249.996 10.679 242.885 10.679 cv
235.775 10.679 230.011 15.237 230.011 20.8589 cv
230.011 26.481 235.775 31.038 242.885 31.038 cv
249.996 31.038 255.76 26.481 255.76 20.8589 cv
@
255.76 20.8589 mo
255.76 15.237 249.996 10.679 242.885 10.679 cv
235.775 10.679 230.011 15.237 230.011 20.8589 cv
230.011 26.481 235.775 31.038 242.885 31.038 cv
249.996 31.038 255.76 26.481 255.76 20.8589 cv
/1 
[/DeviceRGB] /CSA add_res
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/hyphen <1C60D8A8C9B81F2C7E673161CF52871F3F524B3A1BAC5ADA04F510A
476> |-
/slash <1C60D8A8C9B854D088EAD778FBC18D924BA165ED7CB0EB5700C3B61B
62ACF96E65C0BF> |-
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
/eight <1C60D8A8C9B7A73D9EB159A3CFECEE26FAC12AD4B6691842B4C84783
E84E1D8CD272AEC54014C937C15B810E403549328E3DC44B6A66E9E0AE5509A1
20FFE6F694340EC43D35C59CD7D1B2F14C1F1D5BA576A10F77E962817750FC0E
DC62627EE0E94BCE030A10C59143A015250A384C09B6A65F8572DF3FCBF68CF8
0D23E4E88D0691BD2178810DDABD5F40D8018F795B8CB5A52DDDD05F80E9A2BC
CDF3A5E14C701FBADF0447A7AE0E47FA8F86216AC25155BFF3569B19382CA905
7B18009FE630A2D7CEFDC3A4A3> |-
/colon <1C60D8A8C9B854D0E389293C42E83787A5BE0CE9B5745E40D1B32D07
F826004562E0981DB26F3EF2E2B5CD932C33C49C462F9673F306A9A8ECFFE93D
9FCE8BF4190AA3F1208FCCE1> |-
/equal <1C60D8A8C9B7E7C1C7C30B941AA047473EBF9655DE246137CE0666A3
DD27E47997A26319529C8C4FF5C38D266AE0> |-
/greater <1C60D8A8C9B7E7C1C7C30B940B3D62C7A181F0EBB0723CBB160375
71F050C44CCE59A85ACB3DB6BF9B03383F> |-
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
/O <1C60D8A8C9B6079F258D65BC2331B95A484F6FB0C89DE7976C286549CD33
A4D7316575EC038BAA234ED3FB5DEACB25E52512A7CBD428E6DBD2EB830622E8
8A44262525560702DCFFFB3478FE1A2C6113548B23F661EC01296D75C1A7D5FE
B75CD951FFE5A9> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
/w <1C60D8A8C9B6079F6CBBA5F366E947F933D60DF598D919B1B7650559D736
37DABDC1EE55BCEC17305D792CEB494E24BD853631335C74FFCA113C4D914522
6940D65B0FA636B78B1332922431C88D4DDF20C0A3C1C91D0C3F0EC21F67A6EF
80D94D8DD0BC64DA8FAF76B12BBC90C7B441833497F4FAAF7AFFFE22453504D1
C6C3D3F89787D8CE910F64CD7AC81F424C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 47 /slash put
dup 48 /zero put
dup 52 /four put
dup 56 /eight put
dup 58 /colon put
dup 61 /equal put
dup 62 /greater put
dup 73 /I put
dup 79 /O put
dup 107 /k put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero 3{/.notdef}rp 
/four 3{/.notdef}rp /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp 
/T 13{/.notdef}rp /b /c /d /e 3{/.notdef}rp /i 
/.notdef /k 3{/.notdef}rp /o 2{/.notdef}rp /r /s /t 
/u /v /w 136{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
237.415 17.0259 mo
(source)
[1.63049 2.09581 2.09579 1.39577 1.86101 0 ]xsh
235.3 21.8163 mo
(work=48)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
235.009 26.6067 mo
(I/O: 0->4)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
259.352 47.206 mo
259.352 44.2299 251.98 41.817 242.885 41.817 cv
233.791 41.817 226.418 44.2299 226.418 47.206 cv
226.418 50.1819 233.791 52.595 242.885 52.595 cv
251.98 52.595 259.352 50.1819 259.352 47.206 cv
@
259.352 47.206 mo
259.352 44.2299 251.98 41.817 242.885 41.817 cv
233.791 41.817 226.418 44.2299 226.418 47.206 cv
226.418 50.1819 233.791 52.595 242.885 52.595 cv
251.98 52.595 259.352 50.1819 259.352 47.206 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero 3{/.notdef}rp /four 3{/.notdef}rp /eight /.notdef 
/colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp /C /D 4{/.notdef}rp 
/I 5{/.notdef}rp /O 4{/.notdef}rp /T 13{/.notdef}rp /b /c 
/d /e 3{/.notdef}rp /i /.notdef /k 2{/.notdef}rp /n 
/o 2{/.notdef}rp /r /s /t /u /v /w 
136{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
229.556 48.1639 mo
(roundrobin\(8,8\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.0479 2.09581 0 ]xsh
242.885 31.038 mo
242.885 33.733 242.885 36.4279 242.885 39.122 cv
@
242.287 38.8229 mo
242.885 41.817 li
243.784 38.8229 li
cp
@
242.287 38.8229 mo
242.885 41.817 li
243.784 38.8229 li
f
239.592 73.5529 mo
239.592 67.931 233.828 63.374 226.718 63.374 cv
219.608 63.374 213.844 67.931 213.844 73.5529 cv
213.844 79.175 219.608 83.733 226.718 83.733 cv
233.828 83.733 239.592 79.175 239.592 73.5529 cv
@
239.592 73.5529 mo
239.592 67.931 233.828 63.374 226.718 63.374 cv
219.608 63.374 213.844 67.931 213.844 73.5529 cv
213.844 79.175 219.608 83.733 226.718 83.733 cv
233.828 83.733 239.592 79.175 239.592 73.5529 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 49 /one put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one 2{/.notdef}rp /four 3{/.notdef}rp /eight 
/.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp /C /D 
4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp /T 13{/.notdef}rp /b 
/c /d /e 3{/.notdef}rp /i /.notdef /k 2{/.notdef}rp 
/n /o 2{/.notdef}rp /r /s /t /u /v 
/w /.notdef /y 134{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
220.198 69.7209 mo
(Identity)
[1.39577 2.09581 1.86101 2.09579 1.16527 1.16525 1.16527 0 ]xsh
219.133 74.5113 mo
(work=48)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
218.842 79.3017 mo
(I/O: 1->1)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
239.592 52.595 mo
238.095 55.29 235.999 58.5829 233.903 61.577 cv
@
233.305 61.278 mo
232.406 64.272 li
234.502 61.877 li
cp
@
233.305 61.278 mo
232.406 64.272 li
234.502 61.877 li
f
271.927 73.5529 mo
271.927 67.931 265.895 63.374 258.454 63.374 cv
251.013 63.374 244.981 67.931 244.981 73.5529 cv
244.981 79.175 251.013 83.733 258.454 83.733 cv
265.895 83.733 271.927 79.175 271.927 73.5529 cv
@
271.927 73.5529 mo
271.927 67.931 265.895 63.374 258.454 63.374 cv
251.013 63.374 244.981 67.931 244.981 73.5529 cv
244.981 79.175 251.013 83.733 258.454 83.733 cv
265.895 83.733 271.927 79.175 271.927 73.5529 cv
.882 .953 .973 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 97 /a put
dup 108 /l put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one 2{/.notdef}rp /four 3{/.notdef}rp /eight 
/.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp /C /D 
4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp /T 12{/.notdef}rp /a 
/b /c /d /e 3{/.notdef}rp /i /.notdef /k 
/l /.notdef /n /o 2{/.notdef}rp /r /s /t 
/u /v /w /.notdef /y 134{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
251.821 69.7209 mo
(reversal)
[1.39577 1.86101 2.09581 1.86099 1.39578 1.63049 1.86102 0 ]xsh
249.822 74.5113 mo
(work=104)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 2.09579 0 ]xsh
250.578 79.3017 mo
(I/O: 8->8)
[1.39577 1.16527 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
246.179 52.595 mo
247.676 55.29 249.772 58.5829 251.568 61.577 cv
@
250.969 61.877 mo
253.065 64.272 li
252.167 61.278 li
cp
@
250.969 61.877 mo
253.065 64.272 li
252.167 61.278 li
f
259.352 99.9 mo
259.352 96.924 251.98 94.5109 242.885 94.5109 cv
233.791 94.5109 226.418 96.924 226.418 99.9 cv
226.418 102.877 233.791 105.29 242.885 105.29 cv
251.98 105.29 259.352 102.877 259.352 99.9 cv
@
259.352 99.9 mo
259.352 96.924 251.98 94.5109 242.885 94.5109 cv
233.791 94.5109 226.418 96.924 226.418 99.9 cv
226.418 102.877 233.791 105.29 242.885 105.29 cv
251.98 105.29 259.352 102.877 259.352 99.9 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
229.556 100.858 mo
(roundrobin\(8,8\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.0479 2.09581 0 ]xsh
257.855 126.248 mo
257.855 120.626 251.153 116.068 242.885 116.068 cv
234.618 116.068 227.915 120.626 227.915 126.248 cv
227.915 131.87 234.618 136.427 242.885 136.427 cv
251.153 136.427 257.855 131.87 257.855 126.248 cv
@
257.855 126.248 mo
257.855 120.626 251.153 116.068 242.885 116.068 cv
234.618 116.068 227.915 120.626 227.915 126.248 cv
227.915 131.87 234.618 136.427 242.885 136.427 cv
251.153 136.427 257.855 131.87 257.855 126.248 cv
.843 .18 .157 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
/six <1C60D8A8C9B7A73DF81BACD811429F931042E1295F1D2320E46DE79DF7
47FCAABFFD92F045A475E54E15C8E93ECB3BD59C8545C0EF45BF22429615FC68
5C033A02F070B2C6D7D737838C1853D297AC8915086E73952A7A9847D6F588AB
17767CC39CB62607242BC1B7BFF5295CEB6C03755CD9B53DA2> |-
/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C86
82F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CB
A64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762
A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A
9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61F
B9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 50 /two put
dup 54 /six put
dup 109 /m put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /.notdef 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp 
/T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i /.notdef /k /l /m /n /o 2{/.notdef}rp 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
235.32 122.415 mo
(decimate)
[2.09579 1.86101 1.86101 1.16527 3.26106 1.86101 1.16527 0 ]xsh
234.253 127.205 mo
(work=240)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 2.09579 0 ]xsh
232.914 131.996 mo
(I/O: 16->16)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 2.09579 1.39578 2.36404 2.09579 0 ]xsh
242.885 105.29 mo
242.885 107.385 242.885 110.379 242.885 113.074 cv
@
242.287 113.074 mo
242.885 116.068 li
243.784 113.074 li
cp
@
242.287 113.074 mo
242.885 116.068 li
243.784 113.074 li
f
232.406 82.835 mo
234.203 85.829 236.299 89.421 238.095 92.116 cv
@
237.496 92.415 mo
239.592 94.5109 li
238.694 91.517 li
cp
@
237.496 92.415 mo
239.592 94.5109 li
238.694 91.517 li
f
253.065 82.835 mo
251.269 85.829 249.173 89.122 247.376 92.116 cv
@
246.778 91.517 mo
246.179 94.5109 li
248.275 92.116 li
cp
@
246.778 91.517 mo
246.179 94.5109 li
248.275 92.116 li
f
259.352 152.595 mo
259.352 149.618 251.98 147.206 242.885 147.206 cv
233.791 147.206 226.418 149.618 226.418 152.595 cv
226.418 155.571 233.791 157.984 242.885 157.984 cv
251.98 157.984 259.352 155.571 259.352 152.595 cv
@
259.352 152.595 mo
259.352 149.618 251.98 147.206 242.885 147.206 cv
233.791 147.206 226.418 149.618 226.418 152.595 cv
226.418 155.571 233.791 157.984 242.885 157.984 cv
251.98 157.984 259.352 155.571 259.352 152.595 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
229.556 153.553 mo
(roundrobin\(8,8\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.0479 2.09581 0 ]xsh
242.885 136.427 mo
242.885 139.122 242.885 141.816 242.885 144.511 cv
@
242.287 144.212 mo
242.885 147.206 li
243.784 144.212 li
cp
@
242.287 144.212 mo
242.885 147.206 li
243.784 144.212 li
f
234.203 180.14 mo
234.203 177.163 226.83 174.75 217.736 174.75 cv
208.641 174.75 201.269 177.163 201.269 180.14 cv
201.269 183.116 208.641 185.529 217.736 185.529 cv
226.83 185.529 234.203 183.116 234.203 180.14 cv
@
234.203 180.14 mo
234.203 177.163 226.83 174.75 217.736 174.75 cv
208.641 174.75 201.269 177.163 201.269 180.14 cv
201.269 183.116 208.641 185.529 217.736 185.529 cv
226.83 185.529 234.203 183.116 234.203 180.14 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
204.407 181.098 mo
(roundrobin\(4,4\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.04791 2.09579 0 ]xsh
238.095 157.685 mo
234.203 162.176 228.814 168.164 224.323 172.655 cv
@
224.023 172.056 mo
222.526 174.75 li
224.921 172.954 li
cp
@
224.023 172.056 mo
222.526 174.75 li
224.921 172.954 li
f
284.801 180.14 mo
284.801 177.163 277.429 174.75 268.334 174.75 cv
259.24 174.75 251.867 177.163 251.867 180.14 cv
251.867 183.116 259.24 185.529 268.334 185.529 cv
277.429 185.529 284.801 183.116 284.801 180.14 cv
@
284.801 180.14 mo
284.801 177.163 277.429 174.75 268.334 174.75 cv
259.24 174.75 251.867 177.163 251.867 180.14 cv
251.867 183.116 259.24 185.529 268.334 185.529 cv
277.429 185.529 284.801 183.116 284.801 180.14 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
255.005 181.098 mo
(roundrobin\(4,4\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39578 2.09579 
1.04788 2.09579 0 ]xsh
247.676 157.685 mo
251.568 162.176 257.257 168.164 261.748 172.655 cv
@
261.149 172.954 mo
263.544 174.75 li
262.047 172.056 li
cp
@
261.149 172.954 mo
263.544 174.75 li
262.047 172.056 li
f
275.52 607.683 mo
275.52 604.706 268.147 602.294 259.053 602.294 cv
249.959 602.294 242.586 604.706 242.586 607.683 cv
242.586 610.659 249.959 613.072 259.053 613.072 cv
268.147 613.072 275.52 610.659 275.52 607.683 cv
@
275.52 607.683 mo
275.52 604.706 268.147 602.294 259.053 602.294 cv
249.959 602.294 242.586 604.706 242.586 607.683 cv
242.586 610.659 249.959 613.072 259.053 613.072 cv
268.147 613.072 275.52 610.659 275.52 607.683 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
245.724 608.641 mo
(roundrobin\(1,1\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09579 1.16528 2.09579 1.39578 2.09579 
1.04788 2.09579 0 ]xsh
272.825 634.03 mo
272.825 628.408 266.659 623.85 259.053 623.85 cv
251.447 623.85 245.281 628.408 245.281 634.03 cv
245.281 639.652 251.447 644.21 259.053 644.21 cv
266.659 644.21 272.825 639.652 272.825 634.03 cv
@
272.825 634.03 mo
272.825 628.408 266.659 623.85 259.053 623.85 cv
251.447 623.85 245.281 628.408 245.281 634.03 cv
245.281 639.652 251.447 644.21 259.053 644.21 cv
266.659 644.21 272.825 639.652 272.825 634.03 cv
.761 .976 1 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
255.559 630.198 mo
(sink)
[1.63051 1.16525 2.09579 0 ]xsh
250.42 634.988 mo
(work=128)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 2.09579 0 ]xsh
250.129 639.779 mo
(I/O: 16->0)
[1.39577 1.16527 3.02628 1.16527 1.04788 2.09583 2.09579 1.39575 2.36404 0 ]xsh
259.053 613.072 mo
259.053 615.168 259.053 618.162 259.053 620.856 cv
@
258.454 620.856 mo
259.053 623.85 li
259.951 620.856 li
cp
@
258.454 620.856 mo
259.053 623.85 li
259.951 620.856 li
f
203.065 206.487 mo
203.065 200.865 197.301 196.307 190.191 196.307 cv
183.081 196.307 177.317 200.865 177.317 206.487 cv
177.317 212.109 183.081 216.666 190.191 216.666 cv
197.301 216.666 203.065 212.109 203.065 206.487 cv
@
203.065 206.487 mo
203.065 200.865 197.301 196.307 190.191 196.307 cv
183.081 196.307 177.317 200.865 177.317 206.487 cv
177.317 212.109 183.081 216.666 190.191 216.666 cv
197.301 216.666 203.065 212.109 203.065 206.487 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
183.671 202.654 mo
(Identity)
[1.39577 2.09581 1.86101 2.09579 1.16527 1.16525 1.16527 0 ]xsh
182.606 207.444 mo
(work=24)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
182.315 212.235 mo
(I/O: 1->1)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
212.347 185.229 mo
208.754 188.822 204.263 193.313 200.071 197.205 cv
@
200.071 196.008 mo
198.574 198.702 li
201.269 197.205 li
cp
@
200.071 196.008 mo
198.574 198.702 li
201.269 197.205 li
f
234.203 206.487 mo
234.203 200.865 228.439 196.307 221.329 196.307 cv
214.218 196.307 208.454 200.865 208.454 206.487 cv
208.454 212.109 214.218 216.666 221.329 216.666 cv
228.439 216.666 234.203 212.109 234.203 206.487 cv
@
234.203 206.487 mo
234.203 200.865 228.439 196.307 221.329 196.307 cv
214.218 196.307 208.454 200.865 208.454 206.487 cv
208.454 212.109 214.218 216.666 221.329 216.666 cv
228.439 216.666 234.203 212.109 234.203 206.487 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73DB9D92E2C498F1C8C272174C48D3E3EA8F27C6E6BA
93064621D133D030C551A42025686691A783FB90A2D496BEF06790AC79A6878D
99BC23CD14D9CFD812148CC847ABD0CF7E73A1A9D5ACE6E2E3BBFD4DD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp 
/T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i /.notdef /k /l /m /n /o 2{/.notdef}rp 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
214.695 202.654 mo
(reversal)
[1.39577 1.86101 2.09581 1.86101 1.39577 1.63049 1.86101 0 ]xsh
213.744 207.444 mo
(work=52)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
213.452 212.235 mo
(I/O: 4->4)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
218.335 185.529 mo
218.933 187.924 219.233 191.217 219.532 194.211 cv
@
218.634 193.313 mo
219.832 196.307 li
220.131 193.313 li
cp
@
218.634 193.313 mo
219.832 196.307 li
220.131 193.313 li
f
210.251 232.834 mo
210.251 229.858 202.878 227.445 193.784 227.445 cv
184.689 227.445 177.317 229.858 177.317 232.834 cv
177.317 235.81 184.689 238.223 193.784 238.223 cv
202.878 238.223 210.251 235.81 210.251 232.834 cv
@
210.251 232.834 mo
210.251 229.858 202.878 227.445 193.784 227.445 cv
184.689 227.445 177.317 229.858 177.317 232.834 cv
177.317 235.81 184.689 238.223 193.784 238.223 cv
202.878 238.223 210.251 235.81 210.251 232.834 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
180.455 233.792 mo
(roundrobin\(4,4\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.04791 2.09579 0 ]xsh
202.466 259.181 mo
202.466 253.559 196.434 249.002 188.993 249.002 cv
181.552 249.002 175.52 253.559 175.52 259.181 cv
175.52 264.803 181.552 269.361 188.993 269.361 cv
196.434 269.361 202.466 264.803 202.466 259.181 cv
@
202.466 259.181 mo
202.466 253.559 196.434 249.002 188.993 249.002 cv
181.552 249.002 175.52 253.559 175.52 259.181 cv
175.52 264.803 181.552 269.361 188.993 269.361 cv
196.434 269.361 202.466 264.803 202.466 259.181 cv
.761 .976 1 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
181.428 255.349 mo
(decimate)
[2.09579 1.86101 1.86101 1.16527 3.26106 1.86101 1.16527 0 ]xsh
180.361 260.139 mo
(work=120)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 2.09579 0 ]xsh
181.118 264.93 mo
(I/O: 8->8)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
192.886 238.223 mo
192.287 240.618 191.688 243.912 191.089 246.906 cv
@
190.49 246.008 mo
190.79 249.002 li
191.987 246.008 li
cp
@
190.49 246.008 mo
190.79 249.002 li
191.987 246.008 li
f
191.688 216.666 mo
191.987 219.361 192.287 222.056 192.586 224.75 cv
@
191.688 224.75 mo
193.185 227.445 li
193.185 224.451 li
cp
@
191.688 224.75 mo
193.185 227.445 li
193.185 224.451 li
f
212.945 214.271 mo
209.053 218.163 204.862 222.355 200.969 225.948 cv
@
200.67 225.05 mo
199.173 227.744 li
201.868 226.247 li
cp
@
200.67 225.05 mo
199.173 227.744 li
201.868 226.247 li
f
203.065 285.528 mo
203.065 282.552 195.693 280.139 186.598 280.139 cv
177.504 280.139 170.131 282.552 170.131 285.528 cv
170.131 288.505 177.504 290.918 186.598 290.918 cv
195.693 290.918 203.065 288.505 203.065 285.528 cv
@
203.065 285.528 mo
203.065 282.552 195.693 280.139 186.598 280.139 cv
177.504 280.139 170.131 282.552 170.131 285.528 cv
170.131 288.505 177.504 290.918 186.598 290.918 cv
195.693 290.918 203.065 288.505 203.065 285.528 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
173.269 286.487 mo
(roundrobin\(4,4\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.04791 2.09579 0 ]xsh
188.095 269.361 mo
187.796 272.055 187.796 274.75 187.496 277.445 cv
@
186.898 277.145 mo
187.197 280.139 li
188.395 277.145 li
cp
@
186.898 277.145 mo
187.197 280.139 li
188.395 277.145 li
f
141.988 313.073 mo
141.988 310.097 134.615 307.684 125.521 307.684 cv
116.426 307.684 109.054 310.097 109.054 313.073 cv
109.054 316.05 116.426 318.462 125.521 318.462 cv
134.615 318.462 141.988 316.05 141.988 313.073 cv
@
141.988 313.073 mo
141.988 310.097 134.615 307.684 125.521 307.684 cv
116.426 307.684 109.054 310.097 109.054 313.073 cv
109.054 316.05 116.426 318.462 125.521 318.462 cv
134.615 318.462 141.988 316.05 141.988 313.073 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
112.191 314.031 mo
(roundrobin\(2,2\))
[1.39577 2.09579 2.0958 2.0958 2.09579 1.39577 2.0958 2.09579 1.16527 2.09579 1.39577 2.09581 
1.0479 2.09579 0 ]xsh
172.526 288.522 mo
166.538 289.72 160.251 291.516 156.059 293.313 cv
149.772 296.307 141.089 301.995 134.503 306.786 cv
@
134.503 305.888 mo
132.407 308.283 li
135.401 307.085 li
cp
@
134.503 305.888 mo
132.407 308.283 li
135.401 307.085 li
f
203.065 313.073 mo
203.065 310.097 195.693 307.684 186.598 307.684 cv
177.504 307.684 170.131 310.097 170.131 313.073 cv
170.131 316.05 177.504 318.462 186.598 318.462 cv
195.693 318.462 203.065 316.05 203.065 313.073 cv
@
203.065 313.073 mo
203.065 310.097 195.693 307.684 186.598 307.684 cv
177.504 307.684 170.131 310.097 170.131 313.073 cv
170.131 316.05 177.504 318.462 186.598 318.462 cv
195.693 318.462 203.065 316.05 203.065 313.073 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
173.269 314.031 mo
(roundrobin\(2,2\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.04791 2.09579 0 ]xsh
186.598 290.918 mo
186.598 294.81 186.598 300.498 186.598 304.989 cv
@
185.999 304.69 mo
186.598 307.684 li
187.496 304.69 li
cp
@
185.999 304.69 mo
186.598 307.684 li
187.496 304.69 li
f
215.939 554.988 mo
215.939 552.012 208.567 549.599 199.472 549.599 cv
190.378 549.599 183.005 552.012 183.005 554.988 cv
183.005 557.965 190.378 560.378 199.472 560.378 cv
208.567 560.378 215.939 557.965 215.939 554.988 cv
@
215.939 554.988 mo
215.939 552.012 208.567 549.599 199.472 549.599 cv
190.378 549.599 183.005 552.012 183.005 554.988 cv
183.005 557.965 190.378 560.378 199.472 560.378 cv
208.567 560.378 215.939 557.965 215.939 554.988 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
186.143 555.946 mo
(roundrobin\(1,1\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.0479 2.09581 0 ]xsh
203.963 560.378 mo
211.149 568.761 225.52 585.527 235.101 593.91 cv
238.095 596.306 242.586 599.3 247.077 601.695 cv
@
246.778 602.294 mo
249.772 603.192 li
247.376 601.096 li
cp
@
246.778 602.294 mo
249.772 603.192 li
247.376 601.096 li
f
110.85 339.42 mo
110.85 333.798 105.086 329.241 97.9758 329.241 cv
90.8656 329.241 85.1016 333.798 85.1016 339.42 cv
85.1016 345.042 90.8656 349.6 97.9758 349.6 cv
105.086 349.6 110.85 345.042 110.85 339.42 cv
@
110.85 339.42 mo
110.85 333.798 105.086 329.241 97.9758 329.241 cv
90.8656 329.241 85.1016 333.798 85.1016 339.42 cv
85.1016 345.042 90.8656 349.6 97.9758 349.6 cv
105.086 349.6 110.85 345.042 110.85 339.42 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
91.4558 335.588 mo
(Identity)
[1.39577 2.09579 1.86101 2.0958 1.16526 1.16527 1.16527 0 ]xsh
90.3912 340.378 mo
(work=12)
[3.02627 2.0958 1.39577 2.09579 2.36404 2.0958 0 ]xsh
90.0998 345.169 mo
(I/O: 1->1)
[1.39577 1.16526 3.02628 1.16526 1.0479 2.0958 1.39577 2.36404 0 ]xsh
120.131 318.163 mo
116.539 321.756 112.048 326.247 107.856 330.139 cv
@
107.856 328.941 mo
106.359 331.636 li
109.054 330.139 li
cp
@
107.856 328.941 mo
106.359 331.636 li
109.054 330.139 li
f
141.988 339.42 mo
141.988 333.798 136.224 329.241 129.113 329.241 cv
122.003 329.241 116.239 333.798 116.239 339.42 cv
116.239 345.042 122.003 349.6 129.113 349.6 cv
136.224 349.6 141.988 345.042 141.988 339.42 cv
@
141.988 339.42 mo
141.988 333.798 136.224 329.241 129.113 329.241 cv
122.003 329.241 116.239 333.798 116.239 339.42 cv
116.239 345.042 122.003 349.6 129.113 349.6 cv
136.224 349.6 141.988 345.042 141.988 339.42 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
122.48 335.588 mo
(reversal)
[1.39577 1.86101 2.09579 1.86101 1.39577 1.63051 1.86101 0 ]xsh
121.529 340.378 mo
(work=26)
[3.02627 2.0958 1.39577 2.09579 2.36404 2.09579 0 ]xsh
121.237 345.169 mo
(I/O: 2->2)
[1.39577 1.16526 3.02628 1.16526 1.0479 2.09581 1.39577 2.36404 0 ]xsh
126.119 318.462 mo
126.718 320.858 127.018 324.151 127.317 327.145 cv
@
126.419 326.247 mo
127.616 329.241 li
127.916 326.247 li
cp
@
126.419 326.247 mo
127.616 329.241 li
127.916 326.247 li
f
128.215 365.768 mo
128.215 362.791 120.843 360.378 111.748 360.378 cv
102.654 360.378 95.2812 362.791 95.2812 365.768 cv
95.2812 368.744 102.654 371.157 111.748 371.157 cv
120.843 371.157 128.215 368.744 128.215 365.768 cv
@
128.215 365.768 mo
128.215 362.791 120.843 360.378 111.748 360.378 cv
102.654 360.378 95.2812 362.791 95.2812 365.768 cv
95.2812 368.744 102.654 371.157 111.748 371.157 cv
120.843 371.157 128.215 368.744 128.215 365.768 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
98.419 366.726 mo
(roundrobin\(2,2\))
[1.39577 2.09579 2.0958 2.0958 2.09579 1.39577 2.0958 2.09579 1.16527 2.09579 1.39577 2.0958 
1.0479 2.0958 0 ]xsh
124.622 392.115 mo
124.622 386.493 118.858 381.935 111.748 381.935 cv
104.638 381.935 98.874 386.493 98.874 392.115 cv
98.874 397.737 104.638 402.294 111.748 402.294 cv
118.858 402.294 124.622 397.737 124.622 392.115 cv
@
124.622 392.115 mo
124.622 386.493 118.858 381.935 111.748 381.935 cv
104.638 381.935 98.874 386.493 98.874 392.115 cv
98.874 397.737 104.638 402.294 111.748 402.294 cv
118.858 402.294 124.622 397.737 124.622 392.115 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
104.182 388.282 mo
(decimate)
[2.0958 1.86101 1.86101 1.16526 3.26106 1.86101 1.16527 0 ]xsh
104.163 393.072 mo
(work=60)
[3.02627 2.0958 1.39577 2.09579 2.36404 2.0958 0 ]xsh
103.872 397.863 mo
(I/O: 4->4)
[1.39577 1.16526 3.02628 1.16526 1.0479 2.0958 1.39577 2.36404 0 ]xsh
111.748 371.157 mo
111.748 373.253 111.748 376.247 111.748 378.941 cv
@
111.149 378.941 mo
111.748 381.935 li
112.646 378.941 li
cp
@
111.149 378.941 mo
111.748 381.935 li
112.646 378.941 li
f
103.066 349.001 mo
104.563 351.995 106.359 355.289 107.856 357.983 cv
@
106.958 357.983 mo
109.054 360.378 li
108.455 357.384 li
cp
@
106.958 357.983 mo
109.054 360.378 li
108.455 357.384 li
f
123.125 348.402 mo
121.03 351.696 118.634 355.289 116.838 358.283 cv
@
116.539 357.384 mo
115.341 360.378 li
117.736 358.283 li
cp
@
116.539 357.384 mo
115.341 360.378 li
117.736 358.283 li
f
128.215 418.462 mo
128.215 415.486 120.843 413.073 111.748 413.073 cv
102.654 413.073 95.2812 415.486 95.2812 418.462 cv
95.2812 421.438 102.654 423.851 111.748 423.851 cv
120.843 423.851 128.215 421.438 128.215 418.462 cv
@
128.215 418.462 mo
128.215 415.486 120.843 413.073 111.748 413.073 cv
102.654 413.073 95.2812 415.486 95.2812 418.462 cv
95.2812 421.438 102.654 423.851 111.748 423.851 cv
120.843 423.851 128.215 421.438 128.215 418.462 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
98.419 419.42 mo
(roundrobin\(2,2\))
[1.39577 2.09579 2.0958 2.0958 2.09579 1.39577 2.0958 2.09579 1.16527 2.09579 1.39577 2.0958 
1.0479 2.0958 0 ]xsh
111.748 402.294 mo
111.748 404.989 111.748 407.684 111.748 410.378 cv
@
111.149 410.079 mo
111.748 413.073 li
112.646 410.079 li
cp
@
111.149 410.079 mo
111.748 413.073 li
112.646 410.079 li
f
99.4728 444.809 mo
99.4728 439.187 91.6981 434.63 82.1076 434.63 cv
72.5171 434.63 64.7424 439.187 64.7424 444.809 cv
64.7424 450.431 72.5171 454.989 82.1076 454.989 cv
91.6981 454.989 99.4728 450.431 99.4728 444.809 cv
@
99.4728 444.809 mo
99.4728 439.187 91.6981 434.63 82.1076 434.63 cv
72.5171 434.63 64.7424 439.187 64.7424 444.809 cv
64.7424 450.431 72.5171 454.989 82.1076 454.989 cv
91.6981 454.989 99.4728 450.431 99.4728 444.809 cv
.675 .855 .91 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7EF322B10A2A8DE6EF0A6CE60E86B1DF5C68015667A2338DB
07BCF91C9D8DCCB5967A656E7EB6651B3E305A306DA1BB8C1BAEECFC60DC00D8
8AEC56E3DF7455D57CB9BB0CC9A32704D4F0F1C39C5B2EDC70F42754CACE7253
FF5FDAE4B675FFF987E22613E24B8956EFA9C2C5B9AC406D966F459601B2046A
C9E54A3BB37C45EDEB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 
3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /w /.notdef 
/y 134{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
69.6482 440.977 mo
(TwoPointDCT)
[2.56104 3.02628 2.09579 2.33053 2.0958 1.16526 2.0958 1.16527 3.02627 2.79576 0 ]xsh
74.523 445.767 mo
(work=80)
[3.02627 2.0958 1.39577 2.09579 2.36404 2.0958 0 ]xsh
74.2317 450.558 mo
(I/O: 2->2)
[1.39577 1.16526 3.02628 1.16526 1.0479 2.0958 1.39577 2.36404 0 ]xsh
105.461 423.552 mo
103.664 425.049 101.868 426.246 100.371 427.444 cv
98.2752 429.54 95.5806 432.234 92.886 434.63 cv
@
92.886 433.432 mo
91.389 436.127 li
94.0836 434.63 li
cp
@
92.886 433.432 mo
91.389 436.127 li
94.0836 434.63 li
f
139.592 444.809 mo
139.592 439.187 131.818 434.63 122.227 434.63 cv
112.637 434.63 104.862 439.187 104.862 444.809 cv
104.862 450.431 112.637 454.989 122.227 454.989 cv
131.818 454.989 139.592 450.431 139.592 444.809 cv
@
139.592 444.809 mo
139.592 439.187 131.818 434.63 122.227 434.63 cv
112.637 434.63 104.862 439.187 104.862 444.809 cv
104.862 450.431 112.637 454.989 122.227 454.989 cv
131.818 454.989 139.592 450.431 139.592 444.809 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
109.768 440.977 mo
(TwoPointDCT)
[2.56104 3.02628 2.09579 2.33053 2.0958 1.16526 2.0958 1.16527 3.02627 2.79576 0 ]xsh
114.643 445.767 mo
(work=80)
[3.02627 2.0958 1.39577 2.09579 2.36404 2.0958 0 ]xsh
114.351 450.558 mo
(I/O: 2->2)
[1.39577 1.16526 3.02628 1.16526 1.0479 2.0958 1.39577 2.36404 0 ]xsh
113.844 423.851 mo
115.042 426.246 115.94 429.24 117.137 431.935 cv
@
116.539 432.534 mo
118.335 434.929 li
118.036 431.935 li
cp
@
116.539 432.534 mo
118.335 434.929 li
118.036 431.935 li
f
138.694 502.294 mo
138.694 499.318 131.322 496.905 122.227 496.905 cv
113.133 496.905 105.76 499.318 105.76 502.294 cv
105.76 505.27 113.133 507.683 122.227 507.683 cv
131.322 507.683 138.694 505.27 138.694 502.294 cv
@
138.694 502.294 mo
138.694 499.318 131.322 496.905 122.227 496.905 cv
113.133 496.905 105.76 499.318 105.76 502.294 cv
105.76 505.27 113.133 507.683 122.227 507.683 cv
131.322 507.683 138.694 505.27 138.694 502.294 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
108.898 503.252 mo
(roundrobin\(1,1\))
[1.39577 2.09579 2.0958 2.0958 2.09579 1.39577 2.0958 2.09579 1.16527 2.09579 1.39577 2.09581 
1.0479 2.09579 0 ]xsh
124.323 507.683 mo
127.916 516.965 136.299 534.929 145.281 541.216 cv
153.664 547.204 169.233 550.497 181.209 552.893 cv
@
180.91 553.491 mo
183.904 553.192 li
180.91 551.994 li
cp
@
180.91 553.491 mo
183.904 553.192 li
180.91 551.994 li
f
85.401 454.989 mo
88.9938 465.168 94.6824 480.438 100.371 488.522 cv
102.167 491.516 106.359 494.21 109.952 496.306 cv
@
109.652 496.905 mo
112.646 497.803 li
110.251 495.707 li
cp
@
109.652 496.905 mo
112.646 497.803 li
110.251 495.707 li
f
135.101 475.947 mo
135.101 470.325 129.337 465.767 122.227 465.767 cv
115.117 465.767 109.353 470.325 109.353 475.947 cv
109.353 481.569 115.117 486.126 122.227 486.126 cv
129.337 486.126 135.101 481.569 135.101 475.947 cv
@
135.101 475.947 mo
135.101 470.325 129.337 465.767 122.227 465.767 cv
115.117 465.767 109.353 470.325 109.353 475.947 cv
109.353 481.569 115.117 486.126 122.227 486.126 cv
129.337 486.126 135.101 481.569 135.101 475.947 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B7A73DD670D8CCCBFBC4E258D7CAA3ED17D069C025C1A2420A
81D4B3EAD7110946DAC3BA40217DDD18B672D1C19269266B39D87F9C1DDA90BD
8FC71EBFE3B2169703196A9FC02F9EA267A90B94DB1FAA5C105A1B22ABB76205
ADA50D456170C13F6F28FC77F3978776E97B76A3DEF1976915B787070DC57673
F3C0FA2B4E9DEFEF7147D4269144499ACAFBAFD930E1A038534DF3D883A96117
05279F3EC76B84BD5055C0FF3A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 
3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /w /x 
/y 134{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
116.288 472.114 mo
(outmix)
[2.0958 2.09579 1.16527 3.26106 1.16527 0 ]xsh
114.643 476.904 mo
(work=21)
[3.02627 2.0958 1.39577 2.09579 2.36404 2.0958 0 ]xsh
114.351 481.695 mo
(I/O: 2->2)
[1.39577 1.16526 3.02628 1.16526 1.0479 2.0958 1.39577 2.36404 0 ]xsh
122.227 454.989 mo
122.227 457.384 122.227 460.079 122.227 462.773 cv
@
121.628 462.773 mo
122.227 465.767 li
123.125 462.773 li
cp
@
121.628 462.773 mo
122.227 465.767 li
123.125 462.773 li
f
122.227 486.126 mo
122.227 488.821 122.227 491.516 122.227 494.21 cv
@
121.628 493.911 mo
122.227 496.905 li
123.125 493.911 li
cp
@
121.628 493.911 mo
122.227 496.905 li
123.125 493.911 li
f
186.299 339.42 mo
186.299 333.798 180.535 329.241 173.425 329.241 cv
166.314 329.241 160.55 333.798 160.55 339.42 cv
160.55 345.042 166.314 349.6 173.425 349.6 cv
180.535 349.6 186.299 345.042 186.299 339.42 cv
@
186.299 339.42 mo
186.299 333.798 180.535 329.241 173.425 329.241 cv
166.314 329.241 160.55 333.798 160.55 339.42 cv
160.55 345.042 166.314 349.6 173.425 349.6 cv
180.535 349.6 186.299 345.042 186.299 339.42 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
166.905 335.588 mo
(Identity)
[1.39577 2.09581 1.86101 2.09579 1.16527 1.16525 1.16527 0 ]xsh
165.84 340.378 mo
(work=12)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
165.549 345.169 mo
(I/O: 1->1)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
183.904 318.462 mo
182.407 321.157 180.61 324.75 179.113 328.043 cv
@
178.814 326.846 mo
178.215 329.84 li
180.311 327.444 li
cp
@
178.814 326.846 mo
178.215 329.84 li
180.311 327.444 li
f
217.436 339.42 mo
217.436 333.798 211.672 329.241 204.562 329.241 cv
197.452 329.241 191.688 333.798 191.688 339.42 cv
191.688 345.042 197.452 349.6 204.562 349.6 cv
211.672 349.6 217.436 345.042 217.436 339.42 cv
@
217.436 339.42 mo
217.436 333.798 211.672 329.241 204.562 329.241 cv
197.452 329.241 191.688 333.798 191.688 339.42 cv
191.688 345.042 197.452 349.6 204.562 349.6 cv
211.672 349.6 217.436 345.042 217.436 339.42 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
197.929 335.588 mo
(reversal)
[1.39577 1.86101 2.09581 1.86101 1.39577 1.63049 1.86101 0 ]xsh
196.978 340.378 mo
(work=26)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
196.686 345.169 mo
(I/O: 2->2)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
190.191 318.462 mo
191.987 321.456 194.383 324.75 196.478 328.043 cv
@
195.88 328.343 mo
198.275 330.438 li
197.077 327.444 li
cp
@
195.88 328.343 mo
198.275 330.438 li
197.077 327.444 li
f
199.772 365.768 mo
199.772 362.791 192.399 360.378 183.305 360.378 cv
174.21 360.378 166.838 362.791 166.838 365.768 cv
166.838 368.744 174.21 371.157 183.305 371.157 cv
192.399 371.157 199.772 368.744 199.772 365.768 cv
@
199.772 365.768 mo
199.772 362.791 192.399 360.378 183.305 360.378 cv
174.21 360.378 166.838 362.791 166.838 365.768 cv
166.838 368.744 174.21 371.157 183.305 371.157 cv
192.399 371.157 199.772 368.744 199.772 365.768 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
169.976 366.726 mo
(roundrobin\(2,2\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.04791 2.09579 0 ]xsh
196.179 392.115 mo
196.179 386.493 190.415 381.935 183.305 381.935 cv
176.195 381.935 170.431 386.493 170.431 392.115 cv
170.431 397.737 176.195 402.294 183.305 402.294 cv
190.415 402.294 196.179 397.737 196.179 392.115 cv
@
196.179 392.115 mo
196.179 386.493 190.415 381.935 183.305 381.935 cv
176.195 381.935 170.431 386.493 170.431 392.115 cv
170.431 397.737 176.195 402.294 183.305 402.294 cv
190.415 402.294 196.179 397.737 196.179 392.115 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
175.739 388.282 mo
(decimate)
[2.09579 1.86101 1.86101 1.16527 3.26106 1.86101 1.16527 0 ]xsh
175.72 393.072 mo
(work=60)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
175.429 397.863 mo
(I/O: 4->4)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
183.305 371.157 mo
183.305 373.253 183.305 376.247 183.305 378.941 cv
@
182.706 378.941 mo
183.305 381.935 li
184.203 378.941 li
cp
@
182.706 378.941 mo
183.305 381.935 li
184.203 378.941 li
f
177.017 349.301 mo
178.215 351.995 179.113 354.989 180.311 357.684 cv
@
179.413 357.684 mo
181.209 360.378 li
180.91 357.384 li
cp
@
179.413 357.684 mo
181.209 360.378 li
180.91 357.384 li
f
197.676 348.103 mo
194.981 351.396 191.987 355.289 189.293 358.582 cv
@
188.993 357.983 mo
187.496 360.678 li
189.892 358.881 li
cp
@
188.993 357.983 mo
187.496 360.678 li
189.892 358.881 li
f
199.772 418.462 mo
199.772 415.486 192.399 413.073 183.305 413.073 cv
174.21 413.073 166.838 415.486 166.838 418.462 cv
166.838 421.438 174.21 423.851 183.305 423.851 cv
192.399 423.851 199.772 421.438 199.772 418.462 cv
@
199.772 418.462 mo
199.772 415.486 192.399 413.073 183.305 413.073 cv
174.21 413.073 166.838 415.486 166.838 418.462 cv
166.838 421.438 174.21 423.851 183.305 423.851 cv
192.399 423.851 199.772 421.438 199.772 418.462 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
169.976 419.42 mo
(roundrobin\(2,2\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.04791 2.09579 0 ]xsh
183.305 402.294 mo
183.305 404.989 183.305 407.684 183.305 410.378 cv
@
182.706 410.079 mo
183.305 413.073 li
184.203 410.079 li
cp
@
182.706 410.079 mo
183.305 413.073 li
184.203 410.079 li
f
189.293 444.809 mo
189.293 439.187 181.518 434.63 171.928 434.63 cv
162.337 434.63 154.562 439.187 154.562 444.809 cv
154.562 450.431 162.337 454.989 171.928 454.989 cv
181.518 454.989 189.293 450.431 189.293 444.809 cv
@
189.293 444.809 mo
189.293 439.187 181.518 434.63 171.928 434.63 cv
162.337 434.63 154.562 439.187 154.562 444.809 cv
154.562 450.431 162.337 454.989 171.928 454.989 cv
181.518 454.989 189.293 450.431 189.293 444.809 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
159.468 440.977 mo
(TwoPointDCT)
[2.56104 3.02628 2.09579 2.33054 2.09579 1.16527 2.09579 1.16527 3.02628 2.79576 0 ]xsh
164.343 445.767 mo
(work=80)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
164.051 450.558 mo
(I/O: 2->2)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
180.91 423.851 mo
179.712 426.546 178.514 429.839 177.017 433.133 cv
@
176.718 431.935 mo
176.119 434.929 li
178.215 432.534 li
cp
@
176.718 431.935 mo
176.119 434.929 li
178.215 432.534 li
f
229.412 444.809 mo
229.412 439.187 221.638 434.63 212.047 434.63 cv
202.457 434.63 194.682 439.187 194.682 444.809 cv
194.682 450.431 202.457 454.989 212.047 454.989 cv
221.638 454.989 229.412 450.431 229.412 444.809 cv
@
229.412 444.809 mo
229.412 439.187 221.638 434.63 212.047 434.63 cv
202.457 434.63 194.682 439.187 194.682 444.809 cv
194.682 450.431 202.457 454.989 212.047 454.989 cv
221.638 454.989 229.412 450.431 229.412 444.809 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
199.588 440.977 mo
(TwoPointDCT)
[2.56104 3.02628 2.09579 2.33054 2.09579 1.16527 2.09579 1.16527 3.02628 2.79576 0 ]xsh
204.463 445.767 mo
(work=80)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
204.171 450.558 mo
(I/O: 2->2)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
190.49 423.252 mo
192.287 424.749 194.383 426.246 195.58 427.444 cv
197.377 428.941 199.472 431.336 201.568 433.432 cv
@
201.269 434.031 mo
203.664 435.827 li
202.167 433.133 li
cp
@
201.269 434.031 mo
203.664 435.827 li
202.167 433.133 li
f
215.939 502.294 mo
215.939 499.318 208.567 496.905 199.472 496.905 cv
190.378 496.905 183.005 499.318 183.005 502.294 cv
183.005 505.27 190.378 507.683 199.472 507.683 cv
208.567 507.683 215.939 505.27 215.939 502.294 cv
@
215.939 502.294 mo
215.939 499.318 208.567 496.905 199.472 496.905 cv
190.378 496.905 183.005 499.318 183.005 502.294 cv
183.005 505.27 190.378 507.683 199.472 507.683 cv
208.567 507.683 215.939 505.27 215.939 502.294 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
186.143 503.252 mo
(roundrobin\(1,1\))
[1.39577 2.09581 2.09579 2.09579 2.09581 1.39577 2.09579 2.09581 1.16525 2.09581 1.39577 2.09579 
1.0479 2.09581 0 ]xsh
212.347 528.641 mo
212.347 523.019 206.583 518.462 199.472 518.462 cv
192.362 518.462 186.598 523.019 186.598 528.641 cv
186.598 534.263 192.362 538.821 199.472 538.821 cv
206.583 538.821 212.347 534.263 212.347 528.641 cv
@
212.347 528.641 mo
212.347 523.019 206.583 518.462 199.472 518.462 cv
192.362 518.462 186.598 523.019 186.598 528.641 cv
186.598 534.263 192.362 538.821 199.472 538.821 cv
206.583 538.821 212.347 534.263 212.347 528.641 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7A73DFE313D538903D2D688A80497AF19F58251B88346
588CB5A8F94928A032E7AE04ED687068FF5EFE684F47125CC227938E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
/six /seven /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 
3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /w /x 
/y 134{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
193.533 524.809 mo
(outmix)
[2.09579 2.09581 1.16525 3.26108 1.16525 0 ]xsh
191.888 529.599 mo
(work=47)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
191.596 534.39 mo
(I/O: 4->4)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
199.472 507.683 mo
199.472 509.779 199.472 512.773 199.472 515.468 cv
@
198.874 515.468 mo
199.472 518.462 li
200.371 515.468 li
cp
@
198.874 515.468 mo
199.472 518.462 li
200.371 515.468 li
f
175.82 454.689 mo
180.011 464.57 185.999 479.54 190.191 488.522 cv
191.089 490.318 192.287 492.414 193.784 494.51 cv
@
193.185 494.809 mo
195.58 496.905 li
194.383 493.911 li
cp
@
193.185 494.809 mo
195.58 496.905 li
194.383 493.911 li
f
222.526 475.947 mo
222.526 470.325 216.762 465.767 209.652 465.767 cv
202.542 465.767 196.778 470.325 196.778 475.947 cv
196.778 481.569 202.542 486.126 209.652 486.126 cv
216.762 486.126 222.526 481.569 222.526 475.947 cv
@
222.526 475.947 mo
222.526 470.325 216.762 465.767 209.652 465.767 cv
202.542 465.767 196.778 470.325 196.778 475.947 cv
196.778 481.569 202.542 486.126 209.652 486.126 cv
216.762 486.126 222.526 481.569 222.526 475.947 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
203.713 472.114 mo
(outmix)
[2.09579 2.09581 1.16525 3.26108 1.16525 0 ]xsh
202.068 476.904 mo
(work=21)
[3.02628 2.09579 1.39577 2.09581 2.36404 2.09579 0 ]xsh
201.776 481.695 mo
(I/O: 2->2)
[1.39577 1.16527 3.02628 1.16527 1.0479 2.09579 1.39577 2.36404 0 ]xsh
211.149 454.989 mo
210.85 457.683 210.55 460.677 210.55 463.671 cv
@
209.951 462.773 mo
210.251 465.767 li
211.448 462.773 li
cp
@
209.951 462.773 mo
210.251 465.767 li
211.448 462.773 li
f
205.76 485.827 mo
204.562 488.522 203.664 491.516 202.466 494.21 cv
@
201.868 493.911 mo
201.568 496.905 li
203.365 494.21 li
cp
@
201.868 493.911 mo
201.568 496.905 li
203.365 494.21 li
f
199.472 538.821 mo
199.472 541.515 199.472 544.21 199.472 546.905 cv
@
198.874 546.605 mo
199.472 549.599 li
200.371 546.605 li
cp
@
198.874 546.605 mo
199.472 549.599 li
200.371 546.605 li
f
277.616 206.487 mo
277.616 200.865 271.852 196.307 264.742 196.307 cv
257.631 196.307 251.867 200.865 251.867 206.487 cv
251.867 212.109 257.631 216.666 264.742 216.666 cv
271.852 216.666 277.616 212.109 277.616 206.487 cv
@
277.616 206.487 mo
277.616 200.865 271.852 196.307 264.742 196.307 cv
257.631 196.307 251.867 200.865 251.867 206.487 cv
251.867 212.109 257.631 216.666 264.742 216.666 cv
271.852 216.666 277.616 212.109 277.616 206.487 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
258.222 202.654 mo
(Identity)
[1.39578 2.09579 1.86099 2.09579 1.16528 1.16525 1.16528 0 ]xsh
257.157 207.444 mo
(work=24)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
256.866 212.235 mo
(I/O: 1->1)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
267.736 185.529 mo
267.137 187.924 266.837 191.217 266.538 194.211 cv
@
265.939 193.313 mo
266.239 196.307 li
267.436 193.313 li
cp
@
265.939 193.313 mo
266.239 196.307 li
267.436 193.313 li
f
308.753 206.487 mo
308.753 200.865 302.989 196.307 295.879 196.307 cv
288.769 196.307 283.005 200.865 283.005 206.487 cv
283.005 212.109 288.769 216.666 295.879 216.666 cv
302.989 216.666 308.753 212.109 308.753 206.487 cv
@
308.753 206.487 mo
308.753 200.865 302.989 196.307 295.879 196.307 cv
288.769 196.307 283.005 200.865 283.005 206.487 cv
283.005 212.109 288.769 216.666 295.879 216.666 cv
302.989 216.666 308.753 212.109 308.753 206.487 cv
.455 .686 .812 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
289.246 202.654 mo
(reversal)
[1.39578 1.86099 2.09579 1.86102 1.39575 1.63052 1.86099 0 ]xsh
288.295 207.444 mo
(work=52)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
288.003 212.235 mo
(I/O: 4->4)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
273.724 185.229 mo
277.017 188.523 281.508 192.714 285.4 196.607 cv
@
284.801 197.205 mo
287.496 198.702 li
285.999 196.008 li
cp
@
284.801 197.205 mo
287.496 198.702 li
285.999 196.008 li
f
308.753 232.834 mo
308.753 229.858 301.381 227.445 292.286 227.445 cv
283.192 227.445 275.819 229.858 275.819 232.834 cv
275.819 235.81 283.192 238.223 292.286 238.223 cv
301.381 238.223 308.753 235.81 308.753 232.834 cv
@
308.753 232.834 mo
308.753 229.858 301.381 227.445 292.286 227.445 cv
283.192 227.445 275.819 229.858 275.819 232.834 cv
275.819 235.81 283.192 238.223 292.286 238.223 cv
301.381 238.223 308.753 235.81 308.753 232.834 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
278.957 233.792 mo
(roundrobin\(4,4\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39575 2.09583 
1.04788 2.09579 0 ]xsh
311.149 259.181 mo
311.149 253.559 305.117 249.002 297.676 249.002 cv
290.235 249.002 284.203 253.559 284.203 259.181 cv
284.203 264.803 290.235 269.361 297.676 269.361 cv
305.117 269.361 311.149 264.803 311.149 259.181 cv
@
311.149 259.181 mo
311.149 253.559 305.117 249.002 297.676 249.002 cv
290.235 249.002 284.203 253.559 284.203 259.181 cv
284.203 264.803 290.235 269.361 297.676 269.361 cv
305.117 269.361 311.149 264.803 311.149 259.181 cv
.761 .976 1 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
290.11 255.349 mo
(decimate)
[2.09579 1.86102 1.86099 1.16528 3.26105 1.86102 1.16525 0 ]xsh
289.043 260.139 mo
(work=120)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 2.09579 0 ]xsh
289.8 264.93 mo
(I/O: 8->8)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
293.484 238.223 mo
294.083 240.618 294.682 243.912 295.28 246.906 cv
@
294.382 246.008 mo
295.58 249.002 li
295.879 246.008 li
cp
@
294.382 246.008 mo
295.58 249.002 li
295.879 246.008 li
f
273.125 214.271 mo
277.017 218.163 281.209 222.355 285.101 225.948 cv
@
284.203 226.247 mo
286.897 227.744 li
285.4 225.05 li
cp
@
284.203 226.247 mo
286.897 227.744 li
285.4 225.05 li
f
294.382 216.666 mo
294.083 219.361 293.783 222.056 293.484 224.75 cv
@
292.885 224.451 mo
292.885 227.445 li
294.382 224.75 li
cp
@
292.885 224.451 mo
292.885 227.445 li
294.382 224.75 li
f
315.34 285.528 mo
315.34 282.552 307.968 280.139 298.873 280.139 cv
289.779 280.139 282.406 282.552 282.406 285.528 cv
282.406 288.505 289.779 290.918 298.873 290.918 cv
307.968 290.918 315.34 288.505 315.34 285.528 cv
@
315.34 285.528 mo
315.34 282.552 307.968 280.139 298.873 280.139 cv
289.779 280.139 282.406 282.552 282.406 285.528 cv
282.406 288.505 289.779 290.918 298.873 290.918 cv
307.968 290.918 315.34 288.505 315.34 285.528 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
285.544 286.487 mo
(roundrobin\(4,4\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39578 2.09579 
1.04788 2.09579 0 ]xsh
298.274 269.361 mo
298.274 272.055 298.574 274.75 298.574 277.445 cv
@
297.975 277.145 mo
298.574 280.139 li
299.472 277.145 li
cp
@
297.975 277.145 mo
298.574 280.139 li
299.472 277.145 li
f
315.34 313.073 mo
315.34 310.097 307.968 307.684 298.873 307.684 cv
289.779 307.684 282.406 310.097 282.406 313.073 cv
282.406 316.05 289.779 318.462 298.873 318.462 cv
307.968 318.462 315.34 316.05 315.34 313.073 cv
@
315.34 313.073 mo
315.34 310.097 307.968 307.684 298.873 307.684 cv
289.779 307.684 282.406 310.097 282.406 313.073 cv
282.406 316.05 289.779 318.462 298.873 318.462 cv
307.968 318.462 315.34 316.05 315.34 313.073 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
285.544 314.031 mo
(roundrobin\(2,2\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39578 2.09579 
1.04788 2.09579 0 ]xsh
298.873 290.918 mo
298.873 294.81 298.873 300.498 298.873 304.989 cv
@
298.274 304.69 mo
298.873 307.684 li
299.771 304.69 li
cp
@
298.274 304.69 mo
298.873 307.684 li
299.771 304.69 li
f
376.717 313.073 mo
376.717 310.097 369.345 307.684 360.25 307.684 cv
351.156 307.684 343.783 310.097 343.783 313.073 cv
343.783 316.05 351.156 318.462 360.25 318.462 cv
369.345 318.462 376.717 316.05 376.717 313.073 cv
@
376.717 313.073 mo
376.717 310.097 369.345 307.684 360.25 307.684 cv
351.156 307.684 343.783 310.097 343.783 313.073 cv
343.783 316.05 351.156 318.462 360.25 318.462 cv
369.345 318.462 376.717 316.05 376.717 313.073 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
346.921 314.031 mo
(roundrobin\(2,2\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39575 2.09583 
1.04788 2.09579 0 ]xsh
313.843 287.924 mo
321.029 289.121 329.113 290.918 334.202 293.313 cv
339.891 295.708 347.077 301.696 352.466 306.187 cv
@
351.867 306.486 mo
354.562 307.983 li
352.765 305.588 li
cp
@
351.867 306.486 mo
354.562 307.983 li
352.765 305.588 li
f
315.34 554.988 mo
315.34 552.012 307.968 549.599 298.873 549.599 cv
289.779 549.599 282.406 552.012 282.406 554.988 cv
282.406 557.965 289.779 560.378 298.873 560.378 cv
307.968 560.378 315.34 557.965 315.34 554.988 cv
@
315.34 554.988 mo
315.34 552.012 307.968 549.599 298.873 549.599 cv
289.779 549.599 282.406 552.012 282.406 554.988 cv
282.406 557.965 289.779 560.378 298.873 560.378 cv
307.968 560.378 315.34 557.965 315.34 554.988 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
285.544 555.946 mo
(roundrobin\(1,1\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39578 2.09579 
1.04788 2.09579 0 ]xsh
291.987 581.336 mo
291.987 575.714 286.223 571.156 279.113 571.156 cv
272.003 571.156 266.239 575.714 266.239 581.336 cv
266.239 586.958 272.003 591.515 279.113 591.515 cv
286.223 591.515 291.987 586.958 291.987 581.336 cv
@
291.987 581.336 mo
291.987 575.714 286.223 571.156 279.113 571.156 cv
272.003 571.156 266.239 575.714 266.239 581.336 cv
266.239 586.958 272.003 591.515 279.113 591.515 cv
286.223 591.515 291.987 586.958 291.987 581.336 cv
.882 .953 .973 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7A73DFCCE6C978678EE12F2E62BD7D7FA244984C1E12F1
0EB0B8765182EBCE165DFB850DB8B03381969B80BB1CA53FFB24B5DE34530C8C
83A80415FE19B7C2B551E605143CF6469C8BCE336F9A5E5012DD932CF553D663
37837328637F50B90FF9AE8815D00BBA7EFCE6D508C5B6EBE2D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQV+TimesNewRomanPSMT /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
/six /seven /eight /nine /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 
3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /w /x 
/y 134{/.notdef}rp]
LTFDQV+TimesNewRomanPSMT nf
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
273.173 577.503 mo
(outmix)
[2.09579 2.09579 1.16528 3.26105 1.16528 0 ]xsh
271.528 582.293 mo
(work=99)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
271.236 587.084 mo
(I/O: 8->8)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
294.981 560.378 mo
292.586 563.372 289.592 567.264 286.897 571.156 cv
@
286.897 569.958 mo
285.7 572.653 li
288.095 570.857 li
cp
@
286.897 569.958 mo
285.7 572.653 li
288.095 570.857 li
f
298.574 339.42 mo
298.574 333.798 292.81 329.241 285.7 329.241 cv
278.589 329.241 272.825 333.798 272.825 339.42 cv
272.825 345.042 278.589 349.6 285.7 349.6 cv
292.81 349.6 298.574 345.042 298.574 339.42 cv
@
298.574 339.42 mo
298.574 333.798 292.81 329.241 285.7 329.241 cv
278.589 329.241 272.825 333.798 272.825 339.42 cv
272.825 345.042 278.589 349.6 285.7 349.6 cv
292.81 349.6 298.574 345.042 298.574 339.42 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
279.18 335.588 mo
(Identity)
[1.39578 2.09579 1.86099 2.09579 1.16528 1.16525 1.16528 0 ]xsh
278.115 340.378 mo
(work=12)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
277.824 345.169 mo
(I/O: 1->1)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
296.179 318.462 mo
294.682 321.157 292.885 324.75 291.388 328.043 cv
@
291.089 326.846 mo
290.49 329.84 li
292.586 327.444 li
cp
@
291.089 326.846 mo
290.49 329.84 li
292.586 327.444 li
f
329.711 339.42 mo
329.711 333.798 323.947 329.241 316.837 329.241 cv
309.727 329.241 303.963 333.798 303.963 339.42 cv
303.963 345.042 309.727 349.6 316.837 349.6 cv
323.947 349.6 329.711 345.042 329.711 339.42 cv
@
329.711 339.42 mo
329.711 333.798 323.947 329.241 316.837 329.241 cv
309.727 329.241 303.963 333.798 303.963 339.42 cv
303.963 345.042 309.727 349.6 316.837 349.6 cv
323.947 349.6 329.711 345.042 329.711 339.42 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
310.204 335.588 mo
(reversal)
[1.39578 1.86099 2.09579 1.86102 1.39575 1.63052 1.86099 0 ]xsh
309.253 340.378 mo
(work=26)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
308.961 345.169 mo
(I/O: 2->2)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
302.466 318.462 mo
304.262 321.456 306.658 324.75 308.753 328.043 cv
@
308.155 328.343 mo
310.55 330.438 li
309.352 327.444 li
cp
@
308.155 328.343 mo
310.55 330.438 li
309.352 327.444 li
f
316.538 365.768 mo
316.538 362.791 309.165 360.378 300.071 360.378 cv
290.976 360.378 283.604 362.791 283.604 365.768 cv
283.604 368.744 290.976 371.157 300.071 371.157 cv
309.165 371.157 316.538 368.744 316.538 365.768 cv
@
316.538 365.768 mo
316.538 362.791 309.165 360.378 300.071 360.378 cv
290.976 360.378 283.604 362.791 283.604 365.768 cv
283.604 368.744 290.976 371.157 300.071 371.157 cv
309.165 371.157 316.538 368.744 316.538 365.768 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
286.742 366.726 mo
(roundrobin\(2,2\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39578 2.09579 
1.04788 2.09579 0 ]xsh
312.945 392.115 mo
312.945 386.493 307.181 381.935 300.071 381.935 cv
292.961 381.935 287.197 386.493 287.197 392.115 cv
287.197 397.737 292.961 402.294 300.071 402.294 cv
307.181 402.294 312.945 397.737 312.945 392.115 cv
@
312.945 392.115 mo
312.945 386.493 307.181 381.935 300.071 381.935 cv
292.961 381.935 287.197 386.493 287.197 392.115 cv
287.197 397.737 292.961 402.294 300.071 402.294 cv
307.181 402.294 312.945 397.737 312.945 392.115 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
292.505 388.282 mo
(decimate)
[2.09579 1.86102 1.86099 1.16528 3.26105 1.86102 1.16525 0 ]xsh
292.486 393.072 mo
(work=60)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
292.195 397.863 mo
(I/O: 4->4)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
300.071 371.157 mo
300.071 373.253 300.071 376.247 300.071 378.941 cv
@
299.472 378.941 mo
300.071 381.935 li
300.969 378.941 li
cp
@
299.472 378.941 mo
300.071 381.935 li
300.969 378.941 li
f
290.789 348.702 mo
292.286 351.696 294.083 354.989 295.879 357.983 cv
@
294.981 357.983 mo
297.077 360.378 li
296.478 357.384 li
cp
@
294.981 357.983 mo
297.077 360.378 li
296.478 357.384 li
f
310.849 348.702 mo
309.053 351.696 306.658 355.289 304.861 357.983 cv
@
304.262 357.384 mo
303.364 360.378 li
305.46 358.283 li
cp
@
304.262 357.384 mo
303.364 360.378 li
305.46 358.283 li
f
316.538 418.462 mo
316.538 415.486 309.165 413.073 300.071 413.073 cv
290.976 413.073 283.604 415.486 283.604 418.462 cv
283.604 421.438 290.976 423.851 300.071 423.851 cv
309.165 423.851 316.538 421.438 316.538 418.462 cv
@
316.538 418.462 mo
316.538 415.486 309.165 413.073 300.071 413.073 cv
290.976 413.073 283.604 415.486 283.604 418.462 cv
283.604 421.438 290.976 423.851 300.071 423.851 cv
309.165 423.851 316.538 421.438 316.538 418.462 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
286.742 419.42 mo
(roundrobin\(2,2\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39578 2.09579 
1.04788 2.09579 0 ]xsh
300.071 402.294 mo
300.071 404.989 300.071 407.684 300.071 410.378 cv
@
299.472 410.079 mo
300.071 413.073 li
300.969 410.079 li
cp
@
299.472 410.079 mo
300.071 413.073 li
300.969 410.079 li
f
288.694 444.809 mo
288.694 439.187 280.919 434.63 271.328 434.63 cv
261.738 434.63 253.963 439.187 253.963 444.809 cv
253.963 450.431 261.738 454.989 271.328 454.989 cv
280.919 454.989 288.694 450.431 288.694 444.809 cv
@
288.694 444.809 mo
288.694 439.187 280.919 434.63 271.328 434.63 cv
261.738 434.63 253.963 439.187 253.963 444.809 cv
253.963 450.431 261.738 454.989 271.328 454.989 cv
280.919 454.989 288.694 450.431 288.694 444.809 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
258.869 440.977 mo
(TwoPointDCT)
[2.56104 3.02628 2.09579 2.33054 2.09579 1.16525 2.09583 1.16525 3.02628 2.79575 0 ]xsh
263.744 445.767 mo
(work=80)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
263.452 450.558 mo
(I/O: 2->2)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
294.382 423.552 mo
291.089 426.546 286.897 430.438 283.005 434.031 cv
@
282.406 433.432 mo
280.909 436.127 li
283.604 434.63 li
cp
@
282.406 433.432 mo
280.909 436.127 li
283.604 434.63 li
f
328.813 444.809 mo
328.813 439.187 321.038 434.63 311.448 434.63 cv
301.857 434.63 294.083 439.187 294.083 444.809 cv
294.083 450.431 301.857 454.989 311.448 454.989 cv
321.038 454.989 328.813 450.431 328.813 444.809 cv
@
328.813 444.809 mo
328.813 439.187 321.038 434.63 311.448 434.63 cv
301.857 434.63 294.083 439.187 294.083 444.809 cv
294.083 450.431 301.857 454.989 311.448 454.989 cv
321.038 454.989 328.813 450.431 328.813 444.809 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
298.989 440.977 mo
(TwoPointDCT)
[2.56104 3.02628 2.09579 2.33054 2.09579 1.16525 2.09583 1.16525 3.02628 2.79575 0 ]xsh
303.864 445.767 mo
(work=80)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
303.572 450.558 mo
(I/O: 2->2)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
302.466 423.851 mo
303.664 426.246 304.861 429.24 306.059 431.935 cv
@
305.46 432.534 mo
307.256 434.929 li
306.957 431.935 li
cp
@
305.46 432.534 mo
307.256 434.929 li
306.957 431.935 li
f
315.34 502.294 mo
315.34 499.318 307.968 496.905 298.873 496.905 cv
289.779 496.905 282.406 499.318 282.406 502.294 cv
282.406 505.27 289.779 507.683 298.873 507.683 cv
307.968 507.683 315.34 505.27 315.34 502.294 cv
@
315.34 502.294 mo
315.34 499.318 307.968 496.905 298.873 496.905 cv
289.779 496.905 282.406 499.318 282.406 502.294 cv
282.406 505.27 289.779 507.683 298.873 507.683 cv
307.968 507.683 315.34 505.27 315.34 502.294 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
285.544 503.252 mo
(roundrobin\(1,1\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39578 2.09579 
1.04788 2.09579 0 ]xsh
298.873 507.683 mo
298.873 517.264 298.873 536.725 298.873 547.503 cv
@
298.274 546.605 mo
298.873 549.599 li
299.771 546.605 li
cp
@
298.274 546.605 mo
298.873 549.599 li
299.771 546.605 li
f
275.221 454.689 mo
279.412 464.57 285.4 479.54 289.592 488.522 cv
290.49 490.318 291.688 492.414 293.185 494.51 cv
@
292.586 494.809 mo
294.981 496.905 li
293.783 493.911 li
cp
@
292.586 494.809 mo
294.981 496.905 li
293.783 493.911 li
f
321.927 475.947 mo
321.927 470.325 316.163 465.767 309.053 465.767 cv
301.943 465.767 296.179 470.325 296.179 475.947 cv
296.179 481.569 301.943 486.126 309.053 486.126 cv
316.163 486.126 321.927 481.569 321.927 475.947 cv
@
321.927 475.947 mo
321.927 470.325 316.163 465.767 309.053 465.767 cv
301.943 465.767 296.179 470.325 296.179 475.947 cv
296.179 481.569 301.943 486.126 309.053 486.126 cv
316.163 486.126 321.927 481.569 321.927 475.947 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
303.113 472.114 mo
(outmix)
[2.09579 2.09579 1.16528 3.26105 1.16528 0 ]xsh
301.468 476.904 mo
(work=21)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
301.176 481.695 mo
(I/O: 2->2)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
310.55 454.989 mo
310.25 457.683 309.951 460.677 309.951 463.671 cv
@
309.352 462.773 mo
309.652 465.767 li
310.849 462.773 li
cp
@
309.352 462.773 mo
309.652 465.767 li
310.849 462.773 li
f
305.161 485.827 mo
303.963 488.522 303.065 491.516 301.867 494.21 cv
@
301.268 493.911 mo
300.969 496.905 li
302.765 494.21 li
cp
@
301.268 493.911 mo
300.969 496.905 li
302.765 494.21 li
f
369.532 339.42 mo
369.532 333.798 363.768 329.241 356.657 329.241 cv
349.547 329.241 343.783 333.798 343.783 339.42 cv
343.783 345.042 349.547 349.6 356.657 349.6 cv
363.768 349.6 369.532 345.042 369.532 339.42 cv
@
369.532 339.42 mo
369.532 333.798 363.768 329.241 356.657 329.241 cv
349.547 329.241 343.783 333.798 343.783 339.42 cv
343.783 345.042 349.547 349.6 356.657 349.6 cv
363.768 349.6 369.532 345.042 369.532 339.42 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
350.137 335.588 mo
(Identity)
[1.39578 2.09579 1.86099 2.09579 1.16528 1.16525 1.16528 0 ]xsh
349.072 340.378 mo
(work=12)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
348.781 345.169 mo
(I/O: 1->1)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
359.651 318.462 mo
359.053 320.858 358.753 324.151 358.454 327.145 cv
@
357.855 326.247 mo
358.154 329.241 li
359.352 326.247 li
cp
@
357.855 326.247 mo
358.154 329.241 li
359.352 326.247 li
f
400.669 339.42 mo
400.669 333.798 394.905 329.241 387.795 329.241 cv
380.685 329.241 374.921 333.798 374.921 339.42 cv
374.921 345.042 380.685 349.6 387.795 349.6 cv
394.905 349.6 400.669 345.042 400.669 339.42 cv
@
400.669 339.42 mo
400.669 333.798 394.905 329.241 387.795 329.241 cv
380.685 329.241 374.921 333.798 374.921 339.42 cv
374.921 345.042 380.685 349.6 387.795 349.6 cv
394.905 349.6 400.669 345.042 400.669 339.42 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
381.162 335.588 mo
(reversal)
[1.39578 1.86099 2.09579 1.86102 1.39575 1.63052 1.86099 0 ]xsh
380.211 340.378 mo
(work=26)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
379.919 345.169 mo
(I/O: 2->2)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
365.639 318.163 mo
368.933 321.456 373.424 325.648 377.316 329.54 cv
@
376.717 330.139 mo
379.412 331.636 li
377.915 328.941 li
cp
@
376.717 330.139 mo
379.412 331.636 li
377.915 328.941 li
f
388.993 365.768 mo
388.993 362.791 381.62 360.378 372.526 360.378 cv
363.431 360.378 356.059 362.791 356.059 365.768 cv
356.059 368.744 363.431 371.157 372.526 371.157 cv
381.62 371.157 388.993 368.744 388.993 365.768 cv
@
388.993 365.768 mo
388.993 362.791 381.62 360.378 372.526 360.378 cv
363.431 360.378 356.059 362.791 356.059 365.768 cv
356.059 368.744 363.431 371.157 372.526 371.157 cv
381.62 371.157 388.993 368.744 388.993 365.768 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
359.196 366.726 mo
(roundrobin\(2,2\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39575 2.09583 
1.04788 2.09579 0 ]xsh
385.4 392.115 mo
385.4 386.493 379.636 381.935 372.526 381.935 cv
365.415 381.935 359.651 386.493 359.651 392.115 cv
359.651 397.737 365.415 402.294 372.526 402.294 cv
379.636 402.294 385.4 397.737 385.4 392.115 cv
@
385.4 392.115 mo
385.4 386.493 379.636 381.935 372.526 381.935 cv
365.415 381.935 359.651 386.493 359.651 392.115 cv
359.651 397.737 365.415 402.294 372.526 402.294 cv
379.636 402.294 385.4 397.737 385.4 392.115 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
364.96 388.282 mo
(decimate)
[2.09579 1.86102 1.86099 1.16528 3.26105 1.86102 1.16525 0 ]xsh
364.941 393.072 mo
(work=60)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
364.65 397.863 mo
(I/O: 4->4)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
372.526 371.157 mo
372.526 373.253 372.526 376.247 372.526 378.941 cv
@
371.927 378.941 mo
372.526 381.935 li
373.424 378.941 li
cp
@
371.927 378.941 mo
372.526 381.935 li
373.424 378.941 li
f
362.346 348.702 mo
364.142 351.696 366.238 354.989 368.035 357.983 cv
@
367.136 357.983 mo
369.232 360.378 li
368.633 357.384 li
cp
@
367.136 357.983 mo
369.232 360.378 li
368.633 357.384 li
f
382.406 348.702 mo
380.609 351.696 378.813 354.989 377.017 357.983 cv
@
376.418 357.384 mo
375.52 360.378 li
377.615 358.283 li
cp
@
376.418 357.384 mo
375.52 360.378 li
377.615 358.283 li
f
388.993 418.462 mo
388.993 415.486 381.62 413.073 372.526 413.073 cv
363.431 413.073 356.059 415.486 356.059 418.462 cv
356.059 421.438 363.431 423.851 372.526 423.851 cv
381.62 423.851 388.993 421.438 388.993 418.462 cv
@
388.993 418.462 mo
388.993 415.486 381.62 413.073 372.526 413.073 cv
363.431 413.073 356.059 415.486 356.059 418.462 cv
356.059 421.438 363.431 423.851 372.526 423.851 cv
381.62 423.851 388.993 421.438 388.993 418.462 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
359.196 419.42 mo
(roundrobin\(2,2\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39575 2.09583 
1.04788 2.09579 0 ]xsh
372.526 402.294 mo
372.526 404.989 372.526 407.684 372.526 410.378 cv
@
371.927 410.079 mo
372.526 413.073 li
373.424 410.079 li
cp
@
371.927 410.079 mo
372.526 413.073 li
373.424 410.079 li
f
378.514 444.809 mo
378.514 439.187 370.739 434.63 361.148 434.63 cv
351.558 434.63 343.783 439.187 343.783 444.809 cv
343.783 450.431 351.558 454.989 361.148 454.989 cv
370.739 454.989 378.514 450.431 378.514 444.809 cv
@
378.514 444.809 mo
378.514 439.187 370.739 434.63 361.148 434.63 cv
351.558 434.63 343.783 439.187 343.783 444.809 cv
343.783 450.431 351.558 454.989 361.148 454.989 cv
370.739 454.989 378.514 450.431 378.514 444.809 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
348.689 440.977 mo
(TwoPointDCT)
[2.56104 3.02628 2.09579 2.33054 2.09579 1.16525 2.09583 1.16525 3.02628 2.79575 0 ]xsh
353.564 445.767 mo
(work=80)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
353.272 450.558 mo
(I/O: 2->2)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
370.13 423.851 mo
368.933 426.546 367.735 429.839 366.238 433.133 cv
@
365.939 431.935 mo
365.34 434.929 li
367.436 432.534 li
cp
@
365.939 431.935 mo
365.34 434.929 li
367.436 432.534 li
f
418.633 444.809 mo
418.633 439.187 410.858 434.63 401.268 434.63 cv
391.677 434.63 383.903 439.187 383.903 444.809 cv
383.903 450.431 391.677 454.989 401.268 454.989 cv
410.858 454.989 418.633 450.431 418.633 444.809 cv
@
418.633 444.809 mo
418.633 439.187 410.858 434.63 401.268 434.63 cv
391.677 434.63 383.903 439.187 383.903 444.809 cv
383.903 450.431 391.677 454.989 401.268 454.989 cv
410.858 454.989 418.633 450.431 418.633 444.809 cv
.675 .855 .91 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
388.809 440.977 mo
(TwoPointDCT)
[2.56104 3.02628 2.09579 2.33054 2.09579 1.16525 2.09583 1.16525 3.02628 2.79575 0 ]xsh
393.684 445.767 mo
(work=80)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
393.392 450.558 mo
(I/O: 2->2)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
379.711 423.252 mo
381.508 424.749 383.603 426.246 384.801 427.444 cv
386.597 428.941 388.693 431.336 390.789 433.432 cv
@
390.49 434.031 mo
392.885 435.827 li
391.388 433.133 li
cp
@
390.49 434.031 mo
392.885 435.827 li
391.388 433.133 li
f
377.615 502.294 mo
377.615 499.318 370.243 496.905 361.148 496.905 cv
352.054 496.905 344.681 499.318 344.681 502.294 cv
344.681 505.27 352.054 507.683 361.148 507.683 cv
370.243 507.683 377.615 505.27 377.615 502.294 cv
@
377.615 502.294 mo
377.615 499.318 370.243 496.905 361.148 496.905 cv
352.054 496.905 344.681 499.318 344.681 502.294 cv
344.681 505.27 352.054 507.683 361.148 507.683 cv
370.243 507.683 377.615 505.27 377.615 502.294 cv
1 gry
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
347.819 503.252 mo
(roundrobin\(1,1\))
[1.39578 2.09579 2.09579 2.09579 2.09579 1.39578 2.09579 2.09579 1.16528 2.09579 1.39575 2.09583 
1.04788 2.09579 0 ]xsh
370.43 528.641 mo
370.43 523.019 364.666 518.462 357.556 518.462 cv
350.445 518.462 344.681 523.019 344.681 528.641 cv
344.681 534.263 350.445 538.821 357.556 538.821 cv
364.666 538.821 370.43 534.263 370.43 528.641 cv
@
370.43 528.641 mo
370.43 523.019 364.666 518.462 357.556 518.462 cv
350.445 518.462 344.681 523.019 344.681 528.641 cv
344.681 534.263 350.445 538.821 357.556 538.821 cv
364.666 538.821 370.43 534.263 370.43 528.641 cv
.455 .686 .812 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
351.616 524.809 mo
(outmix)
[2.09579 2.09579 1.16528 3.26105 1.16528 0 ]xsh
349.971 529.599 mo
(work=47)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
349.679 534.39 mo
(I/O: 4->4)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
360.55 507.683 mo
359.951 510.078 359.651 513.372 359.352 516.366 cv
@
358.753 515.468 mo
359.053 518.462 li
360.25 515.468 li
cp
@
358.753 515.468 mo
359.053 518.462 li
360.25 515.468 li
f
361.148 454.989 mo
361.148 466.067 361.148 483.432 361.148 493.611 cv
@
360.55 493.911 mo
361.148 496.905 li
362.047 493.911 li
cp
@
360.55 493.911 mo
361.148 496.905 li
362.047 493.911 li
f
411.747 475.947 mo
411.747 470.325 405.983 465.767 398.873 465.767 cv
391.763 465.767 385.999 470.325 385.999 475.947 cv
385.999 481.569 391.763 486.126 398.873 486.126 cv
405.983 486.126 411.747 481.569 411.747 475.947 cv
@
411.747 475.947 mo
411.747 470.325 405.983 465.767 398.873 465.767 cv
391.763 465.767 385.999 470.325 385.999 475.947 cv
385.999 481.569 391.763 486.126 398.873 486.126 cv
405.983 486.126 411.747 481.569 411.747 475.947 cv
.271 .467 .702 rgb
f
0 gry
LTFDQV+TimesNewRomanPSMT*1 [4.1916 0 0 -4.1916 0 0 ]msf
392.933 472.114 mo
(outmix)
[2.09579 2.09579 1.16528 3.26105 1.16528 0 ]xsh
391.288 476.904 mo
(work=21)
[3.02628 2.09579 1.39578 2.09579 2.36404 2.09579 0 ]xsh
390.996 481.695 mo
(I/O: 2->2)
[1.39578 1.16525 3.02628 1.16525 1.04791 2.09579 1.39578 2.36404 0 ]xsh
400.37 454.989 mo
400.07 457.384 400.07 460.079 399.771 462.773 cv
@
399.172 462.773 mo
399.472 465.767 li
400.37 462.773 li
cp
@
399.172 462.773 mo
399.472 465.767 li
400.37 462.773 li
f
391.687 484.33 mo
389.891 486.126 388.394 487.623 386.897 488.522 cv
383.603 490.917 378.214 493.911 373.424 496.306 cv
@
373.124 495.707 mo
370.729 497.803 li
373.723 496.905 li
cp
@
373.124 495.707 mo
370.729 497.803 li
373.723 496.905 li
f
350.669 537.324 mo
349.172 539.12 347.376 540.617 345.58 541.216 cv
337.795 544.809 324.622 548.701 314.442 551.096 cv
@
315.041 550.198 mo
312.346 551.695 li
315.34 551.695 li
cp
@
315.041 550.198 mo
312.346 551.695 li
315.34 551.695 li
f
272.526 590.018 mo
269.831 593.312 267.137 597.204 264.442 600.198 cv
@
264.143 599.3 mo
262.945 602.294 li
265.34 600.198 li
cp
@
264.143 599.3 mo
262.945 602.294 li
265.34 600.198 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/LTFDQV+TimesNewRomanPSMT*1 uf
/LTFDQV+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
