%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: GSM.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:08:52 PM
%%BoundingBox: 0 0 469 439
%%HiResBoundingBox: 0 0 469 439
%%CropBox: 0 0 469 439
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -439 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 439 li
469 439 li
469 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 440 mo
505 440 li
505 0 li
35 0 li
cp
clp
.189 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
37.512 437.488 mo
502.452 437.488 li
502.452 2.03195 li
37.512 2.03195 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 71 /G put
dup 109 /m put
dup 115 /s put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/G <1C60D8A8C9B6079F258D65BC2350A422AEB94BCF2D0F96794C8438625C31
5D886EF37D4AC3C2F1E1338E25B58FA7772E0B9E5E3E726371665F3474CE0B82
EB9690B23BE3168D2BE4F6B0140B5077B79CDED50A140417505C243C7D98789B
5883DC2727B8882D3854E49A79F785598024348D171E79D4C21E1DA76E252BE9
80994299353DC669631C102ABE82C3B639BE771465159436AABE7CB91BD8812B
5152BA3433FC2701117F14E8CD24269DDA8CC4248C3859> |-
/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C86
82F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CB
A64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762
A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A
9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61F
B9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDRR+TimesNewRomanPSMT*1 
[71{/.notdef}rp /G 37{/.notdef}rp /m 5{/.notdef}rp /s 140{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
38.7928 4.14893 mo
(Gsm)
[1.91037 1.02927 0 ]xsh
61.137 182.716 mo
123.318 182.716 li
123.318 6.56793 li
61.137 6.56793 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F62AF7EE2124AC712AE5D5419E262A0C00C6163DFBCB2
A6FA65DDDD5062250DB8BBFB46EB35827750F9FCEE696526B20FE9266474B179
350945BBDAF7180FAB04D619EB38198FC722361E0B3B5E50F9017F19C7BDCABB
285F506A04FE32C63936689B1F9C81923B03440D57336303C59B59E8D3C0659D
33> |-
/F <1C60D8A8C9B7EF322B10A2A8DE6CF647A07CB452C54BD470E6C4C389B7AB
8653B88FE6E4626649FABCEAB5DAD30BD9C2A2F1F8512C1A1DC93BDB928A3688
B193ECEDB997255AB4DCBBC4BBB3FF147299B3653B9E76139CB6E91A13A47208
F2688B5C42863D22FFBF8FD8DF09F08A1966F6652461EEB3D18F0F0CB5B8E18D
6016409AA3D413D5FA051FCF9B4DFF0734259E7DCF> |-
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 68 /D put
dup 70 /F put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 107 /k put
dup 111 /o put
dup 114 /r put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[68{/.notdef}rp /D /.notdef /F /G 25{/.notdef}rp /a /b 
/c /d /e 5{/.notdef}rp /k /.notdef /m /.notdef 
/o 2{/.notdef}rp /r /s 140{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
62.3593 8.68494 mo
(DecoderFeedback)
[1.91037 1.17479 1.17478 1.323 1.323 1.17479 .881096 1.47118 1.17478 1.17478 1.32301 1.323 
1.17478 1.17479 0 ]xsh
77.391 51.172 mo
118.593 51.172 li
118.593 11.104 li
77.391 11.104 li
cp
1 gry
@
64.161 168.352 mo
120.294 168.352 li
120.294 64.78 li
64.161 64.78 li
cp
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B7D8BE1621F7F8A9A93A327F755C3E81E8F6E5B36D5D09EC27
E8352590DCF5FBB39847107CDCA7E2F69BF8A0E97E902F61DA0FFC19F5F5635E
A2E6B7FBC25C45E39802E8D22E33BC6334A08FAC75B725C0C2D4D8BA4EE1> |-
/P <1C60D8A8C9B7EF322B10A2A8DE6EF0A6CE60E86B1DF5C68015667A2338DB
07BCF91C9D8DCCB5967A656E7EB6651B3E305A306DA1BB8C1BAEECFC60DC00D8
8AEC56E3DF7455D57CB9BB0CC9A32704D4F0F1C39C5B2EDC70F42754CACE7253
FF5FDAE4B675FFF987E22613E24B8956EFA9C2C5B9AC406D966F459601B2046A
C9E54A3BB37C45EDEB> |-
/S <1C60D8A8C9B7EF320E2EFDBCAC7BC76D0C8C1FC222AFE4F464C56D04CD48
5F140DB725EC46F068943283C9A43A14A852E22E87331165F602FD95AC890BE8
83DAD7F63C31168B480A95AC244C28C8F37F118A399681DB4822661628FBDA87
D99D0367C013E32688035EC31A5C3FC194FEB20C4FCD84A9EB3547C0D5A421A0
1B87DFDA871D7919B7251A9EC84A645CA15425845057F189EC65A90DD4028CC5
B10853B05E6F7AF9E84AC6588CDCE11B6EF766B248A8304E38964E579F6EF2DC
2D4971ED042868564E8E982FE2B2> |-
/T <1C60D8A8C9B7D8BE16B2E353E3300378A32828826C127DE3D6A3769F5542
8119DC48F4B555CFAC557278838F3EC6C5F7B64F6B44DFEFCBC8AF8174185170
E165701BB15CF1CB88629A978EF6D86FB8> |-
/p <1C60D8A8C9B7A73D9AFACE39AE6BAA6E09D7322029CE296F526808097535
692942DF193E08360A1A27EB6A08251F7D53D3FA96D22918185F2823E13833F6
44411211FB9E60C91D24768368C1EE71DFEA1AF8285D596D61CE8A067C14BC2E
E1974A4DF14D782DBEDB8D2CE5673BB9634CC4945A7FA5A5E1B87E0F2D94F438
C21548DAE429B68406206429A87E1B462DA7A9D2> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 76 /L put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 112 /p put
dup 116 /t put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[68{/.notdef}rp /D /.notdef /F /G 4{/.notdef}rp /L 3{/.notdef}rp 
/P 2{/.notdef}rp /S /T 12{/.notdef}rp /a /b /c 
/d /e 5{/.notdef}rp /k /.notdef /m /.notdef /o 
/p /.notdef /r /s /t 139{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
65.4738 66.8969 mo
(LTPLoopStream)
[1.61668 1.61668 1.47118 1.61669 1.323 1.323 1.323 1.47118 .735588 .881104 1.17478 1.17478 
0 ]xsh
67.185 141.136 mo
117.27 141.136 li
117.27 69.316 li
67.185 69.316 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
/J <1C60D8A8C9B7361F02E9DFE0B9C9639F5322575055288FA88C96DC9CB9D9
CA19F6F8F65E0BC3562823C923780B557829CF69C4889E8D8AE10C346B69E6B3
C49D8F83FB5992EF32CD5E> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 73 /I put
dup 74 /J put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[68{/.notdef}rp /D /.notdef /F /G /.notdef /I /J 
/.notdef /L 3{/.notdef}rp /P 2{/.notdef}rp /S /T 12{/.notdef}rp 
/a /b /c /d /e 3{/.notdef}rp /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u 138{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
68.485 71.433 mo
(LTPInputSplitJoin)
[1.61668 1.61668 1.47118 .881104 1.323 1.323 1.323 .735588 1.47118 1.32301 .73558 .735596 
.73558 1.02927 1.32301 .73558 0 ]xsh
70.209 124.504 mo
95.535 124.504 li
95.535 85.948 li
70.209 85.948 li
cp
@
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
71.458 88.0649 mo
(LTPPipeline)
[1.61668 1.61669 1.47117 1.47118 .735588 1.323 1.17479 .735588 .735588 1.323 0 ]xsh
124.263 163.06 mo
173.592 163.06 li
173.592 88.972 li
124.263 88.972 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B6079F005CDFC8A94B75FD7D89F5577E741BA5E9223B5FB59E
3315C336CDEC6F323D18A178B38DCEDA9B451B37165385283368F94E5EC5086C
A620D2549B18425DA74331F96252E5D5358EE44D33B708D9B8822975F755BF6A
D18C81AA5BF9B47D39D0AFBBC3A6521D0B18D90963534584D1092363898607EF
C07B44A235786C96> |-
/R <1C60D8A8C9B64EDFF4D0475F241567109AA60E358A72CDD6748BBE527383
3D9930EA16405C9FA084F4E606B7DF07A2CCABEF78658BA281F5D25760E71232
16C34541C223BEC48612BD7C0052F7AD27E210716125E9B30EDB889188D65976
1E4423BF9E66EB5CCCE83D82A2DB04554982E2E899847CA739A4B92152682375
567D18A66EABD5068029F8FB7424BADB87039D0F6B1530> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 65 /A put
dup 82 /R put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[65{/.notdef}rp /A 2{/.notdef}rp /D /.notdef /F /G /.notdef 
/I /J /.notdef /L 3{/.notdef}rp /P /.notdef /R 
/S /T 12{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u 138{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
125.647 91.0889 mo
(LARInputSplitJoin)
[1.61668 1.91037 1.76486 .881104 1.323 1.323 1.323 .735596 1.47118 1.323 .73558 .735596 
.73558 1.02928 1.323 .73558 0 ]xsh
144.486 144.16 mo
170.568 144.16 li
170.568 105.604 li
144.486 105.604 li
cp
@
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
145.819 107.721 mo
(LARPipeline)
[1.61668 1.91037 1.76486 1.47118 .735596 1.323 1.17477 .735596 .73558 1.32301 0 ]xsh
124.263 349.036 mo
499.428 349.036 li
499.428 169.864 li
124.263 169.864 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B64EDFB39C8FA0E3107D39E1E26D40368A6A59D36B799EDDCB
A8AF8BCAEA2E296C5BB00979C4073082C4AC62DAAE27F25BE45DFF121DF075F7
3D37111C10DFF7C6BD4BFE8AE73B4FADB84F0E8B5722DEA1CA14F5AFDC440B45
4F635F5576E82C8F45782F1EDE0EC9CA59D48E4C0F81> |-
/f <1C60D8A8C9B81F2C3AAA7F9332A1FC560AB2BC70F6F61F670AD82FC8B626
674790DAFBDF46077811E1DF38721CA7CA8FBC2C5E006E567037490710BD3A02
BCB7C7EDEC00C0FF3F7CF7FF144794FA5B0DC9D77482C00E98ABF65E83ECDA1A
E1009D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 67 /C put
dup 102 /f put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[65{/.notdef}rp /A /.notdef /C /D /.notdef /F /G 
/.notdef /I /J /.notdef /L 3{/.notdef}rp /P /.notdef 
/R /S /T 12{/.notdef}rp /a /b /c /d 
/e /f 2{/.notdef}rp /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
138{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
125.567 171.981 mo
(ReflectionCoeff)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 0 ]xsh
149.022 336.94 mo
496.404 336.94 li
496.404 184.228 li
149.022 184.228 li
cp
@
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
150.358 186.345 mo
(ReflectionCoeffCalc)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 .881088 1.76486 1.17479 .73558 0 ]xsh
152.046 237.904 mo
493.38 237.904 li
493.38 188.764 li
152.046 188.764 li
cp
@
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
153.35 190.881 mo
(ReflectionCoeffLARpp)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 .881088 1.61668 1.91039 1.76486 1.323 0 ]xsh
152.046 287.8 mo
493.38 287.8 li
493.38 241.684 li
152.046 241.684 li
cp
@
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
153.35 243.801 mo
(ReflectionCoeffLARpp)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 .881088 1.61668 1.91039 1.76486 1.323 0 ]xsh
152.046 335.428 mo
493.38 335.428 li
493.38 289.312 li
152.046 289.312 li
cp
@
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
153.35 291.429 mo
(ReflectionCoeffLARpp)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 .881088 1.61668 1.91039 1.76486 1.323 0 ]xsh
122.94 393.64 mo
157.716 393.64 li
157.716 350.548 li
122.94 350.548 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7A73D85D7E997B7B5DF7D7777AF52CC5562CB6E990E974840
46648599A1D9C4DB63B2EA37B7BBC0C3039255635B40FAB067F562720BFA98A6
8AA5F28640EAE52B9FE1BA9F5F2A49A2F977CAB7D5C25E3626BAA2BEB9E431EA
60B6FFDB96CDFE0161651CB3C7DDAAF79341AA1B63131C7BD07B3EF7C547B329
2DEEC810138CCDC2FA69E1A2AD41097A54F4DBBBA72B1810538F2F0FBA5B3B54
046B0BB798F435A12098BB54904B4FA0166943538B1D7B8EA5970358CDBCC48E
31C506A3AAB0AC2519075E7791339AF09F8C1F93B0D81A9E5ED3B02D4C03B817
17F61566CDC855CB444B31FBC8E71F4A79E39CF6ED7B9B21E0269B8614410251
F072B930BD3C2C0B5BE3125CE4461E97B369DD7B68AF48B8706DE7D2976BB7A8
F7FA6E1A10F519A6E8E51022609E6B7A2E822DDCD222A999CAA520FD83CCB934
D41B4EF6E07BE85DFA424019E44CA0D51152EDBDE920B3C59D4A719415BD84E9
F231F0CBEF222AB9855B090598B4D01FCC8283B4EC699D2D8EDA681DF37E56EB
75FAFC019A1A3645CA60183B64A594CD3556BA6088F7C2AF3F05FDD0875B0187
C18BC8AC2785F74D85EFAA74EA4D56B1D0576FD461BA0B37199C> |-
/h <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA64197CEECB76B9E4
D2E9F717E2E21BA6AFBDB9D486017DE1334EE2B8AC7E25B49C380829180892EE
A76E25D726C9DCA303C64F5FE456E4A565D8D0ED565D009BA02A6DD13A835659
5990FC1760FC10BB02F96DEC2D5390B1C4D4059132A392595F028220DA07D2CD
E701448700C9> |-
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 103 /g put
dup 104 /h put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[65{/.notdef}rp /A /.notdef /C /D /.notdef /F /G 
/.notdef /I /J /.notdef /L 3{/.notdef}rp /P /.notdef 
/R /S /T 12{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u 3{/.notdef}rp /y 134{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
124.202 352.665 mo
(IntegerTermSynth)
[.881096 1.32301 .735588 1.17477 1.32301 1.17477 .881104 1.61668 1.17479 .881088 2.05859 1.47118 
1.323 1.323 .73558 0 ]xsh
60.381 116.566 mo
60.381 113.017 56.4039 110.14 51.498 110.14 cv
46.5921 110.14 42.615 113.017 42.615 116.566 cv
42.615 120.115 46.5921 122.992 51.498 122.992 cv
56.4039 122.992 60.381 120.115 60.381 116.566 cv
@
60.381 116.566 mo
60.381 113.017 56.4039 110.14 51.498 110.14 cv
46.5921 110.14 42.615 113.017 42.615 116.566 cv
42.615 120.115 46.5921 122.992 51.498 122.992 cv
56.4039 122.992 60.381 120.115 60.381 116.566 cv
/1 
[/DeviceRGB] /CSA add_res
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/hyphen <1C60D8A8C9B81F2C7E673161CF52871F3F524B3A1BAC5ADA04F510A
476> |-
/slash <1C60D8A8C9B854D088EAD778FBC18D924BA165ED7CB0EB5700C3B61B
62ACF96E65C0BF> |-
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
/colon <1C60D8A8C9B854D0E389293C42E83787A5BE0CE9B5745E40D1B32D07
F826004562E0981DB26F3EF2E2B5CD932C33C49C462F9673F306A9A8ECFFE93D
9FCE8BF4190AA3F1208FCCE1> |-
/equal <1C60D8A8C9B7E7C1C7C30B941AA047473EBF9655DE246137CE0666A3
DD27E47997A26319529C8C4FF5C38D266AE0> |-
/greater <1C60D8A8C9B7E7C1C7C30B940B3D62C7A181F0EBB0723CBB160375
71F050C44CCE59A85ACB3DB6BF9B03383F> |-
/O <1C60D8A8C9B6079F258D65BC2331B95A484F6FB0C89DE7976C286549CD33
A4D7316575EC038BAA234ED3FB5DEACB25E52512A7CBD428E6DBD2EB830622E8
8A44262525560702DCFFFB3478FE1A2C6113548B23F661EC01296D75C1A7D5FE
B75CD951FFE5A9> |-
/w <1C60D8A8C9B6079F6CBBA5F366E947F933D60DF598D919B1B7650559D736
37DABDC1EE55BCEC17305D792CEB494E24BD853631335C74FFCA113C4D914522
6940D65B0FA636B78B1332922431C88D4DDF20C0A3C1C91D0C3F0EC21F67A6EF
80D94D8DD0BC64DA8FAF76B12BBC90C7B441833497F4FAAF7AFFFE22453504D1
C6C3D3F89787D8CE910F64CD7AC81F424C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 58 /colon put
dup 61 /equal put
dup 62 /greater put
dup 79 /O put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one 
8{/.notdef}rp /colon 2{/.notdef}rp /equal /greater 2{/.notdef}rp /A /.notdef 
/C /D /.notdef /F /G /.notdef /I /J 
/.notdef /L 2{/.notdef}rp /O /P /.notdef /R /S 
/T 12{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u /.notdef 
/w /.notdef /y 134{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
45.6928 114.147 mo
(FileReader)
[1.47118 .735588 .735588 1.17478 1.76486 1.17479 1.17478 1.323 1.17479 0 ]xsh
47.3716 117.171 mo
(work=0)
[1.91037 1.323 .8811 1.323 1.49233 0 ]xsh
46.5262 120.195 mo
(I/O: 0->1)
[.8811 .735588 1.91037 .735588 .661499 1.323 .881096 1.49233 0 ]xsh
62.838 136.222 mo
62.838 132.673 57.7609 129.796 51.498 129.796 cv
45.2351 129.796 40.158 132.673 40.158 136.222 cv
40.158 139.771 45.2351 142.648 51.498 142.648 cv
57.7609 142.648 62.838 139.771 62.838 136.222 cv
@
62.838 136.222 mo
62.838 132.673 57.7609 129.796 51.498 129.796 cv
45.2351 129.796 40.158 132.673 40.158 136.222 cv
40.158 139.771 45.2351 142.648 51.498 142.648 cv
57.7609 142.648 62.838 139.771 62.838 136.222 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
/three <1C60D8A8C9B7A73DB9E68392B0D8A76464A51F2E94D7CC8D0C2C4EA9
EB677CBC38A50658519E8BF18CD893FCF8B1BA3E22E132B8EDB4B7CD483A2AC4
23E82DF2F3816B8AE8EA5F180D3F5DFF2BF284FCE4CE5C4E107DDB61A9BE179C
50061EE6040417B0DF341D85D92A63653C2A28BA649E4CD9966C4B081E30F323
54693AC79886604480856D93C0D7CC0DE6962663CC1F198BBFA4> |-
/six <1C60D8A8C9B7A73DF81BACD811429F931042E1295F1D2320E46DE79DF7
47FCAABFFD92F045A475E54E15C8E93ECB3BD59C8545C0EF45BF22429615FC68
5C033A02F070B2C6D7D737838C1853D297AC8915086E73952A7A9847D6F588AB
17767CC39CB62607242BC1B7BFF5295CEB6C03755CD9B53DA2> |-
/seven <1C60D8A8C9B7A73DFE313D538903D2D688A80497AF19F58251B88346
588CB5A8F94928A032E7AE04ED687068FF5EFE684F47125CC227938E> |-
/eight <1C60D8A8C9B7A73D9EB159A3CFECEE26FAC12AD4B6691842B4C84783
E84E1D8CD272AEC54014C937C15B810E403549328E3DC44B6A66E9E0AE5509A1
20FFE6F694340EC43D35C59CD7D1B2F14C1F1D5BA576A10F77E962817750FC0E
DC62627EE0E94BCE030A10C59143A015250A384C09B6A65F8572DF3FCBF68CF8
0D23E4E88D0691BD2178810DDABD5F40D8018F795B8CB5A52DDDD05F80E9A2BC
CDF3A5E14C701FBADF0447A7AE0E47FA8F86216AC25155BFF3569B19382CA905
7B18009FE630A2D7CEFDC3A4A3> |-
/E <1C60D8A8C9B7D8BE1621F7F8DAEB9FA9CBAFC8F4F4D756F2191C830A0E4A
58F87E3DDE67D49AF36DDF5F1FB2D74CAA0A1A0C249C8C349E149A4722F92BF7
61EFA3C2F9EC864F14F3A3AC121B867A3642166A4B07211381D27468A1D61050
1454C0DD1325D701AB4ADD917E16E61514B3C2631A525AEC590FB4C52AA73BF6
506DADDCC92C07368DF00A34F77E6ED1C2061C6913B4C24C30A64720E240E09F
9DD8F5EF76F17E9EEAE569D41B7D8D946B46BFFC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 50 /two put
dup 51 /three put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 69 /E put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one 
/two /three 2{/.notdef}rp /six /seven /eight /.notdef /colon 
2{/.notdef}rp /equal /greater 2{/.notdef}rp /A /.notdef /C /D 
/E /F /G /.notdef /I /J /.notdef /L 
2{/.notdef}rp /O /P /.notdef /R /S /T 12{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u /.notdef /w /.notdef 
/y 134{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
43.4119 133.803 mo
(RPEInputFilter)
[1.76486 1.47118 1.61668 .8811 1.323 1.323 1.323 .735588 1.47118 .735588 .735588 .735584 
1.17479 0 ]xsh
45.3871 136.827 mo
(work=7328)
[1.91037 1.323 .8811 1.323 1.49233 1.323 1.323 1.323 0 ]xsh
44.5417 139.851 mo
(I/O: 260->60)
[.8811 .735584 1.91037 .735588 .661499 1.323 1.323 1.323 .881096 1.49233 1.323 0 
]xsh
51.498 122.992 mo
51.498 124.504 51.498 126.205 51.498 127.906 cv
@
51.12 127.906 mo
51.498 129.796 li
52.065 127.906 li
cp
@
51.12 127.906 mo
51.498 129.796 li
52.065 127.906 li
f
63.972 158.146 mo
63.972 154.597 58.3872 151.72 51.498 151.72 cv
44.6088 151.72 39.024 154.597 39.024 158.146 cv
39.024 161.695 44.6088 164.572 51.498 164.572 cv
58.3872 164.572 63.972 161.695 63.972 158.146 cv
@
63.972 158.146 mo
63.972 154.597 58.3872 151.72 51.498 151.72 cv
44.6088 151.72 39.024 154.597 39.024 158.146 cv
39.024 161.695 44.6088 164.572 51.498 164.572 cv
58.3872 164.572 63.972 161.695 63.972 158.146 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
/five <1C60D8A8C9B7A73DB9D92E2C498F1C8C272174C48D3E3EA8F27C6E6BA
93064621D133D030C551A42025686691A783FB90A2D496BEF06790AC79A6878D
99BC23CD14D9CFD812148CC847ABD0CF7E73A1A9D5ACE6E2E3BBFD4DD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 52 /four put
dup 53 /five put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one 
/two /three /four /five /six /seven /eight /.notdef 
/colon 2{/.notdef}rp /equal /greater 2{/.notdef}rp /A /.notdef /C 
/D /E /F /G /.notdef /I /J /.notdef 
/L 2{/.notdef}rp /O /P /.notdef /R /S /T 
12{/.notdef}rp /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /.notdef /w 
/.notdef /y 134{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
42.1643 155.727 mo
(RPEDecodeFilter)
[1.76486 1.47118 1.61668 1.91037 1.17478 1.17479 1.323 1.323 1.17479 1.47117 .735588 .735588 
.735588 1.17479 0 ]xsh
44.7256 158.751 mo
(work=10544)
[1.91037 1.323 .8811 1.323 1.49233 1.323 1.323 1.323 1.323 0 ]xsh
45.2032 161.775 mo
(I/O: 15->40)
[.8811 .735588 1.91037 .735588 .661499 1.323 1.323 .8811 1.49233 1.323 0 ]xsh
51.498 142.648 mo
51.498 144.916 51.498 147.562 51.498 149.83 cv
@
51.12 149.83 mo
51.498 151.72 li
52.065 149.83 li
cp
@
51.12 149.83 mo
51.498 151.72 li
52.065 149.83 li
f
103.851 177.802 mo
103.851 175.923 98.9431 174.4 92.889 174.4 cv
86.8349 174.4 81.927 175.923 81.927 177.802 cv
81.927 179.681 86.8349 181.204 92.889 181.204 cv
98.9431 181.204 103.851 179.681 103.851 177.802 cv
@
103.851 177.802 mo
103.851 175.923 98.9431 174.4 92.889 174.4 cv
86.8349 174.4 81.927 175.923 81.927 177.802 cv
81.927 179.681 86.8349 181.204 92.889 181.204 cv
98.9431 181.204 103.851 179.681 103.851 177.802 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six /seven /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
2{/.notdef}rp /A /.notdef /C /D /E /F /G 
/.notdef /I /J /.notdef /L 2{/.notdef}rp /O /P 
/.notdef /R /S /T 12{/.notdef}rp /a /b /c 
/d /e /f /g /h /i /.notdef /k 
/l /m /n /o /p /.notdef /r /s 
/t /u /.notdef /w /.notdef /y 134{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
83.8132 178.407 mo
(roundrobin\(40,1\))
[.881096 1.32301 1.323 1.323 1.323 .881104 1.323 1.323 .735588 1.323 .881104 1.323 
1.323 .661499 1.32301 0 ]xsh
57.357 163.816 mo
59.247 165.706 61.515 167.596 63.405 168.352 cv
68.508 170.809 76.824 173.266 83.25 175.156 cv
@
82.683 175.534 mo
84.573 175.534 li
82.872 174.589 li
cp
@
82.683 175.534 mo
84.573 175.534 li
82.872 174.589 li
f
114.813 19.042 mo
114.813 15.493 108.297 12.616 100.26 12.616 cv
92.2226 12.616 85.707 15.493 85.707 19.042 cv
85.707 22.591 92.2226 25.468 100.26 25.468 cv
108.297 25.468 114.813 22.591 114.813 19.042 cv
@
114.813 19.042 mo
114.813 15.493 108.297 12.616 100.26 12.616 cv
92.2226 12.616 85.707 15.493 85.707 19.042 cv
85.707 22.591 92.2226 25.468 100.26 25.468 cv
108.297 25.468 114.813 22.591 114.813 19.042 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/U <1C60D8A8C9B6079F675A124E1112F68E116C07D407D6BD729F3D1467FEC9
DB1B717EDCA1CB257898FAA810DC98AD012099D6E27B9582DB9C127CF24AAE1E
5B37683D2BCD64B5A5B8A07FAB5E4A8A80CE7FE3009E0C18967F5352FF3AD65B
1392BE000C7D33B48AEC2DD2A19998C5FE8EA47D78> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 85 /U put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six /seven /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
2{/.notdef}rp /A /.notdef /C /D /E /F /G 
/.notdef /I /J /.notdef /L 2{/.notdef}rp /O /P 
/.notdef /R /S /T /U 11{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
88.8678 16.6229 mo
(AdditionUpdateFilter)
[1.91037 1.323 1.32301 .735588 .735588 .735588 1.323 1.323 1.91037 1.32301 1.323 1.17478 
.735588 1.17478 1.47118 .735588 .735588 .735588 1.17478 0 ]xsh
94.1491 19.647 mo
(work=3788)
[1.91037 1.32301 .881096 1.323 1.49233 1.323 1.323 1.32301 0 ]xsh
93.9652 22.671 mo
(I/O: 41->40)
[.881096 .735588 1.91038 .73558 .661507 1.323 1.323 .881096 1.49233 1.323 0 ]xsh
111.033 24.712 mo
114.624 26.791 118.026 29.6259 119.349 32.272 cv
123.507 40.588 120.672 50.794 120.672 59.866 cv
120.672 59.866 120.672 59.866 120.672 136.222 cv
120.672 141.703 124.83 164.572 121.05 168.352 cv
117.27 172.321 109.143 174.778 102.528 176.101 cv
@
111.789 24.523 mo
109.899 23.956 li
111.222 25.468 li
cp
@
111.789 24.523 mo
109.899 23.956 li
111.222 25.468 li
f
110.844 59.866 mo
110.844 57.987 106.698 56.464 101.583 56.464 cv
96.4683 56.464 92.322 57.987 92.322 59.866 cv
92.322 61.745 96.4683 63.268 101.583 63.268 cv
106.698 63.268 110.844 61.745 110.844 59.866 cv
@
110.844 59.866 mo
110.844 57.987 106.698 56.464 101.583 56.464 cv
96.4683 56.464 92.322 57.987 92.322 59.866 cv
92.322 61.745 96.4683 63.268 101.583 63.268 cv
106.698 63.268 110.844 61.745 110.844 59.866 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
94.1981 60.471 mo
(duplicate\(1,1\))
[1.323 1.32301 1.323 .735588 .735588 1.17478 1.17478 .735588 1.17478 .881104 1.323 .661499 
1.323 0 ]xsh
111.978 77.254 mo
111.978 75.375 107.324 73.852 101.583 73.852 cv
95.842 73.852 91.188 75.375 91.188 77.254 cv
91.188 79.133 95.842 80.656 101.583 80.656 cv
107.324 80.656 111.978 79.133 111.978 77.254 cv
@
111.978 77.254 mo
111.978 75.375 107.324 73.852 101.583 73.852 cv
95.842 73.852 91.188 75.375 91.188 77.254 cv
91.188 79.133 95.842 80.656 101.583 80.656 cv
107.324 80.656 111.978 79.133 111.978 77.254 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
93.1688 77.859 mo
(roundrobin\(0,1\))
[.881096 1.32301 1.323 1.323 1.323 .881104 1.323 1.323 .735588 1.323 .881104 1.323 
.661499 1.323 0 ]xsh
101.583 63.268 mo
101.583 65.725 101.583 69.316 101.583 72.151 cv
@
101.205 71.962 mo
101.583 73.852 li
102.15 71.962 li
cp
@
101.205 71.962 mo
101.583 73.852 li
102.15 71.962 li
f
145.242 77.254 mo
145.242 73.705 140.757 70.828 135.225 70.828 cv
129.693 70.828 125.208 73.705 125.208 77.254 cv
125.208 80.803 129.693 83.68 135.225 83.68 cv
140.757 83.68 145.242 80.803 145.242 77.254 cv
@
145.242 77.254 mo
145.242 73.705 140.757 70.828 135.225 70.828 cv
129.693 70.828 125.208 73.705 125.208 77.254 cv
125.208 80.803 129.693 83.68 135.225 83.68 cv
140.757 83.68 145.242 80.803 145.242 77.254 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H <1C60D8A8C9B6079F62AF7EE2120CD8667DDD4FA2DBFCE5E63E48B84464C1
802A269C64DF6D959EDF25835FFE2A562C206570E6F5B714FC53C2D5C307E1C8
A7B7F4078E600204C204D1FAC19490C22F80872356DF60239B84CD61D63A7DAA
1B4B4595C75AFC0D0514E00256BFA54FA5E3DE43161DB123A8A356631F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 72 /H put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six /seven /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
2{/.notdef}rp /A /.notdef /C /D /E /F /G 
/H /I /J /.notdef /L 2{/.notdef}rp /O /P 
/.notdef /R /S /T /U 11{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
129.712 74.8349 mo
(HoldFilter)
[1.91037 1.323 .735596 1.323 1.47118 .73558 .735596 .73558 1.17479 0 ]xsh
129.114 77.8589 mo
(work=4160)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 1.323 0 ]xsh
128.269 80.8829 mo
(I/O: 160->40)
[.881104 .73558 1.91037 .735596 .661499 1.323 1.323 1.323 .881104 1.49232 1.323 0 
]xsh
109.521 61.567 mo
112.734 62.512 116.325 63.646 118.593 64.78 cv
121.239 66.103 124.641 68.56 127.665 70.828 cv
@
127.476 71.206 mo
129.177 72.151 li
128.043 70.639 li
cp
@
127.476 71.206 mo
129.177 72.151 li
128.043 70.639 li
f
117.081 40.966 mo
117.081 36.269 108.535 32.461 97.992 32.461 cv
87.4494 32.461 78.903 36.269 78.903 40.966 cv
78.903 45.663 87.4494 49.471 97.992 49.471 cv
108.535 49.471 117.081 45.663 117.081 40.966 cv
@
117.081 40.966 mo
117.081 36.269 108.535 32.461 97.992 32.461 cv
87.4494 32.461 78.903 36.269 78.903 40.966 cv
78.903 45.663 87.4494 49.471 97.992 49.471 cv
108.535 49.471 117.081 45.663 117.081 40.966 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRR+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/asterisk <1C60D8A8C9B7A73DB9A0737247D562C61165E8E636EE73CF26D64
F3C6728422CEE27A3F00DC7152CA3773F07EA559F0959F48B519FDEC6150629C
166D2B4FBEF2A598C45B9530847243905C1F3F150F0DD5877800507BF2B97A2E
4942336B61DB2054C6AB2AE38E3AEA192A16823CC1BE212834012F90F71E96A0
46E312361C7B9D33CA838F52208FFCDFB3B3A9B2A9728D3AFAB94EEE3598CA05
C0D62AFFA345B041C6B4E56F6827F181D11C4BECD0C9CCA67> |-
/nine <1C60D8A8C9B7A73DFCCE6C978678EE12F2E62BD7D7FA244984C1E12F1
0EB0B8765182EBCE165DFB850DB8B03381969B80BB1CA53FFB24B5DE34530C8C
83A80415FE19B7C2B551E605143CF6469C8BCE336F9A5E5012DD932CF553D663
37837328637F50B90FF9AE8815D00BBA7EFCE6D508C5B6EBE2D> |-
/K <1C60D8A8C9B6079F62AF7EE261D2819ED7974217E7034289FA7C1BABF100
C6A5480EF2F67F33525B9F0C3A7EBEA8703E8C35FFE54D3010A9809D5E12442C
409B269A7D4346FFD3D0C882E0638FE5876FB72290B12BADDE73C28ABC60097D
5F47A0B45D92F7FD41DF8475D961E4F5A95EF6558D45744A11DE71603FC94A1B
038775E2BC960C01D2B930F2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRR+TimesNewRomanPSMT /Encoding get
dup 42 /asterisk put
dup 57 /nine put
dup 75 /K put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRR+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 
/greater 2{/.notdef}rp /A /.notdef /C /D /E /F 
/G /H /I /J /K /L 2{/.notdef}rp /O 
/P /.notdef /R /S /T /U 11{/.notdef}rp /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u /.notdef /w /.notdef /y 
134{/.notdef}rp]
LTFDRR+TimesNewRomanPSMT nf
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
83.2195 37.035 mo
(AdditionUpdateDuplication)
[1.91037 1.323 1.32301 .735588 .735588 .735588 1.323 1.323 1.91037 1.32301 1.323 1.17478 
.735588 1.17478 1.91038 1.323 1.323 .735588 .735588 1.17478 1.17479 .735588 .735588 1.323 
0 ]xsh
91.8811 40.0589 mo
(work=5920)
[1.91037 1.32301 .881096 1.323 1.49233 1.323 1.323 1.32301 0 ]xsh
91.0357 43.0829 mo
(I/O: 40->160)
[.881096 .735588 1.91038 .73558 .661507 1.323 1.323 .881096 1.49233 1.323 1.32301 0 
]xsh
82.7048 46.1069 mo
(*** PEEKS 40 AHEAD ***)
[1.323 1.323 1.32301 .661499 1.47118 1.61668 1.61668 1.91038 1.47117 .661507 1.323 1.323 
.661499 1.91037 1.91038 1.61668 1.91037 1.91038 .661499 1.323 1.323 0 ]xsh
99.504 25.468 mo
99.315 27.169 99.126 29.059 99.126 30.949 cv
@
98.748 30.382 mo
98.937 32.272 li
99.693 30.382 li
cp
@
98.748 30.382 mo
98.937 32.272 li
99.693 30.382 li
f
99.693 49.66 mo
99.882 51.361 100.26 53.2509 100.638 54.763 cv
@
100.071 54.763 mo
101.016 56.464 li
101.016 54.574 li
cp
@
100.071 54.763 mo
101.016 56.464 li
101.016 54.574 li
f
92.889 96.91 mo
92.889 93.361 88.9119 90.484 84.006 90.484 cv
79.1 90.484 75.123 93.361 75.123 96.91 cv
75.123 100.459 79.1 103.336 84.006 103.336 cv
88.9119 103.336 92.889 100.459 92.889 96.91 cv
@
92.889 96.91 mo
92.889 93.361 88.9119 90.484 84.006 90.484 cv
79.1 90.484 75.123 93.361 75.123 96.91 cv
75.123 100.459 79.1 103.336 84.006 103.336 cv
88.9119 103.336 92.889 100.459 92.889 96.91 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
78.2008 94.491 mo
(FileReader)
[1.47118 .735588 .735588 1.17478 1.76486 1.17478 1.17479 1.323 1.17478 0 ]xsh
79.8796 97.5149 mo
(work=0)
[1.91037 1.323 .881104 1.323 1.49233 0 ]xsh
79.0342 100.539 mo
(I/O: 0->1)
[.881096 .735588 1.91038 .73558 .661507 1.323 .881096 1.49233 0 ]xsh
97.992 80.467 mo
96.102 82.168 93.645 84.436 92.322 85.948 cv
91.377 87.082 90.243 88.594 88.92 90.106 cv
@
88.731 89.35 mo
88.164 91.24 li
89.676 89.917 li
cp
@
88.731 89.35 mo
88.164 91.24 li
89.676 89.917 li
f
115.758 96.91 mo
115.758 93.361 111.612 90.484 106.497 90.484 cv
101.382 90.484 97.236 93.361 97.236 96.91 cv
97.236 100.459 101.382 103.336 106.497 103.336 cv
111.612 103.336 115.758 100.459 115.758 96.91 cv
@
115.758 96.91 mo
115.758 93.361 111.612 90.484 106.497 90.484 cv
101.382 90.484 97.236 93.361 97.236 96.91 cv
97.236 100.459 101.382 103.336 106.497 103.336 cv
111.612 103.336 115.758 100.459 115.758 96.91 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
102.381 94.491 mo
(Identity)
[.881096 1.32301 1.17478 1.323 .735588 .735588 .735588 0 ]xsh
100.386 97.5149 mo
(work=3840)
[1.91037 1.323 .881104 1.323 1.49233 1.323 1.32301 1.323 0 ]xsh
101.525 100.539 mo
(I/O: 1->1)
[.881096 .735588 1.91038 .73558 .661507 1.323 .881096 1.49233 0 ]xsh
102.528 80.656 mo
102.906 82.735 103.662 85.759 104.418 88.594 cv
@
104.04 88.783 mo
104.985 90.484 li
104.985 88.594 li
cp
@
104.04 88.783 mo
104.985 90.484 li
104.985 88.594 li
f
104.607 136.222 mo
104.607 134.343 99.3606 132.82 92.889 132.82 cv
86.4173 132.82 81.171 134.343 81.171 136.222 cv
81.171 138.101 86.4173 139.624 92.889 139.624 cv
99.3606 139.624 104.607 138.101 104.607 136.222 cv
@
104.607 136.222 mo
104.607 134.343 99.3606 132.82 92.889 132.82 cv
86.4173 132.82 81.171 134.343 81.171 136.222 cv
81.171 138.101 86.4173 139.624 92.889 139.624 cv
99.3606 139.624 104.607 138.101 104.607 136.222 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
83.1517 136.827 mo
(roundrobin\(2,160\))
[.881096 1.32301 1.323 1.323 1.323 .881104 1.323 1.323 .735588 1.323 .881104 1.323 
.661499 1.323 1.32301 1.323 0 ]xsh
108.009 158.146 mo
108.009 153.449 101.24 149.641 92.889 149.641 cv
84.5385 149.641 77.769 153.449 77.769 158.146 cv
77.769 162.843 84.5385 166.651 92.889 166.651 cv
101.24 166.651 108.009 162.843 108.009 158.146 cv
@
108.009 158.146 mo
108.009 153.449 101.24 149.641 92.889 149.641 cv
84.5385 149.641 77.769 153.449 77.769 158.146 cv
77.769 162.843 84.5385 166.651 92.889 166.651 cv
101.24 166.651 108.009 162.843 108.009 158.146 cv
.675 .855 .91 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
87.6698 154.215 mo
(LTPFilter)
[1.61668 1.61668 1.47118 1.47118 .735588 .735588 .735588 1.17478 0 ]xsh
86.1166 157.239 mo
(work=14632)
[1.91037 1.323 .881104 1.323 1.49233 1.323 1.32301 1.323 1.323 0 ]xsh
86.5942 160.263 mo
(I/O: 162->1)
[.881096 .735588 1.91038 .73558 .661507 1.323 1.323 1.323 .881104 1.49232 0 ]xsh
81.6435 163.287 mo
(*** STATEFUL ***)
[1.323 1.32301 1.323 .661499 1.47118 1.61668 1.91037 1.61668 1.61669 1.47118 1.91037 1.61668 
.661499 1.32301 1.323 0 ]xsh
92.889 139.624 mo
92.889 141.703 92.889 144.727 92.889 147.373 cv
@
92.511 147.562 mo
92.889 149.452 li
93.456 147.562 li
cp
@
92.511 147.562 mo
92.889 149.452 li
93.456 147.562 li
f
94.023 116.566 mo
94.023 113.017 89.0305 110.14 82.872 110.14 cv
76.7135 110.14 71.721 113.017 71.721 116.566 cv
71.721 120.115 76.7135 122.992 82.872 122.992 cv
89.0305 122.992 94.023 120.115 94.023 116.566 cv
@
94.023 116.566 mo
94.023 113.017 89.0305 110.14 82.872 110.14 cv
76.7135 110.14 71.721 113.017 71.721 116.566 cv
71.721 120.115 76.7135 122.992 82.872 122.992 cv
89.0305 122.992 94.023 120.115 94.023 116.566 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
74.86 114.147 mo
(LTPInputFilter)
[1.61668 1.61668 1.47118 .881104 1.323 1.323 1.323 .735588 1.47118 .735588 .735588 .735588 
1.17479 0 ]xsh
76.7611 117.171 mo
(work=2332)
[1.91037 1.32301 .881096 1.323 1.49233 1.323 1.323 1.32301 0 ]xsh
76.5772 120.195 mo
(I/O: 260->8)
[.881096 .735588 1.91038 .73558 .661507 1.323 1.323 1.323 .881104 1.49232 0 ]xsh
83.628 103.336 mo
83.439 105.037 83.25 106.927 83.25 108.817 cv
@
82.872 108.25 mo
83.25 110.14 li
83.817 108.25 li
cp
@
82.872 108.25 mo
83.25 110.14 li
83.817 108.25 li
f
86.085 122.803 mo
87.408 125.449 89.109 128.662 90.432 131.308 cv
@
89.865 131.308 mo
91.188 132.82 li
90.81 130.93 li
cp
@
89.865 131.308 mo
91.188 132.82 li
90.81 130.93 li
f
102.906 102.958 mo
102.339 103.903 101.961 104.848 101.583 105.604 cv
99.504 111.841 98.748 118.267 96.858 124.504 cv
96.48 126.205 95.535 128.662 94.779 130.93 cv
@
94.212 130.93 mo
94.212 132.82 li
95.157 131.119 li
cp
@
94.212 130.93 mo
94.212 132.82 li
95.157 131.119 li
f
92.889 166.84 mo
92.889 168.73 92.889 170.998 92.889 172.699 cv
@
92.511 172.51 mo
92.889 174.4 li
93.456 172.51 li
cp
@
92.511 172.51 mo
92.889 174.4 li
93.456 172.51 li
f
146.565 96.91 mo
146.565 95.031 141.911 93.508 136.17 93.508 cv
130.429 93.508 125.775 95.031 125.775 96.91 cv
125.775 98.789 130.429 100.312 136.17 100.312 cv
141.911 100.312 146.565 98.789 146.565 96.91 cv
@
146.565 96.91 mo
146.565 95.031 141.911 93.508 136.17 93.508 cv
130.429 93.508 125.775 95.031 125.775 96.91 cv
125.775 98.789 130.429 100.312 136.17 100.312 cv
141.911 100.312 146.565 98.789 146.565 96.91 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
127.756 97.515 mo
(roundrobin\(1,0\))
[.881104 1.323 1.323 1.323 1.323 .881104 1.323 1.323 .735596 1.323 .881088 1.323 
.661499 1.32301 0 ]xsh
135.603 83.68 mo
135.792 86.326 135.792 89.161 135.981 91.807 cv
@
135.603 91.618 mo
135.981 93.508 li
136.548 91.618 li
cp
@
135.603 91.618 mo
135.981 93.508 li
136.548 91.618 li
f
142.785 116.566 mo
142.785 113.017 138.977 110.14 134.28 110.14 cv
129.583 110.14 125.775 113.017 125.775 116.566 cv
125.775 120.115 129.583 122.992 134.28 122.992 cv
138.977 122.992 142.785 120.115 142.785 116.566 cv
@
142.785 116.566 mo
142.785 113.017 138.977 110.14 134.28 110.14 cv
129.583 110.14 125.775 113.017 125.775 116.566 cv
125.775 120.115 129.583 122.992 134.28 122.992 cv
138.977 122.992 142.785 120.115 142.785 116.566 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
130.164 114.147 mo
(Identity)
[.881104 1.323 1.17477 1.32301 .73558 .735596 .73558 0 ]xsh
128.83 117.171 mo
(work=960)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
129.308 120.195 mo
(I/O: 1->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
135.792 100.312 mo
135.603 102.58 135.225 105.793 135.036 108.817 cv
@
134.658 108.25 mo
134.847 110.14 li
135.603 108.25 li
cp
@
134.658 108.25 mo
134.847 110.14 li
135.603 108.25 li
f
165.087 116.566 mo
165.087 113.017 161.11 110.14 156.204 110.14 cv
151.298 110.14 147.321 113.017 147.321 116.566 cv
147.321 120.115 151.298 122.992 156.204 122.992 cv
161.11 122.992 165.087 120.115 165.087 116.566 cv
@
165.087 116.566 mo
165.087 113.017 161.11 110.14 156.204 110.14 cv
151.298 110.14 147.321 113.017 147.321 116.566 cv
147.321 120.115 151.298 122.992 156.204 122.992 cv
161.11 122.992 165.087 120.115 165.087 116.566 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
150.399 114.147 mo
(FileReader)
[1.47118 .73558 .735596 1.17479 1.76486 1.17477 1.17479 1.323 1.17479 0 ]xsh
152.078 117.171 mo
(work=0)
[1.91037 1.323 .881104 1.323 1.49232 0 ]xsh
151.232 120.195 mo
(I/O: 0->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
140.706 99.934 mo
143.163 101.635 146.187 103.903 147.888 105.604 cv
148.833 106.549 149.967 107.872 150.912 109.195 cv
@
150.723 109.573 mo
152.235 110.707 li
151.29 109.006 li
cp
@
150.723 109.573 mo
152.235 110.707 li
151.29 109.006 li
f
160.362 158.146 mo
160.362 156.267 155.116 154.744 148.644 154.744 cv
142.172 154.744 136.926 156.267 136.926 158.146 cv
136.926 160.025 142.172 161.548 148.644 161.548 cv
155.116 161.548 160.362 160.025 160.362 158.146 cv
@
160.362 158.146 mo
160.362 156.267 155.116 154.744 148.644 154.744 cv
142.172 154.744 136.926 156.267 136.926 158.146 cv
136.926 160.025 142.172 161.548 148.644 161.548 cv
155.116 161.548 160.362 160.025 160.362 158.146 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
138.907 158.751 mo
(roundrobin\(160,8\))
[.881104 1.323 1.323 1.323 1.323 .881104 1.323 1.323 .735596 1.323 .881088 1.323 
1.32301 1.323 .661499 1.323 0 ]xsh
161.874 177.802 mo
161.874 175.923 155.951 174.4 148.644 174.4 cv
141.337 174.4 135.414 175.923 135.414 177.802 cv
135.414 179.681 141.337 181.204 148.644 181.204 cv
155.951 181.204 161.874 179.681 161.874 177.802 cv
@
161.874 177.802 mo
161.874 175.923 155.951 174.4 148.644 174.4 cv
141.337 174.4 135.414 175.923 135.414 177.802 cv
135.414 179.681 141.337 181.204 148.644 181.204 cv
155.951 181.204 161.874 179.681 161.874 177.802 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
137.253 178.407 mo
(roundrobin\(120,40,8\))
[.881104 1.323 1.323 1.323 1.323 .881104 1.323 1.323 .735596 1.323 .881088 1.323 
1.32301 1.323 .661499 1.323 1.323 .661499 1.323 0 ]xsh
148.644 161.548 mo
148.644 164.572 148.644 169.108 148.644 172.699 cv
@
148.266 172.51 mo
148.644 174.4 li
149.211 172.51 li
cp
@
148.266 172.51 mo
148.644 174.4 li
149.211 172.51 li
f
136.359 122.803 mo
138.249 129.04 141.273 138.49 143.163 144.16 cv
143.919 146.617 145.431 150.208 146.565 153.043 cv
@
146.187 153.232 mo
147.321 154.744 li
146.943 152.854 li
cp
@
146.187 153.232 mo
147.321 154.744 li
146.943 152.854 li
f
169.056 136.222 mo
169.056 132.673 163.894 129.796 157.527 129.796 cv
151.16 129.796 145.998 132.673 145.998 136.222 cv
145.998 139.771 151.16 142.648 157.527 142.648 cv
163.894 142.648 169.056 139.771 169.056 136.222 cv
@
169.056 136.222 mo
169.056 132.673 163.894 129.796 157.527 129.796 cv
151.16 129.796 145.998 132.673 145.998 136.222 cv
145.998 139.771 151.16 142.648 157.527 142.648 cv
163.894 142.648 169.056 139.771 169.056 136.222 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
149.221 133.803 mo
(LARInputFilter)
[1.61668 1.91037 1.76486 .881104 1.323 1.323 1.323 .735596 1.47118 .73558 .735596 .73558 
1.17479 0 ]xsh
151.416 136.827 mo
(work=2460)
[1.91037 1.323 .881104 1.323 1.49232 1.32301 1.323 1.323 0 ]xsh
151.232 139.851 mo
(I/O: 260->8)
[.881104 .73558 1.91037 .735596 .661499 1.323 1.323 1.323 .881104 1.49232 0 ]xsh
156.582 122.992 mo
156.771 124.504 156.771 126.205 156.96 127.906 cv
@
156.582 127.906 mo
156.96 129.796 li
157.527 127.906 li
cp
@
156.582 127.906 mo
156.96 129.796 li
157.527 127.906 li
f
155.07 142.459 mo
153.558 145.861 152.046 150.019 150.723 153.232 cv
@
150.345 152.854 mo
149.967 154.744 li
151.29 153.232 li
cp
@
150.345 152.854 mo
149.967 154.744 li
151.29 153.232 li
f
145.053 213.334 mo
145.053 209.785 140.737 206.908 135.414 206.908 cv
130.091 206.908 125.775 209.785 125.775 213.334 cv
125.775 216.883 130.091 219.76 135.414 219.76 cv
140.737 219.76 145.053 216.883 145.053 213.334 cv
@
145.053 213.334 mo
145.053 209.785 140.737 206.908 135.414 206.908 cv
130.091 206.908 125.775 209.785 125.775 213.334 cv
125.775 216.883 130.091 219.76 135.414 219.76 cv
140.737 219.76 145.053 216.883 145.053 213.334 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
128.946 210.915 mo
(Anonymous)
[1.91037 1.323 1.323 1.32301 1.323 2.05858 1.323 1.32301 0 ]xsh
129.965 213.939 mo
(work=360)
[1.91037 1.323 .881104 1.323 1.49232 1.32301 1.323 0 ]xsh
130.442 216.963 mo
(I/O: 1->0)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
147.321 181.204 mo
145.431 186.685 141.084 197.836 138.249 205.585 cv
@
137.871 205.207 mo
137.682 207.097 li
138.816 205.585 li
cp
@
137.871 205.207 mo
137.682 207.097 li
138.816 205.585 li
f
148.833 232.99 mo
148.833 229.441 145.025 226.564 140.328 226.564 cv
135.631 226.564 131.823 229.441 131.823 232.99 cv
131.823 236.539 135.631 239.416 140.328 239.416 cv
145.025 239.416 148.833 236.539 148.833 232.99 cv
@
148.833 232.99 mo
148.833 229.441 145.025 226.564 140.328 226.564 cv
135.631 226.564 131.823 229.441 131.823 232.99 cv
131.823 236.539 135.631 239.416 140.328 239.416 cv
145.025 239.416 148.833 236.539 148.833 232.99 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
136.212 230.571 mo
(Identity)
[.881104 1.323 1.17477 1.32301 .73558 .735596 .73558 0 ]xsh
134.878 233.595 mo
(work=240)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
135.356 236.619 mo
(I/O: 1->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
148.644 181.204 mo
148.833 189.142 149.022 208.987 147.321 219.76 cv
147.132 221.65 145.998 224.107 144.864 226.186 cv
@
144.675 225.43 mo
144.297 227.32 li
145.62 225.808 li
cp
@
144.675 225.43 mo
144.297 227.32 li
145.62 225.808 li
f
317.61 196.702 mo
317.61 194.823 310.333 193.3 301.356 193.3 cv
292.379 193.3 285.102 194.823 285.102 196.702 cv
285.102 198.581 292.379 200.104 301.356 200.104 cv
310.333 200.104 317.61 198.581 317.61 196.702 cv
@
317.61 196.702 mo
317.61 194.823 310.333 193.3 301.356 193.3 cv
292.379 193.3 285.102 194.823 285.102 196.702 cv
285.102 198.581 292.379 200.104 301.356 200.104 cv
310.333 200.104 317.61 198.581 317.61 196.702 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
286.988 197.307 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.881104 1.323 1.323 1.323 1.323 .881104 1.323 1.323 .735596 1.323 .881104 1.323 
.661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 
.661499 1.323 0 ]xsh
161.874 177.991 mo
188.901 178.558 250.704 180.07 285.669 184.228 cv
289.449 184.795 294.174 188.764 297.387 191.977 cv
@
297.009 192.166 mo
298.521 193.3 li
297.576 191.599 li
cp
@
297.009 192.166 mo
298.521 193.3 li
297.576 191.599 li
f
152.235 344.122 mo
152.235 342.243 146.904 340.72 140.328 340.72 cv
133.752 340.72 128.421 342.243 128.421 344.122 cv
128.421 346.001 133.752 347.524 140.328 347.524 cv
146.904 347.524 152.235 346.001 152.235 344.122 cv
@
152.235 344.122 mo
152.235 342.243 146.904 340.72 140.328 340.72 cv
133.752 340.72 128.421 342.243 128.421 344.122 cv
128.421 346.001 133.752 347.524 140.328 347.524 cv
146.904 347.524 152.235 346.001 152.235 344.122 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
130.26 344.727 mo
(roundrobin\(0,40,8\))
[.881104 1.323 1.323 1.323 1.323 .881104 1.323 1.323 .735596 1.323 .881088 1.323 
.661499 1.32301 1.323 .661499 1.323 0 ]xsh
154.314 361.51 mo
154.314 357.961 148.052 355.084 140.328 355.084 cv
132.604 355.084 126.342 357.961 126.342 361.51 cv
126.342 365.059 132.604 367.936 140.328 367.936 cv
148.052 367.936 154.314 365.059 154.314 361.51 cv
@
154.314 361.51 mo
154.314 357.961 148.052 355.084 140.328 355.084 cv
132.604 355.084 126.342 357.961 126.342 361.51 cv
126.342 365.059 132.604 367.936 140.328 367.936 cv
148.052 367.936 154.314 365.059 154.314 361.51 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
129.454 359.091 mo
(IntegerTermReorder)
[.881104 1.323 .73558 1.17479 1.323 1.17479 .881088 1.61668 1.17479 .881104 2.05858 1.76486 
1.17479 1.323 .881104 1.323 1.17479 0 ]xsh
134.217 362.115 mo
(work=2040)
[1.91037 1.323 .881104 1.323 1.49232 1.32301 1.323 1.323 0 ]xsh
133.371 365.139 mo
(I/O: 48->360)
[.881104 .73558 1.91037 .735596 .661499 1.323 1.323 .881104 1.49232 1.323 1.323 0 
]xsh
140.328 347.524 mo
140.328 349.036 140.328 351.115 140.328 353.005 cv
@
139.95 353.194 mo
140.328 355.084 li
140.895 353.194 li
cp
@
139.95 353.194 mo
140.328 355.084 li
140.895 353.194 li
f
132.201 219.382 mo
131.067 221.839 129.933 224.485 129.555 226.564 cv
128.232 234.124 128.232 242.062 128.232 249.622 cv
128.232 249.622 128.232 249.622 128.232 313.882 cv
128.232 321.442 133.902 332.971 137.493 339.397 cv
@
136.926 339.397 mo
138.249 340.72 li
137.682 338.83 li
cp
@
136.926 339.397 mo
138.249 340.72 li
137.682 338.83 li
f
140.328 239.416 mo
140.328 246.976 140.328 259.072 140.328 266.254 cv
140.328 266.254 140.328 266.254 140.328 313.882 cv
140.328 320.686 140.328 331.837 140.328 338.641 cv
@
139.95 338.83 mo
140.328 340.72 li
140.895 338.83 li
cp
@
139.95 338.83 mo
140.328 340.72 li
140.895 338.83 li
f
192.87 213.334 mo
192.87 209.785 184.07 206.908 173.214 206.908 cv
162.358 206.908 153.558 209.785 153.558 213.334 cv
153.558 216.883 162.358 219.76 173.214 219.76 cv
184.07 219.76 192.87 216.883 192.87 213.334 cv
@
192.87 213.334 mo
192.87 209.785 184.07 206.908 173.214 206.908 cv
162.358 206.908 153.558 209.785 153.558 213.334 cv
153.558 216.883 162.358 219.76 173.214 219.76 cv
184.07 219.76 192.87 216.883 192.87 213.334 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
156.607 210.915 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 .881088 1.61668 1.91039 1.76486 1.323 1.323 .881088 1.32301 .73558 1.17479 
.881088 1.32301 1.17477 0 ]xsh
167.765 213.939 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49232 1.32301 1.323 0 ]xsh
168.243 216.963 mo
(I/O: 1->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
290.016 199.159 mo
287.559 199.726 285.669 200.104 285.669 200.104 cv
255.051 203.128 224.433 203.506 194.004 206.908 cv
192.303 207.097 190.224 207.664 187.956 208.231 cv
@
188.334 207.664 mo
186.633 208.609 li
188.523 208.609 li
cp
@
188.334 207.664 mo
186.633 208.609 li
188.523 208.609 li
f
235.584 213.334 mo
235.584 209.785 226.784 206.908 215.928 206.908 cv
205.072 206.908 196.272 209.785 196.272 213.334 cv
196.272 216.883 205.072 219.76 215.928 219.76 cv
226.784 219.76 235.584 216.883 235.584 213.334 cv
@
235.584 213.334 mo
235.584 209.785 226.784 206.908 215.928 206.908 cv
205.072 206.908 196.272 209.785 196.272 213.334 cv
196.272 216.883 205.072 219.76 215.928 219.76 cv
226.784 219.76 235.584 216.883 235.584 213.334 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
199.321 210.915 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 .881088 1.61668 1.91037 1.76486 1.32301 1.323 .881088 1.323 .735596 1.17479 
.881088 1.323 1.17479 0 ]xsh
210.479 213.939 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
210.957 216.963 mo
(I/O: 1->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
290.394 199.159 mo
288.126 199.726 286.236 200.104 285.669 200.104 cv
269.226 202.75 252.783 203.884 236.718 206.908 cv
235.206 207.286 233.127 207.853 231.048 208.42 cv
@
231.426 207.853 mo
229.725 208.798 li
231.615 208.798 li
cp
@
231.426 207.853 mo
229.725 208.798 li
231.615 208.798 li
f
278.298 213.334 mo
278.298 209.785 269.498 206.908 258.642 206.908 cv
247.786 206.908 238.986 209.785 238.986 213.334 cv
238.986 216.883 247.786 219.76 258.642 219.76 cv
269.498 219.76 278.298 216.883 278.298 213.334 cv
@
278.298 213.334 mo
278.298 209.785 269.498 206.908 258.642 206.908 cv
247.786 206.908 238.986 209.785 238.986 213.334 cv
238.986 216.883 247.786 219.76 258.642 219.76 cv
269.498 219.76 278.298 216.883 278.298 213.334 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
242.035 210.915 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.1748 .881073 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735565 1.1748 
.881104 1.323 1.17477 0 ]xsh
253.193 213.939 mo
(work=182)
[1.91037 1.32301 .881073 1.32303 1.49231 1.323 1.323 0 ]xsh
253.671 216.963 mo
(I/O: 1->1)
[.881104 .73558 1.91039 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
293.607 199.726 mo
287.748 201.994 279.621 205.207 272.817 207.853 cv
@
272.817 207.286 mo
271.305 208.42 li
273.195 208.231 li
cp
@
272.817 207.286 mo
271.305 208.42 li
273.195 208.231 li
f
321.012 213.334 mo
321.012 209.785 312.212 206.908 301.356 206.908 cv
290.5 206.908 281.7 209.785 281.7 213.334 cv
281.7 216.883 290.5 219.76 301.356 219.76 cv
312.212 219.76 321.012 216.883 321.012 213.334 cv
@
321.012 213.334 mo
321.012 209.785 312.212 206.908 301.356 206.908 cv
290.5 206.908 281.7 209.785 281.7 213.334 cv
281.7 216.883 290.5 219.76 301.356 219.76 cv
312.212 219.76 321.012 216.883 321.012 213.334 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
284.749 210.915 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.1748 .881073 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735565 1.1748 
.881104 1.323 1.17477 0 ]xsh
295.907 213.939 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
296.385 216.963 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
301.356 200.104 mo
301.356 201.427 301.356 203.317 301.356 205.018 cv
@
300.978 205.018 mo
301.356 206.908 li
301.923 205.018 li
cp
@
300.978 205.018 mo
301.356 206.908 li
301.923 205.018 li
f
363.726 213.334 mo
363.726 209.785 354.926 206.908 344.07 206.908 cv
333.214 206.908 324.414 209.785 324.414 213.334 cv
324.414 216.883 333.214 219.76 344.07 219.76 cv
354.926 219.76 363.726 216.883 363.726 213.334 cv
@
363.726 213.334 mo
363.726 209.785 354.926 206.908 344.07 206.908 cv
333.214 206.908 324.414 209.785 324.414 213.334 cv
324.414 216.883 333.214 219.76 344.07 219.76 cv
354.926 219.76 363.726 216.883 363.726 213.334 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
327.463 210.915 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.17477 .881104 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735596 1.17477 
.881104 1.323 1.17477 0 ]xsh
338.621 213.939 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
339.099 216.963 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
309.105 199.726 mo
314.964 201.994 323.091 205.207 329.895 207.853 cv
@
329.517 208.231 mo
331.407 208.42 li
329.895 207.286 li
cp
@
329.517 208.231 mo
331.407 208.42 li
329.895 207.286 li
f
406.44 213.334 mo
406.44 209.785 397.64 206.908 386.784 206.908 cv
375.928 206.908 367.128 209.785 367.128 213.334 cv
367.128 216.883 375.928 219.76 386.784 219.76 cv
397.64 219.76 406.44 216.883 406.44 213.334 cv
@
406.44 213.334 mo
406.44 209.785 397.64 206.908 386.784 206.908 cv
375.928 206.908 367.128 209.785 367.128 213.334 cv
367.128 216.883 375.928 219.76 386.784 219.76 cv
397.64 219.76 406.44 216.883 406.44 213.334 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
370.177 210.915 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.17477 .881104 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735596 1.17477 
.881104 1.323 1.17477 0 ]xsh
381.335 213.939 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
381.813 216.963 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
314.775 198.592 mo
329.328 200.671 352.197 204.262 365.994 206.908 cv
367.506 207.286 369.396 207.853 371.475 208.42 cv
@
370.908 208.798 mo
372.798 208.798 li
371.097 207.853 li
cp
@
370.908 208.798 mo
372.798 208.798 li
371.097 207.853 li
f
449.154 213.334 mo
449.154 209.785 440.354 206.908 429.498 206.908 cv
418.642 206.908 409.842 209.785 409.842 213.334 cv
409.842 216.883 418.642 219.76 429.498 219.76 cv
440.354 219.76 449.154 216.883 449.154 213.334 cv
@
449.154 213.334 mo
449.154 209.785 440.354 206.908 429.498 206.908 cv
418.642 206.908 409.842 209.785 409.842 213.334 cv
409.842 216.883 418.642 219.76 429.498 219.76 cv
440.354 219.76 449.154 216.883 449.154 213.334 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
412.891 210.915 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.17477 .881104 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735596 1.17477 
.881104 1.323 1.17477 0 ]xsh
424.049 213.939 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
424.527 216.963 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
316.476 198.025 mo
339.534 199.915 383.193 203.695 408.708 206.908 cv
410.409 207.097 412.488 207.664 414.756 208.231 cv
@
414.189 208.609 mo
416.079 208.609 li
414.378 207.664 li
cp
@
414.189 208.609 mo
416.079 208.609 li
414.378 207.664 li
f
491.868 213.334 mo
491.868 209.785 483.068 206.908 472.212 206.908 cv
461.356 206.908 452.556 209.785 452.556 213.334 cv
452.556 216.883 461.356 219.76 472.212 219.76 cv
483.068 219.76 491.868 216.883 491.868 213.334 cv
@
491.868 213.334 mo
491.868 209.785 483.068 206.908 472.212 206.908 cv
461.356 206.908 452.556 209.785 452.556 213.334 cv
452.556 216.883 461.356 219.76 472.212 219.76 cv
483.068 219.76 491.868 216.883 491.868 213.334 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
455.605 210.915 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.1748 .881073 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735565 1.1748 
.881104 1.323 1.17477 0 ]xsh
466.763 213.939 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
467.241 216.963 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
317.043 197.647 mo
347.283 199.348 413.622 203.317 451.422 206.908 cv
453.123 207.097 455.391 207.664 457.659 208.231 cv
@
457.092 208.609 mo
458.982 208.609 li
457.281 207.664 li
cp
@
457.092 208.609 mo
458.982 208.609 li
457.281 207.664 li
f
338.967 232.99 mo
338.967 231.111 331.69 229.588 322.713 229.588 cv
313.736 229.588 306.459 231.111 306.459 232.99 cv
306.459 234.869 313.736 236.392 322.713 236.392 cv
331.69 236.392 338.967 234.869 338.967 232.99 cv
@
338.967 232.99 mo
338.967 231.111 331.69 229.588 322.713 229.588 cv
313.736 229.588 306.459 231.111 306.459 232.99 cv
306.459 234.869 313.736 236.392 322.713 236.392 cv
331.69 236.392 338.967 234.869 338.967 232.99 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
308.345 233.595 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.881104 1.323 1.323 1.323 1.323 .881104 1.323 1.323 .735596 1.323 .881104 1.323 
.661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 
.661499 1.323 0 ]xsh
338.967 249.622 mo
338.967 247.743 331.69 246.22 322.713 246.22 cv
313.736 246.22 306.459 247.743 306.459 249.622 cv
306.459 251.501 313.736 253.024 322.713 253.024 cv
331.69 253.024 338.967 251.501 338.967 249.622 cv
@
338.967 249.622 mo
338.967 247.743 331.69 246.22 322.713 246.22 cv
313.736 246.22 306.459 247.743 306.459 249.622 cv
306.459 251.501 313.736 253.024 322.713 253.024 cv
331.69 253.024 338.967 251.501 338.967 249.622 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
308.345 250.227 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.881104 1.323 1.323 1.323 1.323 .881104 1.323 1.323 .735596 1.323 .881104 1.323 
.661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 
.661499 1.323 0 ]xsh
322.713 236.392 mo
322.713 238.66 322.713 241.873 322.713 244.519 cv
@
322.335 244.33 mo
322.713 246.22 li
323.28 244.33 li
cp
@
322.335 244.33 mo
322.713 246.22 li
323.28 244.33 li
f
186.255 218.059 mo
189.09 219.004 191.736 219.571 194.004 219.76 cv
231.426 223.54 269.415 222.784 307.026 226.564 cv
309.483 226.942 311.562 228.076 313.641 229.399 cv
@
312.885 229.588 mo
314.775 229.966 li
313.263 228.643 li
cp
@
312.885 229.588 mo
314.775 229.966 li
313.263 228.643 li
f
229.347 218.059 mo
231.993 218.815 234.639 219.571 236.718 219.76 cv
259.965 223.162 283.59 223.162 307.026 226.564 cv
309.483 226.942 311.562 228.076 313.641 229.399 cv
@
312.885 229.588 mo
314.775 229.966 li
313.263 228.643 li
cp
@
312.885 229.588 mo
314.775 229.966 li
313.263 228.643 li
f
272.817 217.87 mo
275.085 218.626 277.542 219.193 279.432 219.76 cv
288.504 222.406 297.954 223.918 307.026 226.564 cv
308.916 227.131 311.751 228.265 314.397 229.399 cv
@
313.83 229.588 mo
315.72 229.966 li
314.208 228.832 li
cp
@
313.83 229.588 mo
315.72 229.966 li
314.208 228.832 li
f
307.971 219.382 mo
311.184 222.406 314.775 225.808 317.799 228.454 cv
@
317.421 228.643 mo
319.122 229.588 li
317.988 228.076 li
cp
@
317.421 228.643 mo
319.122 229.588 li
317.988 228.076 li
f
337.455 219.382 mo
334.242 222.406 330.651 225.808 327.627 228.454 cv
@
327.438 228.076 mo
326.304 229.588 li
328.005 228.643 li
cp
@
327.438 228.076 mo
326.304 229.588 li
328.005 228.643 li
f
372.42 217.681 mo
360.513 221.272 344.07 226.375 333.486 229.777 cv
@
333.675 229.21 mo
331.974 230.155 li
333.864 230.155 li
cp
@
333.675 229.21 mo
331.974 230.155 li
333.864 230.155 li
f
415.89 218.059 mo
413.244 218.815 410.787 219.382 408.708 219.76 cv
389.43 223.162 357.111 228.076 338.022 230.911 cv
@
338.211 230.344 mo
336.321 231.1 li
338.211 231.289 li
cp
@
338.211 230.344 mo
336.321 231.1 li
338.211 231.289 li
f
458.793 218.059 mo
456.147 218.815 453.501 219.571 451.422 219.76 cv
420.237 223.918 366.372 229.021 339.156 231.478 cv
@
339.534 230.911 mo
337.644 231.667 li
339.534 231.856 li
cp
@
339.534 230.911 mo
337.644 231.667 li
339.534 231.856 li
f
192.87 266.254 mo
192.87 262.705 184.07 259.828 173.214 259.828 cv
162.358 259.828 153.558 262.705 153.558 266.254 cv
153.558 269.803 162.358 272.68 173.214 272.68 cv
184.07 272.68 192.87 269.803 192.87 266.254 cv
@
192.87 266.254 mo
192.87 262.705 184.07 259.828 173.214 259.828 cv
162.358 259.828 153.558 262.705 153.558 266.254 cv
153.558 269.803 162.358 272.68 173.214 272.68 cv
184.07 272.68 192.87 269.803 192.87 266.254 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
156.607 263.835 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 .881088 1.61668 1.91039 1.76486 1.323 1.323 .881088 1.32301 .73558 1.17479 
.881088 1.32301 1.17477 0 ]xsh
167.765 266.859 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49232 1.32301 1.323 0 ]xsh
168.243 269.883 mo
(I/O: 1->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
311.751 252.079 mo
310.05 252.646 308.538 252.835 307.026 253.024 cv
269.226 256.048 231.426 256.237 194.004 259.828 cv
192.303 260.017 190.035 260.584 187.767 261.151 cv
@
188.145 260.584 mo
186.444 261.529 li
188.334 261.529 li
cp
@
188.145 260.584 mo
186.444 261.529 li
188.334 261.529 li
f
235.584 266.254 mo
235.584 262.705 226.784 259.828 215.928 259.828 cv
205.072 259.828 196.272 262.705 196.272 266.254 cv
196.272 269.803 205.072 272.68 215.928 272.68 cv
226.784 272.68 235.584 269.803 235.584 266.254 cv
@
235.584 266.254 mo
235.584 262.705 226.784 259.828 215.928 259.828 cv
205.072 259.828 196.272 262.705 196.272 266.254 cv
196.272 269.803 205.072 272.68 215.928 272.68 cv
226.784 272.68 235.584 269.803 235.584 266.254 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
199.321 263.835 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 .881088 1.61668 1.91037 1.76486 1.32301 1.323 .881088 1.323 .735596 1.17479 
.881088 1.323 1.17479 0 ]xsh
210.479 266.859 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
210.957 269.883 mo
(I/O: 1->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
311.373 252.079 mo
308.916 252.646 307.026 253.024 307.026 253.024 cv
283.59 255.859 259.965 256.615 236.718 259.828 cv
235.017 260.206 232.938 260.584 230.859 261.151 cv
@
231.237 260.584 mo
229.536 261.529 li
231.426 261.529 li
cp
@
231.237 260.584 mo
229.536 261.529 li
231.426 261.529 li
f
278.298 266.254 mo
278.298 262.705 269.498 259.828 258.642 259.828 cv
247.786 259.828 238.986 262.705 238.986 266.254 cv
238.986 269.803 247.786 272.68 258.642 272.68 cv
269.498 272.68 278.298 269.803 278.298 266.254 cv
@
278.298 266.254 mo
278.298 262.705 269.498 259.828 258.642 259.828 cv
247.786 259.828 238.986 262.705 238.986 266.254 cv
238.986 269.803 247.786 272.68 258.642 272.68 cv
269.498 272.68 278.298 269.803 278.298 266.254 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
242.035 263.835 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.1748 .881073 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735565 1.1748 
.881104 1.323 1.17477 0 ]xsh
253.193 266.859 mo
(work=182)
[1.91037 1.32301 .881073 1.32303 1.49231 1.323 1.323 0 ]xsh
253.671 269.883 mo
(I/O: 1->1)
[.881104 .73558 1.91039 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
311.751 252.079 mo
301.923 254.347 287.937 257.749 279.432 259.828 cv
277.92 260.206 276.03 260.773 274.14 261.34 cv
@
274.518 260.773 mo
272.817 261.718 li
274.707 261.718 li
cp
@
274.518 260.773 mo
272.817 261.718 li
274.707 261.718 li
f
321.012 266.254 mo
321.012 262.705 312.212 259.828 301.356 259.828 cv
290.5 259.828 281.7 262.705 281.7 266.254 cv
281.7 269.803 290.5 272.68 301.356 272.68 cv
312.212 272.68 321.012 269.803 321.012 266.254 cv
@
321.012 266.254 mo
321.012 262.705 312.212 259.828 301.356 259.828 cv
290.5 259.828 281.7 262.705 281.7 266.254 cv
281.7 269.803 290.5 272.68 301.356 272.68 cv
312.212 272.68 321.012 269.803 321.012 266.254 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
284.749 263.835 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.1748 .881073 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735565 1.1748 
.881104 1.323 1.17477 0 ]xsh
295.907 266.859 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
296.385 269.883 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
318.555 252.835 mo
316.287 254.536 313.452 256.804 310.617 259.072 cv
@
310.428 258.694 mo
309.105 260.206 li
310.995 259.45 li
cp
@
310.428 258.694 mo
309.105 260.206 li
310.995 259.45 li
f
363.726 266.254 mo
363.726 262.705 354.926 259.828 344.07 259.828 cv
333.214 259.828 324.414 262.705 324.414 266.254 cv
324.414 269.803 333.214 272.68 344.07 272.68 cv
354.926 272.68 363.726 269.803 363.726 266.254 cv
@
363.726 266.254 mo
363.726 262.705 354.926 259.828 344.07 259.828 cv
333.214 259.828 324.414 262.705 324.414 266.254 cv
324.414 269.803 333.214 272.68 344.07 272.68 cv
354.926 272.68 363.726 269.803 363.726 266.254 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
327.463 263.835 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.17477 .881104 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735596 1.17477 
.881104 1.323 1.17477 0 ]xsh
338.621 266.859 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
339.099 269.883 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
326.871 252.835 mo
329.328 254.725 332.352 257.182 335.376 259.45 cv
@
334.62 259.45 mo
336.321 260.206 li
335.187 258.694 li
cp
@
334.62 259.45 mo
336.321 260.206 li
335.187 258.694 li
f
406.44 266.254 mo
406.44 262.705 397.64 259.828 386.784 259.828 cv
375.928 259.828 367.128 262.705 367.128 266.254 cv
367.128 269.803 375.928 272.68 386.784 272.68 cv
397.64 272.68 406.44 269.803 406.44 266.254 cv
@
406.44 266.254 mo
406.44 262.705 397.64 259.828 386.784 259.828 cv
375.928 259.828 367.128 262.705 367.128 266.254 cv
367.128 269.803 375.928 272.68 386.784 272.68 cv
397.64 272.68 406.44 269.803 406.44 266.254 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
370.177 263.835 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.17477 .881104 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735596 1.17477 
.881104 1.323 1.17477 0 ]xsh
381.335 266.859 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
381.813 269.883 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
333.675 252.079 mo
343.314 254.347 357.3 257.749 365.994 259.828 cv
367.506 260.206 369.396 260.773 371.286 261.34 cv
@
370.719 261.718 mo
372.609 261.718 li
370.908 260.773 li
cp
@
370.719 261.718 mo
372.609 261.718 li
370.908 260.773 li
f
449.154 266.254 mo
449.154 262.705 440.354 259.828 429.498 259.828 cv
418.642 259.828 409.842 262.705 409.842 266.254 cv
409.842 269.803 418.642 272.68 429.498 272.68 cv
440.354 272.68 449.154 269.803 449.154 266.254 cv
@
449.154 266.254 mo
449.154 262.705 440.354 259.828 429.498 259.828 cv
418.642 259.828 409.842 262.705 409.842 266.254 cv
409.842 269.803 418.642 272.68 429.498 272.68 cv
440.354 272.68 449.154 269.803 449.154 266.254 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
412.891 263.835 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.17477 .881104 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735596 1.17477 
.881104 1.323 1.17477 0 ]xsh
424.049 266.859 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
424.527 269.883 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
337.266 251.134 mo
356.355 253.213 389.241 256.804 408.708 259.828 cv
410.409 260.206 412.488 260.584 414.567 261.151 cv
@
414 261.529 mo
415.89 261.529 li
414.189 260.584 li
cp
@
414 261.529 mo
415.89 261.529 li
414.189 260.584 li
f
491.868 266.254 mo
491.868 262.705 483.068 259.828 472.212 259.828 cv
461.356 259.828 452.556 262.705 452.556 266.254 cv
452.556 269.803 461.356 272.68 472.212 272.68 cv
483.068 272.68 491.868 269.803 491.868 266.254 cv
@
491.868 266.254 mo
491.868 262.705 483.068 259.828 472.212 259.828 cv
461.356 259.828 452.556 262.705 452.556 266.254 cv
452.556 269.803 461.356 272.68 472.212 272.68 cv
483.068 272.68 491.868 269.803 491.868 266.254 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
455.605 263.835 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.1748 .881073 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735565 1.1748 
.881104 1.323 1.17477 0 ]xsh
466.763 266.859 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
467.241 269.883 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
338.211 250.567 mo
365.049 252.457 419.859 256.426 451.422 259.828 cv
453.123 260.017 455.202 260.584 457.47 261.151 cv
@
456.903 261.529 mo
458.793 261.529 li
457.092 260.584 li
cp
@
456.903 261.529 mo
458.793 261.529 li
457.092 260.584 li
f
338.967 282.886 mo
338.967 281.007 331.69 279.484 322.713 279.484 cv
313.736 279.484 306.459 281.007 306.459 282.886 cv
306.459 284.765 313.736 286.288 322.713 286.288 cv
331.69 286.288 338.967 284.765 338.967 282.886 cv
@
338.967 282.886 mo
338.967 281.007 331.69 279.484 322.713 279.484 cv
313.736 279.484 306.459 281.007 306.459 282.886 cv
306.459 284.765 313.736 286.288 322.713 286.288 cv
331.69 286.288 338.967 284.765 338.967 282.886 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
308.345 283.491 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.881104 1.323 1.323 1.323 1.323 .881104 1.323 1.323 .735596 1.323 .881104 1.323 
.661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 
.661499 1.323 0 ]xsh
338.967 297.25 mo
338.967 295.371 331.69 293.848 322.713 293.848 cv
313.736 293.848 306.459 295.371 306.459 297.25 cv
306.459 299.129 313.736 300.652 322.713 300.652 cv
331.69 300.652 338.967 299.129 338.967 297.25 cv
@
338.967 297.25 mo
338.967 295.371 331.69 293.848 322.713 293.848 cv
313.736 293.848 306.459 295.371 306.459 297.25 cv
306.459 299.129 313.736 300.652 322.713 300.652 cv
331.69 300.652 338.967 299.129 338.967 297.25 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
308.345 297.855 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.881104 1.323 1.323 1.323 1.323 .881104 1.323 1.323 .735596 1.323 .881104 1.323 
.661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 
.661499 1.323 0 ]xsh
322.713 286.288 mo
322.713 287.989 322.713 290.068 322.713 291.958 cv
@
322.335 291.958 mo
322.713 293.848 li
323.28 291.958 li
cp
@
322.335 291.958 mo
322.713 293.848 li
323.28 291.958 li
f
186.255 270.979 mo
189.09 271.924 191.736 272.491 194.004 272.68 cv
231.426 276.46 269.226 276.649 307.026 279.484 cv
308.16 279.673 309.294 279.862 310.239 280.051 cv
@
309.672 280.429 mo
311.562 280.429 li
309.861 279.484 li
cp
@
309.672 280.429 mo
311.562 280.429 li
309.861 279.484 li
f
229.347 270.979 mo
231.993 271.735 234.639 272.491 236.718 272.68 cv
259.965 276.082 283.59 276.838 307.026 279.484 cv
308.16 279.673 309.105 279.862 310.05 280.051 cv
@
309.483 280.429 mo
311.373 280.429 li
309.672 279.484 li
cp
@
309.483 280.429 mo
311.373 280.429 li
309.672 279.484 li
f
272.628 270.79 mo
275.085 271.546 277.542 272.302 279.432 272.68 cv
287.559 274.759 300.6 277.783 310.239 280.051 cv
@
309.672 280.429 mo
311.562 280.429 li
309.861 279.484 li
cp
@
309.672 280.429 mo
311.562 280.429 li
309.861 279.484 li
f
308.916 272.302 mo
311.562 274.381 314.586 276.649 317.043 278.539 cv
@
316.476 278.728 mo
318.366 279.484 li
317.043 277.972 li
cp
@
316.476 278.728 mo
318.366 279.484 li
317.043 277.972 li
f
336.51 272.302 mo
333.864 274.381 330.84 276.649 328.383 278.539 cv
@
328.383 277.972 mo
327.06 279.484 li
328.95 278.728 li
cp
@
328.383 277.972 mo
327.06 279.484 li
328.95 278.728 li
f
372.798 270.79 mo
370.341 271.546 367.884 272.302 365.994 272.68 cv
357.678 274.759 344.637 277.783 335.187 280.051 cv
@
335.565 279.484 mo
333.864 280.429 li
335.754 280.429 li
cp
@
335.565 279.484 mo
333.864 280.429 li
335.754 280.429 li
f
416.079 270.979 mo
413.433 271.735 410.787 272.491 408.708 272.68 cv
389.808 275.704 358.245 279.295 338.967 281.185 cv
@
339.156 280.618 mo
337.266 281.374 li
339.156 281.563 li
cp
@
339.156 280.618 mo
337.266 281.374 li
339.156 281.563 li
f
458.982 270.979 mo
456.147 271.735 453.501 272.491 451.422 272.68 cv
420.426 276.271 367.128 279.862 339.912 281.752 cv
@
340.101 281.185 mo
338.211 281.941 li
340.101 282.13 li
cp
@
340.101 281.185 mo
338.211 281.941 li
340.101 282.13 li
f
192.87 313.882 mo
192.87 310.333 184.07 307.456 173.214 307.456 cv
162.358 307.456 153.558 310.333 153.558 313.882 cv
153.558 317.431 162.358 320.308 173.214 320.308 cv
184.07 320.308 192.87 317.431 192.87 313.882 cv
@
192.87 313.882 mo
192.87 310.333 184.07 307.456 173.214 307.456 cv
162.358 307.456 153.558 310.333 153.558 313.882 cv
153.558 317.431 162.358 320.308 173.214 320.308 cv
184.07 320.308 192.87 317.431 192.87 313.882 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
156.607 311.463 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 .881088 1.61668 1.91039 1.76486 1.323 1.323 .881088 1.32301 .73558 1.17479 
.881088 1.32301 1.17477 0 ]xsh
167.765 314.487 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49232 1.32301 1.323 0 ]xsh
168.243 317.511 mo
(I/O: 1->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
311.751 299.707 mo
310.05 300.274 308.538 300.463 307.026 300.652 cv
269.226 303.676 231.426 303.865 194.004 307.456 cv
192.303 307.645 190.035 308.212 187.767 308.779 cv
@
188.145 308.212 mo
186.444 309.157 li
188.334 309.157 li
cp
@
188.145 308.212 mo
186.444 309.157 li
188.334 309.157 li
f
235.584 313.882 mo
235.584 310.333 226.784 307.456 215.928 307.456 cv
205.072 307.456 196.272 310.333 196.272 313.882 cv
196.272 317.431 205.072 320.308 215.928 320.308 cv
226.784 320.308 235.584 317.431 235.584 313.882 cv
@
235.584 313.882 mo
235.584 310.333 226.784 307.456 215.928 307.456 cv
205.072 307.456 196.272 310.333 196.272 313.882 cv
196.272 317.431 205.072 320.308 215.928 320.308 cv
226.784 320.308 235.584 317.431 235.584 313.882 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
199.321 311.463 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.17479 .881104 .881088 1.61668 1.91037 1.76486 1.32301 1.323 .881088 1.323 .735596 1.17479 
.881088 1.323 1.17479 0 ]xsh
210.479 314.487 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
210.957 317.511 mo
(I/O: 1->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
311.373 299.707 mo
308.916 300.274 307.026 300.652 307.026 300.652 cv
283.59 303.487 259.965 304.243 236.718 307.456 cv
235.017 307.834 232.938 308.212 230.859 308.779 cv
@
231.237 308.212 mo
229.536 309.157 li
231.426 309.157 li
cp
@
231.237 308.212 mo
229.536 309.157 li
231.426 309.157 li
f
278.298 313.882 mo
278.298 310.333 269.498 307.456 258.642 307.456 cv
247.786 307.456 238.986 310.333 238.986 313.882 cv
238.986 317.431 247.786 320.308 258.642 320.308 cv
269.498 320.308 278.298 317.431 278.298 313.882 cv
@
278.298 313.882 mo
278.298 310.333 269.498 307.456 258.642 307.456 cv
247.786 307.456 238.986 310.333 238.986 313.882 cv
238.986 317.431 247.786 320.308 258.642 320.308 cv
269.498 320.308 278.298 317.431 278.298 313.882 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
242.035 311.463 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17479 .881088 .735596 1.17477 1.17479 .735596 .73558 1.323 1.323 1.76486 1.323 
1.1748 .881073 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735565 1.1748 
.881104 1.323 1.17477 0 ]xsh
253.193 314.487 mo
(work=182)
[1.91037 1.32301 .881073 1.32303 1.49231 1.323 1.323 0 ]xsh
253.671 317.511 mo
(I/O: 1->1)
[.881104 .73558 1.91039 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
311.751 299.707 mo
301.923 301.975 287.937 305.377 279.432 307.456 cv
277.92 307.834 276.03 308.401 274.14 308.968 cv
@
274.518 308.401 mo
272.817 309.346 li
274.707 309.346 li
cp
@
274.518 308.401 mo
272.817 309.346 li
274.707 309.346 li
f
321.012 313.882 mo
321.012 310.333 312.212 307.456 301.356 307.456 cv
290.5 307.456 281.7 310.333 281.7 313.882 cv
281.7 317.431 290.5 320.308 301.356 320.308 cv
312.212 320.308 321.012 317.431 321.012 313.882 cv
@
321.012 313.882 mo
321.012 310.333 312.212 307.456 301.356 307.456 cv
290.5 307.456 281.7 310.333 281.7 313.882 cv
281.7 317.431 290.5 320.308 301.356 320.308 cv
312.212 320.308 321.012 317.431 321.012 313.882 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
284.749 311.463 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.1748 .881073 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735565 1.1748 
.881104 1.323 1.17477 0 ]xsh
295.907 314.487 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
296.385 317.511 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
318.555 300.463 mo
316.287 302.164 313.452 304.432 310.617 306.7 cv
@
310.428 306.322 mo
309.105 307.834 li
310.995 307.078 li
cp
@
310.428 306.322 mo
309.105 307.834 li
310.995 307.078 li
f
363.726 313.882 mo
363.726 310.333 354.926 307.456 344.07 307.456 cv
333.214 307.456 324.414 310.333 324.414 313.882 cv
324.414 317.431 333.214 320.308 344.07 320.308 cv
354.926 320.308 363.726 317.431 363.726 313.882 cv
@
363.726 313.882 mo
363.726 310.333 354.926 307.456 344.07 307.456 cv
333.214 307.456 324.414 310.333 324.414 313.882 cv
324.414 317.431 333.214 320.308 344.07 320.308 cv
354.926 320.308 363.726 317.431 363.726 313.882 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
327.463 311.463 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.17477 .881104 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735596 1.17477 
.881104 1.323 1.17477 0 ]xsh
338.621 314.487 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
339.099 317.511 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
326.871 300.463 mo
329.328 302.353 332.352 304.81 335.376 307.078 cv
@
334.62 307.078 mo
336.321 307.834 li
335.187 306.322 li
cp
@
334.62 307.078 mo
336.321 307.834 li
335.187 306.322 li
f
406.44 313.882 mo
406.44 310.333 397.64 307.456 386.784 307.456 cv
375.928 307.456 367.128 310.333 367.128 313.882 cv
367.128 317.431 375.928 320.308 386.784 320.308 cv
397.64 320.308 406.44 317.431 406.44 313.882 cv
@
406.44 313.882 mo
406.44 310.333 397.64 307.456 386.784 307.456 cv
375.928 307.456 367.128 310.333 367.128 313.882 cv
367.128 317.431 375.928 320.308 386.784 320.308 cv
397.64 320.308 406.44 317.431 406.44 313.882 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
370.177 311.463 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.17477 .881104 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735596 1.17477 
.881104 1.323 1.17477 0 ]xsh
381.335 314.487 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
381.813 317.511 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
333.675 299.707 mo
343.314 301.975 357.3 305.377 365.994 307.456 cv
367.506 307.834 369.396 308.401 371.286 308.968 cv
@
370.719 309.346 mo
372.609 309.346 li
370.908 308.401 li
cp
@
370.719 309.346 mo
372.609 309.346 li
370.908 308.401 li
f
449.154 313.882 mo
449.154 310.333 440.354 307.456 429.498 307.456 cv
418.642 307.456 409.842 310.333 409.842 313.882 cv
409.842 317.431 418.642 320.308 429.498 320.308 cv
440.354 320.308 449.154 317.431 449.154 313.882 cv
@
449.154 313.882 mo
449.154 310.333 440.354 307.456 429.498 307.456 cv
418.642 307.456 409.842 310.333 409.842 313.882 cv
409.842 317.431 418.642 320.308 429.498 320.308 cv
440.354 320.308 449.154 317.431 449.154 313.882 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
412.891 311.463 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.17477 .881104 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735596 1.17477 
.881104 1.323 1.17477 0 ]xsh
424.049 314.487 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
424.527 317.511 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
337.266 298.762 mo
356.355 300.841 389.241 304.432 408.708 307.456 cv
410.409 307.834 412.488 308.212 414.567 308.779 cv
@
414 309.157 mo
415.89 309.157 li
414.189 308.212 li
cp
@
414 309.157 mo
415.89 309.157 li
414.189 308.212 li
f
491.868 313.882 mo
491.868 310.333 483.068 307.456 472.212 307.456 cv
461.356 307.456 452.556 310.333 452.556 313.882 cv
452.556 317.431 461.356 320.308 472.212 320.308 cv
483.068 320.308 491.868 317.431 491.868 313.882 cv
@
491.868 313.882 mo
491.868 310.333 483.068 307.456 472.212 307.456 cv
461.356 307.456 452.556 310.333 452.556 313.882 cv
452.556 317.431 461.356 320.308 472.212 320.308 cv
483.068 320.308 491.868 317.431 491.868 313.882 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
455.605 311.463 mo
(ReflectionCoeffLARppInternal)
[1.76486 1.17477 .881104 .735596 1.17477 1.1748 .735565 .735596 1.323 1.323 1.76486 1.323 
1.1748 .881073 .881104 1.6167 1.91037 1.76486 1.323 1.323 .881104 1.323 .735565 1.1748 
.881104 1.323 1.17477 0 ]xsh
466.763 314.487 mo
(work=182)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
467.241 317.511 mo
(I/O: 1->1)
[.881104 .735596 1.91037 .735565 .661499 1.323 .881104 1.49234 0 ]xsh
338.211 298.195 mo
365.049 300.085 419.859 304.054 451.422 307.456 cv
453.123 307.645 455.202 308.212 457.47 308.779 cv
@
456.903 309.157 mo
458.793 309.157 li
457.092 308.212 li
cp
@
456.903 309.157 mo
458.793 309.157 li
457.092 308.212 li
f
317.61 330.514 mo
317.61 328.635 310.333 327.112 301.356 327.112 cv
292.379 327.112 285.102 328.635 285.102 330.514 cv
285.102 332.393 292.379 333.916 301.356 333.916 cv
310.333 333.916 317.61 332.393 317.61 330.514 cv
@
317.61 330.514 mo
317.61 328.635 310.333 327.112 301.356 327.112 cv
292.379 327.112 285.102 328.635 285.102 330.514 cv
285.102 332.393 292.379 333.916 301.356 333.916 cv
310.333 333.916 317.61 332.393 317.61 330.514 cv
1 gry
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
286.988 331.119 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.881104 1.323 1.323 1.323 1.323 .881104 1.323 1.323 .735596 1.323 .881104 1.323 
.661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 .661499 1.323 
.661499 1.323 0 ]xsh
295.308 333.727 mo
292.095 335.239 288.315 336.751 285.669 336.94 cv
248.436 340.153 182.097 342.61 153.936 343.744 cv
@
154.125 343.177 mo
152.235 343.744 li
154.125 344.122 li
cp
@
154.125 343.177 mo
152.235 343.744 li
154.125 344.122 li
f
186.444 318.607 mo
189.09 319.363 191.925 320.119 194.004 320.308 cv
224.433 323.899 255.051 324.277 285.669 327.112 cv
286.803 327.301 287.937 327.49 288.882 327.679 cv
@
288.315 328.057 mo
290.205 328.057 li
288.504 327.112 li
cp
@
288.315 328.057 mo
290.205 328.057 li
288.504 327.112 li
f
229.725 318.418 mo
232.182 319.363 234.639 319.93 236.718 320.308 cv
252.783 323.521 269.226 324.655 285.669 327.112 cv
286.614 327.301 287.748 327.49 288.882 327.679 cv
@
288.315 328.057 mo
290.205 328.057 li
288.504 327.112 li
cp
@
288.315 328.057 mo
290.205 328.057 li
288.504 327.112 li
f
271.305 318.796 mo
278.109 321.442 286.425 324.655 292.284 326.923 cv
@
291.717 327.112 mo
293.607 327.49 li
292.095 326.356 li
cp
@
291.717 327.112 mo
293.607 327.49 li
292.095 326.356 li
f
301.356 320.308 mo
301.356 322.009 301.356 323.71 301.356 325.411 cv
@
300.978 325.222 mo
301.356 327.112 li
301.923 325.222 li
cp
@
300.978 325.222 mo
301.356 327.112 li
301.923 325.222 li
f
331.407 318.796 mo
324.603 321.442 316.287 324.655 310.428 326.923 cv
@
310.617 326.356 mo
309.105 327.49 li
310.995 327.112 li
cp
@
310.617 326.356 mo
309.105 327.49 li
310.995 327.112 li
f
372.987 318.418 mo
370.53 319.174 367.884 319.93 365.994 320.308 cv
352.575 323.143 330.651 326.356 316.098 328.435 cv
@
316.665 327.868 mo
314.775 328.624 li
316.665 328.813 li
cp
@
316.665 327.868 mo
314.775 328.624 li
316.665 328.813 li
f
416.268 318.607 mo
413.433 319.363 410.787 320.119 408.708 320.308 cv
383.76 323.71 341.235 327.301 317.988 329.191 cv
@
318.555 328.624 mo
316.665 329.38 li
318.555 329.569 li
cp
@
318.555 328.624 mo
316.665 329.38 li
318.555 329.569 li
f
458.982 318.607 mo
456.336 319.552 453.501 320.119 451.422 320.308 cv
414.378 324.088 349.929 327.679 318.933 329.38 cv
@
318.933 329.002 mo
317.043 329.569 li
318.933 329.758 li
cp
@
318.933 329.002 mo
317.043 329.569 li
318.933 329.758 li
f
156.204 383.434 mo
156.204 378.737 149.096 374.929 140.328 374.929 cv
131.56 374.929 124.452 378.737 124.452 383.434 cv
124.452 388.131 131.56 391.939 140.328 391.939 cv
149.096 391.939 156.204 388.131 156.204 383.434 cv
@
156.204 383.434 mo
156.204 378.737 149.096 374.929 140.328 374.929 cv
131.56 374.929 124.452 378.737 124.452 383.434 cv
124.452 388.131 131.56 391.939 140.328 391.939 cv
149.096 391.939 156.204 388.131 156.204 383.434 cv
.843 .18 .157 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
128.203 379.503 mo
(IntegerTermSynthCalc)
[.881104 1.323 .73558 1.17479 1.323 1.17479 .881088 1.6167 1.17477 .881104 2.05858 1.47118 
1.323 1.32301 .73558 1.323 1.76486 1.17479 .73558 0 ]xsh
133.556 382.527 mo
(work=52040)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 1.323 1.323 0 ]xsh
135.356 385.551 mo
(I/O: 9->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
129.083 388.575 mo
(*** STATEFUL ***)
[1.323 1.323 1.323 .661499 1.47118 1.61668 1.91039 1.61668 1.61668 1.47118 1.91037 1.61668 
.661499 1.323 1.323 0 ]xsh
140.328 367.936 mo
140.328 369.448 140.328 371.149 140.328 372.85 cv
@
139.95 372.85 mo
140.328 374.74 li
140.895 372.85 li
cp
@
139.95 372.85 mo
140.328 374.74 li
140.895 372.85 li
f
155.448 407.626 mo
155.448 402.929 148.679 399.121 140.328 399.121 cv
131.977 399.121 125.208 402.929 125.208 407.626 cv
125.208 412.323 131.977 416.131 140.328 416.131 cv
148.679 416.131 155.448 412.323 155.448 407.626 cv
@
155.448 407.626 mo
155.448 402.929 148.679 399.121 140.328 399.121 cv
131.977 399.121 125.208 402.929 125.208 407.626 cv
125.208 412.323 131.977 416.131 140.328 416.131 cv
148.679 416.131 155.448 412.323 155.448 407.626 cv
.455 .686 .812 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
129.449 403.695 mo
(PostProcessingFilter)
[1.47118 1.323 1.02928 .73558 1.47118 .881104 1.323 1.17477 1.17479 1.02928 1.02927 .735596 
1.323 1.323 1.47118 .73558 .735596 .73558 1.17479 0 ]xsh
134.217 406.719 mo
(work=7600)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 1.323 0 ]xsh
135.356 409.743 mo
(I/O: 1->1)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
129.082 412.767 mo
(*** STATEFUL ***)
[1.323 1.323 1.323 .661499 1.47118 1.61668 1.91039 1.61668 1.61668 1.47118 1.91037 1.61668 
.661499 1.323 1.323 0 ]xsh
140.328 392.128 mo
140.328 393.829 140.328 395.53 140.328 397.042 cv
@
139.95 397.042 mo
140.328 398.932 li
140.895 397.042 li
cp
@
139.95 397.042 mo
140.328 398.932 li
140.895 397.042 li
f
149.778 429.55 mo
149.778 426.001 145.547 423.124 140.328 423.124 cv
135.109 423.124 130.878 426.001 130.878 429.55 cv
130.878 433.099 135.109 435.976 140.328 435.976 cv
145.547 435.976 149.778 433.099 149.778 429.55 cv
@
149.778 429.55 mo
149.778 426.001 145.547 423.124 140.328 423.124 cv
135.109 423.124 130.878 426.001 130.878 429.55 cv
130.878 433.099 135.109 435.976 140.328 435.976 cv
145.547 435.976 149.778 433.099 149.778 429.55 cv
.271 .467 .702 rgb
f
0 gry
LTFDRR+TimesNewRomanPSMT*1 [2.646 0 0 -2.646 0 0 ]msf
134.008 427.131 mo
(IntegerPrint)
[.881104 1.323 .73558 1.17479 1.323 1.17479 .881088 1.47118 .881104 .73558 1.32301 0 
]xsh
134.878 430.155 mo
(work=240)
[1.91037 1.323 .881104 1.323 1.49234 1.323 1.323 0 ]xsh
135.356 433.179 mo
(I/O: 1->0)
[.881104 .73558 1.91037 .735596 .661499 1.323 .881104 1.49232 0 ]xsh
140.328 416.32 mo
140.328 418.021 140.328 419.722 140.328 421.234 cv
@
139.95 421.234 mo
140.328 423.124 li
140.895 421.234 li
cp
@
139.95 421.234 mo
140.328 423.124 li
140.895 421.234 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/LTFDRR+TimesNewRomanPSMT*1 uf
/LTFDRR+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
