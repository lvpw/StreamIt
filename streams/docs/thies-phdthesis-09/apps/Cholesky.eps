%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Cholesky.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:07:29 PM
%%BoundingBox: 0 0 254 649
%%HiResBoundingBox: 0 0 254 649
%%CropBox: 0 0 254 649
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -649 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 649 li
254 649 li
254 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 650 mo
290 650 li
290 0 li
35 0 li
cp
clp
.1115 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
36.892 648.108 mo
288.882 648.108 li
288.882 1.85394 li
36.892 1.85394 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 99 /c put
dup 104 /h put
dup 108 /l put
dup 111 /o put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/h <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA64197CEECB76B9E4
D2E9F717E2E21BA6AFBDB9D486017DE1334EE2B8AC7E25B49C380829180892EE
A76E25D726C9DCA303C64F5FE456E4A565D8D0ED565D009BA02A6DD13A835659
5990FC1760FC10BB02F96DEC2D5390B1C4D4059132A392595F028220DA07D2CD
E701448700C9> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDQS+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDQS+TimesNewRomanPSMT*1 
[99{/.notdef}rp /c 4{/.notdef}rp /h 3{/.notdef}rp /l 2{/.notdef}rp /o 
144{/.notdef}rp]
LTFDQS+TimesNewRomanPSMT nf
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
37.6665 3.10295 mo
(chol)
[.693062 .780499 .780499 0 ]xsh
38.676 624.916 mo
287.098 624.916 li
287.098 36.642 li
38.676 36.642 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQS+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQS+TimesNewRomanPSMT /Encoding get
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 107 /k put
dup 114 /r put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQS+TimesNewRomanPSMT*1 
[97{/.notdef}rp /a /b /c /.notdef /e 2{/.notdef}rp /h 
2{/.notdef}rp /k /l 2{/.notdef}rp /o 2{/.notdef}rp /r 141{/.notdef}rp]
LTFDQS+TimesNewRomanPSMT nf
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
39.3955 37.8909 mo
(break)
[.780499 .519802 .693062 .693062 0 ]xsh
49.2685 617.78 mo
285.314 617.78 li
285.314 44.6699 li
49.2685 44.6699 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
50.0061 45.9189 mo
(rchol)
[.519802 .693058 .780502 .780499 0 ]xsh
51.0525 616.888 mo
283.529 616.888 li
283.529 67.862 li
51.0525 67.862 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
51.772 69.1109 mo
(break)
[.780499 .519802 .693062 .693062 0 ]xsh
61.645 609.752 mo
281.746 609.752 li
281.746 75.89 li
61.645 75.89 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
62.3826 77.1389 mo
(rchol)
[.519802 .693058 .780502 .780502 0 ]xsh
63.429 608.86 mo
279.962 608.86 li
279.962 99.082 li
63.429 99.082 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
64.1485 100.331 mo
(break)
[.780502 .519798 .693062 .693062 0 ]xsh
74.0215 601.724 mo
278.177 601.724 li
278.177 107.11 li
74.0215 107.11 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
74.7591 108.359 mo
(rchol)
[.519798 .693062 .780502 .780502 0 ]xsh
75.8055 600.832 mo
276.395 600.832 li
276.395 130.302 li
75.8055 130.302 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
76.525 131.551 mo
(break)
[.780502 .519798 .693062 .693062 0 ]xsh
86.398 593.696 mo
274.61 593.696 li
274.61 138.33 li
86.398 138.33 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
87.1356 139.579 mo
(rchol)
[.519798 .693062 .780502 .780502 0 ]xsh
88.182 592.804 mo
272.826 592.804 li
272.826 161.522 li
88.182 161.522 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
88.9015 162.771 mo
(break)
[.780502 .519798 .693062 .693062 0 ]xsh
98.7745 585.668 mo
271.042 585.668 li
271.042 169.55 li
98.7745 169.55 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
99.5121 170.799 mo
(rchol)
[.519798 .693062 .780502 .780502 0 ]xsh
100.558 584.776 mo
269.257 584.776 li
269.257 192.742 li
100.558 192.742 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
101.278 193.991 mo
(break)
[.780502 .519798 .693062 .693062 0 ]xsh
111.151 577.64 mo
267.474 577.64 li
267.474 200.77 li
111.151 200.77 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
111.889 202.019 mo
(rchol)
[.519798 .693062 .780502 .780502 0 ]xsh
112.935 576.748 mo
265.69 576.748 li
265.69 223.962 li
112.935 223.962 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
113.655 225.211 mo
(break)
[.780502 .519798 .693062 .693062 0 ]xsh
123.527 569.612 mo
263.905 569.612 li
263.905 231.99 li
123.527 231.99 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
124.265 233.239 mo
(rchol)
[.519798 .693062 .780502 .780502 0 ]xsh
125.311 568.72 mo
262.121 568.72 li
262.121 255.182 li
125.311 255.182 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
126.031 256.431 mo
(break)
[.780502 .519798 .693054 .693069 0 ]xsh
135.904 561.584 mo
260.338 561.584 li
260.338 263.21 li
135.904 263.21 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
136.642 264.459 mo
(rchol)
[.519806 .693054 .780502 .780502 0 ]xsh
137.688 560.692 mo
258.554 560.692 li
258.554 286.402 li
137.688 286.402 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
138.408 287.651 mo
(break)
[.780502 .519806 .693054 .693054 0 ]xsh
148.28 553.556 mo
256.77 553.556 li
256.77 294.43 li
148.28 294.43 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
149.018 295.679 mo
(rchol)
[.519806 .693054 .780502 .780502 0 ]xsh
150.064 552.664 mo
254.986 552.664 li
254.986 317.622 li
150.064 317.622 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
150.784 318.871 mo
(break)
[.780502 .519806 .693054 .693054 0 ]xsh
160.657 545.528 mo
253.202 545.528 li
253.202 325.65 li
160.657 325.65 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
161.395 326.899 mo
(rchol)
[.519806 .693054 .780502 .780502 0 ]xsh
162.441 544.636 mo
251.418 544.636 li
251.418 348.842 li
162.441 348.842 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
163.161 350.091 mo
(break)
[.780502 .519806 .693054 .693054 0 ]xsh
173.033 537.5 mo
249.633 537.5 li
249.633 356.87 li
173.033 356.87 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
173.771 358.119 mo
(rchol)
[.519806 .693054 .780502 .780502 0 ]xsh
174.817 536.608 mo
247.85 536.608 li
247.85 380.062 li
174.817 380.062 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
175.537 381.311 mo
(break)
[.780502 .519806 .693054 .693054 0 ]xsh
185.41 529.472 mo
246.066 529.472 li
246.066 388.09 li
185.41 388.09 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
186.148 389.339 mo
(rchol)
[.519806 .693054 .780502 .780502 0 ]xsh
187.194 528.58 mo
244.282 528.58 li
244.282 411.282 li
187.194 411.282 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
187.914 412.531 mo
(break)
[.780502 .519806 .693054 .693054 0 ]xsh
197.786 521.444 mo
242.498 521.444 li
242.498 419.31 li
197.786 419.31 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
198.524 420.559 mo
(rchol)
[.519806 .693054 .780502 .780502 0 ]xsh
199.57 520.552 mo
240.714 520.552 li
240.714 442.502 li
199.57 442.502 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
200.29 443.751 mo
(break)
[.780502 .519806 .693054 .693054 0 ]xsh
210.163 513.416 mo
238.93 513.416 li
238.93 450.53 li
210.163 450.53 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
210.901 451.779 mo
(rchol)
[.519806 .693054 .780502 .780502 0 ]xsh
211.947 512.524 mo
237.146 512.524 li
237.146 473.722 li
211.947 473.722 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
212.667 474.971 mo
(break)
[.780502 .519806 .693054 .693054 0 ]xsh
223.543 504.496 mo
235.362 504.496 li
235.362 481.75 li
223.543 481.75 li
cp
@
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
224.281 482.999 mo
(rchol)
[.519806 .693054 .780502 .780502 0 ]xsh
57.631 8.32098 mo
57.631 6.22699 55.135 4.52997 52.056 4.52997 cv
48.977 4.52997 46.481 6.22699 46.481 8.32098 cv
46.481 10.415 48.977 12.112 52.056 12.112 cv
55.135 12.112 57.631 10.415 57.631 8.32098 cv
@
57.631 8.32098 mo
57.631 6.22699 55.135 4.52997 52.056 4.52997 cv
48.977 4.52997 46.481 6.22699 46.481 8.32098 cv
46.481 10.415 48.977 12.112 52.056 12.112 cv
55.135 12.112 57.631 10.415 57.631 8.32098 cv
/1 
[/DeviceRGB] /CSA add_res
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQS+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/hyphen <1C60D8A8C9B81F2C7E673161CF52871F3F524B3A1BAC5ADA04F510A
476> |-
/slash <1C60D8A8C9B854D088EAD778FBC18D924BA165ED7CB0EB5700C3B61B
62ACF96E65C0BF> |-
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
/three <1C60D8A8C9B7A73DB9E68392B0D8A76464A51F2E94D7CC8D0C2C4EA9
EB677CBC38A50658519E8BF18CD893FCF8B1BA3E22E132B8EDB4B7CD483A2AC4
23E82DF2F3816B8AE8EA5F180D3F5DFF2BF284FCE4CE5C4E107DDB61A9BE179C
50061EE6040417B0DF341D85D92A63653C2A28BA649E4CD9966C4B081E30F323
54693AC79886604480856D93C0D7CC0DE6962663CC1F198BBFA4> |-
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
/six <1C60D8A8C9B7A73DF81BACD811429F931042E1295F1D2320E46DE79DF7
47FCAABFFD92F045A475E54E15C8E93ECB3BD59C8545C0EF45BF22429615FC68
5C033A02F070B2C6D7D737838C1853D297AC8915086E73952A7A9847D6F588AB
17767CC39CB62607242BC1B7BFF5295CEB6C03755CD9B53DA2> |-
/colon <1C60D8A8C9B854D0E389293C42E83787A5BE0CE9B5745E40D1B32D07
F826004562E0981DB26F3EF2E2B5CD932C33C49C462F9673F306A9A8ECFFE93D
9FCE8BF4190AA3F1208FCCE1> |-
/equal <1C60D8A8C9B7E7C1C7C30B941AA047473EBF9655DE246137CE0666A3
DD27E47997A26319529C8C4FF5C38D266AE0> |-
/greater <1C60D8A8C9B7E7C1C7C30B940B3D62C7A181F0EBB0723CBB160375
71F050C44CCE59A85ACB3DB6BF9B03383F> |-
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
/O <1C60D8A8C9B6079F258D65BC2331B95A484F6FB0C89DE7976C286549CD33
A4D7316575EC038BAA234ED3FB5DEACB25E52512A7CBD428E6DBD2EB830622E8
8A44262525560702DCFFFB3478FE1A2C6113548B23F661EC01296D75C1A7D5FE
B75CD951FFE5A9> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
/w <1C60D8A8C9B6079F6CBBA5F366E947F933D60DF598D919B1B7650559D736
37DABDC1EE55BCEC17305D792CEB494E24BD853631335C74FFCA113C4D914522
6940D65B0FA636B78B1332922431C88D4DDF20C0A3C1C91D0C3F0EC21F67A6EF
80D94D8DD0BC64DA8FAF76B12BBC90C7B441833497F4FAAF7AFFFE22453504D1
C6C3D3F89787D8CE910F64CD7AC81F424C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQS+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 58 /colon put
dup 61 /equal put
dup 62 /greater put
dup 73 /I put
dup 79 /O put
dup 115 /s put
dup 117 /u put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQS+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one 
/.notdef /three /four /.notdef /six 3{/.notdef}rp /colon 2{/.notdef}rp 
/equal /greater 10{/.notdef}rp /I 5{/.notdef}rp /O 17{/.notdef}rp /a 
/b /c /.notdef /e 2{/.notdef}rp /h 2{/.notdef}rp /k 
/l 2{/.notdef}rp /o 2{/.notdef}rp /r /s /.notdef /u 
/.notdef /w 136{/.notdef}rp]
LTFDQS+TimesNewRomanPSMT nf
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
50.0189 6.8939 mo
(source)
[.607216 .780502 .780499 .519802 .693062 0 ]xsh
48.8411 8.6779 mo
(work=640)
[1.12702 .780502 .519798 .780502 .880394 .780502 .780499 0 ]xsh
48.3424 10.462 mo
(I/O: 0->136)
[.519802 .433956 1.12702 .43396 .390251 .780499 .519802 .880394 .780502 .780499 0 ]xsh
58.4115 19.9169 mo
58.4115 17.8229 55.566 16.1259 52.056 16.1259 cv
48.5459 16.1259 45.7005 17.8229 45.7005 19.9169 cv
45.7005 22.0109 48.5459 23.7079 52.056 23.7079 cv
55.566 23.7079 58.4115 22.0109 58.4115 19.9169 cv
@
58.4115 19.9169 mo
58.4115 17.8229 55.566 16.1259 52.056 16.1259 cv
48.5459 16.1259 45.7005 17.8229 45.7005 19.9169 cv
45.7005 22.0109 48.5459 23.7079 52.056 23.7079 cv
55.566 23.7079 58.4115 22.0109 58.4115 19.9169 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQS+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7A73DFE313D538903D2D688A80497AF19F58251B88346
588CB5A8F94928A032E7AE04ED687068FF5EFE684F47125CC227938E> |-
/eight <1C60D8A8C9B7A73D9EB159A3CFECEE26FAC12AD4B6691842B4C84783
E84E1D8CD272AEC54014C937C15B810E403549328E3DC44B6A66E9E0AE5509A1
20FFE6F694340EC43D35C59CD7D1B2F14C1F1D5BA576A10F77E962817750FC0E
DC62627EE0E94BCE030A10C59143A015250A384C09B6A65F8572DF3FCBF68CF8
0D23E4E88D0691BD2178810DDABD5F40D8018F795B8CB5A52DDDD05F80E9A2BC
CDF3A5E14C701FBADF0447A7AE0E47FA8F86216AC25155BFF3569B19382CA905
7B18009FE630A2D7CEFDC3A4A3> |-
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/v <1C60D8A8C9B7A73DDA3AE0A055993EE6BE7DFD4A4A2DB6881516C07791ED
230086728F5F7B4242AB79AA3E9EFA40308C16768E728C96C19C447086D3AC82
2F0AB1C43C44A30591856370C72E911DB5FEBBFD365EF7E42462BF4A23A3EEAE
F504CBF5C917EC0A44C5B6D735> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQS+TimesNewRomanPSMT /Encoding get
dup 55 /seven put
dup 56 /eight put
dup 100 /d put
dup 105 /i put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQS+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one 
/.notdef /three /four /.notdef /six /seven /eight /.notdef 
/colon 2{/.notdef}rp /equal /greater 10{/.notdef}rp /I 5{/.notdef}rp /O 
17{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h 
/i /.notdef /k /l 2{/.notdef}rp /o 2{/.notdef}rp /r 
/s /.notdef /u /v /w 136{/.notdef}rp]
LTFDQS+TimesNewRomanPSMT nf
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
49.8878 18.4899 mo
(divises)
[.780499 .43396 .780499 .43396 .607216 .693062 0 ]xsh
48.4509 20.274 mo
(work=1873)
[1.12702 .780502 .519798 .780502 .880394 .780502 .780499 .780502 0 ]xsh
47.562 22.058 mo
(I/O: 136->136)
[.519802 .433956 1.12702 .43396 .390251 .780499 .780499 .780502 .519798 .880398 .780502 .780499 
0 ]xsh
52.056 12.112 mo
52.056 13.004 52.056 14.007 52.056 15.0109 cv
@
51.833 15.0109 mo
52.056 16.1259 li
52.3905 15.0109 li
cp
@
51.833 15.0109 mo
52.056 16.1259 li
52.3905 15.0109 li
f
58.4115 31.5129 mo
58.4115 29.4189 55.566 27.722 52.056 27.722 cv
48.5459 27.722 45.7005 29.4189 45.7005 31.5129 cv
45.7005 33.6069 48.5459 35.304 52.056 35.304 cv
55.566 35.304 58.4115 33.6069 58.4115 31.5129 cv
@
58.4115 31.5129 mo
58.4115 29.4189 55.566 27.722 52.056 27.722 cv
48.5459 27.722 45.7005 29.4189 45.7005 31.5129 cv
45.7005 33.6069 48.5459 35.304 52.056 35.304 cv
55.566 35.304 58.4115 33.6069 58.4115 31.5129 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQS+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73DB9D92E2C498F1C8C272174C48D3E3EA8F27C6E6BA
93064621D133D030C551A42025686691A783FB90A2D496BEF06790AC79A6878D
99BC23CD14D9CFD812148CC847ABD0CF7E73A1A9D5ACE6E2E3BBFD4DD> |-
/p <1C60D8A8C9B7A73D9AFACE39AE6BAA6E09D7322029CE296F526808097535
692942DF193E08360A1A27EB6A08251F7D53D3FA96D22918185F2823E13833F6
44411211FB9E60C91D24768368C1EE71DFEA1AF8285D596D61CE8A067C14BC2E
E1974A4DF14D782DBEDB8D2CE5673BB9634CC4945A7FA5A5E1B87E0F2D94F438
C21548DAE429B68406206429A87E1B462DA7A9D2> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQS+TimesNewRomanPSMT /Encoding get
dup 53 /five put
dup 112 /p put
dup 116 /t put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQS+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one 
/.notdef /three /four /five /six /seven /eight /.notdef 
/colon 2{/.notdef}rp /equal /greater 10{/.notdef}rp /I 5{/.notdef}rp /O 
17{/.notdef}rp /a /b /c /d /e 2{/.notdef}rp /h 
/i /.notdef /k /l 2{/.notdef}rp /o /p /.notdef 
/r /s /t /u /v /w 136{/.notdef}rp]
LTFDQS+TimesNewRomanPSMT nf
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
49.6716 30.0859 mo
(updates)
[.780499 .780502 .780499 .693062 .433956 .693062 0 ]xsh
48.4509 31.87 mo
(work=1058)
[1.12702 .780502 .519798 .780502 .880394 .780502 .780499 .780502 0 ]xsh
47.562 33.654 mo
(I/O: 136->136)
[.519802 .433956 1.12702 .43396 .390251 .780499 .780499 .780502 .519798 .880398 .780502 .780499 
0 ]xsh
52.056 23.7079 mo
52.056 24.6 52.056 25.6039 52.056 26.6069 cv
@
51.833 26.6069 mo
52.056 27.722 li
52.3905 26.6069 li
cp
@
51.833 26.6069 mo
52.056 27.722 li
52.3905 26.6069 li
f
59.3035 41.325 mo
59.3035 40.217 56.0586 39.318 52.056 39.318 cv
48.0533 39.318 44.8085 40.217 44.8085 41.325 cv
44.8085 42.433 48.0533 43.332 52.056 43.332 cv
56.0586 43.332 59.3035 42.433 59.3035 41.325 cv
@
59.3035 41.325 mo
59.3035 40.217 56.0586 39.318 52.056 39.318 cv
48.0533 39.318 44.8085 40.217 44.8085 41.325 cv
44.8085 42.433 48.0533 43.332 52.056 43.332 cv
56.0586 43.332 59.3035 42.433 59.3035 41.325 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQS+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQS+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 50 /two put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQS+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six /seven /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
10{/.notdef}rp /I 5{/.notdef}rp /O 17{/.notdef}rp /a /b /c 
/d /e 2{/.notdef}rp /h /i /.notdef /k /l 
/.notdef /n /o /p /.notdef /r /s /t 
/u /v /w 136{/.notdef}rp]
LTFDQS+TimesNewRomanPSMT nf
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
45.9213 41.6819 mo
(roundrobin\(16,120\))
[.519802 .780499 .780502 .780499 .780499 .519802 .780502 .780499 .433956 .780502 .519802 .780499 
.780502 .390247 .780499 .780502 .780499 0 ]xsh
52.056 35.304 mo
52.056 36.3069 52.056 37.311 52.056 38.3149 cv
@
51.833 38.2029 mo
52.056 39.318 li
52.3905 38.2029 li
cp
@
51.833 38.2029 mo
52.056 39.318 li
52.3905 38.2029 li
f
49.157 62.733 mo
49.157 60.639 47.0104 58.942 44.3625 58.942 cv
41.7146 58.942 39.568 60.639 39.568 62.733 cv
39.568 64.827 41.7146 66.524 44.3625 66.524 cv
47.0104 66.524 49.157 64.827 49.157 62.733 cv
@
49.157 62.733 mo
49.157 60.639 47.0104 58.942 44.3625 58.942 cv
41.7146 58.942 39.568 60.639 39.568 62.733 cv
39.568 64.827 41.7146 66.524 44.3625 66.524 cv
47.0104 66.524 49.157 64.827 49.157 62.733 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQS+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7A73DFCCE6C978678EE12F2E62BD7D7FA244984C1E12F1
0EB0B8765182EBCE165DFB850DB8B03381969B80BB1CA53FFB24B5DE34530C8C
83A80415FE19B7C2B551E605143CF6469C8BCE336F9A5E5012DD932CF553D663
37837328637F50B90FF9AE8815D00BBA7EFCE6D508C5B6EBE2D> |-
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQS+TimesNewRomanPSMT /Encoding get
dup 57 /nine put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQS+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six /seven /eight /nine /colon 2{/.notdef}rp /equal /greater 
10{/.notdef}rp /I 5{/.notdef}rp /O 17{/.notdef}rp /a /b /c 
/d /e 2{/.notdef}rp /h /i /.notdef /k /l 
/.notdef /n /o /p /.notdef /r /s /t 
/u /v /w /.notdef /y 134{/.notdef}rp]
LTFDQS+TimesNewRomanPSMT nf
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
41.9344 61.306 mo
(Identity)
[.519802 .780499 .693062 .780499 .43396 .433956 .43396 0 ]xsh
41.5379 63.09 mo
(work=96)
[1.12702 .780502 .519798 .780502 .880394 .780502 0 ]xsh
41.4294 64.8741 mo
(I/O: 1->1)
[.519802 .433956 1.12702 .43396 .390247 .780502 .519802 .880394 0 ]xsh
49.603 43.2209 mo
49.0455 43.6669 48.711 44.224 48.488 44.67 cv
47.2615 48.238 46.035 54.0359 45.143 58.1609 cv
@
44.92 57.827 mo
45.0315 58.942 li
45.4775 57.827 li
cp
@
44.92 57.827 mo
45.0315 58.942 li
45.4775 57.827 li
f
63.7635 51.137 mo
63.7635 49.043 60.918 47.3459 57.408 47.3459 cv
53.8979 47.3459 51.0525 49.043 51.0525 51.137 cv
51.0525 53.231 53.8979 54.9279 57.408 54.9279 cv
60.918 54.9279 63.7635 53.231 63.7635 51.137 cv
@
63.7635 51.137 mo
63.7635 49.043 60.918 47.3459 57.408 47.3459 cv
53.8979 47.3459 51.0525 49.043 51.0525 51.137 cv
51.0525 53.231 53.8979 54.9279 57.408 54.9279 cv
60.918 54.9279 63.7635 53.231 63.7635 51.137 cv
.455 .686 .812 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
55.2398 49.7099 mo
(divises)
[.780499 .43396 .780499 .43396 .607216 .693062 0 ]xsh
53.8029 51.494 mo
(work=1713)
[1.12702 .780499 .519802 .780502 .880394 .780502 .780499 .780502 0 ]xsh
52.914 53.278 mo
(I/O: 120->120)
[.519802 .433956 1.12702 .43396 .390247 .780502 .780499 .780502 .519802 .880394 .780502 .780499 
0 ]xsh
53.171 43.332 mo
53.7285 44.224 54.286 45.4509 54.8435 46.566 cv
@
54.6205 46.6769 mo
55.401 47.569 li
55.0665 46.454 li
cp
@
54.6205 46.6769 mo
55.401 47.569 li
55.0665 46.454 li
f
60.1955 622.017 mo
60.1955 620.909 56.9507 620.01 52.948 620.01 cv
48.9453 620.01 45.7005 620.909 45.7005 622.017 cv
45.7005 623.125 48.9453 624.024 52.948 624.024 cv
56.9507 624.024 60.1955 623.125 60.1955 622.017 cv
@
60.1955 622.017 mo
60.1955 620.909 56.9507 620.01 52.948 620.01 cv
48.9453 620.01 45.7005 620.909 45.7005 622.017 cv
45.7005 623.125 48.9453 624.024 52.948 624.024 cv
56.9507 624.024 60.1955 623.125 60.1955 622.017 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
46.8134 622.374 mo
(roundrobin\(16,120\))
[.519802 .780499 .780502 .780499 .780499 .519802 .780502 .780499 .433956 .780502 .519802 .780499 
.780499 .390251 .780502 .780499 .780499 0 ]xsh
59.3035 631.829 mo
59.3035 629.735 56.458 628.038 52.948 628.038 cv
49.438 628.038 46.5925 629.735 46.5925 631.829 cv
46.5925 633.923 49.438 635.62 52.948 635.62 cv
56.458 635.62 59.3035 633.923 59.3035 631.829 cv
@
59.3035 631.829 mo
59.3035 629.735 56.458 628.038 52.948 628.038 cv
49.438 628.038 46.5925 629.735 46.5925 631.829 cv
46.5925 633.923 49.438 635.62 52.948 635.62 cv
56.458 635.62 59.3035 633.923 59.3035 631.829 cv
.843 .18 .157 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
51.2146 630.402 mo
(recon)
[.519802 .693058 .693062 .780502 0 ]xsh
49.343 632.186 mo
(work=9088)
[1.12702 .780502 .519798 .780502 .880394 .780502 .780499 .780502 0 ]xsh
48.454 633.97 mo
(I/O: 136->136)
[.519802 .433956 1.12702 .43396 .390251 .780499 .780499 .780502 .519798 .880398 .780502 .780499 
0 ]xsh
52.948 624.024 mo
52.948 624.804 52.948 625.919 52.948 626.923 cv
@
52.725 626.923 mo
52.948 628.038 li
53.2825 626.923 li
cp
@
52.725 626.923 mo
52.948 628.038 li
53.2825 626.923 li
f
44.697 66.524 mo
45.0315 70.9839 45.589 78.12 45.589 82.3569 cv
45.589 82.3569 45.589 82.3569 45.589 605.961 cv
45.589 609.975 48.934 615.884 51.164 619.341 cv
@
50.718 619.229 mo
51.61 620.01 li
51.2755 618.895 li
cp
@
50.718 619.229 mo
51.61 620.01 li
51.2755 618.895 li
f
64.6555 62.733 mo
64.6555 60.639 61.81 58.942 58.3 58.942 cv
54.79 58.942 51.9445 60.639 51.9445 62.733 cv
51.9445 64.827 54.79 66.524 58.3 66.524 cv
61.81 66.524 64.6555 64.827 64.6555 62.733 cv
@
64.6555 62.733 mo
64.6555 60.639 61.81 58.942 58.3 58.942 cv
54.79 58.942 51.9445 60.639 51.9445 62.733 cv
51.9445 64.827 54.79 66.524 58.3 66.524 cv
61.81 66.524 64.6555 64.827 64.6555 62.733 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
55.9156 61.306 mo
(updates)
[.780499 .780502 .780499 .693062 .433956 .693062 0 ]xsh
55.0851 63.09 mo
(work=988)
[1.12702 .780502 .519798 .780502 .880394 .780502 .780499 0 ]xsh
53.806 64.8741 mo
(I/O: 120->120)
[.519802 .433956 1.12702 .43396 .390247 .780502 .780499 .780502 .519802 .880394 .780502 .780499 
0 ]xsh
57.7425 54.9279 mo
57.854 55.82 57.854 56.824 57.9655 57.827 cv
@
57.7425 57.827 mo
57.9655 58.942 li
58.3 57.827 li
cp
@
57.7425 57.827 mo
57.9655 58.942 li
58.3 57.827 li
f
66.4395 72.545 mo
66.4395 71.437 63.1947 70.538 59.192 70.538 cv
55.1893 70.538 51.9445 71.437 51.9445 72.545 cv
51.9445 73.653 55.1893 74.5519 59.192 74.5519 cv
63.1947 74.5519 66.4395 73.653 66.4395 72.545 cv
@
66.4395 72.545 mo
66.4395 71.437 63.1947 70.538 59.192 70.538 cv
55.1893 70.538 51.9445 71.437 51.9445 72.545 cv
51.9445 73.653 55.1893 74.5519 59.192 74.5519 cv
63.1947 74.5519 66.4395 73.653 66.4395 72.545 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
53.0573 72.9019 mo
(roundrobin\(15,105\))
[.519802 .780499 .780502 .780499 .780499 .519802 .780502 .780499 .433956 .780502 .519802 .780499 
.780502 .390247 .780499 .780502 .780502 0 ]xsh
58.6345 66.524 mo
58.746 67.528 58.746 68.5309 58.8575 69.5339 cv
@
58.523 69.423 mo
58.969 70.538 li
59.0805 69.423 li
cp
@
58.523 69.423 mo
58.969 70.538 li
59.0805 69.423 li
f
61.5335 93.9529 mo
61.5335 91.8589 59.3869 90.162 56.739 90.162 cv
54.0911 90.162 51.9445 91.8589 51.9445 93.9529 cv
51.9445 96.047 54.0911 97.744 56.739 97.744 cv
59.3869 97.744 61.5335 96.047 61.5335 93.9529 cv
@
61.5335 93.9529 mo
61.5335 91.8589 59.3869 90.162 56.739 90.162 cv
54.0911 90.162 51.9445 91.8589 51.9445 93.9529 cv
51.9445 96.047 54.0911 97.744 56.739 97.744 cv
59.3869 97.744 61.5335 96.047 61.5335 93.9529 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
54.3109 92.5259 mo
(Identity)
[.519802 .780499 .693062 .780499 .43396 .433956 .43396 0 ]xsh
53.9144 94.3099 mo
(work=90)
[1.12702 .780502 .519798 .780502 .880394 .780502 0 ]xsh
53.8059 96.094 mo
(I/O: 1->1)
[.519802 .433956 1.12702 .43396 .390247 .780502 .519802 .880394 0 ]xsh
59.0805 74.5519 mo
58.969 77.562 58.6345 83.0259 58.1885 86.1479 cv
58.077 87.04 57.9655 88.267 57.7425 89.382 cv
@
57.5195 89.047 mo
57.5195 90.162 li
58.077 89.158 li
cp
@
57.5195 89.047 mo
57.5195 90.162 li
58.077 89.158 li
f
76.14 82.3569 mo
76.14 80.2629 73.2945 78.566 69.7845 78.566 cv
66.2745 78.566 63.429 80.2629 63.429 82.3569 cv
63.429 84.4509 66.2745 86.1479 69.7845 86.1479 cv
73.2945 86.1479 76.14 84.4509 76.14 82.3569 cv
@
76.14 82.3569 mo
76.14 80.2629 73.2945 78.566 69.7845 78.566 cv
66.2745 78.566 63.429 80.2629 63.429 82.3569 cv
63.429 84.4509 66.2745 86.1479 69.7845 86.1479 cv
73.2945 86.1479 76.14 84.4509 76.14 82.3569 cv
.455 .686 .812 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
67.6163 80.9299 mo
(divises)
[.780502 .433952 .780502 .43396 .607216 .693062 0 ]xsh
66.1794 82.7139 mo
(work=1561)
[1.12702 .780495 .519806 .780495 .880402 .780495 .780502 .780502 0 ]xsh
65.2905 84.498 mo
(I/O: 105->105)
[.519798 .43396 1.12702 .433952 .390251 .780502 .780502 .780495 .519806 .880394 .780502 .780495 
0 ]xsh
61.868 74.441 mo
62.6485 74.8859 63.3175 75.444 63.7635 75.89 cv
64.4325 76.4479 65.213 77.34 65.9935 78.12 cv
@
65.882 78.343 mo
66.774 79.012 li
66.2165 78.008 li
cp
@
65.882 78.343 mo
66.774 79.012 li
66.2165 78.008 li
f
66.4395 613.989 mo
66.4395 612.881 63.1947 611.982 59.192 611.982 cv
55.1893 611.982 51.9445 612.881 51.9445 613.989 cv
51.9445 615.097 55.1893 615.996 59.192 615.996 cv
63.1947 615.996 66.4395 615.097 66.4395 613.989 cv
@
66.4395 613.989 mo
66.4395 612.881 63.1947 611.982 59.192 611.982 cv
55.1893 611.982 51.9445 612.881 51.9445 613.989 cv
51.9445 615.097 55.1893 615.996 59.192 615.996 cv
63.1947 615.996 66.4395 615.097 66.4395 613.989 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
53.0573 614.346 mo
(roundrobin\(15,105\))
[.519802 .780499 .780502 .780499 .780499 .519802 .780502 .780499 .433956 .780502 .519802 .780499 
.780502 .390247 .780499 .780502 .780502 0 ]xsh
57.631 615.996 mo
56.962 616.999 56.07 618.114 55.178 619.118 cv
@
54.955 618.895 mo
54.509 620.01 li
55.401 619.229 li
cp
@
54.955 618.895 mo
54.509 620.01 li
55.401 619.229 li
f
57.9655 97.633 mo
58.077 98.1899 58.1885 98.6359 58.1885 99.082 cv
58.746 103.988 57.9655 108.783 57.9655 113.577 cv
57.9655 113.577 57.9655 113.577 57.9655 597.933 cv
57.9655 601.501 58.523 607.187 58.8575 610.867 cv
@
58.6345 610.867 mo
58.969 611.982 li
59.0805 610.867 li
cp
@
58.6345 610.867 mo
58.969 611.982 li
59.0805 610.867 li
f
76.9205 93.9529 mo
76.9205 91.8589 74.075 90.162 70.565 90.162 cv
67.055 90.162 64.2095 91.8589 64.2095 93.9529 cv
64.2095 96.047 67.055 97.744 70.565 97.744 cv
74.075 97.744 76.9205 96.047 76.9205 93.9529 cv
@
76.9205 93.9529 mo
76.9205 91.8589 74.075 90.162 70.565 90.162 cv
67.055 90.162 64.2095 91.8589 64.2095 93.9529 cv
64.2095 96.047 67.055 97.744 70.565 97.744 cv
74.075 97.744 76.9205 96.047 76.9205 93.9529 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
68.1806 92.5259 mo
(updates)
[.780502 .780495 .780502 .693062 .43396 .693054 0 ]xsh
67.3501 94.3099 mo
(work=918)
[1.12702 .780495 .519806 .780495 .880402 .780495 .780502 0 ]xsh
66.071 96.094 mo
(I/O: 105->105)
[.519798 .43396 1.12702 .433952 .390251 .780502 .780502 .780495 .519806 .880394 .780502 .780502 
0 ]xsh
70.0075 86.1479 mo
70.119 87.04 70.119 88.0439 70.2305 89.047 cv
@
70.0075 89.047 mo
70.2305 90.162 li
70.565 89.047 li
cp
@
70.0075 89.047 mo
70.2305 90.162 li
70.565 89.047 li
f
78.147 103.765 mo
78.147 102.657 75.0519 101.758 71.234 101.758 cv
67.4161 101.758 64.321 102.657 64.321 103.765 cv
64.321 104.873 67.4161 105.772 71.234 105.772 cv
75.0519 105.772 78.147 104.873 78.147 103.765 cv
@
78.147 103.765 mo
78.147 102.657 75.0519 101.758 71.234 101.758 cv
67.4161 101.758 64.321 102.657 64.321 103.765 cv
64.321 104.873 67.4161 105.772 71.234 105.772 cv
75.0519 105.772 78.147 104.873 78.147 103.765 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
65.4896 104.122 mo
(roundrobin\(14,91\))
[.519798 .780502 .780502 .780502 .780495 .519806 .780495 .780502 .43396 .780495 .519806 .780495 
.780502 .390251 .780502 .780495 0 ]xsh
70.788 97.744 mo
70.8995 98.748 70.8995 99.7509 71.011 100.755 cv
@
70.6765 100.643 mo
71.1225 101.758 li
71.234 100.643 li
cp
@
70.6765 100.643 mo
71.1225 101.758 li
71.234 100.643 li
f
73.91 125.173 mo
73.91 123.079 71.7634 121.382 69.1155 121.382 cv
66.4676 121.382 64.321 123.079 64.321 125.173 cv
64.321 127.267 66.4676 128.964 69.1155 128.964 cv
71.7634 128.964 73.91 127.267 73.91 125.173 cv
@
73.91 125.173 mo
73.91 123.079 71.7634 121.382 69.1155 121.382 cv
66.4676 121.382 64.321 123.079 64.321 125.173 cv
64.321 127.267 66.4676 128.964 69.1155 128.964 cv
71.7634 128.964 73.91 127.267 73.91 125.173 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
66.6874 123.746 mo
(Identity)
[.519798 .780502 .693062 .780502 .433952 .43396 .43396 0 ]xsh
66.2909 125.53 mo
(work=84)
[1.12702 .780495 .519806 .780495 .880402 .780495 0 ]xsh
66.1824 127.314 mo
(I/O: 1->1)
[.519798 .43396 1.12702 .433952 .390251 .780502 .519798 .880402 0 ]xsh
71.1225 105.772 mo
71.011 108.783 70.788 114.246 70.342 117.368 cv
70.2305 118.26 70.119 119.486 69.896 120.602 cv
@
69.673 120.267 mo
69.7845 121.382 li
70.2305 120.267 li
cp
@
69.673 120.267 mo
69.7845 121.382 li
70.2305 120.267 li
f
86.9555 113.577 mo
86.9555 111.483 84.4595 109.786 81.3805 109.786 cv
78.3015 109.786 75.8055 111.483 75.8055 113.577 cv
75.8055 115.671 78.3015 117.368 81.3805 117.368 cv
84.4595 117.368 86.9555 115.671 86.9555 113.577 cv
@
86.9555 113.577 mo
86.9555 111.483 84.4595 109.786 81.3805 109.786 cv
78.3015 109.786 75.8055 111.483 75.8055 113.577 cv
75.8055 115.671 78.3015 117.368 81.3805 117.368 cv
84.4595 117.368 86.9555 115.671 86.9555 113.577 cv
.455 .686 .812 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
79.2123 112.15 mo
(divises)
[.780502 .433952 .780502 .43396 .607216 .693062 0 ]xsh
77.7754 113.934 mo
(work=1417)
[1.12702 .780495 .519806 .780495 .880402 .780495 .780502 .780502 0 ]xsh
77.667 115.718 mo
(I/O: 91->91)
[.519798 .43396 1.12702 .433952 .390251 .780502 .780502 .519798 .880394 .780502 0 ]xsh
74.2445 105.549 mo
74.9135 106.107 75.694 106.664 76.14 107.11 cv
76.6975 107.668 77.3665 108.448 78.0355 109.34 cv
@
77.924 109.563 mo
78.816 110.232 li
78.2585 109.229 li
cp
@
77.924 109.563 mo
78.816 110.232 li
78.2585 109.229 li
f
78.147 605.961 mo
78.147 604.853 75.0519 603.954 71.234 603.954 cv
67.4161 603.954 64.321 604.853 64.321 605.961 cv
64.321 607.069 67.4161 607.968 71.234 607.968 cv
75.0519 607.968 78.147 607.069 78.147 605.961 cv
@
78.147 605.961 mo
78.147 604.853 75.0519 603.954 71.234 603.954 cv
67.4161 603.954 64.321 604.853 64.321 605.961 cv
64.321 607.069 67.4161 607.968 71.234 607.968 cv
75.0519 607.968 78.147 607.069 78.147 605.961 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
65.4896 606.318 mo
(roundrobin\(14,91\))
[.519798 .780502 .780502 .780502 .780495 .519806 .780495 .780502 .43396 .780495 .519806 .780495 
.780502 .390251 .780502 .780495 0 ]xsh
68.4465 607.856 mo
66.774 608.971 64.4325 610.532 62.537 611.759 cv
@
62.76 611.313 mo
61.9795 612.093 li
63.0945 611.759 li
cp
@
62.76 611.313 mo
61.9795 612.093 li
63.0945 611.759 li
f
70.119 128.853 mo
70.2305 129.41 70.342 129.856 70.342 130.302 cv
70.8995 135.208 70.119 140.003 70.119 144.797 cv
70.119 144.797 70.119 144.797 70.119 589.905 cv
70.119 593.473 70.565 599.159 70.8995 602.839 cv
@
70.6765 602.839 mo
71.011 603.954 li
71.1225 602.839 li
cp
@
70.6765 602.839 mo
71.011 603.954 li
71.1225 602.839 li
f
88.0705 125.173 mo
88.0705 123.079 85.5745 121.382 82.4955 121.382 cv
79.4165 121.382 76.9205 123.079 76.9205 125.173 cv
76.9205 127.267 79.4165 128.964 82.4955 128.964 cv
85.5745 128.964 88.0705 127.267 88.0705 125.173 cv
@
88.0705 125.173 mo
88.0705 123.079 85.5745 121.382 82.4955 121.382 cv
79.4165 121.382 76.9205 123.079 76.9205 125.173 cv
76.9205 127.267 79.4165 128.964 82.4955 128.964 cv
85.5745 128.964 88.0705 127.267 88.0705 125.173 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
80.1111 123.746 mo
(updates)
[.780502 .780495 .780502 .693062 .43396 .693054 0 ]xsh
79.2806 125.53 mo
(work=848)
[1.12702 .780495 .519806 .780495 .880402 .780495 .780502 0 ]xsh
78.782 127.314 mo
(I/O: 91->91)
[.519798 .43396 1.12702 .433952 .390251 .780502 .780502 .519798 .880394 .780502 0 ]xsh
81.715 117.368 mo
81.8265 118.372 81.938 119.486 82.0495 120.602 cv
@
81.715 120.267 mo
82.161 121.382 li
82.2725 120.267 li
cp
@
81.715 120.267 mo
82.161 121.382 li
82.2725 120.267 li
f
90.5235 134.985 mo
90.5235 133.877 87.4284 132.978 83.6105 132.978 cv
79.7926 132.978 76.6975 133.877 76.6975 134.985 cv
76.6975 136.093 79.7926 136.992 83.6105 136.992 cv
87.4284 136.992 90.5235 136.093 90.5235 134.985 cv
@
90.5235 134.985 mo
90.5235 133.877 87.4284 132.978 83.6105 132.978 cv
79.7926 132.978 76.6975 133.877 76.6975 134.985 cv
76.6975 136.093 79.7926 136.992 83.6105 136.992 cv
87.4284 136.992 90.5235 136.093 90.5235 134.985 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
77.8661 135.342 mo
(roundrobin\(13,78\))
[.519798 .780502 .780502 .780502 .780495 .519806 .780495 .780502 .43396 .780495 .519806 .780495 
.780502 .390251 .780502 .780495 0 ]xsh
82.9415 128.964 mo
83.053 129.968 83.1645 130.971 83.276 131.975 cv
@
82.9415 131.863 mo
83.3875 132.978 li
83.499 131.863 li
cp
@
82.9415 131.863 mo
83.3875 132.978 li
83.499 131.863 li
f
86.2865 156.393 mo
86.2865 154.299 84.1399 152.602 81.492 152.602 cv
78.8441 152.602 76.6975 154.299 76.6975 156.393 cv
76.6975 158.487 78.8441 160.184 81.492 160.184 cv
84.1399 160.184 86.2865 158.487 86.2865 156.393 cv
@
86.2865 156.393 mo
86.2865 154.299 84.1399 152.602 81.492 152.602 cv
78.8441 152.602 76.6975 154.299 76.6975 156.393 cv
76.6975 158.487 78.8441 160.184 81.492 160.184 cv
84.1399 160.184 86.2865 158.487 86.2865 156.393 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
79.0639 154.966 mo
(Identity)
[.519798 .780502 .693062 .780502 .433952 .43396 .43396 0 ]xsh
78.6674 156.75 mo
(work=78)
[1.12702 .780495 .519806 .780495 .880402 .780495 0 ]xsh
78.5589 158.534 mo
(I/O: 1->1)
[.519798 .43396 1.12702 .433952 .390251 .780502 .519798 .880402 0 ]xsh
83.499 136.992 mo
83.3875 140.003 83.1645 145.466 82.7185 148.588 cv
82.607 149.48 82.4955 150.707 82.2725 151.822 cv
@
82.0495 151.487 mo
82.161 152.602 li
82.607 151.487 li
cp
@
82.0495 151.487 mo
82.161 152.602 li
82.607 151.487 li
f
99.332 144.797 mo
99.332 142.703 96.836 141.006 93.757 141.006 cv
90.678 141.006 88.182 142.703 88.182 144.797 cv
88.182 146.891 90.678 148.588 93.757 148.588 cv
96.836 148.588 99.332 146.891 99.332 144.797 cv
@
99.332 144.797 mo
99.332 142.703 96.836 141.006 93.757 141.006 cv
90.678 141.006 88.182 142.703 88.182 144.797 cv
88.182 146.891 90.678 148.588 93.757 148.588 cv
96.836 148.588 99.332 146.891 99.332 144.797 cv
.455 .686 .812 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
91.5888 143.37 mo
(divises)
[.780502 .433952 .780502 .43396 .607216 .693062 0 ]xsh
90.1519 145.154 mo
(work=1281)
[1.12702 .780495 .519806 .780495 .880402 .780495 .780502 .780502 0 ]xsh
90.0435 146.938 mo
(I/O: 78->78)
[.519798 .43396 1.12702 .433952 .390251 .780502 .780502 .519798 .880394 .780502 0 ]xsh
86.621 136.769 mo
87.29 137.327 88.0705 137.884 88.5165 138.33 cv
89.074 138.888 89.743 139.668 90.412 140.56 cv
@
90.3005 140.783 mo
91.1925 141.452 li
90.635 140.449 li
cp
@
90.3005 140.783 mo
91.1925 141.452 li
90.635 140.449 li
f
90.5235 597.933 mo
90.5235 596.825 87.4284 595.926 83.6105 595.926 cv
79.7926 595.926 76.6975 596.825 76.6975 597.933 cv
76.6975 599.041 79.7926 599.94 83.6105 599.94 cv
87.4284 599.94 90.5235 599.041 90.5235 597.933 cv
@
90.5235 597.933 mo
90.5235 596.825 87.4284 595.926 83.6105 595.926 cv
79.7926 595.926 76.6975 596.825 76.6975 597.933 cv
76.6975 599.041 79.7926 599.94 83.6105 599.94 cv
87.4284 599.94 90.5235 599.041 90.5235 597.933 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
77.8661 598.29 mo
(roundrobin\(13,78\))
[.519798 .780502 .780502 .780502 .780495 .519806 .780495 .780502 .43396 .780495 .519806 .780495 
.780502 .390251 .780502 .780495 0 ]xsh
80.823 599.828 mo
79.1505 600.832 76.9205 602.393 75.025 603.508 cv
@
74.9135 603.285 mo
74.133 604.065 li
75.248 603.731 li
cp
@
74.9135 603.285 mo
74.133 604.065 li
75.248 603.731 li
f
82.4955 160.073 mo
82.607 160.63 82.7185 161.076 82.7185 161.522 cv
83.276 166.428 82.4955 171.223 82.4955 176.017 cv
82.4955 176.017 82.4955 176.017 82.4955 581.877 cv
82.4955 585.445 82.9415 591.131 83.276 594.811 cv
@
83.053 594.811 mo
83.3875 595.926 li
83.499 594.811 li
cp
@
83.053 594.811 mo
83.3875 595.926 li
83.499 594.811 li
f
100.447 156.393 mo
100.447 154.299 97.951 152.602 94.872 152.602 cv
91.793 152.602 89.297 154.299 89.297 156.393 cv
89.297 158.487 91.793 160.184 94.872 160.184 cv
97.951 160.184 100.447 158.487 100.447 156.393 cv
@
100.447 156.393 mo
100.447 154.299 97.951 152.602 94.872 152.602 cv
91.793 152.602 89.297 154.299 89.297 156.393 cv
89.297 158.487 91.793 160.184 94.872 160.184 cv
97.951 160.184 100.447 158.487 100.447 156.393 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
92.4876 154.966 mo
(updates)
[.780502 .780495 .780502 .693062 .43396 .693062 0 ]xsh
91.6571 156.75 mo
(work=778)
[1.12702 .780495 .519806 .780495 .880402 .780495 .780502 0 ]xsh
91.1585 158.534 mo
(I/O: 78->78)
[.519798 .43396 1.12702 .433952 .390251 .780502 .780502 .519798 .880394 .780502 0 ]xsh
94.0915 148.588 mo
94.203 149.592 94.3145 150.707 94.426 151.822 cv
@
94.0915 151.487 mo
94.5375 152.602 li
94.649 151.487 li
cp
@
94.0915 151.487 mo
94.5375 152.602 li
94.649 151.487 li
f
102.9 166.205 mo
102.9 165.097 99.8049 164.198 95.987 164.198 cv
92.1691 164.198 89.074 165.097 89.074 166.205 cv
89.074 167.313 92.1691 168.212 95.987 168.212 cv
99.8049 168.212 102.9 167.313 102.9 166.205 cv
@
102.9 166.205 mo
102.9 165.097 99.8049 164.198 95.987 164.198 cv
92.1691 164.198 89.074 165.097 89.074 166.205 cv
89.074 167.313 92.1691 168.212 95.987 168.212 cv
99.8049 168.212 102.9 167.313 102.9 166.205 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
90.2426 166.562 mo
(roundrobin\(12,66\))
[.519798 .780502 .780502 .780495 .780502 .519806 .780495 .780502 .43396 .780495 .519806 .780502 
.780495 .390251 .780502 .780495 0 ]xsh
95.318 160.184 mo
95.4295 161.188 95.541 162.191 95.6525 163.195 cv
@
95.318 163.083 mo
95.764 164.198 li
95.8755 163.083 li
cp
@
95.318 163.083 mo
95.764 164.198 li
95.8755 163.083 li
f
98.663 187.613 mo
98.663 185.519 96.5164 183.822 93.8685 183.822 cv
91.2206 183.822 89.074 185.519 89.074 187.613 cv
89.074 189.707 91.2206 191.404 93.8685 191.404 cv
96.5164 191.404 98.663 189.707 98.663 187.613 cv
@
98.663 187.613 mo
98.663 185.519 96.5164 183.822 93.8685 183.822 cv
91.2206 183.822 89.074 185.519 89.074 187.613 cv
89.074 189.707 91.2206 191.404 93.8685 191.404 cv
96.5164 191.404 98.663 189.707 98.663 187.613 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
91.4404 186.186 mo
(Identity)
[.519798 .780502 .693062 .780502 .433952 .43396 .43396 0 ]xsh
91.0439 187.97 mo
(work=72)
[1.12702 .780495 .519806 .780495 .880402 .780495 0 ]xsh
90.9354 189.754 mo
(I/O: 1->1)
[.519798 .43396 1.12702 .433952 .390251 .780502 .519798 .880402 0 ]xsh
95.8755 168.212 mo
95.764 171.223 95.541 176.686 95.095 179.808 cv
94.9835 180.7 94.872 181.927 94.649 183.042 cv
@
94.426 182.707 mo
94.5375 183.822 li
94.9835 182.707 li
cp
@
94.426 182.707 mo
94.5375 183.822 li
94.9835 182.707 li
f
111.708 176.017 mo
111.708 173.923 109.212 172.226 106.133 172.226 cv
103.055 172.226 100.558 173.923 100.558 176.017 cv
100.558 178.111 103.055 179.808 106.133 179.808 cv
109.212 179.808 111.708 178.111 111.708 176.017 cv
@
111.708 176.017 mo
111.708 173.923 109.212 172.226 106.133 172.226 cv
103.055 172.226 100.558 173.923 100.558 176.017 cv
100.558 178.111 103.055 179.808 106.133 179.808 cv
109.212 179.808 111.708 178.111 111.708 176.017 cv
.455 .686 .812 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
103.965 174.59 mo
(divises)
[.780502 .433952 .780502 .43396 .607216 .693062 0 ]xsh
102.528 176.374 mo
(work=1153)
[1.12702 .780495 .519806 .780495 .880402 .780495 .780502 .780502 0 ]xsh
102.42 178.158 mo
(I/O: 66->66)
[.519798 .43396 1.12702 .433952 .390251 .780502 .780502 .519798 .880394 .780502 0 ]xsh
98.9975 167.989 mo
99.6665 168.547 100.447 169.104 100.893 169.55 cv
101.45 170.108 102.119 170.888 102.788 171.78 cv
@
102.677 172.003 mo
103.569 172.672 li
103.011 171.669 li
cp
@
102.677 172.003 mo
103.569 172.672 li
103.011 171.669 li
f
102.9 589.905 mo
102.9 588.797 99.8049 587.898 95.987 587.898 cv
92.1691 587.898 89.074 588.797 89.074 589.905 cv
89.074 591.013 92.1691 591.912 95.987 591.912 cv
99.8049 591.912 102.9 591.013 102.9 589.905 cv
@
102.9 589.905 mo
102.9 588.797 99.8049 587.898 95.987 587.898 cv
92.1691 587.898 89.074 588.797 89.074 589.905 cv
89.074 591.013 92.1691 591.912 95.987 591.912 cv
99.8049 591.912 102.9 591.013 102.9 589.905 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
90.2426 590.262 mo
(roundrobin\(12,66\))
[.519798 .780502 .780502 .780495 .780502 .519806 .780495 .780502 .43396 .780495 .519806 .780502 
.780495 .390251 .780502 .780495 0 ]xsh
93.1995 591.8 mo
91.527 592.804 89.297 594.365 87.4015 595.48 cv
@
87.29 595.257 mo
86.5095 596.037 li
87.6245 595.703 li
cp
@
87.29 595.257 mo
86.5095 596.037 li
87.6245 595.703 li
f
94.872 191.293 mo
94.9835 191.85 95.095 192.296 95.095 192.742 cv
95.6525 197.648 94.872 202.443 94.872 207.237 cv
94.872 207.237 94.872 207.237 94.872 573.849 cv
94.872 577.417 95.318 583.104 95.6525 586.783 cv
@
95.4295 586.783 mo
95.764 587.898 li
95.8755 586.783 li
cp
@
95.4295 586.783 mo
95.764 587.898 li
95.8755 586.783 li
f
112.823 187.613 mo
112.823 185.519 110.327 183.822 107.248 183.822 cv
104.17 183.822 101.673 185.519 101.673 187.613 cv
101.673 189.707 104.17 191.404 107.248 191.404 cv
110.327 191.404 112.823 189.707 112.823 187.613 cv
@
112.823 187.613 mo
112.823 185.519 110.327 183.822 107.248 183.822 cv
104.17 183.822 101.673 185.519 101.673 187.613 cv
101.673 189.707 104.17 191.404 107.248 191.404 cv
110.327 191.404 112.823 189.707 112.823 187.613 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
104.864 186.186 mo
(updates)
[.780502 .780495 .780502 .693062 .43396 .693054 0 ]xsh
104.034 187.97 mo
(work=708)
[1.12702 .780495 .519806 .780495 .880402 .780495 .780502 0 ]xsh
103.535 189.754 mo
(I/O: 66->66)
[.519798 .43396 1.12702 .433952 .390251 .780502 .780502 .519798 .880394 .780502 0 ]xsh
106.468 179.808 mo
106.579 180.811 106.691 181.927 106.802 183.042 cv
@
106.468 182.707 mo
106.914 183.822 li
107.025 182.707 li
cp
@
106.468 182.707 mo
106.914 183.822 li
107.025 182.707 li
f
115.276 197.425 mo
115.276 196.317 112.181 195.418 108.363 195.418 cv
104.546 195.418 101.45 196.317 101.45 197.425 cv
101.45 198.533 104.546 199.432 108.363 199.432 cv
112.181 199.432 115.276 198.533 115.276 197.425 cv
@
115.276 197.425 mo
115.276 196.317 112.181 195.418 108.363 195.418 cv
104.546 195.418 101.45 196.317 101.45 197.425 cv
101.45 198.533 104.546 199.432 108.363 199.432 cv
112.181 199.432 115.276 198.533 115.276 197.425 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
102.619 197.782 mo
(roundrobin\(11,55\))
[.519798 .780502 .780502 .780495 .780502 .519806 .780495 .780502 .43396 .780495 .519806 .780502 
.780495 .390251 .780502 .780495 0 ]xsh
107.694 191.404 mo
107.806 192.408 107.917 193.411 108.029 194.415 cv
@
107.694 194.303 mo
108.14 195.418 li
108.252 194.303 li
cp
@
107.694 194.303 mo
108.14 195.418 li
108.252 194.303 li
f
111.039 218.833 mo
111.039 216.739 108.893 215.042 106.245 215.042 cv
103.597 215.042 101.451 216.739 101.451 218.833 cv
101.451 220.927 103.597 222.624 106.245 222.624 cv
108.893 222.624 111.039 220.927 111.039 218.833 cv
@
111.039 218.833 mo
111.039 216.739 108.893 215.042 106.245 215.042 cv
103.597 215.042 101.451 216.739 101.451 218.833 cv
101.451 220.927 103.597 222.624 106.245 222.624 cv
108.893 222.624 111.039 220.927 111.039 218.833 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
103.817 217.406 mo
(Identity)
[.519798 .780502 .693062 .780502 .433952 .43396 .43396 0 ]xsh
103.42 219.19 mo
(work=66)
[1.12702 .780495 .519806 .780495 .880402 .780495 0 ]xsh
103.312 220.974 mo
(I/O: 1->1)
[.519798 .43396 1.12702 .433952 .390251 .780502 .519798 .880402 0 ]xsh
108.252 199.432 mo
108.14 202.443 107.917 207.906 107.471 211.028 cv
107.36 211.92 107.248 213.147 107.025 214.261 cv
@
106.802 213.927 mo
106.914 215.042 li
107.36 213.927 li
cp
@
106.802 213.927 mo
106.914 215.042 li
107.36 213.927 li
f
124.085 207.237 mo
124.085 205.143 121.589 203.446 118.51 203.446 cv
115.431 203.446 112.935 205.143 112.935 207.237 cv
112.935 209.331 115.431 211.028 118.51 211.028 cv
121.589 211.028 124.085 209.331 124.085 207.237 cv
@
124.085 207.237 mo
124.085 205.143 121.589 203.446 118.51 203.446 cv
115.431 203.446 112.935 205.143 112.935 207.237 cv
112.935 209.331 115.431 211.028 118.51 211.028 cv
121.589 211.028 124.085 209.331 124.085 207.237 cv
.455 .686 .812 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
116.342 205.81 mo
(divises)
[.780502 .433952 .780502 .43396 .607216 .693062 0 ]xsh
114.905 207.594 mo
(work=1033)
[1.12702 .780495 .519806 .780495 .880402 .780495 .780502 .780502 0 ]xsh
114.797 209.378 mo
(I/O: 55->55)
[.519798 .43396 1.12702 .433952 .390251 .780502 .780502 .519798 .880394 .780502 0 ]xsh
111.374 199.209 mo
112.043 199.767 112.823 200.324 113.269 200.77 cv
113.827 201.328 114.496 202.108 115.165 203 cv
@
115.053 203.223 mo
115.945 203.892 li
115.388 202.889 li
cp
@
115.053 203.223 mo
115.945 203.892 li
115.388 202.889 li
f
115.276 581.877 mo
115.276 580.769 112.181 579.87 108.363 579.87 cv
104.546 579.87 101.45 580.769 101.45 581.877 cv
101.45 582.985 104.546 583.884 108.363 583.884 cv
112.181 583.884 115.276 582.985 115.276 581.877 cv
@
115.276 581.877 mo
115.276 580.769 112.181 579.87 108.363 579.87 cv
104.546 579.87 101.45 580.769 101.45 581.877 cv
101.45 582.985 104.546 583.884 108.363 583.884 cv
112.181 583.884 115.276 582.985 115.276 581.877 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
102.619 582.234 mo
(roundrobin\(11,55\))
[.519798 .780502 .780502 .780495 .780502 .519806 .780495 .780502 .43396 .780495 .519806 .780502 
.780495 .390251 .780502 .780495 0 ]xsh
105.576 583.773 mo
103.903 584.776 101.673 586.337 99.778 587.452 cv
@
99.6665 587.229 mo
98.886 588.009 li
100.001 587.675 li
cp
@
99.6665 587.229 mo
98.886 588.009 li
100.001 587.675 li
f
107.248 222.512 mo
107.36 223.07 107.471 223.516 107.471 223.962 cv
108.029 228.868 107.248 233.662 107.248 238.457 cv
107.248 238.457 107.248 238.457 107.248 565.821 cv
107.248 569.389 107.694 575.076 108.029 578.755 cv
@
107.806 578.755 mo
108.14 579.87 li
108.252 578.755 li
cp
@
107.806 578.755 mo
108.14 579.87 li
108.252 578.755 li
f
125.2 218.833 mo
125.2 216.739 122.704 215.042 119.625 215.042 cv
116.546 215.042 114.05 216.739 114.05 218.833 cv
114.05 220.927 116.546 222.624 119.625 222.624 cv
122.704 222.624 125.2 220.927 125.2 218.833 cv
@
125.2 218.833 mo
125.2 216.739 122.704 215.042 119.625 215.042 cv
116.546 215.042 114.05 216.739 114.05 218.833 cv
114.05 220.927 116.546 222.624 119.625 222.624 cv
122.704 222.624 125.2 220.927 125.2 218.833 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
117.241 217.406 mo
(updates)
[.780502 .780495 .780502 .693062 .43396 .693054 0 ]xsh
116.411 219.19 mo
(work=638)
[1.12702 .780495 .519806 .780495 .880402 .780495 .780502 0 ]xsh
115.912 220.974 mo
(I/O: 55->55)
[.519798 .43396 1.12702 .433952 .390251 .780502 .780502 .519798 .880394 .780502 0 ]xsh
118.844 211.028 mo
118.956 212.032 119.067 213.147 119.179 214.261 cv
@
118.844 213.927 mo
119.29 215.042 li
119.402 213.927 li
cp
@
118.844 213.927 mo
119.29 215.042 li
119.402 213.927 li
f
127.653 228.645 mo
127.653 227.537 124.558 226.638 120.74 226.638 cv
116.922 226.638 113.827 227.537 113.827 228.645 cv
113.827 229.753 116.922 230.652 120.74 230.652 cv
124.558 230.652 127.653 229.753 127.653 228.645 cv
@
127.653 228.645 mo
127.653 227.537 124.558 226.638 120.74 226.638 cv
116.922 226.638 113.827 227.537 113.827 228.645 cv
113.827 229.753 116.922 230.652 120.74 230.652 cv
124.558 230.652 127.653 229.753 127.653 228.645 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
114.996 229.002 mo
(roundrobin\(10,45\))
[.519798 .780502 .780502 .780495 .780502 .519806 .780495 .780502 .43396 .780495 .519806 .780502 
.780495 .390251 .780502 .780495 0 ]xsh
120.071 222.624 mo
120.182 223.628 120.294 224.631 120.405 225.634 cv
@
120.071 225.523 mo
120.517 226.638 li
120.628 225.523 li
cp
@
120.071 225.523 mo
120.517 226.638 li
120.628 225.523 li
f
123.416 250.053 mo
123.416 247.959 121.269 246.262 118.621 246.262 cv
115.974 246.262 113.827 247.959 113.827 250.053 cv
113.827 252.147 115.974 253.844 118.621 253.844 cv
121.269 253.844 123.416 252.147 123.416 250.053 cv
@
123.416 250.053 mo
123.416 247.959 121.269 246.262 118.621 246.262 cv
115.974 246.262 113.827 247.959 113.827 250.053 cv
113.827 252.147 115.974 253.844 118.621 253.844 cv
121.269 253.844 123.416 252.147 123.416 250.053 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
116.193 248.626 mo
(Identity)
[.519798 .780502 .693062 .780502 .433952 .43396 .43396 0 ]xsh
115.796 250.41 mo
(work=60)
[1.12702 .780495 .519806 .780495 .880402 .780495 0 ]xsh
115.688 252.194 mo
(I/O: 1->1)
[.519798 .43396 1.12702 .433952 .390251 .780502 .519798 .880402 0 ]xsh
120.628 230.652 mo
120.517 233.662 120.294 239.126 119.848 242.248 cv
119.736 243.14 119.625 244.367 119.402 245.482 cv
@
119.179 245.147 mo
119.29 246.262 li
119.736 245.147 li
cp
@
119.179 245.147 mo
119.29 246.262 li
119.736 245.147 li
f
136.461 238.457 mo
136.461 236.363 133.965 234.666 130.886 234.666 cv
127.808 234.666 125.311 236.363 125.311 238.457 cv
125.311 240.551 127.808 242.248 130.886 242.248 cv
133.965 242.248 136.461 240.551 136.461 238.457 cv
@
136.461 238.457 mo
136.461 236.363 133.965 234.666 130.886 234.666 cv
127.808 234.666 125.311 236.363 125.311 238.457 cv
125.311 240.551 127.808 242.248 130.886 242.248 cv
133.965 242.248 136.461 240.551 136.461 238.457 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
128.718 237.03 mo
(divises)
[.780502 .43396 .780502 .433945 .607224 .693054 0 ]xsh
127.671 238.814 mo
(work=921)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
127.173 240.598 mo
(I/O: 45->45)
[.519798 .43396 1.12701 .43396 .390259 .780487 .780502 .519806 .880402 .780502 0 ]xsh
123.75 230.429 mo
124.419 230.986 125.2 231.544 125.646 231.99 cv
126.203 232.548 126.872 233.328 127.541 234.22 cv
@
127.43 234.443 mo
128.322 235.112 li
127.764 234.109 li
cp
@
127.43 234.443 mo
128.322 235.112 li
127.764 234.109 li
f
127.653 573.849 mo
127.653 572.741 124.558 571.842 120.74 571.842 cv
116.922 571.842 113.827 572.741 113.827 573.849 cv
113.827 574.957 116.922 575.856 120.74 575.856 cv
124.558 575.856 127.653 574.957 127.653 573.849 cv
@
127.653 573.849 mo
127.653 572.741 124.558 571.842 120.74 571.842 cv
116.922 571.842 113.827 572.741 113.827 573.849 cv
113.827 574.957 116.922 575.856 120.74 575.856 cv
124.558 575.856 127.653 574.957 127.653 573.849 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
114.996 574.206 mo
(roundrobin\(10,45\))
[.519798 .780502 .780502 .780495 .780502 .519806 .780495 .780502 .43396 .780495 .519806 .780502 
.780495 .390251 .780502 .780495 0 ]xsh
117.952 575.745 mo
116.28 576.748 114.05 578.309 112.154 579.424 cv
@
112.043 579.201 mo
111.262 579.982 li
112.377 579.647 li
cp
@
112.043 579.201 mo
111.262 579.982 li
112.377 579.647 li
f
119.625 253.733 mo
119.736 254.29 119.848 254.736 119.848 255.182 cv
120.405 260.088 119.625 264.883 119.625 269.677 cv
119.625 269.677 119.625 269.677 119.625 557.793 cv
119.625 561.361 120.071 567.048 120.405 570.727 cv
@
120.182 570.727 mo
120.517 571.842 li
120.628 570.727 li
cp
@
120.182 570.727 mo
120.517 571.842 li
120.628 570.727 li
f
137.353 250.053 mo
137.353 247.959 134.857 246.262 131.778 246.262 cv
128.7 246.262 126.203 247.959 126.203 250.053 cv
126.203 252.147 128.7 253.844 131.778 253.844 cv
134.857 253.844 137.353 252.147 137.353 250.053 cv
@
137.353 250.053 mo
137.353 247.959 134.857 246.262 131.778 246.262 cv
128.7 246.262 126.203 247.959 126.203 250.053 cv
126.203 252.147 128.7 253.844 131.778 253.844 cv
134.857 253.844 137.353 252.147 137.353 250.053 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
129.394 248.626 mo
(updates)
[.780502 .780502 .780502 .693054 .43396 .693054 0 ]xsh
128.564 250.41 mo
(work=568)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
128.065 252.194 mo
(I/O: 45->45)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
131.221 242.248 mo
131.332 243.14 131.332 244.144 131.444 245.147 cv
@
131.221 245.147 mo
131.444 246.262 li
131.778 245.147 li
cp
@
131.221 245.147 mo
131.444 246.262 li
131.778 245.147 li
f
139.137 259.865 mo
139.137 258.757 136.242 257.858 132.67 257.858 cv
129.099 257.858 126.203 258.757 126.203 259.865 cv
126.203 260.973 129.099 261.872 132.67 261.872 cv
136.242 261.872 139.137 260.973 139.137 259.865 cv
@
139.137 259.865 mo
139.137 258.757 136.242 257.858 132.67 257.858 cv
129.099 257.858 126.203 258.757 126.203 259.865 cv
126.203 260.973 129.099 261.872 132.67 261.872 cv
136.242 261.872 139.137 260.973 139.137 259.865 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
127.316 260.222 mo
(roundrobin\(9,36\))
[.519798 .780502 .780502 .780502 .780502 .519791 .780502 .780502 .43396 .780502 .519791 .780502 
.390259 .780502 .780487 0 ]xsh
132.113 253.844 mo
132.224 254.848 132.224 255.851 132.336 256.855 cv
@
132.001 256.743 mo
132.447 257.858 li
132.559 256.743 li
cp
@
132.001 256.743 mo
132.447 257.858 li
132.559 256.743 li
f
135.792 281.273 mo
135.792 279.179 133.646 277.482 130.998 277.482 cv
128.35 277.482 126.204 279.179 126.204 281.273 cv
126.204 283.367 128.35 285.064 130.998 285.064 cv
133.646 285.064 135.792 283.367 135.792 281.273 cv
@
135.792 281.273 mo
135.792 279.179 133.646 277.482 130.998 277.482 cv
128.35 277.482 126.204 279.179 126.204 281.273 cv
126.204 283.367 128.35 285.064 130.998 285.064 cv
133.646 285.064 135.792 283.367 135.792 281.273 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
128.57 279.846 mo
(Identity)
[.519806 .780502 .693054 .780502 .43396 .43396 .433945 0 ]xsh
128.173 281.63 mo
(work=54)
[1.12701 .780502 .519806 .780502 .880386 .780502 0 ]xsh
128.065 283.414 mo
(I/O: 1->1)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
132.559 261.872 mo
132.559 264.883 132.336 270.346 132.001 273.468 cv
132.001 274.36 131.89 275.475 131.667 276.702 cv
@
131.444 276.367 mo
131.555 277.482 li
132.001 276.367 li
cp
@
131.444 276.367 mo
131.555 277.482 li
132.001 276.367 li
f
148.838 269.677 mo
148.838 267.583 146.342 265.886 143.263 265.886 cv
140.184 265.886 137.688 267.583 137.688 269.677 cv
137.688 271.771 140.184 273.468 143.263 273.468 cv
146.342 273.468 148.838 271.771 148.838 269.677 cv
@
148.838 269.677 mo
148.838 267.583 146.342 265.886 143.263 265.886 cv
140.184 265.886 137.688 267.583 137.688 269.677 cv
137.688 271.771 140.184 273.468 143.263 273.468 cv
146.342 273.468 148.838 271.771 148.838 269.677 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
141.095 268.25 mo
(divises)
[.780502 .43396 .780502 .433945 .607224 .693054 0 ]xsh
140.048 270.034 mo
(work=817)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
139.55 271.818 mo
(I/O: 36->36)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
135.792 261.649 mo
136.684 262.207 137.465 262.764 138.022 263.21 cv
138.58 263.768 139.249 264.548 139.918 265.329 cv
@
139.806 265.552 mo
140.698 266.221 li
140.141 265.217 li
cp
@
139.806 265.552 mo
140.698 266.221 li
140.141 265.217 li
f
139.137 565.821 mo
139.137 564.713 136.242 563.814 132.67 563.814 cv
129.099 563.814 126.203 564.713 126.203 565.821 cv
126.203 566.929 129.099 567.828 132.67 567.828 cv
136.242 567.828 139.137 566.929 139.137 565.821 cv
@
139.137 565.821 mo
139.137 564.713 136.242 563.814 132.67 563.814 cv
129.099 563.814 126.203 564.713 126.203 565.821 cv
126.203 566.929 129.099 567.828 132.67 567.828 cv
136.242 567.828 139.137 566.929 139.137 565.821 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
127.316 566.178 mo
(roundrobin\(9,36\))
[.519798 .780502 .780502 .780502 .780502 .519791 .780502 .780502 .43396 .780502 .519791 .780502 
.390259 .780502 .780487 0 ]xsh
129.883 567.717 mo
128.21 568.72 126.203 570.17 124.419 571.396 cv
@
124.308 571.173 mo
123.527 571.954 li
124.642 571.619 li
cp
@
124.308 571.173 mo
123.527 571.954 li
124.642 571.619 li
f
131.778 285.064 mo
131.89 285.51 132.001 286.068 132.001 286.402 cv
132.447 291.308 131.778 296.103 131.778 300.897 cv
131.778 300.897 131.778 300.897 131.778 549.765 cv
131.778 553.333 132.113 559.02 132.447 562.699 cv
@
132.224 562.699 mo
132.559 563.814 li
132.67 562.699 li
cp
@
132.224 562.699 mo
132.559 563.814 li
132.67 562.699 li
f
149.73 281.273 mo
149.73 279.179 147.234 277.482 144.155 277.482 cv
141.076 277.482 138.58 279.179 138.58 281.273 cv
138.58 283.367 141.076 285.064 144.155 285.064 cv
147.234 285.064 149.73 283.367 149.73 281.273 cv
@
149.73 281.273 mo
149.73 279.179 147.234 277.482 144.155 277.482 cv
141.076 277.482 138.58 279.179 138.58 281.273 cv
138.58 283.367 141.076 285.064 144.155 285.064 cv
147.234 285.064 149.73 283.367 149.73 281.273 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
141.771 279.846 mo
(updates)
[.780502 .780502 .780502 .693054 .43396 .693054 0 ]xsh
140.941 281.63 mo
(work=498)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
140.442 283.414 mo
(I/O: 36->36)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
143.597 273.468 mo
143.709 274.36 143.709 275.364 143.82 276.367 cv
@
143.597 276.367 mo
143.82 277.482 li
144.155 276.367 li
cp
@
143.597 276.367 mo
143.82 277.482 li
144.155 276.367 li
f
151.514 291.085 mo
151.514 289.977 148.619 289.078 145.047 289.078 cv
141.475 289.078 138.58 289.977 138.58 291.085 cv
138.58 292.193 141.475 293.092 145.047 293.092 cv
148.619 293.092 151.514 292.193 151.514 291.085 cv
@
151.514 291.085 mo
151.514 289.977 148.619 289.078 145.047 289.078 cv
141.475 289.078 138.58 289.977 138.58 291.085 cv
138.58 292.193 141.475 293.092 145.047 293.092 cv
148.619 293.092 151.514 292.193 151.514 291.085 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
139.693 291.442 mo
(roundrobin\(8,28\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780487 .43396 .780502 .519806 .780502 
.390244 .780502 .780502 0 ]xsh
144.489 285.064 mo
144.601 286.068 144.601 287.071 144.712 288.075 cv
@
144.378 287.963 mo
144.824 289.078 li
144.935 287.963 li
cp
@
144.378 287.963 mo
144.824 289.078 li
144.935 287.963 li
f
148.169 312.493 mo
148.169 310.399 146.022 308.702 143.374 308.702 cv
140.727 308.702 138.58 310.399 138.58 312.493 cv
138.58 314.587 140.727 316.284 143.374 316.284 cv
146.022 316.284 148.169 314.587 148.169 312.493 cv
@
148.169 312.493 mo
148.169 310.399 146.022 308.702 143.374 308.702 cv
140.727 308.702 138.58 310.399 138.58 312.493 cv
138.58 314.587 140.727 316.284 143.374 316.284 cv
146.022 316.284 148.169 314.587 148.169 312.493 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
140.946 311.066 mo
(Identity)
[.519806 .780502 .693054 .780502 .43396 .43396 .433945 0 ]xsh
140.549 312.85 mo
(work=48)
[1.12701 .780502 .519806 .780502 .880386 .780502 0 ]xsh
140.441 314.634 mo
(I/O: 1->1)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
144.935 293.092 mo
144.935 296.103 144.712 301.566 144.378 304.688 cv
144.378 305.58 144.266 306.695 144.043 307.922 cv
@
143.82 307.587 mo
143.932 308.702 li
144.378 307.587 li
cp
@
143.82 307.587 mo
143.932 308.702 li
144.378 307.587 li
f
161.214 300.897 mo
161.214 298.803 158.718 297.106 155.639 297.106 cv
152.56 297.106 150.064 298.803 150.064 300.897 cv
150.064 302.991 152.56 304.688 155.639 304.688 cv
158.718 304.688 161.214 302.991 161.214 300.897 cv
@
161.214 300.897 mo
161.214 298.803 158.718 297.106 155.639 297.106 cv
152.56 297.106 150.064 298.803 150.064 300.897 cv
150.064 302.991 152.56 304.688 155.639 304.688 cv
158.718 304.688 161.214 302.991 161.214 300.897 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
153.471 299.47 mo
(divises)
[.780502 .43396 .780502 .433945 .607224 .693054 0 ]xsh
152.424 301.254 mo
(work=721)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
151.926 303.038 mo
(I/O: 28->28)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
148.169 292.869 mo
149.061 293.427 149.841 293.984 150.399 294.43 cv
150.956 294.988 151.625 295.768 152.294 296.549 cv
@
152.183 296.772 mo
153.075 297.441 li
152.517 296.437 li
cp
@
152.183 296.772 mo
153.075 297.441 li
152.517 296.437 li
f
151.514 557.793 mo
151.514 556.685 148.619 555.786 145.047 555.786 cv
141.475 555.786 138.58 556.685 138.58 557.793 cv
138.58 558.901 141.475 559.8 145.047 559.8 cv
148.619 559.8 151.514 558.901 151.514 557.793 cv
@
151.514 557.793 mo
151.514 556.685 148.619 555.786 145.047 555.786 cv
141.475 555.786 138.58 556.685 138.58 557.793 cv
138.58 558.901 141.475 559.8 145.047 559.8 cv
148.619 559.8 151.514 558.901 151.514 557.793 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
139.693 558.15 mo
(roundrobin\(8,28\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780487 .43396 .780502 .519806 .780502 
.390244 .780502 .780502 0 ]xsh
142.259 559.577 mo
140.475 560.804 138.022 562.365 136.015 563.703 cv
@
136.238 563.257 mo
135.458 564.037 li
136.573 563.703 li
cp
@
136.238 563.257 mo
135.458 564.037 li
136.573 563.703 li
f
144.155 316.284 mo
144.266 316.73 144.378 317.288 144.378 317.622 cv
144.824 322.528 144.155 327.323 144.155 332.117 cv
144.155 332.117 144.155 332.117 144.155 541.737 cv
144.155 545.305 144.489 550.992 144.824 554.671 cv
@
144.601 554.671 mo
144.935 555.786 li
145.047 554.671 li
cp
@
144.601 554.671 mo
144.935 555.786 li
145.047 554.671 li
f
162.106 312.493 mo
162.106 310.399 159.61 308.702 156.531 308.702 cv
153.453 308.702 150.956 310.399 150.956 312.493 cv
150.956 314.587 153.453 316.284 156.531 316.284 cv
159.61 316.284 162.106 314.587 162.106 312.493 cv
@
162.106 312.493 mo
162.106 310.399 159.61 308.702 156.531 308.702 cv
153.453 308.702 150.956 310.399 150.956 312.493 cv
150.956 314.587 153.453 316.284 156.531 316.284 cv
159.61 316.284 162.106 314.587 162.106 312.493 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
154.147 311.066 mo
(updates)
[.780502 .780502 .780502 .693054 .43396 .693054 0 ]xsh
153.317 312.85 mo
(work=428)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
152.818 314.634 mo
(I/O: 28->28)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
155.974 304.688 mo
156.085 305.58 156.085 306.584 156.197 307.587 cv
@
155.974 307.587 mo
156.197 308.702 li
156.531 307.587 li
cp
@
155.974 307.587 mo
156.197 308.702 li
156.531 307.587 li
f
163.89 322.305 mo
163.89 321.197 160.995 320.298 157.423 320.298 cv
153.852 320.298 150.956 321.197 150.956 322.305 cv
150.956 323.413 153.852 324.312 157.423 324.312 cv
160.995 324.312 163.89 323.413 163.89 322.305 cv
@
163.89 322.305 mo
163.89 321.197 160.995 320.298 157.423 320.298 cv
153.852 320.298 150.956 321.197 150.956 322.305 cv
150.956 323.413 153.852 324.312 157.423 324.312 cv
160.995 324.312 163.89 323.413 163.89 322.305 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
152.069 322.662 mo
(roundrobin\(7,21\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780487 .43396 .780502 .519806 .780502 
.390244 .780502 .780502 0 ]xsh
156.866 316.284 mo
156.977 317.288 156.977 318.291 157.089 319.295 cv
@
156.754 319.183 mo
157.2 320.298 li
157.312 319.183 li
cp
@
156.754 319.183 mo
157.2 320.298 li
157.312 319.183 li
f
160.545 343.713 mo
160.545 341.619 158.399 339.922 155.751 339.922 cv
153.103 339.922 150.957 341.619 150.957 343.713 cv
150.957 345.807 153.103 347.504 155.751 347.504 cv
158.399 347.504 160.545 345.807 160.545 343.713 cv
@
160.545 343.713 mo
160.545 341.619 158.399 339.922 155.751 339.922 cv
153.103 339.922 150.957 341.619 150.957 343.713 cv
150.957 345.807 153.103 347.504 155.751 347.504 cv
158.399 347.504 160.545 345.807 160.545 343.713 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
153.323 342.286 mo
(Identity)
[.519806 .780502 .693054 .780502 .43396 .43396 .433945 0 ]xsh
152.926 344.07 mo
(work=42)
[1.12701 .780502 .519806 .780502 .880386 .780502 0 ]xsh
152.818 345.854 mo
(I/O: 1->1)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
157.312 324.312 mo
157.312 327.323 157.089 332.786 156.754 335.908 cv
156.754 336.8 156.643 337.915 156.42 339.142 cv
@
156.197 338.807 mo
156.308 339.922 li
156.754 338.807 li
cp
@
156.197 338.807 mo
156.308 339.922 li
156.754 338.807 li
f
173.591 332.117 mo
173.591 330.023 171.095 328.326 168.016 328.326 cv
164.937 328.326 162.441 330.023 162.441 332.117 cv
162.441 334.211 164.937 335.908 168.016 335.908 cv
171.095 335.908 173.591 334.211 173.591 332.117 cv
@
173.591 332.117 mo
173.591 330.023 171.095 328.326 168.016 328.326 cv
164.937 328.326 162.441 330.023 162.441 332.117 cv
162.441 334.211 164.937 335.908 168.016 335.908 cv
171.095 335.908 173.591 334.211 173.591 332.117 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
165.848 330.69 mo
(divises)
[.780502 .43396 .780502 .433945 .607224 .693054 0 ]xsh
164.801 332.474 mo
(work=633)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
164.303 334.258 mo
(I/O: 21->21)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
160.545 324.089 mo
161.438 324.647 162.218 325.204 162.775 325.65 cv
163.333 326.208 164.002 326.988 164.671 327.769 cv
@
164.559 327.992 mo
165.451 328.66 li
164.894 327.657 li
cp
@
164.559 327.992 mo
165.451 328.66 li
164.894 327.657 li
f
163.89 549.765 mo
163.89 548.657 160.995 547.758 157.423 547.758 cv
153.852 547.758 150.956 548.657 150.956 549.765 cv
150.956 550.873 153.852 551.772 157.423 551.772 cv
160.995 551.772 163.89 550.873 163.89 549.765 cv
@
163.89 549.765 mo
163.89 548.657 160.995 547.758 157.423 547.758 cv
153.852 547.758 150.956 548.657 150.956 549.765 cv
150.956 550.873 153.852 551.772 157.423 551.772 cv
160.995 551.772 163.89 550.873 163.89 549.765 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
152.069 550.122 mo
(roundrobin\(7,21\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780487 .43396 .780502 .519806 .780502 
.390244 .780502 .780502 0 ]xsh
154.636 551.549 mo
152.852 552.776 150.399 554.337 148.392 555.675 cv
@
148.615 555.229 mo
147.834 556.009 li
148.949 555.675 li
cp
@
148.615 555.229 mo
147.834 556.009 li
148.949 555.675 li
f
156.531 347.504 mo
156.643 347.95 156.754 348.508 156.754 348.842 cv
157.2 353.748 156.531 358.543 156.531 363.337 cv
156.531 363.337 156.531 363.337 156.531 533.709 cv
156.531 537.277 156.866 542.964 157.2 546.643 cv
@
156.977 546.643 mo
157.312 547.758 li
157.423 546.643 li
cp
@
156.977 546.643 mo
157.312 547.758 li
157.423 546.643 li
f
174.483 343.713 mo
174.483 341.619 171.987 339.922 168.908 339.922 cv
165.829 339.922 163.333 341.619 163.333 343.713 cv
163.333 345.807 165.829 347.504 168.908 347.504 cv
171.987 347.504 174.483 345.807 174.483 343.713 cv
@
174.483 343.713 mo
174.483 341.619 171.987 339.922 168.908 339.922 cv
165.829 339.922 163.333 341.619 163.333 343.713 cv
163.333 345.807 165.829 347.504 168.908 347.504 cv
171.987 347.504 174.483 345.807 174.483 343.713 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
166.524 342.286 mo
(updates)
[.780502 .780502 .780502 .693054 .43396 .693054 0 ]xsh
165.694 344.07 mo
(work=358)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
165.195 345.854 mo
(I/O: 21->21)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
168.35 335.908 mo
168.462 336.8 168.462 337.804 168.573 338.807 cv
@
168.35 338.807 mo
168.573 339.922 li
168.908 338.807 li
cp
@
168.35 338.807 mo
168.573 339.922 li
168.908 338.807 li
f
176.267 353.525 mo
176.267 352.417 173.372 351.518 169.8 351.518 cv
166.228 351.518 163.333 352.417 163.333 353.525 cv
163.333 354.633 166.228 355.532 169.8 355.532 cv
173.372 355.532 176.267 354.633 176.267 353.525 cv
@
176.267 353.525 mo
176.267 352.417 173.372 351.518 169.8 351.518 cv
166.228 351.518 163.333 352.417 163.333 353.525 cv
163.333 354.633 166.228 355.532 169.8 355.532 cv
173.372 355.532 176.267 354.633 176.267 353.525 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
164.446 353.882 mo
(roundrobin\(6,15\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780502 .433945 .780502 .519806 .780502 
.390244 .780502 .780502 0 ]xsh
169.242 347.504 mo
169.354 348.508 169.354 349.511 169.465 350.515 cv
@
169.131 350.403 mo
169.577 351.518 li
169.689 350.403 li
cp
@
169.131 350.403 mo
169.577 351.518 li
169.689 350.403 li
f
172.922 374.933 mo
172.922 372.839 170.775 371.142 168.127 371.142 cv
165.48 371.142 163.333 372.839 163.333 374.933 cv
163.333 377.027 165.48 378.724 168.127 378.724 cv
170.775 378.724 172.922 377.027 172.922 374.933 cv
@
172.922 374.933 mo
172.922 372.839 170.775 371.142 168.127 371.142 cv
165.48 371.142 163.333 372.839 163.333 374.933 cv
163.333 377.027 165.48 378.724 168.127 378.724 cv
170.775 378.724 172.922 377.027 172.922 374.933 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
165.699 373.506 mo
(Identity)
[.519806 .780502 .693054 .780502 .43396 .43396 .433945 0 ]xsh
165.302 375.29 mo
(work=36)
[1.12701 .780502 .519806 .780502 .880386 .780502 0 ]xsh
165.194 377.074 mo
(I/O: 1->1)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
169.689 355.532 mo
169.689 358.543 169.465 364.006 169.131 367.128 cv
169.131 368.02 169.019 369.135 168.796 370.361 cv
@
168.573 370.027 mo
168.685 371.142 li
169.131 370.027 li
cp
@
168.573 370.027 mo
168.685 371.142 li
169.131 370.027 li
f
185.967 363.337 mo
185.967 361.243 183.471 359.546 180.392 359.546 cv
177.314 359.546 174.817 361.243 174.817 363.337 cv
174.817 365.431 177.314 367.128 180.392 367.128 cv
183.471 367.128 185.967 365.431 185.967 363.337 cv
@
185.967 363.337 mo
185.967 361.243 183.471 359.546 180.392 359.546 cv
177.314 359.546 174.817 361.243 174.817 363.337 cv
174.817 365.431 177.314 367.128 180.392 367.128 cv
183.471 367.128 185.967 365.431 185.967 363.337 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
178.224 361.91 mo
(divises)
[.780502 .43396 .780502 .433945 .607224 .693054 0 ]xsh
177.177 363.694 mo
(work=553)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
176.679 365.478 mo
(I/O: 15->15)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
172.922 355.309 mo
173.814 355.867 174.594 356.424 175.152 356.87 cv
175.709 357.428 176.378 358.208 177.047 358.989 cv
@
176.936 359.211 mo
177.828 359.881 li
177.27 358.877 li
cp
@
176.936 359.211 mo
177.828 359.881 li
177.27 358.877 li
f
176.267 541.737 mo
176.267 540.629 173.372 539.73 169.8 539.73 cv
166.228 539.73 163.333 540.629 163.333 541.737 cv
163.333 542.845 166.228 543.744 169.8 543.744 cv
173.372 543.744 176.267 542.845 176.267 541.737 cv
@
176.267 541.737 mo
176.267 540.629 173.372 539.73 169.8 539.73 cv
166.228 539.73 163.333 540.629 163.333 541.737 cv
163.333 542.845 166.228 543.744 169.8 543.744 cv
173.372 543.744 176.267 542.845 176.267 541.737 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
164.446 542.094 mo
(roundrobin\(6,15\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780502 .433945 .780502 .519806 .780502 
.390244 .780502 .780502 0 ]xsh
167.012 543.521 mo
165.228 544.748 162.775 546.309 160.768 547.647 cv
@
160.991 547.201 mo
160.211 547.981 li
161.326 547.647 li
cp
@
160.991 547.201 mo
160.211 547.981 li
161.326 547.647 li
f
168.908 378.724 mo
169.019 379.17 169.131 379.728 169.131 380.062 cv
169.577 384.968 168.908 389.762 168.908 394.557 cv
168.908 394.557 168.908 394.557 168.908 525.681 cv
168.908 529.249 169.242 534.936 169.577 538.615 cv
@
169.354 538.615 mo
169.689 539.73 li
169.8 538.615 li
cp
@
169.354 538.615 mo
169.689 539.73 li
169.8 538.615 li
f
186.859 374.933 mo
186.859 372.839 184.363 371.142 181.284 371.142 cv
178.206 371.142 175.709 372.839 175.709 374.933 cv
175.709 377.027 178.206 378.724 181.284 378.724 cv
184.363 378.724 186.859 377.027 186.859 374.933 cv
@
186.859 374.933 mo
186.859 372.839 184.363 371.142 181.284 371.142 cv
178.206 371.142 175.709 372.839 175.709 374.933 cv
175.709 377.027 178.206 378.724 181.284 378.724 cv
184.363 378.724 186.859 377.027 186.859 374.933 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
178.9 373.506 mo
(updates)
[.780502 .780502 .780502 .693054 .43396 .693054 0 ]xsh
178.07 375.29 mo
(work=288)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
177.571 377.074 mo
(I/O: 15->15)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
180.727 367.128 mo
180.839 368.02 180.839 369.024 180.95 370.027 cv
@
180.727 370.027 mo
180.95 371.142 li
181.284 370.027 li
cp
@
180.727 370.027 mo
180.95 371.142 li
181.284 370.027 li
f
188.643 384.745 mo
188.643 383.637 185.748 382.738 182.176 382.738 cv
178.605 382.738 175.709 383.637 175.709 384.745 cv
175.709 385.853 178.605 386.752 182.176 386.752 cv
185.748 386.752 188.643 385.853 188.643 384.745 cv
@
188.643 384.745 mo
188.643 383.637 185.748 382.738 182.176 382.738 cv
178.605 382.738 175.709 383.637 175.709 384.745 cv
175.709 385.853 178.605 386.752 182.176 386.752 cv
185.748 386.752 188.643 385.853 188.643 384.745 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
176.822 385.102 mo
(roundrobin\(5,10\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780502 .433945 .780502 .519806 .780502 
.390244 .780502 .780502 0 ]xsh
181.619 378.724 mo
181.73 379.728 181.73 380.731 181.842 381.735 cv
@
181.507 381.623 mo
181.953 382.738 li
182.065 381.623 li
cp
@
181.507 381.623 mo
181.953 382.738 li
182.065 381.623 li
f
185.298 406.153 mo
185.298 404.059 183.152 402.362 180.504 402.362 cv
177.856 402.362 175.709 404.059 175.709 406.153 cv
175.709 408.247 177.856 409.944 180.504 409.944 cv
183.152 409.944 185.298 408.247 185.298 406.153 cv
@
185.298 406.153 mo
185.298 404.059 183.152 402.362 180.504 402.362 cv
177.856 402.362 175.709 404.059 175.709 406.153 cv
175.709 408.247 177.856 409.944 180.504 409.944 cv
183.152 409.944 185.298 408.247 185.298 406.153 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
178.076 404.726 mo
(Identity)
[.519806 .780502 .693054 .780502 .43396 .43396 .433945 0 ]xsh
177.679 406.51 mo
(work=30)
[1.12701 .780502 .519806 .780502 .880386 .780502 0 ]xsh
177.571 408.294 mo
(I/O: 1->1)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
182.065 386.752 mo
182.065 389.762 181.842 395.226 181.507 398.348 cv
181.507 399.24 181.396 400.355 181.173 401.582 cv
@
180.95 401.247 mo
181.061 402.362 li
181.507 401.247 li
cp
@
180.95 401.247 mo
181.061 402.362 li
181.507 401.247 li
f
198.344 394.557 mo
198.344 392.463 195.848 390.766 192.769 390.766 cv
189.69 390.766 187.194 392.463 187.194 394.557 cv
187.194 396.651 189.69 398.348 192.769 398.348 cv
195.848 398.348 198.344 396.651 198.344 394.557 cv
@
198.344 394.557 mo
198.344 392.463 195.848 390.766 192.769 390.766 cv
189.69 390.766 187.194 392.463 187.194 394.557 cv
187.194 396.651 189.69 398.348 192.769 398.348 cv
195.848 398.348 198.344 396.651 198.344 394.557 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
190.601 393.13 mo
(divises)
[.780502 .43396 .780502 .433945 .607224 .693054 0 ]xsh
189.554 394.914 mo
(work=481)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
189.056 396.698 mo
(I/O: 10->10)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
185.298 386.529 mo
186.19 387.086 186.971 387.644 187.528 388.09 cv
188.086 388.648 188.755 389.428 189.424 390.209 cv
@
189.312 390.432 mo
190.204 391.101 li
189.647 390.097 li
cp
@
189.312 390.432 mo
190.204 391.101 li
189.647 390.097 li
f
188.643 533.709 mo
188.643 532.601 185.748 531.702 182.176 531.702 cv
178.605 531.702 175.709 532.601 175.709 533.709 cv
175.709 534.817 178.605 535.716 182.176 535.716 cv
185.748 535.716 188.643 534.817 188.643 533.709 cv
@
188.643 533.709 mo
188.643 532.601 185.748 531.702 182.176 531.702 cv
178.605 531.702 175.709 532.601 175.709 533.709 cv
175.709 534.817 178.605 535.716 182.176 535.716 cv
185.748 535.716 188.643 534.817 188.643 533.709 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
176.822 534.066 mo
(roundrobin\(5,10\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780502 .433945 .780502 .519806 .780502 
.390244 .780502 .780502 0 ]xsh
179.389 535.493 mo
177.605 536.72 175.152 538.281 173.145 539.619 cv
@
173.368 539.173 mo
172.588 539.953 li
173.702 539.619 li
cp
@
173.368 539.173 mo
172.588 539.953 li
173.702 539.619 li
f
181.284 409.944 mo
181.396 410.39 181.507 410.948 181.507 411.282 cv
181.953 416.188 181.284 420.983 181.284 425.777 cv
181.284 425.777 181.284 425.777 181.284 517.653 cv
181.284 521.221 181.619 526.908 181.953 530.587 cv
@
181.73 530.587 mo
182.065 531.702 li
182.176 530.587 li
cp
@
181.73 530.587 mo
182.065 531.702 li
182.176 530.587 li
f
199.124 406.153 mo
199.124 404.059 196.628 402.362 193.549 402.362 cv
190.471 402.362 187.974 404.059 187.974 406.153 cv
187.974 408.247 190.471 409.944 193.549 409.944 cv
196.628 409.944 199.124 408.247 199.124 406.153 cv
@
199.124 406.153 mo
199.124 404.059 196.628 402.362 193.549 402.362 cv
190.471 402.362 187.974 404.059 187.974 406.153 cv
187.974 408.247 190.471 409.944 193.549 409.944 cv
196.628 409.944 199.124 408.247 199.124 406.153 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
191.165 404.726 mo
(updates)
[.780502 .780502 .780502 .693054 .43396 .693054 0 ]xsh
190.335 406.51 mo
(work=218)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
189.836 408.294 mo
(I/O: 10->10)
[.519806 .43396 1.12701 .43396 .390244 .780502 .780502 .519806 .880386 .780502 0 ]xsh
192.992 398.348 mo
193.103 399.24 193.103 400.244 193.215 401.247 cv
@
192.992 401.247 mo
193.215 402.362 li
193.549 401.247 li
cp
@
192.992 401.247 mo
193.215 402.362 li
193.549 401.247 li
f
200.351 415.965 mo
200.351 414.857 197.605 413.958 194.218 413.958 cv
190.832 413.958 188.086 414.857 188.086 415.965 cv
188.086 417.073 190.832 417.972 194.218 417.972 cv
197.605 417.972 200.351 417.073 200.351 415.965 cv
@
200.351 415.965 mo
200.351 414.857 197.605 413.958 194.218 413.958 cv
190.832 413.958 188.086 414.857 188.086 415.965 cv
188.086 417.073 190.832 417.972 194.218 417.972 cv
197.605 417.972 200.351 417.073 200.351 415.965 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
189.255 416.322 mo
(roundrobin\(4,6\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780487 .43396 .780502 .519806 .780502 
.390244 .780502 0 ]xsh
193.772 409.944 mo
193.884 410.948 193.884 411.951 193.995 412.955 cv
@
193.661 412.843 mo
194.107 413.958 li
194.218 412.843 li
cp
@
193.661 412.843 mo
194.107 413.958 li
194.218 412.843 li
f
197.675 437.373 mo
197.675 435.279 195.528 433.582 192.88 433.582 cv
190.233 433.582 188.086 435.279 188.086 437.373 cv
188.086 439.467 190.233 441.164 192.88 441.164 cv
195.528 441.164 197.675 439.467 197.675 437.373 cv
@
197.675 437.373 mo
197.675 435.279 195.528 433.582 192.88 433.582 cv
190.233 433.582 188.086 435.279 188.086 437.373 cv
188.086 439.467 190.233 441.164 192.88 441.164 cv
195.528 441.164 197.675 439.467 197.675 437.373 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
190.452 435.946 mo
(Identity)
[.519806 .780502 .693054 .780502 .43396 .43396 .433945 0 ]xsh
190.055 437.73 mo
(work=24)
[1.12701 .780502 .519806 .780502 .880386 .780502 0 ]xsh
189.947 439.514 mo
(I/O: 1->1)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
194.218 417.972 mo
194.107 420.983 193.995 426.446 193.772 429.568 cv
193.772 430.46 193.661 431.575 193.549 432.802 cv
@
193.326 432.467 mo
193.438 433.582 li
193.884 432.467 li
cp
@
193.326 432.467 mo
193.438 433.582 li
193.884 432.467 li
f
209.605 425.777 mo
209.605 423.683 207.359 421.986 204.588 421.986 cv
201.817 421.986 199.571 423.683 199.571 425.777 cv
199.571 427.871 201.817 429.568 204.588 429.568 cv
207.359 429.568 209.605 427.871 209.605 425.777 cv
@
209.605 425.777 mo
209.605 423.683 207.359 421.986 204.588 421.986 cv
201.817 421.986 199.571 423.683 199.571 425.777 cv
199.571 427.871 201.817 429.568 204.588 429.568 cv
207.359 429.568 209.605 427.871 209.605 425.777 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
202.42 424.35 mo
(divises)
[.780502 .43396 .780502 .433945 .607224 .693054 0 ]xsh
201.373 426.134 mo
(work=417)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
201.655 427.918 mo
(I/O: 6->6)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
197.564 417.638 mo
198.455 418.195 199.347 418.753 199.905 419.31 cv
200.462 419.868 201.02 420.648 201.689 421.317 cv
@
201.466 421.54 mo
202.358 422.321 li
202.023 421.206 li
cp
@
201.466 421.54 mo
202.358 422.321 li
202.023 421.206 li
f
200.351 525.681 mo
200.351 524.573 197.605 523.674 194.218 523.674 cv
190.832 523.674 188.086 524.573 188.086 525.681 cv
188.086 526.789 190.832 527.688 194.218 527.688 cv
197.605 527.688 200.351 526.789 200.351 525.681 cv
@
200.351 525.681 mo
200.351 524.573 197.605 523.674 194.218 523.674 cv
190.832 523.674 188.086 524.573 188.086 525.681 cv
188.086 526.789 190.832 527.688 194.218 527.688 cv
197.605 527.688 200.351 526.789 200.351 525.681 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
189.255 526.038 mo
(roundrobin\(4,6\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780487 .43396 .780502 .519806 .780502 
.390244 .780502 0 ]xsh
191.542 527.465 mo
189.87 528.58 187.64 530.141 185.856 531.368 cv
@
185.744 531.145 mo
184.964 531.925 li
186.079 531.591 li
cp
@
185.744 531.145 mo
184.964 531.925 li
186.079 531.591 li
f
193.661 441.164 mo
193.661 441.61 193.772 442.168 193.772 442.502 cv
194.107 447.408 193.549 452.203 193.549 456.997 cv
193.549 456.997 193.549 456.997 193.549 509.625 cv
193.549 513.193 193.772 518.88 193.995 522.559 cv
@
193.772 522.559 mo
194.107 523.674 li
194.218 522.559 li
cp
@
193.772 522.559 mo
194.107 523.674 li
194.218 522.559 li
f
210.609 437.373 mo
210.609 435.279 208.363 433.582 205.591 433.582 cv
202.82 433.582 200.574 435.279 200.574 437.373 cv
200.574 439.467 202.82 441.164 205.591 441.164 cv
208.363 441.164 210.609 439.467 210.609 437.373 cv
@
210.609 437.373 mo
210.609 435.279 208.363 433.582 205.591 433.582 cv
202.82 433.582 200.574 435.279 200.574 437.373 cv
200.574 439.467 202.82 441.164 205.591 441.164 cv
208.363 441.164 210.609 439.467 210.609 437.373 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
203.207 435.946 mo
(updates)
[.780502 .780502 .780502 .693054 .43396 .693054 0 ]xsh
202.377 437.73 mo
(work=148)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
202.658 439.514 mo
(I/O: 6->6)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
204.922 429.568 mo
205.034 430.46 205.034 431.464 205.145 432.467 cv
@
204.922 432.467 mo
205.257 433.582 li
205.368 432.467 li
cp
@
204.922 432.467 mo
205.257 433.582 li
205.368 432.467 li
f
212.727 447.185 mo
212.727 446.077 209.982 445.178 206.595 445.178 cv
203.208 445.178 200.462 446.077 200.462 447.185 cv
200.462 448.293 203.208 449.192 206.595 449.192 cv
209.982 449.192 212.727 448.293 212.727 447.185 cv
@
212.727 447.185 mo
212.727 446.077 209.982 445.178 206.595 445.178 cv
203.208 445.178 200.462 446.077 200.462 447.185 cv
200.462 448.293 203.208 449.192 206.595 449.192 cv
209.982 449.192 212.727 448.293 212.727 447.185 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
201.631 447.542 mo
(roundrobin\(3,3\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780502 .433945 .780502 .519806 .780502 
.390244 .780502 0 ]xsh
205.926 441.164 mo
206.038 442.168 206.149 443.171 206.26 444.175 cv
@
205.926 444.063 mo
206.372 445.178 li
206.483 444.063 li
cp
@
205.926 444.063 mo
206.372 445.178 li
206.483 444.063 li
f
210.051 468.593 mo
210.051 466.499 207.905 464.802 205.257 464.802 cv
202.609 464.802 200.462 466.499 200.462 468.593 cv
200.462 470.687 202.609 472.384 205.257 472.384 cv
207.905 472.384 210.051 470.687 210.051 468.593 cv
@
210.051 468.593 mo
210.051 466.499 207.905 464.802 205.257 464.802 cv
202.609 464.802 200.462 466.499 200.462 468.593 cv
200.462 470.687 202.609 472.384 205.257 472.384 cv
207.905 472.384 210.051 470.687 210.051 468.593 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
202.829 467.166 mo
(Identity)
[.519806 .780502 .693054 .780502 .43396 .43396 .433945 0 ]xsh
202.432 468.95 mo
(work=18)
[1.12701 .780502 .519806 .780502 .880386 .780502 0 ]xsh
202.324 470.734 mo
(I/O: 1->1)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
206.595 449.192 mo
206.483 452.203 206.372 457.666 206.149 460.788 cv
206.149 461.68 206.038 462.795 205.926 464.022 cv
@
205.703 463.687 mo
205.814 464.802 li
206.26 463.687 li
cp
@
205.703 463.687 mo
205.814 464.802 li
206.26 463.687 li
f
222.985 456.997 mo
222.985 454.903 220.739 453.206 217.968 453.206 cv
215.197 453.206 212.951 454.903 212.951 456.997 cv
212.951 459.091 215.197 460.788 217.968 460.788 cv
220.739 460.788 222.985 459.091 222.985 456.997 cv
@
222.985 456.997 mo
222.985 454.903 220.739 453.206 217.968 453.206 cv
215.197 453.206 212.951 454.903 212.951 456.997 cv
212.951 459.091 215.197 460.788 217.968 460.788 cv
220.739 460.788 222.985 459.091 222.985 456.997 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
215.8 455.57 mo
(divises)
[.780502 .43396 .780502 .433945 .607224 .693054 0 ]xsh
214.753 457.354 mo
(work=361)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
215.035 459.138 mo
(I/O: 3->3)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
210.386 448.746 mo
211.501 449.304 212.616 449.973 213.285 450.53 cv
213.954 450.976 214.623 451.757 215.18 452.649 cv
@
214.957 452.76 mo
215.849 453.541 li
215.403 452.426 li
cp
@
214.957 452.76 mo
215.849 453.541 li
215.403 452.426 li
f
212.727 517.653 mo
212.727 516.545 209.982 515.646 206.595 515.646 cv
203.208 515.646 200.462 516.545 200.462 517.653 cv
200.462 518.761 203.208 519.66 206.595 519.66 cv
209.982 519.66 212.727 518.761 212.727 517.653 cv
@
212.727 517.653 mo
212.727 516.545 209.982 515.646 206.595 515.646 cv
203.208 515.646 200.462 516.545 200.462 517.653 cv
200.462 518.761 203.208 519.66 206.595 519.66 cv
209.982 519.66 212.727 518.761 212.727 517.653 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
201.631 518.01 mo
(roundrobin\(3,3\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780502 .433945 .780502 .519806 .780502 
.390244 .780502 0 ]xsh
203.807 519.437 mo
202.023 520.552 199.793 522.113 197.898 523.34 cv
@
197.786 523.117 mo
197.006 523.897 li
198.121 523.562 li
cp
@
197.786 523.117 mo
197.006 523.897 li
198.121 523.562 li
f
206.038 472.384 mo
206.038 472.83 206.149 473.388 206.149 473.722 cv
206.483 478.628 205.926 483.423 205.926 488.217 cv
205.926 488.217 205.926 488.217 205.926 499.813 cv
205.926 503.827 206.149 510.406 206.372 514.42 cv
@
206.149 514.531 mo
206.483 515.646 li
206.706 514.531 li
cp
@
206.149 514.531 mo
206.483 515.646 li
206.706 514.531 li
f
223.208 468.593 mo
223.208 466.499 221.062 464.802 218.414 464.802 cv
215.766 464.802 213.62 466.499 213.62 468.593 cv
213.62 470.687 215.766 472.384 218.414 472.384 cv
221.062 472.384 223.208 470.687 223.208 468.593 cv
@
223.208 468.593 mo
223.208 466.499 221.062 464.802 218.414 464.802 cv
215.766 464.802 213.62 466.499 213.62 468.593 cv
213.62 470.687 215.766 472.384 218.414 472.384 cv
221.062 472.384 223.208 470.687 223.208 468.593 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
216.03 467.166 mo
(updates)
[.780502 .780502 .780502 .693054 .43396 .693054 0 ]xsh
215.59 468.95 mo
(work=78)
[1.12701 .780502 .519806 .780502 .880386 .780502 0 ]xsh
215.481 470.734 mo
(I/O: 3->3)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
218.079 460.788 mo
218.079 461.68 218.191 462.684 218.191 463.687 cv
@
217.968 463.687 mo
218.191 464.802 li
218.525 463.687 li
cp
@
217.968 463.687 mo
218.191 464.802 li
218.525 463.687 li
f
225.104 478.405 mo
225.104 477.297 222.358 476.398 218.971 476.398 cv
215.585 476.398 212.839 477.297 212.839 478.405 cv
212.839 479.513 215.585 480.412 218.971 480.412 cv
222.358 480.412 225.104 479.513 225.104 478.405 cv
@
225.104 478.405 mo
225.104 477.297 222.358 476.398 218.971 476.398 cv
215.585 476.398 212.839 477.297 212.839 478.405 cv
212.839 479.513 215.585 480.412 218.971 480.412 cv
222.358 480.412 225.104 479.513 225.104 478.405 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
214.008 478.762 mo
(roundrobin\(2,1\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780487 .43396 .780502 .519806 .780502 
.390244 .780502 0 ]xsh
218.637 472.384 mo
218.637 473.388 218.748 474.391 218.748 475.395 cv
@
218.414 475.283 mo
218.86 476.398 li
218.971 475.283 li
cp
@
218.414 475.283 mo
218.86 476.398 li
218.971 475.283 li
f
222.428 488.217 mo
222.428 486.123 220.281 484.426 217.633 484.426 cv
214.986 484.426 212.839 486.123 212.839 488.217 cv
212.839 490.311 214.986 492.008 217.633 492.008 cv
220.281 492.008 222.428 490.311 222.428 488.217 cv
@
222.428 488.217 mo
222.428 486.123 220.281 484.426 217.633 484.426 cv
214.986 484.426 212.839 486.123 212.839 488.217 cv
212.839 490.311 214.986 492.008 217.633 492.008 cv
220.281 492.008 222.428 490.311 222.428 488.217 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
215.205 486.79 mo
(Identity)
[.519806 .780502 .693054 .780502 .43396 .43396 .433945 0 ]xsh
214.808 488.574 mo
(work=12)
[1.12701 .780502 .519806 .780502 .880386 .780502 0 ]xsh
214.7 490.358 mo
(I/O: 1->1)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
218.748 480.412 mo
218.525 481.304 218.414 482.531 218.302 483.646 cv
@
218.079 483.311 mo
218.191 484.426 li
218.637 483.311 li
cp
@
218.079 483.311 mo
218.191 484.426 li
218.637 483.311 li
f
234.47 488.217 mo
234.47 486.123 232.224 484.426 229.452 484.426 cv
226.681 484.426 224.435 486.123 224.435 488.217 cv
224.435 490.311 226.681 492.008 229.452 492.008 cv
232.224 492.008 234.47 490.311 234.47 488.217 cv
@
234.47 488.217 mo
234.47 486.123 232.224 484.426 229.452 484.426 cv
226.681 484.426 224.435 486.123 224.435 488.217 cv
224.435 490.311 226.681 492.008 229.452 492.008 cv
232.224 492.008 234.47 490.311 234.47 488.217 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
227.284 486.79 mo
(divises)
[.780502 .43396 .780502 .433945 .607224 .693054 0 ]xsh
226.237 488.574 mo
(work=313)
[1.12701 .780502 .519806 .780502 .880386 .780502 .780502 0 ]xsh
226.519 490.358 mo
(I/O: 1->1)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
222.316 480.078 mo
223.208 480.635 224.212 481.193 224.769 481.75 cv
225.327 482.308 225.884 483.088 226.553 483.757 cv
@
226.33 483.98 mo
227.222 484.761 li
226.888 483.646 li
cp
@
226.33 483.98 mo
227.222 484.761 li
226.888 483.646 li
f
225.104 509.625 mo
225.104 508.517 222.358 507.618 218.971 507.618 cv
215.585 507.618 212.839 508.517 212.839 509.625 cv
212.839 510.733 215.585 511.632 218.971 511.632 cv
222.358 511.632 225.104 510.733 225.104 509.625 cv
@
225.104 509.625 mo
225.104 508.517 222.358 507.618 218.971 507.618 cv
215.585 507.618 212.839 508.517 212.839 509.625 cv
212.839 510.733 215.585 511.632 218.971 511.632 cv
222.358 511.632 225.104 510.733 225.104 509.625 cv
1 gry
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
214.008 509.982 mo
(roundrobin\(2,1\))
[.519806 .780502 .780487 .780502 .780502 .519806 .780502 .780487 .43396 .780502 .519806 .780502 
.390244 .780502 0 ]xsh
216.184 511.409 mo
214.4 512.524 212.17 514.085 210.274 515.311 cv
@
210.163 515.089 mo
209.382 515.869 li
210.497 515.535 li
cp
@
210.163 515.089 mo
209.382 515.869 li
210.497 515.535 li
f
218.191 492.008 mo
218.302 493.458 218.525 494.907 218.525 496.022 cv
218.748 498.921 218.86 503.604 218.971 506.615 cv
@
218.748 506.503 mo
218.971 507.618 li
219.306 506.503 li
cp
@
218.748 506.503 mo
218.971 507.618 li
219.306 506.503 li
f
234.135 499.813 mo
234.135 497.719 231.989 496.022 229.341 496.022 cv
226.693 496.022 224.547 497.719 224.547 499.813 cv
224.547 501.907 226.693 503.604 229.341 503.604 cv
231.989 503.604 234.135 501.907 234.135 499.813 cv
@
234.135 499.813 mo
234.135 497.719 231.989 496.022 229.341 496.022 cv
226.693 496.022 224.547 497.719 224.547 499.813 cv
224.547 501.907 226.693 503.604 229.341 503.604 cv
231.989 503.604 234.135 501.907 234.135 499.813 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
226.957 498.386 mo
(updates)
[.780502 .780502 .780502 .693054 .43396 .693054 0 ]xsh
226.907 500.17 mo
(work=8)
[1.12701 .780502 .519806 .780502 .880386 0 ]xsh
226.408 501.954 mo
(I/O: 1->1)
[.519806 .43396 1.12701 .43396 .390244 .780502 .519806 .880386 0 ]xsh
229.452 492.008 mo
229.452 492.9 229.341 493.904 229.341 494.907 cv
@
229.118 494.907 mo
229.341 496.022 li
229.675 494.907 li
cp
@
229.118 494.907 mo
229.341 496.022 li
229.675 494.907 li
f
226.553 502.935 mo
225.996 503.493 225.327 504.05 224.881 504.496 cv
224.212 505.165 223.208 506.169 222.205 506.949 cv
@
221.982 506.838 mo
221.313 507.73 li
222.316 507.172 li
cp
@
221.982 506.838 mo
221.313 507.73 li
222.316 507.172 li
f
58.523 643.425 mo
58.523 641.331 56.027 639.634 52.948 639.634 cv
49.869 639.634 47.373 641.331 47.373 643.425 cv
47.373 645.519 49.869 647.216 52.948 647.216 cv
56.027 647.216 58.523 645.519 58.523 643.425 cv
@
58.523 643.425 mo
58.523 641.331 56.027 639.634 52.948 639.634 cv
49.869 639.634 47.373 641.331 47.373 643.425 cv
47.373 645.519 49.869 647.216 52.948 647.216 cv
56.027 647.216 58.523 645.519 58.523 643.425 cv
.271 .467 .702 rgb
f
0 gry
LTFDQS+TimesNewRomanPSMT*1 [1.561 0 0 -1.561 0 0 ]msf
51.6469 641.998 mo
(sink)
[.607216 .43396 .780499 0 ]xsh
49.7331 643.782 mo
(work=672)
[1.12702 .780499 .519802 .780502 .880394 .780502 .780499 0 ]xsh
49.2345 645.566 mo
(I/O: 136->0)
[.519802 .433956 1.12702 .43396 .390247 .780502 .780499 .780502 .519802 .880394 0 ]xsh
52.948 635.62 mo
52.948 636.512 52.948 637.515 52.948 638.519 cv
@
52.725 638.519 mo
52.948 639.634 li
53.2825 638.519 li
cp
@
52.725 638.519 mo
52.948 639.634 li
53.2825 638.519 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/LTFDQS+TimesNewRomanPSMT*1 uf
/LTFDQS+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
