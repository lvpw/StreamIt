%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: IDCT2D.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:09:03 PM
%%BoundingBox: 0 0 383 648
%%HiResBoundingBox: 0 0 383 648
%%CropBox: 0 0 383 648
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -648 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 648 li
383 648 li
383 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 649 mo
419 649 li
419 0 li
35 0 li
cp
clp
.2862 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
38.2896 645.71 mo
416.646 645.71 li
416.646 2.3324 li
38.2896 2.3324 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 67 /C put
dup 68 /D put
dup 73 /I put
dup 84 /T put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
/C <1C60D8A8C9B64EDFB39C8FA0E3107D39E1E26D40368A6A59D36B799EDDCB
A8AF8BCAEA2E296C5BB00979C4073082C4AC62DAAE27F25BE45DFF121DF075F7
3D37111C10DFF7C6BD4BFE8AE73B4FADB84F0E8B5722DEA1CA14F5AFDC440B45
4F635F5576E82C8F45782F1EDE0EC9CA59D48E4C0F81> |-
/D <1C60D8A8C9B6079F62AF7EE2124AC712AE5D5419E262A0C00C6163DFBCB2
A6FA65DDDD5062250DB8BBFB46EB35827750F9FCEE696526B20FE9266474B179
350945BBDAF7180FAB04D619EB38198FC722361E0B3B5E50F9017F19C7BDCABB
285F506A04FE32C63936689B1F9C81923B03440D57336303C59B59E8D3C0659D
33> |-
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
/T <1C60D8A8C9B7D8BE16B2E353E3300378A32828826C127DE3D6A3769F5542
8119DC48F4B555CFAC557278838F3EC6C5F7B64F6B44DFEFCBC8AF8174185170
E165701BB15CF1CB88629A978EF6D86FB8> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDRV+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp 
/T 171{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
40.3259 5.53794 mo
(IDCT2D)
[1.33424 2.89285 2.6725 2.44812 2.0034 0 ]xsh
42.8688 322.877 mo
412.067 322.877 li
412.067 32.098 li
42.8688 32.098 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
/w <1C60D8A8C9B6079F6CBBA5F366E947F933D60DF598D919B1B7650559D736
37DABDC1EE55BCEC17305D792CEB494E24BD853631335C74FFCA113C4D914522
6940D65B0FA636B78B1332922431C88D4DDF20C0A3C1C91D0C3F0EC21F67A6EF
80D94D8DD0BC64DA8FAF76B12BBC90C7B441833497F4FAAF7AFFFE22453504D1
C6C3D3F89787D8CE910F64CD7AC81F424C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp 
/T 26{/.notdef}rp /o 2{/.notdef}rp /r /s 3{/.notdef}rp /w 
136{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
44.8897 35.3029 mo
(Irows)
[1.33424 1.33423 2.0034 2.89285 0 ]xsh
47.448 304.56 mo
140.463 304.56 li
140.463 51.559 li
47.448 51.559 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 99 /c put
dup 101 /e put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp 
/T 14{/.notdef}rp /c /.notdef /e 9{/.notdef}rp /o 2{/.notdef}rp 
/r /s 3{/.notdef}rp /w 136{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
49.3433 54.7649 mo
(IDCTcore)
[1.33424 2.89285 2.6725 2.44812 1.77896 2.0034 1.33423 0 ]xsh
52.0272 158.026 mo
135.884 158.026 li
135.884 58.4283 li
52.0272 58.4283 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp 
/T 14{/.notdef}rp /c /.notdef /e 9{/.notdef}rp /o 2{/.notdef}rp 
/r /s /.notdef /u /.notdef /w 136{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
53.8761 61.6329 mo
(Irecurse)
[1.33424 1.33423 1.77896 1.77896 2.0034 1.33423 1.55861 0 ]xsh
91.809 137.419 mo
131.305 137.419 li
131.305 79.0341 li
91.809 79.0341 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp 
/T 14{/.notdef}rp /c /d /e 9{/.notdef}rp /o 2{/.notdef}rp 
/r /s /.notdef /u /.notdef /w 136{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
93.7835 82.2399 mo
(reordIDCT)
[1.33424 1.77896 2.0034 1.33424 2.0034 1.33423 2.89285 2.6725 0 ]xsh
66.6234 230.148 mo
127.87 230.148 li
127.87 160.315 li
66.6234 160.315 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C86
82F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CB
A64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762
A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A
9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61F
B9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 97 /a put
dup 105 /i put
dup 109 /m put
dup 116 /t put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp 
/T 12{/.notdef}rp /a /.notdef /c /d /e 3{/.notdef}rp 
/i 3{/.notdef}rp /m /.notdef /o 2{/.notdef}rp /r /s 
/t /u /.notdef /w 136{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
68.4549 163.521 mo
(Idecimate)
[1.33424 2.0034 1.77896 1.77896 1.11389 3.11729 1.77896 1.11389 0 ]xsh
74.637 302.27 mo
133.594 302.27 li
133.594 232.437 li
74.637 232.437 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
/v <1C60D8A8C9B7A73DDA3AE0A055993EE6BE7DFD4A4A2DB6881516C07791ED
230086728F5F7B4242AB79AA3E9EFA40308C16768E728C96C19C447086D3AC82
2F0AB1C43C44A30591856370C72E911DB5FEBBFD365EF7E42462BF4A23A3EEAE
F504CBF5C917EC0A44C5B6D735> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 98 /b put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp 
/T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i 3{/.notdef}rp /m /.notdef /o 2{/.notdef}rp /r /s 
/t /u /v /w 136{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
76.5457 235.643 mo
(bitrev)
[2.0034 1.11388 1.11389 1.33424 1.77896 0 ]xsh
136.456 304.56 mo
229.471 304.56 li
229.471 51.559 li
136.456 51.559 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
138.351 54.7649 mo
(IDCTcore)
[1.33423 2.89285 2.6725 2.44814 1.77896 2.00339 1.33424 0 ]xsh
141.035 158.026 mo
224.892 158.026 li
224.892 58.4283 li
141.035 58.4283 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
142.884 61.6329 mo
(Irecurse)
[1.33423 1.33424 1.77896 1.77896 2.00339 1.33424 1.55861 0 ]xsh
180.817 137.419 mo
220.313 137.419 li
220.313 79.0341 li
180.817 79.0341 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
182.792 82.2399 mo
(reordIDCT)
[1.33423 1.77896 2.0034 1.33423 2.0034 1.33424 2.89285 2.6725 0 ]xsh
155.632 230.148 mo
216.879 230.148 li
216.879 160.315 li
155.632 160.315 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
157.463 163.521 mo
(Idecimate)
[1.33423 2.0034 1.77896 1.77896 1.11389 3.11729 1.77895 1.11389 0 ]xsh
163.645 302.27 mo
222.602 302.27 li
222.602 232.437 li
163.645 232.437 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
165.554 235.643 mo
(bitrev)
[2.0034 1.11389 1.11389 1.33423 1.77896 0 ]xsh
225.464 304.56 mo
318.479 304.56 li
318.479 51.559 li
225.464 51.559 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
227.36 54.7649 mo
(IDCTcore)
[1.33423 2.89285 2.6725 2.44814 1.77896 2.00339 1.33424 0 ]xsh
230.044 158.026 mo
313.901 158.026 li
313.901 58.4283 li
230.044 58.4283 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
231.892 61.6329 mo
(Irecurse)
[1.33423 1.33424 1.77896 1.77896 2.00339 1.33424 1.55861 0 ]xsh
269.825 137.419 mo
309.321 137.419 li
309.321 79.0341 li
269.825 79.0341 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
271.8 82.2399 mo
(reordIDCT)
[1.33423 1.77896 2.00342 1.33423 2.00339 1.33423 2.89285 2.67252 0 ]xsh
239.488 230.148 mo
300.735 230.148 li
300.735 160.315 li
239.488 160.315 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
241.32 163.521 mo
(Idecimate)
[1.33423 2.0034 1.77896 1.77896 1.11389 3.11729 1.77895 1.11389 0 ]xsh
230.044 302.27 mo
289.001 302.27 li
289.001 232.437 li
230.044 232.437 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
231.952 235.643 mo
(bitrev)
[2.0034 1.11389 1.11389 1.33423 1.77896 0 ]xsh
314.473 304.56 mo
407.488 304.56 li
407.488 51.559 li
314.473 51.559 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
316.368 54.7649 mo
(IDCTcore)
[1.33423 2.89285 2.67252 2.44812 1.77896 2.00339 1.33423 0 ]xsh
319.052 158.026 mo
402.909 158.026 li
402.909 58.4283 li
319.052 58.4283 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
320.901 61.6329 mo
(Irecurse)
[1.33423 1.33423 1.77896 1.77896 2.00342 1.33423 1.55862 0 ]xsh
358.834 137.419 mo
398.33 137.419 li
398.33 79.0341 li
358.834 79.0341 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
360.808 82.2399 mo
(reordIDCT)
[1.33423 1.77896 2.00342 1.33423 2.00339 1.33423 2.89285 2.67252 0 ]xsh
328.496 230.148 mo
389.743 230.148 li
389.743 160.315 li
328.496 160.315 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
330.328 163.521 mo
(Idecimate)
[1.33423 2.00342 1.77896 1.77893 1.11389 3.11731 1.77896 1.11389 0 ]xsh
319.052 302.27 mo
378.009 302.27 li
378.009 232.437 li
319.052 232.437 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
320.96 235.643 mo
(bitrev)
[2.00339 1.11389 1.11389 1.33423 1.77896 0 ]xsh
42.8688 615.946 mo
412.067 615.946 li
412.067 325.167 li
42.8688 325.167 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
44.8897 328.372 mo
(Irows)
[1.33424 1.33423 2.0034 2.89285 0 ]xsh
47.448 597.629 mo
140.463 597.629 li
140.463 344.628 li
47.448 344.628 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
49.3433 347.833 mo
(IDCTcore)
[1.33424 2.89285 2.6725 2.44812 1.77896 2.0034 1.33423 0 ]xsh
52.0272 451.094 mo
135.884 451.094 li
135.884 351.496 li
52.0272 351.496 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
53.8761 354.702 mo
(Irecurse)
[1.33424 1.33423 1.77896 1.77896 2.0034 1.33423 1.55861 0 ]xsh
91.809 430.488 mo
131.305 430.488 li
131.305 372.103 li
91.809 372.103 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
93.7835 375.309 mo
(reordIDCT)
[1.33424 1.77896 2.0034 1.33424 2.0034 1.33423 2.89285 2.6725 0 ]xsh
67.1958 523.217 mo
128.443 523.217 li
128.443 453.384 li
67.1958 453.384 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
69.0272 456.589 mo
(Idecimate)
[1.33424 2.0034 1.77896 1.77896 1.11389 3.11729 1.77896 1.11389 0 ]xsh
74.637 595.339 mo
133.594 595.339 li
133.594 525.506 li
74.637 525.506 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
76.5457 528.712 mo
(bitrev)
[2.0034 1.11388 1.11389 1.33424 1.77896 0 ]xsh
136.456 597.629 mo
229.471 597.629 li
229.471 344.628 li
136.456 344.628 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
138.351 347.833 mo
(IDCTcore)
[1.33423 2.89285 2.6725 2.44814 1.77896 2.00339 1.33424 0 ]xsh
141.035 451.094 mo
224.892 451.094 li
224.892 351.496 li
141.035 351.496 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
142.884 354.702 mo
(Irecurse)
[1.33423 1.33424 1.77896 1.77896 2.00339 1.33424 1.55861 0 ]xsh
180.817 430.488 mo
220.313 430.488 li
220.313 372.103 li
180.817 372.103 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
182.792 375.309 mo
(reordIDCT)
[1.33423 1.77896 2.0034 1.33423 2.0034 1.33424 2.89285 2.6725 0 ]xsh
148.763 523.217 mo
210.01 523.217 li
210.01 453.384 li
148.763 453.384 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
150.594 456.589 mo
(Idecimate)
[1.33423 2.0034 1.77896 1.77896 1.11389 3.11729 1.77895 1.11389 0 ]xsh
163.645 595.339 mo
222.602 595.339 li
222.602 525.506 li
163.645 525.506 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
165.554 528.712 mo
(bitrev)
[2.0034 1.11389 1.11389 1.33423 1.77896 0 ]xsh
225.464 597.629 mo
318.479 597.629 li
318.479 344.628 li
225.464 344.628 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
227.36 347.833 mo
(IDCTcore)
[1.33423 2.89285 2.6725 2.44814 1.77896 2.00339 1.33424 0 ]xsh
230.044 451.094 mo
313.901 451.094 li
313.901 351.496 li
230.044 351.496 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
231.892 354.702 mo
(Irecurse)
[1.33423 1.33424 1.77896 1.77896 2.00339 1.33424 1.55861 0 ]xsh
269.825 430.488 mo
309.321 430.488 li
309.321 372.103 li
269.825 372.103 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
271.8 375.309 mo
(reordIDCT)
[1.33423 1.77896 2.00342 1.33423 2.00339 1.33423 2.89285 2.67252 0 ]xsh
239.488 523.217 mo
300.735 523.217 li
300.735 453.384 li
239.488 453.384 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
241.32 456.589 mo
(Idecimate)
[1.33423 2.0034 1.77896 1.77896 1.11389 3.11729 1.77895 1.11389 0 ]xsh
230.044 595.339 mo
289.001 595.339 li
289.001 525.506 li
230.044 525.506 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
231.952 528.712 mo
(bitrev)
[2.0034 1.11389 1.11389 1.33423 1.77896 0 ]xsh
314.473 597.629 mo
407.488 597.629 li
407.488 344.628 li
314.473 344.628 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
316.368 347.833 mo
(IDCTcore)
[1.33423 2.89285 2.67252 2.44812 1.77896 2.00339 1.33423 0 ]xsh
319.052 451.094 mo
402.909 451.094 li
402.909 351.496 li
319.052 351.496 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
320.901 354.702 mo
(Irecurse)
[1.33423 1.33423 1.77896 1.77896 2.00342 1.33423 1.55862 0 ]xsh
358.834 430.488 mo
398.33 430.488 li
398.33 372.103 li
358.834 372.103 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
360.808 375.309 mo
(reordIDCT)
[1.33423 1.77896 2.00342 1.33423 2.00339 1.33423 2.89285 2.67252 0 ]xsh
328.496 523.217 mo
389.743 523.217 li
389.743 453.384 li
328.496 453.384 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
330.328 456.589 mo
(Idecimate)
[1.33423 2.00342 1.77896 1.77893 1.11389 3.11731 1.77896 1.11389 0 ]xsh
319.052 595.339 mo
378.009 595.339 li
378.009 525.506 li
319.052 525.506 li
cp
@
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
320.96 528.712 mo
(bitrev)
[2.00339 1.11389 1.11389 1.33423 1.77896 0 ]xsh
237.485 18.9319 mo
237.485 13.558 231.975 9.20197 225.178 9.20197 cv
218.381 9.20197 212.872 13.558 212.872 18.9319 cv
212.872 24.3069 218.381 28.663 225.178 28.663 cv
231.975 28.663 237.485 24.3069 237.485 18.9319 cv
@
237.485 18.9319 mo
237.485 13.558 231.975 9.20197 225.178 9.20197 cv
218.381 9.20197 212.872 13.558 212.872 18.9319 cv
212.872 24.3069 218.381 28.663 225.178 28.663 cv
231.975 28.663 237.485 24.3069 237.485 18.9319 cv
/1 
[/DeviceRGB] /CSA add_res
.882 .953 .973 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/hyphen <1C60D8A8C9B81F2C7E673161CF52871F3F524B3A1BAC5ADA04F510A
476> |-
/slash <1C60D8A8C9B854D088EAD778FBC18D924BA165ED7CB0EB5700C3B61B
62ACF96E65C0BF> |-
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
/eight <1C60D8A8C9B7A73D9EB159A3CFECEE26FAC12AD4B6691842B4C84783
E84E1D8CD272AEC54014C937C15B810E403549328E3DC44B6A66E9E0AE5509A1
20FFE6F694340EC43D35C59CD7D1B2F14C1F1D5BA576A10F77E962817750FC0E
DC62627EE0E94BCE030A10C59143A015250A384C09B6A65F8572DF3FCBF68CF8
0D23E4E88D0691BD2178810DDABD5F40D8018F795B8CB5A52DDDD05F80E9A2BC
CDF3A5E14C701FBADF0447A7AE0E47FA8F86216AC25155BFF3569B19382CA905
7B18009FE630A2D7CEFDC3A4A3> |-
/colon <1C60D8A8C9B854D0E389293C42E83787A5BE0CE9B5745E40D1B32D07
F826004562E0981DB26F3EF2E2B5CD932C33C49C462F9673F306A9A8ECFFE93D
9FCE8BF4190AA3F1208FCCE1> |-
/equal <1C60D8A8C9B7E7C1C7C30B941AA047473EBF9655DE246137CE0666A3
DD27E47997A26319529C8C4FF5C38D266AE0> |-
/greater <1C60D8A8C9B7E7C1C7C30B940B3D62C7A181F0EBB0723CBB160375
71F050C44CCE59A85ACB3DB6BF9B03383F> |-
/O <1C60D8A8C9B6079F258D65BC2331B95A484F6FB0C89DE7976C286549CD33
A4D7316575EC038BAA234ED3FB5DEACB25E52512A7CBD428E6DBD2EB830622E8
8A44262525560702DCFFFB3478FE1A2C6113548B23F661EC01296D75C1A7D5FE
B75CD951FFE5A9> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 47 /slash put
dup 48 /zero put
dup 52 /four put
dup 56 /eight put
dup 58 /colon put
dup 61 /equal put
dup 62 /greater put
dup 79 /O put
dup 107 /k put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /.notdef 
/two /.notdef /four 3{/.notdef}rp /eight /.notdef /colon 2{/.notdef}rp 
/equal /greater 4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp 
/O 4{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d 
/e 3{/.notdef}rp /i /.notdef /k /.notdef /m /.notdef 
/o 2{/.notdef}rp /r /s /t /u /v /w 
136{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
219.949 15.2689 mo
(source)
[1.55861 2.0034 2.0034 1.33423 1.77896 0 ]xsh
217.928 19.8481 mo
(work=48)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
217.649 24.4273 mo
(I/O: 0->4)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
243.781 44.118 mo
243.781 41.2729 235.452 38.966 225.178 38.966 cv
214.904 38.966 206.575 41.2729 206.575 44.118 cv
206.575 46.963 214.904 49.27 225.178 49.27 cv
235.452 49.27 243.781 46.963 243.781 44.118 cv
@
243.781 44.118 mo
243.781 41.2729 235.452 38.966 225.178 38.966 cv
214.904 38.966 206.575 41.2729 206.575 44.118 cv
206.575 46.963 214.904 49.27 225.178 49.27 cv
235.452 49.27 243.781 46.963 243.781 44.118 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /.notdef /two /.notdef /four 3{/.notdef}rp 
/eight /.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp /C 
/D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp /T 12{/.notdef}rp 
/a /b /c /d /e 3{/.notdef}rp /i /.notdef 
/k /.notdef /m /n /o 2{/.notdef}rp /r /s 
/t /u /v /w 136{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
209.432 45.0339 mo
(roundrobin\(4,4,4,4\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.00339 1.33424 2.0034 
1.00169 2.0034 1.00169 2.0034 1.00171 2.00339 0 ]xsh
225.178 28.663 mo
225.178 31.239 225.178 33.8149 225.178 36.391 cv
@
224.606 36.1039 mo
225.178 38.966 li
226.037 36.1039 li
cp
@
224.606 36.1039 mo
225.178 38.966 li
226.037 36.1039 li
f
127.298 70.4479 mo
127.298 67.603 120.25 65.297 111.557 65.297 cv
102.863 65.297 95.8158 67.603 95.8158 70.4479 cv
95.8158 73.2939 102.863 75.6 111.557 75.6 cv
120.25 75.6 127.298 73.2939 127.298 70.4479 cv
@
127.298 70.4479 mo
127.298 67.603 120.25 65.297 111.557 65.297 cv
102.863 65.297 95.8158 67.603 95.8158 70.4479 cv
95.8158 73.2939 102.863 75.6 111.557 75.6 cv
120.25 75.6 127.298 73.2939 127.298 70.4479 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four 3{/.notdef}rp 
/eight /.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp /C 
/D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp /T 12{/.notdef}rp 
/a /b /c /d /e 3{/.notdef}rp /i /.notdef 
/k /.notdef /m /n /o 2{/.notdef}rp /r /s 
/t /u /v /w 136{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
98.8152 71.3639 mo
(roundrobin\(1,1\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11388 2.0034 1.33424 2.0034 
1.00169 2.0034 0 ]xsh
206.575 44.6899 mo
187.114 45.549 157.063 47.5519 139.032 51.559 cv
133.022 52.9899 125.008 58.9999 118.998 63.866 cv
@
118.712 63.293 mo
116.995 65.5829 li
119.57 64.152 li
cp
@
118.712 63.293 mo
116.995 65.5829 li
119.57 64.152 li
f
216.306 70.4479 mo
216.306 67.603 209.258 65.297 200.565 65.297 cv
191.871 65.297 184.824 67.603 184.824 70.4479 cv
184.824 73.2939 191.871 75.6 200.565 75.6 cv
209.258 75.6 216.306 73.2939 216.306 70.4479 cv
@
216.306 70.4479 mo
216.306 67.603 209.258 65.297 200.565 65.297 cv
191.871 65.297 184.824 67.603 184.824 70.4479 cv
184.824 73.2939 191.871 75.6 200.565 75.6 cv
209.258 75.6 216.306 73.2939 216.306 70.4479 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
187.823 71.3639 mo
(roundrobin\(1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.00339 1.33424 2.0034 
1.00169 2.0034 0 ]xsh
220.313 49.27 mo
216.592 53.2759 211.154 58.9999 206.861 63.58 cv
@
206.575 63.007 mo
205.144 65.5829 li
207.434 63.866 li
cp
@
206.575 63.007 mo
205.144 65.5829 li
207.434 63.866 li
f
265.532 70.4479 mo
265.532 67.603 258.485 65.297 249.791 65.297 cv
241.098 65.297 234.05 67.603 234.05 70.4479 cv
234.05 73.2939 241.098 75.6 249.791 75.6 cv
258.485 75.6 265.532 73.2939 265.532 70.4479 cv
@
265.532 70.4479 mo
265.532 67.603 258.485 65.297 249.791 65.297 cv
241.098 65.297 234.05 67.603 234.05 70.4479 cv
234.05 73.2939 241.098 75.6 249.791 75.6 cv
258.485 75.6 265.532 73.2939 265.532 70.4479 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
237.05 71.3639 mo
(roundrobin\(1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.00339 
1.00171 2.00342 0 ]xsh
230.044 49.27 mo
233.764 53.2759 239.202 58.9999 243.495 63.58 cv
@
242.923 63.866 mo
245.212 65.5829 li
243.781 63.007 li
cp
@
242.923 63.866 mo
245.212 65.5829 li
243.781 63.007 li
f
354.541 70.4479 mo
354.541 67.603 347.493 65.297 338.8 65.297 cv
330.106 65.297 323.059 67.603 323.059 70.4479 cv
323.059 73.2939 330.106 75.6 338.8 75.6 cv
347.493 75.6 354.541 73.2939 354.541 70.4479 cv
@
354.541 70.4479 mo
354.541 67.603 347.493 65.297 338.8 65.297 cv
330.106 65.297 323.059 67.603 323.059 70.4479 cv
323.059 73.2939 330.106 75.6 338.8 75.6 cv
347.493 75.6 354.541 73.2939 354.541 70.4479 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
326.058 71.3639 mo
(roundrobin\(1,1\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
243.781 44.6899 mo
264.101 45.549 296.728 47.266 315.904 51.559 cv
321.341 52.704 327.924 58.714 332.789 63.58 cv
@
332.217 63.866 mo
334.507 65.5829 li
333.076 63.007 li
cp
@
332.217 63.866 mo
334.507 65.5829 li
333.076 63.007 li
f
244.926 315.436 mo
244.926 312.59 236.597 310.284 226.323 310.284 cv
216.049 310.284 207.72 312.59 207.72 315.436 cv
207.72 318.281 216.049 320.587 226.323 320.587 cv
236.597 320.587 244.926 318.281 244.926 315.436 cv
@
244.926 315.436 mo
244.926 312.59 236.597 310.284 226.323 310.284 cv
216.049 310.284 207.72 312.59 207.72 315.436 cv
207.72 318.281 216.049 320.587 226.323 320.587 cv
236.597 320.587 244.926 318.281 244.926 315.436 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
210.576 316.351 mo
(roundrobin\(1,1,1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 1.00169 2.0034 1.00171 2.0034 0 ]xsh
244.926 337.187 mo
244.926 334.342 236.597 332.035 226.323 332.035 cv
216.049 332.035 207.72 334.342 207.72 337.187 cv
207.72 340.032 216.049 342.338 226.323 342.338 cv
236.597 342.338 244.926 340.032 244.926 337.187 cv
@
244.926 337.187 mo
244.926 334.342 236.597 332.035 226.323 332.035 cv
216.049 332.035 207.72 334.342 207.72 337.187 cv
207.72 340.032 216.049 342.338 226.323 342.338 cv
236.597 342.338 244.926 340.032 244.926 337.187 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
210.576 338.103 mo
(roundrobin\(4,4,4,4\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 1.00169 2.0034 1.00171 2.0034 0 ]xsh
226.323 320.587 mo
226.323 323.163 226.323 326.311 226.323 329.173 cv
@
225.751 329.173 mo
226.323 332.035 li
227.182 329.173 li
cp
@
225.751 329.173 mo
226.323 332.035 li
227.182 329.173 li
f
89.2332 95.634 mo
89.2332 90.2599 81.4168 85.903 71.775 85.903 cv
62.1331 85.903 54.3168 90.2599 54.3168 95.634 cv
54.3168 101.008 62.1331 105.365 71.775 105.365 cv
81.4168 105.365 89.2332 101.008 89.2332 95.634 cv
@
89.2332 95.634 mo
89.2332 90.2599 81.4168 85.903 71.775 85.903 cv
62.1331 85.903 54.3168 90.2599 54.3168 95.634 cv
54.3168 101.008 62.1331 105.365 71.775 105.365 cv
81.4168 105.365 89.2332 101.008 89.2332 95.634 cv
.992 .863 .565 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7EF322B10A2A8DE6EF0A6CE60E86B1DF5C68015667A2338DB
07BCF91C9D8DCCB5967A656E7EB6651B3E305A306DA1BB8C1BAEECFC60DC00D8
8AEC56E3DF7455D57CB9BB0CC9A32704D4F0F1C39C5B2EDC70F42754CACE7253
FF5FDAE4B675FFF987E22613E24B8956EFA9C2C5B9AC406D966F459601B2046A
C9E54A3BB37C45EDEB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four 3{/.notdef}rp 
/eight /.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp /C 
/D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 3{/.notdef}rp /T 
12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp /i 
/.notdef /k /.notdef /m /n /o 2{/.notdef}rp /r 
/s /t /u /v /w 136{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
59.1977 91.9709 mo
(TwoPointIDCT)
[2.44812 2.89285 2.0034 2.22778 2.0034 1.11389 2.0034 1.11389 1.33424 2.89285 2.6725 0 
]xsh
64.5247 96.5502 mo
(work=80)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 0 ]xsh
64.2463 101.129 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
100.681 74.1689 mo
96.6744 75.6 92.6676 77.317 89.8056 79.0339 cv
87.516 80.752 84.654 83.041 81.792 85.6169 cv
@
81.792 84.472 mo
80.361 87.048 li
82.9368 85.6169 li
cp
@
81.792 84.472 mo
80.361 87.048 li
82.9368 85.6169 li
f
123.863 95.634 mo
123.863 90.2599 118.354 85.903 111.557 85.903 cv
104.76 85.903 99.2502 90.2599 99.2502 95.634 cv
99.2502 101.008 104.76 105.365 111.557 105.365 cv
118.354 105.365 123.863 101.008 123.863 95.634 cv
@
123.863 95.634 mo
123.863 90.2599 118.354 85.903 111.557 85.903 cv
104.76 85.903 99.2502 90.2599 99.2502 95.634 cv
99.2502 101.008 104.76 105.365 111.557 105.365 cv
118.354 105.365 123.863 101.008 123.863 95.634 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73DB9D92E2C498F1C8C272174C48D3E3EA8F27C6E6BA
93064621D133D030C551A42025686691A783FB90A2D496BEF06790AC79A6878D
99BC23CD14D9CFD812148CC847ABD0CF7E73A1A9D5ACE6E2E3BBFD4DD> |-
/x <1C60D8A8C9B7A73DD670D8CCCBFBC4E258D7CAA3ED17D069C025C1A2420A
81D4B3EAD7110946DAC3BA40217DDD18B672D1C19269266B39D87F9C1DDA90BD
8FC71EBFE3B2169703196A9FC02F9EA267A90B94DB1FAA5C105A1B22ABB76205
ADA50D456170C13F6F28FC77F3978776E97B76A3DEF1976915B787070DC57673
F3C0FA2B4E9DEFEF7147D4269144499ACAFBAFD930E1A038534DF3D883A96117
05279F3EC76B84BD5055C0FF3A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 53 /five put
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
2{/.notdef}rp /eight /.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp 
/C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 3{/.notdef}rp 
/T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i /.notdef /k /.notdef /m /n /o 2{/.notdef}rp 
/r /s /t /u /v /w /x 135{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
106.881 91.9709 mo
(inmix)
[1.11389 2.0034 3.11729 1.11389 0 ]xsh
104.307 96.5502 mo
(work=25)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 0 ]xsh
104.028 101.129 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
111.557 75.6 mo
111.557 77.603 111.557 80.465 111.557 83.041 cv
@
110.984 83.041 mo
111.557 85.903 li
112.415 83.041 li
cp
@
110.984 83.041 mo
111.557 85.903 li
112.415 83.041 li
f
110.984 150.584 mo
110.984 147.739 103.937 145.433 95.2434 145.433 cv
86.5499 145.433 79.5024 147.739 79.5024 150.584 cv
79.5024 153.43 86.5499 155.736 95.2434 155.736 cv
103.937 155.736 110.984 153.43 110.984 150.584 cv
@
110.984 150.584 mo
110.984 147.739 103.937 145.433 95.2434 145.433 cv
86.5499 145.433 79.5024 147.739 79.5024 150.584 cv
79.5024 153.43 86.5499 155.736 95.2434 155.736 cv
103.937 155.736 110.984 153.43 110.984 150.584 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
82.5018 151.5 mo
(roundrobin\(1,1\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11388 2.0034 1.33424 2.0034 
1.00169 2.0034 0 ]xsh
110.984 172.336 mo
110.984 169.49 103.937 167.184 95.2434 167.184 cv
86.5499 167.184 79.5024 169.49 79.5024 172.336 cv
79.5024 175.181 86.5499 177.487 95.2434 177.487 cv
103.937 177.487 110.984 175.181 110.984 172.336 cv
@
110.984 172.336 mo
110.984 169.49 103.937 167.184 95.2434 167.184 cv
86.5499 167.184 79.5024 169.49 79.5024 172.336 cv
79.5024 175.181 86.5499 177.487 95.2434 177.487 cv
103.937 177.487 110.984 175.181 110.984 172.336 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
82.5018 173.251 mo
(roundrobin\(2,2\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11388 2.0034 1.33424 2.0034 
1.00169 2.0034 0 ]xsh
95.2434 155.736 mo
95.2434 158.312 95.2434 161.46 95.2434 164.322 cv
@
94.671 164.322 mo
95.2434 167.184 li
96.102 164.322 li
cp
@
94.671 164.322 mo
95.2434 167.184 li
96.102 164.322 li
f
75.7818 105.079 mo
80.6472 115.954 88.0884 133.699 92.0952 143.429 cv
@
91.2366 143.143 mo
92.9538 145.433 li
92.3814 142.571 li
cp
@
91.2366 143.143 mo
92.9538 145.433 li
92.3814 142.571 li
f
129.015 125.399 mo
129.015 120.025 121.199 115.668 111.557 115.668 cv
101.915 115.668 94.0986 120.025 94.0986 125.399 cv
94.0986 130.773 101.915 135.13 111.557 135.13 cv
121.199 135.13 129.015 130.773 129.015 125.399 cv
@
129.015 125.399 mo
129.015 120.025 121.199 115.668 111.557 115.668 cv
101.915 115.668 94.0986 120.025 94.0986 125.399 cv
94.0986 130.773 101.915 135.13 111.557 135.13 cv
121.199 135.13 129.015 130.773 129.015 125.399 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
98.9795 121.735 mo
(TwoPointIDCT)
[2.44813 2.89285 2.0034 2.22778 2.0034 1.11389 2.0034 1.11389 1.33424 2.89285 2.6725 0 
]xsh
104.307 126.314 mo
(work=80)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 0 ]xsh
104.028 130.893 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
111.557 105.365 mo
111.557 107.654 111.557 110.23 111.557 112.806 cv
@
110.984 112.806 mo
111.557 115.668 li
112.415 112.806 li
cp
@
110.984 112.806 mo
111.557 115.668 li
112.415 112.806 li
f
105.547 134.557 mo
103.829 137.419 101.54 140.567 99.8226 143.143 cv
@
99.2502 142.571 mo
98.3916 145.433 li
100.395 143.429 li
cp
@
99.2502 142.571 mo
98.3916 145.433 li
100.395 143.429 li
f
94.671 197.521 mo
94.671 192.147 88.9048 187.79 81.792 187.79 cv
74.6792 187.79 68.913 192.147 68.913 197.521 cv
68.913 202.895 74.6792 207.252 81.792 207.252 cv
88.9048 207.252 94.671 202.895 94.671 197.521 cv
@
94.671 197.521 mo
94.671 192.147 88.9048 187.79 81.792 187.79 cv
74.6792 187.79 68.913 192.147 68.913 197.521 cv
68.913 202.895 74.6792 207.252 81.792 207.252 cv
88.9048 207.252 94.671 202.895 94.671 197.521 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
75.7858 193.858 mo
(recover)
[1.33424 1.77896 1.77895 2.0034 2.0034 1.77895 0 ]xsh
73.54 198.437 mo
(work=112)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 2.0034 0 ]xsh
74.2632 203.016 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
92.3814 177.487 mo
90.9504 180.063 89.2332 183.497 87.516 186.646 cv
@
87.2298 185.501 mo
86.6574 188.363 li
88.6608 186.073 li
cp
@
87.2298 185.501 mo
86.6574 188.363 li
88.6608 186.073 li
f
125.581 197.521 mo
125.581 192.147 119.814 187.79 112.702 187.79 cv
105.589 187.79 99.8226 192.147 99.8226 197.521 cv
99.8226 202.895 105.589 207.252 112.702 207.252 cv
119.814 207.252 125.581 202.895 125.581 197.521 cv
@
125.581 197.521 mo
125.581 192.147 119.814 187.79 112.702 187.79 cv
105.589 187.79 99.8226 192.147 99.8226 197.521 cv
99.8226 202.895 105.589 207.252 112.702 207.252 cv
119.814 207.252 125.581 202.895 125.581 197.521 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
106.695 193.858 mo
(recover)
[1.33424 1.77896 1.77895 2.0034 2.0034 1.77895 0 ]xsh
104.449 198.437 mo
(work=112)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 2.0034 0 ]xsh
105.172 203.016 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
98.6778 177.487 mo
100.395 180.349 102.971 183.497 104.974 186.646 cv
@
104.402 186.932 mo
106.691 188.935 li
105.547 186.073 li
cp
@
104.402 186.932 mo
106.691 188.935 li
105.547 186.073 li
f
119.857 222.707 mo
119.857 219.862 112.809 217.555 104.116 217.555 cv
95.4221 217.555 88.3746 219.862 88.3746 222.707 cv
88.3746 225.552 95.4221 227.858 104.116 227.858 cv
112.809 227.858 119.857 225.552 119.857 222.707 cv
@
119.857 222.707 mo
119.857 219.862 112.809 217.555 104.116 217.555 cv
95.4221 217.555 88.3746 219.862 88.3746 222.707 cv
88.3746 225.552 95.4221 227.858 104.116 227.858 cv
112.809 227.858 119.857 225.552 119.857 222.707 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
91.374 223.623 mo
(roundrobin\(1,1\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11389 2.0034 1.33424 2.0034 
1.0017 2.0034 0 ]xsh
119.857 244.458 mo
119.857 241.613 112.809 239.306 104.116 239.306 cv
95.4221 239.306 88.3746 241.613 88.3746 244.458 cv
88.3746 247.303 95.4221 249.61 104.116 249.61 cv
112.809 249.61 119.857 247.303 119.857 244.458 cv
@
119.857 244.458 mo
119.857 241.613 112.809 239.306 104.116 239.306 cv
95.4221 239.306 88.3746 241.613 88.3746 244.458 cv
88.3746 247.303 95.4221 249.61 104.116 249.61 cv
112.809 249.61 119.857 247.303 119.857 244.458 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
91.374 245.374 mo
(roundrobin\(2,2\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11389 2.0034 1.33424 2.0034 
1.0017 2.0034 0 ]xsh
104.116 227.858 mo
104.116 230.434 104.116 233.582 104.116 236.444 cv
@
103.543 236.444 mo
104.116 239.306 li
104.974 236.444 li
cp
@
103.543 236.444 mo
104.116 239.306 li
104.974 236.444 li
f
88.947 205.535 mo
91.809 208.969 95.2434 212.69 98.1054 215.838 cv
@
97.533 216.124 mo
99.8226 217.841 li
98.3916 215.266 li
cp
@
97.533 216.124 mo
99.8226 217.841 li
98.3916 215.266 li
f
109.553 206.966 mo
108.409 209.542 107.55 212.404 106.691 214.979 cv
@
106.119 214.693 mo
105.833 217.555 li
107.55 214.979 li
cp
@
106.119 214.693 mo
105.833 217.555 li
107.55 214.979 li
f
101.54 269.644 mo
101.54 264.269 96.0299 259.913 89.2332 259.913 cv
82.4365 259.913 76.9266 264.269 76.9266 269.644 cv
76.9266 275.018 82.4365 279.374 89.2332 279.374 cv
96.0299 279.374 101.54 275.018 101.54 269.644 cv
@
101.54 269.644 mo
101.54 264.269 96.0299 259.913 89.2332 259.913 cv
82.4365 259.913 76.9266 264.269 76.9266 269.644 cv
76.9266 275.018 82.4365 279.374 89.2332 279.374 cv
96.0299 279.374 101.54 275.018 101.54 269.644 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
2{/.notdef}rp /eight /.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp 
/C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 3{/.notdef}rp 
/T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i /.notdef /k /.notdef /m /n /o 2{/.notdef}rp 
/r /s /t /u /v /w /x /y 
134{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
83.0006 265.98 mo
(Identity)
[1.33424 2.0034 1.77896 2.0034 1.11389 1.11388 1.11389 0 ]xsh
81.9828 270.559 mo
(work=12)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 0 ]xsh
81.7044 275.138 mo
(I/O: 1->1)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
100.967 249.61 mo
99.5364 252.185 97.533 255.334 95.8158 258.196 cv
@
95.2434 257.909 mo
94.3848 260.771 li
96.3882 258.482 li
cp
@
95.2434 257.909 mo
94.3848 260.771 li
96.3882 258.482 li
f
131.305 269.644 mo
131.305 264.269 125.795 259.913 118.998 259.913 cv
112.201 259.913 106.691 264.269 106.691 269.644 cv
106.691 275.018 112.201 279.374 118.998 279.374 cv
125.795 279.374 131.305 275.018 131.305 269.644 cv
@
131.305 269.644 mo
131.305 264.269 125.795 259.913 118.998 259.913 cv
112.201 259.913 106.691 264.269 106.691 269.644 cv
106.691 275.018 112.201 279.374 118.998 279.374 cv
125.795 279.374 131.305 275.018 131.305 269.644 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRV+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7A73DF81BACD811429F931042E1295F1D2320E46DE79DF7
47FCAABFFD92F045A475E54E15C8E93ECB3BD59C8545C0EF45BF22429615FC68
5C033A02F070B2C6D7D737838C1853D297AC8915086E73952A7A9847D6F588AB
17767CC39CB62607242BC1B7BFF5295CEB6C03755CD9B53DA2> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRV+TimesNewRomanPSMT /Encoding get
dup 54 /six put
dup 108 /l put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRV+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 
3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /w /x 
/y 134{/.notdef}rp]
LTFDRV+TimesNewRomanPSMT nf
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
112.657 265.98 mo
(reversal)
[1.33424 1.77896 2.0034 1.77896 1.33424 1.55861 1.77896 0 ]xsh
111.747 270.559 mo
(work=26)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 0 ]xsh
111.469 275.138 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
107.264 249.61 mo
108.695 252.185 110.698 255.334 112.415 258.196 cv
@
111.843 258.482 mo
113.846 260.771 li
112.988 257.909 li
cp
@
111.843 258.482 mo
113.846 260.771 li
112.988 257.909 li
f
131.305 294.829 mo
131.305 291.984 124.257 289.678 115.564 289.678 cv
106.87 289.678 99.8226 291.984 99.8226 294.829 cv
99.8226 297.674 106.87 299.981 115.564 299.981 cv
124.257 299.981 131.305 297.674 131.305 294.829 cv
@
131.305 294.829 mo
131.305 291.984 124.257 289.678 115.564 289.678 cv
106.87 289.678 99.8226 291.984 99.8226 294.829 cv
99.8226 297.674 106.87 299.981 115.564 299.981 cv
124.257 299.981 131.305 297.674 131.305 294.829 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
102.822 295.745 mo
(roundrobin\(2,2\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11389 2.0034 1.33424 2.0034 
1.0017 2.0034 0 ]xsh
128.729 297.691 mo
139.032 299.981 152.77 302.843 161.642 304.56 cv
174.235 306.85 193.982 310.284 208.292 312.574 cv
@
207.434 313.146 mo
210.296 312.86 li
207.434 311.715 li
cp
@
207.434 313.146 mo
210.296 312.86 li
207.434 311.715 li
f
97.2468 277.085 mo
100.967 280.805 104.974 284.812 108.695 288.247 cv
@
107.836 288.533 mo
110.412 289.964 li
108.981 287.388 li
cp
@
107.836 288.533 mo
110.412 289.964 li
108.981 287.388 li
f
117.567 279.374 mo
117.281 281.95 116.995 284.526 116.708 287.102 cv
@
116.136 286.816 mo
116.136 289.678 li
117.567 287.102 li
cp
@
116.136 286.816 mo
116.136 289.678 li
117.567 287.102 li
f
178.241 95.634 mo
178.241 90.2599 170.425 85.903 160.783 85.903 cv
151.141 85.903 143.325 90.2599 143.325 95.634 cv
143.325 101.008 151.141 105.365 160.783 105.365 cv
170.425 105.365 178.241 101.008 178.241 95.634 cv
@
178.241 95.634 mo
178.241 90.2599 170.425 85.903 160.783 85.903 cv
151.141 85.903 143.325 90.2599 143.325 95.634 cv
143.325 101.008 151.141 105.365 160.783 105.365 cv
170.425 105.365 178.241 101.008 178.241 95.634 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
148.206 91.9709 mo
(TwoPointIDCT)
[2.44812 2.89285 2.0034 2.22778 2.0034 1.11388 2.0034 1.11389 1.33423 2.89285 2.67252 0 
]xsh
153.533 96.5502 mo
(work=80)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
153.255 101.129 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
189.689 74.1689 mo
185.683 75.6 181.676 77.317 178.814 79.0339 cv
176.524 80.752 173.662 83.041 170.8 85.6169 cv
@
170.8 84.472 mo
169.369 87.048 li
171.945 85.6169 li
cp
@
170.8 84.472 mo
169.369 87.048 li
171.945 85.6169 li
f
212.872 95.634 mo
212.872 90.2599 207.362 85.903 200.565 85.903 cv
193.768 85.903 188.258 90.2599 188.258 95.634 cv
188.258 101.008 193.768 105.365 200.565 105.365 cv
207.362 105.365 212.872 101.008 212.872 95.634 cv
@
212.872 95.634 mo
212.872 90.2599 207.362 85.903 200.565 85.903 cv
193.768 85.903 188.258 90.2599 188.258 95.634 cv
188.258 101.008 193.768 105.365 200.565 105.365 cv
207.362 105.365 212.872 101.008 212.872 95.634 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
195.889 91.9709 mo
(inmix)
[1.11389 2.0034 3.11728 1.11389 0 ]xsh
193.315 96.5502 mo
(work=25)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
193.036 101.129 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
200.565 75.6 mo
200.565 77.603 200.565 80.465 200.565 83.041 cv
@
199.993 83.041 mo
200.565 85.903 li
201.424 83.041 li
cp
@
199.993 83.041 mo
200.565 85.903 li
201.424 83.041 li
f
199.993 150.584 mo
199.993 147.739 192.945 145.433 184.252 145.433 cv
175.558 145.433 168.511 147.739 168.511 150.584 cv
168.511 153.43 175.558 155.736 184.252 155.736 cv
192.945 155.736 199.993 153.43 199.993 150.584 cv
@
199.993 150.584 mo
199.993 147.739 192.945 145.433 184.252 145.433 cv
175.558 145.433 168.511 147.739 168.511 150.584 cv
168.511 153.43 175.558 155.736 184.252 155.736 cv
192.945 155.736 199.993 153.43 199.993 150.584 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
171.51 151.5 mo
(roundrobin\(1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 0 ]xsh
199.993 172.336 mo
199.993 169.49 192.945 167.184 184.252 167.184 cv
175.558 167.184 168.511 169.49 168.511 172.336 cv
168.511 175.181 175.558 177.487 184.252 177.487 cv
192.945 177.487 199.993 175.181 199.993 172.336 cv
@
199.993 172.336 mo
199.993 169.49 192.945 167.184 184.252 167.184 cv
175.558 167.184 168.511 169.49 168.511 172.336 cv
168.511 175.181 175.558 177.487 184.252 177.487 cv
192.945 177.487 199.993 175.181 199.993 172.336 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
171.51 173.251 mo
(roundrobin\(2,2\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 0 ]xsh
184.252 155.736 mo
184.252 158.312 184.252 161.46 184.252 164.322 cv
@
183.679 164.322 mo
184.252 167.184 li
185.11 164.322 li
cp
@
183.679 164.322 mo
184.252 167.184 li
185.11 164.322 li
f
164.79 105.079 mo
169.655 115.954 177.097 133.699 181.103 143.429 cv
@
180.245 143.143 mo
181.962 145.433 li
181.39 142.571 li
cp
@
180.245 143.143 mo
181.962 145.433 li
181.39 142.571 li
f
218.023 125.399 mo
218.023 120.025 210.207 115.668 200.565 115.668 cv
190.923 115.668 183.107 120.025 183.107 125.399 cv
183.107 130.773 190.923 135.13 200.565 135.13 cv
210.207 135.13 218.023 130.773 218.023 125.399 cv
@
218.023 125.399 mo
218.023 120.025 210.207 115.668 200.565 115.668 cv
190.923 115.668 183.107 120.025 183.107 125.399 cv
183.107 130.773 190.923 135.13 200.565 135.13 cv
210.207 135.13 218.023 130.773 218.023 125.399 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
187.988 121.735 mo
(TwoPointIDCT)
[2.44812 2.89285 2.0034 2.22778 2.0034 1.11388 2.0034 1.11389 1.33423 2.89285 2.67252 0 
]xsh
193.315 126.314 mo
(work=80)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
193.037 130.893 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
200.565 105.365 mo
200.565 107.654 200.565 110.23 200.565 112.806 cv
@
199.993 112.806 mo
200.565 115.668 li
201.424 112.806 li
cp
@
199.993 112.806 mo
200.565 115.668 li
201.424 112.806 li
f
194.555 134.557 mo
192.838 137.419 190.548 140.567 188.831 143.143 cv
@
188.258 142.571 mo
187.4 145.433 li
189.403 143.429 li
cp
@
188.258 142.571 mo
187.4 145.433 li
189.403 143.429 li
f
183.679 197.521 mo
183.679 192.147 177.913 187.79 170.8 187.79 cv
163.687 187.79 157.921 192.147 157.921 197.521 cv
157.921 202.895 163.687 207.252 170.8 207.252 cv
177.913 207.252 183.679 202.895 183.679 197.521 cv
@
183.679 197.521 mo
183.679 192.147 177.913 187.79 170.8 187.79 cv
163.687 187.79 157.921 192.147 157.921 197.521 cv
157.921 202.895 163.687 207.252 170.8 207.252 cv
177.913 207.252 183.679 202.895 183.679 197.521 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
164.794 193.858 mo
(recover)
[1.33423 1.77896 1.77896 2.0034 2.0034 1.77896 0 ]xsh
162.548 198.437 mo
(work=112)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 2.0034 0 ]xsh
163.271 203.016 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
181.39 177.487 mo
179.959 180.063 178.241 183.497 176.524 186.646 cv
@
176.238 185.501 mo
175.666 188.363 li
177.669 186.073 li
cp
@
176.238 185.501 mo
175.666 188.363 li
177.669 186.073 li
f
214.589 197.521 mo
214.589 192.147 208.823 187.79 201.71 187.79 cv
194.597 187.79 188.831 192.147 188.831 197.521 cv
188.831 202.895 194.597 207.252 201.71 207.252 cv
208.823 207.252 214.589 202.895 214.589 197.521 cv
@
214.589 197.521 mo
214.589 192.147 208.823 187.79 201.71 187.79 cv
194.597 187.79 188.831 192.147 188.831 197.521 cv
188.831 202.895 194.597 207.252 201.71 207.252 cv
208.823 207.252 214.589 202.895 214.589 197.521 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
195.704 193.858 mo
(recover)
[1.33423 1.77896 1.77896 2.0034 2.0034 1.77896 0 ]xsh
193.458 198.437 mo
(work=112)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 2.0034 0 ]xsh
194.181 203.016 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
187.686 177.487 mo
189.403 180.349 191.979 183.497 193.982 186.646 cv
@
193.41 186.932 mo
195.7 188.935 li
194.555 186.073 li
cp
@
193.41 186.932 mo
195.7 188.935 li
194.555 186.073 li
f
208.865 222.707 mo
208.865 219.862 201.817 217.555 193.124 217.555 cv
184.43 217.555 177.383 219.862 177.383 222.707 cv
177.383 225.552 184.43 227.858 193.124 227.858 cv
201.817 227.858 208.865 225.552 208.865 222.707 cv
@
208.865 222.707 mo
208.865 219.862 201.817 217.555 193.124 217.555 cv
184.43 217.555 177.383 219.862 177.383 222.707 cv
177.383 225.552 184.43 227.858 193.124 227.858 cv
201.817 227.858 208.865 225.552 208.865 222.707 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
180.382 223.623 mo
(roundrobin\(1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 0 ]xsh
208.865 244.458 mo
208.865 241.613 201.817 239.306 193.124 239.306 cv
184.43 239.306 177.383 241.613 177.383 244.458 cv
177.383 247.303 184.43 249.61 193.124 249.61 cv
201.817 249.61 208.865 247.303 208.865 244.458 cv
@
208.865 244.458 mo
208.865 241.613 201.817 239.306 193.124 239.306 cv
184.43 239.306 177.383 241.613 177.383 244.458 cv
177.383 247.303 184.43 249.61 193.124 249.61 cv
201.817 249.61 208.865 247.303 208.865 244.458 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
180.382 245.374 mo
(roundrobin\(2,2\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 0 ]xsh
193.124 227.858 mo
193.124 230.434 193.124 233.582 193.124 236.444 cv
@
192.551 236.444 mo
193.124 239.306 li
193.982 236.444 li
cp
@
192.551 236.444 mo
193.124 239.306 li
193.982 236.444 li
f
177.955 205.535 mo
180.817 208.969 184.252 212.69 187.114 215.838 cv
@
186.541 216.124 mo
188.831 217.841 li
187.4 215.266 li
cp
@
186.541 216.124 mo
188.831 217.841 li
187.4 215.266 li
f
198.562 206.966 mo
197.417 209.542 196.558 212.404 195.7 214.979 cv
@
195.127 214.693 mo
194.841 217.555 li
196.558 214.979 li
cp
@
195.127 214.693 mo
194.841 217.555 li
196.558 214.979 li
f
190.548 269.644 mo
190.548 264.269 185.038 259.913 178.241 259.913 cv
171.445 259.913 165.935 264.269 165.935 269.644 cv
165.935 275.018 171.445 279.374 178.241 279.374 cv
185.038 279.374 190.548 275.018 190.548 269.644 cv
@
190.548 269.644 mo
190.548 264.269 185.038 259.913 178.241 259.913 cv
171.445 259.913 165.935 264.269 165.935 269.644 cv
165.935 275.018 171.445 279.374 178.241 279.374 cv
185.038 279.374 190.548 275.018 190.548 269.644 cv
.271 .467 .702 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
172.009 265.98 mo
(Identity)
[1.33423 2.0034 1.77896 2.0034 1.11389 1.11389 1.11389 0 ]xsh
170.991 270.559 mo
(work=12)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
170.713 275.138 mo
(I/O: 1->1)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
189.976 249.61 mo
188.545 252.185 186.541 255.334 184.824 258.196 cv
@
184.252 257.909 mo
183.393 260.771 li
185.396 258.482 li
cp
@
184.252 257.909 mo
183.393 260.771 li
185.396 258.482 li
f
220.313 269.644 mo
220.313 264.269 214.803 259.913 208.006 259.913 cv
201.209 259.913 195.7 264.269 195.7 269.644 cv
195.7 275.018 201.209 279.374 208.006 279.374 cv
214.803 279.374 220.313 275.018 220.313 269.644 cv
@
220.313 269.644 mo
220.313 264.269 214.803 259.913 208.006 259.913 cv
201.209 259.913 195.7 264.269 195.7 269.644 cv
195.7 275.018 201.209 279.374 208.006 279.374 cv
214.803 279.374 220.313 275.018 220.313 269.644 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
201.665 265.98 mo
(reversal)
[1.33423 1.77896 2.0034 1.77896 1.33423 1.55862 1.77896 0 ]xsh
200.755 270.559 mo
(work=26)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
200.477 275.138 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
196.272 249.61 mo
197.703 252.185 199.706 255.334 201.424 258.196 cv
@
200.851 258.482 mo
202.855 260.771 li
201.996 257.909 li
cp
@
200.851 258.482 mo
202.855 260.771 li
201.996 257.909 li
f
220.313 294.829 mo
220.313 291.984 213.265 289.678 204.572 289.678 cv
195.878 289.678 188.831 291.984 188.831 294.829 cv
188.831 297.674 195.878 299.981 204.572 299.981 cv
213.265 299.981 220.313 297.674 220.313 294.829 cv
@
220.313 294.829 mo
220.313 291.984 213.265 289.678 204.572 289.678 cv
195.878 289.678 188.831 291.984 188.831 294.829 cv
188.831 297.674 195.878 299.981 204.572 299.981 cv
213.265 299.981 220.313 297.674 220.313 294.829 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
191.83 295.745 mo
(roundrobin\(2,2\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 0 ]xsh
209.723 299.695 mo
212.585 302.27 216.02 305.705 219.168 308.567 cv
@
218.596 309.139 mo
221.171 310.57 li
219.74 307.994 li
cp
@
218.596 309.139 mo
221.171 310.57 li
219.74 307.994 li
f
186.255 277.085 mo
189.976 280.805 193.982 284.812 197.703 288.247 cv
@
196.844 288.533 mo
199.42 289.964 li
197.989 287.388 li
cp
@
196.844 288.533 mo
199.42 289.964 li
197.989 287.388 li
f
206.575 279.374 mo
206.289 281.95 206.003 284.526 205.717 287.102 cv
@
205.144 286.816 mo
205.144 289.678 li
206.575 287.102 li
cp
@
205.144 286.816 mo
205.144 289.678 li
206.575 287.102 li
f
267.25 95.634 mo
267.25 90.2599 259.433 85.903 249.791 85.903 cv
240.15 85.903 232.333 90.2599 232.333 95.634 cv
232.333 101.008 240.15 105.365 249.791 105.365 cv
259.433 105.365 267.25 101.008 267.25 95.634 cv
@
267.25 95.634 mo
267.25 90.2599 259.433 85.903 249.791 85.903 cv
240.15 85.903 232.333 90.2599 232.333 95.634 cv
232.333 101.008 240.15 105.365 249.791 105.365 cv
259.433 105.365 267.25 101.008 267.25 95.634 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
237.214 91.9709 mo
(TwoPointIDCT)
[2.44812 2.89285 2.0034 2.22778 2.00339 1.11389 2.0034 1.11389 1.33424 2.89285 2.67249 0 
]xsh
242.541 96.5502 mo
(work=80)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
242.263 101.129 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
249.791 75.6 mo
249.791 77.603 249.791 80.465 249.791 83.041 cv
@
249.219 83.041 mo
249.791 85.903 li
250.65 83.041 li
cp
@
249.219 83.041 mo
249.791 85.903 li
250.65 83.041 li
f
299.304 95.634 mo
299.304 90.2599 293.794 85.903 286.997 85.903 cv
280.201 85.903 274.691 90.2599 274.691 95.634 cv
274.691 101.008 280.201 105.365 286.997 105.365 cv
293.794 105.365 299.304 101.008 299.304 95.634 cv
@
299.304 95.634 mo
299.304 90.2599 293.794 85.903 286.997 85.903 cv
280.201 85.903 274.691 90.2599 274.691 95.634 cv
274.691 101.008 280.201 105.365 286.997 105.365 cv
293.794 105.365 299.304 101.008 299.304 95.634 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
282.321 91.9709 mo
(inmix)
[1.11389 2.00339 3.11731 1.11389 0 ]xsh
279.747 96.5502 mo
(work=25)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 0 ]xsh
279.468 101.129 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
262.384 73.597 mo
267.25 75.028 272.401 77.0309 275.549 79.0339 cv
277.267 80.179 278.984 82.183 280.415 84.186 cv
@
279.842 84.758 mo
282.132 86.762 li
281.273 83.9 li
cp
@
279.842 84.758 mo
282.132 86.762 li
281.273 83.9 li
f
282.991 150.584 mo
282.991 147.739 275.943 145.433 267.25 145.433 cv
258.556 145.433 251.509 147.739 251.509 150.584 cv
251.509 153.43 258.556 155.736 267.25 155.736 cv
275.943 155.736 282.991 153.43 282.991 150.584 cv
@
282.991 150.584 mo
282.991 147.739 275.943 145.433 267.25 145.433 cv
258.556 145.433 251.509 147.739 251.509 150.584 cv
251.509 153.43 258.556 155.736 267.25 155.736 cv
275.943 155.736 282.991 153.43 282.991 150.584 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
254.508 151.5 mo
(roundrobin\(1,1\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
282.991 172.336 mo
282.991 169.49 275.943 167.184 267.25 167.184 cv
258.556 167.184 251.509 169.49 251.509 172.336 cv
251.509 175.181 258.556 177.487 267.25 177.487 cv
275.943 177.487 282.991 175.181 282.991 172.336 cv
@
282.991 172.336 mo
282.991 169.49 275.943 167.184 267.25 167.184 cv
258.556 167.184 251.509 169.49 251.509 172.336 cv
251.509 175.181 258.556 177.487 267.25 177.487 cv
275.943 177.487 282.991 175.181 282.991 172.336 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
254.508 173.251 mo
(roundrobin\(2,2\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
267.25 155.736 mo
267.25 158.312 267.25 161.46 267.25 164.322 cv
@
266.677 164.322 mo
267.25 167.184 li
268.108 164.322 li
cp
@
266.677 164.322 mo
267.25 167.184 li
268.108 164.322 li
f
252.94 105.365 mo
256.374 116.24 261.812 133.699 264.96 143.429 cv
@
264.101 142.857 mo
265.532 145.433 li
265.532 142.571 li
cp
@
264.101 142.857 mo
265.532 145.433 li
265.532 142.571 li
f
307.031 125.399 mo
307.031 120.025 299.215 115.668 289.573 115.668 cv
279.931 115.668 272.115 120.025 272.115 125.399 cv
272.115 130.773 279.931 135.13 289.573 135.13 cv
299.215 135.13 307.031 130.773 307.031 125.399 cv
@
307.031 125.399 mo
307.031 120.025 299.215 115.668 289.573 115.668 cv
279.931 115.668 272.115 120.025 272.115 125.399 cv
272.115 130.773 279.931 135.13 289.573 135.13 cv
299.215 135.13 307.031 130.773 307.031 125.399 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
276.996 121.735 mo
(TwoPointIDCT)
[2.44812 2.89285 2.00339 2.22778 2.00342 1.11389 2.00339 1.11389 1.33423 2.89285 2.67252 0 
]xsh
282.323 126.314 mo
(work=80)
[2.89285 2.00339 1.33423 2.00342 2.25983 2.00339 0 ]xsh
282.045 130.893 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
287.856 105.365 mo
288.142 107.654 288.142 110.23 288.428 112.806 cv
@
287.856 112.806 mo
288.715 115.668 li
289.001 112.806 li
cp
@
287.856 112.806 mo
288.715 115.668 li
289.001 112.806 li
f
281.846 134.271 mo
278.984 137.419 275.836 140.567 273.26 143.716 cv
@
272.974 143.143 mo
271.543 145.719 li
273.832 144.002 li
cp
@
272.974 143.143 mo
271.543 145.719 li
273.832 144.002 li
f
267.536 197.521 mo
267.536 192.147 261.77 187.79 254.657 187.79 cv
247.544 187.79 241.778 192.147 241.778 197.521 cv
241.778 202.895 247.544 207.252 254.657 207.252 cv
261.77 207.252 267.536 202.895 267.536 197.521 cv
@
267.536 197.521 mo
267.536 192.147 261.77 187.79 254.657 187.79 cv
247.544 187.79 241.778 192.147 241.778 197.521 cv
241.778 202.895 247.544 207.252 254.657 207.252 cv
261.77 207.252 267.536 202.895 267.536 197.521 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
248.651 193.858 mo
(recover)
[1.33423 1.77896 1.77896 2.0034 2.0034 1.77896 0 ]xsh
246.405 198.437 mo
(work=112)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.00342 2.00339 0 ]xsh
247.128 203.016 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.00342 1.33423 2.2598 0 ]xsh
264.674 177.487 mo
263.529 180.063 261.526 183.497 260.095 186.646 cv
@
259.808 185.501 mo
259.236 188.363 li
261.239 186.073 li
cp
@
259.808 185.501 mo
259.236 188.363 li
261.239 186.073 li
f
298.445 197.521 mo
298.445 192.147 292.679 187.79 285.566 187.79 cv
278.454 187.79 272.687 192.147 272.687 197.521 cv
272.687 202.895 278.454 207.252 285.566 207.252 cv
292.679 207.252 298.445 202.895 298.445 197.521 cv
@
298.445 197.521 mo
298.445 192.147 292.679 187.79 285.566 187.79 cv
278.454 187.79 272.687 192.147 272.687 197.521 cv
272.687 202.895 278.454 207.252 285.566 207.252 cv
292.679 207.252 298.445 202.895 298.445 197.521 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
279.56 193.858 mo
(recover)
[1.33423 1.77896 1.77896 2.00339 2.00342 1.77896 0 ]xsh
277.314 198.437 mo
(work=112)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 2.00339 0 ]xsh
278.037 203.016 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
270.97 177.487 mo
272.687 180.349 275.263 183.497 277.553 186.646 cv
@
276.98 186.932 mo
279.27 188.935 li
278.125 186.073 li
cp
@
276.98 186.932 mo
279.27 188.935 li
278.125 186.073 li
f
273.26 222.707 mo
273.26 219.862 266.212 217.555 257.519 217.555 cv
248.825 217.555 241.778 219.862 241.778 222.707 cv
241.778 225.552 248.825 227.858 257.519 227.858 cv
266.212 227.858 273.26 225.552 273.26 222.707 cv
@
273.26 222.707 mo
273.26 219.862 266.212 217.555 257.519 217.555 cv
248.825 217.555 241.778 219.862 241.778 222.707 cv
241.778 225.552 248.825 227.858 257.519 227.858 cv
266.212 227.858 273.26 225.552 273.26 222.707 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
244.777 223.623 mo
(roundrobin\(1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.00339 1.11389 2.00342 1.33423 2.00339 
1.00171 2.00342 0 ]xsh
273.26 244.458 mo
273.26 241.613 266.212 239.306 257.519 239.306 cv
248.825 239.306 241.778 241.613 241.778 244.458 cv
241.778 247.303 248.825 249.61 257.519 249.61 cv
266.212 249.61 273.26 247.303 273.26 244.458 cv
@
273.26 244.458 mo
273.26 241.613 266.212 239.306 257.519 239.306 cv
248.825 239.306 241.778 241.613 241.778 244.458 cv
241.778 247.303 248.825 249.61 257.519 249.61 cv
266.212 249.61 273.26 247.303 273.26 244.458 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
244.777 245.374 mo
(roundrobin\(2,2\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.00339 1.11389 2.00342 1.33423 2.00339 
1.00171 2.00342 0 ]xsh
257.519 227.858 mo
257.519 230.434 257.519 233.582 257.519 236.444 cv
@
256.946 236.444 mo
257.519 239.306 li
258.377 236.444 li
cp
@
256.946 236.444 mo
257.519 239.306 li
258.377 236.444 li
f
255.802 207.252 mo
256.088 209.828 256.374 212.404 256.66 214.979 cv
@
255.802 214.693 mo
256.946 217.555 li
257.233 214.693 li
cp
@
255.802 214.693 mo
256.946 217.555 li
257.233 214.693 li
f
277.267 204.962 mo
273.26 208.683 268.681 212.69 264.96 216.124 cv
@
264.674 215.552 mo
262.957 217.841 li
265.532 216.41 li
cp
@
264.674 215.552 mo
262.957 217.841 li
265.532 216.41 li
f
256.946 269.644 mo
256.946 264.269 251.437 259.913 244.64 259.913 cv
237.843 259.913 232.333 264.269 232.333 269.644 cv
232.333 275.018 237.843 279.374 244.64 279.374 cv
251.437 279.374 256.946 275.018 256.946 269.644 cv
@
256.946 269.644 mo
256.946 264.269 251.437 259.913 244.64 259.913 cv
237.843 259.913 232.333 264.269 232.333 269.644 cv
232.333 275.018 237.843 279.374 244.64 279.374 cv
251.437 279.374 256.946 275.018 256.946 269.644 cv
.271 .467 .702 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
238.407 265.98 mo
(Identity)
[1.33423 2.0034 1.77896 2.0034 1.11389 1.11389 1.11389 0 ]xsh
237.389 270.559 mo
(work=12)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
237.111 275.138 mo
(I/O: 1->1)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
254.943 249.61 mo
253.512 252.185 251.795 255.62 250.364 258.768 cv
@
250.078 257.623 mo
249.505 260.485 li
251.509 258.196 li
cp
@
250.078 257.623 mo
249.505 260.485 li
251.509 258.196 li
f
286.711 269.644 mo
286.711 264.269 281.201 259.913 274.405 259.913 cv
267.608 259.913 262.098 264.269 262.098 269.644 cv
262.098 275.018 267.608 279.374 274.405 279.374 cv
281.201 279.374 286.711 275.018 286.711 269.644 cv
@
286.711 269.644 mo
286.711 264.269 281.201 259.913 274.405 259.913 cv
267.608 259.913 262.098 264.269 262.098 269.644 cv
262.098 275.018 267.608 279.374 274.405 279.374 cv
281.201 279.374 286.711 275.018 286.711 269.644 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
268.064 265.98 mo
(reversal)
[1.33423 1.77896 2.00342 1.77893 1.33426 1.55859 1.77896 0 ]xsh
267.154 270.559 mo
(work=26)
[2.89285 2.00339 1.33423 2.00342 2.25983 2.00339 0 ]xsh
266.876 275.138 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
260.953 249.61 mo
262.67 252.472 264.96 255.62 266.963 258.768 cv
@
266.391 259.054 mo
268.681 261.058 li
267.536 258.196 li
cp
@
266.391 259.054 mo
268.681 261.058 li
267.536 258.196 li
f
263.815 294.829 mo
263.815 291.984 256.768 289.678 248.074 289.678 cv
239.381 289.678 232.333 291.984 232.333 294.829 cv
232.333 297.674 239.381 299.981 248.074 299.981 cv
256.768 299.981 263.815 297.674 263.815 294.829 cv
@
263.815 294.829 mo
263.815 291.984 256.768 289.678 248.074 289.678 cv
239.381 289.678 232.333 291.984 232.333 294.829 cv
232.333 297.674 239.381 299.981 248.074 299.981 cv
256.768 299.981 263.815 297.674 263.815 294.829 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
235.333 295.745 mo
(roundrobin\(2,2\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.00339 
1.00171 2.00339 0 ]xsh
242.923 299.695 mo
240.061 302.27 236.626 305.705 233.478 308.567 cv
@
232.906 307.994 mo
231.475 310.57 li
234.05 309.139 li
cp
@
232.906 307.994 mo
231.475 310.57 li
234.05 309.139 li
f
246.071 279.374 mo
246.357 281.95 246.643 284.526 246.929 287.102 cv
@
246.071 287.102 mo
247.502 289.678 li
247.502 286.816 li
cp
@
246.071 287.102 mo
247.502 289.678 li
247.502 286.816 li
f
266.391 277.085 mo
262.67 280.805 258.664 284.812 254.943 288.247 cv
@
254.657 287.388 mo
253.226 289.964 li
255.802 288.533 li
cp
@
254.657 287.388 mo
253.226 289.964 li
255.802 288.533 li
f
356.258 95.634 mo
356.258 90.2599 348.441 85.903 338.8 85.903 cv
329.158 85.903 321.341 90.2599 321.341 95.634 cv
321.341 101.008 329.158 105.365 338.8 105.365 cv
348.441 105.365 356.258 101.008 356.258 95.634 cv
@
356.258 95.634 mo
356.258 90.2599 348.441 85.903 338.8 85.903 cv
329.158 85.903 321.341 90.2599 321.341 95.634 cv
321.341 101.008 329.158 105.365 338.8 105.365 cv
348.441 105.365 356.258 101.008 356.258 95.634 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
326.222 91.9709 mo
(TwoPointIDCT)
[2.44812 2.89285 2.00339 2.22778 2.00342 1.11389 2.00339 1.11389 1.33423 2.89285 2.67252 0 
]xsh
331.549 96.5502 mo
(work=80)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 0 ]xsh
331.271 101.129 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
338.8 75.6 mo
338.8 77.603 338.8 80.465 338.8 83.041 cv
@
338.227 83.041 mo
338.8 85.903 li
339.658 83.041 li
cp
@
338.227 83.041 mo
338.8 85.903 li
339.658 83.041 li
f
388.312 95.634 mo
388.312 90.2599 382.802 85.903 376.006 85.903 cv
369.209 85.903 363.699 90.2599 363.699 95.634 cv
363.699 101.008 369.209 105.365 376.006 105.365 cv
382.802 105.365 388.312 101.008 388.312 95.634 cv
@
388.312 95.634 mo
388.312 90.2599 382.802 85.903 376.006 85.903 cv
369.209 85.903 363.699 90.2599 363.699 95.634 cv
363.699 101.008 369.209 105.365 376.006 105.365 cv
382.802 105.365 388.312 101.008 388.312 95.634 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
371.33 91.9709 mo
(inmix)
[1.11389 2.00339 3.11731 1.11389 0 ]xsh
368.756 96.5502 mo
(work=25)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 0 ]xsh
368.477 101.129 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
351.392 73.597 mo
356.258 75.028 361.409 77.0309 364.558 79.0339 cv
366.275 80.179 367.992 82.183 369.423 84.186 cv
@
368.851 84.758 mo
371.14 86.762 li
370.282 83.9 li
cp
@
368.851 84.758 mo
371.14 86.762 li
370.282 83.9 li
f
371.999 150.584 mo
371.999 147.739 364.951 145.433 356.258 145.433 cv
347.564 145.433 340.517 147.739 340.517 150.584 cv
340.517 153.43 347.564 155.736 356.258 155.736 cv
364.951 155.736 371.999 153.43 371.999 150.584 cv
@
371.999 150.584 mo
371.999 147.739 364.951 145.433 356.258 145.433 cv
347.564 145.433 340.517 147.739 340.517 150.584 cv
340.517 153.43 347.564 155.736 356.258 155.736 cv
364.951 155.736 371.999 153.43 371.999 150.584 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
343.516 151.5 mo
(roundrobin\(1,1\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
371.999 172.336 mo
371.999 169.49 364.951 167.184 356.258 167.184 cv
347.564 167.184 340.517 169.49 340.517 172.336 cv
340.517 175.181 347.564 177.487 356.258 177.487 cv
364.951 177.487 371.999 175.181 371.999 172.336 cv
@
371.999 172.336 mo
371.999 169.49 364.951 167.184 356.258 167.184 cv
347.564 167.184 340.517 169.49 340.517 172.336 cv
340.517 175.181 347.564 177.487 356.258 177.487 cv
364.951 177.487 371.999 175.181 371.999 172.336 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
343.516 173.251 mo
(roundrobin\(2,2\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
356.258 155.736 mo
356.258 158.312 356.258 161.46 356.258 164.322 cv
@
355.685 164.322 mo
356.258 167.184 li
357.116 164.322 li
cp
@
355.685 164.322 mo
356.258 167.184 li
357.116 164.322 li
f
341.948 105.365 mo
345.382 116.24 350.82 133.699 353.968 143.429 cv
@
353.11 142.857 mo
354.541 145.433 li
354.541 142.571 li
cp
@
353.11 142.857 mo
354.541 145.433 li
354.541 142.571 li
f
396.04 125.399 mo
396.04 120.025 388.223 115.668 378.581 115.668 cv
368.94 115.668 361.123 120.025 361.123 125.399 cv
361.123 130.773 368.94 135.13 378.581 135.13 cv
388.223 135.13 396.04 130.773 396.04 125.399 cv
@
396.04 125.399 mo
396.04 120.025 388.223 115.668 378.581 115.668 cv
368.94 115.668 361.123 120.025 361.123 125.399 cv
361.123 130.773 368.94 135.13 378.581 135.13 cv
388.223 135.13 396.04 130.773 396.04 125.399 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
366.004 121.735 mo
(TwoPointIDCT)
[2.44812 2.89285 2.00339 2.22778 2.00342 1.11389 2.00339 1.11389 1.33423 2.89285 2.67252 0 
]xsh
371.331 126.314 mo
(work=80)
[2.89285 2.00339 1.33423 2.00342 2.25983 2.00339 0 ]xsh
371.053 130.893 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
376.864 105.365 mo
377.15 107.941 377.437 110.803 377.437 113.665 cv
@
376.578 112.806 mo
377.723 115.668 li
378.009 112.806 li
cp
@
376.578 112.806 mo
377.723 115.668 li
378.009 112.806 li
f
370.854 134.271 mo
367.992 137.419 364.844 140.567 362.268 143.716 cv
@
361.982 143.143 mo
360.551 145.719 li
362.84 144.002 li
cp
@
361.982 143.143 mo
360.551 145.719 li
362.84 144.002 li
f
356.544 197.521 mo
356.544 192.147 350.778 187.79 343.665 187.79 cv
336.552 187.79 330.786 192.147 330.786 197.521 cv
330.786 202.895 336.552 207.252 343.665 207.252 cv
350.778 207.252 356.544 202.895 356.544 197.521 cv
@
356.544 197.521 mo
356.544 192.147 350.778 187.79 343.665 187.79 cv
336.552 187.79 330.786 192.147 330.786 197.521 cv
330.786 202.895 336.552 207.252 343.665 207.252 cv
350.778 207.252 356.544 202.895 356.544 197.521 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
337.659 193.858 mo
(recover)
[1.33423 1.77896 1.77896 2.00339 2.00342 1.77896 0 ]xsh
335.413 198.437 mo
(work=112)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 2.00339 0 ]xsh
336.136 203.016 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
353.682 177.487 mo
352.537 180.063 350.534 183.497 349.103 186.646 cv
@
348.817 185.501 mo
348.244 188.363 li
350.248 186.073 li
cp
@
348.817 185.501 mo
348.244 188.363 li
350.248 186.073 li
f
387.454 197.521 mo
387.454 192.147 381.687 187.79 374.575 187.79 cv
367.462 187.79 361.696 192.147 361.696 197.521 cv
361.696 202.895 367.462 207.252 374.575 207.252 cv
381.687 207.252 387.454 202.895 387.454 197.521 cv
@
387.454 197.521 mo
387.454 192.147 381.687 187.79 374.575 187.79 cv
367.462 187.79 361.696 192.147 361.696 197.521 cv
361.696 202.895 367.462 207.252 374.575 207.252 cv
381.687 207.252 387.454 202.895 387.454 197.521 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
368.568 193.858 mo
(recover)
[1.33423 1.77896 1.77896 2.00339 2.00342 1.77896 0 ]xsh
366.322 198.437 mo
(work=112)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 2.00339 0 ]xsh
367.045 203.016 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
359.978 177.487 mo
361.696 180.349 364.271 183.497 366.561 186.646 cv
@
365.989 186.932 mo
368.278 188.935 li
367.133 186.073 li
cp
@
365.989 186.932 mo
368.278 188.935 li
367.133 186.073 li
f
362.268 222.707 mo
362.268 219.862 355.22 217.555 346.527 217.555 cv
337.833 217.555 330.786 219.862 330.786 222.707 cv
330.786 225.552 337.833 227.858 346.527 227.858 cv
355.22 227.858 362.268 225.552 362.268 222.707 cv
@
362.268 222.707 mo
362.268 219.862 355.22 217.555 346.527 217.555 cv
337.833 217.555 330.786 219.862 330.786 222.707 cv
330.786 225.552 337.833 227.858 346.527 227.858 cv
355.22 227.858 362.268 225.552 362.268 222.707 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
333.785 223.623 mo
(roundrobin\(1,1\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
362.268 244.458 mo
362.268 241.613 355.22 239.306 346.527 239.306 cv
337.833 239.306 330.786 241.613 330.786 244.458 cv
330.786 247.303 337.833 249.61 346.527 249.61 cv
355.22 249.61 362.268 247.303 362.268 244.458 cv
@
362.268 244.458 mo
362.268 241.613 355.22 239.306 346.527 239.306 cv
337.833 239.306 330.786 241.613 330.786 244.458 cv
330.786 247.303 337.833 249.61 346.527 249.61 cv
355.22 249.61 362.268 247.303 362.268 244.458 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
333.785 245.374 mo
(roundrobin\(2,2\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
346.527 227.858 mo
346.527 230.434 346.527 233.582 346.527 236.444 cv
@
345.955 236.444 mo
346.527 239.306 li
347.386 236.444 li
cp
@
345.955 236.444 mo
346.527 239.306 li
347.386 236.444 li
f
344.81 207.252 mo
345.096 209.828 345.382 212.404 345.668 214.979 cv
@
344.81 214.693 mo
345.955 217.555 li
346.241 214.693 li
cp
@
344.81 214.693 mo
345.955 217.555 li
346.241 214.693 li
f
366.275 204.962 mo
362.268 208.683 357.689 212.69 353.968 216.124 cv
@
353.682 215.552 mo
351.965 217.841 li
354.541 216.41 li
cp
@
353.682 215.552 mo
351.965 217.841 li
354.541 216.41 li
f
345.955 269.644 mo
345.955 264.269 340.445 259.913 333.648 259.913 cv
326.851 259.913 321.341 264.269 321.341 269.644 cv
321.341 275.018 326.851 279.374 333.648 279.374 cv
340.445 279.374 345.955 275.018 345.955 269.644 cv
@
345.955 269.644 mo
345.955 264.269 340.445 259.913 333.648 259.913 cv
326.851 259.913 321.341 264.269 321.341 269.644 cv
321.341 275.018 326.851 279.374 333.648 279.374 cv
340.445 279.374 345.955 275.018 345.955 269.644 cv
.271 .467 .702 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
327.415 265.98 mo
(Identity)
[1.33423 2.00342 1.77896 2.00339 1.11389 1.11389 1.11389 0 ]xsh
326.397 270.559 mo
(work=12)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 0 ]xsh
326.119 275.138 mo
(I/O: 1->1)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
343.951 249.61 mo
342.52 252.185 340.803 255.62 339.372 258.768 cv
@
339.086 257.623 mo
338.513 260.485 li
340.517 258.196 li
cp
@
339.086 257.623 mo
338.513 260.485 li
340.517 258.196 li
f
375.719 269.644 mo
375.719 264.269 370.21 259.913 363.413 259.913 cv
356.616 259.913 351.106 264.269 351.106 269.644 cv
351.106 275.018 356.616 279.374 363.413 279.374 cv
370.21 279.374 375.719 275.018 375.719 269.644 cv
@
375.719 269.644 mo
375.719 264.269 370.21 259.913 363.413 259.913 cv
356.616 259.913 351.106 264.269 351.106 269.644 cv
351.106 275.018 356.616 279.374 363.413 279.374 cv
370.21 279.374 375.719 275.018 375.719 269.644 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
357.072 265.98 mo
(reversal)
[1.33423 1.77896 2.00342 1.77893 1.33426 1.55859 1.77896 0 ]xsh
356.162 270.559 mo
(work=26)
[2.89285 2.00339 1.33423 2.00342 2.25983 2.00339 0 ]xsh
355.884 275.138 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
349.961 249.61 mo
351.679 252.472 353.968 255.62 355.972 258.768 cv
@
355.399 259.054 mo
357.689 261.058 li
356.544 258.196 li
cp
@
355.399 259.054 mo
357.689 261.058 li
356.544 258.196 li
f
352.823 294.829 mo
352.823 291.984 345.776 289.678 337.082 289.678 cv
328.389 289.678 321.341 291.984 321.341 294.829 cv
321.341 297.674 328.389 299.981 337.082 299.981 cv
345.776 299.981 352.823 297.674 352.823 294.829 cv
@
352.823 294.829 mo
352.823 291.984 345.776 289.678 337.082 289.678 cv
328.389 289.678 321.341 291.984 321.341 294.829 cv
321.341 297.674 328.389 299.981 337.082 299.981 cv
345.776 299.981 352.823 297.674 352.823 294.829 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
324.341 295.745 mo
(roundrobin\(2,2\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
323.917 297.691 mo
313.614 299.981 299.876 302.843 291.004 304.56 cv
278.698 306.85 258.95 310.284 244.64 312.574 cv
@
245.498 311.715 mo
242.636 312.86 li
245.498 313.146 li
cp
@
245.498 311.715 mo
242.636 312.86 li
245.498 313.146 li
f
335.079 279.374 mo
335.365 281.95 335.651 284.526 335.938 287.102 cv
@
335.079 287.102 mo
336.51 289.678 li
336.51 286.816 li
cp
@
335.079 287.102 mo
336.51 289.678 li
336.51 286.816 li
f
355.399 277.085 mo
351.679 280.805 347.672 284.812 343.951 288.247 cv
@
343.665 287.388 mo
342.234 289.964 li
344.81 288.533 li
cp
@
343.665 287.388 mo
342.234 289.964 li
344.81 288.533 li
f
127.298 363.517 mo
127.298 360.672 120.25 358.366 111.557 358.366 cv
102.863 358.366 95.8158 360.672 95.8158 363.517 cv
95.8158 366.362 102.863 368.669 111.557 368.669 cv
120.25 368.669 127.298 366.362 127.298 363.517 cv
@
127.298 363.517 mo
127.298 360.672 120.25 358.366 111.557 358.366 cv
102.863 358.366 95.8158 360.672 95.8158 363.517 cv
95.8158 366.362 102.863 368.669 111.557 368.669 cv
120.25 368.669 127.298 366.362 127.298 363.517 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
98.8152 364.433 mo
(roundrobin\(1,1\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11388 2.0034 1.33424 2.0034 
1.00169 2.0034 0 ]xsh
207.72 337.759 mo
188.258 338.618 157.349 340.621 139.032 344.628 cv
133.022 346.059 125.008 352.069 118.998 356.935 cv
@
118.712 356.362 mo
116.995 358.652 li
119.57 357.221 li
cp
@
118.712 356.362 mo
116.995 358.652 li
119.57 357.221 li
f
216.306 363.517 mo
216.306 360.672 209.258 358.366 200.565 358.366 cv
191.871 358.366 184.824 360.672 184.824 363.517 cv
184.824 366.362 191.871 368.669 200.565 368.669 cv
209.258 368.669 216.306 366.362 216.306 363.517 cv
@
216.306 363.517 mo
216.306 360.672 209.258 358.366 200.565 358.366 cv
191.871 358.366 184.824 360.672 184.824 363.517 cv
184.824 366.362 191.871 368.669 200.565 368.669 cv
209.258 368.669 216.306 366.362 216.306 363.517 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
187.823 364.433 mo
(roundrobin\(1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.00339 1.33424 2.0034 
1.00169 2.0034 0 ]xsh
221.458 342.338 mo
217.165 346.345 211.441 352.069 207.148 356.648 cv
@
206.861 356.076 mo
205.43 358.652 li
207.72 356.935 li
cp
@
206.861 356.076 mo
205.43 358.652 li
207.72 356.935 li
f
265.532 363.517 mo
265.532 360.672 258.485 358.366 249.791 358.366 cv
241.098 358.366 234.05 360.672 234.05 363.517 cv
234.05 366.362 241.098 368.669 249.791 368.669 cv
258.485 368.669 265.532 366.362 265.532 363.517 cv
@
265.532 363.517 mo
265.532 360.672 258.485 358.366 249.791 358.366 cv
241.098 358.366 234.05 360.672 234.05 363.517 cv
234.05 366.362 241.098 368.669 249.791 368.669 cv
258.485 368.669 265.532 366.362 265.532 363.517 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
237.05 364.433 mo
(roundrobin\(1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.00339 
1.00171 2.00342 0 ]xsh
230.902 342.338 mo
234.623 346.345 239.774 352.069 243.781 356.648 cv
@
243.209 356.935 mo
245.498 358.652 li
244.067 356.076 li
cp
@
243.209 356.935 mo
245.498 358.652 li
244.067 356.076 li
f
354.541 363.517 mo
354.541 360.672 347.493 358.366 338.8 358.366 cv
330.106 358.366 323.059 360.672 323.059 363.517 cv
323.059 366.362 330.106 368.669 338.8 368.669 cv
347.493 368.669 354.541 366.362 354.541 363.517 cv
@
354.541 363.517 mo
354.541 360.672 347.493 358.366 338.8 358.366 cv
330.106 358.366 323.059 360.672 323.059 363.517 cv
323.059 366.362 330.106 368.669 338.8 368.669 cv
347.493 368.669 354.541 366.362 354.541 363.517 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
326.058 364.433 mo
(roundrobin\(1,1\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
244.926 337.759 mo
265.246 338.618 297.301 340.335 315.904 344.628 cv
321.341 345.773 327.924 351.783 332.789 356.648 cv
@
332.217 356.935 mo
334.507 358.652 li
333.076 356.076 li
cp
@
332.217 356.935 mo
334.507 358.652 li
333.076 356.076 li
f
244.926 608.504 mo
244.926 605.659 236.597 603.353 226.323 603.353 cv
216.049 603.353 207.72 605.659 207.72 608.504 cv
207.72 611.35 216.049 613.656 226.323 613.656 cv
236.597 613.656 244.926 611.35 244.926 608.504 cv
@
244.926 608.504 mo
244.926 605.659 236.597 603.353 226.323 603.353 cv
216.049 603.353 207.72 605.659 207.72 608.504 cv
207.72 611.35 216.049 613.656 226.323 613.656 cv
236.597 613.656 244.926 611.35 244.926 608.504 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
210.576 609.42 mo
(roundrobin\(1,1,1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 1.00169 2.0034 1.00171 2.0034 0 ]xsh
239.202 633.69 mo
239.202 628.316 233.436 623.959 226.323 623.959 cv
219.21 623.959 213.444 628.316 213.444 633.69 cv
213.444 639.064 219.21 643.421 226.323 643.421 cv
233.436 643.421 239.202 639.064 239.202 633.69 cv
@
239.202 633.69 mo
239.202 628.316 233.436 623.959 226.323 623.959 cv
219.21 623.959 213.444 628.316 213.444 633.69 cv
213.444 639.064 219.21 643.421 226.323 643.421 cv
233.436 643.421 239.202 639.064 239.202 633.69 cv
.843 .18 .157 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
222.983 630.027 mo
(sink)
[1.55861 1.11389 2.0034 0 ]xsh
218.071 634.606 mo
(work=128)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 2.0034 0 ]xsh
218.794 639.185 mo
(I/O: 8->0)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
226.323 613.656 mo
226.323 615.659 226.323 618.521 226.323 621.097 cv
@
225.751 621.097 mo
226.323 623.959 li
227.182 621.097 li
cp
@
225.751 621.097 mo
226.323 623.959 li
227.182 621.097 li
f
89.2332 388.703 mo
89.2332 383.329 81.4168 378.972 71.775 378.972 cv
62.1331 378.972 54.3168 383.329 54.3168 388.703 cv
54.3168 394.077 62.1331 398.434 71.775 398.434 cv
81.4168 398.434 89.2332 394.077 89.2332 388.703 cv
@
89.2332 388.703 mo
89.2332 383.329 81.4168 378.972 71.775 378.972 cv
62.1331 378.972 54.3168 383.329 54.3168 388.703 cv
54.3168 394.077 62.1331 398.434 71.775 398.434 cv
81.4168 398.434 89.2332 394.077 89.2332 388.703 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
59.1977 385.039 mo
(TwoPointIDCT)
[2.44812 2.89285 2.0034 2.22778 2.0034 1.11389 2.0034 1.11389 1.33424 2.89285 2.6725 0 
]xsh
64.5247 389.618 mo
(work=80)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 0 ]xsh
64.2463 394.197 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
100.681 367.238 mo
96.6744 368.669 92.6676 370.386 89.8056 372.103 cv
87.516 373.82 84.654 376.11 81.792 378.686 cv
@
81.792 377.541 mo
80.361 380.117 li
82.9368 378.686 li
cp
@
81.792 377.541 mo
80.361 380.117 li
82.9368 378.686 li
f
123.863 388.703 mo
123.863 383.329 118.354 378.972 111.557 378.972 cv
104.76 378.972 99.2502 383.329 99.2502 388.703 cv
99.2502 394.077 104.76 398.434 111.557 398.434 cv
118.354 398.434 123.863 394.077 123.863 388.703 cv
@
123.863 388.703 mo
123.863 383.329 118.354 378.972 111.557 378.972 cv
104.76 378.972 99.2502 383.329 99.2502 388.703 cv
99.2502 394.077 104.76 398.434 111.557 398.434 cv
118.354 398.434 123.863 394.077 123.863 388.703 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
106.881 385.039 mo
(inmix)
[1.11389 2.0034 3.11729 1.11389 0 ]xsh
104.307 389.618 mo
(work=25)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 0 ]xsh
104.028 394.197 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
111.557 368.669 mo
111.557 370.672 111.557 373.534 111.557 376.11 cv
@
110.984 376.11 mo
111.557 378.972 li
112.415 376.11 li
cp
@
110.984 376.11 mo
111.557 378.972 li
112.415 376.11 li
f
113.56 443.653 mo
113.56 440.808 106.513 438.502 97.8192 438.502 cv
89.1257 438.502 82.0782 440.808 82.0782 443.653 cv
82.0782 446.498 89.1257 448.805 97.8192 448.805 cv
106.513 448.805 113.56 446.498 113.56 443.653 cv
@
113.56 443.653 mo
113.56 440.808 106.513 438.502 97.8192 438.502 cv
89.1257 438.502 82.0782 440.808 82.0782 443.653 cv
82.0782 446.498 89.1257 448.805 97.8192 448.805 cv
106.513 448.805 113.56 446.498 113.56 443.653 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
85.0776 444.569 mo
(roundrobin\(1,1\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11389 2.0034 1.33424 2.0034 
1.0017 2.0034 0 ]xsh
113.56 465.404 mo
113.56 462.559 106.513 460.253 97.8192 460.253 cv
89.1257 460.253 82.0782 462.559 82.0782 465.404 cv
82.0782 468.25 89.1257 470.556 97.8192 470.556 cv
106.513 470.556 113.56 468.25 113.56 465.404 cv
@
113.56 465.404 mo
113.56 462.559 106.513 460.253 97.8192 460.253 cv
89.1257 460.253 82.0782 462.559 82.0782 465.404 cv
82.0782 468.25 89.1257 470.556 97.8192 470.556 cv
106.513 470.556 113.56 468.25 113.56 465.404 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
85.0776 466.32 mo
(roundrobin\(2,2\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11389 2.0034 1.33424 2.0034 
1.0017 2.0034 0 ]xsh
97.8192 448.805 mo
97.8192 451.381 97.8192 454.529 97.8192 457.391 cv
@
97.2468 457.391 mo
97.8192 460.253 li
98.6778 457.391 li
cp
@
97.2468 457.391 mo
97.8192 460.253 li
98.6778 457.391 li
f
75.7818 398.147 mo
79.7886 407.592 85.7988 421.902 89.8056 430.488 cv
90.6642 432.205 91.5228 433.922 92.6676 435.926 cv
@
92.0952 436.498 mo
94.3848 438.502 li
93.5262 435.64 li
cp
@
92.0952 436.498 mo
94.3848 438.502 li
93.5262 435.64 li
f
129.015 418.468 mo
129.015 413.093 121.199 408.737 111.557 408.737 cv
101.915 408.737 94.0986 413.093 94.0986 418.468 cv
94.0986 423.842 101.915 428.198 111.557 428.198 cv
121.199 428.198 129.015 423.842 129.015 418.468 cv
@
129.015 418.468 mo
129.015 413.093 121.199 408.737 111.557 408.737 cv
101.915 408.737 94.0986 413.093 94.0986 418.468 cv
94.0986 423.842 101.915 428.198 111.557 428.198 cv
121.199 428.198 129.015 423.842 129.015 418.468 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
98.9795 414.804 mo
(TwoPointIDCT)
[2.44813 2.89285 2.0034 2.22778 2.0034 1.11389 2.0034 1.11389 1.33424 2.89285 2.6725 0 
]xsh
104.307 419.383 mo
(work=80)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 0 ]xsh
104.028 423.962 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
111.557 398.434 mo
111.557 400.723 111.557 403.299 111.557 405.875 cv
@
110.984 405.875 mo
111.557 408.737 li
112.415 405.875 li
cp
@
110.984 405.875 mo
111.557 408.737 li
112.415 405.875 li
f
106.405 427.912 mo
104.974 430.488 103.257 433.35 101.826 436.212 cv
@
101.254 435.64 mo
100.681 438.502 li
102.685 436.212 li
cp
@
101.254 435.64 mo
100.681 438.502 li
102.685 436.212 li
f
95.2434 490.59 mo
95.2434 485.216 89.4772 480.859 82.3644 480.859 cv
75.2515 480.859 69.4854 485.216 69.4854 490.59 cv
69.4854 495.964 75.2515 500.321 82.3644 500.321 cv
89.4772 500.321 95.2434 495.964 95.2434 490.59 cv
@
95.2434 490.59 mo
95.2434 485.216 89.4772 480.859 82.3644 480.859 cv
75.2515 480.859 69.4854 485.216 69.4854 490.59 cv
69.4854 495.964 75.2515 500.321 82.3644 500.321 cv
89.4772 500.321 95.2434 495.964 95.2434 490.59 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
76.3582 486.927 mo
(recover)
[1.33424 1.77896 1.77895 2.0034 2.0034 1.77895 0 ]xsh
74.1124 491.506 mo
(work=112)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 2.0034 0 ]xsh
74.8356 496.085 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
94.671 470.556 mo
93.24 473.132 91.2366 476.28 89.2332 479.142 cv
@
88.6608 478.856 mo
87.8022 481.718 li
89.8056 479.428 li
cp
@
88.6608 478.856 mo
87.8022 481.718 li
89.8056 479.428 li
f
126.153 490.59 mo
126.153 485.216 120.387 480.859 113.274 480.859 cv
106.161 480.859 100.395 485.216 100.395 490.59 cv
100.395 495.964 106.161 500.321 113.274 500.321 cv
120.387 500.321 126.153 495.964 126.153 490.59 cv
@
126.153 490.59 mo
126.153 485.216 120.387 480.859 113.274 480.859 cv
106.161 480.859 100.395 485.216 100.395 490.59 cv
100.395 495.964 106.161 500.321 113.274 500.321 cv
120.387 500.321 126.153 495.964 126.153 490.59 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
107.268 486.927 mo
(recover)
[1.33424 1.77896 1.77895 2.0034 2.0034 1.77895 0 ]xsh
105.022 491.506 mo
(work=112)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 2.0034 0 ]xsh
105.745 496.085 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
100.967 470.556 mo
102.398 473.132 104.402 476.28 106.405 479.142 cv
@
105.833 479.428 mo
107.836 481.718 li
106.978 478.856 li
cp
@
105.833 479.428 mo
107.836 481.718 li
106.978 478.856 li
f
117.281 515.776 mo
117.281 512.93 110.233 510.624 101.54 510.624 cv
92.8463 510.624 85.7988 512.93 85.7988 515.776 cv
85.7988 518.621 92.8463 520.927 101.54 520.927 cv
110.233 520.927 117.281 518.621 117.281 515.776 cv
@
117.281 515.776 mo
117.281 512.93 110.233 510.624 101.54 510.624 cv
92.8463 510.624 85.7988 512.93 85.7988 515.776 cv
85.7988 518.621 92.8463 520.927 101.54 520.927 cv
110.233 520.927 117.281 518.621 117.281 515.776 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
88.7982 516.691 mo
(roundrobin\(1,1\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11388 2.0034 1.33424 2.0034 
1.00169 2.0034 0 ]xsh
117.281 537.527 mo
117.281 534.682 110.233 532.375 101.54 532.375 cv
92.8463 532.375 85.7988 534.682 85.7988 537.527 cv
85.7988 540.372 92.8463 542.678 101.54 542.678 cv
110.233 542.678 117.281 540.372 117.281 537.527 cv
@
117.281 537.527 mo
117.281 534.682 110.233 532.375 101.54 532.375 cv
92.8463 532.375 85.7988 534.682 85.7988 537.527 cv
85.7988 540.372 92.8463 542.678 101.54 542.678 cv
110.233 542.678 117.281 540.372 117.281 537.527 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
88.7982 538.443 mo
(roundrobin\(2,2\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11388 2.0034 1.33424 2.0034 
1.00169 2.0034 0 ]xsh
101.54 520.927 mo
101.54 523.503 101.54 526.651 101.54 529.513 cv
@
100.967 529.513 mo
101.54 532.375 li
102.398 529.513 li
cp
@
100.967 529.513 mo
101.54 532.375 li
102.398 529.513 li
f
88.947 499.176 mo
91.2366 502.038 93.8124 505.759 96.102 508.621 cv
@
95.5296 508.907 mo
97.8192 510.624 li
96.3882 508.048 li
cp
@
95.5296 508.907 mo
97.8192 510.624 li
96.3882 508.048 li
f
108.981 499.748 mo
107.55 502.61 106.119 505.472 104.974 508.334 cv
@
104.402 507.762 mo
103.829 510.624 li
105.833 508.334 li
cp
@
104.402 507.762 mo
103.829 510.624 li
105.833 508.334 li
f
101.54 562.712 mo
101.54 557.338 96.0299 552.982 89.2332 552.982 cv
82.4365 552.982 76.9266 557.338 76.9266 562.712 cv
76.9266 568.087 82.4365 572.443 89.2332 572.443 cv
96.0299 572.443 101.54 568.087 101.54 562.712 cv
@
101.54 562.712 mo
101.54 557.338 96.0299 552.982 89.2332 552.982 cv
82.4365 552.982 76.9266 557.338 76.9266 562.712 cv
76.9266 568.087 82.4365 572.443 89.2332 572.443 cv
96.0299 572.443 101.54 568.087 101.54 562.712 cv
.271 .467 .702 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
83.0006 559.049 mo
(Identity)
[1.33424 2.0034 1.77896 2.0034 1.11389 1.11388 1.11389 0 ]xsh
81.9828 563.628 mo
(work=12)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 0 ]xsh
81.7044 568.207 mo
(I/O: 1->1)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
98.964 542.678 mo
97.8192 545.254 96.102 548.689 94.671 551.837 cv
@
94.3848 550.692 mo
93.8124 553.554 li
95.8158 551.264 li
cp
@
94.3848 550.692 mo
93.8124 553.554 li
95.8158 551.264 li
f
131.305 562.712 mo
131.305 557.338 125.795 552.982 118.998 552.982 cv
112.201 552.982 106.691 557.338 106.691 562.712 cv
106.691 568.087 112.201 572.443 118.998 572.443 cv
125.795 572.443 131.305 568.087 131.305 562.712 cv
@
131.305 562.712 mo
131.305 557.338 125.795 552.982 118.998 552.982 cv
112.201 552.982 106.691 557.338 106.691 562.712 cv
106.691 568.087 112.201 572.443 118.998 572.443 cv
125.795 572.443 131.305 568.087 131.305 562.712 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
112.657 559.049 mo
(reversal)
[1.33424 1.77896 2.0034 1.77896 1.33424 1.55861 1.77896 0 ]xsh
111.747 563.628 mo
(work=26)
[2.89285 2.0034 1.33424 2.0034 2.25981 2.0034 0 ]xsh
111.469 568.207 mo
(I/O: 2->2)
[1.33424 1.11389 2.89285 1.11389 1.0017 2.0034 1.33424 2.25982 0 ]xsh
104.974 542.678 mo
106.691 545.54 109.267 548.689 111.271 551.837 cv
@
110.698 552.123 mo
112.988 554.126 li
111.843 551.264 li
cp
@
110.698 552.123 mo
112.988 554.126 li
111.843 551.264 li
f
131.305 587.898 mo
131.305 585.053 124.257 582.746 115.564 582.746 cv
106.87 582.746 99.8226 585.053 99.8226 587.898 cv
99.8226 590.743 106.87 593.05 115.564 593.05 cv
124.257 593.05 131.305 590.743 131.305 587.898 cv
@
131.305 587.898 mo
131.305 585.053 124.257 582.746 115.564 582.746 cv
106.87 582.746 99.8226 585.053 99.8226 587.898 cv
99.8226 590.743 106.87 593.05 115.564 593.05 cv
124.257 593.05 131.305 590.743 131.305 587.898 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
102.822 588.814 mo
(roundrobin\(2,2\))
[1.33424 2.0034 2.0034 2.0034 2.0034 1.33424 2.0034 2.0034 1.11389 2.0034 1.33424 2.0034 
1.0017 2.0034 0 ]xsh
128.729 590.76 mo
139.032 593.05 152.77 595.912 161.642 597.629 cv
174.235 599.918 193.982 603.353 208.292 605.642 cv
@
207.434 606.215 mo
210.296 605.929 li
207.434 604.784 li
cp
@
207.434 606.215 mo
210.296 605.929 li
207.434 604.784 li
f
97.2468 570.154 mo
100.967 573.874 104.974 577.881 108.695 581.315 cv
@
107.836 581.602 mo
110.412 583.033 li
108.981 580.457 li
cp
@
107.836 581.602 mo
110.412 583.033 li
108.981 580.457 li
f
117.567 572.443 mo
117.281 575.019 116.995 577.595 116.708 580.171 cv
@
116.136 579.884 mo
116.136 582.746 li
117.567 580.171 li
cp
@
116.136 579.884 mo
116.136 582.746 li
117.567 580.171 li
f
178.241 388.703 mo
178.241 383.329 170.425 378.972 160.783 378.972 cv
151.141 378.972 143.325 383.329 143.325 388.703 cv
143.325 394.077 151.141 398.434 160.783 398.434 cv
170.425 398.434 178.241 394.077 178.241 388.703 cv
@
178.241 388.703 mo
178.241 383.329 170.425 378.972 160.783 378.972 cv
151.141 378.972 143.325 383.329 143.325 388.703 cv
143.325 394.077 151.141 398.434 160.783 398.434 cv
170.425 398.434 178.241 394.077 178.241 388.703 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
148.206 385.039 mo
(TwoPointIDCT)
[2.44812 2.89285 2.0034 2.22778 2.0034 1.11388 2.0034 1.11389 1.33423 2.89285 2.67252 0 
]xsh
153.533 389.618 mo
(work=80)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
153.255 394.197 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
189.689 367.238 mo
185.683 368.669 181.676 370.386 178.814 372.103 cv
176.524 373.82 173.662 376.11 170.8 378.686 cv
@
170.8 377.541 mo
169.369 380.117 li
171.945 378.686 li
cp
@
170.8 377.541 mo
169.369 380.117 li
171.945 378.686 li
f
212.872 388.703 mo
212.872 383.329 207.362 378.972 200.565 378.972 cv
193.768 378.972 188.258 383.329 188.258 388.703 cv
188.258 394.077 193.768 398.434 200.565 398.434 cv
207.362 398.434 212.872 394.077 212.872 388.703 cv
@
212.872 388.703 mo
212.872 383.329 207.362 378.972 200.565 378.972 cv
193.768 378.972 188.258 383.329 188.258 388.703 cv
188.258 394.077 193.768 398.434 200.565 398.434 cv
207.362 398.434 212.872 394.077 212.872 388.703 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
195.889 385.039 mo
(inmix)
[1.11389 2.0034 3.11728 1.11389 0 ]xsh
193.315 389.618 mo
(work=25)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
193.036 394.197 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
200.565 368.669 mo
200.565 370.672 200.565 373.534 200.565 376.11 cv
@
199.993 376.11 mo
200.565 378.972 li
201.424 376.11 li
cp
@
199.993 376.11 mo
200.565 378.972 li
201.424 376.11 li
f
190.262 443.653 mo
190.262 440.808 183.214 438.502 174.521 438.502 cv
165.827 438.502 158.78 440.808 158.78 443.653 cv
158.78 446.498 165.827 448.805 174.521 448.805 cv
183.214 448.805 190.262 446.498 190.262 443.653 cv
@
190.262 443.653 mo
190.262 440.808 183.214 438.502 174.521 438.502 cv
165.827 438.502 158.78 440.808 158.78 443.653 cv
158.78 446.498 165.827 448.805 174.521 448.805 cv
183.214 448.805 190.262 446.498 190.262 443.653 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
161.779 444.569 mo
(roundrobin\(1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 0 ]xsh
190.262 465.404 mo
190.262 462.559 183.214 460.253 174.521 460.253 cv
165.827 460.253 158.78 462.559 158.78 465.404 cv
158.78 468.25 165.827 470.556 174.521 470.556 cv
183.214 470.556 190.262 468.25 190.262 465.404 cv
@
190.262 465.404 mo
190.262 462.559 183.214 460.253 174.521 460.253 cv
165.827 460.253 158.78 462.559 158.78 465.404 cv
158.78 468.25 165.827 470.556 174.521 470.556 cv
183.214 470.556 190.262 468.25 190.262 465.404 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
161.779 466.32 mo
(roundrobin\(2,2\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 0 ]xsh
174.521 448.805 mo
174.521 451.381 174.521 454.529 174.521 457.391 cv
@
173.948 457.391 mo
174.521 460.253 li
175.379 457.391 li
cp
@
173.948 457.391 mo
174.521 460.253 li
175.379 457.391 li
f
163.073 398.434 mo
165.649 409.309 170.228 426.767 172.517 436.498 cv
@
171.659 435.926 mo
173.09 438.502 li
173.09 435.64 li
cp
@
171.659 435.926 mo
173.09 438.502 li
173.09 435.64 li
f
218.023 418.468 mo
218.023 413.093 210.207 408.737 200.565 408.737 cv
190.923 408.737 183.107 413.093 183.107 418.468 cv
183.107 423.842 190.923 428.198 200.565 428.198 cv
210.207 428.198 218.023 423.842 218.023 418.468 cv
@
218.023 418.468 mo
218.023 413.093 210.207 408.737 200.565 408.737 cv
190.923 408.737 183.107 413.093 183.107 418.468 cv
183.107 423.842 190.923 428.198 200.565 428.198 cv
210.207 428.198 218.023 423.842 218.023 418.468 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
187.988 414.804 mo
(TwoPointIDCT)
[2.44812 2.89285 2.0034 2.22778 2.0034 1.11388 2.0034 1.11389 1.33423 2.89285 2.67252 0 
]xsh
193.315 419.383 mo
(work=80)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
193.037 423.962 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
200.565 398.434 mo
200.565 400.723 200.565 403.299 200.565 405.875 cv
@
199.993 405.875 mo
200.565 408.737 li
201.424 405.875 li
cp
@
199.993 405.875 mo
200.565 408.737 li
201.424 405.875 li
f
191.693 427.054 mo
188.258 430.202 184.538 433.922 181.39 437.071 cv
@
181.103 436.212 mo
179.672 438.788 li
182.248 437.357 li
cp
@
181.103 436.212 mo
179.672 438.788 li
182.248 437.357 li
f
176.81 490.59 mo
176.81 485.216 171.044 480.859 163.931 480.859 cv
156.819 480.859 151.052 485.216 151.052 490.59 cv
151.052 495.964 156.819 500.321 163.931 500.321 cv
171.044 500.321 176.81 495.964 176.81 490.59 cv
@
176.81 490.59 mo
176.81 485.216 171.044 480.859 163.931 480.859 cv
156.819 480.859 151.052 485.216 151.052 490.59 cv
151.052 495.964 156.819 500.321 163.931 500.321 cv
171.044 500.321 176.81 495.964 176.81 490.59 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
157.925 486.927 mo
(recover)
[1.33423 1.77896 1.77896 2.0034 2.0034 1.77896 0 ]xsh
155.679 491.506 mo
(work=112)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 2.0034 0 ]xsh
156.402 496.085 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
172.231 470.556 mo
171.086 473.132 169.942 476.566 168.511 479.714 cv
@
168.224 478.57 mo
167.652 481.432 li
169.655 479.142 li
cp
@
168.224 478.57 mo
167.652 481.432 li
169.655 479.142 li
f
207.72 490.59 mo
207.72 485.216 201.954 480.859 194.841 480.859 cv
187.728 480.859 181.962 485.216 181.962 490.59 cv
181.962 495.964 187.728 500.321 194.841 500.321 cv
201.954 500.321 207.72 495.964 207.72 490.59 cv
@
207.72 490.59 mo
207.72 485.216 201.954 480.859 194.841 480.859 cv
187.728 480.859 181.962 485.216 181.962 490.59 cv
181.962 495.964 187.728 500.321 194.841 500.321 cv
201.954 500.321 207.72 495.964 207.72 490.59 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
188.835 486.927 mo
(recover)
[1.33423 1.77896 1.77896 2.0034 2.0034 1.77896 0 ]xsh
186.589 491.506 mo
(work=112)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 2.0034 0 ]xsh
187.312 496.085 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
178.528 470.556 mo
180.817 473.418 183.679 476.852 186.255 480.001 cv
@
185.683 480.287 mo
187.972 482.29 li
186.827 479.428 li
cp
@
185.683 480.287 mo
187.972 482.29 li
186.827 479.428 li
f
202.568 515.776 mo
202.568 512.93 195.521 510.624 186.827 510.624 cv
178.134 510.624 171.086 512.93 171.086 515.776 cv
171.086 518.621 178.134 520.927 186.827 520.927 cv
195.521 520.927 202.568 518.621 202.568 515.776 cv
@
202.568 515.776 mo
202.568 512.93 195.521 510.624 186.827 510.624 cv
178.134 510.624 171.086 512.93 171.086 515.776 cv
171.086 518.621 178.134 520.927 186.827 520.927 cv
195.521 520.927 202.568 518.621 202.568 515.776 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
174.086 516.691 mo
(roundrobin\(1,1\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.00339 1.33424 2.0034 
1.00169 2.0034 0 ]xsh
202.568 537.527 mo
202.568 534.682 195.521 532.375 186.827 532.375 cv
178.134 532.375 171.086 534.682 171.086 537.527 cv
171.086 540.372 178.134 542.678 186.827 542.678 cv
195.521 542.678 202.568 540.372 202.568 537.527 cv
@
202.568 537.527 mo
202.568 534.682 195.521 532.375 186.827 532.375 cv
178.134 532.375 171.086 534.682 171.086 537.527 cv
171.086 540.372 178.134 542.678 186.827 542.678 cv
195.521 542.678 202.568 540.372 202.568 537.527 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
174.086 538.443 mo
(roundrobin\(2,2\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.00339 1.33424 2.0034 
1.00169 2.0034 0 ]xsh
186.827 520.927 mo
186.827 523.503 186.827 526.651 186.827 529.513 cv
@
186.255 529.513 mo
186.827 532.375 li
187.686 529.513 li
cp
@
186.255 529.513 mo
186.827 532.375 li
187.686 529.513 li
f
171.373 498.604 mo
174.235 502.038 177.669 505.759 180.531 508.907 cv
@
179.959 509.193 mo
182.248 510.91 li
180.817 508.334 li
cp
@
179.959 509.193 mo
182.248 510.91 li
180.817 508.334 li
f
191.693 500.035 mo
190.834 502.61 189.976 505.472 189.117 508.048 cv
@
188.545 507.762 mo
188.258 510.624 li
189.976 508.048 li
cp
@
188.545 507.762 mo
188.258 510.624 li
189.976 508.048 li
f
190.548 562.712 mo
190.548 557.338 185.038 552.982 178.241 552.982 cv
171.445 552.982 165.935 557.338 165.935 562.712 cv
165.935 568.087 171.445 572.443 178.241 572.443 cv
185.038 572.443 190.548 568.087 190.548 562.712 cv
@
190.548 562.712 mo
190.548 557.338 185.038 552.982 178.241 552.982 cv
171.445 552.982 165.935 557.338 165.935 562.712 cv
165.935 568.087 171.445 572.443 178.241 572.443 cv
185.038 572.443 190.548 568.087 190.548 562.712 cv
.271 .467 .702 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
172.009 559.049 mo
(Identity)
[1.33423 2.0034 1.77896 2.0034 1.11389 1.11389 1.11389 0 ]xsh
170.991 563.628 mo
(work=12)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
170.713 568.207 mo
(I/O: 1->1)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
185.11 542.678 mo
184.252 544.968 183.393 547.83 182.534 550.692 cv
@
181.962 550.406 mo
181.39 553.268 li
183.107 550.978 li
cp
@
181.962 550.406 mo
181.39 553.268 li
183.107 550.978 li
f
220.313 562.712 mo
220.313 557.338 214.803 552.982 208.006 552.982 cv
201.209 552.982 195.7 557.338 195.7 562.712 cv
195.7 568.087 201.209 572.443 208.006 572.443 cv
214.803 572.443 220.313 568.087 220.313 562.712 cv
@
220.313 562.712 mo
220.313 557.338 214.803 552.982 208.006 552.982 cv
201.209 552.982 195.7 557.338 195.7 562.712 cv
195.7 568.087 201.209 572.443 208.006 572.443 cv
214.803 572.443 220.313 568.087 220.313 562.712 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
201.665 559.049 mo
(reversal)
[1.33423 1.77896 2.0034 1.77896 1.33423 1.55862 1.77896 0 ]xsh
200.755 563.628 mo
(work=26)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
200.477 568.207 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
191.12 542.392 mo
193.41 545.254 196.272 548.975 199.134 552.409 cv
@
198.562 552.982 mo
201.137 554.413 li
199.706 551.837 li
cp
@
198.562 552.982 mo
201.137 554.413 li
199.706 551.837 li
f
220.313 587.898 mo
220.313 585.053 213.265 582.746 204.572 582.746 cv
195.878 582.746 188.831 585.053 188.831 587.898 cv
188.831 590.743 195.878 593.05 204.572 593.05 cv
213.265 593.05 220.313 590.743 220.313 587.898 cv
@
220.313 587.898 mo
220.313 585.053 213.265 582.746 204.572 582.746 cv
195.878 582.746 188.831 585.053 188.831 587.898 cv
188.831 590.743 195.878 593.05 204.572 593.05 cv
213.265 593.05 220.313 590.743 220.313 587.898 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
191.83 588.814 mo
(roundrobin\(2,2\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.0034 
1.00169 2.0034 0 ]xsh
209.723 592.763 mo
212.585 595.339 216.02 598.774 219.168 601.636 cv
@
218.596 602.208 mo
221.171 603.639 li
219.74 601.063 li
cp
@
218.596 602.208 mo
221.171 603.639 li
219.74 601.063 li
f
186.255 570.154 mo
189.976 573.874 193.982 577.881 197.703 581.315 cv
@
196.844 581.602 mo
199.42 583.033 li
197.989 580.457 li
cp
@
196.844 581.602 mo
199.42 583.033 li
197.989 580.457 li
f
206.575 572.443 mo
206.289 575.019 206.003 577.595 205.717 580.171 cv
@
205.144 579.884 mo
205.144 582.746 li
206.575 580.171 li
cp
@
205.144 579.884 mo
205.144 582.746 li
206.575 580.171 li
f
267.25 388.703 mo
267.25 383.329 259.433 378.972 249.791 378.972 cv
240.15 378.972 232.333 383.329 232.333 388.703 cv
232.333 394.077 240.15 398.434 249.791 398.434 cv
259.433 398.434 267.25 394.077 267.25 388.703 cv
@
267.25 388.703 mo
267.25 383.329 259.433 378.972 249.791 378.972 cv
240.15 378.972 232.333 383.329 232.333 388.703 cv
232.333 394.077 240.15 398.434 249.791 398.434 cv
259.433 398.434 267.25 394.077 267.25 388.703 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
237.214 385.039 mo
(TwoPointIDCT)
[2.44812 2.89285 2.0034 2.22778 2.00339 1.11389 2.0034 1.11389 1.33424 2.89285 2.67249 0 
]xsh
242.541 389.618 mo
(work=80)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
242.263 394.197 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
249.791 368.669 mo
249.791 370.672 249.791 373.534 249.791 376.11 cv
@
249.219 376.11 mo
249.791 378.972 li
250.65 376.11 li
cp
@
249.219 376.11 mo
249.791 378.972 li
250.65 376.11 li
f
299.304 388.703 mo
299.304 383.329 293.794 378.972 286.997 378.972 cv
280.201 378.972 274.691 383.329 274.691 388.703 cv
274.691 394.077 280.201 398.434 286.997 398.434 cv
293.794 398.434 299.304 394.077 299.304 388.703 cv
@
299.304 388.703 mo
299.304 383.329 293.794 378.972 286.997 378.972 cv
280.201 378.972 274.691 383.329 274.691 388.703 cv
274.691 394.077 280.201 398.434 286.997 398.434 cv
293.794 398.434 299.304 394.077 299.304 388.703 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
282.321 385.039 mo
(inmix)
[1.11389 2.00339 3.11731 1.11389 0 ]xsh
279.747 389.618 mo
(work=25)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 0 ]xsh
279.468 394.197 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
262.384 366.665 mo
267.25 368.096 272.401 370.1 275.549 372.103 cv
277.267 373.248 278.984 375.251 280.415 377.255 cv
@
279.842 377.827 mo
282.132 379.831 li
281.273 376.969 li
cp
@
279.842 377.827 mo
282.132 379.831 li
281.273 376.969 li
f
282.991 443.653 mo
282.991 440.808 275.943 438.502 267.25 438.502 cv
258.556 438.502 251.509 440.808 251.509 443.653 cv
251.509 446.498 258.556 448.805 267.25 448.805 cv
275.943 448.805 282.991 446.498 282.991 443.653 cv
@
282.991 443.653 mo
282.991 440.808 275.943 438.502 267.25 438.502 cv
258.556 438.502 251.509 440.808 251.509 443.653 cv
251.509 446.498 258.556 448.805 267.25 448.805 cv
275.943 448.805 282.991 446.498 282.991 443.653 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
254.508 444.569 mo
(roundrobin\(1,1\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
282.991 465.404 mo
282.991 462.559 275.943 460.253 267.25 460.253 cv
258.556 460.253 251.509 462.559 251.509 465.404 cv
251.509 468.25 258.556 470.556 267.25 470.556 cv
275.943 470.556 282.991 468.25 282.991 465.404 cv
@
282.991 465.404 mo
282.991 462.559 275.943 460.253 267.25 460.253 cv
258.556 460.253 251.509 462.559 251.509 465.404 cv
251.509 468.25 258.556 470.556 267.25 470.556 cv
275.943 470.556 282.991 468.25 282.991 465.404 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
254.508 466.32 mo
(roundrobin\(2,2\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
267.25 448.805 mo
267.25 451.381 267.25 454.529 267.25 457.391 cv
@
266.677 457.391 mo
267.25 460.253 li
268.108 457.391 li
cp
@
266.677 457.391 mo
267.25 460.253 li
268.108 457.391 li
f
252.94 398.434 mo
256.374 409.309 261.812 426.767 264.96 436.498 cv
@
264.101 435.926 mo
265.532 438.502 li
265.532 435.64 li
cp
@
264.101 435.926 mo
265.532 438.502 li
265.532 435.64 li
f
307.031 418.468 mo
307.031 413.093 299.215 408.737 289.573 408.737 cv
279.931 408.737 272.115 413.093 272.115 418.468 cv
272.115 423.842 279.931 428.198 289.573 428.198 cv
299.215 428.198 307.031 423.842 307.031 418.468 cv
@
307.031 418.468 mo
307.031 413.093 299.215 408.737 289.573 408.737 cv
279.931 408.737 272.115 413.093 272.115 418.468 cv
272.115 423.842 279.931 428.198 289.573 428.198 cv
299.215 428.198 307.031 423.842 307.031 418.468 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
276.996 414.804 mo
(TwoPointIDCT)
[2.44812 2.89285 2.00339 2.22778 2.00342 1.11389 2.00339 1.11389 1.33423 2.89285 2.67252 0 
]xsh
282.323 419.383 mo
(work=80)
[2.89285 2.00339 1.33423 2.00342 2.25983 2.00339 0 ]xsh
282.045 423.962 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
287.856 398.434 mo
288.142 400.723 288.142 403.299 288.428 405.875 cv
@
287.856 405.875 mo
288.715 408.737 li
289.001 405.875 li
cp
@
287.856 405.875 mo
288.715 408.737 li
289.001 405.875 li
f
281.846 427.34 mo
278.984 430.488 275.836 433.636 273.26 436.784 cv
@
272.974 436.212 mo
271.543 438.788 li
273.832 437.071 li
cp
@
272.974 436.212 mo
271.543 438.788 li
273.832 437.071 li
f
267.536 490.59 mo
267.536 485.216 261.77 480.859 254.657 480.859 cv
247.544 480.859 241.778 485.216 241.778 490.59 cv
241.778 495.964 247.544 500.321 254.657 500.321 cv
261.77 500.321 267.536 495.964 267.536 490.59 cv
@
267.536 490.59 mo
267.536 485.216 261.77 480.859 254.657 480.859 cv
247.544 480.859 241.778 485.216 241.778 490.59 cv
241.778 495.964 247.544 500.321 254.657 500.321 cv
261.77 500.321 267.536 495.964 267.536 490.59 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
248.651 486.927 mo
(recover)
[1.33423 1.77896 1.77896 2.0034 2.0034 1.77896 0 ]xsh
246.405 491.506 mo
(work=112)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.00342 2.00339 0 ]xsh
247.128 496.085 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.00342 1.33423 2.2598 0 ]xsh
264.674 470.556 mo
263.529 473.132 261.526 476.566 260.095 479.714 cv
@
259.808 478.57 mo
259.236 481.432 li
261.239 479.142 li
cp
@
259.808 478.57 mo
259.236 481.432 li
261.239 479.142 li
f
298.445 490.59 mo
298.445 485.216 292.679 480.859 285.566 480.859 cv
278.454 480.859 272.687 485.216 272.687 490.59 cv
272.687 495.964 278.454 500.321 285.566 500.321 cv
292.679 500.321 298.445 495.964 298.445 490.59 cv
@
298.445 490.59 mo
298.445 485.216 292.679 480.859 285.566 480.859 cv
278.454 480.859 272.687 485.216 272.687 490.59 cv
272.687 495.964 278.454 500.321 285.566 500.321 cv
292.679 500.321 298.445 495.964 298.445 490.59 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
279.56 486.927 mo
(recover)
[1.33423 1.77896 1.77896 2.00339 2.00342 1.77896 0 ]xsh
277.314 491.506 mo
(work=112)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 2.00339 0 ]xsh
278.037 496.085 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
270.97 470.556 mo
272.687 473.418 275.263 476.566 277.553 479.714 cv
@
276.98 480.001 mo
279.27 482.004 li
278.125 479.142 li
cp
@
276.98 480.001 mo
279.27 482.004 li
278.125 479.142 li
f
279.842 515.776 mo
279.842 512.93 272.795 510.624 264.101 510.624 cv
255.408 510.624 248.36 512.93 248.36 515.776 cv
248.36 518.621 255.408 520.927 264.101 520.927 cv
272.795 520.927 279.842 518.621 279.842 515.776 cv
@
279.842 515.776 mo
279.842 512.93 272.795 510.624 264.101 510.624 cv
255.408 510.624 248.36 512.93 248.36 515.776 cv
248.36 518.621 255.408 520.927 264.101 520.927 cv
272.795 520.927 279.842 518.621 279.842 515.776 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
251.36 516.691 mo
(roundrobin\(1,1\))
[1.33423 2.0034 2.00342 2.00339 2.00339 1.33426 2.00339 2.00339 1.11389 2.00342 1.33423 2.00339 
1.00171 2.00342 0 ]xsh
279.842 537.527 mo
279.842 534.682 272.795 532.375 264.101 532.375 cv
255.408 532.375 248.36 534.682 248.36 537.527 cv
248.36 540.372 255.408 542.678 264.101 542.678 cv
272.795 542.678 279.842 540.372 279.842 537.527 cv
@
279.842 537.527 mo
279.842 534.682 272.795 532.375 264.101 532.375 cv
255.408 532.375 248.36 534.682 248.36 537.527 cv
248.36 540.372 255.408 542.678 264.101 542.678 cv
272.795 542.678 279.842 540.372 279.842 537.527 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
251.36 538.443 mo
(roundrobin\(2,2\))
[1.33423 2.0034 2.00342 2.00339 2.00339 1.33426 2.00339 2.00339 1.11389 2.00342 1.33423 2.00339 
1.00171 2.00342 0 ]xsh
264.101 520.927 mo
264.101 523.503 264.101 526.651 264.101 529.513 cv
@
263.529 529.513 mo
264.101 532.375 li
264.96 529.513 li
cp
@
263.529 529.513 mo
264.101 532.375 li
264.96 529.513 li
f
258.091 500.035 mo
259.236 502.61 260.095 505.472 261.239 508.048 cv
@
260.381 508.048 mo
262.098 510.624 li
261.812 507.762 li
cp
@
260.381 508.048 mo
262.098 510.624 li
261.812 507.762 li
f
278.411 498.89 mo
275.836 502.038 272.687 505.759 270.112 508.907 cv
@
269.825 508.334 mo
268.394 510.91 li
270.684 509.193 li
cp
@
269.825 508.334 mo
268.394 510.91 li
270.684 509.193 li
f
256.946 562.712 mo
256.946 557.338 251.437 552.982 244.64 552.982 cv
237.843 552.982 232.333 557.338 232.333 562.712 cv
232.333 568.087 237.843 572.443 244.64 572.443 cv
251.437 572.443 256.946 568.087 256.946 562.712 cv
@
256.946 562.712 mo
256.946 557.338 251.437 552.982 244.64 552.982 cv
237.843 552.982 232.333 557.338 232.333 562.712 cv
232.333 568.087 237.843 572.443 244.64 572.443 cv
251.437 572.443 256.946 568.087 256.946 562.712 cv
.271 .467 .702 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
238.407 559.049 mo
(Identity)
[1.33423 2.0034 1.77896 2.0034 1.11389 1.11389 1.11389 0 ]xsh
237.389 563.628 mo
(work=12)
[2.89285 2.0034 1.33423 2.0034 2.25981 2.0034 0 ]xsh
237.111 568.207 mo
(I/O: 1->1)
[1.33423 1.11389 2.89285 1.11389 1.00169 2.0034 1.33424 2.25981 0 ]xsh
260.095 542.678 mo
257.805 545.54 254.943 549.261 252.367 552.982 cv
@
252.367 551.837 mo
251.222 554.413 li
253.512 552.695 li
cp
@
252.367 551.837 mo
251.222 554.413 li
253.512 552.695 li
f
286.711 562.712 mo
286.711 557.338 281.201 552.982 274.405 552.982 cv
267.608 552.982 262.098 557.338 262.098 562.712 cv
262.098 568.087 267.608 572.443 274.405 572.443 cv
281.201 572.443 286.711 568.087 286.711 562.712 cv
@
286.711 562.712 mo
286.711 557.338 281.201 552.982 274.405 552.982 cv
267.608 552.982 262.098 557.338 262.098 562.712 cv
262.098 568.087 267.608 572.443 274.405 572.443 cv
281.201 572.443 286.711 568.087 286.711 562.712 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
268.064 559.049 mo
(reversal)
[1.33423 1.77896 2.00342 1.77893 1.33426 1.55859 1.77896 0 ]xsh
267.154 563.628 mo
(work=26)
[2.89285 2.00339 1.33423 2.00342 2.25983 2.00339 0 ]xsh
266.876 568.207 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
266.105 542.678 mo
267.25 544.968 268.394 547.83 269.539 550.692 cv
@
268.967 551.264 mo
270.684 553.554 li
270.398 550.692 li
cp
@
268.967 551.264 mo
270.684 553.554 li
270.398 550.692 li
f
263.815 587.898 mo
263.815 585.053 256.768 582.746 248.074 582.746 cv
239.381 582.746 232.333 585.053 232.333 587.898 cv
232.333 590.743 239.381 593.05 248.074 593.05 cv
256.768 593.05 263.815 590.743 263.815 587.898 cv
@
263.815 587.898 mo
263.815 585.053 256.768 582.746 248.074 582.746 cv
239.381 582.746 232.333 585.053 232.333 587.898 cv
232.333 590.743 239.381 593.05 248.074 593.05 cv
256.768 593.05 263.815 590.743 263.815 587.898 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
235.333 588.814 mo
(roundrobin\(2,2\))
[1.33423 2.0034 2.0034 2.0034 2.0034 1.33423 2.0034 2.0034 1.11389 2.0034 1.33423 2.00339 
1.00171 2.00339 0 ]xsh
242.923 592.763 mo
240.061 595.339 236.626 598.774 233.478 601.636 cv
@
232.906 601.063 mo
231.475 603.639 li
234.05 602.208 li
cp
@
232.906 601.063 mo
231.475 603.639 li
234.05 602.208 li
f
246.071 572.443 mo
246.357 575.019 246.643 577.595 246.929 580.171 cv
@
246.071 580.171 mo
247.502 582.746 li
247.502 579.884 li
cp
@
246.071 580.171 mo
247.502 582.746 li
247.502 579.884 li
f
266.391 570.154 mo
262.67 573.874 258.664 577.881 254.943 581.315 cv
@
254.657 580.457 mo
253.226 583.033 li
255.802 581.602 li
cp
@
254.657 580.457 mo
253.226 583.033 li
255.802 581.602 li
f
356.258 388.703 mo
356.258 383.329 348.441 378.972 338.8 378.972 cv
329.158 378.972 321.341 383.329 321.341 388.703 cv
321.341 394.077 329.158 398.434 338.8 398.434 cv
348.441 398.434 356.258 394.077 356.258 388.703 cv
@
356.258 388.703 mo
356.258 383.329 348.441 378.972 338.8 378.972 cv
329.158 378.972 321.341 383.329 321.341 388.703 cv
321.341 394.077 329.158 398.434 338.8 398.434 cv
348.441 398.434 356.258 394.077 356.258 388.703 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
326.222 385.039 mo
(TwoPointIDCT)
[2.44812 2.89285 2.00339 2.22778 2.00342 1.11389 2.00339 1.11389 1.33423 2.89285 2.67252 0 
]xsh
331.549 389.618 mo
(work=80)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 0 ]xsh
331.271 394.197 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
338.8 368.669 mo
338.8 370.672 338.8 373.534 338.8 376.11 cv
@
338.227 376.11 mo
338.8 378.972 li
339.658 376.11 li
cp
@
338.227 376.11 mo
338.8 378.972 li
339.658 376.11 li
f
388.312 388.703 mo
388.312 383.329 382.802 378.972 376.006 378.972 cv
369.209 378.972 363.699 383.329 363.699 388.703 cv
363.699 394.077 369.209 398.434 376.006 398.434 cv
382.802 398.434 388.312 394.077 388.312 388.703 cv
@
388.312 388.703 mo
388.312 383.329 382.802 378.972 376.006 378.972 cv
369.209 378.972 363.699 383.329 363.699 388.703 cv
363.699 394.077 369.209 398.434 376.006 398.434 cv
382.802 398.434 388.312 394.077 388.312 388.703 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
371.33 385.039 mo
(inmix)
[1.11389 2.00339 3.11731 1.11389 0 ]xsh
368.756 389.618 mo
(work=25)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 0 ]xsh
368.477 394.197 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
351.392 366.665 mo
356.258 368.096 361.409 370.1 364.558 372.103 cv
366.275 373.248 367.992 375.251 369.423 377.255 cv
@
368.851 377.827 mo
371.14 379.831 li
370.282 376.969 li
cp
@
368.851 377.827 mo
371.14 379.831 li
370.282 376.969 li
f
371.999 443.653 mo
371.999 440.808 364.951 438.502 356.258 438.502 cv
347.564 438.502 340.517 440.808 340.517 443.653 cv
340.517 446.498 347.564 448.805 356.258 448.805 cv
364.951 448.805 371.999 446.498 371.999 443.653 cv
@
371.999 443.653 mo
371.999 440.808 364.951 438.502 356.258 438.502 cv
347.564 438.502 340.517 440.808 340.517 443.653 cv
340.517 446.498 347.564 448.805 356.258 448.805 cv
364.951 448.805 371.999 446.498 371.999 443.653 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
343.516 444.569 mo
(roundrobin\(1,1\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
371.999 465.404 mo
371.999 462.559 364.951 460.253 356.258 460.253 cv
347.564 460.253 340.517 462.559 340.517 465.404 cv
340.517 468.25 347.564 470.556 356.258 470.556 cv
364.951 470.556 371.999 468.25 371.999 465.404 cv
@
371.999 465.404 mo
371.999 462.559 364.951 460.253 356.258 460.253 cv
347.564 460.253 340.517 462.559 340.517 465.404 cv
340.517 468.25 347.564 470.556 356.258 470.556 cv
364.951 470.556 371.999 468.25 371.999 465.404 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
343.516 466.32 mo
(roundrobin\(2,2\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
356.258 448.805 mo
356.258 451.381 356.258 454.529 356.258 457.391 cv
@
355.685 457.391 mo
356.258 460.253 li
357.116 457.391 li
cp
@
355.685 457.391 mo
356.258 460.253 li
357.116 457.391 li
f
341.948 398.434 mo
345.382 409.309 350.82 426.767 353.968 436.498 cv
@
353.11 435.926 mo
354.541 438.502 li
354.541 435.64 li
cp
@
353.11 435.926 mo
354.541 438.502 li
354.541 435.64 li
f
396.04 418.468 mo
396.04 413.093 388.223 408.737 378.581 408.737 cv
368.94 408.737 361.123 413.093 361.123 418.468 cv
361.123 423.842 368.94 428.198 378.581 428.198 cv
388.223 428.198 396.04 423.842 396.04 418.468 cv
@
396.04 418.468 mo
396.04 413.093 388.223 408.737 378.581 408.737 cv
368.94 408.737 361.123 413.093 361.123 418.468 cv
361.123 423.842 368.94 428.198 378.581 428.198 cv
388.223 428.198 396.04 423.842 396.04 418.468 cv
.992 .863 .565 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
366.004 414.804 mo
(TwoPointIDCT)
[2.44812 2.89285 2.00339 2.22778 2.00342 1.11389 2.00339 1.11389 1.33423 2.89285 2.67252 0 
]xsh
371.331 419.383 mo
(work=80)
[2.89285 2.00339 1.33423 2.00342 2.25983 2.00339 0 ]xsh
371.053 423.962 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
376.864 398.434 mo
377.15 401.009 377.437 403.871 377.437 406.733 cv
@
376.578 405.875 mo
377.723 408.737 li
378.009 405.875 li
cp
@
376.578 405.875 mo
377.723 408.737 li
378.009 405.875 li
f
370.854 427.34 mo
367.992 430.488 364.844 433.636 362.268 436.784 cv
@
361.982 436.212 mo
360.551 438.788 li
362.84 437.071 li
cp
@
361.982 436.212 mo
360.551 438.788 li
362.84 437.071 li
f
356.544 490.59 mo
356.544 485.216 350.778 480.859 343.665 480.859 cv
336.552 480.859 330.786 485.216 330.786 490.59 cv
330.786 495.964 336.552 500.321 343.665 500.321 cv
350.778 500.321 356.544 495.964 356.544 490.59 cv
@
356.544 490.59 mo
356.544 485.216 350.778 480.859 343.665 480.859 cv
336.552 480.859 330.786 485.216 330.786 490.59 cv
330.786 495.964 336.552 500.321 343.665 500.321 cv
350.778 500.321 356.544 495.964 356.544 490.59 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
337.659 486.927 mo
(recover)
[1.33423 1.77896 1.77896 2.00339 2.00342 1.77896 0 ]xsh
335.413 491.506 mo
(work=112)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 2.00339 0 ]xsh
336.136 496.085 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
353.682 470.556 mo
352.537 473.132 350.534 476.566 349.103 479.714 cv
@
348.817 478.57 mo
348.244 481.432 li
350.248 479.142 li
cp
@
348.817 478.57 mo
348.244 481.432 li
350.248 479.142 li
f
387.454 490.59 mo
387.454 485.216 381.687 480.859 374.575 480.859 cv
367.462 480.859 361.696 485.216 361.696 490.59 cv
361.696 495.964 367.462 500.321 374.575 500.321 cv
381.687 500.321 387.454 495.964 387.454 490.59 cv
@
387.454 490.59 mo
387.454 485.216 381.687 480.859 374.575 480.859 cv
367.462 480.859 361.696 485.216 361.696 490.59 cv
361.696 495.964 367.462 500.321 374.575 500.321 cv
381.687 500.321 387.454 495.964 387.454 490.59 cv
.953 .424 .267 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
368.568 486.927 mo
(recover)
[1.33423 1.77896 1.77896 2.00339 2.00342 1.77896 0 ]xsh
366.322 491.506 mo
(work=112)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 2.00339 0 ]xsh
367.045 496.085 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
359.978 470.556 mo
361.696 473.418 364.271 476.566 366.561 479.714 cv
@
365.989 480.001 mo
368.278 482.004 li
367.133 479.142 li
cp
@
365.989 480.001 mo
368.278 482.004 li
367.133 479.142 li
f
368.851 515.776 mo
368.851 512.93 361.803 510.624 353.11 510.624 cv
344.416 510.624 337.369 512.93 337.369 515.776 cv
337.369 518.621 344.416 520.927 353.11 520.927 cv
361.803 520.927 368.851 518.621 368.851 515.776 cv
@
368.851 515.776 mo
368.851 512.93 361.803 510.624 353.11 510.624 cv
344.416 510.624 337.369 512.93 337.369 515.776 cv
337.369 518.621 344.416 520.927 353.11 520.927 cv
361.803 520.927 368.851 518.621 368.851 515.776 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
340.368 516.691 mo
(roundrobin\(1,1\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
368.851 537.527 mo
368.851 534.682 361.803 532.375 353.11 532.375 cv
344.416 532.375 337.369 534.682 337.369 537.527 cv
337.369 540.372 344.416 542.678 353.11 542.678 cv
361.803 542.678 368.851 540.372 368.851 537.527 cv
@
368.851 537.527 mo
368.851 534.682 361.803 532.375 353.11 532.375 cv
344.416 532.375 337.369 534.682 337.369 537.527 cv
337.369 540.372 344.416 542.678 353.11 542.678 cv
361.803 542.678 368.851 540.372 368.851 537.527 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
340.368 538.443 mo
(roundrobin\(2,2\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
353.11 520.927 mo
353.11 523.503 353.11 526.651 353.11 529.513 cv
@
352.537 529.513 mo
353.11 532.375 li
353.968 529.513 li
cp
@
352.537 529.513 mo
353.11 532.375 li
353.968 529.513 li
f
347.099 500.035 mo
348.244 502.61 349.103 505.472 350.248 508.048 cv
@
349.389 508.048 mo
351.106 510.624 li
350.82 507.762 li
cp
@
349.389 508.048 mo
351.106 510.624 li
350.82 507.762 li
f
367.42 498.89 mo
364.844 502.038 361.696 505.759 359.12 508.907 cv
@
358.834 508.334 mo
357.403 510.91 li
359.692 509.193 li
cp
@
358.834 508.334 mo
357.403 510.91 li
359.692 509.193 li
f
345.955 562.712 mo
345.955 557.338 340.445 552.982 333.648 552.982 cv
326.851 552.982 321.341 557.338 321.341 562.712 cv
321.341 568.087 326.851 572.443 333.648 572.443 cv
340.445 572.443 345.955 568.087 345.955 562.712 cv
@
345.955 562.712 mo
345.955 557.338 340.445 552.982 333.648 552.982 cv
326.851 552.982 321.341 557.338 321.341 562.712 cv
321.341 568.087 326.851 572.443 333.648 572.443 cv
340.445 572.443 345.955 568.087 345.955 562.712 cv
.271 .467 .702 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
327.415 559.049 mo
(Identity)
[1.33423 2.00342 1.77896 2.00339 1.11389 1.11389 1.11389 0 ]xsh
326.397 563.628 mo
(work=12)
[2.89285 2.00339 1.33426 2.00339 2.25983 2.00339 0 ]xsh
326.119 568.207 mo
(I/O: 1->1)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
349.103 542.678 mo
346.813 545.54 343.951 549.261 341.375 552.982 cv
@
341.375 551.837 mo
340.231 554.413 li
342.52 552.695 li
cp
@
341.375 551.837 mo
340.231 554.413 li
342.52 552.695 li
f
375.719 562.712 mo
375.719 557.338 370.21 552.982 363.413 552.982 cv
356.616 552.982 351.106 557.338 351.106 562.712 cv
351.106 568.087 356.616 572.443 363.413 572.443 cv
370.21 572.443 375.719 568.087 375.719 562.712 cv
@
375.719 562.712 mo
375.719 557.338 370.21 552.982 363.413 552.982 cv
356.616 552.982 351.106 557.338 351.106 562.712 cv
351.106 568.087 356.616 572.443 363.413 572.443 cv
370.21 572.443 375.719 568.087 375.719 562.712 cv
.455 .686 .812 rgb
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
357.072 559.049 mo
(reversal)
[1.33423 1.77896 2.00342 1.77893 1.33426 1.55859 1.77896 0 ]xsh
356.162 563.628 mo
(work=26)
[2.89285 2.00339 1.33423 2.00342 2.25983 2.00339 0 ]xsh
355.884 568.207 mo
(I/O: 2->2)
[1.33423 1.11389 2.89285 1.11389 1.00171 2.00339 1.33423 2.25983 0 ]xsh
355.113 542.678 mo
356.258 544.968 357.403 547.83 358.547 550.692 cv
@
357.975 551.264 mo
359.692 553.554 li
359.406 550.692 li
cp
@
357.975 551.264 mo
359.692 553.554 li
359.406 550.692 li
f
352.823 587.898 mo
352.823 585.053 345.776 582.746 337.082 582.746 cv
328.389 582.746 321.341 585.053 321.341 587.898 cv
321.341 590.743 328.389 593.05 337.082 593.05 cv
345.776 593.05 352.823 590.743 352.823 587.898 cv
@
352.823 587.898 mo
352.823 585.053 345.776 582.746 337.082 582.746 cv
328.389 582.746 321.341 585.053 321.341 587.898 cv
321.341 590.743 328.389 593.05 337.082 593.05 cv
345.776 593.05 352.823 590.743 352.823 587.898 cv
1 gry
f
0 gry
LTFDRV+TimesNewRomanPSMT*1 [4.0068 0 0 -4.0068 0 0 ]msf
324.341 588.814 mo
(roundrobin\(2,2\))
[1.33423 2.00342 2.00339 2.00339 2.00342 1.33423 2.00339 2.00342 1.11389 2.00339 1.33423 2.00342 
1.00171 2.00339 0 ]xsh
323.917 590.76 mo
313.614 593.05 299.876 595.912 291.004 597.629 cv
278.698 599.918 258.95 603.353 244.64 605.642 cv
@
245.498 604.784 mo
242.636 605.929 li
245.498 606.215 li
cp
@
245.498 604.784 mo
242.636 605.929 li
245.498 606.215 li
f
335.079 572.443 mo
335.365 575.019 335.651 577.595 335.938 580.171 cv
@
335.079 580.171 mo
336.51 582.746 li
336.51 579.884 li
cp
@
335.079 580.171 mo
336.51 582.746 li
336.51 579.884 li
f
355.399 570.154 mo
351.679 573.874 347.672 577.881 343.951 581.315 cv
@
343.665 580.457 mo
342.234 583.033 li
344.81 581.602 li
cp
@
343.665 580.457 mo
342.234 583.033 li
344.81 581.602 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/LTFDRV+TimesNewRomanPSMT*1 uf
/LTFDRV+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
