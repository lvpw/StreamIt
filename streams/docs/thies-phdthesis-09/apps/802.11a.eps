%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 802.11a.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:06:59 PM
%%BoundingBox: 0 0 338 648
%%HiResBoundingBox: 0 0 338 648
%%CropBox: 0 0 338 648
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -648 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 648 li
338 648 li
338 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 649 mo
374 649 li
374 0 li
35 0 li
cp
clp
.1213 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
36.9704 647.03 mo
372.728 647.03 li
372.728 .743591 li
36.9704 .743591 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C86
82F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CB
A64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762
A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A
9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61F
B9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDQK+TimesNewRomanPSMT*1 
[97{/.notdef}rp /a 7{/.notdef}rp /i 3{/.notdef}rp /m /n 3{/.notdef}rp 
/r /s /t 139{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
37.8261 2.10191 mo
(transmit)
[.472099 .565487 .753975 .849102 .660587 1.3212 .472099 0 ]xsh
38.9112 604.332 mo
370.788 604.332 li
370.788 3.65399 li
38.9112 3.65399 li
cp
1 gry
@
40.852 284.585 mo
117.15 284.585 li
117.15 11.4169 li
40.852 11.4169 li
cp
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/underscore <1C60D8A8C9B7A73DCDBEB64DA5D4EE31FFCBE2EC06B4C4F1354
CB100A813> |-
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
/q <1C60D8A8C9B7A73DE3E34A36AF308D9ABC2F853844620EFD6CFFC4104749
3EE51F7C308065648397927D7AD6C567446138547A09DCE7C6CBE01088E3BD40
921D1BC9722A4A2AD8CAF55B6AA098CBAC7B1D2247D5938BD377626CB643F290
71771A6930DFA9EFF073665E2FEAD391B9A34CF8E9679A4514BB495B1253C227
E51E84> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 95 /underscore put
dup 100 /d put
dup 101 /e put
dup 113 /q put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[95{/.notdef}rp /underscore /.notdef /a 2{/.notdef}rp /d /e 3{/.notdef}rp 
/i 3{/.notdef}rp /m /n 2{/.notdef}rp /q /r /s 
/t 139{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
41.6208 12.7759 mo
(add_seqs)
[.753975 .849102 .849098 .849098 .660587 .753979 .849098 0 ]xsh
87.7951 46.352 mo
114.239 46.352 li
114.239 14.3288 li
87.7951 14.3288 li
cp
1 gry
@
56.0145 252.077 mo
115.209 252.077 li
115.209 51.204 li
56.0145 51.204 li
cp
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B7EF322B10A2A8DE6CF647A07CB452C54BD470E6C4C389B7AB
8653B88FE6E4626649FABCEAB5DAD30BD9C2A2F1F8512C1A1DC93BDB928A3688
B193ECEDB997255AB4DCBBC4BBB3FF147299B3653B9E76139CB6E91A13A47208
F2688B5C42863D22FFBF8FD8DF09F08A1966F6652461EEB3D18F0F0CB5B8E18D
6016409AA3D413D5FA051FCF9B4DFF0734259E7DCF> |-
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
/T <1C60D8A8C9B7D8BE16B2E353E3300378A32828826C127DE3D6A3769F5542
8119DC48F4B555CFAC557278838F3EC6C5F7B64F6B44DFEFCBC8AF8174185170
E165701BB15CF1CB88629A978EF6D86FB8> |-
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 70 /F put
dup 73 /I put
dup 84 /T put
dup 99 /c put
dup 108 /l put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[70{/.notdef}rp /F 2{/.notdef}rp /I 10{/.notdef}rp /T 10{/.notdef}rp /underscore 
/.notdef /a /.notdef /c /d /e 3{/.notdef}rp /i 
2{/.notdef}rp /l /m /n 2{/.notdef}rp /q /r /s 
/t 4{/.notdef}rp /y 134{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
56.8505 52.5629 mo
(cyclicIFFT)
[.753975 .849102 .753975 .472099 .472099 .753975 .565487 .944199 .944199 0 ]xsh
83.307 216.657 mo
106.354 216.657 li
106.354 63.3339 li
83.307 63.3339 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K <1C60D8A8C9B6079F62AF7EE261D2819ED7974217E7034289FA7C1BABF100
C6A5480EF2F67F33525B9F0C3A7EBEA8703E8C35FFE54D3010A9809D5E12442C
409B269A7D4346FFD3D0C882E0638FE5876FB72290B12BADDE73C28ABC60097D
5F47A0B45D92F7FD41DF8475D961E4F5A95EF6558D45744A11DE71603FC94A1B
038775E2BC960C01D2B930F2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 75 /K put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[70{/.notdef}rp /F 2{/.notdef}rp /I /.notdef /K 8{/.notdef}rp /T 
10{/.notdef}rp /underscore /.notdef /a /.notdef /c /d /e 
3{/.notdef}rp /i 2{/.notdef}rp /l /m /n 2{/.notdef}rp /q 
/r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
84.1029 64.6929 mo
(IFFTKernel)
[.565491 .944199 .944199 1.03758 1.22607 .753975 .565491 .849098 .753975 0 ]xsh
85.2478 135.629 mo
104.413 135.629 li
104.413 66.2454 li
85.2478 66.2454 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/R <1C60D8A8C9B64EDFF4D0475F241567109AA60E358A72CDD6748BBE527383
3D9930EA16405C9FA084F4E606B7DF07A2CCABEF78658BA281F5D25760E71232
16C34541C223BEC48612BD7C0052F7AD27E210716125E9B30EDB889188D65976
1E4423BF9E66EB5CCCE83D82A2DB04554982E2E899847CA739A4B92152682375
567D18A66EABD5068029F8FB7424BADB87039D0F6B1530> |-
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 82 /R put
dup 111 /o put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[70{/.notdef}rp /F 2{/.notdef}rp /I /.notdef /K 6{/.notdef}rp /R 
/.notdef /T 10{/.notdef}rp /underscore /.notdef /a /.notdef /c 
/d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n 
/o /.notdef /q /r /s /t 4{/.notdef}rp /y 
134{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
86.0232 67.6039 mo
(FFTReorder)
[.944199 .944199 1.03759 1.13268 .753975 .849098 .565491 .849098 .753975 0 ]xsh
57.9553 251.106 mo
113.268 251.106 li
113.268 219.083 li
57.9553 219.083 li
cp
1 gry
@
42.7928 283.615 mo
114.36 283.615 li
114.36 255.473 li
42.7928 255.473 li
cp
@
113.632 596.569 mo
368.847 596.569 li
368.847 10.4467 li
113.632 10.4467 li
cp
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/h <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA64197CEECB76B9E4
D2E9F717E2E21BA6AFBDB9D486017DE1334EE2B8AC7E25B49C380829180892EE
A76E25D726C9DCA303C64F5FE456E4A565D8D0ED565D009BA02A6DD13A835659
5990FC1760FC10BB02F96DEC2D5390B1C4D4059132A392595F028220DA07D2CD
E701448700C9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 104 /h put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[70{/.notdef}rp /F 2{/.notdef}rp /I /.notdef /K 6{/.notdef}rp /R 
/.notdef /T 10{/.notdef}rp /underscore /.notdef /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /.notdef /q /r /s /t 4{/.notdef}rp 
/y 134{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
114.43 11.8059 mo
(header_and_data)
[.849098 .753975 .753975 .849106 .753975 .565483 .849106 .753975 .849098 .849098 .849098 .849106 
.753967 .472107 0 ]xsh
115.573 359.791 mo
366.907 359.791 li
366.907 26.944 li
115.573 26.944 li
cp
1 gry
@
117.514 226.361 mo
204.85 226.361 li
204.85 36.163 li
117.514 36.163 li
cp
0 gry
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
118.305 37.5209 mo
(encoded_header)
[.753975 .849098 .753975 .849106 .849098 .753975 .849098 .849098 .849106 .753975 .753975 .849091 
.753983 0 ]xsh
146.383 80.801 mo
175.738 80.801 li
175.738 48.2925 li
146.383 48.2925 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/v <1C60D8A8C9B7A73DDA3AE0A055993EE6BE7DFD4A4A2DB6881516C07791ED
230086728F5F7B4242AB79AA3E9EFA40308C16768E728C96C19C447086D3AC82
2F0AB1C43C44A30591856370C72E911DB5FEBBFD365EF7E42462BF4A23A3EEAE
F504CBF5C917EC0A44C5B6D735> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[70{/.notdef}rp /F 2{/.notdef}rp /I /.notdef /K 6{/.notdef}rp /R 
/.notdef /T 10{/.notdef}rp /underscore /.notdef /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /.notdef /q /r /s /t /.notdef 
/v 2{/.notdef}rp /y 134{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
147.193 49.6509 mo
(conv_code)
[.753983 .849091 .849106 .849091 .849106 .753983 .849091 .849106 0 ]xsh
148.324 79.831 mo
173.797 79.831 li
173.797 51.2042 li
148.324 51.2042 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/p <1C60D8A8C9B7A73D9AFACE39AE6BAA6E09D7322029CE296F526808097535
692942DF193E08360A1A27EB6A08251F7D53D3FA96D22918185F2823E13833F6
44411211FB9E60C91D24768368C1EE71DFEA1AF8285D596D61CE8A067C14BC2E
E1974A4DF14D782DBEDB8D2CE5673BB9634CC4945A7FA5A5E1B87E0F2D94F438
C21548DAE429B68406206429A87E1B462DA7A9D2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[70{/.notdef}rp /F 2{/.notdef}rp /I /.notdef /K 6{/.notdef}rp /R 
/.notdef /T 10{/.notdef}rp /underscore /.notdef /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /s /t /.notdef 
/v 2{/.notdef}rp /y 134{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
149.127 52.5629 mo
(conv_code_pipeline)
[.753983 .849091 .849106 .849091 .849106 .753983 .849091 .849106 .753967 .849106 .849106 .472092 
.849106 .753967 .472107 .472092 .849106 0 ]xsh
142.259 121.073 mo
179.862 121.073 li
179.862 84.683 li
142.259 84.683 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[70{/.notdef}rp /F 2{/.notdef}rp /I /.notdef /K 6{/.notdef}rp /R 
/.notdef /T 10{/.notdef}rp /underscore /.notdef /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /s /t /u 
/v 2{/.notdef}rp /y 134{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
143.115 86.0409 mo
(permute)
[.849106 .753967 .565491 1.3212 .849106 .472092 0 ]xsh
143.229 191.427 mo
181.802 191.427 li
181.802 137.085 li
143.229 137.085 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
144.004 138.443 mo
(insert_pilots)
[.472107 .849091 .660583 .753983 .565491 .472092 .849106 .849091 .472107 .472092 .849106 .472107 
0 ]xsh
145.17 175.415 mo
179.862 175.415 li
179.862 139.995 li
145.17 139.995 li
cp
1 gry
@
119.454 225.391 mo
202.908 225.391 li
202.908 193.853 li
119.454 193.853 li
cp
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B7A73DD670D8CCCBFBC4E258D7CAA3ED17D069C025C1A2420A
81D4B3EAD7110946DAC3BA40217DDD18B672D1C19269266B39D87F9C1DDA90BD
8FC71EBFE3B2169703196A9FC02F9EA267A90B94DB1FAA5C105A1B22ABB76205
ADA50D456170C13F6F28FC77F3978776E97B76A3DEF1976915B787070DC57673
F3C0FA2B4E9DEFEF7147D4269144499ACAFBAFD930E1A038534DF3D883A96117
05279F3EC76B84BD5055C0FF3A> |-
/z <1C60D8A8C9B77FE284EFEC4CF0FCC63CDEB1624F39F402FFE3D4A95D1F81
2924519B69F6054956BEDD472A0597A54C3034FF3538C85678A4E4FE466B514C
141F526BEAADD3E6242801DF59EF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 120 /x put
dup 122 /z put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[70{/.notdef}rp /F 2{/.notdef}rp /I /.notdef /K 6{/.notdef}rp /R 
/.notdef /T 10{/.notdef}rp /underscore /.notdef /a /.notdef /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /s /t /u 
/v /.notdef /x /y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
120.251 195.211 mo
(insert_zeros_complex)
[.472099 .849098 .660591 .753975 .565483 .472099 .849106 .753975 .753975 .565483 .849106 .660583 
.849106 .753967 .849106 1.3212 .849091 .472107 .753967 0 ]xsh
204.122 352.028 mo
364.966 352.028 li
364.966 35.192 li
204.122 35.192 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
204.912 36.5509 mo
(encoded_data)
[.753983 .849091 .753983 .849091 .849106 .753967 .849106 .849106 .849091 .753983 .472092 0 
]xsh
207.397 76.434 mo
246.941 76.434 li
246.941 38.1031 li
207.397 38.1031 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
208.146 39.4619 mo
(insert_zeros)
[.472107 .849091 .660583 .753983 .565491 .472092 .849106 .753967 .753983 .565491 .849091 0 
]xsh
220.497 135.629 mo
259.798 135.629 li
259.798 81.7717 li
220.497 81.7717 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[70{/.notdef}rp /F 2{/.notdef}rp /I /.notdef /K 6{/.notdef}rp /R 
/.notdef /T 10{/.notdef}rp /underscore /.notdef /a /b /c 
/d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m 
/n /o /p /q /r /s /t /u 
/v /.notdef /x /y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
221.314 83.1299 mo
(scramble)
[.660583 .753983 .565491 .753967 1.3212 .849106 .472092 0 ]xsh
222.438 121.073 mo
257.858 121.073 li
257.858 84.683 li
222.438 84.683 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
223.263 86.0409 mo
(interleave_scramble_seq)
[.472107 .849091 .472107 .753967 .565491 .472092 .753983 .753983 .849091 .753983 .849091 .660583 
.753983 .565491 .753967 1.32121 .849091 .472107 .753967 .849106 .660583 .753983 0 ]xsh
259.798 191.427 mo
289.153 191.427 li
289.153 148.244 li
259.798 148.244 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
260.608 149.603 mo
(conv_code)
[.753967 .849121 .849091 .849091 .849091 .753998 .849091 .849091 0 ]xsh
261.739 178.812 mo
287.212 178.812 li
287.212 151.156 li
261.739 151.156 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
262.543 152.514 mo
(conv_code_pipeline)
[.753967 .849121 .849091 .849091 .849091 .753998 .849091 .849091 .753998 .849091 .849091 .472107 
.849091 .753998 .472076 .472107 .849091 0 ]xsh
206.063 225.391 mo
363.025 225.391 li
363.025 193.853 li
206.063 193.853 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
206.919 195.211 mo
(permute)
[.849106 .753967 .565491 1.3212 .849106 .472092 0 ]xsh
256.402 262.751 mo
288.183 262.751 li
288.183 227.331 li
256.402 227.331 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
257.259 228.69 mo
(permute)
[.849091 .753998 .56546 1.32123 .849091 .472107 0 ]xsh
258.343 261.781 mo
286.242 261.781 li
286.242 230.243 li
258.343 230.243 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H <1C60D8A8C9B6079F62AF7EE2120CD8667DDD4FA2DBFCE5E63E48B84464C1
802A269C64DF6D959EDF25835FFE2A562C206570E6F5B714FC53C2D5C307E1C8
A7B7F4078E600204C204D1FAC19490C22F80872356DF60239B84CD61D63A7DAA
1B4B4595C75AFC0D0514E00256BFA54FA5E3DE43161DB123A8A356631F> |-
/f <1C60D8A8C9B81F2C3AAA7F9332A1FC560AB2BC70F6F61F670AD82FC8B626
674790DAFBDF46077811E1DF38721CA7CA8FBC2C5E006E567037490710BD3A02
BCB7C7EDEC00C0FF3F7CF7FF144794FA5B0DC9D77482C00E98ABF65E83ECDA1A
E1009D> |-
/w <1C60D8A8C9B6079F6CBBA5F366E947F933D60DF598D919B1B7650559D736
37DABDC1EE55BCEC17305D792CEB494E24BD853631335C74FFCA113C4D914522
6940D65B0FA636B78B1332922431C88D4DDF20C0A3C1C91D0C3F0EC21F67A6EF
80D94D8DD0BC64DA8FAF76B12BBC90C7B441833497F4FAAF7AFFFE22453504D1
C6C3D3F89787D8CE910F64CD7AC81F424C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 72 /H put
dup 102 /f put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[70{/.notdef}rp /F /.notdef /H /I /.notdef /K 6{/.notdef}rp 
/R /.notdef /T 10{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /f /.notdef /h /i 2{/.notdef}rp 
/l /m /n /o /p /q /r /s 
/t /u /v /w /x /y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
259.092 231.601 mo
(swapHalf)
[.660583 1.22607 .753967 .849121 1.22607 .753967 .472107 0 ]xsh
239.663 320.49 mo
278.964 320.49 li
278.964 274.396 li
239.663 274.396 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
240.437 275.755 mo
(insert_pilots)
[.472107 .849091 .660583 .753983 .565491 .472092 .849106 .849091 .472107 .472092 .849106 .472107 
0 ]xsh
241.603 307.875 mo
277.023 307.875 li
277.023 277.307 li
241.603 277.307 li
cp
1 gry
@
206.305 351.058 mo
289.759 351.058 li
289.759 321.461 li
206.305 321.461 li
cp
0 gry
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
207.102 322.819 mo
(insert_zeros_complex)
[.472107 .849091 .660583 .753983 .565491 .472092 .849106 .753967 .753983 .565491 .849091 .660599 
.849091 .753983 .849091 1.3212 .849106 .472107 .753967 0 ]xsh
144.442 545.138 mo
191.506 545.138 li
191.506 360.762 li
144.442 360.762 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
145.278 362.12 mo
(cyclicIFFT)
[.753983 .849091 .753983 .472092 .472107 .753967 .565491 .944199 .944199 0 ]xsh
156.572 514.085 mo
179.619 514.085 li
179.619 372.892 li
156.572 372.892 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
157.368 374.25 mo
(IFFTKernel)
[.565491 .944199 .944199 1.03758 1.22607 .753983 .565491 .849091 .753983 0 ]xsh
158.513 438.394 mo
177.678 438.394 li
177.678 375.803 li
158.513 375.803 li
cp
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
159.288 377.161 mo
(FFTReorder)
[.944199 .944199 1.03758 1.13269 .753983 .849091 .565491 .849106 .753967 0 ]xsh
146.383 544.167 mo
189.566 544.167 li
189.566 516.511 li
146.383 516.511 li
cp
1 gry
@
117.514 595.598 mo
179.377 595.598 li
179.377 546.593 li
117.514 546.593 li
cp
@
130.129 586.865 mo
163.85 586.865 li
163.85 555.327 li
130.129 555.327 li
cp
0 gry
@
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
130.971 556.685 mo
(append_symbols)
[.753983 .849091 .849106 .753967 .849106 .849106 .849091 .660583 .849106 1.3212 .849106 .849091 
.472107 0 ]xsh
113.511 634.414 mo
161.303 634.414 li
161.303 606.758 li
113.511 606.758 li
cp
1 gry
@
130.978 6.80798 mo
130.978 5.60199 127.991 4.62494 124.306 4.62494 cv
120.622 4.62494 117.635 5.60199 117.635 6.80798 cv
117.635 8.01398 120.622 8.99194 124.306 8.99194 cv
127.991 8.99194 130.978 8.01398 130.978 6.80798 cv
0 gry
@
130.978 6.80798 mo
130.978 5.60199 127.991 4.62494 124.306 4.62494 cv
120.622 4.62494 117.635 5.60199 117.635 6.80798 cv
117.635 8.01398 120.622 8.99194 124.306 8.99194 cv
127.991 8.99194 130.978 8.01398 130.978 6.80798 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 48 /zero put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 3{/.notdef}rp /zero 21{/.notdef}rp 
/F /.notdef /H /I /.notdef /K 6{/.notdef}rp /R 
/.notdef /T 10{/.notdef}rp /underscore /.notdef /a /b /c 
/d /e /f /.notdef /h /i 2{/.notdef}rp /l 
/m /n /o /p /q /r /s /t 
/u /v /w /x /y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
118.906 7.1959 mo
(roundrobin\(0,0\))
[.565491 .849098 .849098 .849098 .849106 .565483 .849098 .849106 .472099 .849098 .565491 .849098 
.424553 .849091 0 ]xsh
113.268 17.483 mo
113.268 16.277 110.281 15.299 106.597 15.299 cv
102.912 15.299 99.9251 16.277 99.9251 17.483 cv
99.9251 18.6879 102.912 19.666 106.597 19.666 cv
110.281 19.666 113.268 18.6879 113.268 17.483 cv
@
113.268 17.483 mo
113.268 16.277 110.281 15.299 106.597 15.299 cv
102.912 15.299 99.9251 16.277 99.9251 17.483 cv
99.9251 18.6879 102.912 19.666 106.597 19.666 cv
110.281 19.666 113.268 18.6879 113.268 17.483 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
101.196 17.8709 mo
(roundrobin\(0,0\))
[.565491 .849098 .849098 .849098 .849106 .565483 .849098 .849106 .472099 .849098 .565483 .849106 
.424545 .849106 0 ]xsh
118.969 8.14301 mo
116.786 8.74896 114.481 9.59796 112.904 10.447 cv
111.57 11.296 110.114 12.873 108.901 14.329 cv
@
108.659 14.0859 mo
108.173 15.299 li
109.144 14.45 li
cp
@
108.659 14.0859 mo
108.173 15.299 li
109.144 14.45 li
f
147.839 17.483 mo
147.839 15.205 145.286 13.358 142.137 13.358 cv
138.989 13.358 136.436 15.205 136.436 17.483 cv
136.436 19.7599 138.989 21.6069 142.137 21.6069 cv
145.286 21.6069 147.839 19.7599 147.839 17.483 cv
@
147.839 17.483 mo
147.839 15.205 145.286 13.358 142.137 13.358 cv
138.989 13.358 136.436 15.205 136.436 17.483 cv
136.436 19.7599 138.989 21.6069 142.137 21.6069 cv
145.286 21.6069 147.839 19.7599 147.839 17.483 cv
/1 
[/DeviceRGB] /CSA add_res
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/hyphen <1C60D8A8C9B81F2C7E673161CF52871F3F524B3A1BAC5ADA04F510A
476> |-
/slash <1C60D8A8C9B854D088EAD778FBC18D924BA165ED7CB0EB5700C3B61B
62ACF96E65C0BF> |-
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
/colon <1C60D8A8C9B854D0E389293C42E83787A5BE0CE9B5745E40D1B32D07
F826004562E0981DB26F3EF2E2B5CD932C33C49C462F9673F306A9A8ECFFE93D
9FCE8BF4190AA3F1208FCCE1> |-
/equal <1C60D8A8C9B7E7C1C7C30B941AA047473EBF9655DE246137CE0666A3
DD27E47997A26319529C8C4FF5C38D266AE0> |-
/greater <1C60D8A8C9B7E7C1C7C30B940B3D62C7A181F0EBB0723CBB160375
71F050C44CCE59A85ACB3DB6BF9B03383F> |-
/O <1C60D8A8C9B6079F258D65BC2331B95A484F6FB0C89DE7976C286549CD33
A4D7316575EC038BAA234ED3FB5DEACB25E52512A7CBD428E6DBD2EB830622E8
8A44262525560702DCFFFB3478FE1A2C6113548B23F661EC01296D75C1A7D5FE
B75CD951FFE5A9> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 47 /slash put
dup 49 /one put
dup 58 /colon put
dup 61 /equal put
dup 62 /greater put
dup 79 /O put
dup 107 /k put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one 8{/.notdef}rp /colon 2{/.notdef}rp /equal 
/greater 7{/.notdef}rp /F /.notdef /H /I /.notdef /K 
3{/.notdef}rp /O 2{/.notdef}rp /R /.notdef /T 10{/.notdef}rp /underscore 
/.notdef /a /b /c /d /e /f /.notdef 
/h /i /.notdef /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
138.412 15.9299 mo
(FileReader)
[.944199 .472107 .472092 .753983 1.13268 .753983 .753967 .849106 .753967 0 ]xsh
139.489 17.8707 mo
(work=0)
[1.22607 .849106 .565475 .849106 .957779 0 ]xsh
138.947 19.8115 mo
(I/O: 0->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
127.581 8.74896 mo
130.129 10.3259 133.768 12.509 136.8 14.2079 cv
@
136.558 14.45 mo
137.771 14.814 li
136.922 13.965 li
cp
@
136.558 14.45 mo
137.771 14.814 li
136.922 13.965 li
f
145.776 601.178 mo
145.776 599.972 142.029 598.995 137.407 598.995 cv
132.784 598.995 129.037 599.972 129.037 601.178 cv
129.037 602.384 132.784 603.362 137.407 603.362 cv
142.029 603.362 145.776 602.384 145.776 601.178 cv
@
145.776 601.178 mo
145.776 599.972 142.029 598.995 137.407 598.995 cv
132.784 598.995 129.037 599.972 129.037 601.178 cv
129.037 602.384 132.784 603.362 137.407 603.362 cv
142.029 603.362 145.776 602.384 145.776 601.178 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
/three <1C60D8A8C9B7A73DB9E68392B0D8A76464A51F2E94D7CC8D0C2C4EA9
EB677CBC38A50658519E8BF18CD893FCF8B1BA3E22E132B8EDB4B7CD483A2AC4
23E82DF2F3816B8AE8EA5F180D3F5DFF2BF284FCE4CE5C4E107DDB61A9BE179C
50061EE6040417B0DF341D85D92A63653C2A28BA649E4CD9966C4B081E30F323
54693AC79886604480856D93C0D7CC0DE6962663CC1F198BBFA4> |-
/five <1C60D8A8C9B7A73DB9D92E2C498F1C8C272174C48D3E3EA8F27C6E6BA
93064621D133D030C551A42025686691A783FB90A2D496BEF06790AC79A6878D
99BC23CD14D9CFD812148CC847ABD0CF7E73A1A9D5ACE6E2E3BBFD4DD> |-
/six <1C60D8A8C9B7A73DF81BACD811429F931042E1295F1D2320E46DE79DF7
47FCAABFFD92F045A475E54E15C8E93ECB3BD59C8545C0EF45BF22429615FC68
5C033A02F070B2C6D7D737838C1853D297AC8915086E73952A7A9847D6F588AB
17767CC39CB62607242BC1B7BFF5295CEB6C03755CD9B53DA2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 54 /six put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /.notdef /five 
/six 3{/.notdef}rp /colon 2{/.notdef}rp /equal /greater 7{/.notdef}rp /F 
/.notdef /H /I /.notdef /K 3{/.notdef}rp /O 2{/.notdef}rp 
/R /.notdef /T 10{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /f /.notdef /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /v /w /x /y /z 
133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
130.308 601.566 mo
(roundrobin\(321,561\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849106 .849091 .424545 .849106 .849106 .849091 0 ]xsh
146.383 609.912 mo
146.383 608.706 142.364 607.728 137.407 607.728 cv
132.449 607.728 128.431 608.706 128.431 609.912 cv
128.431 611.118 132.449 612.095 137.407 612.095 cv
142.364 612.095 146.383 611.118 146.383 609.912 cv
@
146.383 609.912 mo
146.383 608.706 142.364 607.728 137.407 607.728 cv
132.449 607.728 128.431 608.706 128.431 609.912 cv
128.431 611.118 132.449 612.095 137.407 612.095 cv
142.364 612.095 146.383 611.118 146.383 609.912 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
129.672 610.3 mo
(roundrobin\(320,2,560\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849091 .849106 .424545 .849106 .424545 .849106 .849106 .849091 0 ]xsh
137.407 603.362 mo
137.407 604.332 137.407 605.424 137.407 606.515 cv
@
137.164 606.515 mo
137.407 607.728 li
137.771 606.515 li
cp
@
137.164 606.515 mo
137.407 607.728 li
137.771 606.515 li
f
99.9251 30.098 mo
99.9251 27.82 97.4269 25.974 94.3453 25.974 cv
91.2637 25.974 88.7655 27.82 88.7655 30.098 cv
88.7655 32.3759 91.2637 34.222 94.3453 34.222 cv
97.4269 34.222 99.9251 32.3759 99.9251 30.098 cv
@
99.9251 30.098 mo
99.9251 27.82 97.4269 25.974 94.3453 25.974 cv
91.2637 25.974 88.7655 27.82 88.7655 30.098 cv
88.7655 32.3759 91.2637 34.222 94.3453 34.222 cv
97.4269 34.222 99.9251 32.3759 99.9251 30.098 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six 3{/.notdef}rp /colon 2{/.notdef}rp /equal /greater 7{/.notdef}rp /F 
/.notdef /H /I /.notdef /K 3{/.notdef}rp /O 2{/.notdef}rp 
/R /.notdef /T 10{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /f /.notdef /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /v /w /x /y /z 
133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
91.0907 28.5449 mo
(short_seq)
[.660583 .849106 .849098 .565491 .472099 .849098 .660583 .753975 0 ]xsh
90.8478 30.4857 mo
(work=320)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 0 ]xsh
90.7298 32.4265 mo
(I/O: 0->64)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 .849098 0 ]xsh
104.534 19.545 mo
102.958 21.243 100.532 23.79 98.4695 25.852 cv
@
98.2269 25.61 mo
97.6204 26.7009 li
98.7121 26.095 li
cp
@
98.2269 25.61 mo
97.6204 26.7009 li
98.7121 26.095 li
f
113.268 30.098 mo
113.268 27.82 110.77 25.974 107.688 25.974 cv
104.607 25.974 102.108 27.82 102.108 30.098 cv
102.108 32.3759 104.607 34.222 107.688 34.222 cv
110.77 34.222 113.268 32.3759 113.268 30.098 cv
@
113.268 30.098 mo
113.268 27.82 110.77 25.974 107.688 25.974 cv
104.607 25.974 102.108 27.82 102.108 30.098 cv
102.108 32.3759 104.607 34.222 107.688 34.222 cv
110.77 34.222 113.268 32.3759 113.268 30.098 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7A73D85D7E997B7B5DF7D7777AF52CC5562CB6E990E974840
46648599A1D9C4DB63B2EA37B7BBC0C3039255635B40FAB067F562720BFA98A6
8AA5F28640EAE52B9FE1BA9F5F2A49A2F977CAB7D5C25E3626BAA2BEB9E431EA
60B6FFDB96CDFE0161651CB3C7DDAAF79341AA1B63131C7BD07B3EF7C547B329
2DEEC810138CCDC2FA69E1A2AD41097A54F4DBBBA72B1810538F2F0FBA5B3B54
046B0BB798F435A12098BB54904B4FA0166943538B1D7B8EA5970358CDBCC48E
31C506A3AAB0AC2519075E7791339AF09F8C1F93B0D81A9E5ED3B02D4C03B817
17F61566CDC855CB444B31FBC8E71F4A79E39CF6ED7B9B21E0269B8614410251
F072B930BD3C2C0B5BE3125CE4461E97B369DD7B68AF48B8706DE7D2976BB7A8
F7FA6E1A10F519A6E8E51022609E6B7A2E822DDCD222A999CAA520FD83CCB934
D41B4EF6E07BE85DFA424019E44CA0D51152EDBDE920B3C59D4A719415BD84E9
F231F0CBEF222AB9855B090598B4D01FCC8283B4EC699D2D8EDA681DF37E56EB
75FAFC019A1A3645CA60183B64A594CD3556BA6088F7C2AF3F05FDD0875B0187
C18BC8AC2785F74D85EFAA74EA4D56B1D0576FD461BA0B37199C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 103 /g put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six 3{/.notdef}rp /colon 2{/.notdef}rp /equal /greater 7{/.notdef}rp /F 
/.notdef /H /I /.notdef /K 3{/.notdef}rp /O 2{/.notdef}rp 
/R /.notdef /T 10{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /v /w /x /y /z 
133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
104.622 28.5449 mo
(long_seq)
[.472099 .849098 .849098 .849106 .849098 .660583 .753975 0 ]xsh
104.191 30.4857 mo
(work=320)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 0 ]xsh
104.073 32.4265 mo
(I/O: 0->64)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 .849098 0 ]xsh
106.839 19.666 mo
106.96 20.9999 107.082 22.941 107.203 24.639 cv
@
106.96 24.7609 mo
107.324 25.974 li
107.567 24.7609 li
cp
@
106.96 24.7609 mo
107.324 25.974 li
107.567 24.7609 li
f
103.807 43.1979 mo
103.807 41.9919 100.44 41.015 96.2861 41.015 cv
92.1326 41.015 88.7655 41.9919 88.7655 43.1979 cv
88.7655 44.404 92.1326 45.382 96.2861 45.382 cv
100.44 45.382 103.807 44.404 103.807 43.1979 cv
@
103.807 43.1979 mo
103.807 41.9919 100.44 41.015 96.2861 41.015 cv
92.1326 41.015 88.7655 41.9919 88.7655 43.1979 cv
88.7655 44.404 92.1326 45.382 96.2861 45.382 cv
100.44 45.382 103.807 44.404 103.807 43.1979 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
90.0368 43.5859 mo
(roundrobin\(64,64\))
[.565491 .849098 .849098 .849098 .849106 .565483 .849098 .849106 .472099 .849098 .565491 .849098 
.849098 .424553 .849098 .849098 0 ]xsh
101.381 58.239 mo
101.381 55.962 98.6653 54.1149 95.3157 54.1149 cv
91.9661 54.1149 89.2507 55.962 89.2507 58.239 cv
89.2507 60.517 91.9661 62.364 95.3157 62.364 cv
98.6653 62.364 101.381 60.517 101.381 58.239 cv
@
101.381 58.239 mo
101.381 55.962 98.6653 54.1149 95.3157 54.1149 cv
91.9661 54.1149 89.2507 55.962 89.2507 58.239 cv
89.2507 60.517 91.9661 62.364 95.3157 62.364 cv
98.6653 62.364 101.381 60.517 101.381 58.239 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
91.7308 56.6869 mo
(fftshift_1d)
[.565491 .565483 .472099 .660591 .849098 .472099 .565491 .472099 .849098 .849098 0 ]xsh
91.3937 58.6277 mo
(work=1344)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 0 ]xsh
91.2757 60.5685 mo
(I/O: 64->64)
[.565491 .472099 1.22607 .472099 .424545 .849106 .849098 .565483 .957779 .849098 0 ]xsh
96.1648 45.382 mo
96.0435 47.322 95.9222 50.3549 95.6796 52.902 cv
@
95.437 52.902 mo
95.5583 54.1149 li
95.9222 52.902 li
cp
@
95.437 52.902 mo
95.5583 54.1149 li
95.9222 52.902 li
f
94.9518 34.222 mo
95.1944 36.163 95.5583 38.225 95.8009 39.923 cv
@
95.437 39.8019 mo
95.9222 41.015 li
96.0435 39.8019 li
cp
@
95.437 39.8019 mo
95.9222 41.015 li
96.0435 39.8019 li
f
104.656 33.616 mo
102.836 35.799 100.532 38.3459 98.8334 40.287 cv
@
98.7121 39.923 mo
98.1056 41.015 li
99.1973 40.408 li
cp
@
98.7121 39.923 mo
98.1056 41.015 li
99.1973 40.408 li
f
103.443 73.2809 mo
103.443 71.0029 99.5869 69.1559 94.8305 69.1559 cv
90.0741 69.1559 86.2182 71.0029 86.2182 73.2809 cv
86.2182 75.558 90.0741 77.405 94.8305 77.405 cv
99.5869 77.405 103.443 75.558 103.443 73.2809 cv
@
103.443 73.2809 mo
103.443 71.0029 99.5869 69.1559 94.8305 69.1559 cv
90.0741 69.1559 86.2182 71.0029 86.2182 73.2809 cv
86.2182 75.558 90.0741 77.405 94.8305 77.405 cv
99.5869 77.405 103.443 75.558 103.443 73.2809 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/S <1C60D8A8C9B7EF320E2EFDBCAC7BC76D0C8C1FC222AFE4F464C56D04CD48
5F140DB725EC46F068943283C9A43A14A852E22E87331165F602FD95AC890BE8
83DAD7F63C31168B480A95AC244C28C8F37F118A399681DB4822661628FBDA87
D99D0367C013E32688035EC31A5C3FC194FEB20C4FCD84A9EB3547C0D5A421A0
1B87DFDA871D7919B7251A9EC84A645CA15425845057F189EC65A90DD4028CC5
B10853B05E6F7AF9E84AC6588CDCE11B6EF766B248A8304E38964E579F6EF2DC
2D4971ED042868564E8E982FE2B2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 83 /S put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six 3{/.notdef}rp /colon 2{/.notdef}rp /equal /greater 7{/.notdef}rp /F 
/.notdef /H /I /.notdef /K 3{/.notdef}rp /O 2{/.notdef}rp 
/R /S /T 10{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /q /r 
/s /t /u /v /w /x /y /z 
133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
88.2263 71.728 mo
(FFTReorderSimple)
[.944199 .944199 1.03759 1.13268 .753975 .849098 .565491 .849098 .753975 .565491 .944199 .472099 
1.3212 .849098 .472107 0 ]xsh
90.9086 73.6687 mo
(work=1664)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 0 ]xsh
90.7906 75.6095 mo
(I/O: 64->64)
[.565491 .472099 1.22607 .472099 .424545 .849106 .849098 .565483 .957779 .849098 0 ]xsh
95.1944 62.364 mo
95.1944 64.062 95.0731 66.124 95.0731 67.943 cv
@
94.8305 67.943 mo
94.9518 69.1559 li
95.3157 67.943 li
cp
@
94.8305 67.943 mo
94.9518 69.1559 li
95.3157 67.943 li
f
103.443 89.777 mo
103.443 87.4999 99.5869 85.653 94.8305 85.653 cv
90.0741 85.653 86.2182 87.4999 86.2182 89.777 cv
86.2182 92.0549 90.0741 93.902 94.8305 93.902 cv
99.5869 93.902 103.443 92.0549 103.443 89.777 cv
@
103.443 89.777 mo
103.443 87.4999 99.5869 85.653 94.8305 85.653 cv
90.0741 85.653 86.2182 87.4999 86.2182 89.777 cv
86.2182 92.0549 90.0741 93.902 94.8305 93.902 cv
99.5869 93.902 103.443 92.0549 103.443 89.777 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
88.2263 88.2249 mo
(FFTReorderSimple)
[.944199 .944199 1.03759 1.13268 .753975 .849098 .565491 .849098 .753975 .565491 .944199 .472099 
1.3212 .849098 .472107 0 ]xsh
90.9086 90.1657 mo
(work=1664)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 0 ]xsh
90.7906 92.1065 mo
(I/O: 32->32)
[.565491 .472099 1.22607 .472099 .424545 .849106 .849098 .565483 .957779 .849098 0 ]xsh
94.8305 77.405 mo
94.8305 79.588 94.8305 82.1359 94.8305 84.4399 cv
@
94.5879 84.4399 mo
94.8305 85.653 li
95.1944 84.4399 li
cp
@
94.5879 84.4399 mo
94.8305 85.653 li
95.1944 84.4399 li
f
103.443 103.848 mo
103.443 101.571 99.5869 99.724 94.8305 99.724 cv
90.0741 99.724 86.2182 101.571 86.2182 103.848 cv
86.2182 106.126 90.0741 107.972 94.8305 107.972 cv
99.5869 107.972 103.443 106.126 103.443 103.848 cv
@
103.443 103.848 mo
103.443 101.571 99.5869 99.724 94.8305 99.724 cv
90.0741 99.724 86.2182 101.571 86.2182 103.848 cv
86.2182 106.126 90.0741 107.972 94.8305 107.972 cv
99.5869 107.972 103.443 106.126 103.443 103.848 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
88.2263 102.296 mo
(FFTReorderSimple)
[.944199 .944199 1.03759 1.13268 .753975 .849098 .565491 .849098 .753975 .565491 .944199 .472099 
1.3212 .849098 .472107 0 ]xsh
90.9086 104.237 mo
(work=1664)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 0 ]xsh
90.7906 106.178 mo
(I/O: 16->16)
[.565491 .472099 1.22607 .472099 .424545 .849106 .849098 .565483 .957779 .849098 0 ]xsh
94.8305 93.902 mo
94.8305 95.3569 94.8305 97.0549 94.8305 98.5109 cv
@
94.5879 98.5109 mo
94.8305 99.724 li
95.1944 98.5109 li
cp
@
94.5879 98.5109 mo
94.8305 99.724 li
95.1944 98.5109 li
f
103.443 117.919 mo
103.443 115.641 99.5869 113.795 94.8305 113.795 cv
90.0741 113.795 86.2182 115.641 86.2182 117.919 cv
86.2182 120.197 90.0741 122.043 94.8305 122.043 cv
99.5869 122.043 103.443 120.197 103.443 117.919 cv
@
103.443 117.919 mo
103.443 115.641 99.5869 113.795 94.8305 113.795 cv
90.0741 113.795 86.2182 115.641 86.2182 117.919 cv
86.2182 120.197 90.0741 122.043 94.8305 122.043 cv
99.5869 122.043 103.443 120.197 103.443 117.919 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7A73D9EB159A3CFECEE26FAC12AD4B6691842B4C84783
E84E1D8CD272AEC54014C937C15B810E403549328E3DC44B6A66E9E0AE5509A1
20FFE6F694340EC43D35C59CD7D1B2F14C1F1D5BA576A10F77E962817750FC0E
DC62627EE0E94BCE030A10C59143A015250A384C09B6A65F8572DF3FCBF68CF8
0D23E4E88D0691BD2178810DDABD5F40D8018F795B8CB5A52DDDD05F80E9A2BC
CDF3A5E14C701FBADF0447A7AE0E47FA8F86216AC25155BFF3569B19382CA905
7B18009FE630A2D7CEFDC3A4A3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
7{/.notdef}rp /F /.notdef /H /I /.notdef /K 3{/.notdef}rp 
/O 2{/.notdef}rp /R /S /T 10{/.notdef}rp /underscore /.notdef 
/a /b /c /d /e /f /g /h 
/i /.notdef /k /l /m /n /o /p 
/q /r /s /t /u /v /w /x 
/y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
88.2263 116.366 mo
(FFTReorderSimple)
[.944199 .944199 1.03759 1.13268 .753975 .849098 .565491 .849098 .753975 .565491 .944199 .472099 
1.3212 .849098 .472107 0 ]xsh
90.9086 118.307 mo
(work=1664)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 0 ]xsh
91.6397 120.248 mo
(I/O: 8->8)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
94.8305 107.972 mo
94.8305 109.428 94.8305 111.126 94.8305 112.582 cv
@
94.5879 112.582 mo
94.8305 113.795 li
95.1944 112.582 li
cp
@
94.5879 112.582 mo
94.8305 113.795 li
95.1944 112.582 li
f
103.443 130.534 mo
103.443 128.257 99.5869 126.41 94.8305 126.41 cv
90.0741 126.41 86.2182 128.257 86.2182 130.534 cv
86.2182 132.812 90.0741 134.658 94.8305 134.658 cv
99.5869 134.658 103.443 132.812 103.443 130.534 cv
@
103.443 130.534 mo
103.443 128.257 99.5869 126.41 94.8305 126.41 cv
90.0741 126.41 86.2182 128.257 86.2182 130.534 cv
86.2182 132.812 90.0741 134.658 94.8305 134.658 cv
99.5869 134.658 103.443 132.812 103.443 130.534 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
88.2263 128.982 mo
(FFTReorderSimple)
[.944199 .944199 1.03759 1.13268 .753975 .849098 .565491 .849098 .753975 .565491 .944199 .472099 
1.3212 .849098 .472107 0 ]xsh
90.9086 130.923 mo
(work=1664)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 0 ]xsh
91.6397 132.864 mo
(I/O: 4->4)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
94.8305 122.043 mo
94.8305 123.014 94.8305 124.105 94.8305 125.197 cv
@
94.5879 125.197 mo
94.8305 126.41 li
95.1944 125.197 li
cp
@
94.5879 125.197 mo
94.8305 126.41 li
95.1944 125.197 li
f
101.866 143.149 mo
101.866 140.872 98.716 139.025 94.8305 139.025 cv
90.945 139.025 87.7951 140.872 87.7951 143.149 cv
87.7951 145.427 90.945 147.274 94.8305 147.274 cv
98.716 147.274 101.866 145.427 101.866 143.149 cv
@
101.866 143.149 mo
101.866 140.872 98.716 139.025 94.8305 139.025 cv
90.945 139.025 87.7951 140.872 87.7951 143.149 cv
87.7951 145.427 90.945 147.274 94.8305 147.274 cv
98.716 147.274 101.866 145.427 101.866 143.149 cv
.675 .855 .91 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7A73DFE313D538903D2D688A80497AF19F58251B88346
588CB5A8F94928A032E7AE04ED687068FF5EFE684F47125CC227938E> |-
/C <1C60D8A8C9B64EDFB39C8FA0E3107D39E1E26D40368A6A59D36B799EDDCB
A8AF8BCAEA2E296C5BB00979C4073082C4AC62DAAE27F25BE45DFF121DF075F7
3D37111C10DFF7C6BD4BFE8AE73B4FADB84F0E8B5722DEA1CA14F5AFDC440B45
4F635F5576E82C8F45782F1EDE0EC9CA59D48E4C0F81> |-
/D <1C60D8A8C9B6079F62AF7EE2124AC712AE5D5419E262A0C00C6163DFBCB2
A6FA65DDDD5062250DB8BBFB46EB35827750F9FCEE696526B20FE9266474B179
350945BBDAF7180FAB04D619EB38198FC722361E0B3B5E50F9017F19C7BDCABB
285F506A04FE32C63936689B1F9C81923B03440D57336303C59B59E8D3C0659D
33> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 55 /seven put
dup 67 /C put
dup 68 /D put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six /seven /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D /.notdef /F /.notdef /H /I 
/.notdef /K 3{/.notdef}rp /O 2{/.notdef}rp /R /S /T 
10{/.notdef}rp /underscore /.notdef /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /q /r /s /t /u 
/v /w /x /y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
89.8302 141.597 mo
(CombineIDFT)
[1.13268 .849106 1.3212 .849098 .472099 .849098 .753975 .565491 1.22607 .944199 0 ]xsh
90.484 143.538 mo
(work=10176)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 .849098 0 ]xsh
91.6396 145.479 mo
(I/O: 2->2)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
94.8305 134.658 mo
94.8305 135.629 94.8305 136.721 94.8305 137.812 cv
@
94.5879 137.812 mo
94.8305 139.025 li
95.1944 137.812 li
cp
@
94.5879 137.812 mo
94.8305 139.025 li
95.1944 137.812 li
f
101.623 158.191 mo
101.623 155.913 98.4734 154.066 94.5879 154.066 cv
90.7024 154.066 87.5525 155.913 87.5525 158.191 cv
87.5525 160.468 90.7024 162.315 94.5879 162.315 cv
98.4734 162.315 101.623 160.468 101.623 158.191 cv
@
101.623 158.191 mo
101.623 155.913 98.4734 154.066 94.5879 154.066 cv
90.7024 154.066 87.5525 155.913 87.5525 158.191 cv
87.5525 160.468 90.7024 162.315 94.5879 162.315 cv
98.4734 162.315 101.623 160.468 101.623 158.191 cv
.675 .855 .91 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
89.5876 156.638 mo
(CombineIDFT)
[1.13268 .849106 1.3212 .849098 .472099 .849098 .753975 .565491 1.22607 .944199 0 ]xsh
90.2414 158.579 mo
(work=10048)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 .849098 0 ]xsh
91.397 160.52 mo
(I/O: 4->4)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
94.7092 147.274 mo
94.7092 148.972 94.7092 151.034 94.7092 152.853 cv
@
94.4666 152.853 mo
94.7092 154.066 li
95.0731 152.853 li
cp
@
94.4666 152.853 mo
94.7092 154.066 li
95.0731 152.853 li
f
101.502 172.261 mo
101.502 169.984 98.3521 168.137 94.4666 168.137 cv
90.5811 168.137 87.4312 169.984 87.4312 172.261 cv
87.4312 174.539 90.5811 176.386 94.4666 176.386 cv
98.3521 176.386 101.502 174.539 101.502 172.261 cv
@
101.502 172.261 mo
101.502 169.984 98.3521 168.137 94.4666 168.137 cv
90.5811 168.137 87.4312 169.984 87.4312 172.261 cv
87.4312 174.539 90.5811 176.386 94.4666 176.386 cv
98.3521 176.386 101.502 174.539 101.502 172.261 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7A73DFCCE6C978678EE12F2E62BD7D7FA244984C1E12F1
0EB0B8765182EBCE165DFB850DB8B03381969B80BB1CA53FFB24B5DE34530C8C
83A80415FE19B7C2B551E605143CF6469C8BCE336F9A5E5012DD932CF553D663
37837328637F50B90FF9AE8815D00BBA7EFCE6D508C5B6EBE2D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six /seven /eight /nine /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D /.notdef /F /.notdef /H /I 
/.notdef /K 3{/.notdef}rp /O 2{/.notdef}rp /R /S /T 
10{/.notdef}rp /underscore /.notdef /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /q /r /s /t /u 
/v /w /x /y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
89.4663 170.709 mo
(CombineIDFT)
[1.13268 .849106 1.3212 .849098 .472099 .849098 .753975 .565491 1.22607 .944199 0 ]xsh
90.5446 172.65 mo
(work=9984)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 0 ]xsh
91.2757 174.591 mo
(I/O: 8->8)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
94.5879 162.315 mo
94.5879 163.77 94.4666 165.469 94.4666 166.924 cv
@
94.224 166.924 mo
94.4666 168.137 li
94.8305 166.924 li
cp
@
94.224 166.924 mo
94.4666 168.137 li
94.8305 166.924 li
f
101.381 186.332 mo
101.381 184.055 98.2308 182.208 94.3453 182.208 cv
90.4598 182.208 87.3099 184.055 87.3099 186.332 cv
87.3099 188.61 90.4598 190.456 94.3453 190.456 cv
98.2308 190.456 101.381 188.61 101.381 186.332 cv
@
101.381 186.332 mo
101.381 184.055 98.2308 182.208 94.3453 182.208 cv
90.4598 182.208 87.3099 184.055 87.3099 186.332 cv
87.3099 188.61 90.4598 190.456 94.3453 190.456 cv
98.2308 190.456 101.381 188.61 101.381 186.332 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
89.345 184.78 mo
(CombineIDFT)
[1.13268 .849106 1.3212 .849098 .472099 .849098 .753975 .565491 1.22607 .944199 0 ]xsh
90.4233 186.721 mo
(work=9952)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 0 ]xsh
90.3053 188.662 mo
(I/O: 16->16)
[.565491 .472099 1.22607 .472099 .424545 .849106 .849098 .565483 .957779 .849098 0 ]xsh
94.4666 176.386 mo
94.4666 177.841 94.3453 179.539 94.3453 180.995 cv
@
94.1027 180.995 mo
94.3453 182.208 li
94.7092 180.995 li
cp
@
94.1027 180.995 mo
94.3453 182.208 li
94.7092 180.995 li
f
101.381 198.947 mo
101.381 196.67 98.2308 194.823 94.3453 194.823 cv
90.4598 194.823 87.3099 196.67 87.3099 198.947 cv
87.3099 201.225 90.4598 203.072 94.3453 203.072 cv
98.2308 203.072 101.381 201.225 101.381 198.947 cv
@
101.381 198.947 mo
101.381 196.67 98.2308 194.823 94.3453 194.823 cv
90.4598 194.823 87.3099 196.67 87.3099 198.947 cv
87.3099 201.225 90.4598 203.072 94.3453 203.072 cv
98.2308 203.072 101.381 201.225 101.381 198.947 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
89.345 197.395 mo
(CombineIDFT)
[1.13268 .849106 1.3212 .849098 .472099 .849098 .753975 .565491 1.22607 .944199 0 ]xsh
90.4233 199.336 mo
(work=9936)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 0 ]xsh
90.3053 201.277 mo
(I/O: 32->32)
[.565491 .472099 1.22607 .472099 .424545 .849106 .849098 .565483 .957779 .849098 0 ]xsh
94.3453 190.456 mo
94.3453 191.427 94.3453 192.519 94.3453 193.61 cv
@
94.1027 193.61 mo
94.3453 194.823 li
94.7092 193.61 li
cp
@
94.1027 193.61 mo
94.3453 194.823 li
94.7092 193.61 li
f
103.079 211.563 mo
103.079 209.285 99.1687 207.438 94.3453 207.438 cv
89.5219 207.438 85.6117 209.285 85.6117 211.563 cv
85.6117 213.84 89.5219 215.687 94.3453 215.687 cv
99.1687 215.687 103.079 213.84 103.079 211.563 cv
@
103.079 211.563 mo
103.079 209.285 99.1687 207.438 94.3453 207.438 cv
89.5219 207.438 85.6117 209.285 85.6117 211.563 cv
85.6117 213.84 89.5219 215.687 94.3453 215.687 cv
99.1687 215.687 103.079 213.84 103.079 211.563 cv
.675 .855 .91 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
87.5993 210.01 mo
(CombineIDFTFinal)
[1.13268 .849106 1.3212 .849098 .472099 .849098 .753975 .565491 1.22607 .944199 1.03759 .944199 
.472099 .849098 .753975 0 ]xsh
89.9988 211.951 mo
(work=10952)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 .849098 0 ]xsh
90.3054 213.892 mo
(I/O: 64->64)
[.565491 .472099 1.22607 .472099 .424545 .849106 .849098 .565483 .957779 .849098 0 ]xsh
94.3453 203.072 mo
94.3453 204.042 94.3453 205.134 94.3453 206.225 cv
@
94.1027 206.225 mo
94.3453 207.438 li
94.7092 206.225 li
cp
@
94.1027 206.225 mo
94.3453 207.438 li
94.7092 206.225 li
f
99.5612 222.237 mo
99.5612 221.031 96.3027 220.054 92.2832 220.054 cv
88.2637 220.054 85.0052 221.031 85.0052 222.237 cv
85.0052 223.443 88.2637 224.42 92.2832 224.42 cv
96.3027 224.42 99.5612 223.443 99.5612 222.237 cv
@
99.5612 222.237 mo
99.5612 221.031 96.3027 220.054 92.2832 220.054 cv
88.2637 220.054 85.0052 221.031 85.0052 222.237 cv
85.0052 223.443 88.2637 224.42 92.2832 224.42 cv
96.3027 224.42 99.5612 223.443 99.5612 222.237 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
86.2699 222.625 mo
(duplicate\(1,1,1,1\))
[.849098 .849098 .849106 .472099 .472099 .753975 .753975 .472099 .753975 .565491 .849098 .424545 
.849106 .424545 .849098 .424553 .849098 0 ]xsh
93.4962 215.687 mo
93.3749 216.779 93.1323 217.87 93.011 218.962 cv
@
92.7684 218.841 mo
92.7684 220.054 li
93.3749 218.962 li
cp
@
92.7684 218.841 mo
92.7684 220.054 li
93.3749 218.962 li
f
71.5409 235.337 mo
71.5409 233.06 68.7168 231.213 65.2333 231.213 cv
61.7497 231.213 58.9257 233.06 58.9257 235.337 cv
58.9257 237.615 61.7497 239.462 65.2333 239.462 cv
68.7168 239.462 71.5409 237.615 71.5409 235.337 cv
@
71.5409 235.337 mo
71.5409 233.06 68.7168 231.213 65.2333 231.213 cv
61.7497 231.213 58.9257 233.06 58.9257 235.337 cv
58.9257 237.615 61.7497 239.462 65.2333 239.462 cv
68.7168 239.462 71.5409 237.615 71.5409 235.337 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
60.8944 233.785 mo
(remove_first)
[.565487 .753975 1.3212 .849098 .849098 .753975 .849106 .565483 .472099 .565491 .660583 0 
]xsh
61.7358 235.726 mo
(work=832)
[1.22607 .849102 .565487 .849098 .957779 .849098 .849098 0 ]xsh
61.1933 237.667 mo
(I/O: 64->32)
[.565487 .472099 1.22607 .472099 .424553 .849098 .849098 .565491 .957779 .849098 0 ]xsh
86.0969 223.329 mo
81.6088 224.299 75.7864 225.755 72.2687 227.332 cv
71.0557 227.938 69.6001 229.394 68.3871 230.849 cv
@
68.2658 230.364 mo
67.9019 231.577 li
68.8723 230.728 li
cp
@
68.2658 230.364 mo
67.9019 231.577 li
68.8723 230.728 li
f
84.6413 235.337 mo
84.6413 233.06 82.1974 231.213 79.1828 231.213 cv
76.1682 231.213 73.7243 233.06 73.7243 235.337 cv
73.7243 237.615 76.1682 239.462 79.1828 239.462 cv
82.1974 239.462 84.6413 237.615 84.6413 235.337 cv
@
84.6413 235.337 mo
84.6413 233.06 82.1974 231.213 79.1828 231.213 cv
76.1682 231.213 73.7243 233.06 73.7243 235.337 cv
73.7243 237.615 76.1682 239.462 79.1828 239.462 cv
82.1974 239.462 84.6413 237.615 84.6413 235.337 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
76.5413 233.785 mo
(Identity)
[.565491 .849098 .753975 .849098 .472099 .472099 .472099 0 ]xsh
75.6854 235.726 mo
(work=768)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 0 ]xsh
75.992 237.667 mo
(I/O: 1->1)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
89.372 224.299 mo
87.9164 225.27 86.3395 226.361 85.3691 227.332 cv
84.3987 228.302 83.307 229.636 82.3366 230.971 cv
@
82.2153 230.485 mo
81.8514 231.698 li
82.8218 230.849 li
cp
@
82.2153 230.485 mo
81.8514 231.698 li
82.8218 230.849 li
f
97.7417 235.337 mo
97.7417 233.06 95.2978 231.213 92.2832 231.213 cv
89.2686 231.213 86.8247 233.06 86.8247 235.337 cv
86.8247 237.615 89.2686 239.462 92.2832 239.462 cv
95.2978 239.462 97.7417 237.615 97.7417 235.337 cv
@
97.7417 235.337 mo
97.7417 233.06 95.2978 231.213 92.2832 231.213 cv
89.2686 231.213 86.8247 233.06 86.8247 235.337 cv
86.8247 237.615 89.2686 239.462 92.2832 239.462 cv
95.2978 239.462 97.7417 237.615 97.7417 235.337 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
89.6417 233.785 mo
(Identity)
[.565491 .849098 .753975 .849098 .472099 .472099 .472099 0 ]xsh
88.7858 235.726 mo
(work=768)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 0 ]xsh
89.0924 237.667 mo
(I/O: 1->1)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
92.2832 224.42 mo
92.2832 225.876 92.2832 227.938 92.2832 230 cv
@
92.0406 230 mo
92.2832 231.213 li
92.6471 230 li
cp
@
92.0406 230 mo
92.2832 231.213 li
92.6471 230 li
f
112.298 235.337 mo
112.298 233.06 109.528 231.213 106.111 231.213 cv
102.695 231.213 99.9251 233.06 99.9251 235.337 cv
99.9251 237.615 102.695 239.462 106.111 239.462 cv
109.528 239.462 112.298 237.615 112.298 235.337 cv
@
112.298 235.337 mo
112.298 233.06 109.528 231.213 106.111 231.213 cv
102.695 231.213 99.9251 233.06 99.9251 235.337 cv
99.9251 237.615 102.695 239.462 106.111 239.462 cv
109.528 239.462 112.298 237.615 112.298 235.337 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
101.961 233.785 mo
(remove_last)
[.565491 .753975 1.3212 .849098 .849098 .753975 .849106 .472099 .753975 .660583 0 ]xsh
102.614 235.726 mo
(work=646)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 0 ]xsh
102.496 237.667 mo
(I/O: 64->1)
[.565491 .472099 1.22607 .472099 .424545 .849106 .849098 .565483 .957779 0 ]xsh
95.1944 224.299 mo
96.65 225.27 98.2269 226.361 99.1973 227.332 cv
100.168 228.181 101.259 229.394 102.351 230.728 cv
@
102.23 230.971 mo
103.2 231.698 li
102.594 230.607 li
cp
@
102.23 230.971 mo
103.2 231.698 li
102.594 230.607 li
f
88.4016 247.953 mo
88.4016 246.747 84.2742 245.769 79.1828 245.769 cv
74.0914 245.769 69.964 246.747 69.964 247.953 cv
69.964 249.158 74.0914 250.136 79.1828 250.136 cv
84.2742 250.136 88.4016 249.158 88.4016 247.953 cv
@
88.4016 247.953 mo
88.4016 246.747 84.2742 245.769 79.1828 245.769 cv
74.0914 245.769 69.964 246.747 69.964 247.953 cv
69.964 249.158 74.0914 250.136 79.1828 250.136 cv
84.2742 250.136 88.4016 249.158 88.4016 247.953 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
71.2353 248.341 mo
(roundrobin\(32,64,64,1\))
[.565491 .849098 .849098 .849098 .849106 .565483 .849098 .849106 .472099 .849098 .565491 .849098 
.849098 .424553 .849098 .849098 .424553 .849098 .849098 .424553 .849098 0 ]xsh
89.2507 258.627 mo
89.2507 257.421 84.6888 256.444 79.0615 256.444 cv
73.4342 256.444 68.8723 257.421 68.8723 258.627 cv
68.8723 259.833 73.4342 260.81 79.0615 260.81 cv
84.6888 260.81 89.2507 259.833 89.2507 258.627 cv
@
89.2507 258.627 mo
89.2507 257.421 84.6888 256.444 79.0615 256.444 cv
73.4342 256.444 68.8723 257.421 68.8723 258.627 cv
68.8723 259.833 73.4342 260.81 79.0615 260.81 cv
84.6888 260.81 89.2507 259.833 89.2507 258.627 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
70.0526 259.015 mo
(roundrobin\(1,159,2,159,1\))
[.565491 .849098 .849098 .849098 .849106 .565483 .849098 .849106 .472099 .849098 .565483 .849106 
.424545 .849106 .849098 .849098 .424553 .849098 .424553 .849098 .849098 .849098 .424553 .849098 
0 ]xsh
79.1828 250.136 mo
79.0615 251.592 79.0615 253.654 79.0615 255.352 cv
@
78.8189 255.231 mo
79.0615 256.444 li
79.4254 255.231 li
cp
@
78.8189 255.231 mo
79.0615 256.444 li
79.4254 255.231 li
f
68.9936 238.734 mo
71.2983 240.675 73.9669 243.222 76.1503 245.041 cv
@
75.7864 245.163 mo
76.8781 245.769 li
76.2716 244.678 li
cp
@
75.7864 245.163 mo
76.8781 245.769 li
76.2716 244.678 li
f
79.1828 239.462 mo
79.1828 241.16 79.1828 242.979 79.1828 244.678 cv
@
78.9402 244.556 mo
79.1828 245.769 li
79.5467 244.556 li
cp
@
78.9402 244.556 mo
79.1828 245.769 li
79.5467 244.556 li
f
88.8868 238.613 mo
86.8247 240.675 84.1561 243.101 82.094 245.041 cv
@
81.9727 244.678 mo
81.3662 245.769 li
82.4579 245.163 li
cp
@
81.9727 244.678 mo
81.3662 245.769 li
82.4579 245.163 li
f
101.623 238.249 mo
100.774 238.734 99.9251 239.098 99.1973 239.462 cv
95.3157 241.281 89.2507 243.828 84.8839 245.648 cv
@
84.8839 245.284 mo
83.9135 246.012 li
85.1265 245.891 li
cp
@
84.8839 245.284 mo
83.9135 246.012 li
85.1265 245.891 li
f
54.6802 269.301 mo
54.6802 267.024 52.2363 265.177 49.2217 265.177 cv
46.2071 265.177 43.7632 267.024 43.7632 269.301 cv
43.7632 271.579 46.2071 273.426 49.2217 273.426 cv
52.2363 273.426 54.6802 271.579 54.6802 269.301 cv
@
54.6802 269.301 mo
54.6802 267.024 52.2363 265.177 49.2217 265.177 cv
46.2071 265.177 43.7632 267.024 43.7632 269.301 cv
43.7632 271.579 46.2071 273.426 49.2217 273.426 cv
52.2363 273.426 54.6802 271.579 54.6802 269.301 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
47.3826 267.749 mo
(halve)
[.849098 .753979 .472099 .849098 0 ]xsh
45.7243 269.69 mo
(work=134)
[1.22607 .849102 .565487 .849098 .957779 .849098 .849102 0 ]xsh
46.0309 271.631 mo
(I/O: 1->1)
[.565487 .472099 1.22607 .472099 .424553 .849098 .565487 .957779 0 ]xsh
72.39 260.325 mo
67.1741 261.66 59.8961 263.6 55.408 265.177 cv
54.9228 265.299 54.4376 265.662 53.8311 265.905 cv
@
53.9524 265.42 mo
53.1033 266.39 li
54.3163 266.026 li
cp
@
53.9524 265.42 mo
53.1033 266.39 li
54.3163 266.026 li
f
67.7806 269.301 mo
67.7806 267.024 65.3367 265.177 62.3221 265.177 cv
59.3075 265.177 56.8636 267.024 56.8636 269.301 cv
56.8636 271.579 59.3075 273.426 62.3221 273.426 cv
65.3367 273.426 67.7806 271.579 67.7806 269.301 cv
@
67.7806 269.301 mo
67.7806 267.024 65.3367 265.177 62.3221 265.177 cv
59.3075 265.177 56.8636 267.024 56.8636 269.301 cv
56.8636 271.579 59.3075 273.426 62.3221 273.426 cv
65.3367 273.426 67.7806 271.579 67.7806 269.301 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
59.6806 267.749 mo
(Identity)
[.565487 .849102 .753975 .849098 .472099 .472099 .472103 0 ]xsh
58.8247 269.69 mo
(work=954)
[1.22607 .849102 .565487 .849098 .957779 .849098 .849098 0 ]xsh
59.1313 271.631 mo
(I/O: 1->1)
[.565487 .472099 1.22607 .472099 .424553 .849098 .565487 .957775 0 ]xsh
75.7864 260.689 mo
73.3604 262.266 69.8427 264.449 67.0528 266.269 cv
@
67.2954 265.784 mo
66.4463 266.633 li
67.6593 266.269 li
cp
@
67.2954 265.784 mo
66.4463 266.633 li
67.6593 266.269 li
f
87.6738 269.301 mo
87.6738 267.024 83.7093 265.177 78.8189 265.177 cv
73.9285 265.177 69.964 267.024 69.964 269.301 cv
69.964 271.579 73.9285 273.426 78.8189 273.426 cv
83.7093 273.426 87.6738 271.579 87.6738 269.301 cv
@
87.6738 269.301 mo
87.6738 267.024 83.7093 265.177 78.8189 265.177 cv
73.9285 265.177 69.964 267.024 69.964 269.301 cv
69.964 271.579 73.9285 273.426 78.8189 273.426 cv
83.7093 273.426 87.6738 271.579 87.6738 269.301 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
71.9803 267.749 mo
(halve_and_combine)
[.849098 .753975 .472099 .849106 .753975 .849098 .753975 .849098 .849098 .849106 .753975 .849098 
1.3212 .849098 .472099 .849106 0 ]xsh
75.3214 269.69 mo
(work=153)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 0 ]xsh
75.628 271.631 mo
(I/O: 2->1)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
79.0615 260.81 mo
79.0615 261.781 78.9402 263.115 78.9402 264.328 cv
@
78.6976 263.964 mo
78.9402 265.177 li
79.3041 263.964 li
cp
@
78.6976 263.964 mo
78.9402 265.177 li
79.3041 263.964 li
f
100.774 269.301 mo
100.774 267.024 98.3303 265.177 95.3157 265.177 cv
92.301 265.177 89.8572 267.024 89.8572 269.301 cv
89.8572 271.579 92.301 273.426 95.3157 273.426 cv
98.3303 273.426 100.774 271.579 100.774 269.301 cv
@
100.774 269.301 mo
100.774 267.024 98.3303 265.177 95.3157 265.177 cv
92.301 265.177 89.8572 267.024 89.8572 269.301 cv
89.8572 271.579 92.301 273.426 95.3157 273.426 cv
98.3303 273.426 100.774 271.579 100.774 269.301 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
92.6742 267.749 mo
(Identity)
[.565491 .849098 .753975 .849098 .472099 .472099 .472099 0 ]xsh
91.8183 269.69 mo
(work=954)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 0 ]xsh
92.1249 271.631 mo
(I/O: 1->1)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
82.2153 260.689 mo
84.52 262.145 87.5525 264.328 90.2211 266.026 cv
@
89.9785 266.269 mo
91.1915 266.633 li
90.3424 265.784 li
cp
@
89.9785 266.269 mo
91.1915 266.633 li
90.3424 265.784 li
f
113.389 269.301 mo
113.389 267.024 111.054 265.177 108.173 265.177 cv
105.293 265.177 102.958 267.024 102.958 269.301 cv
102.958 271.579 105.293 273.426 108.173 273.426 cv
111.054 273.426 113.389 271.579 113.389 269.301 cv
@
113.389 269.301 mo
113.389 267.024 111.054 265.177 108.173 265.177 cv
105.293 265.177 102.958 267.024 102.958 269.301 cv
102.958 271.579 105.293 273.426 108.173 273.426 cv
111.054 273.426 113.389 271.579 113.389 269.301 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
105.532 267.749 mo
(Identity)
[.565491 .849098 .753975 .849098 .472099 .472099 .472099 0 ]xsh
105.525 269.69 mo
(work=6)
[1.22607 .849098 .565491 .849098 .957779 0 ]xsh
104.983 271.631 mo
(I/O: 1->1)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
85.6117 260.325 mo
90.8276 261.66 97.863 263.6 102.23 265.177 cv
102.594 265.299 103.2 265.662 103.685 265.905 cv
@
103.2 266.026 mo
104.413 266.39 li
103.564 265.42 li
cp
@
103.2 266.026 mo
104.413 266.39 li
103.564 265.42 li
f
97.2565 280.461 mo
97.2565 279.255 92.6946 278.278 87.0673 278.278 cv
81.44 278.278 76.8781 279.255 76.8781 280.461 cv
76.8781 281.667 81.44 282.644 87.0673 282.644 cv
92.6946 282.644 97.2565 281.667 97.2565 280.461 cv
@
97.2565 280.461 mo
97.2565 279.255 92.6946 278.278 87.0673 278.278 cv
81.44 278.278 76.8781 279.255 76.8781 280.461 cv
76.8781 281.667 81.44 282.644 87.0673 282.644 cv
92.6946 282.644 97.2565 281.667 97.2565 280.461 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
78.0584 280.849 mo
(roundrobin\(1,159,1,159,1\))
[.565491 .849098 .849098 .849098 .849106 .565483 .849098 .849106 .472099 .849098 .565491 .849098 
.424545 .849106 .849098 .849098 .424553 .849098 .424553 .849098 .849098 .849098 .424553 .849098 
0 ]xsh
89.372 282.644 mo
93.9814 287.011 103.807 297.322 103.807 304.721 cv
103.807 304.721 103.807 304.721 103.807 583.711 cv
103.807 589.776 111.327 593.779 116.664 596.569 cv
119.697 598.146 124.67 599.359 129.037 600.086 cv
@
128.673 600.329 mo
129.886 600.208 li
128.673 599.723 li
cp
@
128.673 600.329 mo
129.886 600.208 li
128.673 599.723 li
f
53.1033 272.213 mo
53.8311 272.819 54.6802 273.183 55.408 273.426 cv
61.5943 275.245 71.4196 277.307 78.455 278.763 cv
@
78.2124 279.005 mo
79.4254 279.005 li
78.3337 278.399 li
cp
@
78.2124 279.005 mo
79.4254 279.005 li
78.3337 278.399 li
f
66.325 272.213 mo
67.0528 272.698 67.9019 273.183 68.5084 273.426 cv
71.7835 274.881 76.8781 276.822 80.881 278.278 cv
@
80.5171 278.399 mo
81.7301 278.642 li
80.7597 277.914 li
cp
@
80.5171 278.399 mo
81.7301 278.642 li
80.7597 277.914 li
f
81.7301 273.183 mo
82.7005 274.517 83.7922 276.094 84.8839 277.429 cv
@
84.52 277.429 mo
85.4904 278.278 li
85.0052 277.065 li
cp
@
84.52 277.429 mo
85.4904 278.278 li
85.0052 277.065 li
f
92.6471 272.94 mo
91.5554 274.396 90.3424 276.094 89.372 277.429 cv
@
89.2507 277.186 mo
88.6442 278.278 li
89.6146 277.55 li
cp
@
89.2507 277.186 mo
88.6442 278.278 li
89.6146 277.55 li
f
104.413 272.091 mo
103.564 272.698 102.836 273.062 102.23 273.426 cv
99.6825 274.76 95.8009 276.579 92.6471 278.035 cv
@
92.5258 277.792 mo
91.5554 278.52 li
92.7684 278.278 li
cp
@
92.5258 277.792 mo
91.5554 278.52 li
92.7684 278.278 li
f
168.581 30.098 mo
168.581 28.892 165.214 27.914 161.06 27.914 cv
156.907 27.914 153.54 28.892 153.54 30.098 cv
153.54 31.304 156.907 32.2809 161.06 32.2809 cv
165.214 32.2809 168.581 31.304 168.581 30.098 cv
@
168.581 30.098 mo
168.581 28.892 165.214 27.914 161.06 27.914 cv
156.907 27.914 153.54 28.892 153.54 30.098 cv
153.54 31.304 156.907 32.2809 161.06 32.2809 cv
165.214 32.2809 168.581 31.304 168.581 30.098 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
154.811 30.4859 mo
(roundrobin\(0,800\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 .849091 .849106 0 ]xsh
146.383 20.2729 mo
149.537 22.456 153.904 25.3669 157.057 27.429 cv
@
156.815 27.672 mo
158.028 28.0359 li
157.179 27.187 li
cp
@
156.815 27.672 mo
158.028 28.0359 li
157.179 27.187 li
f
168.581 43.1979 mo
168.581 40.921 165.214 39.074 161.06 39.074 cv
156.907 39.074 153.54 40.921 153.54 43.1979 cv
153.54 45.476 156.907 47.322 161.06 47.322 cv
165.214 47.322 168.581 45.476 168.581 43.1979 cv
@
168.581 43.1979 mo
168.581 40.921 165.214 39.074 161.06 39.074 cv
156.907 39.074 153.54 40.921 153.54 43.1979 cv
153.54 45.476 156.907 47.322 161.06 47.322 cv
165.214 47.322 168.581 45.476 168.581 43.1979 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
155.497 41.6459 mo
(generate_header)
[.849106 .753967 .849106 .753967 .565491 .753983 .472092 .753983 .849091 .849106 .753967 .753983 
.849106 .753967 0 ]xsh
157.563 43.5867 mo
(work=157)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
157.445 45.5275 mo
(I/O: 0->24)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 .849106 0 ]xsh
161.06 32.2809 mo
161.06 33.737 161.06 35.799 161.06 37.861 cv
@
160.818 37.861 mo
161.06 39.074 li
161.424 37.861 li
cp
@
160.818 37.861 mo
161.06 39.074 li
161.424 37.861 li
f
229.837 43.1979 mo
229.837 41.9919 226.199 41.015 221.71 41.015 cv
217.222 41.015 213.583 41.9919 213.583 43.1979 cv
213.583 44.404 217.222 45.382 221.71 45.382 cv
226.199 45.382 229.837 44.404 229.837 43.1979 cv
@
229.837 43.1979 mo
229.837 41.9919 226.199 41.015 221.71 41.015 cv
217.222 41.015 213.583 41.9919 213.583 43.1979 cv
213.583 44.404 217.222 45.382 221.71 45.382 cv
226.199 45.382 229.837 44.404 229.837 43.1979 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
214.824 43.5859 mo
(roundrobin\(0,800,0\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 .849091 .849106 .424545 .849106 0 ]xsh
168.338 30.5829 mo
178.164 31.4319 195.631 33.009 205.699 35.192 cv
209.216 36.0419 214.311 38.71 217.829 40.772 cv
@
217.343 40.894 mo
218.556 41.1359 li
217.586 40.287 li
cp
@
217.343 40.894 mo
218.556 41.1359 li
217.586 40.287 li
f
175.98 356.637 mo
175.98 355.432 172.45 354.454 168.096 354.454 cv
163.741 354.454 160.211 355.432 160.211 356.637 cv
160.211 357.843 163.741 358.821 168.096 358.821 cv
172.45 358.821 175.98 357.843 175.98 356.637 cv
@
175.98 356.637 mo
175.98 355.432 172.45 354.454 168.096 354.454 cv
163.741 354.454 160.211 355.432 160.211 356.637 cv
160.211 357.843 163.741 358.821 168.096 358.821 cv
172.45 358.821 175.98 357.843 175.98 356.637 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
161.422 357.026 mo
(roundrobin\(64,384\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849091 .424561 .849091 .849106 .849106 0 ]xsh
174.161 367.797 mo
174.161 365.519 171.445 363.673 168.096 363.673 cv
164.746 363.673 162.031 365.519 162.031 367.797 cv
162.031 370.075 164.746 371.921 168.096 371.921 cv
171.445 371.921 174.161 370.075 174.161 367.797 cv
@
174.161 367.797 mo
174.161 365.519 171.445 363.673 168.096 363.673 cv
164.746 363.673 162.031 365.519 162.031 367.797 cv
162.031 370.075 164.746 371.921 168.096 371.921 cv
171.445 371.921 174.161 370.075 174.161 367.797 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
164.511 366.244 mo
(fftshift_1d)
[.565491 .565491 .472092 .660583 .849106 .472092 .565491 .472107 .849091 .849106 0 ]xsh
164.174 368.185 mo
(work=4704)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
164.056 370.125 mo
(I/O: 64->64)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 .849106 0 ]xsh
168.096 358.821 mo
168.096 359.791 168.096 361.126 168.096 362.339 cv
@
167.853 362.46 mo
168.096 363.673 li
168.46 362.46 li
cp
@
167.853 362.46 mo
168.096 363.673 li
168.46 362.46 li
f
167.247 58.239 mo
167.247 55.962 164.477 54.1149 161.06 54.1149 cv
157.644 54.1149 154.874 55.962 154.874 58.239 cv
154.874 60.517 157.644 62.364 161.06 62.364 cv
164.477 62.364 167.247 60.517 167.247 58.239 cv
@
167.247 58.239 mo
167.247 55.962 164.477 54.1149 161.06 54.1149 cv
157.644 54.1149 154.874 55.962 154.874 58.239 cv
154.874 60.517 157.644 62.364 161.06 62.364 cv
164.477 62.364 167.247 60.517 167.247 58.239 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B6079F005CDFC8A94B75FD7D89F5577E741BA5E9223B5FB59E
3315C336CDEC6F323D18A178B38DCEDA9B451B37165385283368F94E5EC5086C
A620D2549B18425DA74331F96252E5D5358EE44D33B708D9B8822975F755BF6A
D18C81AA5BF9B47D39D0AFBBC3A6521D0B18D90963534584D1092363898607EF
C07B44A235786C96> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 65 /A put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /three /four /five 
/six /seven /eight /nine /colon 2{/.notdef}rp /equal /greater 
2{/.notdef}rp /A /.notdef /C /D /.notdef /F /.notdef 
/H /I /.notdef /K 3{/.notdef}rp /O 2{/.notdef}rp /R 
/S /T 10{/.notdef}rp /underscore /.notdef /a /b /c 
/d /e /f /g /h /i /.notdef /k 
/l /m /n /o /p /q /r /s 
/t /u /v /w /x /y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
156.909 56.6869 mo
(Anonymous)
[1.22607 .849106 .849091 .849106 .849091 1.32121 .849091 .849106 0 ]xsh
157.563 58.6277 mo
(work=144)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
157.869 60.5685 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
161.06 47.322 mo
161.06 49.0209 161.06 51.0829 161.06 52.902 cv
@
160.818 52.902 mo
161.06 54.1149 li
161.424 52.902 li
cp
@
160.818 52.902 mo
161.06 54.1149 li
161.424 52.902 li
f
172.826 73.2809 mo
172.826 70.266 167.558 67.822 161.06 67.822 cv
154.562 67.822 149.294 70.266 149.294 73.2809 cv
149.294 76.295 154.562 78.739 161.06 78.739 cv
167.558 78.739 172.826 76.295 172.826 73.2809 cv
@
172.826 73.2809 mo
172.826 70.266 167.558 67.822 161.06 67.822 cv
154.562 67.822 149.294 70.266 149.294 73.2809 cv
149.294 76.295 154.562 78.739 161.06 78.739 cv
167.558 78.739 172.826 76.295 172.826 73.2809 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/asterisk <1C60D8A8C9B7A73DB9A0737247D562C61165E8E636EE73CF26D64
F3C6728422CEE27A3F00DC7152CA3773F07EA559F0959F48B519FDEC6150629C
166D2B4FBEF2A598C45B9530847243905C1F3F150F0DD5877800507BF2B97A2E
4942336B61DB2054C6AB2AE38E3AEA192A16823CC1BE212834012F90F71E96A0
46E312361C7B9D33CA838F52208FFCDFB3B3A9B2A9728D3AFAB94EEE3598CA05
C0D62AFFA345B041C6B4E56F6827F181D11C4BECD0C9CCA67> |-
/E <1C60D8A8C9B7D8BE1621F7F8DAEB9FA9CBAFC8F4F4D756F2191C830A0E4A
58F87E3DDE67D49AF36DDF5F1FB2D74CAA0A1A0C249C8C349E149A4722F92BF7
61EFA3C2F9EC864F14F3A3AC121B867A3642166A4B07211381D27468A1D61050
1454C0DD1325D701AB4ADD917E16E61514B3C2631A525AEC590FB4C52AA73BF6
506DADDCC92C07368DF00A34F77E6ED1C2061C6913B4C24C30A64720E240E09F
9DD8F5EF76F17E9EEAE569D41B7D8D946B46BFFC> |-
/P <1C60D8A8C9B7EF322B10A2A8DE6EF0A6CE60E86B1DF5C68015667A2338DB
07BCF91C9D8DCCB5967A656E7EB6651B3E305A306DA1BB8C1BAEECFC60DC00D8
8AEC56E3DF7455D57CB9BB0CC9A32704D4F0F1C39C5B2EDC70F42754CACE7253
FF5FDAE4B675FFF987E22613E24B8956EFA9C2C5B9AC406D966F459601B2046A
C9E54A3BB37C45EDEB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 42 /asterisk put
dup 69 /E put
dup 80 /P put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 
/greater 2{/.notdef}rp /A /.notdef /C /D /E /F 
/.notdef /H /I /.notdef /K 3{/.notdef}rp /O /P 
/.notdef /R /S /T 10{/.notdef}rp /underscore /.notdef /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /q 
/r /s /t /u /v /w /x /y 
/z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
155.307 70.7579 mo
(conv_code_filter)
[.753983 .849091 .849106 .849091 .849106 .753983 .849091 .849106 .753967 .849106 .565491 .472092 
.472107 .472092 .753983 0 ]xsh
157.138 72.6987 mo
(work=1128)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
157.87 74.6395 mo
(I/O: 1->2)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
151.674 76.5803 mo
(*** PEEKS 6 AHEAD ***)
[.849106 .849091 .849106 .424545 .944199 1.03758 1.0376 1.22607 .944199 .424545 .849106 .424545 
1.22607 1.22607 1.0376 1.22607 1.22607 .424545 .849106 .849091 0 ]xsh
161.06 62.364 mo
161.06 63.6979 161.06 65.154 161.06 66.488 cv
@
160.818 66.488 mo
161.06 67.7009 li
161.424 66.488 li
cp
@
160.818 66.488 mo
161.06 67.7009 li
161.424 66.488 li
f
169.551 89.777 mo
169.551 88.572 165.75 87.5939 161.06 87.5939 cv
156.371 87.5939 152.569 88.572 152.569 89.777 cv
152.569 90.983 156.371 91.9609 161.06 91.9609 cv
165.75 91.9609 169.551 90.983 169.551 89.777 cv
@
169.551 89.777 mo
169.551 88.572 165.75 87.5939 161.06 87.5939 cv
156.371 87.5939 152.569 88.572 152.569 89.777 cv
152.569 90.983 156.371 91.9609 161.06 91.9609 cv
165.75 91.9609 169.551 90.983 169.551 89.777 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
153.75 90.1659 mo
(roundrobin\(16,16,16\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849091 .424561 .849091 .849106 .424545 .849106 .849106 0 ]xsh
161.06 78.86 mo
161.06 81.408 161.06 84.319 161.06 86.624 cv
@
160.818 86.381 mo
161.06 87.5939 li
161.424 86.381 li
cp
@
160.818 86.381 mo
161.06 87.5939 li
161.424 86.381 li
f
153.661 103.848 mo
153.661 101.571 151.326 99.724 148.445 99.724 cv
145.564 99.724 143.229 101.571 143.229 103.848 cv
143.229 106.126 145.564 107.972 148.445 107.972 cv
151.326 107.972 153.661 106.126 153.661 103.848 cv
@
153.661 103.848 mo
153.661 101.571 151.326 99.724 148.445 99.724 cv
145.564 99.724 143.229 101.571 143.229 103.848 cv
143.229 106.126 145.564 107.972 148.445 107.972 cv
151.326 107.972 153.661 106.126 153.661 103.848 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
145.804 102.296 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
145.373 104.237 mo
(work=96)
[1.22607 .849106 .565475 .849106 .957779 .849106 0 ]xsh
145.255 106.178 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
159.119 91.9609 mo
157.3 93.902 154.51 97.0549 152.327 99.603 cv
@
152.084 99.36 mo
151.478 100.452 li
152.569 99.845 li
cp
@
152.084 99.36 mo
151.478 100.452 li
152.569 99.845 li
f
166.276 103.848 mo
166.276 101.571 163.941 99.724 161.06 99.724 cv
158.18 99.724 155.844 101.571 155.844 103.848 cv
155.844 106.126 158.18 107.972 161.06 107.972 cv
163.941 107.972 166.276 106.126 166.276 103.848 cv
@
166.276 103.848 mo
166.276 101.571 163.941 99.724 161.06 99.724 cv
158.18 99.724 155.844 101.571 155.844 103.848 cv
155.844 106.126 158.18 107.972 161.06 107.972 cv
163.941 107.972 166.276 106.126 166.276 103.848 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
158.419 102.296 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
157.988 104.237 mo
(work=96)
[1.22607 .849106 .565475 .849106 .957779 .849106 0 ]xsh
157.87 106.178 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
161.06 91.9609 mo
161.06 93.6589 161.06 96.206 161.06 98.5109 cv
@
160.818 98.5109 mo
161.06 99.724 li
161.424 98.5109 li
cp
@
160.818 98.5109 mo
161.06 99.724 li
161.424 98.5109 li
f
178.891 103.848 mo
178.891 101.571 176.556 99.724 173.675 99.724 cv
170.795 99.724 168.46 101.571 168.46 103.848 cv
168.46 106.126 170.795 107.972 173.675 107.972 cv
176.556 107.972 178.891 106.126 178.891 103.848 cv
@
178.891 103.848 mo
178.891 101.571 176.556 99.724 173.675 99.724 cv
170.795 99.724 168.46 101.571 168.46 103.848 cv
168.46 106.126 170.795 107.972 173.675 107.972 cv
176.556 107.972 178.891 106.126 178.891 103.848 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
171.034 102.296 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
170.603 104.237 mo
(work=96)
[1.22607 .849106 .565475 .849106 .957779 .849106 0 ]xsh
170.485 106.178 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
163.001 91.9609 mo
164.821 93.902 167.61 97.0549 169.794 99.603 cv
@
169.551 99.845 mo
170.643 100.452 li
170.036 99.36 li
cp
@
169.551 99.845 mo
170.643 100.452 li
170.036 99.36 li
f
168.338 117.919 mo
168.338 116.713 165.08 115.736 161.06 115.736 cv
157.041 115.736 153.782 116.713 153.782 117.919 cv
153.782 119.125 157.041 120.102 161.06 120.102 cv
165.08 120.102 168.338 119.125 168.338 117.919 cv
@
168.338 117.919 mo
168.338 116.713 165.08 115.736 161.06 115.736 cv
157.041 115.736 153.782 116.713 153.782 117.919 cv
153.782 119.125 157.041 120.102 161.06 120.102 cv
165.08 120.102 168.338 119.125 168.338 117.919 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
155.023 118.307 mo
(roundrobin\(1,1,1\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 .424545 .849106 0 ]xsh
166.519 130.534 mo
166.519 128.257 164.075 126.41 161.06 126.41 cv
158.046 126.41 155.602 128.257 155.602 130.534 cv
155.602 132.812 158.046 134.658 161.06 134.658 cv
164.075 134.658 166.519 132.812 166.519 130.534 cv
@
166.519 130.534 mo
166.519 128.257 164.075 126.41 161.06 126.41 cv
158.046 126.41 155.602 128.257 155.602 130.534 cv
155.602 132.812 158.046 134.658 161.06 134.658 cv
164.075 134.658 166.519 132.812 166.519 130.534 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/B <1C60D8A8C9B64EDFF4D0475F24A0512970A16CFF6BFBD1A1A12D07A62723
BF27DBD01B60ACEC3C9DB4E627348B4F9C96D245E2397B81856FE7B9149C0D88
A0B1C89901A357B578317FC0F49D1050D95CF70B7F7A7C5741B1B644F20C16DB
8F1BD7E6C45546C9302E6AD757CA73E92696A658F8A903A2E6B5FA3BE24637C3
3393411FB0E113E4BDFEBF11B4E90F57471B306273B2241C3C23457DA84CC16B
22781151F6DE159B155116967F7D53FA1DDDDF14084F0631BA1C08300F50E5BA
9DC336D8349BEA3371DCAFDF658781D6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 66 /B put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 
/greater 2{/.notdef}rp /A /B /C /D /E /F 
/.notdef /H /I /.notdef /K 3{/.notdef}rp /O /P 
/.notdef /R /S /T 10{/.notdef}rp /underscore /.notdef /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /q 
/r /s /t /u /v /w /x /y 
/z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
158.937 128.982 mo
(BPSK)
[1.13269 .944199 .944199 0 ]xsh
157.563 130.923 mo
(work=576)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
157.87 132.864 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
161.06 120.102 mo
161.06 121.437 161.06 123.378 161.06 125.076 cv
@
160.818 125.197 mo
161.06 126.41 li
161.424 125.197 li
cp
@
160.818 125.197 mo
161.06 126.41 li
161.424 125.197 li
f
151.478 107.245 mo
153.661 109.671 156.451 112.824 158.513 115.129 cv
@
158.149 115.129 mo
159.119 115.857 li
158.634 114.765 li
cp
@
158.149 115.129 mo
159.119 115.857 li
158.634 114.765 li
f
161.06 107.972 mo
161.06 110.156 161.06 112.703 161.06 114.644 cv
@
160.818 114.523 mo
161.06 115.736 li
161.424 114.523 li
cp
@
160.818 114.523 mo
161.06 115.736 li
161.424 114.523 li
f
170.643 107.245 mo
168.46 109.671 165.67 112.824 163.608 115.129 cv
@
163.486 114.765 mo
163.001 115.857 li
163.971 115.129 li
cp
@
163.486 114.765 mo
163.001 115.857 li
163.971 115.129 li
f
168.096 143.149 mo
168.096 141.944 164.946 140.966 161.06 140.966 cv
157.175 140.966 154.025 141.944 154.025 143.149 cv
154.025 144.355 157.175 145.333 161.06 145.333 cv
164.946 145.333 168.096 144.355 168.096 143.149 cv
@
168.096 143.149 mo
168.096 141.944 164.946 140.966 161.06 140.966 cv
157.175 140.966 154.025 141.944 154.025 143.149 cv
154.025 144.355 157.175 145.333 161.06 145.333 cv
164.946 145.333 168.096 144.355 168.096 143.149 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
155.236 143.538 mo
(roundrobin\(48,0\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849091 .424561 .849091 0 ]xsh
161.06 134.658 mo
161.06 136.357 161.06 138.176 161.06 139.874 cv
@
160.818 139.753 mo
161.06 140.966 li
161.424 139.753 li
cp
@
160.818 139.753 mo
161.06 140.966 li
161.424 139.753 li
f
157.057 158.191 mo
157.057 155.913 154.614 154.066 151.599 154.066 cv
148.584 154.066 146.14 155.913 146.14 158.191 cv
146.14 160.468 148.584 162.315 151.599 162.315 cv
154.614 162.315 157.057 160.468 157.057 158.191 cv
@
157.057 158.191 mo
157.057 155.913 154.614 154.066 151.599 154.066 cv
148.584 154.066 146.14 155.913 146.14 158.191 cv
146.14 160.468 148.584 162.315 151.599 162.315 cv
154.614 162.315 157.057 160.468 157.057 158.191 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
148.957 156.638 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
148.101 158.579 mo
(work=288)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
148.408 160.52 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
159.726 145.333 mo
158.27 147.395 156.208 150.67 154.631 153.46 cv
@
154.389 153.217 mo
154.025 154.43 li
154.874 153.581 li
cp
@
154.389 153.217 mo
154.025 154.43 li
154.874 153.581 li
f
178.891 158.191 mo
178.891 155.913 174.492 154.066 169.066 154.066 cv
163.64 154.066 159.241 155.913 159.241 158.191 cv
159.241 160.468 163.64 162.315 169.066 162.315 cv
174.492 162.315 178.891 160.468 178.891 158.191 cv
@
178.891 158.191 mo
178.891 155.913 174.492 154.066 169.066 154.066 cv
163.64 154.066 159.241 155.913 159.241 158.191 cv
159.241 160.468 163.64 162.315 169.066 162.315 cv
174.492 162.315 178.891 160.468 178.891 158.191 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
161.191 156.638 mo
(header_pilot_generator)
[.849106 .753967 .753983 .849091 .753983 .565491 .849091 .849106 .472092 .472107 .849091 .472107 
.849106 .849091 .753983 .849091 .753983 .565491 .753967 .472107 .849091 0 ]xsh
165.993 158.579 mo
(work=20)
[1.22607 .849106 .565475 .849106 .957779 .849106 0 ]xsh
165.875 160.52 mo
(I/O: 0->4)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
162.152 145.333 mo
163.244 147.395 164.942 150.427 166.276 152.975 cv
@
166.034 153.096 mo
166.883 154.066 li
166.519 152.853 li
cp
@
166.034 153.096 mo
166.883 154.066 li
166.519 152.853 li
f
168.217 172.261 mo
168.217 171.056 165.067 170.078 161.182 170.078 cv
157.296 170.078 154.146 171.056 154.146 172.261 cv
154.146 173.467 157.296 174.445 161.182 174.445 cv
165.067 174.445 168.217 173.467 168.217 172.261 cv
@
168.217 172.261 mo
168.217 171.056 165.067 170.078 161.182 170.078 cv
157.296 170.078 154.146 171.056 154.146 172.261 cv
154.146 173.467 157.296 174.445 161.182 174.445 cv
165.067 174.445 168.217 173.467 168.217 172.261 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
155.357 172.65 mo
(roundrobin\(48,4\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849091 .424561 .849091 0 ]xsh
167.368 186.332 mo
167.368 184.055 164.598 182.208 161.182 182.208 cv
157.765 182.208 154.995 184.055 154.995 186.332 cv
154.995 188.61 157.765 190.456 161.182 190.456 cv
164.598 190.456 167.368 188.61 167.368 186.332 cv
@
167.368 186.332 mo
167.368 184.055 164.598 182.208 161.182 182.208 cv
157.765 182.208 154.995 184.055 154.995 186.332 cv
154.995 188.61 157.765 190.456 161.182 190.456 cv
164.598 190.456 167.368 188.61 167.368 186.332 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
157.03 184.78 mo
(Anonymous)
[1.22607 .849106 .849091 .849106 .849091 1.32121 .849091 .849106 0 ]xsh
157.684 186.721 mo
(work=443)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
157.141 188.662 mo
(I/O: 52->52)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 .849106 0 ]xsh
161.182 174.445 mo
161.182 176.143 161.182 178.69 161.182 180.995 cv
@
160.939 180.995 mo
161.182 182.208 li
161.545 180.995 li
cp
@
160.939 180.995 mo
161.182 182.208 li
161.545 180.995 li
f
154.146 161.83 mo
155.602 164.134 157.664 167.046 159.119 169.229 cv
@
158.756 169.229 mo
159.726 170.078 li
159.241 168.865 li
cp
@
158.756 169.229 mo
159.726 170.078 li
159.241 168.865 li
f
166.761 162.194 mo
165.548 164.377 164.093 167.167 162.88 169.229 cv
@
162.758 168.865 mo
162.395 170.078 li
163.244 169.229 li
cp
@
162.758 168.865 mo
162.395 170.078 li
163.244 169.229 li
f
170.522 198.947 mo
170.522 197.742 166.34 196.764 161.182 196.764 cv
156.023 196.764 151.842 197.742 151.842 198.947 cv
151.842 200.153 156.023 201.131 161.182 201.131 cv
166.34 201.131 170.522 200.153 170.522 198.947 cv
@
170.522 198.947 mo
170.522 197.742 166.34 196.764 161.182 196.764 cv
156.023 196.764 151.842 197.742 151.842 198.947 cv
151.842 200.153 156.023 201.131 161.182 201.131 cv
166.34 201.131 170.522 200.153 170.522 198.947 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
153.022 199.336 mo
(roundrobin\(0,26,0,26,0\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 .849091 .424561 .849091 .424561 .849091 .849106 .424545 .849106 0 ]xsh
161.182 190.456 mo
161.182 192.155 161.182 193.974 161.182 195.672 cv
@
160.939 195.551 mo
161.182 196.764 li
161.545 195.551 li
cp
@
160.939 195.551 mo
161.182 196.764 li
161.545 195.551 li
f
137.407 211.563 mo
137.407 209.285 133.605 207.438 128.916 207.438 cv
124.226 207.438 120.425 209.285 120.425 211.563 cv
120.425 213.84 124.226 215.687 128.916 215.687 cv
133.605 215.687 137.407 213.84 137.407 211.563 cv
@
137.407 211.563 mo
137.407 209.285 133.605 207.438 128.916 207.438 cv
124.226 207.438 120.425 209.285 120.425 211.563 cv
120.425 213.84 124.226 215.687 128.916 215.687 cv
133.605 215.687 137.407 213.84 137.407 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
122.455 210.01 mo
(zero_gen_complex)
[.753975 .753975 .565491 .849098 .849098 .849098 .753975 .849106 .849091 .753983 .849106 1.3212 
.849091 .472107 .753967 0 ]xsh
125.843 211.951 mo
(work=42)
[1.22607 .849098 .565491 .849106 .957764 .849106 0 ]xsh
125.725 213.892 mo
(I/O: 0->1)
[.565491 .472099 1.22607 .472092 .424561 .849091 .565491 .957779 0 ]xsh
156.087 200.767 mo
150.871 202.708 142.987 205.619 138.135 207.438 cv
137.528 207.681 136.8 208.045 136.072 208.409 cv
@
136.194 208.045 mo
135.223 208.773 li
136.436 208.53 li
cp
@
136.194 208.045 mo
135.223 208.773 li
136.436 208.53 li
f
150.507 211.563 mo
150.507 209.285 148.063 207.438 145.049 207.438 cv
142.034 207.438 139.59 209.285 139.59 211.563 cv
139.59 213.84 142.034 215.687 145.049 215.687 cv
148.063 215.687 150.507 213.84 150.507 211.563 cv
@
150.507 211.563 mo
150.507 209.285 148.063 207.438 145.049 207.438 cv
142.034 207.438 139.59 209.285 139.59 211.563 cv
139.59 213.84 142.034 215.687 145.049 215.687 cv
148.063 215.687 150.507 213.84 150.507 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
142.407 210.01 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
141.551 211.951 mo
(work=156)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
141.858 213.892 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
158.513 201.01 mo
156.087 202.829 152.569 205.619 149.779 207.802 cv
@
149.658 207.56 mo
148.809 208.53 li
150.022 208.045 li
cp
@
149.658 207.56 mo
148.809 208.53 li
150.022 208.045 li
f
169.673 211.563 mo
169.673 209.285 165.871 207.438 161.182 207.438 cv
156.492 207.438 152.691 209.285 152.691 211.563 cv
152.691 213.84 156.492 215.687 161.182 215.687 cv
165.871 215.687 169.673 213.84 169.673 211.563 cv
@
169.673 211.563 mo
169.673 209.285 165.871 207.438 161.182 207.438 cv
156.492 207.438 152.691 209.285 152.691 211.563 cv
152.691 213.84 156.492 215.687 161.182 215.687 cv
165.871 215.687 169.673 213.84 169.673 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
154.721 210.01 mo
(zero_gen_complex)
[.753983 .753967 .565491 .849091 .849106 .849106 .753967 .849106 .849091 .753983 .849106 1.3212 
.849091 .472107 .753967 0 ]xsh
158.533 211.951 mo
(work=7)
[1.22607 .849106 .565475 .849106 .957779 0 ]xsh
157.991 213.892 mo
(I/O: 0->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
161.182 201.131 mo
161.182 202.465 161.182 204.406 161.182 206.104 cv
@
160.939 206.225 mo
161.182 207.438 li
161.545 206.225 li
cp
@
160.939 206.225 mo
161.182 207.438 li
161.545 206.225 li
f
182.773 211.563 mo
182.773 209.285 180.329 207.438 177.314 207.438 cv
174.3 207.438 171.856 209.285 171.856 211.563 cv
171.856 213.84 174.3 215.687 177.314 215.687 cv
180.329 215.687 182.773 213.84 182.773 211.563 cv
@
182.773 211.563 mo
182.773 209.285 180.329 207.438 177.314 207.438 cv
174.3 207.438 171.856 209.285 171.856 211.563 cv
171.856 213.84 174.3 215.687 177.314 215.687 cv
180.329 215.687 182.773 213.84 182.773 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
174.673 210.01 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
173.817 211.951 mo
(work=156)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
174.124 213.892 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
163.85 201.01 mo
166.276 202.829 169.794 205.619 172.584 207.802 cv
@
172.462 208.045 mo
173.554 208.53 li
172.826 207.56 li
cp
@
172.462 208.045 mo
173.554 208.53 li
172.826 207.56 li
f
201.938 211.563 mo
201.938 209.285 198.137 207.438 193.447 207.438 cv
188.758 207.438 184.956 209.285 184.956 211.563 cv
184.956 213.84 188.758 215.687 193.447 215.687 cv
198.137 215.687 201.938 213.84 201.938 211.563 cv
@
201.938 211.563 mo
201.938 209.285 198.137 207.438 193.447 207.438 cv
188.758 207.438 184.956 209.285 184.956 211.563 cv
184.956 213.84 188.758 215.687 193.447 215.687 cv
198.137 215.687 201.938 213.84 201.938 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
186.987 210.01 mo
(zero_gen_complex)
[.753983 .753967 .565491 .849091 .849106 .849106 .753967 .849106 .849091 .753983 .849106 1.3212 
.849091 .472107 .753967 0 ]xsh
190.375 211.951 mo
(work=35)
[1.22607 .849106 .565475 .849106 .957779 .849106 0 ]xsh
190.257 213.892 mo
(I/O: 0->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
166.276 200.767 mo
171.492 202.708 179.498 205.619 184.229 207.438 cv
184.714 207.681 185.32 207.924 186.048 208.288 cv
@
185.927 208.53 mo
187.14 208.773 li
186.169 208.045 li
cp
@
185.927 208.53 mo
187.14 208.773 li
186.169 208.045 li
f
174.525 222.237 mo
174.525 221.031 170.343 220.054 165.184 220.054 cv
160.026 220.054 155.844 221.031 155.844 222.237 cv
155.844 223.443 160.026 224.42 165.184 224.42 cv
170.343 224.42 174.525 223.443 174.525 222.237 cv
@
174.525 222.237 mo
174.525 221.031 170.343 220.054 165.184 220.054 cv
160.026 220.054 155.844 221.031 155.844 222.237 cv
155.844 223.443 160.026 224.42 165.184 224.42 cv
170.343 224.42 174.525 223.443 174.525 222.237 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
157.025 222.625 mo
(roundrobin\(6,26,1,26,5\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 .849091 .424561 .849091 .424561 .849091 .849106 .424545 .849106 0 ]xsh
165.306 224.42 mo
165.548 229.394 166.155 241.281 166.155 247.953 cv
166.155 247.953 166.155 247.953 166.155 337.229 cv
166.155 341.718 167.125 349.359 167.61 353.605 cv
@
167.247 353.241 mo
167.732 354.454 li
167.853 353.241 li
cp
@
167.247 353.241 mo
167.732 354.454 li
167.853 353.241 li
f
134.132 214.838 mo
135.587 215.566 137.043 216.293 138.135 216.657 cv
142.987 218.113 150.871 219.69 156.815 220.781 cv
@
156.451 221.024 mo
157.664 220.903 li
156.451 220.418 li
cp
@
156.451 221.024 mo
157.664 220.903 li
156.451 220.418 li
f
148.566 214.716 mo
149.537 215.566 150.507 216.293 151.235 216.657 cv
153.297 217.749 156.208 218.962 158.877 219.932 cv
@
158.877 220.296 mo
160.09 220.418 li
159.119 219.69 li
cp
@
158.877 220.296 mo
160.09 220.418 li
159.119 219.69 li
f
162.758 215.687 mo
163.122 216.779 163.486 217.87 163.971 218.962 cv
@
163.608 218.962 mo
164.335 220.054 li
164.214 218.841 li
cp
@
163.608 218.962 mo
164.335 220.054 li
164.214 218.841 li
f
173.797 214.716 mo
172.099 216.172 170.158 217.992 168.46 219.326 cv
@
168.338 219.083 mo
167.61 220.054 li
168.702 219.447 li
cp
@
168.338 219.083 mo
167.61 220.054 li
168.702 219.447 li
f
188.11 214.838 mo
186.776 215.566 185.32 216.293 184.229 216.657 cv
181.196 217.87 176.344 219.205 172.341 220.418 cv
@
172.584 220.054 mo
171.492 220.66 li
172.705 220.66 li
cp
@
172.584 220.054 mo
171.492 220.66 li
172.705 220.66 li
f
218.799 58.239 mo
218.799 55.962 216.464 54.1149 213.583 54.1149 cv
210.703 54.1149 208.367 55.962 208.367 58.239 cv
208.367 60.517 210.703 62.364 213.583 62.364 cv
216.464 62.364 218.799 60.517 218.799 58.239 cv
@
218.799 58.239 mo
218.799 55.962 216.464 54.1149 213.583 54.1149 cv
210.703 54.1149 208.367 55.962 208.367 58.239 cv
208.367 60.517 210.703 62.364 213.583 62.364 cv
216.464 62.364 218.799 60.517 218.799 58.239 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
210.471 56.6869 mo
(zero_gen)
[.753983 .753967 .565491 .849091 .849106 .849106 .753967 0 ]xsh
210.51 58.6277 mo
(work=48)
[1.22607 .849106 .565475 .849106 .957779 .849106 0 ]xsh
210.392 60.5685 mo
(I/O: 0->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
220.497 45.382 mo
219.406 47.444 217.707 50.7189 216.252 53.266 cv
@
216.009 53.145 mo
215.645 54.358 li
216.494 53.387 li
cp
@
216.009 53.145 mo
215.645 54.358 li
216.494 53.387 li
f
232.87 58.239 mo
232.87 55.962 230.209 54.1149 226.926 54.1149 cv
223.644 54.1149 220.982 55.962 220.982 58.239 cv
220.982 60.517 223.644 62.364 226.926 62.364 cv
230.209 62.364 232.87 60.517 232.87 58.239 cv
@
232.87 58.239 mo
232.87 55.962 230.209 54.1149 226.926 54.1149 cv
223.644 54.1149 220.982 55.962 220.982 58.239 cv
220.982 60.517 223.644 62.364 226.926 62.364 cv
230.209 62.364 232.87 60.517 232.87 58.239 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
224.285 56.6869 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
223.005 58.6277 mo
(work=4800)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
223.736 60.5685 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
222.438 45.382 mo
223.166 47.444 224.136 50.3549 225.107 53.024 cv
@
224.864 53.145 mo
225.471 54.237 li
225.471 53.024 li
cp
@
224.864 53.145 mo
225.471 54.237 li
225.471 53.024 li
f
245.97 58.239 mo
245.97 55.962 243.526 54.1149 240.512 54.1149 cv
237.497 54.1149 235.053 55.962 235.053 58.239 cv
235.053 60.517 237.497 62.364 240.512 62.364 cv
243.526 62.364 245.97 60.517 245.97 58.239 cv
@
245.97 58.239 mo
245.97 55.962 243.526 54.1149 240.512 54.1149 cv
237.497 54.1149 235.053 55.962 235.053 58.239 cv
235.053 60.517 237.497 62.364 240.512 62.364 cv
243.526 62.364 245.97 60.517 245.97 58.239 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
237.4 56.6869 mo
(zero_gen)
[.753983 .753967 .565491 .849091 .849106 .849106 .753967 0 ]xsh
237.014 58.6277 mo
(work=144)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
237.321 60.5685 mo
(I/O: 0->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
227.047 44.8959 mo
229.716 45.746 232.627 46.9589 234.325 48.293 cv
235.66 49.3849 236.994 51.325 237.964 53.266 cv
@
237.722 53.387 mo
238.571 54.358 li
238.207 53.145 li
cp
@
237.722 53.387 mo
238.571 54.358 li
238.207 53.145 li
f
236.509 73.2809 mo
236.509 72.075 232.49 71.097 227.533 71.097 cv
222.575 71.097 218.556 72.075 218.556 73.2809 cv
218.556 74.486 222.575 75.464 227.533 75.464 cv
232.49 75.464 236.509 74.486 236.509 73.2809 cv
@
236.509 73.2809 mo
236.509 72.075 232.49 71.097 227.533 71.097 cv
222.575 71.097 218.556 72.075 218.556 73.2809 cv
218.556 74.486 222.575 75.464 227.533 75.464 cv
232.49 75.464 236.509 74.486 236.509 73.2809 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
219.797 73.6689 mo
(roundrobin\(16,800,48\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849091 .424561 .849091 .849106 .849106 .424545 .849106 .849091 0 ]xsh
236.751 89.777 mo
236.751 88.572 233.765 87.5939 230.08 87.5939 cv
226.395 87.5939 223.408 88.572 223.408 89.777 cv
223.408 90.983 226.395 91.9609 230.08 91.9609 cv
233.765 91.9609 236.751 90.983 236.751 89.777 cv
@
236.751 89.777 mo
236.751 88.572 233.765 87.5939 230.08 87.5939 cv
226.395 87.5939 223.408 88.572 223.408 89.777 cv
223.408 90.983 226.395 91.9609 230.08 91.9609 cv
233.765 91.9609 236.751 90.983 236.751 89.777 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
224.68 90.1659 mo
(roundrobin\(1,0\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 0 ]xsh
227.897 75.464 mo
228.382 78.254 229.11 83.349 229.595 86.624 cv
@
229.231 86.381 mo
229.716 87.5939 li
229.837 86.381 li
cp
@
229.231 86.381 mo
229.716 87.5939 li
229.837 86.381 li
f
216.737 61.6359 mo
219.163 64.304 222.438 67.822 224.743 70.369 cv
@
224.379 70.491 mo
225.471 71.097 li
224.864 70.006 li
cp
@
224.379 70.491 mo
225.471 71.097 li
224.864 70.006 li
f
227.047 62.364 mo
227.169 64.79 227.29 67.822 227.411 70.127 cv
@
227.169 69.884 mo
227.411 71.097 li
227.775 69.884 li
cp
@
227.169 69.884 mo
227.411 71.097 li
227.775 69.884 li
f
237.479 61.757 mo
235.296 64.304 232.263 67.822 230.08 70.369 cv
@
229.959 70.006 mo
229.473 71.097 li
230.444 70.369 li
cp
@
229.959 70.006 mo
229.473 71.097 li
230.444 70.369 li
f
235.296 103.848 mo
235.296 101.571 232.635 99.724 229.352 99.724 cv
226.07 99.724 223.408 101.571 223.408 103.848 cv
223.408 106.126 226.07 107.972 229.352 107.972 cv
232.635 107.972 235.296 106.126 235.296 103.848 cv
@
235.296 103.848 mo
235.296 101.571 232.635 99.724 229.352 99.724 cv
226.07 99.724 223.408 101.571 223.408 103.848 cv
223.408 106.126 226.07 107.972 229.352 107.972 cv
232.635 107.972 235.296 106.126 235.296 103.848 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
226.711 102.296 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
225.431 104.237 mo
(work=5184)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
226.162 106.178 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
229.959 91.9609 mo
229.837 93.6589 229.716 96.206 229.595 98.5109 cv
@
229.352 98.5109 mo
229.595 99.724 li
229.959 98.5109 li
cp
@
229.352 98.5109 mo
229.595 99.724 li
229.959 98.5109 li
f
256.887 103.848 mo
256.887 100.834 252.543 98.39 247.183 98.39 cv
241.824 98.39 237.479 100.834 237.479 103.848 cv
237.479 106.863 241.824 109.307 247.183 109.307 cv
252.543 109.307 256.887 106.863 256.887 103.848 cv
@
256.887 103.848 mo
256.887 100.834 252.543 98.39 247.183 98.39 cv
241.824 98.39 237.479 100.834 237.479 103.848 cv
237.479 106.863 241.824 109.307 247.183 109.307 cv
252.543 109.307 256.887 106.863 256.887 103.848 cv
.843 .18 .157 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B7D8BE1621F7F8A9A93A327F755C3E81E8F6E5B36D5D09EC27
E8352590DCF5FBB39847107CDCA7E2F69BF8A0E97E902F61DA0FFC19F5F5635E
A2E6B7FBC25C45E39802E8D22E33BC6334A08FAC75B725C0C2D4D8BA4EE1> |-
/U <1C60D8A8C9B6079F675A124E1112F68E116C07D407D6BD729F3D1467FEC9
DB1B717EDCA1CB257898FAA810DC98AD012099D6E27B9582DB9C127CF24AAE1E
5B37683D2BCD64B5A5B8A07FAB5E4A8A80CE7FE3009E0C18967F5352FF3AD65B
1392BE000C7D33B48AEC2DD2A19998C5FE8EA47D78> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 76 /L put
dup 85 /U put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 
/greater 2{/.notdef}rp /A /B /C /D /E /F 
/.notdef /H /I /.notdef /K /L 2{/.notdef}rp /O 
/P /.notdef /R /S /T /U 9{/.notdef}rp /underscore 
/.notdef /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
242.562 101.325 mo
(scramble_seq)
[.660583 .753983 .565491 .753967 1.3212 .849106 .472092 .753983 .849091 .660599 .753967 0 
]xsh
242.837 103.266 mo
(work=44928)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 .849091 0 ]xsh
243.993 105.207 mo
(I/O: 0->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
239.966 107.147 mo
(*** STATEFUL ***)
[.849106 .849091 .849106 .424545 .944199 1.03758 1.22609 1.03758 1.03758 .944199 1.22607 1.0376 
.424545 .849091 .849106 0 ]xsh
232.627 91.84 mo
234.811 93.538 237.964 96.206 240.754 98.5109 cv
@
240.633 98.754 mo
241.725 99.239 li
240.997 98.268 li
cp
@
240.633 98.754 mo
241.725 99.239 li
240.997 98.268 li
f
253.855 117.919 mo
253.855 116.713 250.868 115.736 247.183 115.736 cv
243.499 115.736 240.512 116.713 240.512 117.919 cv
240.512 119.125 243.499 120.102 247.183 120.102 cv
250.868 120.102 253.855 119.125 253.855 117.919 cv
@
253.855 117.919 mo
253.855 116.713 250.868 115.736 247.183 115.736 cv
243.499 115.736 240.512 116.713 240.512 117.919 cv
240.512 119.125 243.499 120.102 247.183 120.102 cv
250.868 120.102 253.855 119.125 253.855 117.919 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
241.783 118.307 mo
(roundrobin\(1,1\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 0 ]xsh
255.432 130.534 mo
255.432 128.257 252.771 126.41 249.488 126.41 cv
246.205 126.41 243.544 128.257 243.544 130.534 cv
243.544 132.812 246.205 134.658 249.488 134.658 cv
252.771 134.658 255.432 132.812 255.432 130.534 cv
@
255.432 130.534 mo
255.432 128.257 252.771 126.41 249.488 126.41 cv
246.205 126.41 243.544 128.257 243.544 130.534 cv
243.544 132.812 246.205 134.658 249.488 134.658 cv
252.771 134.658 255.432 132.812 255.432 130.534 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
246.611 128.982 mo
(xor_pair)
[.849106 .849091 .565491 .849106 .849091 .753983 .472092 0 ]xsh
245.566 130.923 mo
(work=8640)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
246.297 132.864 mo
(I/O: 2->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
247.547 120.102 mo
247.79 121.437 248.275 123.378 248.518 125.197 cv
@
248.275 125.318 mo
248.76 126.41 li
248.76 125.197 li
cp
@
248.275 125.318 mo
248.76 126.41 li
248.76 125.197 li
f
233.112 107.123 mo
234.204 107.972 235.175 108.822 236.024 109.428 cv
237.964 111.005 241.118 113.431 243.544 115.25 cv
@
243.302 115.493 mo
244.515 115.857 li
243.666 115.008 li
cp
@
243.302 115.493 mo
244.515 115.857 li
243.666 115.008 li
f
247.183 109.428 mo
247.183 111.248 247.183 113.067 247.183 114.644 cv
@
246.941 114.523 mo
247.183 115.736 li
247.547 114.523 li
cp
@
246.941 114.523 mo
247.183 115.736 li
247.547 114.523 li
f
263.801 143.149 mo
263.801 140.872 260.706 139.025 256.887 139.025 cv
253.069 139.025 249.973 140.872 249.973 143.149 cv
249.973 145.427 253.069 147.274 256.887 147.274 cv
260.706 147.274 263.801 145.427 263.801 143.149 cv
@
263.801 143.149 mo
263.801 140.872 260.706 139.025 256.887 139.025 cv
253.069 139.025 249.973 140.872 249.973 143.149 cv
249.973 145.427 253.069 147.274 256.887 147.274 cv
260.706 147.274 263.801 145.427 263.801 143.149 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
252.265 141.597 mo
(zero_tail_bits)
[.753983 .753967 .565491 .849091 .849121 .472076 .753998 .472076 .472107 .849091 .849121 .472076 
.472107 0 ]xsh
252.965 143.538 mo
(work=6912)
[1.22607 .849106 .565475 .849106 .957764 .849121 .849091 .849091 0 ]xsh
251.998 145.479 mo
(I/O: 864->864)
[.565491 .472092 1.22607 .472107 .424545 .849091 .849121 .849091 .565491 .957764 .849121 .849091 
0 ]xsh
251.793 134.416 mo
252.399 135.508 253.248 136.963 253.976 138.176 cv
@
253.733 138.297 mo
254.583 139.268 li
254.219 138.055 li
cp
@
253.733 138.297 mo
254.583 139.268 li
254.219 138.055 li
f
277.872 158.191 mo
277.872 155.913 275.102 154.066 271.686 154.066 cv
268.269 154.066 265.5 155.913 265.5 158.191 cv
265.5 160.468 268.269 162.315 271.686 162.315 cv
275.102 162.315 277.872 160.468 277.872 158.191 cv
@
277.872 158.191 mo
277.872 155.913 275.102 154.066 271.686 154.066 cv
268.269 154.066 265.5 155.913 265.5 158.191 cv
265.5 160.468 268.269 162.315 271.686 162.315 cv
275.102 162.315 277.872 160.468 277.872 158.191 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
267.535 156.638 mo
(Anonymous)
[1.22607 .849091 .849121 .849091 .849091 1.3212 .849121 .849091 0 ]xsh
267.764 158.579 mo
(work=5184)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 .849091 0 ]xsh
268.495 160.52 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
260.405 146.667 mo
262.588 148.851 265.257 151.519 267.44 153.824 cv
@
267.198 154.066 mo
268.289 154.673 li
267.683 153.581 li
cp
@
267.198 154.066 mo
268.289 154.673 li
267.683 153.581 li
f
286.242 172.261 mo
286.242 169.247 280.974 166.803 274.476 166.803 cv
267.978 166.803 262.71 169.247 262.71 172.261 cv
262.71 175.276 267.978 177.72 274.476 177.72 cv
280.974 177.72 286.242 175.276 286.242 172.261 cv
@
286.242 172.261 mo
286.242 169.247 280.974 166.803 274.476 166.803 cv
267.978 166.803 262.71 169.247 262.71 172.261 cv
262.71 175.276 267.978 177.72 274.476 177.72 cv
280.974 177.72 286.242 175.276 286.242 172.261 cv
.843 .18 .157 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
268.722 169.738 mo
(conv_code_filter)
[.753967 .849121 .849091 .849091 .849121 .753967 .849091 .849091 .753998 .849091 .565491 .472107 
.472076 .472107 .753967 0 ]xsh
270.129 171.679 mo
(work=40608)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 .849091 .849091 0 ]xsh
271.285 173.62 mo
(I/O: 1->2)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
265.089 175.56 mo
(*** PEEKS 6 AHEAD ***)
[.849091 .849121 .849091 .424561 .944183 1.0376 1.03757 1.22607 .944214 .424561 .849091 .424561 
1.22607 1.22607 1.03757 1.22607 1.22607 .424561 .849091 .849121 0 ]xsh
272.535 162.315 mo
272.778 163.407 273.02 164.62 273.263 165.954 cv
@
272.899 165.59 mo
273.384 166.803 li
273.505 165.59 li
cp
@
272.899 165.59 mo
273.384 166.803 li
273.505 165.59 li
f
280.783 186.332 mo
280.783 184.055 278.122 182.208 274.84 182.208 cv
271.557 182.208 268.896 184.055 268.896 186.332 cv
268.896 188.61 271.557 190.456 274.84 190.456 cv
278.122 190.456 280.783 188.61 280.783 186.332 cv
@
280.783 186.332 mo
280.783 184.055 278.122 182.208 274.84 182.208 cv
271.557 182.208 268.896 184.055 268.896 186.332 cv
268.896 188.61 271.557 190.456 274.84 190.456 cv
278.122 190.456 280.783 188.61 280.783 186.332 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
271.869 184.78 mo
(puncture)
[.849091 .849121 .849091 .753967 .472107 .849091 .565491 0 ]xsh
270.918 186.721 mo
(work=7776)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 .849091 0 ]xsh
271.649 188.662 mo
(I/O: 6->4)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
274.597 177.841 mo
274.597 178.933 274.718 180.025 274.718 180.995 cv
@
274.476 180.995 mo
274.718 182.208 li
275.082 180.995 li
cp
@
274.476 180.995 mo
274.718 182.208 li
275.082 180.995 li
f
296.067 198.947 mo
296.067 197.742 287.975 196.764 277.993 196.764 cv
268.012 196.764 259.92 197.742 259.92 198.947 cv
259.92 200.153 268.012 201.131 277.993 201.131 cv
287.975 201.131 296.067 200.153 296.067 198.947 cv
@
296.067 198.947 mo
296.067 197.742 287.975 196.764 277.993 196.764 cv
268.012 196.764 259.92 197.742 259.92 198.947 cv
259.92 200.153 268.012 201.131 277.993 201.131 cv
287.975 201.131 296.067 200.153 296.067 198.947 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
261.131 199.336 mo
(roundrobin\(16,16,16,16,16,16,16,16,16,16,16,16\))
[.565491 .849091 .849121 .849091 .849091 .565491 .849091 .849121 .472076 .849121 .565491 .849091 
.849091 .424561 .849091 .849121 .42453 .849121 .849091 .42453 .849121 .849091 .424561 .849091 
.849091 .424561 .849091 .849121 .42453 .849121 .849091 .424561 .849091 .849091 .424561 .849091 
.849091 .424561 .849091 .849121 .42453 .849121 .849091 .424561 .849091 .849091 0 ]xsh
275.81 190.456 mo
276.295 192.155 276.78 194.095 277.144 195.672 cv
@
276.78 195.672 mo
277.387 196.764 li
277.387 195.551 li
cp
@
276.78 195.672 mo
277.387 196.764 li
277.387 195.551 li
f
217.95 211.563 mo
217.95 209.285 215.506 207.438 212.491 207.438 cv
209.477 207.438 207.033 209.285 207.033 211.563 cv
207.033 213.84 209.477 215.687 212.491 215.687 cv
215.506 215.687 217.95 213.84 217.95 211.563 cv
@
217.95 211.563 mo
217.95 209.285 215.506 207.438 212.491 207.438 cv
209.477 207.438 207.033 209.285 207.033 211.563 cv
207.033 213.84 209.477 215.687 212.491 215.687 cv
215.506 215.687 217.95 213.84 217.95 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
209.85 210.01 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
208.994 211.951 mo
(work=576)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
209.301 213.892 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
265.985 200.524 mo
250.58 202.708 225.349 206.225 218.678 207.438 cv
218.193 207.56 217.586 207.802 216.98 208.045 cv
@
217.101 207.56 mo
216.252 208.53 li
217.465 208.166 li
cp
@
217.101 207.56 mo
216.252 208.53 li
217.465 208.166 li
f
231.05 211.563 mo
231.05 209.285 228.606 207.438 225.592 207.438 cv
222.577 207.438 220.133 209.285 220.133 211.563 cv
220.133 213.84 222.577 215.687 225.592 215.687 cv
228.606 215.687 231.05 213.84 231.05 211.563 cv
@
231.05 211.563 mo
231.05 209.285 228.606 207.438 225.592 207.438 cv
222.577 207.438 220.133 209.285 220.133 211.563 cv
220.133 213.84 222.577 215.687 225.592 215.687 cv
228.606 215.687 231.05 213.84 231.05 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
222.95 210.01 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
222.094 211.951 mo
(work=576)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
222.401 213.892 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
267.683 200.767 mo
255.674 202.829 236.751 206.225 231.778 207.438 cv
231.293 207.56 230.686 207.802 230.08 208.045 cv
@
230.201 207.56 mo
229.352 208.53 li
230.565 208.166 li
cp
@
230.201 207.56 mo
229.352 208.53 li
230.565 208.166 li
f
244.151 211.563 mo
244.151 209.285 241.707 207.438 238.692 207.438 cv
235.678 207.438 233.234 209.285 233.234 211.563 cv
233.234 213.84 235.678 215.687 238.692 215.687 cv
241.707 215.687 244.151 213.84 244.151 211.563 cv
@
244.151 211.563 mo
244.151 209.285 241.707 207.438 238.692 207.438 cv
235.678 207.438 233.234 209.285 233.234 211.563 cv
233.234 213.84 235.678 215.687 238.692 215.687 cv
241.707 215.687 244.151 213.84 244.151 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
236.051 210.01 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
235.195 211.951 mo
(work=576)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
235.502 213.892 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
269.745 200.888 mo
262.224 202.708 251.429 205.376 244.879 207.438 cv
244.393 207.56 243.908 207.924 243.302 208.166 cv
@
243.423 207.681 mo
242.574 208.651 li
243.787 208.288 li
cp
@
243.423 207.681 mo
242.574 208.651 li
243.787 208.288 li
f
257.251 211.563 mo
257.251 209.285 254.807 207.438 251.793 207.438 cv
248.778 207.438 246.334 209.285 246.334 211.563 cv
246.334 213.84 248.778 215.687 251.793 215.687 cv
254.807 215.687 257.251 213.84 257.251 211.563 cv
@
257.251 211.563 mo
257.251 209.285 254.807 207.438 251.793 207.438 cv
248.778 207.438 246.334 209.285 246.334 211.563 cv
246.334 213.84 248.778 215.687 251.793 215.687 cv
254.807 215.687 257.251 213.84 257.251 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
249.151 210.01 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
248.295 211.951 mo
(work=576)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
248.602 213.892 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
272.778 201.01 mo
268.289 202.95 261.861 205.619 257.979 207.438 cv
257.615 207.681 257.009 207.924 256.523 208.166 cv
@
256.645 207.681 mo
255.796 208.651 li
257.009 208.288 li
cp
@
256.645 207.681 mo
255.796 208.651 li
257.009 208.288 li
f
270.352 211.563 mo
270.352 209.285 267.908 207.438 264.893 207.438 cv
261.878 207.438 259.435 209.285 259.435 211.563 cv
259.435 213.84 261.878 215.687 264.893 215.687 cv
267.908 215.687 270.352 213.84 270.352 211.563 cv
@
270.352 211.563 mo
270.352 209.285 267.908 207.438 264.893 207.438 cv
261.878 207.438 259.435 209.285 259.435 211.563 cv
259.435 213.84 261.878 215.687 264.893 215.687 cv
267.908 215.687 270.352 213.84 270.352 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
262.252 210.01 mo
(Identity)
[.565491 .849091 .753967 .849121 .472107 .472076 .472107 0 ]xsh
261.396 211.951 mo
(work=576)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 0 ]xsh
261.703 213.892 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
275.689 201.131 mo
273.869 202.829 271.322 205.376 269.139 207.438 cv
@
268.896 207.196 mo
268.289 208.288 li
269.381 207.681 li
cp
@
268.896 207.196 mo
268.289 208.288 li
269.381 207.681 li
f
283.452 211.563 mo
283.452 209.285 281.008 207.438 277.993 207.438 cv
274.979 207.438 272.535 209.285 272.535 211.563 cv
272.535 213.84 274.979 215.687 277.993 215.687 cv
281.008 215.687 283.452 213.84 283.452 211.563 cv
@
283.452 211.563 mo
283.452 209.285 281.008 207.438 277.993 207.438 cv
274.979 207.438 272.535 209.285 272.535 211.563 cv
272.535 213.84 274.979 215.687 277.993 215.687 cv
281.008 215.687 283.452 213.84 283.452 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
275.352 210.01 mo
(Identity)
[.565491 .849091 .753967 .849121 .472107 .472076 .472107 0 ]xsh
274.496 211.951 mo
(work=576)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 0 ]xsh
274.803 213.892 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
277.993 201.131 mo
277.993 202.465 277.993 204.406 277.993 206.104 cv
@
277.751 206.225 mo
277.993 207.438 li
278.357 206.225 li
cp
@
277.751 206.225 mo
277.993 207.438 li
278.357 206.225 li
f
296.552 211.563 mo
296.552 209.285 294.108 207.438 291.094 207.438 cv
288.079 207.438 285.635 209.285 285.635 211.563 cv
285.635 213.84 288.079 215.687 291.094 215.687 cv
294.108 215.687 296.552 213.84 296.552 211.563 cv
@
296.552 211.563 mo
296.552 209.285 294.108 207.438 291.094 207.438 cv
288.079 207.438 285.635 209.285 285.635 211.563 cv
285.635 213.84 288.079 215.687 291.094 215.687 cv
294.108 215.687 296.552 213.84 296.552 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
288.452 210.01 mo
(Identity)
[.565491 .849091 .753967 .849121 .472107 .472076 .472107 0 ]xsh
287.596 211.951 mo
(work=576)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 0 ]xsh
287.903 213.892 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
280.298 201.131 mo
282.118 202.829 284.665 205.376 286.848 207.438 cv
@
286.606 207.681 mo
287.697 208.288 li
287.091 207.196 li
cp
@
286.606 207.681 mo
287.697 208.288 li
287.091 207.196 li
f
309.653 211.563 mo
309.653 209.285 307.209 207.438 304.194 207.438 cv
301.18 207.438 298.736 209.285 298.736 211.563 cv
298.736 213.84 301.18 215.687 304.194 215.687 cv
307.209 215.687 309.653 213.84 309.653 211.563 cv
@
309.653 211.563 mo
309.653 209.285 307.209 207.438 304.194 207.438 cv
301.18 207.438 298.736 209.285 298.736 211.563 cv
298.736 213.84 301.18 215.687 304.194 215.687 cv
307.209 215.687 309.653 213.84 309.653 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
301.553 210.01 mo
(Identity)
[.565491 .849091 .753967 .849121 .472107 .472076 .472107 0 ]xsh
300.697 211.951 mo
(work=576)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 0 ]xsh
301.004 213.892 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
283.088 201.01 mo
287.576 202.95 294.126 205.619 298.008 207.438 cv
298.372 207.681 298.857 207.924 299.464 208.288 cv
@
298.978 208.409 mo
300.191 208.773 li
299.342 207.802 li
cp
@
298.978 208.409 mo
300.191 208.773 li
299.342 207.802 li
f
322.753 211.563 mo
322.753 209.285 320.309 207.438 317.295 207.438 cv
314.28 207.438 311.836 209.285 311.836 211.563 cv
311.836 213.84 314.28 215.687 317.295 215.687 cv
320.309 215.687 322.753 213.84 322.753 211.563 cv
@
322.753 211.563 mo
322.753 209.285 320.309 207.438 317.295 207.438 cv
314.28 207.438 311.836 209.285 311.836 211.563 cv
311.836 213.84 314.28 215.687 317.295 215.687 cv
320.309 215.687 322.753 213.84 322.753 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
314.653 210.01 mo
(Identity)
[.565491 .849091 .753967 .849121 .472107 .472076 .472107 0 ]xsh
313.797 211.951 mo
(work=576)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 0 ]xsh
314.104 213.892 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
286.242 200.888 mo
293.641 202.708 304.437 205.376 311.108 207.438 cv
311.594 207.56 312.079 207.924 312.685 208.166 cv
@
312.2 208.288 mo
313.413 208.651 li
312.564 207.681 li
cp
@
312.2 208.288 mo
313.413 208.651 li
312.564 207.681 li
f
335.854 211.563 mo
335.854 209.285 333.41 207.438 330.395 207.438 cv
327.38 207.438 324.937 209.285 324.937 211.563 cv
324.937 213.84 327.38 215.687 330.395 215.687 cv
333.41 215.687 335.854 213.84 335.854 211.563 cv
@
335.854 211.563 mo
335.854 209.285 333.41 207.438 330.395 207.438 cv
327.38 207.438 324.937 209.285 324.937 211.563 cv
324.937 213.84 327.38 215.687 330.395 215.687 cv
333.41 215.687 335.854 213.84 335.854 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
327.754 210.01 mo
(Identity)
[.565491 .849091 .753967 .849121 .472107 .472076 .472107 0 ]xsh
326.898 211.951 mo
(work=576)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 0 ]xsh
327.205 213.892 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
288.061 200.767 mo
300.798 203.072 321.54 206.832 324.209 207.438 cv
324.694 207.56 325.3 207.802 325.786 208.166 cv
@
325.3 208.288 mo
326.513 208.651 li
325.664 207.681 li
cp
@
325.3 208.288 mo
326.513 208.651 li
325.664 207.681 li
f
348.954 211.563 mo
348.954 209.285 346.51 207.438 343.495 207.438 cv
340.481 207.438 338.037 209.285 338.037 211.563 cv
338.037 213.84 340.481 215.687 343.495 215.687 cv
346.51 215.687 348.954 213.84 348.954 211.563 cv
@
348.954 211.563 mo
348.954 209.285 346.51 207.438 343.495 207.438 cv
340.481 207.438 338.037 209.285 338.037 211.563 cv
338.037 213.84 340.481 215.687 343.495 215.687 cv
346.51 215.687 348.954 213.84 348.954 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
340.854 210.01 mo
(Identity)
[.565491 .849091 .753967 .849121 .472107 .472076 .472107 0 ]xsh
339.998 211.951 mo
(work=576)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 0 ]xsh
340.305 213.892 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
289.76 200.646 mo
306.014 202.95 333.791 206.832 337.309 207.438 cv
337.794 207.56 338.401 207.802 339.007 208.045 cv
@
338.522 208.166 mo
339.735 208.53 li
338.886 207.56 li
cp
@
338.522 208.166 mo
339.735 208.53 li
338.886 207.56 li
f
362.054 211.563 mo
362.054 209.285 359.61 207.438 356.596 207.438 cv
353.581 207.438 351.137 209.285 351.137 211.563 cv
351.137 213.84 353.581 215.687 356.596 215.687 cv
359.61 215.687 362.054 213.84 362.054 211.563 cv
@
362.054 211.563 mo
362.054 209.285 359.61 207.438 356.596 207.438 cv
353.581 207.438 351.137 209.285 351.137 211.563 cv
351.137 213.84 353.581 215.687 356.596 215.687 cv
359.61 215.687 362.054 213.84 362.054 211.563 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
353.954 210.01 mo
(Identity)
[.565491 .849091 .753967 .849121 .472107 .472076 .472107 0 ]xsh
353.098 211.951 mo
(work=576)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 0 ]xsh
353.405 213.892 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
291.336 200.403 mo
309.774 202.465 342.04 206.104 350.41 207.438 cv
350.895 207.56 351.501 207.802 352.108 208.045 cv
@
351.623 208.166 mo
352.836 208.53 li
351.986 207.56 li
cp
@
351.623 208.166 mo
352.836 208.53 li
351.986 207.56 li
f
290.973 222.237 mo
290.973 221.031 285.162 220.054 277.993 220.054 cv
270.825 220.054 265.014 221.031 265.014 222.237 cv
265.014 223.443 270.825 224.42 277.993 224.42 cv
285.162 224.42 290.973 223.443 290.973 222.237 cv
@
290.973 222.237 mo
290.973 221.031 285.162 220.054 277.993 220.054 cv
270.825 220.054 265.014 221.031 265.014 222.237 cv
265.014 223.443 270.825 224.42 277.993 224.42 cv
285.162 224.42 290.973 223.443 290.973 222.237 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
266.225 222.625 mo
(roundrobin\(1,1,1,1,1,1,1,1,1,1,1,1\))
[.565491 .849091 .849121 .849091 .849091 .565491 .849091 .849121 .472076 .849121 .565491 .849091 
.424561 .849091 .424561 .849091 .424561 .849091 .424561 .849091 .42453 .849121 .42453 .849121 
.42453 .849121 .42453 .849121 .42453 .849121 .42453 .849121 .42453 .849121 0 ]xsh
285.271 235.337 mo
285.271 234.132 281.904 233.154 277.751 233.154 cv
273.597 233.154 270.23 234.132 270.23 235.337 cv
270.23 236.543 273.597 237.521 277.751 237.521 cv
281.904 237.521 285.271 236.543 285.271 235.337 cv
@
285.271 235.337 mo
285.271 234.132 281.904 233.154 277.751 233.154 cv
273.597 233.154 270.23 234.132 270.23 235.337 cv
270.23 236.543 273.597 237.521 277.751 237.521 cv
281.904 237.521 285.271 236.543 285.271 235.337 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
271.502 235.726 mo
(roundrobin\(12,12\))
[.565491 .849091 .849121 .849091 .849091 .565491 .849091 .849121 .472076 .849121 .565491 .849091 
.849091 .424561 .849091 .849121 0 ]xsh
277.993 224.42 mo
277.872 226.483 277.872 229.636 277.751 232.062 cv
@
277.508 231.941 mo
277.751 233.154 li
278.115 231.941 li
cp
@
277.508 231.941 mo
277.751 233.154 li
278.115 231.941 li
f
215.645 214.959 mo
216.616 215.808 217.707 216.536 218.678 216.657 cv
230.929 218.719 251.307 220.418 264.65 221.267 cv
@
264.65 221.509 mo
265.863 221.388 li
264.65 221.024 li
cp
@
264.65 221.509 mo
265.863 221.388 li
264.65 221.024 li
f
228.746 214.959 mo
229.716 215.808 230.808 216.536 231.778 216.657 cv
240.754 218.598 255.189 220.054 265.5 221.145 cv
@
265.257 221.388 mo
266.47 221.267 li
265.257 220.781 li
cp
@
265.257 221.388 mo
266.47 221.267 li
265.257 220.781 li
f
241.967 214.959 mo
242.816 215.687 243.908 216.415 244.879 216.657 cv
250.58 218.234 259.556 219.811 266.713 220.781 cv
@
266.47 221.024 mo
267.683 220.903 li
266.47 220.418 li
cp
@
266.47 221.024 mo
267.683 220.903 li
266.47 220.418 li
f
255.189 214.838 mo
256.038 215.566 257.13 216.293 257.979 216.657 cv
260.89 217.87 265.5 219.205 269.502 220.175 cv
@
269.139 220.418 mo
270.352 220.418 li
269.26 219.811 li
cp
@
269.139 220.418 mo
270.352 220.418 li
269.26 219.811 li
f
268.653 214.595 mo
270.473 216.051 272.656 217.87 274.476 219.326 cv
@
274.233 219.447 mo
275.325 220.054 li
274.597 219.083 li
cp
@
274.233 219.447 mo
275.325 220.054 li
274.597 219.083 li
f
277.993 215.687 mo
277.993 216.779 277.993 217.87 277.993 218.962 cv
@
277.751 218.841 mo
277.993 220.054 li
278.357 218.841 li
cp
@
277.751 218.841 mo
277.993 220.054 li
278.357 218.841 li
f
287.334 214.595 mo
285.514 216.051 283.331 217.87 281.511 219.326 cv
@
281.39 219.083 mo
280.662 220.054 li
281.754 219.447 li
cp
@
281.39 219.083 mo
280.662 220.054 li
281.754 219.447 li
f
300.798 214.838 mo
299.827 215.566 298.857 216.293 298.008 216.657 cv
294.975 217.87 290.366 219.205 286.363 220.175 cv
@
286.606 219.811 mo
285.514 220.418 li
286.727 220.418 li
cp
@
286.606 219.811 mo
285.514 220.418 li
286.727 220.418 li
f
314.02 214.838 mo
313.049 215.687 312.079 216.415 311.108 216.657 cv
305.286 218.234 296.431 219.69 289.274 220.781 cv
@
289.517 220.418 mo
288.304 220.903 li
289.517 221.024 li
cp
@
289.517 220.418 mo
288.304 220.903 li
289.517 221.024 li
f
327.241 214.959 mo
326.15 215.808 325.179 216.536 324.209 216.657 cv
315.111 218.598 300.677 220.054 290.487 221.145 cv
@
290.73 220.781 mo
289.517 221.267 li
290.73 221.388 li
cp
@
290.73 220.781 mo
289.517 221.267 li
290.73 221.388 li
f
340.342 214.959 mo
339.371 215.808 338.28 216.536 337.309 216.657 cv
324.937 218.719 304.679 220.418 291.336 221.267 cv
@
291.336 221.024 mo
290.123 221.388 li
291.336 221.509 li
cp
@
291.336 221.024 mo
290.123 221.388 li
291.336 221.509 li
f
353.442 214.959 mo
352.472 215.808 351.38 216.536 350.41 216.657 cv
334.398 218.841 307.469 220.539 291.336 221.631 cv
@
291.579 221.267 mo
290.366 221.631 li
291.579 221.873 li
cp
@
291.579 221.267 mo
290.366 221.631 li
291.579 221.873 li
f
271.201 247.953 mo
271.201 245.675 268.54 243.828 265.257 243.828 cv
261.974 243.828 259.313 245.675 259.313 247.953 cv
259.313 250.23 261.974 252.077 265.257 252.077 cv
268.54 252.077 271.201 250.23 271.201 247.953 cv
@
271.201 247.953 mo
271.201 245.675 268.54 243.828 265.257 243.828 cv
261.974 243.828 259.313 245.675 259.313 247.953 cv
259.313 250.23 261.974 252.077 265.257 252.077 cv
268.54 252.077 271.201 250.23 271.201 247.953 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
262.615 246.4 mo
(Identity)
[.565491 .849091 .753967 .849121 .472107 .472076 .472107 0 ]xsh
261.335 248.341 mo
(work=3456)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 .849091 0 ]xsh
262.066 250.282 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
275.689 237.521 mo
273.991 239.219 271.565 241.524 269.502 243.707 cv
@
269.26 243.465 mo
268.653 244.556 li
269.745 243.95 li
cp
@
269.26 243.465 mo
268.653 244.556 li
269.745 243.95 li
f
285.271 247.953 mo
285.271 245.675 282.61 243.828 279.328 243.828 cv
276.045 243.828 273.384 245.675 273.384 247.953 cv
273.384 250.23 276.045 252.077 279.328 252.077 cv
282.61 252.077 285.271 250.23 285.271 247.953 cv
@
285.271 247.953 mo
285.271 245.675 282.61 243.828 279.328 243.828 cv
276.045 243.828 273.384 245.675 273.384 247.953 cv
273.384 250.23 276.045 252.077 279.328 252.077 cv
282.61 252.077 285.271 250.23 285.271 247.953 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
277.583 246.4 mo
(swap)
[.660583 1.22607 .753967 0 ]xsh
275.406 248.341 mo
(work=3456)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 .849091 0 ]xsh
276.137 250.282 mo
(I/O: 2->2)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
277.993 237.521 mo
278.236 238.976 278.357 241.039 278.721 242.979 cv
@
278.357 242.615 mo
278.843 243.828 li
278.964 242.615 li
cp
@
278.357 242.615 mo
278.843 243.828 li
278.964 242.615 li
f
274.354 258.627 mo
274.354 257.421 270.987 256.444 266.834 256.444 cv
262.68 256.444 259.313 257.421 259.313 258.627 cv
259.313 259.833 262.68 260.81 266.834 260.81 cv
270.987 260.81 274.354 259.833 274.354 258.627 cv
@
274.354 258.627 mo
274.354 257.421 270.987 256.444 266.834 256.444 cv
262.68 256.444 259.313 257.421 259.313 258.627 cv
259.313 259.833 262.68 260.81 266.834 260.81 cv
270.987 260.81 274.354 259.833 274.354 258.627 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
260.585 259.015 mo
(roundrobin\(12,12\))
[.565491 .849091 .849121 .849091 .849091 .565491 .849091 .849121 .472076 .849121 .565491 .849091 
.849091 .424561 .849091 .849121 0 ]xsh
273.02 269.301 mo
273.02 267.024 270.196 265.177 266.713 265.177 cv
263.229 265.177 260.405 267.024 260.405 269.301 cv
260.405 271.579 263.229 273.426 266.713 273.426 cv
270.196 273.426 273.02 271.579 273.02 269.301 cv
@
273.02 269.301 mo
273.02 267.024 270.196 265.177 266.713 265.177 cv
263.229 265.177 260.405 267.024 260.405 269.301 cv
260.405 271.579 263.229 273.426 266.713 273.426 cv
270.196 273.426 273.02 271.579 273.02 269.301 cv
.992 .667 .384 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQK+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B59F85E7C3D982C036A83A051CFEB65CDD644D44695DA87381
2F9E0DA4474B3DF6D63B3341F86CDE23D0512CA425D085DC5BA255E6B3240439
E201FEC100F452F18CDA5E088317BF79F4C8FC952A839FE77A57A286C006FAF4
6CE1F964CD62165C424C020FEAD96AC86FEFFC256D> |-
/Q <1C60D8A8C9B6079F258D65BC2331B95A48C80B9768E78495F9F852D084FE
B5569E0998B92A8C02FE98CC8756B9450AFC22EB75A028A68EEC267535515B8A
7AF5FA296BEEAF84AC729826043DC76CC7E6AEDD8E5722CD3906055C50935FC9
A9E5D884988B49C45AA5CE390B6810BD47B8089DA8CFB16CD03A129E9C7C7933
9702030A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQK+TimesNewRomanPSMT /Encoding get
dup 77 /M put
dup 81 /Q put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQK+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 2{/.notdef}rp /equal 
/greater 2{/.notdef}rp /A /B /C /D /E /F 
/.notdef /H /I /.notdef /K /L /M /.notdef 
/O /P /Q /R /S /T /U 9{/.notdef}rp 
/underscore /.notdef /a /b /c /d /e /f 
/g /h /i /.notdef /k /l /m /n 
/o /p /q /r /s /t /u /v 
/w /x /y /z 133{/.notdef}rp]
LTFDQK+TimesNewRomanPSMT nf
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
264.732 267.749 mo
(QAM)
[1.22607 1.22607 0 ]xsh
262.366 269.69 mo
(work=33120)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 .849091 .849091 0 ]xsh
263.522 271.631 mo
(I/O: 4->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
266.834 260.81 mo
266.834 261.66 266.713 262.873 266.713 263.964 cv
@
266.47 263.964 mo
266.713 265.177 li
267.076 263.964 li
cp
@
266.47 263.964 mo
266.713 265.177 li
267.076 263.964 li
f
265.863 252.077 mo
265.985 253.169 266.227 254.26 266.349 255.352 cv
@
265.985 255.231 mo
266.47 256.444 li
266.591 255.231 li
cp
@
265.985 255.231 mo
266.47 256.444 li
266.591 255.231 li
f
275.567 251.106 mo
273.748 252.683 271.807 254.382 270.109 255.837 cv
@
269.988 255.595 mo
269.26 256.565 li
270.352 255.958 li
cp
@
269.988 255.595 mo
269.26 256.565 li
270.352 255.958 li
f
273.384 280.461 mo
273.384 279.255 270.234 278.278 266.349 278.278 cv
262.463 278.278 259.313 279.255 259.313 280.461 cv
259.313 281.667 262.463 282.644 266.349 282.644 cv
270.234 282.644 273.384 281.667 273.384 280.461 cv
@
273.384 280.461 mo
273.384 279.255 270.234 278.278 266.349 278.278 cv
262.463 278.278 259.313 279.255 259.313 280.461 cv
259.313 281.667 262.463 282.644 266.349 282.644 cv
270.234 282.644 273.384 281.667 273.384 280.461 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
260.524 280.849 mo
(roundrobin\(48,0\))
[.565491 .849091 .849121 .849091 .849091 .565491 .849091 .849121 .472076 .849121 .565491 .849091 
.849091 .424561 .849091 0 ]xsh
266.591 273.426 mo
266.47 274.639 266.47 275.973 266.47 277.186 cv
@
266.227 277.065 mo
266.47 278.278 li
266.834 277.065 li
cp
@
266.227 277.065 mo
266.47 278.278 li
266.834 277.065 li
f
254.461 292.591 mo
254.461 290.313 251.8 288.467 248.518 288.467 cv
245.235 288.467 242.574 290.313 242.574 292.591 cv
242.574 294.869 245.235 296.715 248.518 296.715 cv
251.8 296.715 254.461 294.869 254.461 292.591 cv
@
254.461 292.591 mo
254.461 290.313 251.8 288.467 248.518 288.467 cv
245.235 288.467 242.574 290.313 242.574 292.591 cv
242.574 294.869 245.235 296.715 248.518 296.715 cv
251.8 296.715 254.461 294.869 254.461 292.591 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
245.876 291.038 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
244.596 292.979 mo
(work=1728)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
245.327 294.92 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
263.316 282.402 mo
261.982 283.251 260.648 284.1 259.677 284.585 cv
258.1 285.556 256.523 286.041 255.189 287.011 cv
254.583 287.375 253.976 287.982 253.248 288.467 cv
@
253.006 288.346 mo
252.278 289.316 li
253.37 288.709 li
cp
@
253.006 288.346 mo
252.278 289.316 li
253.37 288.709 li
f
276.053 292.591 mo
276.053 289.576 271.708 287.133 266.349 287.133 cv
260.989 287.133 256.645 289.576 256.645 292.591 cv
256.645 295.606 260.989 298.05 266.349 298.05 cv
271.708 298.05 276.053 295.606 276.053 292.591 cv
@
276.053 292.591 mo
276.053 289.576 271.708 287.133 266.349 287.133 cv
260.989 287.133 256.645 289.576 256.645 292.591 cv
256.645 295.606 260.989 298.05 266.349 298.05 cv
271.708 298.05 276.053 295.606 276.053 292.591 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
261.161 290.068 mo
(pilot_generator)
[.849091 .472107 .472107 .849091 .472107 .849091 .849091 .753998 .849091 .753967 .565491 .753967 
.472107 .849121 0 ]xsh
262.427 292.009 mo
(work=1350)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 .849091 0 ]xsh
263.158 293.95 mo
(I/O: 0->4)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
259.132 295.89 mo
(*** STATEFUL ***)
[.849091 .849121 .849091 .424561 .944183 1.0376 1.22607 1.03757 1.0376 .944214 1.22607 1.03757 
.424561 .849091 .849121 0 ]xsh
266.349 282.644 mo
266.349 283.494 266.349 284.585 266.349 285.677 cv
@
266.106 285.798 mo
266.349 287.011 li
266.713 285.798 li
cp
@
266.106 285.798 mo
266.349 287.011 li
266.713 285.798 li
f
256.645 304.721 mo
256.645 303.515 253.495 302.538 249.609 302.538 cv
245.724 302.538 242.574 303.515 242.574 304.721 cv
242.574 305.927 245.724 306.904 249.609 306.904 cv
253.495 306.904 256.645 305.927 256.645 304.721 cv
@
256.645 304.721 mo
256.645 303.515 253.495 302.538 249.609 302.538 cv
245.724 302.538 242.574 303.515 242.574 304.721 cv
242.574 305.927 245.724 306.904 249.609 306.904 cv
253.495 306.904 256.645 305.927 256.645 304.721 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
243.784 305.109 mo
(roundrobin\(48,4\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849091 .424561 .849091 0 ]xsh
254.825 315.395 mo
254.825 313.118 252.055 311.271 248.639 311.271 cv
245.222 311.271 242.453 313.118 242.453 315.395 cv
242.453 317.673 245.222 319.52 248.639 319.52 cv
252.055 319.52 254.825 317.673 254.825 315.395 cv
@
254.825 315.395 mo
254.825 313.118 252.055 311.271 248.639 311.271 cv
245.222 311.271 242.453 313.118 242.453 315.395 cv
242.453 317.673 245.222 319.52 248.639 319.52 cv
252.055 319.52 254.825 317.673 254.825 315.395 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
244.488 313.843 mo
(Anonymous)
[1.22607 .849106 .849091 .849106 .849091 1.32121 .849091 .849106 0 ]xsh
244.717 315.784 mo
(work=2658)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
244.599 317.725 mo
(I/O: 52->52)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 .849106 0 ]xsh
249.367 306.904 mo
249.245 307.754 249.245 308.967 249.124 310.058 cv
@
248.881 310.058 mo
249.003 311.271 li
249.367 310.058 li
cp
@
248.881 310.058 mo
249.003 311.271 li
249.367 310.058 li
f
248.881 296.715 mo
249.124 298.292 249.245 299.99 249.245 301.446 cv
@
248.881 301.325 mo
249.367 302.538 li
249.488 301.325 li
cp
@
248.881 301.325 mo
249.367 302.538 li
249.488 301.325 li
f
260.405 296.958 mo
258.1 298.656 255.31 300.597 253.248 302.052 cv
@
253.248 301.689 mo
252.399 302.659 li
253.612 302.174 li
cp
@
253.248 301.689 mo
252.399 302.659 li
253.612 302.174 li
f
257.494 326.555 mo
257.494 325.349 253.312 324.372 248.154 324.372 cv
242.995 324.372 238.814 325.349 238.814 326.555 cv
238.814 327.761 242.995 328.738 248.154 328.738 cv
253.312 328.738 257.494 327.761 257.494 326.555 cv
@
257.494 326.555 mo
257.494 325.349 253.312 324.372 248.154 324.372 cv
242.995 324.372 238.814 325.349 238.814 326.555 cv
238.814 327.761 242.995 328.738 248.154 328.738 cv
253.312 328.738 257.494 327.761 257.494 326.555 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
239.994 326.943 mo
(roundrobin\(0,26,0,26,0\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 .849091 .424561 .849091 .424561 .849091 .849106 .424545 .849106 0 ]xsh
248.518 319.52 mo
248.396 320.733 248.275 322.067 248.275 323.28 cv
@
248.032 323.159 mo
248.275 324.372 li
248.639 323.159 li
cp
@
248.032 323.159 mo
248.275 324.372 li
248.639 323.159 li
f
224.258 337.229 mo
224.258 334.952 220.456 333.105 215.767 333.105 cv
211.077 333.105 207.276 334.952 207.276 337.229 cv
207.276 339.507 211.077 341.354 215.767 341.354 cv
220.456 341.354 224.258 339.507 224.258 337.229 cv
@
224.258 337.229 mo
224.258 334.952 220.456 333.105 215.767 333.105 cv
211.077 333.105 207.276 334.952 207.276 337.229 cv
207.276 339.507 211.077 341.354 215.767 341.354 cv
220.456 341.354 224.258 339.507 224.258 337.229 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
209.306 335.677 mo
(zero_gen_complex)
[.753983 .753967 .565491 .849091 .849106 .849106 .753967 .849106 .849091 .753983 .849106 1.3212 
.849091 .472107 .753967 0 ]xsh
212.269 337.618 mo
(work=252)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
212.576 339.559 mo
(I/O: 0->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
241.967 328.253 mo
236.751 329.588 229.473 331.65 224.985 333.105 cv
224.379 333.348 223.53 333.59 222.681 333.954 cv
@
222.802 333.59 mo
221.832 334.318 li
223.045 334.076 li
cp
@
222.802 333.59 mo
221.832 334.318 li
223.045 334.076 li
f
237.358 337.229 mo
237.358 334.952 234.914 333.105 231.899 333.105 cv
228.885 333.105 226.441 334.952 226.441 337.229 cv
226.441 339.507 228.885 341.354 231.899 341.354 cv
234.914 341.354 237.358 339.507 237.358 337.229 cv
@
237.358 337.229 mo
237.358 334.952 234.914 333.105 231.899 333.105 cv
228.885 333.105 226.441 334.952 226.441 337.229 cv
226.441 339.507 228.885 341.354 231.899 341.354 cv
234.914 341.354 237.358 339.507 237.358 337.229 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
229.258 335.677 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
228.402 337.618 mo
(work=936)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
228.709 339.559 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
245 328.617 mo
242.695 330.073 239.663 332.256 236.994 333.954 cv
@
236.873 333.712 mo
236.024 334.561 li
237.237 334.197 li
cp
@
236.873 333.712 mo
236.024 334.561 li
237.237 334.197 li
f
256.523 337.229 mo
256.523 334.952 252.722 333.105 248.032 333.105 cv
243.343 333.105 239.541 334.952 239.541 337.229 cv
239.541 339.507 243.343 341.354 248.032 341.354 cv
252.722 341.354 256.523 339.507 256.523 337.229 cv
@
256.523 337.229 mo
256.523 334.952 252.722 333.105 248.032 333.105 cv
243.343 333.105 239.541 334.952 239.541 337.229 cv
239.541 339.507 243.343 341.354 248.032 341.354 cv
252.722 341.354 256.523 339.507 256.523 337.229 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
241.572 335.677 mo
(zero_gen_complex)
[.753983 .753967 .565491 .849091 .849106 .849106 .753967 .849106 .849091 .753983 .849106 1.3212 
.849091 .472107 .753967 0 ]xsh
244.96 337.618 mo
(work=42)
[1.22607 .849106 .565475 .849106 .957779 .849106 0 ]xsh
244.842 339.559 mo
(I/O: 0->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
248.154 328.738 mo
248.154 329.588 248.032 330.801 248.032 331.892 cv
@
247.79 331.892 mo
248.032 333.105 li
248.396 331.892 li
cp
@
247.79 331.892 mo
248.032 333.105 li
248.396 331.892 li
f
269.624 337.229 mo
269.624 334.952 267.18 333.105 264.165 333.105 cv
261.151 333.105 258.707 334.952 258.707 337.229 cv
258.707 339.507 261.151 341.354 264.165 341.354 cv
267.18 341.354 269.624 339.507 269.624 337.229 cv
@
269.624 337.229 mo
269.624 334.952 267.18 333.105 264.165 333.105 cv
261.151 333.105 258.707 334.952 258.707 337.229 cv
258.707 339.507 261.151 341.354 264.165 341.354 cv
267.18 341.354 269.624 339.507 269.624 337.229 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
261.524 335.677 mo
(Identity)
[.565491 .849091 .753967 .849121 .472107 .472076 .472107 0 ]xsh
260.668 337.618 mo
(work=936)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 0 ]xsh
260.975 339.559 mo
(I/O: 1->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
251.307 328.617 mo
253.491 330.194 256.766 332.256 259.435 333.954 cv
@
258.949 333.954 mo
260.041 334.44 li
259.313 333.469 li
cp
@
258.949 333.954 mo
260.041 334.44 li
259.313 333.469 li
f
288.789 337.229 mo
288.789 334.952 284.988 333.105 280.298 333.105 cv
275.609 333.105 271.807 334.952 271.807 337.229 cv
271.807 339.507 275.609 341.354 280.298 341.354 cv
284.988 341.354 288.789 339.507 288.789 337.229 cv
@
288.789 337.229 mo
288.789 334.952 284.988 333.105 280.298 333.105 cv
275.609 333.105 271.807 334.952 271.807 337.229 cv
271.807 339.507 275.609 341.354 280.298 341.354 cv
284.988 341.354 288.789 339.507 288.789 337.229 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
273.837 335.677 mo
(zero_gen_complex)
[.753967 .753998 .56546 .849121 .849091 .849091 .753998 .849091 .849091 .753967 .849121 1.3212 
.849091 .472107 .753967 0 ]xsh
276.8 337.618 mo
(work=210)
[1.22607 .849091 .565491 .849121 .957764 .849091 .849121 0 ]xsh
277.107 339.559 mo
(I/O: 0->1)
[.565491 .472107 1.22607 .472076 .424561 .849091 .565491 .957794 0 ]xsh
254.219 328.253 mo
259.313 329.588 266.591 331.65 271.079 333.105 cv
271.686 333.348 272.535 333.59 273.384 333.954 cv
@
273.02 334.076 mo
274.233 334.318 li
273.263 333.59 li
cp
@
273.02 334.076 mo
274.233 334.318 li
273.263 333.59 li
f
249.245 347.904 mo
249.245 346.698 245.064 345.72 239.905 345.72 cv
234.747 345.72 230.565 346.698 230.565 347.904 cv
230.565 349.11 234.747 350.087 239.905 350.087 cv
245.064 350.087 249.245 349.11 249.245 347.904 cv
@
249.245 347.904 mo
249.245 346.698 245.064 345.72 239.905 345.72 cv
234.747 345.72 230.565 346.698 230.565 347.904 cv
230.565 349.11 234.747 350.087 239.905 350.087 cv
245.064 350.087 249.245 349.11 249.245 347.904 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
231.746 348.292 mo
(roundrobin\(6,26,1,26,5\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 .849091 .424561 .849091 .424561 .849091 .849106 .424545 .849106 0 ]xsh
236.388 349.966 mo
234.568 350.936 232.385 351.907 230.929 352.028 cv
216.252 353.848 190.657 355.424 177.072 356.152 cv
@
177.072 355.91 mo
175.859 356.274 li
177.072 356.395 li
cp
@
177.072 355.91 mo
175.859 356.274 li
177.072 356.395 li
f
222.074 340.019 mo
226.077 341.718 231.05 343.901 234.811 345.599 cv
@
234.325 345.72 mo
235.538 345.963 li
234.568 345.114 li
cp
@
234.325 345.72 mo
235.538 345.963 li
234.568 345.114 li
f
234.568 340.868 mo
235.538 342.081 236.63 343.658 237.601 344.871 cv
@
237.358 344.993 mo
238.328 345.72 li
237.722 344.629 li
cp
@
237.358 344.993 mo
238.328 345.72 li
237.722 344.629 li
f
245 341.111 mo
244.029 342.324 243.059 343.658 242.21 344.871 cv
@
242.089 344.629 mo
241.482 345.72 li
242.453 344.993 li
cp
@
242.089 344.629 mo
241.482 345.72 li
242.453 344.993 li
f
260.162 340.141 mo
259.435 340.626 258.585 341.111 257.979 341.354 cv
254.825 342.688 249.973 344.507 246.092 345.842 cv
@
246.334 345.478 mo
245.242 346.084 li
246.455 346.084 li
cp
@
246.334 345.478 mo
245.242 346.084 li
246.455 346.084 li
f
274.233 340.141 mo
273.141 340.626 271.928 341.111 271.079 341.354 cv
264.893 342.931 255.189 344.993 248.154 346.327 cv
@
248.275 345.963 mo
247.183 346.57 li
248.396 346.57 li
cp
@
248.275 345.963 mo
247.183 346.57 li
248.396 346.57 li
f
176.708 382.838 mo
176.708 380.561 172.852 378.714 168.096 378.714 cv
163.339 378.714 159.483 380.561 159.483 382.838 cv
159.483 385.116 163.339 386.962 168.096 386.962 cv
172.852 386.962 176.708 385.116 176.708 382.838 cv
@
176.708 382.838 mo
176.708 380.561 172.852 378.714 168.096 378.714 cv
163.339 378.714 159.483 380.561 159.483 382.838 cv
159.483 385.116 163.339 386.962 168.096 386.962 cv
172.852 386.962 176.708 385.116 176.708 382.838 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
161.491 381.286 mo
(FFTReorderSimple)
[.944199 .944199 1.03758 1.13269 .753983 .849091 .565491 .849106 .753967 .565491 .944199 .472107 
1.3212 .849091 .472107 0 ]xsh
164.173 383.227 mo
(work=5824)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
164.055 385.168 mo
(I/O: 64->64)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 .849106 0 ]xsh
168.096 371.921 mo
168.096 373.619 168.096 375.682 168.096 377.501 cv
@
167.853 377.501 mo
168.096 378.714 li
168.46 377.501 li
cp
@
167.853 377.501 mo
168.096 378.714 li
168.46 377.501 li
f
176.708 395.453 mo
176.708 393.176 172.852 391.329 168.096 391.329 cv
163.339 391.329 159.483 393.176 159.483 395.453 cv
159.483 397.731 163.339 399.578 168.096 399.578 cv
172.852 399.578 176.708 397.731 176.708 395.453 cv
@
176.708 395.453 mo
176.708 393.176 172.852 391.329 168.096 391.329 cv
163.339 391.329 159.483 393.176 159.483 395.453 cv
159.483 397.731 163.339 399.578 168.096 399.578 cv
172.852 399.578 176.708 397.731 176.708 395.453 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
161.491 393.901 mo
(FFTReorderSimple)
[.944199 .944199 1.03758 1.13269 .753983 .849091 .565491 .849106 .753967 .565491 .944199 .472107 
1.3212 .849091 .472107 0 ]xsh
164.173 395.842 mo
(work=5824)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
164.055 397.783 mo
(I/O: 32->32)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 .849106 0 ]xsh
168.096 386.962 mo
168.096 387.933 168.096 389.025 168.096 390.116 cv
@
167.853 390.116 mo
168.096 391.329 li
168.46 390.116 li
cp
@
167.853 390.116 mo
168.096 391.329 li
168.46 390.116 li
f
176.708 408.069 mo
176.708 405.791 172.852 403.944 168.096 403.944 cv
163.339 403.944 159.483 405.791 159.483 408.069 cv
159.483 410.346 163.339 412.193 168.096 412.193 cv
172.852 412.193 176.708 410.346 176.708 408.069 cv
@
176.708 408.069 mo
176.708 405.791 172.852 403.944 168.096 403.944 cv
163.339 403.944 159.483 405.791 159.483 408.069 cv
159.483 410.346 163.339 412.193 168.096 412.193 cv
172.852 412.193 176.708 410.346 176.708 408.069 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
161.491 406.516 mo
(FFTReorderSimple)
[.944199 .944199 1.03758 1.13269 .753983 .849091 .565491 .849106 .753967 .565491 .944199 .472107 
1.3212 .849091 .472107 0 ]xsh
164.173 408.457 mo
(work=5824)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
164.055 410.398 mo
(I/O: 16->16)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 .849106 0 ]xsh
168.096 399.578 mo
168.096 400.548 168.096 401.64 168.096 402.731 cv
@
167.853 402.731 mo
168.096 403.944 li
168.46 402.731 li
cp
@
167.853 402.731 mo
168.096 403.944 li
168.46 402.731 li
f
176.708 420.684 mo
176.708 418.406 172.852 416.56 168.096 416.56 cv
163.339 416.56 159.483 418.406 159.483 420.684 cv
159.483 422.962 163.339 424.808 168.096 424.808 cv
172.852 424.808 176.708 422.962 176.708 420.684 cv
@
176.708 420.684 mo
176.708 418.406 172.852 416.56 168.096 416.56 cv
163.339 416.56 159.483 418.406 159.483 420.684 cv
159.483 422.962 163.339 424.808 168.096 424.808 cv
172.852 424.808 176.708 422.962 176.708 420.684 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
161.491 419.131 mo
(FFTReorderSimple)
[.944199 .944199 1.03758 1.13269 .753983 .849091 .565491 .849106 .753967 .565491 .944199 .472107 
1.3212 .849091 .472107 0 ]xsh
164.173 421.072 mo
(work=5824)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
164.904 423.013 mo
(I/O: 8->8)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
168.096 412.193 mo
168.096 413.163 168.096 414.255 168.096 415.347 cv
@
167.853 415.347 mo
168.096 416.56 li
168.46 415.347 li
cp
@
167.853 415.347 mo
168.096 416.56 li
168.46 415.347 li
f
176.708 433.299 mo
176.708 431.021 172.852 429.175 168.096 429.175 cv
163.339 429.175 159.483 431.021 159.483 433.299 cv
159.483 435.577 163.339 437.423 168.096 437.423 cv
172.852 437.423 176.708 435.577 176.708 433.299 cv
@
176.708 433.299 mo
176.708 431.021 172.852 429.175 168.096 429.175 cv
163.339 429.175 159.483 431.021 159.483 433.299 cv
159.483 435.577 163.339 437.423 168.096 437.423 cv
172.852 437.423 176.708 435.577 176.708 433.299 cv
.455 .686 .812 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
161.491 431.746 mo
(FFTReorderSimple)
[.944199 .944199 1.03758 1.13269 .753983 .849091 .565491 .849106 .753967 .565491 .944199 .472107 
1.3212 .849091 .472107 0 ]xsh
164.173 433.687 mo
(work=5824)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
164.904 435.628 mo
(I/O: 4->4)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
168.096 424.808 mo
168.096 425.778 168.096 426.87 168.096 427.962 cv
@
167.853 427.962 mo
168.096 429.175 li
168.46 427.962 li
cp
@
167.853 427.962 mo
168.096 429.175 li
168.46 427.962 li
f
175.131 445.914 mo
175.131 443.637 171.981 441.79 168.096 441.79 cv
164.21 441.79 161.06 443.637 161.06 445.914 cv
161.06 448.192 164.21 450.038 168.096 450.038 cv
171.981 450.038 175.131 448.192 175.131 445.914 cv
@
175.131 445.914 mo
175.131 443.637 171.981 441.79 168.096 441.79 cv
164.21 441.79 161.06 443.637 161.06 445.914 cv
161.06 448.192 164.21 450.038 168.096 450.038 cv
171.981 450.038 175.131 448.192 175.131 445.914 cv
.953 .424 .267 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
163.095 444.362 mo
(CombineIDFT)
[1.13269 .849091 1.3212 .849106 .472107 .849091 .753983 .565491 1.22607 .944199 0 ]xsh
163.749 446.303 mo
(work=35616)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 .849091 0 ]xsh
164.904 448.244 mo
(I/O: 2->2)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
168.096 437.423 mo
168.096 438.394 168.096 439.485 168.096 440.577 cv
@
167.853 440.577 mo
168.096 441.79 li
168.46 440.577 li
cp
@
167.853 440.577 mo
168.096 441.79 li
168.46 440.577 li
f
175.131 458.529 mo
175.131 456.252 171.981 454.405 168.096 454.405 cv
164.21 454.405 161.06 456.252 161.06 458.529 cv
161.06 460.807 164.21 462.654 168.096 462.654 cv
171.981 462.654 175.131 460.807 175.131 458.529 cv
@
175.131 458.529 mo
175.131 456.252 171.981 454.405 168.096 454.405 cv
164.21 454.405 161.06 456.252 161.06 458.529 cv
161.06 460.807 164.21 462.654 168.096 462.654 cv
171.981 462.654 175.131 460.807 175.131 458.529 cv
.953 .424 .267 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
163.095 456.977 mo
(CombineIDFT)
[1.13269 .849091 1.3212 .849106 .472107 .849091 .753983 .565491 1.22607 .944199 0 ]xsh
163.749 458.918 mo
(work=35168)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 .849091 0 ]xsh
164.904 460.859 mo
(I/O: 4->4)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
168.096 450.038 mo
168.096 451.009 168.096 452.101 168.096 453.192 cv
@
167.853 453.192 mo
168.096 454.405 li
168.46 453.192 li
cp
@
167.853 453.192 mo
168.096 454.405 li
168.46 453.192 li
f
175.131 471.145 mo
175.131 468.867 171.981 467.02 168.096 467.02 cv
164.21 467.02 161.06 468.867 161.06 471.145 cv
161.06 473.422 164.21 475.269 168.096 475.269 cv
171.981 475.269 175.131 473.422 175.131 471.145 cv
@
175.131 471.145 mo
175.131 468.867 171.981 467.02 168.096 467.02 cv
164.21 467.02 161.06 468.867 161.06 471.145 cv
161.06 473.422 164.21 475.269 168.096 475.269 cv
171.981 475.269 175.131 473.422 175.131 471.145 cv
.992 .667 .384 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
163.095 469.592 mo
(CombineIDFT)
[1.13269 .849091 1.3212 .849106 .472107 .849091 .753983 .565491 1.22607 .944199 0 ]xsh
163.749 471.533 mo
(work=34944)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 .849091 0 ]xsh
164.904 473.474 mo
(I/O: 8->8)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
168.096 462.654 mo
168.096 463.624 168.096 464.716 168.096 465.807 cv
@
167.853 465.807 mo
168.096 467.02 li
168.46 465.807 li
cp
@
167.853 465.807 mo
168.096 467.02 li
168.46 465.807 li
f
175.131 483.76 mo
175.131 481.482 171.981 479.636 168.096 479.636 cv
164.21 479.636 161.06 481.482 161.06 483.76 cv
161.06 486.038 164.21 487.884 168.096 487.884 cv
171.981 487.884 175.131 486.038 175.131 483.76 cv
@
175.131 483.76 mo
175.131 481.482 171.981 479.636 168.096 479.636 cv
164.21 479.636 161.06 481.482 161.06 483.76 cv
161.06 486.038 164.21 487.884 168.096 487.884 cv
171.981 487.884 175.131 486.038 175.131 483.76 cv
.992 .667 .384 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
163.095 482.207 mo
(CombineIDFT)
[1.13269 .849091 1.3212 .849106 .472107 .849091 .753983 .565491 1.22607 .944199 0 ]xsh
163.749 484.148 mo
(work=34832)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 .849091 0 ]xsh
164.055 486.089 mo
(I/O: 16->16)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 .849106 0 ]xsh
168.096 475.269 mo
168.096 476.239 168.096 477.331 168.096 478.423 cv
@
167.853 478.423 mo
168.096 479.636 li
168.46 478.423 li
cp
@
167.853 478.423 mo
168.096 479.636 li
168.46 478.423 li
f
175.131 496.375 mo
175.131 494.097 171.981 492.251 168.096 492.251 cv
164.21 492.251 161.06 494.097 161.06 496.375 cv
161.06 498.653 164.21 500.499 168.096 500.499 cv
171.981 500.499 175.131 498.653 175.131 496.375 cv
@
175.131 496.375 mo
175.131 494.097 171.981 492.251 168.096 492.251 cv
164.21 492.251 161.06 494.097 161.06 496.375 cv
161.06 498.653 164.21 500.499 168.096 500.499 cv
171.981 500.499 175.131 498.653 175.131 496.375 cv
.992 .667 .384 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
163.095 494.822 mo
(CombineIDFT)
[1.13269 .849091 1.3212 .849106 .472107 .849091 .753983 .565491 1.22607 .944199 0 ]xsh
163.749 496.763 mo
(work=34776)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 .849091 0 ]xsh
164.055 498.704 mo
(I/O: 32->32)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 .849106 0 ]xsh
168.096 487.884 mo
168.096 488.854 168.096 489.946 168.096 491.038 cv
@
167.853 491.038 mo
168.096 492.251 li
168.46 491.038 li
cp
@
167.853 491.038 mo
168.096 492.251 li
168.46 491.038 li
f
176.829 508.99 mo
176.829 506.712 172.919 504.866 168.096 504.866 cv
163.272 504.866 159.362 506.712 159.362 508.99 cv
159.362 511.268 163.272 513.114 168.096 513.114 cv
172.919 513.114 176.829 511.268 176.829 508.99 cv
@
176.829 508.99 mo
176.829 506.712 172.919 504.866 168.096 504.866 cv
163.272 504.866 159.362 506.712 159.362 508.99 cv
159.362 511.268 163.272 513.114 168.096 513.114 cv
172.919 513.114 176.829 511.268 176.829 508.99 cv
.953 .424 .267 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
161.35 507.438 mo
(CombineIDFTFinal)
[1.13269 .849091 1.3212 .849106 .472107 .849091 .753983 .565491 1.22607 .944199 1.03758 .944199 
.472092 .849106 .753983 0 ]xsh
163.75 509.379 mo
(work=38332)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 .849091 0 ]xsh
164.056 511.32 mo
(I/O: 64->64)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 .849106 0 ]xsh
168.096 500.499 mo
168.096 501.47 168.096 502.561 168.096 503.653 cv
@
167.853 503.653 mo
168.096 504.866 li
168.46 503.653 li
cp
@
167.853 503.653 mo
168.096 504.866 li
168.46 503.653 li
f
174.646 519.665 mo
174.646 518.459 171.713 517.481 168.096 517.481 cv
164.478 517.481 161.545 518.459 161.545 519.665 cv
161.545 520.87 164.478 521.848 168.096 521.848 cv
171.713 521.848 174.646 520.87 174.646 519.665 cv
@
174.646 519.665 mo
174.646 518.459 171.713 517.481 168.096 517.481 cv
164.478 517.481 161.545 518.459 161.545 519.665 cv
161.545 520.87 164.478 521.848 168.096 521.848 cv
171.713 521.848 174.646 520.87 174.646 519.665 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
162.719 520.053 mo
(duplicate\(1,1,1\))
[.849106 .849091 .849106 .472092 .472107 .753967 .753983 .472092 .753983 .565491 .849091 .424561 
.849091 .424561 .849091 0 ]xsh
168.096 513.114 mo
168.096 514.206 168.096 515.298 168.096 516.39 cv
@
167.853 516.268 mo
168.096 517.481 li
168.46 516.268 li
cp
@
167.853 516.268 mo
168.096 517.481 li
168.46 516.268 li
f
159.969 530.339 mo
159.969 528.061 157.145 526.215 153.661 526.215 cv
150.177 526.215 147.353 528.061 147.353 530.339 cv
147.353 532.617 150.177 534.463 153.661 534.463 cv
157.145 534.463 159.969 532.617 159.969 530.339 cv
@
159.969 530.339 mo
159.969 528.061 157.145 526.215 153.661 526.215 cv
150.177 526.215 147.353 528.061 147.353 530.339 cv
147.353 532.617 150.177 534.463 153.661 534.463 cv
157.145 534.463 159.969 532.617 159.969 530.339 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
149.322 528.786 mo
(remove_first)
[.565491 .753967 1.3212 .849106 .849106 .753967 .849106 .565491 .472092 .565491 .660583 0 
]xsh
149.739 530.727 mo
(work=2576)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
149.621 532.668 mo
(I/O: 64->16)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 .849106 0 ]xsh
165.427 521.727 mo
163.486 523.182 160.818 525.123 158.513 526.7 cv
@
158.634 526.215 mo
157.906 527.185 li
158.998 526.7 li
cp
@
158.634 526.215 mo
157.906 527.185 li
158.998 526.7 li
f
174.039 530.339 mo
174.039 528.061 171.378 526.215 168.096 526.215 cv
164.813 526.215 162.152 528.061 162.152 530.339 cv
162.152 532.617 164.813 534.463 168.096 534.463 cv
171.378 534.463 174.039 532.617 174.039 530.339 cv
@
174.039 530.339 mo
174.039 528.061 171.378 526.215 168.096 526.215 cv
164.813 526.215 162.152 528.061 162.152 530.339 cv
162.152 532.617 164.813 534.463 168.096 534.463 cv
171.378 534.463 174.039 532.617 174.039 530.339 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
165.454 528.786 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
164.174 530.727 mo
(work=2688)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
164.905 532.668 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
168.096 521.848 mo
168.096 522.697 168.096 523.91 168.096 525.002 cv
@
167.853 525.002 mo
168.096 526.215 li
168.46 525.002 li
cp
@
167.853 525.002 mo
168.096 526.215 li
168.46 525.002 li
f
188.595 530.339 mo
188.595 528.061 185.826 526.215 182.409 526.215 cv
178.993 526.215 176.223 528.061 176.223 530.339 cv
176.223 532.617 178.993 534.463 182.409 534.463 cv
185.826 534.463 188.595 532.617 188.595 530.339 cv
@
188.595 530.339 mo
188.595 528.061 185.826 526.215 182.409 526.215 cv
178.993 526.215 176.223 528.061 176.223 530.339 cv
176.223 532.617 178.993 534.463 182.409 534.463 cv
185.826 534.463 188.595 532.617 188.595 530.339 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
178.259 528.786 mo
(remove_last)
[.565491 .753967 1.3212 .849106 .849106 .753967 .849106 .472092 .753983 .660583 0 ]xsh
178.487 530.727 mo
(work=2261)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
178.794 532.668 mo
(I/O: 64->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .849091 .565491 .957779 0 ]xsh
170.764 521.727 mo
172.584 523.061 175.131 524.881 177.314 526.579 cv
@
177.193 526.821 mo
178.285 527.307 li
177.557 526.336 li
cp
@
177.193 526.821 mo
178.285 527.307 li
177.557 526.336 li
f
176.223 541.013 mo
176.223 539.808 172.584 538.83 168.096 538.83 cv
163.607 538.83 159.969 539.808 159.969 541.013 cv
159.969 542.219 163.607 543.197 168.096 543.197 cv
172.584 543.197 176.223 542.219 176.223 541.013 cv
@
176.223 541.013 mo
176.223 539.808 172.584 538.83 168.096 538.83 cv
163.607 538.83 159.969 539.808 159.969 541.013 cv
159.969 542.219 163.607 543.197 168.096 543.197 cv
172.584 543.197 176.223 542.219 176.223 541.013 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
161.21 541.402 mo
(roundrobin\(16,64,1\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849106 .424545 .849091 .849106 .424545 .849106 0 ]xsh
177.314 549.747 mo
177.314 548.541 173.187 547.564 168.096 547.564 cv
163.004 547.564 158.877 548.541 158.877 549.747 cv
158.877 550.953 163.004 551.93 168.096 551.93 cv
173.187 551.93 177.314 550.953 177.314 549.747 cv
@
177.314 549.747 mo
177.314 548.541 173.187 547.564 168.096 547.564 cv
163.004 547.564 158.877 548.541 158.877 549.747 cv
158.877 550.953 163.004 551.93 168.096 551.93 cv
173.187 551.93 177.314 550.953 177.314 549.747 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
160.148 550.135 mo
(roundrobin\(1,486,79,1\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 .849091 .849106 .424545 .849106 .849106 .424545 .849091 0 ]xsh
168.096 543.197 mo
168.096 544.167 168.096 545.259 168.096 546.351 cv
@
167.853 546.351 mo
168.096 547.564 li
168.46 546.351 li
cp
@
167.853 546.351 mo
168.096 547.564 li
168.46 546.351 li
f
157.906 533.493 mo
159.969 535.07 162.395 536.889 164.457 538.345 cv
@
164.093 538.466 mo
165.306 538.951 li
164.457 537.981 li
cp
@
164.093 538.466 mo
165.306 538.951 li
164.457 537.981 li
f
168.096 534.463 mo
168.096 535.555 168.096 536.647 168.096 537.738 cv
@
167.853 537.617 mo
168.096 538.83 li
168.46 537.617 li
cp
@
167.853 537.617 mo
168.096 538.83 li
168.46 537.617 li
f
178.285 533.372 mo
176.223 534.948 173.675 536.768 171.735 538.345 cv
@
171.735 537.981 mo
170.886 538.951 li
172.099 538.466 li
cp
@
171.735 537.981 mo
170.886 538.951 li
172.099 538.466 li
f
128.916 573.037 mo
128.916 570.759 126.581 568.912 123.7 568.912 cv
120.819 568.912 118.484 570.759 118.484 573.037 cv
118.484 575.314 120.819 577.161 123.7 577.161 cv
126.581 577.161 128.916 575.314 128.916 573.037 cv
@
128.916 573.037 mo
128.916 570.759 126.581 568.912 123.7 568.912 cv
120.819 568.912 118.484 570.759 118.484 573.037 cv
118.484 575.314 120.819 577.161 123.7 577.161 cv
126.581 577.161 128.916 575.314 128.916 573.037 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
121.058 571.484 mo
(Identity)
[.565491 .849098 .753975 .849098 .472099 .472099 .472099 0 ]xsh
121.051 573.425 mo
(work=6)
[1.22607 .849098 .565491 .849098 .957779 0 ]xsh
120.509 575.366 mo
(I/O: 1->1)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
161.667 551.324 mo
160.332 551.688 159.362 551.93 159.241 551.93 cv
149.294 553.386 138.741 551.809 129.28 555.327 cv
126.368 556.54 127.46 561.513 126.49 564.546 cv
126.247 565.516 125.762 566.85 125.277 568.185 cv
@
125.034 567.821 mo
125.034 569.034 li
125.641 567.942 li
cp
@
125.034 567.821 mo
125.034 569.034 li
125.641 567.942 li
f
161.06 560.421 mo
161.06 559.216 157.91 558.238 154.025 558.238 cv
150.139 558.238 146.99 559.216 146.99 560.421 cv
146.99 561.627 150.139 562.605 154.025 562.605 cv
157.91 562.605 161.06 561.627 161.06 560.421 cv
@
161.06 560.421 mo
161.06 559.216 157.91 558.238 154.025 558.238 cv
150.139 558.238 146.99 559.216 146.99 560.421 cv
146.99 561.627 150.139 562.605 154.025 562.605 cv
157.91 562.605 161.06 561.627 161.06 560.421 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
148.2 560.81 mo
(roundrobin\(79,2\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849106 .424545 .849091 0 ]xsh
165.306 551.809 mo
163.001 553.507 159.969 555.933 157.543 557.753 cv
@
157.543 557.389 mo
156.693 558.359 li
157.906 557.874 li
cp
@
157.543 557.389 mo
156.693 558.359 li
157.906 557.874 li
f
175.859 560.421 mo
175.859 558.144 173.415 556.297 170.4 556.297 cv
167.386 556.297 164.942 558.144 164.942 560.421 cv
164.942 562.699 167.386 564.546 170.4 564.546 cv
173.415 564.546 175.859 562.699 175.859 560.421 cv
@
175.859 560.421 mo
175.859 558.144 173.415 556.297 170.4 556.297 cv
167.386 556.297 164.942 558.144 164.942 560.421 cv
164.942 562.699 167.386 564.546 170.4 564.546 cv
173.415 564.546 175.859 562.699 175.859 560.421 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
167.759 558.869 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
166.903 560.81 mo
(work=474)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
167.21 562.751 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
168.581 551.93 mo
168.823 552.901 169.066 554.235 169.309 555.448 cv
@
168.945 555.206 mo
169.551 556.297 li
169.551 555.084 li
cp
@
168.945 555.206 mo
169.551 556.297 li
169.551 555.084 li
f
178.406 573.037 mo
178.406 570.759 175.962 568.912 172.948 568.912 cv
169.933 568.912 167.489 570.759 167.489 573.037 cv
167.489 575.314 169.933 577.161 172.948 577.161 cv
175.962 577.161 178.406 575.314 178.406 573.037 cv
@
178.406 573.037 mo
178.406 570.759 175.962 568.912 172.948 568.912 cv
169.933 568.912 167.489 570.759 167.489 573.037 cv
167.489 575.314 169.933 577.161 172.948 577.161 cv
175.962 577.161 178.406 575.314 178.406 573.037 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
171.109 571.484 mo
(halve)
[.849106 .753967 .472107 .849091 0 ]xsh
169.451 573.425 mo
(work=134)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
169.757 575.366 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
172.584 551.688 mo
174.525 552.658 176.465 553.993 177.314 555.327 cv
179.013 557.995 178.164 561.634 177.314 564.546 cv
176.951 565.637 176.344 567.093 175.616 568.549 cv
@
175.495 568.063 mo
175.252 569.276 li
176.101 568.306 li
cp
@
175.495 568.063 mo
175.252 569.276 li
176.101 568.306 li
f
155.238 592.445 mo
155.238 591.239 151.11 590.261 146.019 590.261 cv
140.928 590.261 136.8 591.239 136.8 592.445 cv
136.8 593.65 140.928 594.628 146.019 594.628 cv
151.11 594.628 155.238 593.65 155.238 592.445 cv
@
155.238 592.445 mo
155.238 591.239 151.11 590.261 146.019 590.261 cv
140.928 590.261 136.8 591.239 136.8 592.445 cv
136.8 593.65 140.928 594.628 146.019 594.628 cv
151.11 594.628 155.238 593.65 155.238 592.445 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
138.072 592.833 mo
(roundrobin\(1,480,79,1\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.424545 .849106 .849091 .849106 .424545 .849106 .849106 .424545 .849091 0 ]xsh
143.836 594.628 mo
142.744 595.72 141.41 597.054 140.318 598.146 cv
@
140.075 597.903 mo
139.469 598.995 li
140.561 598.388 li
cp
@
140.075 597.903 mo
139.469 598.995 li
140.561 598.388 li
f
125.034 577.04 mo
126.247 580.8 128.188 585.894 129.28 586.865 cv
130.493 587.835 134.981 589.291 139.105 590.504 cv
@
138.741 590.746 mo
139.954 590.746 li
138.862 590.14 li
cp
@
138.741 590.746 mo
139.954 590.746 li
138.862 590.14 li
f
142.987 573.037 mo
142.987 570.759 140.325 568.912 137.043 568.912 cv
133.76 568.912 131.099 570.759 131.099 573.037 cv
131.099 575.314 133.76 577.161 137.043 577.161 cv
140.325 577.161 142.987 575.314 142.987 573.037 cv
@
142.987 573.037 mo
142.987 570.759 140.325 568.912 137.043 568.912 cv
133.76 568.912 131.099 570.759 131.099 573.037 cv
131.099 575.314 133.76 577.161 137.043 577.161 cv
140.325 577.161 142.987 575.314 142.987 573.037 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
134.401 571.484 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
133.121 573.425 mo
(work=2844)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
133.852 575.366 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
151.356 562.484 mo
148.809 564.424 144.927 567.336 141.774 569.519 cv
@
141.895 569.034 mo
141.167 570.004 li
142.259 569.519 li
cp
@
141.895 569.034 mo
141.167 570.004 li
142.259 569.519 li
f
162.88 573.037 mo
162.88 570.759 158.915 568.912 154.025 568.912 cv
149.134 568.912 145.17 570.759 145.17 573.037 cv
145.17 575.314 149.134 577.161 154.025 577.161 cv
158.915 577.161 162.88 575.314 162.88 573.037 cv
@
162.88 573.037 mo
162.88 570.759 158.915 568.912 154.025 568.912 cv
149.134 568.912 145.17 570.759 145.17 573.037 cv
145.17 575.314 149.134 577.161 154.025 577.161 cv
158.915 577.161 162.88 575.314 162.88 573.037 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
147.186 571.484 mo
(halve_and_combine)
[.849106 .753967 .472107 .849091 .753983 .849091 .753983 .849106 .849091 .849106 .753967 .849106 
1.3212 .849106 .472092 .849106 0 ]xsh
150.527 573.425 mo
(work=918)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
150.834 575.366 mo
(I/O: 2->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
154.025 562.605 mo
154.025 563.939 154.025 565.88 154.025 567.578 cv
@
153.782 567.699 mo
154.025 568.912 li
154.389 567.699 li
cp
@
153.782 567.699 mo
154.025 568.912 li
154.389 567.699 li
f
153.054 583.711 mo
153.054 582.505 149.905 581.528 146.019 581.528 cv
142.134 581.528 138.984 582.505 138.984 583.711 cv
138.984 584.917 142.134 585.894 146.019 585.894 cv
149.905 585.894 153.054 584.917 153.054 583.711 cv
@
153.054 583.711 mo
153.054 582.505 149.905 581.528 146.019 581.528 cv
142.134 581.528 138.984 582.505 138.984 583.711 cv
138.984 584.917 142.134 585.894 146.019 585.894 cv
149.905 585.894 153.054 584.917 153.054 583.711 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
140.194 584.099 mo
(roundrobin\(79,1\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849091 .424561 .849091 0 ]xsh
146.019 585.894 mo
146.019 586.865 146.019 587.956 146.019 589.048 cv
@
145.776 589.048 mo
146.019 590.261 li
146.383 589.048 li
cp
@
145.776 589.048 mo
146.019 590.261 li
146.383 589.048 li
f
140.075 576.676 mo
141.288 578.01 142.501 579.466 143.472 580.679 cv
@
143.229 580.8 mo
144.2 581.528 li
143.593 580.436 li
cp
@
143.229 580.8 mo
144.2 581.528 li
143.593 580.436 li
f
151.114 576.918 mo
150.143 578.131 149.173 579.466 148.202 580.679 cv
@
148.081 580.315 mo
147.596 581.528 li
148.566 580.679 li
cp
@
148.081 580.315 mo
147.596 581.528 li
148.566 580.679 li
f
168.096 564.182 mo
167.247 565.759 166.397 567.578 166.034 568.912 cv
165.791 570.489 165.791 585.773 164.699 586.865 cv
164.093 587.714 158.392 589.291 153.418 590.625 cv
@
153.418 590.261 mo
152.327 590.868 li
153.54 590.868 li
cp
@
153.418 590.261 mo
152.327 590.868 li
153.54 590.868 li
f
171.735 577.04 mo
170.643 580.436 168.702 585.167 166.155 586.865 cv
163.608 588.806 158.877 590.14 154.631 591.11 cv
@
154.995 590.746 mo
153.782 591.232 li
154.995 591.353 li
cp
@
154.995 590.746 mo
153.782 591.232 li
154.995 591.353 li
f
126.368 620.586 mo
126.368 618.308 123.707 616.462 120.425 616.462 cv
117.142 616.462 114.481 618.308 114.481 620.586 cv
114.481 622.864 117.142 624.71 120.425 624.71 cv
123.707 624.71 126.368 622.864 126.368 620.586 cv
@
126.368 620.586 mo
126.368 618.308 123.707 616.462 120.425 616.462 cv
117.142 616.462 114.481 618.308 114.481 620.586 cv
114.481 622.864 117.142 624.71 120.425 624.71 cv
123.707 624.71 126.368 622.864 126.368 620.586 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
117.783 619.034 mo
(Identity)
[.565491 .849098 .753975 .849098 .472099 .472099 .472099 0 ]xsh
116.503 620.974 mo
(work=1920)
[1.22607 .849098 .565491 .849098 .957779 .849098 .849098 .849106 0 ]xsh
117.234 622.915 mo
(I/O: 1->1)
[.565491 .472099 1.22607 .472099 .424545 .849106 .565483 .957779 0 ]xsh
134.132 611.974 mo
131.706 613.429 128.552 615.492 125.883 617.19 cv
@
125.762 616.947 mo
124.913 617.796 li
126.126 617.432 li
cp
@
125.762 616.947 mo
124.913 617.796 li
126.126 617.432 li
f
146.262 620.586 mo
146.262 618.308 142.297 616.462 137.407 616.462 cv
132.516 616.462 128.552 618.308 128.552 620.586 cv
128.552 622.864 132.516 624.71 137.407 624.71 cv
142.297 624.71 146.262 622.864 146.262 620.586 cv
@
146.262 620.586 mo
146.262 618.308 142.297 616.462 137.407 616.462 cv
132.516 616.462 128.552 618.308 128.552 620.586 cv
128.552 622.864 132.516 624.71 137.407 624.71 cv
142.297 624.71 146.262 622.864 146.262 620.586 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
130.568 619.034 mo
(halve_and_combine)
[.849106 .753967 .472107 .849091 .753983 .849091 .753983 .849106 .849091 .849106 .753967 .849106 
1.3212 .849106 .472092 .849106 0 ]xsh
133.909 620.974 mo
(work=153)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 0 ]xsh
134.216 622.915 mo
(I/O: 2->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
137.407 612.095 mo
137.407 612.944 137.407 614.157 137.407 615.249 cv
@
137.164 615.249 mo
137.407 616.462 li
137.771 615.249 li
cp
@
137.164 615.249 mo
137.407 616.462 li
137.771 615.249 li
f
160.332 620.586 mo
160.332 618.308 157.671 616.462 154.389 616.462 cv
151.106 616.462 148.445 618.308 148.445 620.586 cv
148.445 622.864 151.106 624.71 154.389 624.71 cv
157.671 624.71 160.332 622.864 160.332 620.586 cv
@
160.332 620.586 mo
160.332 618.308 157.671 616.462 154.389 616.462 cv
151.106 616.462 148.445 618.308 148.445 620.586 cv
148.445 622.864 151.106 624.71 154.389 624.71 cv
157.671 624.71 160.332 622.864 160.332 620.586 cv
.271 .467 .702 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
151.747 619.034 mo
(Identity)
[.565491 .849091 .753983 .849106 .472092 .472107 .472092 0 ]xsh
150.467 620.974 mo
(work=3360)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 0 ]xsh
151.198 622.915 mo
(I/O: 1->1)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
140.682 611.974 mo
143.108 613.429 146.262 615.492 148.93 617.19 cv
@
148.688 617.432 mo
149.901 617.796 li
149.052 616.947 li
cp
@
148.688 617.432 mo
149.901 617.796 li
149.052 616.947 li
f
146.383 631.261 mo
146.383 630.055 142.364 629.077 137.407 629.077 cv
132.449 629.077 128.431 630.055 128.431 631.261 cv
128.431 632.466 132.449 633.444 137.407 633.444 cv
142.364 633.444 146.383 632.466 146.383 631.261 cv
@
146.383 631.261 mo
146.383 630.055 142.364 629.077 137.407 629.077 cv
132.449 629.077 128.431 630.055 128.431 631.261 cv
128.431 632.466 132.449 633.444 137.407 633.444 cv
142.364 633.444 146.383 632.466 146.383 631.261 cv
1 gry
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
129.672 631.649 mo
(roundrobin\(320,1,560\))
[.565491 .849091 .849106 .849106 .849091 .565491 .849106 .849091 .472107 .849091 .565491 .849106 
.849091 .849106 .424545 .849106 .424545 .849106 .849106 .849091 0 ]xsh
143.714 641.935 mo
143.714 639.657 140.89 637.811 137.407 637.811 cv
133.923 637.811 131.099 639.657 131.099 641.935 cv
131.099 644.213 133.923 646.059 137.407 646.059 cv
140.89 646.059 143.714 644.213 143.714 641.935 cv
@
143.714 641.935 mo
143.714 639.657 140.89 637.811 137.407 637.811 cv
133.923 637.811 131.099 639.657 131.099 641.935 cv
131.099 644.213 133.923 646.059 137.407 646.059 cv
140.89 646.059 143.714 644.213 143.714 641.935 cv
.675 .855 .91 rgb
f
0 gry
LTFDQK+TimesNewRomanPSMT*1 [1.6982 0 0 -1.6982 0 0 ]msf
134.435 640.382 mo
(output_c)
[.849106 .849091 .472107 .849091 .849106 .472092 .849106 0 ]xsh
133.06 642.323 mo
(work=11453)
[1.22607 .849106 .565475 .849106 .957779 .849106 .849091 .849106 .849091 0 ]xsh
134.216 644.264 mo
(I/O: 1->0)
[.565491 .472092 1.22607 .472107 .424545 .849106 .565491 .957764 0 ]xsh
137.407 633.444 mo
137.407 634.293 137.407 635.506 137.407 636.598 cv
@
137.164 636.598 mo
137.407 637.811 li
137.771 636.598 li
cp
@
137.164 636.598 mo
137.407 637.811 li
137.771 636.598 li
f
124.792 623.376 mo
127.339 624.953 130.614 627.015 133.161 628.592 cv
@
132.919 628.835 mo
134.132 629.198 li
133.283 628.349 li
cp
@
132.919 628.835 mo
134.132 629.198 li
133.283 628.349 li
f
137.407 624.71 mo
137.407 625.802 137.407 626.894 137.407 627.985 cv
@
137.164 627.864 mo
137.407 629.077 li
137.771 627.864 li
cp
@
137.164 627.864 mo
137.407 629.077 li
137.771 627.864 li
f
150.022 623.376 mo
147.475 624.953 144.2 627.015 141.652 628.592 cv
@
141.531 628.349 mo
140.682 629.198 li
141.895 628.835 li
cp
@
141.531 628.349 mo
140.682 629.198 li
141.895 628.835 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/LTFDQK+TimesNewRomanPSMT*1 uf
/LTFDQK+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
