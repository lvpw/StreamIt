%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: MPEG2 decoder.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:09:37 PM
%%BoundingBox: 0 0 348 648
%%HiResBoundingBox: 0 0 348 648
%%CropBox: 0 0 348 648
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -648 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 648 li
348 648 li
348 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 649 mo
384 649 li
384 0 li
35 0 li
cp
clp
.2116 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
37.6928 646.307 mo
381.755 646.307 li
381.755 1.77313 li
37.6928 1.77313 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
dup 69 /E put
dup 71 /G put
dup 77 /M put
dup 80 /P put
dup 111 /o put
dup 116 /t put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/B <1C60D8A8C9B64EDFF4D0475F24A0512970A16CFF6BFBD1A1A12D07A62723
BF27DBD01B60ACEC3C9DB4E627348B4F9C96D245E2397B81856FE7B9149C0D88
A0B1C89901A357B578317FC0F49D1050D95CF70B7F7A7C5741B1B644F20C16DB
8F1BD7E6C45546C9302E6AD757CA73E92696A658F8A903A2E6B5FA3BE24637C3
3393411FB0E113E4BDFEBF11B4E90F57471B306273B2241C3C23457DA84CC16B
22781151F6DE159B155116967F7D53FA1DDDDF14084F0631BA1C08300F50E5BA
9DC336D8349BEA3371DCAFDF658781D6> |-
/E <1C60D8A8C9B7D8BE1621F7F8DAEB9FA9CBAFC8F4F4D756F2191C830A0E4A
58F87E3DDE67D49AF36DDF5F1FB2D74CAA0A1A0C249C8C349E149A4722F92BF7
61EFA3C2F9EC864F14F3A3AC121B867A3642166A4B07211381D27468A1D61050
1454C0DD1325D701AB4ADD917E16E61514B3C2631A525AEC590FB4C52AA73BF6
506DADDCC92C07368DF00A34F77E6ED1C2061C6913B4C24C30A64720E240E09F
9DD8F5EF76F17E9EEAE569D41B7D8D946B46BFFC> |-
/G <1C60D8A8C9B6079F258D65BC2350A422AEB94BCF2D0F96794C8438625C31
5D886EF37D4AC3C2F1E1338E25B58FA7772E0B9E5E3E726371665F3474CE0B82
EB9690B23BE3168D2BE4F6B0140B5077B79CDED50A140417505C243C7D98789B
5883DC2727B8882D3854E49A79F785598024348D171E79D4C21E1DA76E252BE9
80994299353DC669631C102ABE82C3B639BE771465159436AABE7CB91BD8812B
5152BA3433FC2701117F14E8CD24269DDA8CC4248C3859> |-
/M <1C60D8A8C9B59F85E7C3D982C036A83A051CFEB65CDD644D44695DA87381
2F9E0DA4474B3DF6D63B3341F86CDE23D0512CA425D085DC5BA255E6B3240439
E201FEC100F452F18CDA5E088317BF79F4C8FC952A839FE77A57A286C006FAF4
6CE1F964CD62165C424C020FEAD96AC86FEFFC256D> |-
/P <1C60D8A8C9B7EF322B10A2A8DE6EF0A6CE60E86B1DF5C68015667A2338DB
07BCF91C9D8DCCB5967A656E7EB6651B3E305A306DA1BB8C1BAEECFC60DC00D8
8AEC56E3DF7455D57CB9BB0CC9A32704D4F0F1C39C5B2EDC70F42754CACE7253
FF5FDAE4B675FFF987E22613E24B8956EFA9C2C5B9AC406D966F459601B2046A
C9E54A3BB37C45EDEB> |-
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDSJ+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B 2{/.notdef}rp /E /.notdef /G 5{/.notdef}rp /M 
2{/.notdef}rp /P 30{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
39.2426 4.14292 mo
(MPEGtoBMP)
[2.63355 1.64709 1.81001 2.13881 .823547 1.4812 1.9759 2.63355 0 ]xsh
41.0784 291.242 mo
266.009 291.242 li
266.009 44.516 li
41.0784 44.516 li
cp
1 gry
@
44.464 276.007 mo
207.396 276.007 li
207.396 58.694 li
44.464 58.694 li
cp
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F62AF7EE2124AC712AE5D5419E262A0C00C6163DFBCB2
A6FA65DDDD5062250DB8BBFB46EB35827750F9FCEE696526B20FE9266474B179
350945BBDAF7180FAB04D619EB38198FC722361E0B3B5E50F9017F19C7BDCABB
285F506A04FE32C63936689B1F9C81923B03440D57336303C59B59E8D3C0659D
33> |-
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 68 /D put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 107 /k put
dup 108 /l put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B /.notdef /D /E /.notdef /G 5{/.notdef}rp 
/M 2{/.notdef}rp /P 18{/.notdef}rp /c /d /e 5{/.notdef}rp 
/k /l 2{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
45.924 61.0639 mo
(BlockDecode)
[1.9759 .823547 1.4812 1.31526 1.4812 2.13881 1.31526 1.31526 1.4812 1.4812 0 ]xsh
47.8496 162.59 mo
204.011 162.59 li
204.011 82.8168 li
47.8496 82.8168 li
cp
1 gry
@
51.2352 147.354 mo
155.342 147.354 li
155.342 99.1091 li
51.2352 99.1091 li
cp
@
207.819 94.8779 mo
244.214 94.8779 li
244.214 59.7524 li
207.819 59.7524 li
cp
@
42.7712 470.679 mo
378.369 470.679 li
378.369 292.935 li
42.7712 292.935 li
cp
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B64EDFB39C8FA0E3107D39E1E26D40368A6A59D36B799EDDCB
A8AF8BCAEA2E296C5BB00979C4073082C4AC62DAAE27F25BE45DFF121DF075F7
3D37111C10DFF7C6BD4BFE8AE73B4FADB84F0E8B5722DEA1CA14F5AFDC440B45
4F635F5576E82C8F45782F1EDE0EC9CA59D48E4C0F81> |-
/F <1C60D8A8C9B7EF322B10A2A8DE6CF647A07CB452C54BD470E6C4C389B7AB
8653B88FE6E4626649FABCEAB5DAD30BD9C2A2F1F8512C1A1DC93BDB928A3688
B193ECEDB997255AB4DCBBC4BBB3FF147299B3653B9E76139CB6E91A13A47208
F2688B5C42863D22FFBF8FD8DF09F08A1966F6652461EEB3D18F0F0CB5B8E18D
6016409AA3D413D5FA051FCF9B4DFF0734259E7DCF> |-
/L <1C60D8A8C9B7D8BE1621F7F8A9A93A327F755C3E81E8F6E5B36D5D09EC27
E8352590DCF5FBB39847107CDCA7E2F69BF8A0E97E902F61DA0FFC19F5F5635E
A2E6B7FBC25C45E39802E8D22E33BC6334A08FAC75B725C0C2D4D8BA4EE1> |-
/O <1C60D8A8C9B6079F258D65BC2331B95A484F6FB0C89DE7976C286549CD33
A4D7316575EC038BAA234ED3FB5DEACB25E52512A7CBD428E6DBD2EB830622E8
8A44262525560702DCFFFB3478FE1A2C6113548B23F661EC01296D75C1A7D5FE
B75CD951FFE5A9> |-
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/h <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA64197CEECB76B9E4
D2E9F717E2E21BA6AFBDB9D486017DE1334EE2B8AC7E25B49C380829180892EE
A76E25D726C9DCA303C64F5FE456E4A565D8D0ED565D009BA02A6DD13A835659
5990FC1760FC10BB02F96DEC2D5390B1C4D4059132A392595F028220DA07D2CD
E701448700C9> |-
/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C86
82F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CB
A64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762
A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A
9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61F
B9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 67 /C put
dup 70 /F put
dup 76 /L put
dup 79 /O put
dup 97 /a put
dup 104 /h put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B /C /D /E /F /G 4{/.notdef}rp 
/L /M /.notdef /O /P 16{/.notdef}rp /a /.notdef 
/c /d /e 2{/.notdef}rp /h 2{/.notdef}rp /k /l 
/m /n /o 2{/.notdef}rp /r /.notdef /t /u 
138{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
44.1353 295.305 mo
(LumChromFormatOne)
[1.81001 1.4812 2.30475 1.9759 1.4812 .986458 1.4812 2.30474 1.64709 1.4812 .986454 2.30475 
1.31526 .823547 2.13881 1.4812 0 ]xsh
46.1568 438.093 mo
156.612 438.093 li
156.612 308.171 li
46.1568 308.171 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7A73D85D7E997B7B5DF7D7777AF52CC5562CB6E990E974840
46648599A1D9C4DB63B2EA37B7BBC0C3039255635B40FAB067F562720BFA98A6
8AA5F28640EAE52B9FE1BA9F5F2A49A2F977CAB7D5C25E3626BAA2BEB9E431EA
60B6FFDB96CDFE0161651CB3C7DDAAF79341AA1B63131C7BD07B3EF7C547B329
2DEEC810138CCDC2FA69E1A2AD41097A54F4DBBBA72B1810538F2F0FBA5B3B54
046B0BB798F435A12098BB54904B4FA0166943538B1D7B8EA5970358CDBCC48E
31C506A3AAB0AC2519075E7791339AF09F8C1F93B0D81A9E5ED3B02D4C03B817
17F61566CDC855CB444B31FBC8E71F4A79E39CF6ED7B9B21E0269B8614410251
F072B930BD3C2C0B5BE3125CE4461E97B369DD7B68AF48B8706DE7D2976BB7A8
F7FA6E1A10F519A6E8E51022609E6B7A2E822DDCD222A999CAA520FD83CCB934
D41B4EF6E07BE85DFA424019E44CA0D51152EDBDE920B3C59D4A719415BD84E9
F231F0CBEF222AB9855B090598B4D01FCC8283B4EC699D2D8EDA681DF37E56EB
75FAFC019A1A3645CA60183B64A594CD3556BA6088F7C2AF3F05FDD0875B0187
C18BC8AC2785F74D85EFAA74EA4D56B1D0576FD461BA0B37199C> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 103 /g put
dup 105 /i put
dup 115 /s put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B /C /D /E /F /G 4{/.notdef}rp 
/L /M /.notdef /O /P 16{/.notdef}rp /a /.notdef 
/c /d /e /.notdef /g /h /i /.notdef 
/k /l /m /n /o 2{/.notdef}rp /r /s 
/t /u 138{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
47.6054 310.54 mo
(LuminanceChannelProcessing)
[1.81001 1.4812 2.30475 .823547 1.4812 1.31526 1.4812 1.31526 1.31526 1.97589 1.4812 1.31526 
1.48119 1.4812 1.31526 .823547 1.64709 .986458 1.4812 1.31526 1.31525 1.15235 1.15235 .823547 
1.4812 0 ]xsh
49.5424 415.028 mo
153.226 415.028 li
153.226 366.995 li
49.5424 366.995 li
cp
1 gry
@
155.342 455.444 mo
265.797 455.444 li
265.797 307.536 li
155.342 307.536 li
cp
0 gry
@
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
156.744 309.905 mo
(ChrominanceChannelProcessing)
[1.97589 1.4812 .986465 1.4812 2.30475 .823547 1.4812 1.31525 1.4812 1.31526 1.31526 1.97591 
1.4812 1.31526 1.4812 1.48119 1.31526 .823547 1.64709 .986465 1.4812 1.31526 1.31525 1.15236 
1.15236 .823547 1.48119 0 ]xsh
158.728 358.32 mo
262.412 358.32 li
262.412 312.614 li
158.728 312.614 li
cp
1 gry
@
264.528 455.444 mo
374.983 455.444 li
374.983 307.536 li
264.528 307.536 li
cp
0 gry
@
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
265.929 309.905 mo
(ChrominanceChannelProcessing)
[1.97589 1.4812 .98645 1.4812 2.30475 .823547 1.4812 1.31528 1.4812 1.31525 1.31528 1.97589 
1.4812 1.31525 1.4812 1.4812 1.31528 .823547 1.64709 .98645 1.4812 1.31525 1.31528 1.15234 
1.15234 .823547 1.4812 0 ]xsh
267.914 358.32 mo
371.598 358.32 li
371.598 312.614 li
267.914 312.614 li
cp
1 gry
@
142.435 644.614 mo
279.129 644.614 li
279.129 531.62 li
142.435 531.62 li
cp
@
145.82 629.379 mo
187.717 629.379 li
187.717 546.855 li
145.82 546.855 li
cp
@
189.833 629.379 mo
231.73 629.379 li
231.73 546.855 li
189.833 546.855 li
cp
@
233.846 629.379 mo
275.743 629.379 li
275.743 546.855 li
233.846 546.855 li
cp
@
235.327 11.7189 mo
235.327 9.14795 231.159 7.06396 226.017 7.06396 cv
220.875 7.06396 216.706 9.14795 216.706 11.7189 cv
216.706 14.29 220.875 16.374 226.017 16.374 cv
231.159 16.374 235.327 14.29 235.327 11.7189 cv
0 gry
@
235.327 11.7189 mo
235.327 9.14795 231.159 7.06396 226.017 7.06396 cv
220.875 7.06396 216.706 9.14795 216.706 11.7189 cv
216.706 14.29 220.875 16.374 226.017 16.374 cv
231.159 16.374 235.327 14.29 235.327 11.7189 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/hyphen <1C60D8A8C9B81F2C7E673161CF52871F3F524B3A1BAC5ADA04F510A
476> |-
/slash <1C60D8A8C9B854D088EAD778FBC18D924BA165ED7CB0EB5700C3B61B
62ACF96E65C0BF> |-
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
/colon <1C60D8A8C9B854D0E389293C42E83787A5BE0CE9B5745E40D1B32D07
F826004562E0981DB26F3EF2E2B5CD932C33C49C462F9673F306A9A8ECFFE93D
9FCE8BF4190AA3F1208FCCE1> |-
/greater <1C60D8A8C9B7E7C1C7C30B940B3D62C7A181F0EBB0723CBB160375
71F050C44CCE59A85ACB3DB6BF9B03383F> |-
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
/R <1C60D8A8C9B64EDFF4D0475F241567109AA60E358A72CDD6748BBE527383
3D9930EA16405C9FA084F4E606B7DF07A2CCABEF78658BA281F5D25760E71232
16C34541C223BEC48612BD7C0052F7AD27E210716125E9B30EDB889188D65976
1E4423BF9E66EB5CCCE83D82A2DB04554982E2E899847CA739A4B92152682375
567D18A66EABD5068029F8FB7424BADB87039D0F6B1530> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 58 /colon put
dup 62 /greater put
dup 73 /I put
dup 82 /R put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one 
8{/.notdef}rp /colon 3{/.notdef}rp /greater 3{/.notdef}rp /B /C /D 
/E /F /G /.notdef /I 2{/.notdef}rp /L /M 
/.notdef /O /P /.notdef /R 14{/.notdef}rp /a /.notdef 
/c /d /e /.notdef /g /h /i /.notdef 
/k /l /m /n /o 2{/.notdef}rp /r /s 
/t /u 138{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
219.517 10.7029 mo
(FileReader)
[1.64709 .823547 .823547 1.31526 1.97589 1.31526 1.31526 1.4812 1.31526 0 ]xsh
220.45 14.0885 mo
(I/O: 0->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
242.098 31.3979 mo
242.098 27.424 234.898 24.2029 226.017 24.2029 cv
217.135 24.2029 209.935 27.424 209.935 31.3979 cv
209.935 35.371 217.135 38.592 226.017 38.592 cv
234.898 38.592 242.098 35.371 242.098 31.3979 cv
@
242.098 31.3979 mo
242.098 27.424 234.898 24.2029 226.017 24.2029 cv
217.135 24.2029 209.935 27.424 209.935 31.3979 cv
209.935 35.371 217.135 38.592 226.017 38.592 cv
234.898 38.592 242.098 35.371 242.098 31.3979 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/asterisk <1C60D8A8C9B7A73DB9A0737247D562C61165E8E636EE73CF26D64
F3C6728422CEE27A3F00DC7152CA3773F07EA559F0959F48B519FDEC6150629C
166D2B4FBEF2A598C45B9530847243905C1F3F150F0DD5877800507BF2B97A2E
4942336B61DB2054C6AB2AE38E3AEA192A16823CC1BE212834012F90F71E96A0
46E312361C7B9D33CA838F52208FFCDFB3B3A9B2A9728D3AFAB94EEE3598CA05
C0D62AFFA345B041C6B4E56F6827F181D11C4BECD0C9CCA67> |-
/three <1C60D8A8C9B7A73DB9E68392B0D8A76464A51F2E94D7CC8D0C2C4EA9
EB677CBC38A50658519E8BF18CD893FCF8B1BA3E22E132B8EDB4B7CD483A2AC4
23E82DF2F3816B8AE8EA5F180D3F5DFF2BF284FCE4CE5C4E107DDB61A9BE179C
50061EE6040417B0DF341D85D92A63653C2A28BA649E4CD9966C4B081E30F323
54693AC79886604480856D93C0D7CC0DE6962663CC1F198BBFA4> |-
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
/A <1C60D8A8C9B6079F005CDFC8A94B75FD7D89F5577E741BA5E9223B5FB59E
3315C336CDEC6F323D18A178B38DCEDA9B451B37165385283368F94E5EC5086C
A620D2549B18425DA74331F96252E5D5358EE44D33B708D9B8822975F755BF6A
D18C81AA5BF9B47D39D0AFBBC3A6521D0B18D90963534584D1092363898607EF
C07B44A235786C96> |-
/S <1C60D8A8C9B7EF320E2EFDBCAC7BC76D0C8C1FC222AFE4F464C56D04CD48
5F140DB725EC46F068943283C9A43A14A852E22E87331165F602FD95AC890BE8
83DAD7F63C31168B480A95AC244C28C8F37F118A399681DB4822661628FBDA87
D99D0367C013E32688035EC31A5C3FC194FEB20C4FCD84A9EB3547C0D5A421A0
1B87DFDA871D7919B7251A9EC84A645CA15425845057F189EC65A90DD4028CC5
B10853B05E6F7AF9E84AC6588CDCE11B6EF766B248A8304E38964E579F6EF2DC
2D4971ED042868564E8E982FE2B2> |-
/T <1C60D8A8C9B7D8BE16B2E353E3300378A32828826C127DE3D6A3769F5542
8119DC48F4B555CFAC557278838F3EC6C5F7B64F6B44DFEFCBC8AF8174185170
E165701BB15CF1CB88629A978EF6D86FB8> |-
/U <1C60D8A8C9B6079F675A124E1112F68E116C07D407D6BD729F3D1467FEC9
DB1B717EDCA1CB257898FAA810DC98AD012099D6E27B9582DB9C127CF24AAE1E
5B37683D2BCD64B5A5B8A07FAB5E4A8A80CE7FE3009E0C18967F5352FF3AD65B
1392BE000C7D33B48AEC2DD2A19998C5FE8EA47D78> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 42 /asterisk put
dup 51 /three put
dup 52 /four put
dup 65 /A put
dup 83 /S put
dup 84 /T put
dup 85 /U put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 9{/.notdef}rp /asterisk 2{/.notdef}rp /hyphen /.notdef /slash 
/zero /one /.notdef /three /four 5{/.notdef}rp /colon 3{/.notdef}rp 
/greater 2{/.notdef}rp /A /B /C /D /E /F 
/G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O 
/P /.notdef /R /S /T /U 11{/.notdef}rp /a 
/.notdef /c /d /e /.notdef /g /h /i 
/.notdef /k /l /m /n /o 2{/.notdef}rp /r 
/s /t /u 138{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
214.004 28.6889 mo
(MPEGStreamParser)
[2.63354 1.64709 1.81001 2.13881 1.64709 .823547 .98645 1.31526 1.31526 2.30475 1.64709 1.31526 
.98645 1.15236 1.31525 0 ]xsh
218.969 32.0746 mo
(I/O: *->403)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 1.4812 1.4812 0 ]xsh
213.426 35.4602 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.4812 .740601 1.64709 1.81 2.13881 1.81 1.81001 1.64709 2.13881 1.81 
.740601 1.4812 1.4812 0 ]xsh
226.017 16.5859 mo
226.017 18.278 226.017 20.183 226.017 22.087 cv
@
225.594 22.087 mo
226.017 24.2029 li
226.652 22.087 li
cp
@
225.594 22.087 mo
226.017 24.2029 li
226.652 22.087 li
f
240.829 50.018 mo
240.829 47.915 234.197 46.21 226.017 46.21 cv
217.836 46.21 211.205 47.915 211.205 50.018 cv
211.205 52.122 217.836 53.827 226.017 53.827 cv
234.197 53.827 240.829 52.122 240.829 50.018 cv
@
240.829 50.018 mo
240.829 47.915 234.197 46.21 226.017 46.21 cv
217.836 46.21 211.205 47.915 211.205 50.018 cv
211.205 52.122 217.836 53.827 226.017 53.827 cv
234.197 53.827 240.829 52.122 240.829 50.018 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
/six <1C60D8A8C9B7A73DF81BACD811429F931042E1295F1D2320E46DE79DF7
47FCAABFFD92F045A475E54E15C8E93ECB3BD59C8545C0EF45BF22429615FC68
5C033A02F070B2C6D7D737838C1853D297AC8915086E73952A7A9847D6F588AB
17767CC39CB62607242BC1B7BFF5295CEB6C03755CD9B53DA2> |-
/eight <1C60D8A8C9B7A73D9EB159A3CFECEE26FAC12AD4B6691842B4C84783
E84E1D8CD272AEC54014C937C15B810E403549328E3DC44B6A66E9E0AE5509A1
20FFE6F694340EC43D35C59CD7D1B2F14C1F1D5BA576A10F77E962817750FC0E
DC62627EE0E94BCE030A10C59143A015250A384C09B6A65F8572DF3FCBF68CF8
0D23E4E88D0691BD2178810DDABD5F40D8018F795B8CB5A52DDDD05F80E9A2BC
CDF3A5E14C701FBADF0447A7AE0E47FA8F86216AC25155BFF3569B19382CA905
7B18009FE630A2D7CEFDC3A4A3> |-
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 54 /six put
dup 56 /eight put
dup 98 /b put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /.notdef /three /four 
/.notdef /six /.notdef /eight /.notdef /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 
/.notdef /R /S /T /U 11{/.notdef}rp /a /b 
/c /d /e /.notdef /g /h /i /.notdef 
/k /l /m /n /o 2{/.notdef}rp /r /s 
/t /u 138{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
213.264 50.6949 mo
(roundrobin\(384,16,3\))
[.98645 1.4812 1.4812 1.4812 1.4812 .986465 1.48119 1.4812 .823547 1.4812 .986465 1.4812 
1.4812 1.48119 .740601 1.4812 1.4812 .740601 1.4812 0 ]xsh
226.017 38.592 mo
226.017 40.496 226.017 42.4009 226.017 44.3049 cv
@
225.594 44.0939 mo
226.017 46.21 li
226.652 44.0939 li
cp
@
225.594 44.0939 mo
226.017 46.21 li
226.652 44.0939 li
f
198.932 68.639 mo
198.932 66.068 192.679 63.9839 184.966 63.9839 cv
177.253 63.9839 171.001 66.068 171.001 68.639 cv
171.001 71.21 177.253 73.2939 184.966 73.2939 cv
192.679 73.2939 198.932 71.21 198.932 68.639 cv
@
198.932 68.639 mo
198.932 66.068 192.679 63.9839 184.966 63.9839 cv
177.253 63.9839 171.001 66.068 171.001 68.639 cv
171.001 71.21 177.253 73.2939 184.966 73.2939 cv
192.679 73.2939 198.932 71.21 198.932 68.639 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Z <1C60D8A8C9B7D8BE77A3BDA24C4F667A02060AD299A5EC1894B68DCAC3DB
787FE5F9D15DF76FDAF4298233CFCEF8B1E26BA6B780E4ACF507403C18EFE239
6ED23F8FD0119684BDFE54> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 90 /Z put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /.notdef /three /four 
/.notdef /six /.notdef /eight /.notdef /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 
/.notdef /R /S /T /U 4{/.notdef}rp /Z 6{/.notdef}rp 
/a /b /c /d /e /.notdef /g /h 
/i /.notdef /k /l /m /n /o 2{/.notdef}rp 
/r /s /t /u 138{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
173.778 67.6229 mo
(ZigZagUnordering)
[1.81 .823547 1.4812 1.81001 1.31526 1.4812 2.13881 1.48119 1.4812 .986465 1.4812 1.31526 
.98645 .823547 1.4812 0 ]xsh
177.919 71.0085 mo
(I/O: 64->64)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 .986465 1.67078 1.4812 0 ]xsh
218.611 53.404 mo
212.051 56.366 202.318 60.81 194.912 64.196 cv
@
195.123 63.561 mo
193.43 64.83 li
195.546 64.4069 li
cp
@
195.123 63.561 mo
193.43 64.83 li
195.546 64.4069 li
f
242.522 68.639 mo
242.522 64.666 235.132 61.445 226.017 61.445 cv
216.901 61.445 209.512 64.666 209.512 68.639 cv
209.512 72.612 216.901 75.8339 226.017 75.8339 cv
235.132 75.8339 242.522 72.612 242.522 68.639 cv
@
242.522 68.639 mo
242.522 64.666 235.132 61.445 226.017 61.445 cv
216.901 61.445 209.512 64.666 209.512 68.639 cv
209.512 72.612 216.901 75.8339 226.017 75.8339 cv
235.132 75.8339 242.522 72.612 242.522 68.639 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/V <1C60D8A8C9B6079F005CDC6370483696E1EAFC944BD4E06D86DBD18EB735
2F45C381C0DF5B906978D128771DD089E21DCCBC0592B3A6BE45DFF941B3D9AF
82C0E5BBEE832081C600F8D424981C94A7921155A8C74A96B13AD2AF06E82571
B4060A57A3D45E0E99876FCE9C38AE3E4A7F8C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 86 /V put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /.notdef /three /four 
/.notdef /six /.notdef /eight /.notdef /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 
/.notdef /R /S /T /U /V 3{/.notdef}rp /Z 
6{/.notdef}rp /a /b /c /d /e /.notdef /g 
/h /i /.notdef /k /l /m /n /o 
2{/.notdef}rp /r /s /t /u 138{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
213.101 65.931 mo
(MotionVectorDecode)
[2.63354 1.4812 .823547 .823547 1.4812 1.4812 2.13881 1.31526 1.31526 .823547 1.4812 .98645 
2.13881 1.31526 1.31526 1.4812 1.4812 0 ]xsh
219.71 69.3166 mo
(I/O: 16->8)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 .986465 1.67078 0 ]xsh
213.427 72.7022 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.4812 .740601 1.64709 1.81 2.13881 1.81 1.81001 1.64709 2.13881 1.81 
.740601 1.4812 1.4812 0 ]xsh
226.017 53.827 mo
226.017 55.308 226.017 57.424 226.017 59.329 cv
@
225.594 59.329 mo
226.017 61.445 li
226.652 59.329 li
cp
@
225.594 59.329 mo
226.017 61.445 li
226.652 59.329 li
f
264.316 88.318 mo
264.316 85.747 260.243 83.663 255.218 83.663 cv
250.193 83.663 246.119 85.747 246.119 88.318 cv
246.119 90.889 250.193 92.973 255.218 92.973 cv
260.243 92.973 264.316 90.889 264.316 88.318 cv
@
264.316 88.318 mo
264.316 85.747 260.243 83.663 255.218 83.663 cv
250.193 83.663 246.119 85.747 246.119 88.318 cv
246.119 90.889 250.193 92.973 255.218 92.973 cv
260.243 92.973 264.316 90.889 264.316 88.318 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/p <1C60D8A8C9B7A73D9AFACE39AE6BAA6E09D7322029CE296F526808097535
692942DF193E08360A1A27EB6A08251F7D53D3FA96D22918185F2823E13833F6
44411211FB9E60C91D24768368C1EE71DFEA1AF8285D596D61CE8A067C14BC2E
E1974A4DF14D782DBEDB8D2CE5673BB9634CC4945A7FA5A5E1B87E0F2D94F438
C21548DAE429B68406206429A87E1B462DA7A9D2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /.notdef /three /four 
/.notdef /six /.notdef /eight /.notdef /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 
/.notdef /R /S /T /U /V 3{/.notdef}rp /Z 
6{/.notdef}rp /a /b /c /d /e /.notdef /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u 138{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
251.104 87.3019 mo
(Repeat)
[1.97589 1.31526 1.4812 1.31526 1.31528 0 ]xsh
248.91 90.6875 mo
(I/O: 3->18)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 1.4812 0 ]xsh
235.962 52.981 mo
239.771 54.2499 243.791 56.366 245.696 58.694 cv
249.928 63.9839 252.678 74.987 254.16 82.1819 cv
@
253.525 81.547 mo
254.371 83.663 li
254.583 81.547 li
cp
@
253.525 81.547 mo
254.371 83.663 li
254.583 81.547 li
f
227.498 285.741 mo
227.498 283.637 221.53 281.932 214.167 281.932 cv
206.805 281.932 200.836 283.637 200.836 285.741 cv
200.836 287.844 206.805 289.55 214.167 289.55 cv
221.53 289.55 227.498 287.844 227.498 285.741 cv
@
227.498 285.741 mo
227.498 283.637 221.53 281.932 214.167 281.932 cv
206.805 281.932 200.836 283.637 200.836 285.741 cv
200.836 287.844 206.805 289.55 214.167 289.55 cv
221.53 289.55 227.498 287.844 227.498 285.741 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
202.895 286.418 mo
(roundrobin\(64,8,3\))
[.98645 1.4812 1.4812 1.4812 1.4812 .986465 1.4812 1.48119 .823547 1.4812 .986465 1.4812 
1.4812 .740601 1.4812 .740601 1.48119 0 ]xsh
229.402 301.822 mo
229.402 299.719 222.392 298.014 213.744 298.014 cv
205.096 298.014 198.086 299.719 198.086 301.822 cv
198.086 303.926 205.096 305.631 213.744 305.631 cv
222.392 305.631 229.402 303.926 229.402 301.822 cv
@
229.402 301.822 mo
229.402 299.719 222.392 298.014 213.744 298.014 cv
205.096 298.014 198.086 299.719 198.086 301.822 cv
198.086 303.926 205.096 305.631 213.744 305.631 cv
222.392 305.631 229.402 303.926 229.402 301.822 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73DB9D92E2C498F1C8C272174C48D3E3EA8F27C6E6BA
93064621D133D030C551A42025686691A783FB90A2D496BEF06790AC79A6878D
99BC23CD14D9CFD812148CC847ABD0CF7E73A1A9D5ACE6E2E3BBFD4DD> |-
/seven <1C60D8A8C9B7A73DFE313D538903D2D688A80497AF19F58251B88346
588CB5A8F94928A032E7AE04ED687068FF5EFE684F47125CC227938E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 53 /five put
dup 55 /seven put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /.notdef /three /four 
/five /six /seven /eight /.notdef /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 
/.notdef /R /S /T /U /V 3{/.notdef}rp /Z 
6{/.notdef}rp /a /b /c /d /e /.notdef /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u 138{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
200.25 302.5 mo
(roundrobin\(300,75,75\))
[.98645 1.4812 1.4812 1.4812 1.4812 .986465 1.48119 1.4812 .823547 1.4812 .986465 1.4812 
1.4812 1.48119 .740601 1.4812 1.4812 .740601 1.4812 1.4812 0 ]xsh
214.167 289.55 mo
213.956 291.454 213.956 293.782 213.956 295.898 cv
@
213.532 295.898 mo
213.956 298.014 li
214.59 295.898 li
cp
@
213.532 295.898 mo
213.956 298.014 li
214.59 295.898 li
f
190.256 88.318 mo
190.256 86.214 185.614 84.509 179.888 84.509 cv
174.162 84.509 169.52 86.214 169.52 88.318 cv
169.52 90.421 174.162 92.127 179.888 92.127 cv
185.614 92.127 190.256 90.421 190.256 88.318 cv
@
190.256 88.318 mo
190.256 86.214 185.614 84.509 179.888 84.509 cv
174.162 84.509 169.52 86.214 169.52 88.318 cv
169.52 90.421 174.162 92.127 179.888 92.127 cv
185.614 92.127 190.256 90.421 190.256 88.318 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
171.62 88.9949 mo
(duplicate\(1,1\))
[1.4812 1.4812 1.4812 .823547 .823547 1.31526 1.31526 .823547 1.31525 .986465 1.4812 .740601 
1.4812 0 ]xsh
183.697 73.506 mo
183.062 76.257 182.004 79.642 181.369 82.6049 cv
@
180.946 82.393 mo
180.946 84.509 li
182.004 82.6049 li
cp
@
180.946 82.393 mo
180.946 84.509 li
182.004 82.6049 li
f
143.493 104.611 mo
143.493 102.508 137.998 100.802 131.22 100.802 cv
124.442 100.802 118.947 102.508 118.947 104.611 cv
118.947 106.715 124.442 108.42 131.22 108.42 cv
137.998 108.42 143.493 106.715 143.493 104.611 cv
@
143.493 104.611 mo
143.493 102.508 137.998 100.802 131.22 100.802 cv
124.442 100.802 118.947 102.508 118.947 104.611 cv
118.947 106.715 124.442 108.42 131.22 108.42 cv
137.998 108.42 143.493 106.715 143.493 104.611 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
121.059 105.288 mo
(roundrobin\(1,63\))
[.986458 1.4812 1.4812 1.48119 1.4812 .986458 1.4812 1.4812 .823547 1.4812 .98645 1.4812 
.740601 1.4812 1.4812 0 ]xsh
171.636 90.6459 mo
163.172 92.973 150.476 96.57 142.858 99.11 cv
141.8 99.321 140.319 99.956 139.049 100.591 cv
@
139.261 99.744 mo
137.78 101.437 li
139.896 100.802 li
cp
@
139.261 99.744 mo
137.78 101.437 li
139.896 100.802 li
f
202.318 123.232 mo
202.318 119.259 192.275 116.038 179.888 116.038 cv
167.5 116.038 157.458 119.259 157.458 123.232 cv
157.458 127.205 167.5 130.426 179.888 130.426 cv
192.275 130.426 202.318 127.205 202.318 123.232 cv
@
202.318 123.232 mo
202.318 119.259 192.275 116.038 179.888 116.038 cv
167.5 116.038 157.458 119.259 157.458 123.232 cv
157.458 127.205 167.5 130.426 179.888 130.426 cv
192.275 130.426 202.318 127.205 202.318 123.232 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Q <1C60D8A8C9B6079F258D65BC2331B95A48C80B9768E78495F9F852D084FE
B5569E0998B92A8C02FE98CC8756B9450AFC22EB75A028A68EEC267535515B8A
7AF5FA296BEEAF84AC729826043DC76CC7E6AEDD8E5722CD3906055C50935FC9
A9E5D884988B49C45AA5CE390B6810BD47B8089DA8CFB16CD03A129E9C7C7933
9702030A> |-
/underscore <1C60D8A8C9B7A73DCDBEB64DA5D4EE31FFCBE2EC06B4C4F1354
CB100A813> |-
/f <1C60D8A8C9B81F2C3AAA7F9332A1FC560AB2BC70F6F61F670AD82FC8B626
674790DAFBDF46077811E1DF38721CA7CA8FBC2C5E006E567037490710BD3A02
BCB7C7EDEC00C0FF3F7CF7FF144794FA5B0DC9D77482C00E98ABF65E83ECDA1A
E1009D> |-
/v <1C60D8A8C9B7A73DDA3AE0A055993EE6BE7DFD4A4A2DB6881516C07791ED
230086728F5F7B4242AB79AA3E9EFA40308C16768E728C96C19C447086D3AC82
2F0AB1C43C44A30591856370C72E911DB5FEBBFD365EF7E42462BF4A23A3EEAE
F504CBF5C917EC0A44C5B6D735> |-
/z <1C60D8A8C9B77FE284EFEC4CF0FCC63CDEB1624F39F402FFE3D4A95D1F81
2924519B69F6054956BEDD472A0597A54C3034FF3538C85678A4E4FE466B514C
141F526BEAADD3E6242801DF59EF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 81 /Q put
dup 95 /underscore put
dup 102 /f put
dup 118 /v put
dup 122 /z put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /.notdef /three /four 
/five /six /seven /eight /.notdef /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 
/Q /R /S /T /U /V 3{/.notdef}rp /Z 
4{/.notdef}rp /underscore /.notdef /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v 3{/.notdef}rp /z 133{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
160.966 120.523 mo
(InverseQuantization_AC_Coeff)
[.98645 1.4812 1.4812 1.31526 .986465 1.15234 1.31526 2.13881 1.4812 1.31526 1.4812 .823547 
.823547 1.31526 1.31526 .823547 .823547 1.48119 1.4812 1.4812 2.13881 1.97591 1.4812 1.97589 
1.4812 1.31526 .986465 0 ]xsh
172.841 123.909 mo
(I/O: 64->64)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 .986465 1.67078 1.4812 0 ]xsh
167.298 127.294 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.4812 .740601 1.64709 1.81 2.13881 1.81 1.81001 1.64709 2.13881 1.81 
.740601 1.4812 1.4812 0 ]xsh
179.888 92.127 mo
179.888 97.205 179.888 106.727 179.888 113.71 cv
@
179.465 113.922 mo
179.888 116.038 li
180.523 113.922 li
cp
@
179.465 113.922 mo
179.888 116.038 li
180.523 113.922 li
f
192.161 157.088 mo
192.161 154.984 186.287 153.279 179.042 153.279 cv
171.796 153.279 165.922 154.984 165.922 157.088 cv
165.922 159.191 171.796 160.897 179.042 160.897 cv
186.287 160.897 192.161 159.191 192.161 157.088 cv
@
192.161 157.088 mo
192.161 154.984 186.287 153.279 179.042 153.279 cv
171.796 153.279 165.922 154.984 165.922 157.088 cv
165.922 159.191 171.796 160.897 179.042 160.897 cv
186.287 160.897 192.161 159.191 192.161 157.088 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
168.14 157.765 mo
(roundrobin\(64,64\))
[.98645 1.4812 1.4812 1.4812 1.4812 .986465 1.4812 1.48119 .823547 1.4812 .986465 1.4812 
1.4812 .740601 1.4812 1.48119 0 ]xsh
204.01 175.709 mo
204.01 171.735 192.831 168.514 179.042 168.514 cv
165.252 168.514 154.073 171.735 154.073 175.709 cv
154.073 179.682 165.252 182.903 179.042 182.903 cv
192.831 182.903 204.01 179.682 204.01 175.709 cv
@
204.01 175.709 mo
204.01 171.735 192.831 168.514 179.042 168.514 cv
165.252 168.514 154.073 171.735 154.073 175.709 cv
154.073 179.682 165.252 182.903 179.042 182.903 cv
192.831 182.903 204.01 179.682 204.01 175.709 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
/J <1C60D8A8C9B7361F02E9DFE0B9C9639F5322575055288FA88C96DC9CB9D9
CA19F6F8F65E0BC3562823C923780B557829CF69C4889E8D8AE10C346B69E6B3
C49D8F83FB5992EF32CD5E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 50 /two put
dup 74 /J put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /.notdef /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I /J /.notdef /L /M /.notdef /O 
/P /Q /R /S /T /U /V 3{/.notdef}rp 
/Z 4{/.notdef}rp /underscore /.notdef /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v 3{/.notdef}rp /z 133{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
157.484 173 mo
(InverseQuantizationJoinerSubstitute)
[.98645 1.4812 1.4812 1.31526 .986465 1.15234 1.31526 2.13881 1.4812 1.31526 1.4812 .823547 
.823547 1.31526 1.31526 .823547 .823547 1.4812 1.48119 1.15236 1.4812 .823547 1.4812 1.31526 
.98645 1.64709 1.4812 1.4812 1.15234 .823547 .823547 .823547 1.4812 .823547 0 ]xsh
171.253 176.385 mo
(I/O: 128->64)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 .986465 1.67078 1.4812 0 
]xsh
166.451 179.771 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.4812 .740601 1.64709 1.81 2.13881 1.81 1.81001 1.64709 2.13881 1.81 
.740601 1.4812 1.4812 0 ]xsh
179.042 160.897 mo
179.042 162.378 179.042 164.494 179.042 166.398 cv
@
178.618 166.398 mo
179.042 168.514 li
179.676 166.398 li
cp
@
178.618 166.398 mo
179.042 168.514 li
179.676 166.398 li
f
104.982 123.232 mo
104.982 119.259 93.329 116.038 78.9548 116.038 cv
64.5806 116.038 52.928 119.259 52.928 123.232 cv
52.928 127.205 64.5806 130.426 78.9548 130.426 cv
93.329 130.426 104.982 127.205 104.982 123.232 cv
@
104.982 123.232 mo
104.982 119.259 93.329 116.038 78.9548 116.038 cv
64.5806 116.038 52.928 119.259 52.928 123.232 cv
52.928 127.205 64.5806 130.426 78.9548 130.426 cv
93.329 130.426 104.982 127.205 104.982 123.232 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
56.4956 120.523 mo
(InverseQuantization_DC_Intra_Coeff)
[.986458 1.4812 1.4812 1.31526 .986458 1.15235 1.31526 2.13881 1.48119 1.31526 1.4812 .823547 
.823547 1.31526 1.31526 .823547 .823547 1.48119 1.4812 1.4812 2.13881 1.9759 1.4812 .986458 
1.4812 .823547 .98645 1.31526 1.4812 1.9759 1.4812 1.31525 .986465 0 ]xsh
73.3884 123.909 mo
(I/O: 1->1)
[.986458 .823547 2.13881 .823547 .740593 1.4812 .986458 1.67078 0 ]xsh
66.3647 127.294 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.4812 .740593 1.64709 1.81001 2.13881 1.81001 1.81001 1.64709 2.1388 1.81001 
.740601 1.4812 1.4812 0 ]xsh
123.179 107.574 mo
115.985 109.901 105.616 113.498 96.7292 116.884 cv
@
96.7292 116.249 mo
94.8248 117.519 li
96.9408 117.307 li
cp
@
96.7292 116.249 mo
94.8248 117.519 li
96.9408 117.307 li
f
153.65 123.232 mo
153.65 119.259 143.607 116.038 131.22 116.038 cv
118.832 116.038 108.79 119.259 108.79 123.232 cv
108.79 127.205 118.832 130.426 131.22 130.426 cv
143.607 130.426 153.65 127.205 153.65 123.232 cv
@
153.65 123.232 mo
153.65 119.259 143.607 116.038 131.22 116.038 cv
118.832 116.038 108.79 119.259 108.79 123.232 cv
108.79 127.205 118.832 130.426 131.22 130.426 cv
143.607 130.426 153.65 127.205 153.65 123.232 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
112.298 120.523 mo
(InverseQuantization_AC_Coeff)
[.986458 1.4812 1.4812 1.31526 .98645 1.15235 1.31526 2.13881 1.4812 1.31526 1.4812 .82354 
.823547 1.31526 1.31526 .823547 .823547 1.4812 1.4812 1.4812 2.13881 1.97589 1.4812 1.97591 
1.4812 1.31525 .986465 0 ]xsh
124.173 123.909 mo
(I/O: 63->63)
[.986458 .823547 2.1388 .823547 .740601 1.4812 1.4812 .986465 1.67078 1.4812 0 ]xsh
118.63 127.294 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.48119 .740601 1.64709 1.81001 2.1388 1.81001 1.81 1.64709 2.13881 1.81001 
.740585 1.4812 1.4812 0 ]xsh
131.22 108.42 mo
131.22 109.901 131.22 112.017 131.22 113.922 cv
@
130.797 113.922 mo
131.22 116.038 li
131.855 113.922 li
cp
@
130.797 113.922 mo
131.22 116.038 li
131.855 113.922 li
f
143.493 141.853 mo
143.493 139.749 137.998 138.044 131.22 138.044 cv
124.442 138.044 118.947 139.749 118.947 141.853 cv
118.947 143.956 124.442 145.662 131.22 145.662 cv
137.998 145.662 143.493 143.956 143.493 141.853 cv
@
143.493 141.853 mo
143.493 139.749 137.998 138.044 131.22 138.044 cv
124.442 138.044 118.947 139.749 118.947 141.853 cv
118.947 143.956 124.442 145.662 131.22 145.662 cv
137.998 145.662 143.493 143.956 143.493 141.853 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
121.059 142.53 mo
(roundrobin\(1,63\))
[.986458 1.4812 1.4812 1.48119 1.4812 .986458 1.4812 1.4812 .823547 1.4812 .98645 1.4812 
.740601 1.4812 1.4812 0 ]xsh
137.568 145.238 mo
139.472 146.085 141.377 146.931 142.858 147.354 cv
149.418 149.47 159.574 152.01 167.404 154.126 cv
@
166.98 154.549 mo
169.096 154.549 li
167.192 153.491 li
cp
@
166.98 154.549 mo
169.096 154.549 li
167.192 153.491 li
f
94.8248 128.945 mo
103.5 132.119 114.08 135.716 121.486 138.467 cv
@
120.852 138.89 mo
122.968 138.89 li
121.063 137.832 li
cp
@
120.852 138.89 mo
122.968 138.89 li
121.063 137.832 li
f
131.22 130.426 mo
131.22 132.331 131.22 134.235 131.22 136.14 cv
@
130.797 135.928 mo
131.22 138.044 li
131.855 135.928 li
cp
@
130.797 135.928 mo
131.22 138.044 li
131.855 135.928 li
f
179.676 130.426 mo
179.465 136.774 179.253 145.662 179.042 151.375 cv
@
178.618 151.163 mo
179.042 153.279 li
179.676 151.163 li
cp
@
178.618 151.163 mo
179.042 153.279 li
179.676 151.163 li
f
189.833 195.388 mo
189.833 192.817 185.854 190.732 180.946 190.732 cv
176.038 190.732 172.059 192.817 172.059 195.388 cv
172.059 197.959 176.038 200.043 180.946 200.043 cv
185.854 200.043 189.833 197.959 189.833 195.388 cv
@
189.833 195.388 mo
189.833 192.817 185.854 190.732 180.946 190.732 cv
176.038 190.732 172.059 192.817 172.059 195.388 cv
172.059 197.959 176.038 200.043 180.946 200.043 cv
185.854 200.043 189.833 197.959 189.833 195.388 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
174.857 194.372 mo
(Saturation)
[1.64709 1.31526 .823547 1.4812 .98645 1.31526 .823547 .823547 1.4812 0 ]xsh
175.38 197.758 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
179.676 182.903 mo
179.888 184.808 180.1 186.712 180.311 188.616 cv
@
179.676 188.405 mo
180.523 190.521 li
180.734 188.405 li
cp
@
179.676 188.405 mo
180.523 190.521 li
180.734 188.405 li
f
198.086 212.739 mo
198.086 210.168 192.117 208.084 184.755 208.084 cv
177.392 208.084 171.424 210.168 171.424 212.739 cv
171.424 215.31 177.392 217.394 184.755 217.394 cv
192.117 217.394 198.086 215.31 198.086 212.739 cv
@
198.086 212.739 mo
198.086 210.168 192.117 208.084 184.755 208.084 cv
177.392 208.084 171.424 210.168 171.424 212.739 cv
171.424 215.31 177.392 217.394 184.755 217.394 cv
192.117 217.394 198.086 215.31 198.086 212.739 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
174.304 211.723 mo
(MismatchControl)
[2.63354 .823547 1.15236 2.30475 1.31526 .823547 1.31526 1.4812 1.97589 1.4812 1.4812 .823547 
.98645 1.4812 0 ]xsh
177.708 215.109 mo
(I/O: 64->64)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 .986465 1.67078 1.4812 0 ]xsh
182.004 200.043 mo
182.216 201.947 182.639 204.063 183.274 205.968 cv
@
182.639 205.968 mo
183.697 207.872 li
183.697 205.756 li
cp
@
182.639 205.968 mo
183.697 207.872 li
183.697 205.756 li
f
202.741 230.09 mo
202.741 227.519 195.162 225.435 185.813 225.435 cv
176.464 225.435 168.885 227.519 168.885 230.09 cv
168.885 232.661 176.464 234.745 185.813 234.745 cv
195.162 234.745 202.741 232.661 202.741 230.09 cv
@
202.741 230.09 mo
202.741 227.519 195.162 225.435 185.813 225.435 cv
176.464 225.435 168.885 227.519 168.885 230.09 cv
168.885 232.661 176.464 234.745 185.813 234.745 cv
195.162 234.745 202.741 232.661 202.741 230.09 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/w <1C60D8A8C9B6079F6CBBA5F366E947F933D60DF598D919B1B7650559D736
37DABDC1EE55BCEC17305D792CEB494E24BD853631335C74FFCA113C4D914522
6940D65B0FA636B78B1332922431C88D4DDF20C0A3C1C91D0C3F0EC21F67A6EF
80D94D8DD0BC64DA8FAF76B12BBC90C7B441833497F4FAAF7AFFFE22453504D1
C6C3D3F89787D8CE910F64CD7AC81F424C> |-
/x <1C60D8A8C9B7A73DD670D8CCCBFBC4E258D7CAA3ED17D069C025C1A2420A
81D4B3EAD7110946DAC3BA40217DDD18B672D1C19269266B39D87F9C1DDA90BD
8FC71EBFE3B2169703196A9FC02F9EA267A90B94DB1FAA5C105A1B22ABB76205
ADA50D456170C13F6F28FC77F3978776E97B76A3DEF1976915B787070DC57673
F3C0FA2B4E9DEFEF7147D4269144499ACAFBAFD930E1A038534DF3D883A96117
05279F3EC76B84BD5055C0FF3A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 119 /w put
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /.notdef /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I /J /.notdef /L /M /.notdef /O 
/P /Q /R /S /T /U /V 3{/.notdef}rp 
/Z 4{/.notdef}rp /underscore /.notdef /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /x /.notdef /z 133{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
171.743 229.074 mo
(iDCT8x8_1D_row_fast)
[.823547 2.13881 1.97589 1.81001 1.4812 1.4812 1.48119 1.4812 1.4812 2.13881 1.4812 .986465 
1.4812 2.13879 1.4812 .986465 1.31526 1.15234 0 ]xsh
180.246 232.46 mo
(I/O: 8->8)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
184.966 217.606 mo
185.178 219.298 185.178 221.203 185.39 223.107 cv
@
184.966 223.107 mo
185.601 225.223 li
185.813 223.107 li
cp
@
184.966 223.107 mo
185.601 225.223 li
185.813 223.107 li
f
203.376 249.769 mo
203.376 245.795 195.702 242.574 186.236 242.574 cv
176.77 242.574 169.096 245.795 169.096 249.769 cv
169.096 253.742 176.77 256.963 186.236 256.963 cv
195.702 256.963 203.376 253.742 203.376 249.769 cv
@
203.376 249.769 mo
203.376 245.795 195.702 242.574 186.236 242.574 cv
176.77 242.574 169.096 245.795 169.096 249.769 cv
169.096 253.742 176.77 256.963 186.236 256.963 cv
195.702 256.963 203.376 253.742 203.376 249.769 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
172.66 247.06 mo
(iDCT8x8_1D_col_fast)
[.823547 2.13881 1.97589 1.81001 1.4812 1.4812 1.4812 1.48119 1.4812 2.13881 1.4812 1.31526 
1.4812 .823547 1.4812 .98645 1.31526 1.15236 0 ]xsh
179.189 250.446 mo
(I/O: 64->64)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 .986465 1.67078 1.4812 0 ]xsh
173.646 253.831 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.4812 .740601 1.64709 1.81 2.13881 1.81 1.81001 1.64709 2.13881 1.81 
.740601 1.4812 1.4812 0 ]xsh
185.813 234.957 mo
185.813 236.65 186.024 238.554 186.024 240.458 cv
@
185.601 240.458 mo
186.024 242.574 li
186.659 240.458 li
cp
@
185.601 240.458 mo
186.024 242.574 li
186.659 240.458 li
f
202.106 269.448 mo
202.106 266.877 195.759 264.792 187.929 264.792 cv
180.099 264.792 173.752 266.877 173.752 269.448 cv
173.752 272.019 180.099 274.103 187.929 274.103 cv
195.759 274.103 202.106 272.019 202.106 269.448 cv
@
202.106 269.448 mo
202.106 266.877 195.759 264.792 187.929 264.792 cv
180.099 264.792 173.752 266.877 173.752 269.448 cv
173.752 272.019 180.099 274.103 187.929 274.103 cv
195.759 274.103 202.106 272.019 202.106 269.448 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
176.491 268.432 mo
(BoundedSaturation)
[1.97589 1.4812 1.4812 1.4812 1.4812 1.31526 1.4812 1.64709 1.31526 .823547 1.4812 .98645 
1.31526 .823547 .823547 1.4812 0 ]xsh
182.362 271.818 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
186.871 256.963 mo
187.082 258.868 187.082 260.772 187.294 262.465 cv
@
186.871 262.465 mo
187.506 264.581 li
187.717 262.465 li
cp
@
186.871 262.465 mo
187.506 264.581 li
187.717 262.465 li
f
194.7 273.68 mo
198.297 276.007 202.952 278.97 206.761 281.086 cv
@
206.338 281.509 mo
208.454 282.144 li
206.973 280.662 li
cp
@
206.338 281.509 mo
208.454 282.144 li
206.973 280.662 li
f
231.307 88.318 mo
231.307 85.747 227.233 83.663 222.208 83.663 cv
217.183 83.663 213.109 85.747 213.109 88.318 cv
213.109 90.889 217.183 92.973 222.208 92.973 cv
227.233 92.973 231.307 90.889 231.307 88.318 cv
@
231.307 88.318 mo
231.307 85.747 227.233 83.663 222.208 83.663 cv
217.183 83.663 213.109 85.747 213.109 88.318 cv
213.109 90.889 217.183 92.973 222.208 92.973 cv
227.233 92.973 231.307 90.889 231.307 88.318 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
218.095 87.3019 mo
(Repeat)
[1.97589 1.31526 1.4812 1.31526 1.31526 0 ]xsh
215.901 90.6875 mo
(I/O: 8->48)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 1.4812 0 ]xsh
224.536 75.8339 mo
224.324 77.738 223.901 79.642 223.478 81.547 cv
@
223.054 81.335 mo
223.054 83.4509 li
224.112 81.547 li
cp
@
223.054 81.335 mo
223.054 83.4509 li
224.112 81.547 li
f
221.362 92.973 mo
220.092 100.591 217.976 114.768 217.976 123.232 cv
217.976 123.232 217.976 123.232 217.976 249.769 cv
217.976 258.233 216.072 272.622 215.014 280.451 cv
@
214.59 279.816 mo
214.802 281.932 li
215.648 279.816 li
cp
@
214.59 279.816 mo
214.802 281.932 li
215.648 279.816 li
f
252.044 92.762 mo
247.388 99.956 238.713 114.133 238.713 123.232 cv
238.713 123.232 238.713 123.232 238.713 249.769 cv
238.713 259.926 226.652 273.468 219.669 280.662 cv
@
219.246 280.239 mo
218.188 282.144 li
220.092 281.086 li
cp
@
219.246 280.239 mo
218.188 282.144 li
220.092 281.086 li
f
137.145 318.116 mo
137.145 315.545 128.524 313.46 117.889 313.46 cv
107.255 313.46 98.6336 315.545 98.6336 318.116 cv
98.6336 320.687 107.255 322.771 117.889 322.771 cv
128.524 322.771 137.145 320.687 137.145 318.116 cv
@
137.145 318.116 mo
137.145 315.545 128.524 313.46 117.889 313.46 cv
107.255 313.46 98.6336 315.545 98.6336 318.116 cv
98.6336 320.687 107.255 322.771 117.889 322.771 cv
128.524 322.771 137.145 320.687 137.145 318.116 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
101.35 317.1 mo
(Post_CollapsedDataParallel)
[1.64709 1.4812 1.15235 .823547 1.48119 1.9759 1.4812 .823547 .823547 1.31526 1.4812 1.15235 
1.31525 1.4812 2.13881 1.31526 .823547 1.31526 1.64709 1.31526 .98645 1.31526 .823547 .823547 
1.31526 0 ]xsh
109.36 320.486 mo
(I/O: 300->300)
[.986458 .823547 2.13881 .823547 .740601 1.48119 1.4812 1.4812 .986458 1.67078 1.4812 1.4812 
0 ]xsh
198.72 303.092 mo
186.236 304.15 168.462 305.843 157.247 307.536 cv
150.264 308.805 140.107 311.556 131.855 313.884 cv
@
132.066 313.249 mo
130.162 314.307 li
132.278 314.307 li
cp
@
132.066 313.249 mo
130.162 314.307 li
132.278 314.307 li
f
228.344 318.116 mo
228.344 316.012 221.334 314.307 212.686 314.307 cv
204.038 314.307 197.028 316.012 197.028 318.116 cv
197.028 320.219 204.038 321.924 212.686 321.924 cv
221.334 321.924 228.344 320.219 228.344 318.116 cv
@
228.344 318.116 mo
228.344 316.012 221.334 314.307 212.686 314.307 cv
204.038 314.307 197.028 316.012 197.028 318.116 cv
197.028 320.219 204.038 321.924 212.686 321.924 cv
221.334 321.924 228.344 320.219 228.344 318.116 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
199.193 318.793 mo
(roundrobin\(64,8,1,1,1\))
[.98645 1.4812 1.4812 1.4812 1.4812 .986465 1.48119 1.4812 .823547 1.4812 .986465 1.4812 
1.4812 .740601 1.48119 .740601 1.4812 .740601 1.4812 .740601 1.4812 0 ]xsh
213.532 305.631 mo
213.321 307.536 213.109 310.075 213.109 312.402 cv
@
212.686 312.191 mo
212.898 314.307 li
213.744 312.191 li
cp
@
212.686 312.191 mo
212.898 314.307 li
213.744 312.191 li
f
325.046 318.116 mo
325.046 316.012 318.035 314.307 309.387 314.307 cv
300.739 314.307 293.729 316.012 293.729 318.116 cv
293.729 320.219 300.739 321.924 309.387 321.924 cv
318.035 321.924 325.046 320.219 325.046 318.116 cv
@
325.046 318.116 mo
325.046 316.012 318.035 314.307 309.387 314.307 cv
300.739 314.307 293.729 316.012 293.729 318.116 cv
293.729 320.219 300.739 321.924 309.387 321.924 cv
318.035 321.924 325.046 320.219 325.046 318.116 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
295.894 318.793 mo
(roundrobin\(64,8,1,1,1\))
[.98645 1.4812 1.4812 1.4812 1.4812 .98645 1.4812 1.4812 .823547 1.4812 .98645 1.4812 
1.4812 .740601 1.4812 .740601 1.4812 .740601 1.4812 .740601 1.4812 0 ]xsh
228.344 303.304 mo
239.559 304.362 254.583 306.054 263.893 307.536 cv
272.992 309.228 286.958 312.614 296.903 314.942 cv
@
296.268 315.365 mo
298.384 315.365 li
296.48 314.307 li
cp
@
296.268 315.365 mo
298.384 315.365 li
296.48 314.307 li
f
223.478 465.178 mo
223.478 463.074 217.793 461.369 210.782 461.369 cv
203.77 461.369 198.086 463.074 198.086 465.178 cv
198.086 467.281 203.77 468.986 210.782 468.986 cv
217.793 468.986 223.478 467.281 223.478 465.178 cv
@
223.478 465.178 mo
223.478 463.074 217.793 461.369 210.782 461.369 cv
203.77 461.369 198.086 463.074 198.086 465.178 cv
198.086 467.281 203.77 468.986 210.782 468.986 cv
217.793 468.986 223.478 467.281 223.478 465.178 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
200.25 465.855 mo
(roundrobin\(1,1,1\))
[.98645 1.4812 1.4812 1.4812 1.4812 .986465 1.48119 1.4812 .823547 1.4812 .986465 1.4812 
.740601 1.4812 .740585 1.4812 0 ]xsh
227.286 483.798 mo
227.286 479.825 219.897 476.604 210.782 476.604 cv
201.666 476.604 194.277 479.825 194.277 483.798 cv
194.277 487.772 201.666 490.993 210.782 490.993 cv
219.897 490.993 227.286 487.772 227.286 483.798 cv
@
227.286 483.798 mo
227.286 479.825 219.897 476.604 210.782 476.604 cv
201.666 476.604 194.277 479.825 194.277 483.798 cv
194.277 487.772 201.666 490.993 210.782 490.993 cv
219.897 490.993 227.286 487.772 227.286 483.798 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
201.815 481.09 mo
(PictureReorder)
[1.64709 .823547 1.31526 .823547 1.4812 .98645 1.31526 1.97591 1.31526 1.48119 .986465 1.4812 
1.31526 0 ]xsh
197.81 484.476 mo
(I/O: 253440->253440)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 1.4812 .98645 
1.67079 1.48119 1.4812 1.4812 1.4812 1.4812 0 ]xsh
198.192 487.861 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.4812 .740601 1.64709 1.81 2.13881 1.81 1.81001 1.64709 2.13881 1.81 
.740601 1.4812 1.4812 0 ]xsh
210.782 468.986 mo
210.782 470.468 210.782 472.584 210.782 474.488 cv
@
210.358 474.488 mo
210.782 476.604 li
211.416 474.488 li
cp
@
210.358 474.488 mo
210.782 476.604 li
211.416 474.488 li
f
124.237 335.467 mo
124.237 332.896 120.448 330.812 115.773 330.812 cv
111.099 330.812 107.309 332.896 107.309 335.467 cv
107.309 338.038 111.099 340.122 115.773 340.122 cv
120.448 340.122 124.237 338.038 124.237 335.467 cv
@
124.237 335.467 mo
124.237 332.896 120.448 330.812 115.773 330.812 cv
111.099 330.812 107.309 332.896 107.309 335.467 cv
107.309 338.038 111.099 340.122 115.773 340.122 cv
120.448 340.122 124.237 338.038 124.237 335.467 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /.notdef /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I /J /.notdef /L /M /.notdef /O 
/P /Q /R /S /T /U /V 3{/.notdef}rp 
/Z 4{/.notdef}rp /underscore /.notdef /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /x /y /z 133{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
111.165 334.451 mo
(Identity)
[.986458 1.4812 1.31526 1.4812 .82354 .823547 .823547 0 ]xsh
110.207 337.837 mo
(I/O: 1->1)
[.986458 .823547 2.13881 .823547 .740593 1.4812 .986458 1.67078 0 ]xsh
117.254 322.982 mo
117.043 324.887 116.831 327.214 116.62 329.33 cv
@
116.196 328.696 mo
116.408 330.812 li
117.254 328.696 li
cp
@
116.196 328.696 mo
116.408 330.812 li
117.254 328.696 li
f
130.585 352.818 mo
130.585 350.247 122.154 348.163 111.753 348.163 cv
101.352 348.163 92.9204 350.247 92.9204 352.818 cv
92.9204 355.389 101.352 357.473 111.753 357.473 cv
122.154 357.473 130.585 355.389 130.585 352.818 cv
@
130.585 352.818 mo
130.585 350.247 122.154 348.163 111.753 348.163 cv
101.352 348.163 92.9204 350.247 92.9204 352.818 cv
92.9204 355.389 101.352 357.473 111.753 357.473 cv
122.154 357.473 130.585 355.389 130.585 352.818 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
95.7916 351.802 mo
(Pre_CollapsedDataParallel)
[1.64709 .986458 1.31526 1.4812 1.97589 1.4812 .823547 .823547 1.31526 1.4812 1.15235 1.31526 
1.48119 2.13881 1.31526 .823547 1.31526 1.64709 1.31526 .986458 1.31526 .82354 .823547 1.31526 
0 ]xsh
101.743 355.188 mo
(I/O: 6600->6600)
[.986458 .823547 2.13881 .823547 .740601 1.48119 1.4812 1.4812 1.4812 .986458 1.67078 1.4812 
1.4812 1.4812 0 ]xsh
114.715 340.122 mo
114.292 342.026 113.869 344.142 113.234 346.047 cv
@
112.811 345.835 mo
112.811 347.951 li
113.869 346.047 li
cp
@
112.811 345.835 mo
112.811 347.951 li
113.869 346.047 li
f
125.295 372.497 mo
125.295 370.393 118.285 368.688 109.637 368.688 cv
100.989 368.688 93.9784 370.393 93.9784 372.497 cv
93.9784 374.6 100.989 376.306 109.637 376.306 cv
118.285 376.306 125.295 374.6 125.295 372.497 cv
@
125.295 372.497 mo
125.295 370.393 118.285 368.688 109.637 368.688 cv
100.989 368.688 93.9784 370.393 93.9784 372.497 cv
93.9784 374.6 100.989 376.306 109.637 376.306 cv
118.285 376.306 125.295 374.6 125.295 372.497 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
96.1433 373.174 mo
(roundrobin\(64,8,1,1,1\))
[.986458 1.4812 1.4812 1.48119 1.4812 .986458 1.4812 1.4812 .823547 1.4812 .98645 1.4812 
1.4812 .740601 1.4812 .740601 1.4812 .740601 1.4812 .740601 1.48119 0 ]xsh
111.33 357.685 mo
110.906 360.436 110.695 363.821 110.272 366.784 cv
@
109.848 366.572 mo
110.06 368.688 li
110.906 366.572 li
cp
@
109.848 366.572 mo
110.06 368.688 li
110.906 366.572 li
f
68.1632 392.176 mo
68.1632 389.605 64.3737 387.52 59.6992 387.52 cv
55.0247 387.52 51.2352 389.605 51.2352 392.176 cv
51.2352 394.747 55.0247 396.831 59.6992 396.831 cv
64.3737 396.831 68.1632 394.747 68.1632 392.176 cv
@
68.1632 392.176 mo
68.1632 389.605 64.3737 387.52 59.6992 387.52 cv
55.0247 387.52 51.2352 389.605 51.2352 392.176 cv
51.2352 394.747 55.0247 396.831 59.6992 396.831 cv
64.3737 396.831 68.1632 394.747 68.1632 392.176 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
55.0912 391.16 mo
(Identity)
[.986458 1.4812 1.31526 1.4812 .823547 .823547 .823547 0 ]xsh
54.1329 394.546 mo
(I/O: 1->1)
[.986458 .823547 2.13881 .823547 .740601 1.4812 .986454 1.67078 0 ]xsh
100.75 375.671 mo
91.8624 379.056 77.8968 384.135 69.4328 387.309 cv
68.798 387.52 68.1632 387.944 67.5284 388.367 cv
@
67.74 387.732 mo
66.0472 389.002 li
68.1632 388.578 li
cp
@
67.74 387.732 mo
66.0472 389.002 li
68.1632 388.578 li
f
89.3232 392.176 mo
89.3232 389.605 85.439 387.52 80.6476 387.52 cv
75.8562 387.52 71.972 389.605 71.972 392.176 cv
71.972 394.747 75.8562 396.831 80.6476 396.831 cv
85.439 396.831 89.3232 394.747 89.3232 392.176 cv
@
89.3232 392.176 mo
89.3232 389.605 85.439 387.52 80.6476 387.52 cv
75.8562 387.52 71.972 389.605 71.972 392.176 cv
71.972 394.747 75.8562 396.831 80.6476 396.831 cv
85.439 396.831 89.3232 394.747 89.3232 392.176 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
74.8873 391.16 mo
(DivideBy)
[2.13881 .823547 1.4812 .823547 1.48119 1.31526 1.9759 0 ]xsh
75.0813 394.546 mo
(I/O: 1->1)
[.986458 .823547 2.13881 .823547 .740593 1.4812 .986458 1.67078 0 ]xsh
104.347 376.094 mo
99.48 379.268 92.7088 383.923 87.842 387.309 cv
@
87.6304 386.886 mo
86.1492 388.367 li
88.2652 387.732 li
cp
@
87.6304 386.886 mo
86.1492 388.367 li
88.2652 387.732 li
f
110.06 392.176 mo
110.06 389.605 106.271 387.52 101.596 387.52 cv
96.9215 387.52 93.132 389.605 93.132 392.176 cv
93.132 394.747 96.9215 396.831 101.596 396.831 cv
106.271 396.831 110.06 394.747 110.06 392.176 cv
@
110.06 392.176 mo
110.06 389.605 106.271 387.52 101.596 387.52 cv
96.9215 387.52 93.132 389.605 93.132 392.176 cv
93.132 394.747 96.9215 396.831 101.596 396.831 cv
106.271 396.831 110.06 394.747 110.06 392.176 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
96.9881 391.16 mo
(Identity)
[.986458 1.4812 1.31526 1.48119 .823547 .823547 .823547 0 ]xsh
96.0297 394.546 mo
(I/O: 1->1)
[.986458 .823547 2.13881 .823547 .740601 1.48119 .986458 1.67078 0 ]xsh
108.156 376.306 mo
107.098 378.845 105.616 382.654 104.347 385.616 cv
@
103.924 385.404 mo
103.5 387.52 li
104.77 385.828 li
cp
@
103.924 385.404 mo
103.5 387.52 li
104.77 385.828 li
f
130.797 392.176 mo
130.797 389.605 127.007 387.52 122.333 387.52 cv
117.658 387.52 113.869 389.605 113.869 392.176 cv
113.869 394.747 117.658 396.831 122.333 396.831 cv
127.007 396.831 130.797 394.747 130.797 392.176 cv
@
130.797 392.176 mo
130.797 389.605 127.007 387.52 122.333 387.52 cv
117.658 387.52 113.869 389.605 113.869 392.176 cv
113.869 394.747 117.658 396.831 122.333 396.831 cv
127.007 396.831 130.797 394.747 130.797 392.176 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
117.725 391.16 mo
(Identity)
[.986458 1.4812 1.31526 1.4812 .82354 .823547 .823547 0 ]xsh
116.767 394.546 mo
(I/O: 1->1)
[.986458 .823547 2.13881 .823547 .740593 1.4812 .986458 1.67078 0 ]xsh
112.176 376.306 mo
113.869 379.056 116.408 382.654 118.312 386.039 cv
@
117.889 386.251 mo
119.37 387.732 li
118.736 385.616 li
cp
@
117.889 386.251 mo
119.37 387.732 li
118.736 385.616 li
f
151.534 392.176 mo
151.534 389.605 147.744 387.52 143.07 387.52 cv
138.395 387.52 134.606 389.605 134.606 392.176 cv
134.606 394.747 138.395 396.831 143.07 396.831 cv
147.744 396.831 151.534 394.747 151.534 392.176 cv
@
151.534 392.176 mo
151.534 389.605 147.744 387.52 143.07 387.52 cv
138.395 387.52 134.606 389.605 134.606 392.176 cv
134.606 394.747 138.395 396.831 143.07 396.831 cv
147.744 396.831 151.534 394.747 151.534 392.176 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
138.462 391.16 mo
(Identity)
[.98645 1.4812 1.31526 1.4812 .823547 .823547 .823547 0 ]xsh
137.504 394.546 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
115.773 376.094 mo
121.063 379.268 129.316 384.135 135.24 387.732 cv
@
135.029 388.155 mo
137.145 388.79 li
135.452 387.309 li
cp
@
135.029 388.155 mo
137.145 388.79 li
135.452 387.309 li
f
127.623 409.527 mo
127.623 407.423 120.612 405.718 111.964 405.718 cv
103.317 405.718 96.306 407.423 96.306 409.527 cv
96.306 411.63 103.317 413.336 111.964 413.336 cv
120.612 413.336 127.623 411.63 127.623 409.527 cv
@
127.623 409.527 mo
127.623 407.423 120.612 405.718 111.964 405.718 cv
103.317 405.718 96.306 407.423 96.306 409.527 cv
96.306 411.63 103.317 413.336 111.964 413.336 cv
120.612 413.336 127.623 411.63 127.623 409.527 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
98.4709 410.204 mo
(roundrobin\(64,8,1,1,1\))
[.986458 1.4812 1.4812 1.48119 1.4812 .986458 1.4812 1.4812 .823547 1.4812 .986458 1.48119 
1.4812 .740601 1.4812 .740601 1.4812 .740601 1.48119 .740601 1.4812 0 ]xsh
145.82 429.206 mo
145.82 425.232 138.62 422.011 129.739 422.011 cv
120.857 422.011 113.657 425.232 113.657 429.206 cv
113.657 433.179 120.857 436.4 129.739 436.4 cv
138.62 436.4 145.82 433.179 145.82 429.206 cv
@
145.82 429.206 mo
145.82 425.232 138.62 422.011 129.739 422.011 cv
120.857 422.011 113.657 425.232 113.657 429.206 cv
113.657 433.179 120.857 436.4 129.739 436.4 cv
138.62 436.4 145.82 433.179 145.82 429.206 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7A73DFCCE6C978678EE12F2E62BD7D7FA244984C1E12F1
0EB0B8765182EBCE165DFB850DB8B03381969B80BB1CA53FFB24B5DE34530C8C
83A80415FE19B7C2B551E605143CF6469C8BCE336F9A5E5012DD932CF553D663
37837328637F50B90FF9AE8815D00BBA7EFCE6D508C5B6EBE2D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I /J /.notdef /L /M /.notdef /O 
/P /Q /R /S /T /U /V 3{/.notdef}rp 
/Z 4{/.notdef}rp /underscore /.notdef /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u /v /w /x /y /z 133{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
119.288 426.497 mo
(MotionPrediction)
[2.63355 1.4812 .823547 .823547 1.48119 1.48121 1.64708 .986465 1.31526 1.4812 .823547 1.31526 
.823547 .823547 1.4812 0 ]xsh
118.248 429.883 mo
(I/O: 99000->84480)
[.986458 .823547 2.13881 .823547 .740593 1.4812 1.4812 1.4812 1.4812 1.4812 .98645 1.67079 
1.48119 1.4812 1.4812 1.4812 0 ]xsh
117.149 433.268 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.48119 .740601 1.64709 1.81001 2.13881 1.81001 1.81 1.64709 2.13881 1.81001 
.740585 1.4812 1.4812 0 ]xsh
115.35 413.336 mo
117.254 415.452 119.794 418.202 122.121 420.953 cv
@
121.698 421.376 mo
123.602 422.434 li
122.544 420.53 li
cp
@
121.698 421.376 mo
123.602 422.434 li
122.544 420.53 li
f
65.8356 395.561 mo
67.1052 396.196 68.3748 396.619 69.4328 397.042 cv
77.4736 399.793 90.1696 403.39 99.6916 406.141 cv
@
99.48 406.564 mo
101.596 406.564 li
99.6916 405.506 li
cp
@
99.48 406.564 mo
101.596 406.564 li
99.6916 405.506 li
f
86.784 395.561 mo
91.6508 398.312 98.6336 402.121 103.924 405.083 cv
@
103.5 405.506 mo
105.616 406.141 li
104.135 404.66 li
cp
@
103.5 405.506 mo
105.616 406.141 li
104.135 404.66 li
f
104.347 396.831 mo
105.616 398.947 107.309 401.698 108.579 404.025 cv
@
108.156 404.237 mo
109.637 405.718 li
109.002 403.602 li
cp
@
108.156 404.237 mo
109.637 405.718 li
109.002 403.602 li
f
119.582 396.831 mo
118.312 398.947 116.62 401.698 115.35 404.025 cv
@
114.927 403.602 mo
114.292 405.718 li
115.773 404.237 li
cp
@
114.927 403.602 mo
114.292 405.718 li
115.773 404.237 li
f
136.933 395.561 mo
132.066 398.312 125.295 402.121 120.005 405.083 cv
@
119.794 404.66 mo
118.312 406.141 li
120.428 405.506 li
cp
@
119.794 404.66 mo
118.312 406.141 li
120.428 405.506 li
f
134.394 436.188 mo
139.261 442.96 147.09 452.482 153.861 455.444 cv
164.864 460.311 183.697 462.85 196.816 464.12 cv
@
196.393 464.543 mo
198.509 464.331 li
196.393 463.485 li
cp
@
196.393 464.543 mo
198.509 464.331 li
196.393 463.485 li
f
177.349 335.467 mo
177.349 332.896 173.559 330.812 168.885 330.812 cv
164.21 330.812 160.421 332.896 160.421 335.467 cv
160.421 338.038 164.21 340.122 168.885 340.122 cv
173.559 340.122 177.349 338.038 177.349 335.467 cv
@
177.349 335.467 mo
177.349 332.896 173.559 330.812 168.885 330.812 cv
164.21 330.812 160.421 332.896 160.421 335.467 cv
160.421 338.038 164.21 340.122 168.885 340.122 cv
173.559 340.122 177.349 338.038 177.349 335.467 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
164.277 334.451 mo
(Identity)
[.98645 1.4812 1.31526 1.4812 .823547 .823547 .823547 0 ]xsh
163.319 337.837 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
203.799 321.29 mo
196.181 324.04 185.39 327.849 178.618 330.6 cv
177.984 330.812 177.349 331.235 176.714 331.658 cv
@
176.926 331.023 mo
175.233 332.293 li
177.349 331.87 li
cp
@
176.926 331.023 mo
175.233 332.293 li
177.349 331.87 li
f
198.509 335.467 mo
198.509 332.896 194.625 330.812 189.833 330.812 cv
185.042 330.812 181.158 332.896 181.158 335.467 cv
181.158 338.038 185.042 340.122 189.833 340.122 cv
194.625 340.122 198.509 338.038 198.509 335.467 cv
@
198.509 335.467 mo
198.509 332.896 194.625 330.812 189.833 330.812 cv
185.042 330.812 181.158 332.896 181.158 335.467 cv
181.158 338.038 185.042 340.122 189.833 340.122 cv
194.625 340.122 198.509 338.038 198.509 335.467 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
184.073 334.451 mo
(DivideBy)
[2.13881 .823547 1.4812 .823547 1.4812 1.31526 1.97589 0 ]xsh
184.267 337.837 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
207.819 321.713 mo
204.434 324.252 200.202 327.638 196.604 330.388 cv
@
196.393 329.965 mo
194.912 331.658 li
197.028 330.812 li
cp
@
196.393 329.965 mo
194.912 331.658 li
197.028 330.812 li
f
219.246 335.467 mo
219.246 332.896 215.456 330.812 210.782 330.812 cv
206.107 330.812 202.318 332.896 202.318 335.467 cv
202.318 338.038 206.107 340.122 210.782 340.122 cv
215.456 340.122 219.246 338.038 219.246 335.467 cv
@
219.246 335.467 mo
219.246 332.896 215.456 330.812 210.782 330.812 cv
206.107 330.812 202.318 332.896 202.318 335.467 cv
202.318 338.038 206.107 340.122 210.782 340.122 cv
215.456 340.122 219.246 338.038 219.246 335.467 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
206.174 334.451 mo
(Identity)
[.98645 1.4812 1.31526 1.4812 .823547 .823547 .823547 0 ]xsh
205.216 337.837 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
212.263 321.924 mo
211.84 323.829 211.84 326.156 211.416 328.484 cv
@
210.993 328.484 mo
211.205 330.6 li
211.84 328.484 li
cp
@
210.993 328.484 mo
211.205 330.6 li
211.84 328.484 li
f
239.982 335.467 mo
239.982 332.896 236.193 330.812 231.518 330.812 cv
226.844 330.812 223.054 332.896 223.054 335.467 cv
223.054 338.038 226.844 340.122 231.518 340.122 cv
236.193 340.122 239.982 338.038 239.982 335.467 cv
@
239.982 335.467 mo
239.982 332.896 236.193 330.812 231.518 330.812 cv
226.844 330.812 223.054 332.896 223.054 335.467 cv
223.054 338.038 226.844 340.122 231.518 340.122 cv
236.193 340.122 239.982 338.038 239.982 335.467 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
226.91 334.451 mo
(Identity)
[.98645 1.4812 1.31526 1.4812 .823547 .823547 .823547 0 ]xsh
225.952 337.837 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
216.706 321.924 mo
219.246 324.252 222.631 327.426 225.594 329.965 cv
@
225.17 330.388 mo
227.075 331.446 li
226.017 329.542 li
cp
@
225.17 330.388 mo
227.075 331.446 li
226.017 329.542 li
f
260.719 335.467 mo
260.719 332.896 256.93 330.812 252.255 330.812 cv
247.581 330.812 243.791 332.896 243.791 335.467 cv
243.791 338.038 247.581 340.122 252.255 340.122 cv
256.93 340.122 260.719 338.038 260.719 335.467 cv
@
260.719 335.467 mo
260.719 332.896 256.93 330.812 252.255 330.812 cv
247.581 330.812 243.791 332.896 243.791 335.467 cv
243.791 338.038 247.581 340.122 252.255 340.122 cv
256.93 340.122 260.719 338.038 260.719 335.467 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
247.647 334.451 mo
(Identity)
[.98645 1.4812 1.31526 1.4812 .823547 .823547 .823547 0 ]xsh
246.689 337.837 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
220.727 321.501 mo
227.286 324.252 236.808 328.061 242.522 330.6 cv
242.945 330.812 243.368 331.023 244.003 331.235 cv
@
243.791 331.658 mo
245.907 332.293 li
244.214 330.812 li
cp
@
243.791 331.658 mo
245.907 332.293 li
244.214 330.812 li
f
226.44 352.818 mo
226.44 350.714 219.429 349.009 210.782 349.009 cv
202.134 349.009 195.123 350.714 195.123 352.818 cv
195.123 354.922 202.134 356.627 210.782 356.627 cv
219.429 356.627 226.44 354.922 226.44 352.818 cv
@
226.44 352.818 mo
226.44 350.714 219.429 349.009 210.782 349.009 cv
202.134 349.009 195.123 350.714 195.123 352.818 cv
195.123 354.922 202.134 356.627 210.782 356.627 cv
219.429 356.627 226.44 354.922 226.44 352.818 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
197.288 353.495 mo
(roundrobin\(64,8,1,1,1\))
[.98645 1.4812 1.4812 1.4812 1.4812 .986465 1.48119 1.4812 .823547 1.4812 .986465 1.4812 
1.4812 .740601 1.48119 .740601 1.4812 .740601 1.4812 .740601 1.4812 0 ]xsh
226.863 372.497 mo
226.863 368.523 219.663 365.302 210.782 365.302 cv
201.9 365.302 194.7 368.523 194.7 372.497 cv
194.7 376.47 201.9 379.691 210.782 379.691 cv
219.663 379.691 226.863 376.47 226.863 372.497 cv
@
226.863 372.497 mo
226.863 368.523 219.663 365.302 210.782 365.302 cv
201.9 365.302 194.7 368.523 194.7 372.497 cv
194.7 376.47 201.9 379.691 210.782 379.691 cv
219.663 379.691 226.863 376.47 226.863 372.497 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
200.33 369.788 mo
(MotionPrediction)
[2.63354 1.4812 .823547 .823547 1.4812 1.4812 1.64709 .98645 1.31526 1.4812 .823547 1.31526 
.823547 .823547 1.4812 0 ]xsh
199.29 373.174 mo
(I/O: 24750->21120)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 .98645 1.67079 
1.48119 1.4812 1.4812 1.4812 0 ]xsh
198.191 376.559 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.4812 .740601 1.64709 1.81 2.13881 1.81 1.81001 1.64709 2.13881 1.81 
.740601 1.4812 1.4812 0 ]xsh
210.782 356.627 mo
210.782 358.531 210.782 360.859 210.782 363.186 cv
@
210.358 363.186 mo
210.782 365.302 li
211.416 363.186 li
cp
@
210.358 363.186 mo
210.782 365.302 li
211.416 363.186 li
f
175.233 338.641 mo
176.502 339.276 177.772 339.91 178.618 340.334 cv
184.543 342.661 193.854 346.258 200.836 349.009 cv
@
200.202 349.221 mo
202.318 349.644 li
200.625 348.374 li
cp
@
200.202 349.221 mo
202.318 349.644 li
200.625 348.374 li
f
194.7 339.487 mo
197.874 342.026 201.683 345.2 204.857 347.951 cv
@
204.434 348.163 mo
206.338 349.221 li
205.068 347.528 li
cp
@
204.434 348.163 mo
206.338 349.221 li
205.068 347.528 li
f
210.782 340.334 mo
210.782 342.45 210.782 344.777 210.782 347.105 cv
@
210.358 346.893 mo
210.782 349.009 li
211.416 346.893 li
cp
@
210.358 346.893 mo
210.782 349.009 li
211.416 346.893 li
f
226.652 339.487 mo
223.478 342.026 219.669 345.2 216.495 347.951 cv
@
216.283 347.528 mo
215.014 349.221 li
216.918 348.163 li
cp
@
216.283 347.528 mo
215.014 349.221 li
216.918 348.163 li
f
246.119 338.641 mo
244.849 339.276 243.58 339.91 242.522 340.334 cv
236.808 342.661 227.71 346.258 220.727 349.009 cv
@
220.938 348.374 mo
219.246 349.644 li
221.362 349.221 li
cp
@
220.938 348.374 mo
219.246 349.644 li
221.362 349.221 li
f
229.614 392.176 mo
229.614 389.605 221.182 387.52 210.782 387.52 cv
200.381 387.52 191.949 389.605 191.949 392.176 cv
191.949 394.747 200.381 396.831 210.782 396.831 cv
221.182 396.831 229.614 394.747 229.614 392.176 cv
@
229.614 392.176 mo
229.614 389.605 221.182 387.52 210.782 387.52 cv
200.381 387.52 191.949 389.605 191.949 392.176 cv
191.949 394.747 200.381 396.831 210.782 396.831 cv
221.182 396.831 229.614 394.747 229.614 392.176 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
194.82 391.16 mo
(Pre_CollapsedDataParallel)
[1.64709 .98645 1.31526 1.4812 1.97591 1.4812 .823547 .823547 1.31525 1.4812 1.15236 1.31526 
1.4812 2.13881 1.31526 .823547 1.31525 1.64709 1.31526 .986465 1.31526 .823547 .823547 1.31526 
0 ]xsh
199.29 394.546 mo
(I/O: 21120->21120)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 .98645 1.67079 
1.4812 1.48119 1.4812 1.4812 0 ]xsh
210.782 379.691 mo
210.782 381.596 210.782 383.5 210.782 385.193 cv
@
210.358 385.193 mo
210.782 387.309 li
211.416 385.193 li
cp
@
210.358 385.193 mo
210.782 387.309 li
211.416 385.193 li
f
227.075 409.527 mo
227.075 406.956 219.78 404.872 210.782 404.872 cv
201.783 404.872 194.488 406.956 194.488 409.527 cv
194.488 412.098 201.783 414.182 210.782 414.182 cv
219.78 414.182 227.075 412.098 227.075 409.527 cv
@
227.075 409.527 mo
227.075 406.956 219.78 404.872 210.782 404.872 cv
201.783 404.872 194.488 406.956 194.488 409.527 cv
194.488 412.098 201.783 414.182 210.782 414.182 cv
219.78 414.182 227.075 412.098 227.075 409.527 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
197.288 408.511 mo
(ChannelUpsample_1D)
[1.97589 1.4812 1.31526 1.4812 1.4812 1.31526 .823547 2.13881 1.4812 1.15234 1.31526 2.30475 
1.4812 .823547 1.31526 1.4812 1.4812 0 ]xsh
202.253 411.897 mo
(I/O: 120->240)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 .98645 1.67079 1.4812 1.4812 
0 ]xsh
210.782 397.042 mo
210.782 398.735 210.782 400.64 210.782 402.544 cv
@
210.358 402.544 mo
210.782 404.66 li
211.416 402.544 li
cp
@
210.358 402.544 mo
210.782 404.66 li
211.416 402.544 li
f
230.037 429.206 mo
230.037 426.635 221.416 424.55 210.782 424.55 cv
200.147 424.55 191.526 426.635 191.526 429.206 cv
191.526 431.777 200.147 433.861 210.782 433.861 cv
221.416 433.861 230.037 431.777 230.037 429.206 cv
@
230.037 429.206 mo
230.037 426.635 221.416 424.55 210.782 424.55 cv
200.147 424.55 191.526 426.635 191.526 429.206 cv
191.526 431.777 200.147 433.861 210.782 433.861 cv
221.416 433.861 230.037 431.777 230.037 429.206 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
194.243 428.19 mo
(Post_CollapsedDataParallel)
[1.64709 1.4812 1.15234 .823547 1.4812 1.97591 1.4812 .823547 .823547 1.31525 1.4812 1.15236 
1.31526 1.4812 2.13881 1.31526 .823547 1.31525 1.64709 1.31526 .986465 1.31526 .823547 .823547 
1.31526 0 ]xsh
199.291 431.576 mo
(I/O: 42240->42240)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 .98645 1.67079 
1.48119 1.4812 1.4812 1.4812 0 ]xsh
210.782 414.394 mo
210.782 416.721 210.782 419.684 210.782 422.223 cv
@
210.358 422.223 mo
210.782 424.339 li
211.416 422.223 li
cp
@
210.358 422.223 mo
210.782 424.339 li
211.416 422.223 li
f
227.075 448.884 mo
227.075 446.313 219.78 444.229 210.782 444.229 cv
201.783 444.229 194.488 446.313 194.488 448.884 cv
194.488 451.455 201.783 453.54 210.782 453.54 cv
219.78 453.54 227.075 451.455 227.075 448.884 cv
@
227.075 448.884 mo
227.075 446.313 219.78 444.229 210.782 444.229 cv
201.783 444.229 194.488 446.313 194.488 448.884 cv
194.488 451.455 201.783 453.54 210.782 453.54 cv
219.78 453.54 227.075 451.455 227.075 448.884 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
197.288 447.869 mo
(ChannelUpsample_1D)
[1.97589 1.4812 1.31526 1.4812 1.4812 1.31526 .823547 2.13881 1.4812 1.15234 1.31526 2.30475 
1.4812 .823547 1.31526 1.4812 1.4812 0 ]xsh
202.253 451.255 mo
(I/O: 176->352)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 .98645 1.67079 1.4812 1.4812 
0 ]xsh
210.782 434.072 mo
210.782 436.4 210.782 439.362 210.782 441.902 cv
@
210.358 441.902 mo
210.782 444.018 li
211.416 441.902 li
cp
@
210.358 441.902 mo
210.782 444.018 li
211.416 441.902 li
f
210.782 453.751 mo
210.782 455.444 210.782 457.348 210.782 459.253 cv
@
210.358 459.253 mo
210.782 461.369 li
211.416 459.253 li
cp
@
210.358 459.253 mo
210.782 461.369 li
211.416 459.253 li
f
286.534 335.467 mo
286.534 332.896 282.745 330.812 278.07 330.812 cv
273.396 330.812 269.606 332.896 269.606 335.467 cv
269.606 338.038 273.396 340.122 278.07 340.122 cv
282.745 340.122 286.534 338.038 286.534 335.467 cv
@
286.534 335.467 mo
286.534 332.896 282.745 330.812 278.07 330.812 cv
273.396 330.812 269.606 332.896 269.606 335.467 cv
269.606 338.038 273.396 340.122 278.07 340.122 cv
282.745 340.122 286.534 338.038 286.534 335.467 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
273.462 334.451 mo
(Identity)
[.98645 1.4812 1.31528 1.4812 .823547 .823547 .823547 0 ]xsh
272.504 337.837 mo
(I/O: 1->1)
[.98645 .823547 2.13882 .823547 .740601 1.4812 .98645 1.67078 0 ]xsh
303.039 321.713 mo
298.172 324.464 291.19 328.272 285.9 331.235 cv
@
285.9 330.6 mo
284.207 332.081 li
286.323 331.658 li
cp
@
285.9 330.6 mo
284.207 332.081 li
286.323 331.658 li
f
307.694 335.467 mo
307.694 332.896 303.81 330.812 299.019 330.812 cv
294.227 330.812 290.343 332.896 290.343 335.467 cv
290.343 338.038 294.227 340.122 299.019 340.122 cv
303.81 340.122 307.694 338.038 307.694 335.467 cv
@
307.694 335.467 mo
307.694 332.896 303.81 330.812 299.019 330.812 cv
294.227 330.812 290.343 332.896 290.343 335.467 cv
290.343 338.038 294.227 340.122 299.019 340.122 cv
303.81 340.122 307.694 338.038 307.694 335.467 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
293.258 334.451 mo
(DivideBy)
[2.13879 .823547 1.4812 .823547 1.4812 1.31528 1.97589 0 ]xsh
293.452 337.837 mo
(I/O: 1->1)
[.98645 .823547 2.13882 .823547 .740601 1.4812 .98645 1.67078 0 ]xsh
307.06 321.924 mo
305.79 324.04 304.309 326.58 302.828 329.119 cv
@
302.404 328.907 mo
301.77 331.023 li
303.251 329.33 li
cp
@
302.404 328.907 mo
301.77 331.023 li
303.251 329.33 li
f
328.431 335.467 mo
328.431 332.896 324.642 330.812 319.967 330.812 cv
315.293 330.812 311.503 332.896 311.503 335.467 cv
311.503 338.038 315.293 340.122 319.967 340.122 cv
324.642 340.122 328.431 338.038 328.431 335.467 cv
@
328.431 335.467 mo
328.431 332.896 324.642 330.812 319.967 330.812 cv
315.293 330.812 311.503 332.896 311.503 335.467 cv
311.503 338.038 315.293 340.122 319.967 340.122 cv
324.642 340.122 328.431 338.038 328.431 335.467 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
315.359 334.451 mo
(Identity)
[.98645 1.4812 1.31528 1.4812 .823547 .823547 .823547 0 ]xsh
314.401 337.837 mo
(I/O: 1->1)
[.98645 .823547 2.13882 .823547 .740601 1.4812 .98645 1.67078 0 ]xsh
311.715 321.924 mo
312.984 324.04 314.677 326.58 316.158 329.119 cv
@
315.735 329.33 mo
317.216 331.023 li
316.582 328.907 li
cp
@
315.735 329.33 mo
317.216 331.023 li
316.582 328.907 li
f
349.168 335.467 mo
349.168 332.896 345.379 330.812 340.704 330.812 cv
336.029 330.812 332.24 332.896 332.24 335.467 cv
332.24 338.038 336.029 340.122 340.704 340.122 cv
345.379 340.122 349.168 338.038 349.168 335.467 cv
@
349.168 335.467 mo
349.168 332.896 345.379 330.812 340.704 330.812 cv
336.029 330.812 332.24 332.896 332.24 335.467 cv
332.24 338.038 336.029 340.122 340.704 340.122 cv
345.379 340.122 349.168 338.038 349.168 335.467 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
336.096 334.451 mo
(Identity)
[.98645 1.4812 1.31528 1.4812 .823547 .823547 .823547 0 ]xsh
335.138 337.837 mo
(I/O: 1->1)
[.98645 .823547 2.13882 .823547 .740601 1.4812 .98645 1.67078 0 ]xsh
315.735 321.713 mo
320.602 324.464 327.585 328.272 332.875 331.235 cv
@
332.452 331.658 mo
334.568 332.081 li
332.875 330.6 li
cp
@
332.452 331.658 mo
334.568 332.081 li
332.875 330.6 li
f
369.905 335.467 mo
369.905 332.896 366.115 330.812 361.441 330.812 cv
356.766 330.812 352.977 332.896 352.977 335.467 cv
352.977 338.038 356.766 340.122 361.441 340.122 cv
366.115 340.122 369.905 338.038 369.905 335.467 cv
@
369.905 335.467 mo
369.905 332.896 366.115 330.812 361.441 330.812 cv
356.766 330.812 352.977 332.896 352.977 335.467 cv
352.977 338.038 356.766 340.122 361.441 340.122 cv
366.115 340.122 369.905 338.038 369.905 335.467 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
356.833 334.451 mo
(Identity)
[.98645 1.4812 1.31528 1.4812 .823547 .823547 .823547 0 ]xsh
355.875 337.837 mo
(I/O: 1->1)
[.98645 .823547 2.13882 .823547 .740601 1.4812 .98645 1.67078 0 ]xsh
319.332 321.078 mo
330.336 324.252 347.052 329.119 351.707 330.6 cv
352.342 330.812 353.188 331.235 354.035 331.658 cv
@
353.188 331.87 mo
355.304 332.293 li
353.612 330.812 li
cp
@
353.188 331.87 mo
355.304 332.293 li
353.612 330.812 li
f
325.046 352.818 mo
325.046 350.714 318.035 349.009 309.387 349.009 cv
300.739 349.009 293.729 350.714 293.729 352.818 cv
293.729 354.922 300.739 356.627 309.387 356.627 cv
318.035 356.627 325.046 354.922 325.046 352.818 cv
@
325.046 352.818 mo
325.046 350.714 318.035 349.009 309.387 349.009 cv
300.739 349.009 293.729 350.714 293.729 352.818 cv
293.729 354.922 300.739 356.627 309.387 356.627 cv
318.035 356.627 325.046 354.922 325.046 352.818 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
295.894 353.495 mo
(roundrobin\(64,8,1,1,1\))
[.98645 1.4812 1.4812 1.4812 1.4812 .98645 1.4812 1.4812 .823547 1.4812 .98645 1.4812 
1.4812 .740601 1.4812 .740601 1.4812 .740601 1.4812 .740601 1.4812 0 ]xsh
323.988 372.497 mo
323.988 368.523 316.788 365.302 307.906 365.302 cv
299.024 365.302 291.824 368.523 291.824 372.497 cv
291.824 376.47 299.024 379.691 307.906 379.691 cv
316.788 379.691 323.988 376.47 323.988 372.497 cv
@
323.988 372.497 mo
323.988 368.523 316.788 365.302 307.906 365.302 cv
299.024 365.302 291.824 368.523 291.824 372.497 cv
291.824 376.47 299.024 379.691 307.906 379.691 cv
316.788 379.691 323.988 376.47 323.988 372.497 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
297.455 369.788 mo
(MotionPrediction)
[2.63354 1.4812 .823547 .823547 1.4812 1.4812 1.64709 .98645 1.31528 1.4812 .823547 1.31525 
.823547 .823547 1.4812 0 ]xsh
296.415 373.174 mo
(I/O: 24750->21120)
[.98645 .823547 2.13882 .823547 .740601 1.4812 1.4812 1.4812 1.48117 1.4812 .986481 1.67078 
1.4812 1.4812 1.4812 1.4812 0 ]xsh
295.316 376.559 mo
(*** STATEFUL ***)
[1.4812 1.4812 1.4812 .740601 1.64709 1.81 2.13879 1.81003 1.81 1.64709 2.13879 1.81003 
.740601 1.4812 1.48117 0 ]xsh
309.176 356.627 mo
308.964 358.531 308.752 360.859 308.752 363.186 cv
@
308.329 363.186 mo
308.541 365.302 li
309.176 363.186 li
cp
@
308.329 363.186 mo
308.541 365.302 li
309.176 363.186 li
f
284.207 338.852 mo
289.074 341.603 296.056 345.412 301.346 348.374 cv
@
300.923 348.798 mo
303.039 349.432 li
301.558 347.951 li
cp
@
300.923 348.798 mo
303.039 349.432 li
301.558 347.951 li
f
301.77 340.122 mo
303.039 342.238 304.732 344.989 306.002 347.316 cv
@
305.578 347.528 mo
307.06 349.009 li
306.425 346.893 li
cp
@
305.578 347.528 mo
307.06 349.009 li
306.425 346.893 li
f
317.216 340.122 mo
315.947 342.238 314.254 344.989 312.773 347.316 cv
@
312.35 346.893 mo
311.715 349.009 li
313.196 347.528 li
cp
@
312.35 346.893 mo
311.715 349.009 li
313.196 347.528 li
f
334.568 338.852 mo
329.701 341.603 322.718 345.412 317.428 348.374 cv
@
317.216 347.951 mo
315.735 349.432 li
317.851 348.798 li
cp
@
317.216 347.951 mo
315.735 349.432 li
317.851 348.798 li
f
355.304 338.852 mo
354.035 339.487 352.765 339.91 351.707 340.334 cv
343.878 342.873 331.182 346.682 321.66 349.221 cv
@
321.66 348.586 mo
319.756 349.856 li
321.872 349.644 li
cp
@
321.66 348.586 mo
319.756 349.856 li
321.872 349.644 li
f
315.735 392.176 mo
315.735 389.605 307.304 387.52 296.903 387.52 cv
286.502 387.52 278.07 389.605 278.07 392.176 cv
278.07 394.747 286.502 396.831 296.903 396.831 cv
307.304 396.831 315.735 394.747 315.735 392.176 cv
@
315.735 392.176 mo
315.735 389.605 307.304 387.52 296.903 387.52 cv
286.502 387.52 278.07 389.605 278.07 392.176 cv
278.07 394.747 286.502 396.831 296.903 396.831 cv
307.304 396.831 315.735 394.747 315.735 392.176 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
280.942 391.16 mo
(Pre_CollapsedDataParallel)
[1.64709 .98645 1.31528 1.4812 1.97589 1.4812 .823547 .823547 1.31525 1.4812 1.15234 1.31528 
1.4812 2.13879 1.31528 .823547 1.31525 1.64709 1.31528 .98645 1.31525 .823547 .823547 1.31528 
0 ]xsh
285.412 394.546 mo
(I/O: 21120->21120)
[.98645 .823547 2.13882 .823547 .740601 1.4812 1.4812 1.48117 1.4812 1.4812 .986481 1.67078 
1.4812 1.4812 1.4812 1.4812 0 ]xsh
304.097 379.48 mo
303.039 381.596 301.77 383.712 300.5 385.828 cv
@
300.077 385.404 mo
299.654 387.52 li
301.135 385.828 li
cp
@
300.077 385.404 mo
299.654 387.52 li
301.135 385.828 li
f
307.694 409.527 mo
307.694 406.956 300.4 404.872 291.401 404.872 cv
282.403 404.872 275.108 406.956 275.108 409.527 cv
275.108 412.098 282.403 414.182 291.401 414.182 cv
300.4 414.182 307.694 412.098 307.694 409.527 cv
@
307.694 409.527 mo
307.694 406.956 300.4 404.872 291.401 404.872 cv
282.403 404.872 275.108 406.956 275.108 409.527 cv
275.108 412.098 282.403 414.182 291.401 414.182 cv
300.4 414.182 307.694 412.098 307.694 409.527 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
277.908 408.511 mo
(ChannelUpsample_1D)
[1.97589 1.4812 1.31528 1.4812 1.4812 1.31525 .823547 2.13879 1.4812 1.15237 1.31525 2.30475 
1.4812 .823547 1.31528 1.4812 1.48117 0 ]xsh
282.873 411.897 mo
(I/O: 120->240)
[.98645 .823547 2.13882 .823547 .740601 1.4812 1.4812 1.48117 .986481 1.67078 1.4812 1.4812 
0 ]xsh
295.422 397.042 mo
294.787 398.735 294.152 400.851 293.517 402.756 cv
@
292.882 402.756 mo
292.882 404.872 li
293.94 402.967 li
cp
@
292.882 402.756 mo
292.882 404.872 li
293.94 402.967 li
f
307.906 429.206 mo
307.906 426.635 299.285 424.55 288.65 424.55 cv
278.016 424.55 269.395 426.635 269.395 429.206 cv
269.395 431.777 278.016 433.861 288.65 433.861 cv
299.285 433.861 307.906 431.777 307.906 429.206 cv
@
307.906 429.206 mo
307.906 426.635 299.285 424.55 288.65 424.55 cv
278.016 424.55 269.395 426.635 269.395 429.206 cv
269.395 431.777 278.016 433.861 288.65 433.861 cv
299.285 433.861 307.906 431.777 307.906 429.206 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
272.112 428.19 mo
(Post_CollapsedDataParallel)
[1.64709 1.4812 1.15234 .823547 1.4812 1.97589 1.4812 .823547 .823547 1.31528 1.4812 1.15234 
1.31525 1.4812 2.13882 1.31525 .823547 1.31528 1.64709 1.31525 .98645 1.31528 .823547 .823547 
1.31525 0 ]xsh
277.16 431.576 mo
(I/O: 42240->42240)
[.98645 .823547 2.13882 .823547 .740601 1.4812 1.4812 1.48117 1.4812 1.4812 .986481 1.67078 
1.4812 1.4812 1.4812 1.4812 0 ]xsh
290.766 414.394 mo
290.343 416.721 289.92 419.684 289.497 422.434 cv
@
289.074 422.223 mo
289.285 424.339 li
290.132 422.223 li
cp
@
289.074 422.223 mo
289.285 424.339 li
290.132 422.223 li
f
302.616 448.884 mo
302.616 446.313 295.321 444.229 286.323 444.229 cv
277.324 444.229 270.03 446.313 270.03 448.884 cv
270.03 451.455 277.324 453.54 286.323 453.54 cv
295.321 453.54 302.616 451.455 302.616 448.884 cv
@
302.616 448.884 mo
302.616 446.313 295.321 444.229 286.323 444.229 cv
277.324 444.229 270.03 446.313 270.03 448.884 cv
270.03 451.455 277.324 453.54 286.323 453.54 cv
295.321 453.54 302.616 451.455 302.616 448.884 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
272.829 447.869 mo
(ChannelUpsample_1D)
[1.97589 1.4812 1.31528 1.4812 1.4812 1.31525 .823547 2.13879 1.4812 1.15237 1.31525 2.30475 
1.4812 .823547 1.31528 1.4812 1.48117 0 ]xsh
277.794 451.255 mo
(I/O: 176->352)
[.98645 .823547 2.13882 .823547 .740601 1.4812 1.4812 1.48117 .986481 1.67078 1.4812 1.4812 
0 ]xsh
288.016 434.072 mo
287.592 436.4 287.381 439.362 287.169 442.113 cv
@
286.746 441.902 mo
286.958 444.018 li
287.804 441.902 li
cp
@
286.746 441.902 mo
286.958 444.018 li
287.804 441.902 li
f
276.589 452.693 mo
273.415 453.963 269.818 455.021 267.279 455.444 cv
255.852 457.983 236.597 461.369 223.901 463.273 cv
@
224.324 462.638 mo
222.208 463.485 li
224.324 463.696 li
cp
@
224.324 462.638 mo
222.208 463.485 li
224.324 463.696 li
f
221.996 503.477 mo
221.996 500.906 216.975 498.822 210.782 498.822 cv
204.588 498.822 199.567 500.906 199.567 503.477 cv
199.567 506.048 204.588 508.132 210.782 508.132 cv
216.975 508.132 221.996 506.048 221.996 503.477 cv
@
221.996 503.477 mo
221.996 500.906 216.975 498.822 210.782 498.822 cv
204.588 498.822 199.567 500.906 199.567 503.477 cv
199.567 506.048 204.588 508.132 210.782 508.132 cv
216.975 508.132 221.996 506.048 221.996 503.477 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Y <1C60D8A8C9B6079F6264F4C8DDC3F1487EEA19AC13B41424A9E78F0FDF92
05A588739AC8029E8253D862E9C870F33DCAED59F17DDFF066EDE3BDA3CA72E2
9EAB67D63B26C63D99BA43680717BDE9E4F738D4BE18E2DC3DEA86639EADB17A
186747A3D486EBE515CD66CBC55045390AF8B38CF858> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 89 /Y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I /J /.notdef /L /M /.notdef /O 
/P /Q /R /S /T /U /V 2{/.notdef}rp 
/Y /Z 4{/.notdef}rp /underscore /.notdef /a /b /c 
/d /e /f /g /h /i /.notdef /k 
/l /m /n /o /p /.notdef /r /s 
/t /u /v /w /x /y /z 133{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
202.305 502.461 mo
(YCbCrtoRGB)
[2.13881 1.97589 1.4812 1.97591 .98645 .823547 1.4812 1.97589 2.13881 0 ]xsh
205.216 505.847 mo
(I/O: 3->3)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
210.782 490.993 mo
210.782 492.897 210.782 494.802 210.782 496.494 cv
@
210.358 496.494 mo
210.782 498.61 li
211.416 496.494 li
cp
@
210.358 496.494 mo
210.782 498.61 li
211.416 496.494 li
f
219.669 520.828 mo
219.669 518.257 215.69 516.173 210.782 516.173 cv
205.873 516.173 201.894 518.257 201.894 520.828 cv
201.894 523.399 205.873 525.484 210.782 525.484 cv
215.69 525.484 219.669 523.399 219.669 520.828 cv
@
219.669 520.828 mo
219.669 518.257 215.69 516.173 210.782 516.173 cv
205.873 516.173 201.894 518.257 201.894 520.828 cv
201.894 523.399 205.873 525.484 210.782 525.484 cv
215.69 525.484 219.669 523.399 219.669 520.828 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
204.692 519.813 mo
(Saturation)
[1.64709 1.31526 .823547 1.4812 .98645 1.31526 .823547 .823547 1.4812 0 ]xsh
205.215 523.199 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
210.782 508.344 mo
210.782 510.037 210.782 511.941 210.782 513.846 cv
@
210.358 513.846 mo
210.782 515.962 li
211.416 513.846 li
cp
@
210.358 513.846 mo
210.782 515.962 li
211.416 513.846 li
f
234.481 537.122 mo
234.481 535.018 223.87 533.313 210.782 533.313 cv
197.693 533.313 187.082 535.018 187.082 537.122 cv
187.082 539.225 197.693 540.93 210.782 540.93 cv
223.87 540.93 234.481 539.225 234.481 537.122 cv
@
234.481 537.122 mo
234.481 535.018 223.87 533.313 210.782 533.313 cv
197.693 533.313 187.082 535.018 187.082 537.122 cv
187.082 539.225 197.693 540.93 210.782 540.93 cv
223.87 540.93 234.481 539.225 234.481 537.122 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
189.142 537.799 mo
(roundrobin\(253440,253440,253440\))
[.98645 1.4812 1.4812 1.4812 1.4812 .986465 1.48119 1.4812 .823547 1.4812 .986465 1.4812 
1.4812 1.48119 1.4812 1.4812 1.4812 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 1.4812 
.740601 1.4812 1.4812 1.4812 1.4812 1.48119 1.4812 0 ]xsh
210.782 525.695 mo
210.782 527.388 210.782 529.292 210.782 531.197 cv
@
210.358 531.197 mo
210.782 533.313 li
211.416 531.197 li
cp
@
210.358 531.197 mo
210.782 533.313 li
211.416 531.197 li
f
185.813 553.415 mo
185.813 550.844 177.381 548.76 166.98 548.76 cv
156.58 548.76 148.148 550.844 148.148 553.415 cv
148.148 555.986 156.58 558.07 166.98 558.07 cv
177.381 558.07 185.813 555.986 185.813 553.415 cv
@
185.813 553.415 mo
185.813 550.844 177.381 548.76 166.98 548.76 cv
156.58 548.76 148.148 550.844 148.148 553.415 cv
148.148 555.986 156.58 558.07 166.98 558.07 cv
177.381 558.07 185.813 555.986 185.813 553.415 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
151.019 552.399 mo
(Pre_CollapsedDataParallel)
[1.64709 .98645 1.31526 1.4812 1.97591 1.4812 .823547 .823547 1.31526 1.48119 1.15236 1.31526 
1.4812 2.13881 1.31526 .823547 1.31526 1.64709 1.31525 .986465 1.31526 .823547 .823547 1.31526 
0 ]xsh
154.008 555.785 mo
(I/O: 253440->253440)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 1.4812 .98645 
1.67078 1.4812 1.4812 1.4812 1.4812 1.4812 0 ]xsh
201.26 540.719 mo
194.7 543.046 186.024 546.432 179.042 548.971 cv
@
179.465 548.336 mo
177.56 549.394 li
179.676 549.394 li
cp
@
179.465 548.336 mo
177.56 549.394 li
179.676 549.394 li
f
229.614 553.415 mo
229.614 550.844 221.182 548.76 210.782 548.76 cv
200.381 548.76 191.949 550.844 191.949 553.415 cv
191.949 555.986 200.381 558.07 210.782 558.07 cv
221.182 558.07 229.614 555.986 229.614 553.415 cv
@
229.614 553.415 mo
229.614 550.844 221.182 548.76 210.782 548.76 cv
200.381 548.76 191.949 550.844 191.949 553.415 cv
191.949 555.986 200.381 558.07 210.782 558.07 cv
221.182 558.07 229.614 555.986 229.614 553.415 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
194.82 552.399 mo
(Pre_CollapsedDataParallel)
[1.64709 .98645 1.31526 1.4812 1.97591 1.4812 .823547 .823547 1.31525 1.4812 1.15236 1.31526 
1.4812 2.13881 1.31526 .823547 1.31525 1.64709 1.31526 .986465 1.31526 .823547 .823547 1.31526 
0 ]xsh
197.809 555.785 mo
(I/O: 253440->253440)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 1.4812 .98645 
1.67079 1.48119 1.4812 1.4812 1.4812 1.4812 0 ]xsh
210.782 540.93 mo
210.782 542.623 210.782 544.528 210.782 546.432 cv
@
210.358 546.432 mo
210.782 548.548 li
211.416 546.432 li
cp
@
210.358 546.432 mo
210.782 548.548 li
211.416 546.432 li
f
273.415 553.415 mo
273.415 550.844 264.984 548.76 254.583 548.76 cv
244.182 548.76 235.75 550.844 235.75 553.415 cv
235.75 555.986 244.182 558.07 254.583 558.07 cv
264.984 558.07 273.415 555.986 273.415 553.415 cv
@
273.415 553.415 mo
273.415 550.844 264.984 548.76 254.583 548.76 cv
244.182 548.76 235.75 550.844 235.75 553.415 cv
235.75 555.986 244.182 558.07 254.583 558.07 cv
264.984 558.07 273.415 555.986 273.415 553.415 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
238.622 552.399 mo
(Pre_CollapsedDataParallel)
[1.64709 .98645 1.31526 1.4812 1.97591 1.4812 .823547 .823547 1.31526 1.48119 1.15236 1.31526 
1.4812 2.13881 1.31525 .823547 1.31528 1.64709 1.31525 .98645 1.31528 .823547 .823547 1.31525 
0 ]xsh
241.611 555.785 mo
(I/O: 253440->253440)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 1.4812 .98645 
1.67078 1.4812 1.4812 1.4812 1.4812 1.4812 0 ]xsh
220.304 540.719 mo
226.863 543.046 235.539 546.432 242.522 548.971 cv
@
241.887 549.394 mo
244.003 549.394 li
242.098 548.336 li
cp
@
241.887 549.394 mo
244.003 549.394 li
242.098 548.336 li
f
223.478 639.113 mo
223.478 637.009 217.793 635.304 210.782 635.304 cv
203.77 635.304 198.086 637.009 198.086 639.113 cv
198.086 641.216 203.77 642.922 210.782 642.922 cv
217.793 642.922 223.478 641.216 223.478 639.113 cv
@
223.478 639.113 mo
223.478 637.009 217.793 635.304 210.782 635.304 cv
203.77 635.304 198.086 637.009 198.086 639.113 cv
198.086 641.216 203.77 642.922 210.782 642.922 cv
217.793 642.922 223.478 641.216 223.478 639.113 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
200.25 639.79 mo
(roundrobin\(0,0,0\))
[.98645 1.4812 1.4812 1.4812 1.4812 .986465 1.48119 1.4812 .823547 1.4812 .986465 1.4812 
.740601 1.4812 .740585 1.4812 0 ]xsh
180.946 570.766 mo
180.946 568.195 174.599 566.111 166.769 566.111 cv
158.939 566.111 152.592 568.195 152.592 570.766 cv
152.592 573.337 158.939 575.421 166.769 575.421 cv
174.599 575.421 180.946 573.337 180.946 570.766 cv
@
180.946 570.766 mo
180.946 568.195 174.599 566.111 166.769 566.111 cv
158.939 566.111 152.592 568.195 152.592 570.766 cv
152.592 573.337 158.939 575.421 166.769 575.421 cv
174.599 575.421 180.946 573.337 180.946 570.766 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
155.498 569.75 mo
(ReversePixelOrder)
[1.97589 1.31526 1.4812 1.31526 .986465 1.15234 1.31526 1.64709 .823547 1.4812 1.31526 .823547 
2.13881 .98645 1.4812 1.31526 0 ]xsh
158.24 573.136 mo
(I/O: 720->720)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 .986465 1.67078 1.4812 1.4812 
0 ]xsh
166.98 558.282 mo
166.98 559.974 166.769 561.879 166.769 563.783 cv
@
166.346 563.783 mo
166.769 565.899 li
167.404 563.783 li
cp
@
166.346 563.783 mo
166.769 565.899 li
167.404 563.783 li
f
186.024 588.117 mo
186.024 585.546 177.403 583.462 166.769 583.462 cv
156.134 583.462 147.513 585.546 147.513 588.117 cv
147.513 590.688 156.134 592.772 166.769 592.772 cv
177.403 592.772 186.024 590.688 186.024 588.117 cv
@
186.024 588.117 mo
186.024 585.546 177.403 583.462 166.769 583.462 cv
156.134 583.462 147.513 585.546 147.513 588.117 cv
147.513 590.688 156.134 592.772 166.769 592.772 cv
177.403 592.772 186.024 590.688 186.024 588.117 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
150.23 587.101 mo
(Post_CollapsedDataParallel)
[1.64709 1.4812 1.15234 .823547 1.4812 1.97591 1.4812 .823547 .823547 1.31525 1.4812 1.15236 
1.31526 1.4812 2.13881 1.31526 .823547 1.31525 1.64709 1.31526 .986465 1.31526 .823547 .823547 
1.31526 0 ]xsh
153.797 590.487 mo
(I/O: 253440->253440)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 1.4812 .98645 
1.67079 1.48119 1.4812 1.4812 1.4812 1.4812 0 ]xsh
166.769 575.633 mo
166.769 577.326 166.769 579.23 166.769 581.134 cv
@
166.346 581.134 mo
166.769 583.25 li
167.404 581.134 li
cp
@
166.346 581.134 mo
166.769 583.25 li
167.404 581.134 li
f
183.697 605.468 mo
183.697 602.897 177.16 600.813 169.096 600.813 cv
161.033 600.813 154.496 602.897 154.496 605.468 cv
154.496 608.039 161.033 610.124 169.096 610.124 cv
177.16 610.124 183.697 608.039 183.697 605.468 cv
@
183.697 605.468 mo
183.697 602.897 177.16 600.813 169.096 600.813 cv
161.033 600.813 154.496 602.897 154.496 605.468 cv
154.496 608.039 161.033 610.124 169.096 610.124 cv
177.16 610.124 183.697 608.039 183.697 605.468 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
157.33 604.453 mo
(BMPStreamCreator)
[1.97589 2.63356 1.64709 1.64709 .823547 .98645 1.31526 1.31526 2.30475 1.97589 .986465 1.31526 
1.31526 .823547 1.48119 0 ]xsh
163.53 607.838 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
167.404 592.984 mo
167.615 594.677 167.827 596.793 168.038 598.486 cv
@
167.615 598.697 mo
168.462 600.602 li
168.462 598.486 li
cp
@
167.615 598.697 mo
168.462 600.602 li
168.462 598.486 li
f
182.004 622.82 mo
182.004 620.249 178.025 618.164 173.117 618.164 cv
168.209 618.164 164.23 620.249 164.23 622.82 cv
164.23 625.391 168.209 627.475 173.117 627.475 cv
178.025 627.475 182.004 625.391 182.004 622.82 cv
@
182.004 622.82 mo
182.004 620.249 178.025 618.164 173.117 618.164 cv
168.209 618.164 164.23 620.249 164.23 622.82 cv
164.23 625.391 168.209 627.475 173.117 627.475 cv
178.025 627.475 182.004 625.391 182.004 622.82 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/W <1C60D8A8C9B5D6EF221D1F535C4E993C98F3C3E8C6F16C822BD2743EB782
1EB7D4579AED89E03CEC92EC38206B161850892F887AD5C7930EF4023F5FCBE1
1EE2208AD3E1BD1F677AACB74B3CC3710F142D0BA108A85A0E4D5D852306CED1
4B5207F2E46DF8D6DC78FEF21F895C03164E67E0D168BBFB54CA35ABBA9BABB6
1C9F3A4AAD762B0057729986D9DB719BDE2CE08FDB5B50F7244A0094B314415C
47AAC538D3C6C8E1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSJ+TimesNewRomanPSMT /Encoding get
dup 87 /W put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSJ+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /seven /eight /nine /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/.notdef /I /J /.notdef /L /M /.notdef /O 
/P /Q /R /S /T /U /V /W 
/.notdef /Y /Z 4{/.notdef}rp /underscore /.notdef /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /v /w /x /y /z 
133{/.notdef}rp]
LTFDSJ+TimesNewRomanPSMT nf
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
166.946 621.804 mo
(FileWriter)
[1.64709 .823547 .823547 1.31526 2.79646 .98645 .823547 .823547 1.31526 0 ]xsh
167.55 625.189 mo
(I/O: 1->0)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
170.154 610.335 mo
170.578 612.028 171.001 614.144 171.636 616.048 cv
@
171.212 616.26 mo
172.059 618.164 li
172.059 616.048 li
cp
@
171.212 616.26 mo
172.059 618.164 li
172.059 616.048 li
f
180.1 625.782 mo
186.448 628.533 195.546 632.342 202.106 635.304 cv
@
201.471 635.516 mo
203.587 635.939 li
201.894 634.669 li
cp
@
201.471 635.516 mo
203.587 635.939 li
201.894 634.669 li
f
224.959 570.766 mo
224.959 568.195 218.611 566.111 210.782 566.111 cv
202.952 566.111 196.604 568.195 196.604 570.766 cv
196.604 573.337 202.952 575.421 210.782 575.421 cv
218.611 575.421 224.959 573.337 224.959 570.766 cv
@
224.959 570.766 mo
224.959 568.195 218.611 566.111 210.782 566.111 cv
202.952 566.111 196.604 568.195 196.604 570.766 cv
196.604 573.337 202.952 575.421 210.782 575.421 cv
218.611 575.421 224.959 573.337 224.959 570.766 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
199.511 569.75 mo
(ReversePixelOrder)
[1.97589 1.31526 1.4812 1.31526 .986465 1.15234 1.31526 1.64709 .823547 1.4812 1.31526 .823547 
2.13881 .98645 1.4812 1.31526 0 ]xsh
202.253 573.136 mo
(I/O: 720->720)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 .986465 1.67078 1.4812 1.4812 
0 ]xsh
210.782 558.282 mo
210.782 559.974 210.782 561.879 210.782 563.783 cv
@
210.358 563.783 mo
210.782 565.899 li
211.416 563.783 li
cp
@
210.358 563.783 mo
210.782 565.899 li
211.416 563.783 li
f
230.037 588.117 mo
230.037 585.546 221.416 583.462 210.782 583.462 cv
200.147 583.462 191.526 585.546 191.526 588.117 cv
191.526 590.688 200.147 592.772 210.782 592.772 cv
221.416 592.772 230.037 590.688 230.037 588.117 cv
@
230.037 588.117 mo
230.037 585.546 221.416 583.462 210.782 583.462 cv
200.147 583.462 191.526 585.546 191.526 588.117 cv
191.526 590.688 200.147 592.772 210.782 592.772 cv
221.416 592.772 230.037 590.688 230.037 588.117 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
194.243 587.101 mo
(Post_CollapsedDataParallel)
[1.64709 1.4812 1.15234 .823547 1.4812 1.97591 1.4812 .823547 .823547 1.31525 1.4812 1.15236 
1.31526 1.4812 2.13881 1.31526 .823547 1.31525 1.64709 1.31526 .986465 1.31526 .823547 .823547 
1.31526 0 ]xsh
197.81 590.487 mo
(I/O: 253440->253440)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 1.4812 .98645 
1.67079 1.48119 1.4812 1.4812 1.4812 1.4812 0 ]xsh
210.782 575.633 mo
210.782 577.326 210.782 579.23 210.782 581.134 cv
@
210.358 581.134 mo
210.782 583.25 li
211.416 581.134 li
cp
@
210.358 581.134 mo
210.782 583.25 li
211.416 581.134 li
f
225.382 605.468 mo
225.382 602.897 218.845 600.813 210.782 600.813 cv
202.718 600.813 196.181 602.897 196.181 605.468 cv
196.181 608.039 202.718 610.124 210.782 610.124 cv
218.845 610.124 225.382 608.039 225.382 605.468 cv
@
225.382 605.468 mo
225.382 602.897 218.845 600.813 210.782 600.813 cv
202.718 600.813 196.181 602.897 196.181 605.468 cv
196.181 608.039 202.718 610.124 210.782 610.124 cv
218.845 610.124 225.382 608.039 225.382 605.468 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
199.015 604.453 mo
(BMPStreamCreator)
[1.97589 2.63356 1.64709 1.64709 .823547 .98645 1.31526 1.31526 2.30475 1.97589 .986465 1.31526 
1.31526 .823547 1.48119 0 ]xsh
205.215 607.838 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
210.782 592.984 mo
210.782 594.677 210.782 596.581 210.782 598.486 cv
@
210.358 598.486 mo
210.782 600.602 li
211.416 598.486 li
cp
@
210.358 598.486 mo
210.782 600.602 li
211.416 598.486 li
f
219.669 622.82 mo
219.669 620.249 215.69 618.164 210.782 618.164 cv
205.873 618.164 201.894 620.249 201.894 622.82 cv
201.894 625.391 205.873 627.475 210.782 627.475 cv
215.69 627.475 219.669 625.391 219.669 622.82 cv
@
219.669 622.82 mo
219.669 620.249 215.69 618.164 210.782 618.164 cv
205.873 618.164 201.894 620.249 201.894 622.82 cv
201.894 625.391 205.873 627.475 210.782 627.475 cv
215.69 627.475 219.669 625.391 219.669 622.82 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
204.611 621.804 mo
(FileWriter)
[1.64709 .823547 .823547 1.31526 2.79646 .98645 .823547 .823547 1.31526 0 ]xsh
205.215 625.189 mo
(I/O: 1->0)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
210.782 610.335 mo
210.782 612.028 210.782 613.932 210.782 615.837 cv
@
210.358 615.837 mo
210.782 617.953 li
211.416 615.837 li
cp
@
210.358 615.837 mo
210.782 617.953 li
211.416 615.837 li
f
210.782 627.686 mo
210.782 629.379 210.782 631.284 210.782 633.188 cv
@
210.358 633.188 mo
210.782 635.304 li
211.416 633.188 li
cp
@
210.358 633.188 mo
210.782 635.304 li
211.416 633.188 li
f
268.76 570.766 mo
268.76 568.195 262.413 566.111 254.583 566.111 cv
246.753 566.111 240.406 568.195 240.406 570.766 cv
240.406 573.337 246.753 575.421 254.583 575.421 cv
262.413 575.421 268.76 573.337 268.76 570.766 cv
@
268.76 570.766 mo
268.76 568.195 262.413 566.111 254.583 566.111 cv
246.753 566.111 240.406 568.195 240.406 570.766 cv
240.406 573.337 246.753 575.421 254.583 575.421 cv
262.413 575.421 268.76 573.337 268.76 570.766 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
243.313 569.75 mo
(ReversePixelOrder)
[1.97589 1.31526 1.4812 1.31526 .986465 1.15234 1.31526 1.64709 .823547 1.48119 1.31528 .823547 
2.13879 .986481 1.4812 1.31525 0 ]xsh
246.055 573.136 mo
(I/O: 720->720)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.48122 .98645 1.67078 1.4812 1.4812 
0 ]xsh
254.583 558.282 mo
254.583 559.974 254.583 561.879 254.583 563.783 cv
@
254.16 563.783 mo
254.583 565.899 li
255.218 563.783 li
cp
@
254.16 563.783 mo
254.583 565.899 li
255.218 563.783 li
f
274.05 588.117 mo
274.05 585.546 265.429 583.462 254.794 583.462 cv
244.16 583.462 235.539 585.546 235.539 588.117 cv
235.539 590.688 244.16 592.772 254.794 592.772 cv
265.429 592.772 274.05 590.688 274.05 588.117 cv
@
274.05 588.117 mo
274.05 585.546 265.429 583.462 254.794 583.462 cv
244.16 583.462 235.539 585.546 235.539 588.117 cv
235.539 590.688 244.16 592.772 254.794 592.772 cv
265.429 592.772 274.05 590.688 274.05 588.117 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
238.256 587.101 mo
(Post_CollapsedDataParallel)
[1.64709 1.4812 1.15234 .823547 1.4812 1.97591 1.4812 .823547 .823547 1.31525 1.4812 1.15236 
1.31526 1.4812 2.13879 1.31528 .823547 1.31525 1.64709 1.31528 .98645 1.31525 .823547 .823547 
1.31528 0 ]xsh
241.823 590.487 mo
(I/O: 253440->253440)
[.98645 .823547 2.13881 .823547 .740601 1.4812 1.4812 1.4812 1.4812 1.4812 1.48119 .986481 
1.67078 1.4812 1.4812 1.4812 1.4812 1.4812 0 ]xsh
254.583 575.633 mo
254.583 577.326 254.794 579.23 254.794 581.134 cv
@
254.371 581.134 mo
254.794 583.25 li
255.429 581.134 li
cp
@
254.371 581.134 mo
254.794 583.25 li
255.429 581.134 li
f
267.067 605.468 mo
267.067 602.897 260.53 600.813 252.467 600.813 cv
244.403 600.813 237.866 602.897 237.866 605.468 cv
237.866 608.039 244.403 610.124 252.467 610.124 cv
260.53 610.124 267.067 608.039 267.067 605.468 cv
@
267.067 605.468 mo
267.067 602.897 260.53 600.813 252.467 600.813 cv
244.403 600.813 237.866 602.897 237.866 605.468 cv
237.866 608.039 244.403 610.124 252.467 610.124 cv
260.53 610.124 267.067 608.039 267.067 605.468 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
240.7 604.453 mo
(BMPStreamCreator)
[1.97589 2.63356 1.64709 1.64709 .823547 .98645 1.31526 1.31526 2.30475 1.97589 .98645 1.31528 
1.31525 .823547 1.4812 0 ]xsh
246.9 607.838 mo
(I/O: 1->1)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67076 0 ]xsh
254.16 592.984 mo
253.948 594.677 253.736 596.793 253.525 598.486 cv
@
253.102 598.486 mo
253.102 600.602 li
253.948 598.697 li
cp
@
253.102 598.486 mo
253.102 600.602 li
253.948 598.697 li
f
257.334 622.82 mo
257.334 620.249 253.355 618.164 248.446 618.164 cv
243.538 618.164 239.559 620.249 239.559 622.82 cv
239.559 625.391 243.538 627.475 248.446 627.475 cv
253.355 627.475 257.334 625.391 257.334 622.82 cv
@
257.334 622.82 mo
257.334 620.249 253.355 618.164 248.446 618.164 cv
243.538 618.164 239.559 620.249 239.559 622.82 cv
239.559 625.391 243.538 627.475 248.446 627.475 cv
253.355 627.475 257.334 625.391 257.334 622.82 cv
1 gry
f
0 gry
LTFDSJ+TimesNewRomanPSMT*1 [2.9624 0 0 -2.9624 0 0 ]msf
242.276 621.804 mo
(FileWriter)
[1.64709 .823547 .823547 1.31526 2.79646 .98645 .823547 .823547 1.31526 0 ]xsh
242.88 625.189 mo
(I/O: 1->0)
[.98645 .823547 2.13881 .823547 .740601 1.4812 .986465 1.67078 0 ]xsh
251.409 610.335 mo
250.986 612.028 250.562 614.144 249.928 616.048 cv
@
249.504 616.048 mo
249.504 618.164 li
250.351 616.26 li
cp
@
249.504 616.048 mo
249.504 618.164 li
250.351 616.26 li
f
241.464 625.782 mo
235.116 628.533 226.017 632.342 219.457 635.304 cv
@
219.669 634.669 mo
217.976 635.939 li
220.092 635.516 li
cp
@
219.669 634.669 mo
217.976 635.939 li
220.092 635.516 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/LTFDSJ+TimesNewRomanPSMT*1 uf
/LTFDSJ+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
