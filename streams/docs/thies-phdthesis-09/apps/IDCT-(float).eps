%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: IDCT.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:09:00 PM
%%BoundingBox: 0 0 327 649
%%HiResBoundingBox: 0 0 327 649
%%CropBox: 0 0 327 649
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -649 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 649 li
327 649 li
327 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 650 mo
363 650 li
363 0 li
35 0 li
cp
clp
.2275 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
37.82 647.18 mo
360.415 647.18 li
360.415 2.89996 li
37.82 2.89996 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 68 /D put
dup 73 /I put
dup 84 /T put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/C <1C60D8A8C9B64EDFB39C8FA0E3107D39E1E26D40368A6A59D36B799EDDCB
A8AF8BCAEA2E296C5BB00979C4073082C4AC62DAAE27F25BE45DFF121DF075F7
3D37111C10DFF7C6BD4BFE8AE73B4FADB84F0E8B5722DEA1CA14F5AFDC440B45
4F635F5576E82C8F45782F1EDE0EC9CA59D48E4C0F81> |-
/D <1C60D8A8C9B6079F62AF7EE2124AC712AE5D5419E262A0C00C6163DFBCB2
A6FA65DDDD5062250DB8BBFB46EB35827750F9FCEE696526B20FE9266474B179
350945BBDAF7180FAB04D619EB38198FC722361E0B3B5E50F9017F19C7BDCABB
285F506A04FE32C63936689B1F9C81923B03440D57336303C59B59E8D3C0659D
33> |-
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
/T <1C60D8A8C9B7D8BE16B2E353E3300378A32828826C127DE3D6A3769F5542
8119DC48F4B555CFAC557278838F3EC6C5F7B64F6B44DFEFCBC8AF8174185170
E165701BB15CF1CB88629A978EF6D86FB8> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDRU+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp /T 171{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
39.3372 5.44792 mo
(IDCT)
[1.06058 2.29952 2.12437 0 ]xsh
41.46 508.86 mo
356.775 508.86 li
356.775 26.56 li
41.46 26.56 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 99 /c put
dup 101 /e put
dup 114 /r put
dup 115 /s put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp /T 14{/.notdef}rp 
/c /.notdef /e 12{/.notdef}rp /r /s /.notdef /u 
138{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
42.9297 29.1079 mo
(Irecurse)
[1.06058 1.06058 1.41409 1.41409 1.5925 1.06058 1.23894 0 ]xsh
45.1 474.28 mo
204.35 474.28 li
204.35 42.03 li
45.1 42.03 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 111 /o put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp /T 14{/.notdef}rp 
/c /.notdef /e 9{/.notdef}rp /o 2{/.notdef}rp /r /s 
/.notdef /u 138{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
46.6065 44.5779 mo
(IDCTcore)
[1.06058 2.29952 2.12437 1.94601 1.41409 1.5925 1.06058 0 ]xsh
48.74 345.97 mo
200.71 345.97 li
200.71 47.4899 li
48.74 47.4899 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
50.2097 50.0379 mo
(Irecurse)
[1.06058 1.06058 1.41409 1.41409 1.5925 1.06058 1.23894 0 ]xsh
52.38 304.11 mo
126.318 304.11 li
126.318 66.6 li
52.38 66.6 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
53.8865 69.1479 mo
(IDCTcore)
[1.06058 2.29952 2.12437 1.94601 1.41409 1.5925 1.06058 0 ]xsh
56.02 160.33 mo
122.677 160.33 li
122.677 72.0599 li
56.02 72.0599 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
57.4896 74.6079 mo
(Irecurse)
[1.06058 1.06058 1.41409 1.41409 1.5925 1.06058 1.23895 0 ]xsh
87.6425 139.4 mo
119.037 139.4 li
119.037 92.9899 li
87.6425 92.9899 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp /T 14{/.notdef}rp 
/c /d /e 9{/.notdef}rp /o 2{/.notdef}rp /r /s 
/.notdef /u 138{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
89.2121 95.5379 mo
(reordIDCT)
[1.06058 1.41409 1.59251 1.06058 1.5925 1.06059 2.29952 2.12437 0 ]xsh
64.8925 231.31 mo
113.577 231.31 li
113.577 168.52 li
64.8925 168.52 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C86
82F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CB
A64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762
A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A
9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61F
B9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 97 /a put
dup 105 /i put
dup 109 /m put
dup 116 /t put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp /T 12{/.notdef}rp 
/a /.notdef /c /d /e 3{/.notdef}rp /i 3{/.notdef}rp 
/m /.notdef /o 2{/.notdef}rp /r /s /t /u 
138{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
66.3483 171.068 mo
(Idecimate)
[1.06058 1.59251 1.41409 1.41409 .885429 2.47794 1.41409 .885437 0 ]xsh
73.9925 302.29 mo
120.857 302.29 li
120.857 239.5 li
73.9925 239.5 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
/v <1C60D8A8C9B7A73DDA3AE0A055993EE6BE7DFD4A4A2DB6881516C07791ED
230086728F5F7B4242AB79AA3E9EFA40308C16768E728C96C19C447086D3AC82
2F0AB1C43C44A30591856370C72E911DB5FEBBFD365EF7E42462BF4A23A3EEAE
F504CBF5C917EC0A44C5B6D735> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 98 /b put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[67{/.notdef}rp /C /D 4{/.notdef}rp /I 10{/.notdef}rp /T 12{/.notdef}rp 
/a /b /c /d /e 3{/.notdef}rp /i 3{/.notdef}rp 
/m /.notdef /o 2{/.notdef}rp /r /s /t /u 
/v 137{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
75.5097 242.048 mo
(bitrev)
[1.5925 .885429 .885429 1.06059 1.41409 0 ]xsh
123.132 327.77 mo
197.069 327.77 li
197.069 68.42 li
123.132 68.42 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
124.702 70.9679 mo
(reordIDCT)
[1.06059 1.41409 1.59251 1.06058 1.5925 1.06058 2.29953 2.12437 0 ]xsh
126.772 183.99 mo
193.429 183.99 li
193.429 96.6299 li
126.772 96.6299 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
128.242 99.1779 mo
(Irecurse)
[1.06058 1.06058 1.41409 1.41409 1.5925 1.06059 1.23894 0 ]xsh
158.395 163.97 mo
189.79 163.97 li
189.79 116.65 li
158.395 116.65 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
159.965 119.198 mo
(reordIDCT)
[1.06058 1.41409 1.5925 1.06059 1.5925 1.06058 2.29951 2.12437 0 ]xsh
134.28 254.97 mo
182.965 254.97 li
182.965 192.18 li
134.28 192.18 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
135.736 194.728 mo
(Idecimate)
[1.06058 1.5925 1.41409 1.41409 .885437 2.47792 1.41409 .885437 0 ]xsh
126.772 325.95 mo
173.637 325.95 li
173.637 263.16 li
126.772 263.16 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
128.29 265.708 mo
(bitrev)
[1.5925 .885437 .885422 1.06058 1.41409 0 ]xsh
97.425 408.76 mo
195.25 408.76 li
195.25 349.61 li
97.425 349.61 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
98.8808 352.158 mo
(Idecimate)
[1.06058 1.59251 1.41409 1.41409 .885429 2.47794 1.41409 .885437 0 ]xsh
146.338 472.46 mo
193.203 472.46 li
193.203 413.31 li
146.338 413.31 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
147.855 415.858 mo
(bitrev)
[1.5925 .885437 .885422 1.06058 1.41409 0 ]xsh
193.885 494.3 mo
353.135 494.3 li
353.135 43.85 li
193.885 43.85 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
195.455 46.3979 mo
(reordIDCT)
[1.06058 1.41409 1.5925 1.06059 1.5925 1.06058 2.29951 2.12437 0 ]xsh
197.525 365.08 mo
349.495 365.08 li
349.495 72.06 li
197.525 72.06 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
198.995 74.6079 mo
(Irecurse)
[1.06058 1.06058 1.41409 1.41409 1.5925 1.06059 1.23894 0 ]xsh
201.165 327.77 mo
275.102 327.77 li
275.102 91.17 li
201.165 91.17 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
202.672 93.7179 mo
(IDCTcore)
[1.06058 2.29953 2.12436 1.94601 1.41409 1.5925 1.06058 0 ]xsh
204.805 183.99 mo
271.462 183.99 li
271.462 96.6299 li
204.805 96.6299 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
206.275 99.1779 mo
(Irecurse)
[1.06058 1.06058 1.41409 1.41409 1.5925 1.06059 1.23894 0 ]xsh
236.427 163.97 mo
267.822 163.97 li
267.822 116.65 li
236.427 116.65 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
237.997 119.198 mo
(reordIDCT)
[1.06058 1.41409 1.5925 1.06059 1.5925 1.06058 2.29951 2.12437 0 ]xsh
213.677 254.97 mo
262.362 254.97 li
262.362 192.18 li
213.677 192.18 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
215.133 194.728 mo
(Idecimate)
[1.06058 1.5925 1.41409 1.41409 .885437 2.47792 1.41409 .885437 0 ]xsh
222.777 325.95 mo
269.642 325.95 li
269.642 263.16 li
222.777 263.16 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
224.295 265.708 mo
(bitrev)
[1.5925 .885437 .885422 1.06058 1.41409 0 ]xsh
271.918 347.79 mo
345.855 347.79 li
345.855 92.9899 li
271.918 92.9899 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
273.487 95.5379 mo
(reordIDCT)
[1.06058 1.41409 1.5925 1.06058 1.5925 1.06058 2.29953 2.12439 0 ]xsh
275.557 207.65 mo
342.214 207.65 li
342.214 120.29 li
275.557 120.29 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
277.027 122.838 mo
(Irecurse)
[1.06058 1.06058 1.41409 1.41409 1.5925 1.06058 1.23895 0 ]xsh
307.18 187.63 mo
338.575 187.63 li
338.575 141.22 li
307.18 141.22 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
308.75 143.768 mo
(reordIDCT)
[1.06058 1.41409 1.5925 1.06058 1.5925 1.06058 2.29953 2.12439 0 ]xsh
283.065 278.63 mo
331.75 278.63 li
331.75 215.84 li
283.065 215.84 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
284.521 218.388 mo
(Idecimate)
[1.06058 1.5925 1.41409 1.41409 .885437 2.47794 1.41409 .885406 0 ]xsh
275.557 345.97 mo
322.422 345.97 li
322.422 286.82 li
275.557 286.82 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
277.075 289.368 mo
(bitrev)
[1.5925 .885437 .885437 1.06058 1.41409 0 ]xsh
201.165 428.78 mo
298.99 428.78 li
298.99 369.63 li
201.165 369.63 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
202.621 372.178 mo
(Idecimate)
[1.06058 1.5925 1.41409 1.41409 .885437 2.47792 1.41409 .885437 0 ]xsh
203.212 492.48 mo
250.077 492.48 li
250.077 433.33 li
203.212 433.33 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
204.73 435.878 mo
(bitrev)
[1.5925 .885437 .885422 1.06058 1.41409 0 ]xsh
109.255 566.19 mo
305.36 566.19 li
305.36 510.68 li
109.255 510.68 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
110.711 513.228 mo
(Idecimate)
[1.06058 1.59251 1.41409 1.41409 .885429 2.47794 1.41409 .885437 0 ]xsh
183.42 623.52 mo
231.195 623.52 li
231.195 568.01 li
183.42 568.01 li
cp
@
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
184.937 570.558 mo
(bitrev)
[1.5925 .885437 .885422 1.06058 1.41409 0 ]xsh
200.027 16.095 mo
200.027 11.8229 195.648 8.35999 190.245 8.35999 cv
184.842 8.35999 180.462 11.8229 180.462 16.095 cv
180.462 20.3669 184.842 23.83 190.245 23.83 cv
195.648 23.83 200.027 20.3669 200.027 16.095 cv
@
200.027 16.095 mo
200.027 11.8229 195.648 8.35999 190.245 8.35999 cv
184.842 8.35999 180.462 11.8229 180.462 16.095 cv
180.462 20.3669 184.842 23.83 190.245 23.83 cv
195.648 23.83 200.027 20.3669 200.027 16.095 cv
/1 
[/DeviceRGB] /CSA add_res
.882 .953 .973 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/hyphen <1C60D8A8C9B81F2C7E673161CF52871F3F524B3A1BAC5ADA04F510A
476> |-
/slash <1C60D8A8C9B854D088EAD778FBC18D924BA165ED7CB0EB5700C3B61B
62ACF96E65C0BF> |-
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
/eight <1C60D8A8C9B7A73D9EB159A3CFECEE26FAC12AD4B6691842B4C84783
E84E1D8CD272AEC54014C937C15B810E403549328E3DC44B6A66E9E0AE5509A1
20FFE6F694340EC43D35C59CD7D1B2F14C1F1D5BA576A10F77E962817750FC0E
DC62627EE0E94BCE030A10C59143A015250A384C09B6A65F8572DF3FCBF68CF8
0D23E4E88D0691BD2178810DDABD5F40D8018F795B8CB5A52DDDD05F80E9A2BC
CDF3A5E14C701FBADF0447A7AE0E47FA8F86216AC25155BFF3569B19382CA905
7B18009FE630A2D7CEFDC3A4A3> |-
/colon <1C60D8A8C9B854D0E389293C42E83787A5BE0CE9B5745E40D1B32D07
F826004562E0981DB26F3EF2E2B5CD932C33C49C462F9673F306A9A8ECFFE93D
9FCE8BF4190AA3F1208FCCE1> |-
/equal <1C60D8A8C9B7E7C1C7C30B941AA047473EBF9655DE246137CE0666A3
DD27E47997A26319529C8C4FF5C38D266AE0> |-
/greater <1C60D8A8C9B7E7C1C7C30B940B3D62C7A181F0EBB0723CBB160375
71F050C44CCE59A85ACB3DB6BF9B03383F> |-
/O <1C60D8A8C9B6079F258D65BC2331B95A484F6FB0C89DE7976C286549CD33
A4D7316575EC038BAA234ED3FB5DEACB25E52512A7CBD428E6DBD2EB830622E8
8A44262525560702DCFFFB3478FE1A2C6113548B23F661EC01296D75C1A7D5FE
B75CD951FFE5A9> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
/w <1C60D8A8C9B6079F6CBBA5F366E947F933D60DF598D919B1B7650559D736
37DABDC1EE55BCEC17305D792CEB494E24BD853631335C74FFCA113C4D914522
6940D65B0FA636B78B1332922431C88D4DDF20C0A3C1C91D0C3F0EC21F67A6EF
80D94D8DD0BC64DA8FAF76B12BBC90C7B441833497F4FAAF7AFFFE22453504D1
C6C3D3F89787D8CE910F64CD7AC81F424C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 47 /slash put
dup 48 /zero put
dup 52 /four put
dup 56 /eight put
dup 58 /colon put
dup 61 /equal put
dup 62 /greater put
dup 79 /O put
dup 107 /k put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero 3{/.notdef}rp 
/four 3{/.notdef}rp /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp 
/T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i /.notdef /k /.notdef /m /.notdef /o 2{/.notdef}rp 
/r /s /t /u /v /w 136{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
186.089 13.1829 mo
(source)
[1.23894 1.5925 1.5925 1.06059 1.41409 0 ]xsh
184.482 16.8229 mo
(work=48)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
184.261 20.4629 mo
(I/O: 0->4)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
202.757 36.1149 mo
202.757 33.853 197.155 32.02 190.245 32.02 cv
183.335 32.02 177.732 33.853 177.732 36.1149 cv
177.732 38.377 183.335 40.21 190.245 40.21 cv
197.155 40.21 202.757 38.377 202.757 36.1149 cv
@
202.757 36.1149 mo
202.757 33.853 197.155 32.02 190.245 32.02 cv
183.335 32.02 177.732 33.853 177.732 36.1149 cv
177.732 38.377 183.335 40.21 190.245 40.21 cv
197.155 40.21 202.757 38.377 202.757 36.1149 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 49 /one put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one 2{/.notdef}rp /four 3{/.notdef}rp /eight 
/.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp /C /D 
4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp /T 12{/.notdef}rp /a 
/b /c /d /e 3{/.notdef}rp /i /.notdef /k 
/.notdef /m /n /o 2{/.notdef}rp /r /s /t 
/u /v /w 136{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
180.117 36.8429 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 0 ]xsh
190.245 23.83 mo
190.245 25.877 190.245 27.925 190.245 29.972 cv
@
189.79 29.745 mo
190.245 32.02 li
190.927 29.745 li
cp
@
189.79 29.745 mo
190.245 32.02 li
190.927 29.745 li
f
169.77 57.045 mo
169.77 54.783 164.168 52.95 157.257 52.95 cv
150.347 52.95 144.745 54.783 144.745 57.045 cv
144.745 59.3069 150.347 61.14 157.257 61.14 cv
164.168 61.14 169.77 59.3069 169.77 57.045 cv
@
169.77 57.045 mo
169.77 54.783 164.168 52.95 157.257 52.95 cv
150.347 52.95 144.745 54.783 144.745 57.045 cv
144.745 59.3069 150.347 61.14 157.257 61.14 cv
164.168 61.14 169.77 59.3069 169.77 57.045 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
147.129 57.7729 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 0 ]xsh
184.557 39.7549 mo
178.87 43.395 170.225 48.8549 164.31 52.495 cv
@
164.538 51.585 mo
162.945 53.405 li
165.22 52.722 li
cp
@
164.538 51.585 mo
162.945 53.405 li
165.22 52.722 li
f
233.47 57.045 mo
233.47 52.7729 228.886 49.31 223.232 49.31 cv
217.578 49.31 212.995 52.7729 212.995 57.045 cv
212.995 61.317 217.578 64.78 223.232 64.78 cv
228.886 64.78 233.47 61.317 233.47 57.045 cv
@
233.47 57.045 mo
233.47 52.7729 228.886 49.31 223.232 49.31 cv
217.578 49.31 212.995 52.7729 212.995 57.045 cv
212.995 61.317 217.578 64.78 223.232 64.78 cv
228.886 64.78 233.47 61.317 233.47 57.045 cv
.843 .18 .157 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73DB9D92E2C498F1C8C272174C48D3E3EA8F27C6E6BA
93064621D133D030C551A42025686691A783FB90A2D496BEF06790AC79A6878D
99BC23CD14D9CFD812148CC847ABD0CF7E73A1A9D5ACE6E2E3BBFD4DD> |-
/x <1C60D8A8C9B7A73DD670D8CCCBFBC4E258D7CAA3ED17D069C025C1A2420A
81D4B3EAD7110946DAC3BA40217DDD18B672D1C19269266B39D87F9C1DDA90BD
8FC71EBFE3B2169703196A9FC02F9EA267A90B94DB1FAA5C105A1B22ABB76205
ADA50D456170C13F6F28FC77F3978776E97B76A3DEF1976915B787070DC57673
F3C0FA2B4E9DEFEF7147D4269144499ACAFBAFD930E1A038534DF3D883A96117
05279F3EC76B84BD5055C0FF3A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 53 /five put
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one 2{/.notdef}rp /four /five 2{/.notdef}rp 
/eight /.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp /C 
/D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp /T 12{/.notdef}rp 
/a /b /c /d /e 3{/.notdef}rp /i /.notdef 
/k /.notdef /m /n /o 2{/.notdef}rp /r /s 
/t /u /v /w /x 135{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
219.516 54.1329 mo
(inmix)
[.885437 1.5925 2.47792 .885437 0 ]xsh
216.673 57.7729 mo
(work=115)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
217.248 61.4129 mo
(I/O: 8->8)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
197.525 39.527 mo
199.345 40.437 201.165 41.347 202.302 42.03 cv
205.488 44.077 210.038 47.262 214.132 50.22 cv
@
213.905 50.675 mo
215.952 51.585 li
214.588 49.765 li
cp
@
213.905 50.675 mo
215.952 51.585 li
214.588 49.765 li
f
219.82 502.945 mo
219.82 500.683 214.218 498.85 207.307 498.85 cv
200.397 498.85 194.795 500.683 194.795 502.945 cv
194.795 505.207 200.397 507.04 207.307 507.04 cv
214.218 507.04 219.82 505.207 219.82 502.945 cv
@
219.82 502.945 mo
219.82 500.683 214.218 498.85 207.307 498.85 cv
200.397 498.85 194.795 500.683 194.795 502.945 cv
194.795 505.207 200.397 507.04 207.307 507.04 cv
214.218 507.04 219.82 505.207 219.82 502.945 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
197.179 503.673 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
226.872 520.235 mo
226.872 517.973 218.113 516.14 207.307 516.14 cv
196.502 516.14 187.743 517.973 187.743 520.235 cv
187.743 522.497 196.502 524.33 207.307 524.33 cv
218.113 524.33 226.872 522.497 226.872 520.235 cv
@
226.872 520.235 mo
226.872 517.973 218.113 516.14 207.307 516.14 cv
196.502 516.14 187.743 517.973 187.743 520.235 cv
187.743 522.497 196.502 524.33 207.307 524.33 cv
218.113 524.33 226.872 522.497 226.872 520.235 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
2{/.notdef}rp /eight /.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp 
/C /D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp /T 
12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp /i 
/.notdef /k /.notdef /m /n /o 2{/.notdef}rp /r 
/s /t /u /v /w /x 135{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
190.013 520.963 mo
(roundrobin\(2,2,2,2,2,2,2,2\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 .796249 1.5925 .796249 1.5925 .796249 1.5925 .796249 1.5925 .796265 1.5925 
.796249 1.5925 0 ]xsh
207.307 507.04 mo
207.307 509.088 207.307 511.59 207.307 513.865 cv
@
206.852 513.865 mo
207.307 516.14 li
207.99 513.865 li
cp
@
206.852 513.865 mo
207.307 516.14 li
207.99 513.865 li
f
115.852 81.6149 mo
115.852 79.353 110.25 77.52 103.34 77.52 cv
96.4295 77.52 90.8275 79.353 90.8275 81.6149 cv
90.8275 83.877 96.4295 85.71 103.34 85.71 cv
110.25 85.71 115.852 83.877 115.852 81.6149 cv
@
115.852 81.6149 mo
115.852 79.353 110.25 77.52 103.34 77.52 cv
96.4295 77.52 90.8275 79.353 90.8275 81.6149 cv
90.8275 83.877 96.4295 85.71 103.34 85.71 cv
110.25 85.71 115.852 83.877 115.852 81.6149 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
93.2118 82.3429 mo
(roundrobin\(1,1\))
[1.06059 1.5925 1.5925 1.5925 1.5925 1.06059 1.5925 1.5925 .885429 1.5925 1.06059 1.5925 
.796249 1.5925 0 ]xsh
146.565 59.32 mo
138.602 61.14 127.91 63.642 121.54 66.6 cv
117.672 68.42 112.667 72.7419 108.8 76.382 cv
@
108.572 75.9269 mo
107.207 77.747 li
109.255 76.61 li
cp
@
108.572 75.9269 mo
107.207 77.747 li
109.255 76.61 li
f
167.04 81.6149 mo
167.04 77.343 162.66 73.8799 157.257 73.8799 cv
151.855 73.8799 147.475 77.343 147.475 81.6149 cv
147.475 85.887 151.855 89.35 157.257 89.35 cv
162.66 89.35 167.04 85.887 167.04 81.6149 cv
@
167.04 81.6149 mo
167.04 77.343 162.66 73.8799 157.257 73.8799 cv
151.855 73.8799 147.475 77.343 147.475 81.6149 cv
147.475 85.887 151.855 89.35 157.257 89.35 cv
162.66 89.35 167.04 85.887 167.04 81.6149 cv
.882 .953 .973 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
153.541 78.7029 mo
(inmix)
[.885437 1.5925 2.47792 .885437 0 ]xsh
151.495 82.3429 mo
(work=55)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
151.273 85.983 mo
(I/O: 4->4)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
157.257 61.14 mo
157.257 63.87 157.257 67.738 157.257 71.6049 cv
@
156.802 71.6049 mo
157.257 73.8799 li
157.94 71.6049 li
cp
@
156.802 71.6049 mo
157.257 73.8799 li
157.94 71.6049 li
f
149.977 340.055 mo
149.977 337.793 144.375 335.96 137.465 335.96 cv
130.555 335.96 124.952 337.793 124.952 340.055 cv
124.952 342.317 130.555 344.15 137.465 344.15 cv
144.375 344.15 149.977 342.317 149.977 340.055 cv
@
149.977 340.055 mo
149.977 337.793 144.375 335.96 137.465 335.96 cv
130.555 335.96 124.952 337.793 124.952 340.055 cv
124.952 342.317 130.555 344.15 137.465 344.15 cv
144.375 344.15 149.977 342.317 149.977 340.055 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
127.337 340.783 mo
(roundrobin\(1,1\))
[1.06059 1.5925 1.5925 1.5925 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796265 1.5925 0 ]xsh
152.252 359.165 mo
152.252 356.903 145.632 355.07 137.465 355.07 cv
129.298 355.07 122.677 356.903 122.677 359.165 cv
122.677 361.427 129.298 363.26 137.465 363.26 cv
145.632 363.26 152.252 361.427 152.252 359.165 cv
@
152.252 359.165 mo
152.252 356.903 145.632 355.07 137.465 355.07 cv
129.298 355.07 122.677 356.903 122.677 359.165 cv
122.677 361.427 129.298 363.26 137.465 363.26 cv
145.632 363.26 152.252 361.427 152.252 359.165 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
124.948 359.893 mo
(roundrobin\(2,2,2,2\))
[1.06058 1.59251 1.59249 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 .796249 1.5925 .796249 1.5925 0 ]xsh
137.465 344.15 mo
137.465 346.652 137.465 350.065 137.465 353.023 cv
@
137.01 352.795 mo
137.465 355.07 li
138.147 352.795 li
cp
@
137.01 352.795 mo
137.465 355.07 li
138.147 352.795 li
f
85.595 106.185 mo
85.595 101.913 79.3818 98.45 71.7175 98.45 cv
64.0532 98.45 57.84 101.913 57.84 106.185 cv
57.84 110.457 64.0532 113.92 71.7175 113.92 cv
79.3818 113.92 85.595 110.457 85.595 106.185 cv
@
85.595 106.185 mo
85.595 101.913 79.3818 98.45 71.7175 98.45 cv
64.0532 98.45 57.84 101.913 57.84 106.185 cv
57.84 110.457 64.0532 113.92 71.7175 113.92 cv
79.3818 113.92 85.595 110.457 85.595 106.185 cv
.992 .863 .565 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7EF322B10A2A8DE6EF0A6CE60E86B1DF5C68015667A2338DB
07BCF91C9D8DCCB5967A656E7EB6651B3E305A306DA1BB8C1BAEECFC60DC00D8
8AEC56E3DF7455D57CB9BB0CC9A32704D4F0F1C39C5B2EDC70F42754CACE7253
FF5FDAE4B675FFF987E22613E24B8956EFA9C2C5B9AC406D966F459601B2046A
C9E54A3BB37C45EDEB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
2{/.notdef}rp /eight /.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp 
/C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 3{/.notdef}rp 
/T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i /.notdef /k /.notdef /m /n /o 2{/.notdef}rp 
/r /s /t /u /v /w /x 135{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
61.7198 103.273 mo
(TwoPointIDCT)
[1.94601 2.29952 1.5925 1.77086 1.5925 .885429 1.59251 .885422 1.06059 2.29952 2.12437 0 
]xsh
65.9542 106.913 mo
(work=80)
[2.29952 1.5925 1.06059 1.5925 1.79633 1.5925 0 ]xsh
65.7329 110.553 mo
(I/O: 2->2)
[1.06059 .885429 2.29951 .885429 .796257 1.5925 1.06058 1.79633 0 ]xsh
96.2875 85.027 mo
92.875 86.847 88.5525 89.35 86.05 91.17 cv
83.775 92.762 81.2725 95.265 78.9975 97.995 cv
@
78.9975 97.085 mo
77.86 99.132 li
79.9075 97.995 li
cp
@
78.9975 97.085 mo
77.86 99.132 li
79.9075 97.995 li
f
113.122 106.185 mo
113.122 101.913 108.743 98.45 103.34 98.45 cv
97.9373 98.45 93.5575 101.913 93.5575 106.185 cv
93.5575 110.457 97.9373 113.92 103.34 113.92 cv
108.743 113.92 113.122 110.457 113.122 106.185 cv
@
113.122 106.185 mo
113.122 101.913 108.743 98.45 103.34 98.45 cv
97.9373 98.45 93.5575 101.913 93.5575 106.185 cv
93.5575 110.457 97.9373 113.92 103.34 113.92 cv
108.743 113.92 113.122 110.457 113.122 106.185 cv
.455 .686 .812 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
99.6231 103.273 mo
(inmix)
[.885429 1.5925 2.47793 .885429 0 ]xsh
97.5768 106.913 mo
(work=25)
[2.29952 1.5925 1.06059 1.5925 1.79633 1.5925 0 ]xsh
97.3554 110.553 mo
(I/O: 2->2)
[1.06059 .885429 2.29951 .885429 .796257 1.5925 1.06058 1.79633 0 ]xsh
103.34 85.71 mo
103.34 88.4399 103.34 92.3069 103.34 96.175 cv
@
102.885 96.175 mo
103.34 98.45 li
104.022 96.175 li
cp
@
102.885 96.175 mo
103.34 98.45 li
104.022 96.175 li
f
101.747 154.415 mo
101.747 152.153 96.1454 150.32 89.235 150.32 cv
82.3245 150.32 76.7225 152.153 76.7225 154.415 cv
76.7225 156.677 82.3245 158.51 89.235 158.51 cv
96.1454 158.51 101.747 156.677 101.747 154.415 cv
@
101.747 154.415 mo
101.747 152.153 96.1454 150.32 89.235 150.32 cv
82.3245 150.32 76.7225 152.153 76.7225 154.415 cv
76.7225 156.677 82.3245 158.51 89.235 158.51 cv
96.1454 158.51 101.747 156.677 101.747 154.415 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
79.1068 155.143 mo
(roundrobin\(1,1\))
[1.06058 1.59251 1.5925 1.5925 1.5925 1.06059 1.5925 1.5925 .885429 1.5925 1.06059 1.5925 
.796249 1.5925 0 ]xsh
101.747 178.075 mo
101.747 175.813 96.1454 173.98 89.235 173.98 cv
82.3245 173.98 76.7225 175.813 76.7225 178.075 cv
76.7225 180.337 82.3245 182.17 89.235 182.17 cv
96.1454 182.17 101.747 180.337 101.747 178.075 cv
@
101.747 178.075 mo
101.747 175.813 96.1454 173.98 89.235 173.98 cv
82.3245 173.98 76.7225 175.813 76.7225 178.075 cv
76.7225 180.337 82.3245 182.17 89.235 182.17 cv
96.1454 182.17 101.747 180.337 101.747 178.075 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
79.1068 178.803 mo
(roundrobin\(2,2\))
[1.06058 1.59251 1.5925 1.5925 1.5925 1.06059 1.5925 1.5925 .885429 1.5925 1.06059 1.5925 
.796249 1.5925 0 ]xsh
89.235 158.51 mo
89.235 162.15 89.235 167.61 89.235 171.932 cv
@
88.78 171.705 mo
89.235 173.98 li
89.9175 171.705 li
cp
@
88.78 171.705 mo
89.235 173.98 li
89.9175 171.705 li
f
74.4475 113.92 mo
78.0875 123.475 84.0025 139.855 86.96 148.5 cv
@
86.2775 148.5 mo
87.6425 150.32 li
87.415 148.045 li
cp
@
86.2775 148.5 mo
87.6425 150.32 li
87.415 148.045 li
f
117.217 129.845 mo
117.217 125.573 111.004 122.11 103.34 122.11 cv
95.6757 122.11 89.4625 125.573 89.4625 129.845 cv
89.4625 134.117 95.6757 137.58 103.34 137.58 cv
111.004 137.58 117.217 134.117 117.217 129.845 cv
@
117.217 129.845 mo
117.217 125.573 111.004 122.11 103.34 122.11 cv
95.6757 122.11 89.4625 125.573 89.4625 129.845 cv
89.4625 134.117 95.6757 137.58 103.34 137.58 cv
111.004 137.58 117.217 134.117 117.217 129.845 cv
.992 .863 .565 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
93.3423 126.933 mo
(TwoPointIDCT)
[1.94601 2.29951 1.59251 1.77086 1.5925 .885429 1.5925 .885429 1.06059 2.29951 2.12437 0 
]xsh
97.5768 130.573 mo
(work=80)
[2.29952 1.5925 1.06059 1.5925 1.79633 1.5925 0 ]xsh
97.3554 134.213 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
103.34 113.92 mo
103.34 115.74 103.34 117.788 103.34 119.835 cv
@
102.885 119.835 mo
103.34 122.11 li
104.022 119.835 li
cp
@
102.885 119.835 mo
103.34 122.11 li
104.022 119.835 li
f
99.0175 137.125 mo
96.97 140.765 94.4675 145.315 92.42 148.727 cv
@
92.1925 148.045 mo
91.51 150.32 li
93.1025 148.727 li
cp
@
92.1925 148.045 mo
91.51 150.32 li
93.1025 148.727 li
f
87.1875 201.735 mo
87.1875 197.463 82.604 194 76.95 194 cv
71.296 194 66.7125 197.463 66.7125 201.735 cv
66.7125 206.007 71.296 209.47 76.95 209.47 cv
82.604 209.47 87.1875 206.007 87.1875 201.735 cv
@
87.1875 201.735 mo
87.1875 197.463 82.604 194 76.95 194 cv
71.296 194 66.7125 197.463 66.7125 201.735 cv
66.7125 206.007 71.296 209.47 76.95 209.47 cv
82.604 209.47 87.1875 206.007 87.1875 201.735 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
72.1757 198.823 mo
(recover)
[1.06059 1.41409 1.41409 1.5925 1.59251 1.41409 0 ]xsh
70.3905 202.463 mo
(work=112)
[2.29952 1.5925 1.06059 1.5925 1.79633 1.5925 1.5925 0 ]xsh
70.9654 206.103 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
87.1875 182.17 mo
85.595 185.127 83.32 189.45 81.2725 193.09 cv
@
81.045 192.18 mo
80.59 194.455 li
82.1825 192.635 li
cp
@
81.045 192.18 mo
80.59 194.455 li
82.1825 192.635 li
f
111.757 201.735 mo
111.757 197.463 107.174 194 101.52 194 cv
95.866 194 91.2825 197.463 91.2825 201.735 cv
91.2825 206.007 95.866 209.47 101.52 209.47 cv
107.174 209.47 111.757 206.007 111.757 201.735 cv
@
111.757 201.735 mo
111.757 197.463 107.174 194 101.52 194 cv
95.866 194 91.2825 197.463 91.2825 201.735 cv
91.2825 206.007 95.866 209.47 101.52 209.47 cv
107.174 209.47 111.757 206.007 111.757 201.735 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
96.7457 198.823 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.59251 1.41409 0 ]xsh
94.9605 202.463 mo
(work=112)
[2.29952 1.5925 1.06059 1.5925 1.79633 1.5925 1.5925 0 ]xsh
95.5354 206.103 mo
(I/O: 2->2)
[1.06059 .885429 2.29951 .885429 .796257 1.5925 1.06058 1.79633 0 ]xsh
91.2825 182.17 mo
92.875 185.127 94.695 188.768 96.515 192.407 cv
@
96.06 192.635 mo
97.6525 194.455 li
96.97 192.18 li
cp
@
96.06 192.635 mo
97.6525 194.455 li
96.97 192.18 li
f
106.297 225.395 mo
106.297 223.133 100.695 221.3 93.785 221.3 cv
86.8745 221.3 81.2725 223.133 81.2725 225.395 cv
81.2725 227.657 86.8745 229.49 93.785 229.49 cv
100.695 229.49 106.297 227.657 106.297 225.395 cv
@
106.297 225.395 mo
106.297 223.133 100.695 221.3 93.785 221.3 cv
86.8745 221.3 81.2725 223.133 81.2725 225.395 cv
81.2725 227.657 86.8745 229.49 93.785 229.49 cv
100.695 229.49 106.297 227.657 106.297 225.395 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
83.6568 226.123 mo
(roundrobin\(1,1\))
[1.06058 1.59251 1.5925 1.5925 1.5925 1.06059 1.5925 1.5925 .885429 1.5925 1.06059 1.5925 
.796249 1.5925 0 ]xsh
106.297 249.055 mo
106.297 246.793 100.695 244.96 93.785 244.96 cv
86.8745 244.96 81.2725 246.793 81.2725 249.055 cv
81.2725 251.317 86.8745 253.15 93.785 253.15 cv
100.695 253.15 106.297 251.317 106.297 249.055 cv
@
106.297 249.055 mo
106.297 246.793 100.695 244.96 93.785 244.96 cv
86.8745 244.96 81.2725 246.793 81.2725 249.055 cv
81.2725 251.317 86.8745 253.15 93.785 253.15 cv
100.695 253.15 106.297 251.317 106.297 249.055 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
83.6568 249.783 mo
(roundrobin\(2,2\))
[1.06058 1.59251 1.5925 1.5925 1.5925 1.06059 1.5925 1.5925 .885429 1.5925 1.06059 1.5925 
.796249 1.5925 0 ]xsh
93.785 229.49 mo
93.785 233.13 93.785 238.59 93.785 242.912 cv
@
93.33 242.685 mo
93.785 244.96 li
94.4675 242.685 li
cp
@
93.33 242.685 mo
93.785 244.96 li
94.4675 242.685 li
f
81.7275 208.56 mo
84.23 211.972 87.1875 216.295 89.69 219.707 cv
@
89.0075 219.707 mo
90.8275 221.3 li
89.9175 219.025 li
cp
@
89.0075 219.707 mo
90.8275 221.3 li
89.9175 219.025 li
f
99.0175 209.243 mo
97.88 212.655 96.7425 216.522 95.8325 219.48 cv
@
95.3775 219.025 mo
95.15 221.3 li
96.515 219.48 li
cp
@
95.3775 219.025 mo
95.15 221.3 li
96.515 219.48 li
f
95.3775 272.715 mo
95.3775 268.443 90.9977 264.98 85.595 264.98 cv
80.1923 264.98 75.8125 268.443 75.8125 272.715 cv
75.8125 276.987 80.1923 280.45 85.595 280.45 cv
90.9977 280.45 95.3775 276.987 95.3775 272.715 cv
@
95.3775 272.715 mo
95.3775 268.443 90.9977 264.98 85.595 264.98 cv
80.1923 264.98 75.8125 268.443 75.8125 272.715 cv
75.8125 276.987 80.1923 280.45 85.595 280.45 cv
90.9977 280.45 95.3775 276.987 95.3775 272.715 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
2{/.notdef}rp /eight /.notdef /colon 2{/.notdef}rp /equal /greater 4{/.notdef}rp 
/C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 3{/.notdef}rp 
/T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i /.notdef /k /.notdef /m /n /o 2{/.notdef}rp 
/r /s /t /u /v /w /x /y 
134{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
80.6408 269.803 mo
(Identity)
[1.06059 1.5925 1.41409 1.5925 .885429 .885429 .885429 0 ]xsh
79.8318 273.443 mo
(work=12)
[2.29952 1.5925 1.06059 1.5925 1.79633 1.5925 0 ]xsh
79.6104 277.083 mo
(I/O: 1->1)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
92.42 253.15 mo
91.51 255.88 90.145 259.52 88.78 262.932 cv
@
88.0975 262.932 mo
88.0975 265.207 li
89.235 263.16 li
cp
@
88.0975 262.932 mo
88.0975 265.207 li
89.235 263.16 li
f
119.037 272.715 mo
119.037 268.443 114.658 264.98 109.255 264.98 cv
103.852 264.98 99.4725 268.443 99.4725 272.715 cv
99.4725 276.987 103.852 280.45 109.255 280.45 cv
114.658 280.45 119.037 276.987 119.037 272.715 cv
@
119.037 272.715 mo
119.037 268.443 114.658 264.98 109.255 264.98 cv
103.852 264.98 99.4725 268.443 99.4725 272.715 cv
99.4725 276.987 103.852 280.45 109.255 280.45 cv
114.658 280.45 119.037 276.987 119.037 272.715 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDRU+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7A73DF81BACD811429F931042E1295F1D2320E46DE79DF7
47FCAABFFD92F045A475E54E15C8E93ECB3BD59C8545C0EF45BF22429615FC68
5C033A02F070B2C6D7D737838C1853D297AC8915086E73952A7A9847D6F588AB
17767CC39CB62607242BC1B7BFF5295CEB6C03755CD9B53DA2> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDRU+TimesNewRomanPSMT /Encoding get
dup 54 /six put
dup 108 /l put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDRU+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /five 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 
3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /w /x 
/y 134{/.notdef}rp]
LTFDRU+TimesNewRomanPSMT nf
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
104.215 269.803 mo
(reversal)
[1.06058 1.41409 1.59251 1.41409 1.06059 1.23894 1.41409 0 ]xsh
103.492 273.443 mo
(work=26)
[2.29952 1.5925 1.06059 1.5925 1.79633 1.5925 0 ]xsh
103.271 277.083 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
96.515 253.15 mo
98.335 256.107 101.065 260.202 103.34 263.843 cv
@
102.885 264.297 mo
104.705 265.89 li
104.022 263.615 li
cp
@
102.885 264.297 mo
104.705 265.89 li
104.022 263.615 li
f
119.038 296.375 mo
119.038 294.113 113.435 292.28 106.525 292.28 cv
99.6146 292.28 94.0125 294.113 94.0125 296.375 cv
94.0125 298.637 99.6146 300.47 106.525 300.47 cv
113.435 300.47 119.038 298.637 119.038 296.375 cv
@
119.038 296.375 mo
119.038 294.113 113.435 292.28 106.525 292.28 cv
99.6146 292.28 94.0125 294.113 94.0125 296.375 cv
94.0125 298.637 99.6146 300.47 106.525 300.47 cv
113.435 300.47 119.038 298.637 119.038 296.375 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
96.3968 297.103 mo
(roundrobin\(2,2\))
[1.06059 1.5925 1.5925 1.5925 1.5925 1.06059 1.5925 1.5925 .885429 1.5925 1.06059 1.5925 
.796249 1.5925 0 ]xsh
108.8 300.47 mo
112.44 307.068 120.175 320.718 125.18 327.77 cv
126.545 329.818 129.047 332.32 131.55 334.595 cv
@
131.095 335.05 mo
133.142 336.188 li
132.005 334.14 li
cp
@
131.095 335.05 mo
133.142 336.188 li
132.005 334.14 li
f
91.2825 279.085 mo
94.4675 282.952 98.5625 287.502 101.747 291.143 cv
@
101.065 291.37 mo
103.112 292.507 li
101.975 290.46 li
cp
@
101.065 291.37 mo
103.112 292.507 li
101.975 290.46 li
f
108.345 280.45 mo
107.89 283.635 107.662 287.047 107.207 290.232 cv
@
106.752 290.005 mo
106.98 292.28 li
107.89 290.005 li
cp
@
106.752 290.005 mo
106.98 292.28 li
107.89 290.005 li
f
169.77 106.185 mo
169.77 103.923 164.168 102.09 157.257 102.09 cv
150.347 102.09 144.745 103.923 144.745 106.185 cv
144.745 108.447 150.347 110.28 157.257 110.28 cv
164.168 110.28 169.77 108.447 169.77 106.185 cv
@
169.77 106.185 mo
169.77 103.923 164.168 102.09 157.257 102.09 cv
150.347 102.09 144.745 103.923 144.745 106.185 cv
144.745 108.447 150.347 110.28 157.257 110.28 cv
164.168 110.28 169.77 108.447 169.77 106.185 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
147.129 106.913 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 0 ]xsh
157.257 89.35 mo
157.257 92.9899 157.257 96.8569 157.257 100.042 cv
@
156.802 99.8149 mo
157.257 102.09 li
157.94 99.8149 li
cp
@
156.802 99.8149 mo
157.257 102.09 li
157.94 99.8149 li
f
156.347 129.845 mo
156.347 125.573 150.134 122.11 142.47 122.11 cv
134.806 122.11 128.593 125.573 128.593 129.845 cv
128.593 134.117 134.806 137.58 142.47 137.58 cv
150.134 137.58 156.347 134.117 156.347 129.845 cv
@
156.347 129.845 mo
156.347 125.573 150.134 122.11 142.47 122.11 cv
134.806 122.11 128.593 125.573 128.593 129.845 cv
128.593 134.117 134.806 137.58 142.47 137.58 cv
150.134 137.58 156.347 134.117 156.347 129.845 cv
.992 .863 .565 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
132.472 126.933 mo
(TwoPointIDCT)
[1.94601 2.29951 1.5925 1.77086 1.5925 .885437 1.5925 .885422 1.06059 2.29951 2.12437 0 
]xsh
136.706 130.573 mo
(work=80)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
136.485 134.213 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
154.755 110.28 mo
152.935 113.01 150.432 116.877 148.157 120.517 cv
@
147.702 120.062 mo
147.02 122.338 li
148.612 120.745 li
cp
@
147.702 120.062 mo
147.02 122.338 li
148.612 120.745 li
f
181.827 129.845 mo
181.827 125.573 177.448 122.11 172.045 122.11 cv
166.642 122.11 162.262 125.573 162.262 129.845 cv
162.262 134.117 166.642 137.58 172.045 137.58 cv
177.448 137.58 181.827 134.117 181.827 129.845 cv
@
181.827 129.845 mo
181.827 125.573 177.448 122.11 172.045 122.11 cv
166.642 122.11 162.262 125.573 162.262 129.845 cv
162.262 134.117 166.642 137.58 172.045 137.58 cv
177.448 137.58 181.827 134.117 181.827 129.845 cv
.455 .686 .812 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
168.328 126.933 mo
(inmix)
[.885437 1.5925 2.47792 .885437 0 ]xsh
166.282 130.573 mo
(work=25)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
166.06 134.213 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
159.76 110.28 mo
161.58 113.238 164.31 117.105 166.585 120.745 cv
@
166.13 120.972 mo
167.722 122.792 li
167.04 120.517 li
cp
@
166.13 120.972 mo
167.722 122.792 li
167.04 120.517 li
f
168.86 178.075 mo
168.86 175.813 163.258 173.98 156.347 173.98 cv
149.437 173.98 143.835 175.813 143.835 178.075 cv
143.835 180.337 149.437 182.17 156.347 182.17 cv
163.258 182.17 168.86 180.337 168.86 178.075 cv
@
168.86 178.075 mo
168.86 175.813 163.258 173.98 156.347 173.98 cv
149.437 173.98 143.835 175.813 143.835 178.075 cv
143.835 180.337 149.437 182.17 156.347 182.17 cv
163.258 182.17 168.86 180.337 168.86 178.075 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
146.219 178.803 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 0 ]xsh
168.86 201.735 mo
168.86 199.473 163.258 197.64 156.347 197.64 cv
149.437 197.64 143.835 199.473 143.835 201.735 cv
143.835 203.997 149.437 205.83 156.347 205.83 cv
163.258 205.83 168.86 203.997 168.86 201.735 cv
@
168.86 201.735 mo
168.86 199.473 163.258 197.64 156.347 197.64 cv
149.437 197.64 143.835 199.473 143.835 201.735 cv
143.835 203.997 149.437 205.83 156.347 205.83 cv
163.258 205.83 168.86 203.997 168.86 201.735 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
146.219 202.463 mo
(roundrobin\(2,2\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 0 ]xsh
156.347 182.17 mo
156.347 185.81 156.347 191.27 156.347 195.593 cv
@
155.893 195.365 mo
156.347 197.64 li
157.03 195.365 li
cp
@
155.893 195.365 mo
156.347 197.64 li
157.03 195.365 li
f
144.745 137.58 mo
147.475 147.135 152.252 163.515 154.755 172.16 cv
@
154.072 171.932 mo
155.21 173.98 li
155.21 171.705 li
cp
@
154.072 171.932 mo
155.21 173.98 li
155.21 171.705 li
f
187.97 154.415 mo
187.97 150.143 181.757 146.68 174.093 146.68 cv
166.428 146.68 160.215 150.143 160.215 154.415 cv
160.215 158.687 166.428 162.15 174.093 162.15 cv
181.757 162.15 187.97 158.687 187.97 154.415 cv
@
187.97 154.415 mo
187.97 150.143 181.757 146.68 174.093 146.68 cv
166.428 146.68 160.215 150.143 160.215 154.415 cv
160.215 158.687 166.428 162.15 174.093 162.15 cv
181.757 162.15 187.97 158.687 187.97 154.415 cv
.992 .863 .565 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
164.095 151.503 mo
(TwoPointIDCT)
[1.94601 2.29951 1.5925 1.77086 1.5925 .885437 1.5925 .885437 1.06058 2.29951 2.12437 0 
]xsh
168.329 155.143 mo
(work=80)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
168.108 158.783 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
172.727 137.58 mo
172.955 139.855 173.182 142.13 173.182 144.405 cv
@
172.727 144.405 mo
173.41 146.68 li
173.638 144.405 li
cp
@
172.727 144.405 mo
173.41 146.68 li
173.638 144.405 li
f
168.632 161.467 mo
165.902 164.88 162.945 169.202 160.443 172.388 cv
@
160.215 171.705 mo
159.305 173.98 li
161.125 172.388 li
cp
@
160.215 171.705 mo
159.305 173.98 li
161.125 172.388 li
f
156.575 225.395 mo
156.575 221.123 151.992 217.66 146.338 217.66 cv
140.683 217.66 136.1 221.123 136.1 225.395 cv
136.1 229.667 140.683 233.13 146.338 233.13 cv
151.992 233.13 156.575 229.667 156.575 225.395 cv
@
156.575 225.395 mo
156.575 221.123 151.992 217.66 146.338 217.66 cv
140.683 217.66 136.1 221.123 136.1 225.395 cv
136.1 229.667 140.683 233.13 146.338 233.13 cv
151.992 233.13 156.575 229.667 156.575 225.395 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
141.563 222.483 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
139.778 226.123 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
140.353 229.763 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
154.527 205.83 mo
153.39 208.56 151.797 212.427 150.432 215.84 cv
@
149.977 215.612 mo
149.522 217.888 li
150.888 216.068 li
cp
@
149.977 215.612 mo
149.522 217.888 li
150.888 216.068 li
f
181.145 225.395 mo
181.145 221.123 176.561 217.66 170.907 217.66 cv
165.253 217.66 160.67 221.123 160.67 225.395 cv
160.67 229.667 165.253 233.13 170.907 233.13 cv
176.561 233.13 181.145 229.667 181.145 225.395 cv
@
181.145 225.395 mo
181.145 221.123 176.561 217.66 170.907 217.66 cv
165.253 217.66 160.67 221.123 160.67 225.395 cv
160.67 229.667 165.253 233.13 170.907 233.13 cv
176.561 233.13 181.145 229.667 181.145 225.395 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
166.133 222.483 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
164.348 226.123 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
164.923 229.763 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
158.85 205.83 mo
160.67 208.788 163.172 212.655 165.447 216.295 cv
@
164.993 216.522 mo
166.585 218.343 li
165.902 216.068 li
cp
@
164.993 216.522 mo
166.585 218.343 li
165.902 216.068 li
f
161.125 249.055 mo
161.125 246.793 155.523 244.96 148.612 244.96 cv
141.702 244.96 136.1 246.793 136.1 249.055 cv
136.1 251.317 141.702 253.15 148.612 253.15 cv
155.523 253.15 161.125 251.317 161.125 249.055 cv
@
161.125 249.055 mo
161.125 246.793 155.523 244.96 148.612 244.96 cv
141.702 244.96 136.1 246.793 136.1 249.055 cv
136.1 251.317 141.702 253.15 148.612 253.15 cv
155.523 253.15 161.125 251.317 161.125 249.055 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
138.484 249.783 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
161.125 272.715 mo
161.125 270.453 155.523 268.62 148.612 268.62 cv
141.702 268.62 136.1 270.453 136.1 272.715 cv
136.1 274.977 141.702 276.81 148.612 276.81 cv
155.523 276.81 161.125 274.977 161.125 272.715 cv
@
161.125 272.715 mo
161.125 270.453 155.523 268.62 148.612 268.62 cv
141.702 268.62 136.1 270.453 136.1 272.715 cv
136.1 274.977 141.702 276.81 148.612 276.81 cv
155.523 276.81 161.125 274.977 161.125 272.715 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
138.484 273.443 mo
(roundrobin\(2,2\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
148.612 253.15 mo
148.612 256.79 148.612 262.25 148.612 266.572 cv
@
148.157 266.345 mo
148.612 268.62 li
149.295 266.345 li
cp
@
148.157 266.345 mo
148.612 268.62 li
149.295 266.345 li
f
147.02 233.13 mo
147.475 236.315 147.702 239.727 147.93 242.912 cv
@
147.247 242.685 mo
148.157 244.96 li
148.385 242.685 li
cp
@
147.247 242.685 mo
148.157 244.96 li
148.385 242.685 li
f
164.993 231.765 mo
161.352 235.632 157.03 240.182 153.845 243.822 cv
@
153.618 243.14 mo
152.48 245.188 li
154.527 244.05 li
cp
@
153.618 243.14 mo
152.48 245.188 li
154.527 244.05 li
f
148.157 296.375 mo
148.157 292.103 143.778 288.64 138.375 288.64 cv
132.972 288.64 128.593 292.103 128.593 296.375 cv
128.593 300.647 132.972 304.11 138.375 304.11 cv
143.778 304.11 148.157 300.647 148.157 296.375 cv
@
148.157 296.375 mo
148.157 292.103 143.778 288.64 138.375 288.64 cv
132.972 288.64 128.593 292.103 128.593 296.375 cv
128.593 300.647 132.972 304.11 138.375 304.11 cv
143.778 304.11 148.157 300.647 148.157 296.375 cv
.271 .467 .702 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
133.421 293.463 mo
(Identity)
[1.06058 1.5925 1.41409 1.5925 .885437 .885422 .885437 0 ]xsh
132.612 297.103 mo
(work=12)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
132.391 300.743 mo
(I/O: 1->1)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
146.792 276.81 mo
145.655 279.768 143.835 283.862 142.242 287.502 cv
@
142.015 286.593 mo
141.56 288.868 li
143.152 287.047 li
cp
@
142.015 286.593 mo
141.56 288.868 li
143.152 287.047 li
f
171.817 296.375 mo
171.817 292.103 167.438 288.64 162.035 288.64 cv
156.632 288.64 152.252 292.103 152.252 296.375 cv
152.252 300.647 156.632 304.11 162.035 304.11 cv
167.438 304.11 171.817 300.647 171.817 296.375 cv
@
171.817 296.375 mo
171.817 292.103 167.438 288.64 162.035 288.64 cv
156.632 288.64 152.252 292.103 152.252 296.375 cv
152.252 300.647 156.632 304.11 162.035 304.11 cv
167.438 304.11 171.817 300.647 171.817 296.375 cv
.455 .686 .812 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
156.995 293.463 mo
(reversal)
[1.06058 1.41409 1.5925 1.41409 1.06058 1.23895 1.41409 0 ]xsh
156.272 297.103 mo
(work=26)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
156.051 300.743 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
150.888 276.81 mo
152.707 279.768 154.755 283.635 156.802 287.275 cv
@
156.347 287.502 mo
157.94 289.322 li
157.257 287.047 li
cp
@
156.347 287.502 mo
157.94 289.322 li
157.257 287.047 li
f
153.617 320.035 mo
153.617 317.773 148.015 315.94 141.105 315.94 cv
134.195 315.94 128.592 317.773 128.592 320.035 cv
128.592 322.297 134.195 324.13 141.105 324.13 cv
148.015 324.13 153.617 322.297 153.617 320.035 cv
@
153.617 320.035 mo
153.617 317.773 148.015 315.94 141.105 315.94 cv
134.195 315.94 128.592 317.773 128.592 320.035 cv
128.592 322.297 134.195 324.13 141.105 324.13 cv
148.015 324.13 153.617 322.297 153.617 320.035 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
130.977 320.763 mo
(roundrobin\(2,2\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
140.422 324.13 mo
139.967 326.86 139.057 330.727 138.602 333.912 cv
@
138.147 333.685 mo
138.147 335.96 li
139.285 333.912 li
cp
@
138.147 333.685 mo
138.147 335.96 li
139.285 333.912 li
f
139.285 304.11 mo
139.74 307.295 139.967 310.707 140.422 313.893 cv
@
139.74 313.665 mo
140.65 315.94 li
140.877 313.665 li
cp
@
139.74 313.665 mo
140.65 315.94 li
140.877 313.665 li
f
156.347 302.745 mo
153.162 306.612 149.067 311.162 145.882 314.802 cv
@
145.655 314.12 mo
144.517 316.168 li
146.565 315.03 li
cp
@
145.655 314.12 mo
144.517 316.168 li
146.565 315.03 li
f
119.72 379.185 mo
119.72 374.913 115.136 371.45 109.482 371.45 cv
103.828 371.45 99.245 374.913 99.245 379.185 cv
99.245 383.457 103.828 386.92 109.482 386.92 cv
115.136 386.92 119.72 383.457 119.72 379.185 cv
@
119.72 379.185 mo
119.72 374.913 115.136 371.45 109.482 371.45 cv
103.828 371.45 99.245 374.913 99.245 379.185 cv
99.245 383.457 103.828 386.92 109.482 386.92 cv
115.136 386.92 119.72 383.457 119.72 379.185 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
104.708 376.273 mo
(recover)
[1.06059 1.41409 1.41409 1.5925 1.59251 1.41409 0 ]xsh
102.923 379.913 mo
(work=112)
[2.29952 1.5925 1.06059 1.5925 1.79633 1.5925 1.5925 0 ]xsh
103.498 383.553 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
131.55 363.032 mo
128.138 365.08 123.815 367.81 121.085 369.63 cv
119.947 370.312 118.81 371.223 117.672 372.36 cv
@
117.672 371.677 mo
116.307 373.498 li
118.355 372.588 li
cp
@
117.672 371.677 mo
116.307 373.498 li
118.355 372.588 li
f
144.29 379.185 mo
144.29 374.913 139.706 371.45 134.052 371.45 cv
128.398 371.45 123.815 374.913 123.815 379.185 cv
123.815 383.457 128.398 386.92 134.052 386.92 cv
139.706 386.92 144.29 383.457 144.29 379.185 cv
@
144.29 379.185 mo
144.29 374.913 139.706 371.45 134.052 371.45 cv
128.398 371.45 123.815 374.913 123.815 379.185 cv
123.815 383.457 128.398 386.92 134.052 386.92 cv
139.706 386.92 144.29 383.457 144.29 379.185 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
129.278 376.273 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
127.493 379.913 mo
(work=112)
[2.29952 1.5925 1.06058 1.5925 1.79633 1.5925 1.59251 0 ]xsh
128.068 383.553 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
136.782 363.26 mo
136.327 365.08 136.1 367.582 135.645 369.857 cv
@
135.19 369.175 mo
135.417 371.45 li
136.327 369.175 li
cp
@
135.19 369.175 mo
135.417 371.45 li
136.327 369.175 li
f
168.86 379.185 mo
168.86 374.913 164.276 371.45 158.622 371.45 cv
152.968 371.45 148.385 374.913 148.385 379.185 cv
148.385 383.457 152.968 386.92 158.622 386.92 cv
164.276 386.92 168.86 383.457 168.86 379.185 cv
@
168.86 379.185 mo
168.86 374.913 164.276 371.45 158.622 371.45 cv
152.968 371.45 148.385 374.913 148.385 379.185 cv
148.385 383.457 152.968 386.92 158.622 386.92 cv
164.276 386.92 168.86 383.457 168.86 379.185 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
153.848 376.273 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
152.063 379.913 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
152.638 383.553 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
141.56 363.032 mo
144.062 365.535 147.475 368.72 150.432 371.45 cv
@
150.205 371.905 mo
152.252 373.043 li
150.888 371.223 li
cp
@
150.205 371.905 mo
152.252 373.043 li
150.888 371.223 li
f
193.43 379.185 mo
193.43 374.913 188.847 371.45 183.193 371.45 cv
177.539 371.45 172.955 374.913 172.955 379.185 cv
172.955 383.457 177.539 386.92 183.193 386.92 cv
188.847 386.92 193.43 383.457 193.43 379.185 cv
@
193.43 379.185 mo
193.43 374.913 188.847 371.45 183.193 371.45 cv
177.539 371.45 172.955 374.913 172.955 379.185 cv
172.955 383.457 177.539 386.92 183.193 386.92 cv
188.847 386.92 193.43 383.457 193.43 379.185 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
178.418 376.273 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
176.633 379.913 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
177.208 383.553 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
148.157 362.123 mo
155.665 364.17 165.675 367.127 171.59 369.63 cv
172.5 370.085 173.638 370.768 174.775 371.677 cv
@
174.547 372.36 mo
176.822 373.043 li
175.23 371.223 li
cp
@
174.547 372.36 mo
176.822 373.043 li
175.23 371.223 li
f
173.41 402.845 mo
173.41 400.583 166.789 398.75 158.622 398.75 cv
150.456 398.75 143.835 400.583 143.835 402.845 cv
143.835 405.107 150.456 406.94 158.622 406.94 cv
166.789 406.94 173.41 405.107 173.41 402.845 cv
@
173.41 402.845 mo
173.41 400.583 166.789 398.75 158.622 398.75 cv
150.456 398.75 143.835 400.583 143.835 402.845 cv
143.835 405.107 150.456 406.94 158.622 406.94 cv
166.789 406.94 173.41 405.107 173.41 402.845 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
146.106 403.573 mo
(roundrobin\(1,1,1,1\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 .796249 1.5925 .796249 1.5925 0 ]xsh
173.182 422.865 mo
173.182 420.603 167.58 418.77 160.67 418.77 cv
153.76 418.77 148.157 420.603 148.157 422.865 cv
148.157 425.127 153.76 426.96 160.67 426.96 cv
167.58 426.96 173.182 425.127 173.182 422.865 cv
@
173.182 422.865 mo
173.182 420.603 167.58 418.77 160.67 418.77 cv
153.76 418.77 148.157 420.603 148.157 422.865 cv
148.157 425.127 153.76 426.96 160.67 426.96 cv
167.58 426.96 173.182 425.127 173.182 422.865 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
150.542 423.593 mo
(roundrobin\(4,4\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
159.077 406.94 mo
159.532 409.67 159.76 413.538 159.988 416.723 cv
@
159.305 416.495 mo
160.215 418.77 li
160.443 416.495 li
cp
@
159.305 416.495 mo
160.215 418.77 li
160.443 416.495 li
f
116.99 384.645 mo
118.355 385.555 119.947 386.465 121.085 386.92 cv
128.365 390.332 140.195 395.338 148.385 398.75 cv
@
147.93 399.205 mo
150.205 399.432 li
148.385 398.068 li
cp
@
147.93 399.205 mo
150.205 399.432 li
148.385 398.068 li
f
140.422 385.327 mo
144.29 389.195 149.295 393.973 153.162 397.612 cv
@
152.48 397.84 mo
154.527 398.977 li
153.39 396.93 li
cp
@
152.48 397.84 mo
154.527 398.977 li
153.39 396.93 li
f
158.622 386.92 mo
158.622 390.105 158.622 393.518 158.622 396.702 cv
@
158.168 396.475 mo
158.622 398.75 li
159.305 396.475 li
cp
@
158.168 396.475 mo
158.622 398.75 li
159.305 396.475 li
f
176.822 385.327 mo
172.727 389.195 167.95 393.973 164.082 397.612 cv
@
163.855 396.93 mo
162.718 398.977 li
164.765 397.84 li
cp
@
163.855 396.93 mo
162.718 398.977 li
164.765 397.84 li
f
167.722 442.885 mo
167.722 438.613 163.343 435.15 157.94 435.15 cv
152.537 435.15 148.157 438.613 148.157 442.885 cv
148.157 447.157 152.537 450.62 157.94 450.62 cv
163.343 450.62 167.722 447.157 167.722 442.885 cv
@
167.722 442.885 mo
167.722 438.613 163.343 435.15 157.94 435.15 cv
152.537 435.15 148.157 438.613 148.157 442.885 cv
148.157 447.157 152.537 450.62 157.94 450.62 cv
163.343 450.62 167.722 447.157 167.722 442.885 cv
.455 .686 .812 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
152.986 439.973 mo
(Identity)
[1.06058 1.5925 1.41409 1.5925 .885437 .885422 .885437 0 ]xsh
152.177 443.613 mo
(work=24)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
151.956 447.253 mo
(I/O: 1->1)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
160.215 426.96 mo
159.76 428.78 159.532 431.282 159.305 433.557 cv
@
158.85 432.875 mo
159.077 435.15 li
159.988 432.875 li
cp
@
158.85 432.875 mo
159.077 435.15 li
159.988 432.875 li
f
191.382 442.885 mo
191.382 438.613 187.003 435.15 181.6 435.15 cv
176.197 435.15 171.818 438.613 171.818 442.885 cv
171.818 447.157 176.197 450.62 181.6 450.62 cv
187.003 450.62 191.382 447.157 191.382 442.885 cv
@
191.382 442.885 mo
191.382 438.613 187.003 435.15 181.6 435.15 cv
176.197 435.15 171.818 438.613 171.818 442.885 cv
171.818 447.157 176.197 450.62 181.6 450.62 cv
187.003 450.62 191.382 447.157 191.382 442.885 cv
.882 .953 .973 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
176.56 439.973 mo
(reversal)
[1.06058 1.41409 1.5925 1.41409 1.06058 1.23895 1.41409 0 ]xsh
175.837 443.613 mo
(work=52)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
175.616 447.253 mo
(I/O: 4->4)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
164.765 426.732 mo
167.268 429.235 170.68 432.42 173.638 435.378 cv
@
173.182 435.832 mo
175.23 436.97 li
174.093 434.923 li
cp
@
173.182 435.832 mo
175.23 436.97 li
174.093 434.923 li
f
191.382 466.545 mo
191.382 464.283 185.78 462.45 178.87 462.45 cv
171.96 462.45 166.357 464.283 166.357 466.545 cv
166.357 468.807 171.96 470.64 178.87 470.64 cv
185.78 470.64 191.382 468.807 191.382 466.545 cv
@
191.382 466.545 mo
191.382 464.283 185.78 462.45 178.87 462.45 cv
171.96 462.45 166.357 464.283 166.357 466.545 cv
166.357 468.807 171.96 470.64 178.87 470.64 cv
185.78 470.64 191.382 468.807 191.382 466.545 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
168.742 467.273 mo
(roundrobin\(4,4\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 0 ]xsh
182.055 470.64 mo
187.06 477.01 197.297 489.978 202.985 497.257 cv
@
202.302 497.257 mo
204.122 498.85 li
203.212 496.575 li
cp
@
202.302 497.257 mo
204.122 498.85 li
203.212 496.575 li
f
163.627 449.255 mo
166.812 453.123 170.907 457.673 174.093 461.312 cv
@
173.41 461.54 mo
175.457 462.678 li
174.32 460.63 li
cp
@
173.41 461.54 mo
175.457 462.678 li
174.32 460.63 li
f
180.69 450.62 mo
180.235 453.805 180.007 457.218 179.552 460.403 cv
@
179.097 460.175 mo
179.325 462.45 li
180.235 460.175 li
cp
@
179.097 460.175 mo
179.325 462.45 li
180.235 460.175 li
f
247.802 81.6149 mo
247.802 79.353 242.2 77.52 235.29 77.52 cv
228.38 77.52 222.777 79.353 222.777 81.6149 cv
222.777 83.877 228.38 85.71 235.29 85.71 cv
242.2 85.71 247.802 83.877 247.802 81.6149 cv
@
247.802 81.6149 mo
247.802 79.353 242.2 77.52 235.29 77.52 cv
228.38 77.52 222.777 79.353 222.777 81.6149 cv
222.777 83.877 228.38 85.71 235.29 85.71 cv
242.2 85.71 247.802 83.877 247.802 81.6149 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
225.162 82.3429 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
226.872 64.325 mo
228.693 67.965 230.74 72.288 232.332 75.7 cv
@
231.65 75.7 mo
233.243 77.52 li
232.788 75.245 li
cp
@
231.65 75.7 mo
233.243 77.52 li
232.788 75.245 li
f
247.802 106.185 mo
247.802 103.923 242.2 102.09 235.29 102.09 cv
228.38 102.09 222.777 103.923 222.777 106.185 cv
222.777 108.447 228.38 110.28 235.29 110.28 cv
242.2 110.28 247.802 108.447 247.802 106.185 cv
@
247.802 106.185 mo
247.802 103.923 242.2 102.09 235.29 102.09 cv
228.38 102.09 222.777 103.923 222.777 106.185 cv
222.777 108.447 228.38 110.28 235.29 110.28 cv
242.2 110.28 247.802 108.447 247.802 106.185 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
225.162 106.913 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
235.29 85.71 mo
235.29 89.577 235.29 95.4919 235.29 100.042 cv
@
234.835 99.8149 mo
235.29 102.09 li
235.972 99.8149 li
cp
@
234.835 99.8149 mo
235.29 102.09 li
235.972 99.8149 li
f
298.08 106.185 mo
298.08 101.913 293.7 98.45 288.298 98.45 cv
282.895 98.45 278.515 101.913 278.515 106.185 cv
278.515 110.457 282.895 113.92 288.298 113.92 cv
293.7 113.92 298.08 110.457 298.08 106.185 cv
@
298.08 106.185 mo
298.08 101.913 293.7 98.45 288.298 98.45 cv
282.895 98.45 278.515 101.913 278.515 106.185 cv
278.515 110.457 282.895 113.92 288.298 113.92 cv
293.7 113.92 298.08 110.457 298.08 106.185 cv
.882 .953 .973 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
284.581 103.273 mo
(inmix)
[.885437 1.5925 2.47794 .885406 0 ]xsh
282.535 106.913 mo
(work=55)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 0 ]xsh
282.313 110.553 mo
(I/O: 4->4)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
246.21 83.662 mo
254.855 85.2549 266.457 87.985 273.055 91.17 cv
275.785 92.535 278.515 95.265 281.245 97.995 cv
@
280.79 98.45 mo
282.838 99.588 li
281.7 97.54 li
cp
@
280.79 98.45 mo
282.838 99.588 li
281.7 97.54 li
f
273.055 359.165 mo
273.055 356.903 267.453 355.07 260.543 355.07 cv
253.632 355.07 248.03 356.903 248.03 359.165 cv
248.03 361.427 253.632 363.26 260.543 363.26 cv
267.453 363.26 273.055 361.427 273.055 359.165 cv
@
273.055 359.165 mo
273.055 356.903 267.453 355.07 260.543 355.07 cv
253.632 355.07 248.03 356.903 248.03 359.165 cv
248.03 361.427 253.632 363.26 260.543 363.26 cv
267.453 363.26 273.055 361.427 273.055 359.165 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
250.414 359.893 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.5925 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796265 1.5925 0 ]xsh
275.33 379.185 mo
275.33 376.923 268.709 375.09 260.543 375.09 cv
252.376 375.09 245.755 376.923 245.755 379.185 cv
245.755 381.447 252.376 383.28 260.543 383.28 cv
268.709 383.28 275.33 381.447 275.33 379.185 cv
@
275.33 379.185 mo
275.33 376.923 268.709 375.09 260.543 375.09 cv
252.376 375.09 245.755 376.923 245.755 379.185 cv
245.755 381.447 252.376 383.28 260.543 383.28 cv
268.709 383.28 275.33 381.447 275.33 379.185 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
248.026 379.913 mo
(roundrobin\(2,2,2,2\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06056 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796265 1.5925 .796265 1.5925 .796234 1.5925 0 ]xsh
260.543 363.26 mo
260.543 365.99 260.543 369.857 260.543 373.043 cv
@
260.088 372.815 mo
260.543 375.09 li
261.225 372.815 li
cp
@
260.088 372.815 mo
260.543 375.09 li
261.225 372.815 li
f
234.38 129.845 mo
234.38 125.573 228.167 122.11 220.502 122.11 cv
212.838 122.11 206.625 125.573 206.625 129.845 cv
206.625 134.117 212.838 137.58 220.502 137.58 cv
228.167 137.58 234.38 134.117 234.38 129.845 cv
@
234.38 129.845 mo
234.38 125.573 228.167 122.11 220.502 122.11 cv
212.838 122.11 206.625 125.573 206.625 129.845 cv
206.625 134.117 212.838 137.58 220.502 137.58 cv
228.167 137.58 234.38 134.117 234.38 129.845 cv
.992 .863 .565 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
210.505 126.933 mo
(TwoPointIDCT)
[1.94601 2.29951 1.5925 1.77086 1.5925 .885437 1.5925 .885437 1.06058 2.29951 2.12437 0 
]xsh
214.739 130.573 mo
(work=80)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
214.518 134.213 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
232.788 110.28 mo
230.968 113.01 228.465 116.877 226.19 120.517 cv
@
225.735 120.062 mo
225.052 122.338 li
226.645 120.745 li
cp
@
225.735 120.062 mo
225.052 122.338 li
226.645 120.745 li
f
259.86 129.845 mo
259.86 125.573 255.48 122.11 250.077 122.11 cv
244.675 122.11 240.295 125.573 240.295 129.845 cv
240.295 134.117 244.675 137.58 250.077 137.58 cv
255.48 137.58 259.86 134.117 259.86 129.845 cv
@
259.86 129.845 mo
259.86 125.573 255.48 122.11 250.077 122.11 cv
244.675 122.11 240.295 125.573 240.295 129.845 cv
240.295 134.117 244.675 137.58 250.077 137.58 cv
255.48 137.58 259.86 134.117 259.86 129.845 cv
.455 .686 .812 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
246.361 126.933 mo
(inmix)
[.885437 1.5925 2.47792 .885437 0 ]xsh
244.315 130.573 mo
(work=25)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
244.093 134.213 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
237.793 110.28 mo
239.612 113.238 242.343 117.105 244.618 120.745 cv
@
244.162 120.972 mo
245.755 122.792 li
245.072 120.517 li
cp
@
244.162 120.972 mo
245.755 122.792 li
245.072 120.517 li
f
250.532 178.075 mo
250.532 175.813 244.93 173.98 238.02 173.98 cv
231.11 173.98 225.507 175.813 225.507 178.075 cv
225.507 180.337 231.11 182.17 238.02 182.17 cv
244.93 182.17 250.532 180.337 250.532 178.075 cv
@
250.532 178.075 mo
250.532 175.813 244.93 173.98 238.02 173.98 cv
231.11 173.98 225.507 175.813 225.507 178.075 cv
225.507 180.337 231.11 182.17 238.02 182.17 cv
244.93 182.17 250.532 180.337 250.532 178.075 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
227.892 178.803 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 0 ]xsh
250.532 201.735 mo
250.532 199.473 244.93 197.64 238.02 197.64 cv
231.11 197.64 225.507 199.473 225.507 201.735 cv
225.507 203.997 231.11 205.83 238.02 205.83 cv
244.93 205.83 250.532 203.997 250.532 201.735 cv
@
250.532 201.735 mo
250.532 199.473 244.93 197.64 238.02 197.64 cv
231.11 197.64 225.507 199.473 225.507 201.735 cv
225.507 203.997 231.11 205.83 238.02 205.83 cv
244.93 205.83 250.532 203.997 250.532 201.735 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
227.892 202.463 mo
(roundrobin\(2,2\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 0 ]xsh
238.02 182.17 mo
238.02 185.81 238.02 191.27 238.02 195.593 cv
@
237.565 195.365 mo
238.02 197.64 li
238.702 195.365 li
cp
@
237.565 195.365 mo
238.02 197.64 li
238.702 195.365 li
f
223.232 137.58 mo
226.872 147.135 232.788 163.515 235.745 172.16 cv
@
235.062 172.16 mo
236.427 173.98 li
236.2 171.705 li
cp
@
235.062 172.16 mo
236.427 173.98 li
236.2 171.705 li
f
266.002 154.415 mo
266.002 150.143 259.789 146.68 252.125 146.68 cv
244.461 146.68 238.248 150.143 238.248 154.415 cv
238.248 158.687 244.461 162.15 252.125 162.15 cv
259.789 162.15 266.002 158.687 266.002 154.415 cv
@
266.002 154.415 mo
266.002 150.143 259.789 146.68 252.125 146.68 cv
244.461 146.68 238.248 150.143 238.248 154.415 cv
238.248 158.687 244.461 162.15 252.125 162.15 cv
259.789 162.15 266.002 158.687 266.002 154.415 cv
.992 .863 .565 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
242.127 151.503 mo
(TwoPointIDCT)
[1.94601 2.29951 1.5925 1.77086 1.5925 .885437 1.5925 .885422 1.06059 2.29951 2.12436 0 
]xsh
246.361 155.143 mo
(work=80)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
246.14 158.783 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79634 0 ]xsh
250.76 137.58 mo
250.988 139.855 251.215 142.13 251.215 144.405 cv
@
250.76 144.405 mo
251.443 146.68 li
251.67 144.405 li
cp
@
250.76 144.405 mo
251.443 146.68 li
251.67 144.405 li
f
247.802 161.695 mo
245.982 165.107 243.48 168.975 241.66 172.16 cv
@
241.205 171.705 mo
240.522 173.98 li
242.115 172.388 li
cp
@
241.205 171.705 mo
240.522 173.98 li
242.115 172.388 li
f
235.972 225.395 mo
235.972 221.123 231.389 217.66 225.735 217.66 cv
220.081 217.66 215.497 221.123 215.497 225.395 cv
215.497 229.667 220.081 233.13 225.735 233.13 cv
231.389 233.13 235.972 229.667 235.972 225.395 cv
@
235.972 225.395 mo
235.972 221.123 231.389 217.66 225.735 217.66 cv
220.081 217.66 215.497 221.123 215.497 225.395 cv
215.497 229.667 220.081 233.13 225.735 233.13 cv
231.389 233.13 235.972 229.667 235.972 225.395 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
220.961 222.483 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
219.176 226.123 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
219.751 229.763 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
235.972 205.83 mo
234.38 208.788 232.105 213.11 230.057 216.75 cv
@
229.83 215.84 mo
229.375 218.115 li
230.968 216.295 li
cp
@
229.83 215.84 mo
229.375 218.115 li
230.968 216.295 li
f
260.543 225.395 mo
260.543 221.123 255.959 217.66 250.305 217.66 cv
244.651 217.66 240.068 221.123 240.068 225.395 cv
240.068 229.667 244.651 233.13 250.305 233.13 cv
255.959 233.13 260.543 229.667 260.543 225.395 cv
@
260.543 225.395 mo
260.543 221.123 255.959 217.66 250.305 217.66 cv
244.651 217.66 240.068 221.123 240.068 225.395 cv
240.068 229.667 244.651 233.13 250.305 233.13 cv
255.959 233.13 260.543 229.667 260.543 225.395 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
245.531 222.483 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
243.746 226.123 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
244.321 229.763 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
240.068 205.83 mo
241.66 208.788 243.48 212.427 245.3 216.068 cv
@
244.845 216.295 mo
246.438 218.115 li
245.755 215.84 li
cp
@
244.845 216.295 mo
246.438 218.115 li
245.755 215.84 li
f
255.082 249.055 mo
255.082 246.793 249.48 244.96 242.57 244.96 cv
235.66 244.96 230.057 246.793 230.057 249.055 cv
230.057 251.317 235.66 253.15 242.57 253.15 cv
249.48 253.15 255.082 251.317 255.082 249.055 cv
@
255.082 249.055 mo
255.082 246.793 249.48 244.96 242.57 244.96 cv
235.66 244.96 230.057 246.793 230.057 249.055 cv
230.057 251.317 235.66 253.15 242.57 253.15 cv
249.48 253.15 255.082 251.317 255.082 249.055 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
232.442 249.783 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
255.082 272.715 mo
255.082 270.453 249.48 268.62 242.57 268.62 cv
235.66 268.62 230.057 270.453 230.057 272.715 cv
230.057 274.977 235.66 276.81 242.57 276.81 cv
249.48 276.81 255.082 274.977 255.082 272.715 cv
@
255.082 272.715 mo
255.082 270.453 249.48 268.62 242.57 268.62 cv
235.66 268.62 230.057 270.453 230.057 272.715 cv
230.057 274.977 235.66 276.81 242.57 276.81 cv
249.48 276.81 255.082 274.977 255.082 272.715 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
232.442 273.443 mo
(roundrobin\(2,2\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
242.57 253.15 mo
242.57 256.79 242.57 262.25 242.57 266.572 cv
@
242.115 266.345 mo
242.57 268.62 li
243.252 266.345 li
cp
@
242.115 266.345 mo
242.57 268.62 li
243.252 266.345 li
f
230.512 232.22 mo
233.015 235.632 235.972 239.955 238.475 243.368 cv
@
237.793 243.368 mo
239.612 244.96 li
238.702 242.685 li
cp
@
237.793 243.368 mo
239.612 244.96 li
238.702 242.685 li
f
247.802 232.902 mo
246.665 236.315 245.527 240.182 244.618 243.14 cv
@
244.162 242.685 mo
243.935 244.96 li
245.3 243.14 li
cp
@
244.162 242.685 mo
243.935 244.96 li
245.3 243.14 li
f
244.162 296.375 mo
244.162 292.103 239.783 288.64 234.38 288.64 cv
228.977 288.64 224.598 292.103 224.598 296.375 cv
224.598 300.647 228.977 304.11 234.38 304.11 cv
239.783 304.11 244.162 300.647 244.162 296.375 cv
@
244.162 296.375 mo
244.162 292.103 239.783 288.64 234.38 288.64 cv
228.977 288.64 224.598 292.103 224.598 296.375 cv
224.598 300.647 228.977 304.11 234.38 304.11 cv
239.783 304.11 244.162 300.647 244.162 296.375 cv
.271 .467 .702 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
229.426 293.463 mo
(Identity)
[1.06058 1.5925 1.41409 1.5925 .885437 .885422 .885437 0 ]xsh
228.617 297.103 mo
(work=12)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
228.396 300.743 mo
(I/O: 1->1)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
241.205 276.81 mo
240.295 279.54 238.93 283.18 237.565 286.593 cv
@
236.882 286.593 mo
236.882 288.868 li
238.02 286.82 li
cp
@
236.882 286.593 mo
236.882 288.868 li
238.02 286.82 li
f
267.822 296.375 mo
267.822 292.103 263.443 288.64 258.04 288.64 cv
252.637 288.64 248.257 292.103 248.257 296.375 cv
248.257 300.647 252.637 304.11 258.04 304.11 cv
263.443 304.11 267.822 300.647 267.822 296.375 cv
@
267.822 296.375 mo
267.822 292.103 263.443 288.64 258.04 288.64 cv
252.637 288.64 248.257 292.103 248.257 296.375 cv
248.257 300.647 252.637 304.11 258.04 304.11 cv
263.443 304.11 267.822 300.647 267.822 296.375 cv
.455 .686 .812 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
253 293.463 mo
(reversal)
[1.06058 1.41409 1.5925 1.41409 1.06058 1.23895 1.41409 0 ]xsh
252.277 297.103 mo
(work=26)
[2.29951 1.5925 1.06058 1.5925 1.79633 1.5925 0 ]xsh
252.056 300.743 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
245.3 276.81 mo
247.12 279.768 249.85 283.862 252.125 287.502 cv
@
251.67 287.957 mo
253.49 289.55 li
252.807 287.275 li
cp
@
251.67 287.957 mo
253.49 289.55 li
252.807 287.275 li
f
267.822 320.035 mo
267.822 317.773 262.22 315.94 255.31 315.94 cv
248.4 315.94 242.797 317.773 242.797 320.035 cv
242.797 322.297 248.4 324.13 255.31 324.13 cv
262.22 324.13 267.822 322.297 267.822 320.035 cv
@
267.822 320.035 mo
267.822 317.773 262.22 315.94 255.31 315.94 cv
248.4 315.94 242.797 317.773 242.797 320.035 cv
242.797 322.297 248.4 324.13 255.31 324.13 cv
262.22 324.13 267.822 322.297 267.822 320.035 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
245.182 320.763 mo
(roundrobin\(2,2\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.59248 .885437 1.5925 1.06058 1.5925 
.796265 1.5925 0 ]xsh
255.765 324.13 mo
256.675 331.182 258.722 345.515 259.86 353.477 cv
@
259.177 352.795 mo
260.088 355.07 li
260.315 352.795 li
cp
@
259.177 352.795 mo
260.088 355.07 li
260.315 352.795 li
f
240.068 302.745 mo
243.252 306.612 247.347 311.162 250.532 314.802 cv
@
249.85 315.03 mo
251.897 316.168 li
250.76 314.12 li
cp
@
249.85 315.03 mo
251.897 316.168 li
250.76 314.12 li
f
257.13 304.11 mo
256.675 307.295 256.447 310.707 255.993 313.893 cv
@
255.538 313.665 mo
255.765 315.94 li
256.675 313.665 li
cp
@
255.538 313.665 mo
255.765 315.94 li
256.675 313.665 li
f
303.768 129.845 mo
303.768 127.583 298.165 125.75 291.255 125.75 cv
284.345 125.75 278.743 127.583 278.743 129.845 cv
278.743 132.107 284.345 133.94 291.255 133.94 cv
298.165 133.94 303.768 132.107 303.768 129.845 cv
@
303.768 129.845 mo
303.768 127.583 298.165 125.75 291.255 125.75 cv
284.345 125.75 278.743 127.583 278.743 129.845 cv
278.743 132.107 284.345 133.94 291.255 133.94 cv
298.165 133.94 303.768 132.107 303.768 129.845 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
281.127 130.573 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.5925 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796265 1.5925 0 ]xsh
289.207 113.92 mo
289.662 117.105 290.118 120.517 290.573 123.702 cv
@
289.89 123.475 mo
290.8 125.75 li
291.027 123.475 li
cp
@
289.89 123.475 mo
290.8 125.75 li
291.027 123.475 li
f
305.132 154.415 mo
305.132 150.143 298.919 146.68 291.255 146.68 cv
283.591 146.68 277.378 150.143 277.378 154.415 cv
277.378 158.687 283.591 162.15 291.255 162.15 cv
298.919 162.15 305.132 158.687 305.132 154.415 cv
@
305.132 154.415 mo
305.132 150.143 298.919 146.68 291.255 146.68 cv
283.591 146.68 277.378 150.143 277.378 154.415 cv
277.378 158.687 283.591 162.15 291.255 162.15 cv
298.919 162.15 305.132 158.687 305.132 154.415 cv
.992 .863 .565 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
281.257 151.503 mo
(TwoPointIDCT)
[1.94601 2.29953 1.5925 1.77084 1.5925 .885437 1.5925 .885437 1.06058 2.29953 2.12436 0 
]xsh
285.491 155.143 mo
(work=80)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 0 ]xsh
285.27 158.783 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
291.255 133.94 mo
291.255 136.67 291.255 140.538 291.255 144.405 cv
@
290.8 144.405 mo
291.255 146.68 li
291.938 144.405 li
cp
@
290.8 144.405 mo
291.255 146.68 li
291.938 144.405 li
f
330.612 154.415 mo
330.612 150.143 326.233 146.68 320.83 146.68 cv
315.427 146.68 311.048 150.143 311.048 154.415 cv
311.048 158.687 315.427 162.15 320.83 162.15 cv
326.233 162.15 330.612 158.687 330.612 154.415 cv
@
330.612 154.415 mo
330.612 150.143 326.233 146.68 320.83 146.68 cv
315.427 146.68 311.048 150.143 311.048 154.415 cv
311.048 158.687 315.427 162.15 320.83 162.15 cv
326.233 162.15 330.612 158.687 330.612 154.415 cv
.455 .686 .812 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
317.113 151.503 mo
(inmix)
[.885437 1.5925 2.47794 .885406 0 ]xsh
315.067 155.143 mo
(work=25)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 0 ]xsh
314.845 158.783 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
298.307 133.257 mo
302.857 135.532 308.545 138.717 311.73 141.22 cv
312.868 142.13 314.232 143.722 315.37 145.315 cv
@
314.915 145.77 mo
316.735 147.362 li
316.052 145.088 li
cp
@
314.915 145.77 mo
316.735 147.362 li
316.052 145.088 li
f
317.645 201.735 mo
317.645 199.473 312.043 197.64 305.132 197.64 cv
298.222 197.64 292.62 199.473 292.62 201.735 cv
292.62 203.997 298.222 205.83 305.132 205.83 cv
312.043 205.83 317.645 203.997 317.645 201.735 cv
@
317.645 201.735 mo
317.645 199.473 312.043 197.64 305.132 197.64 cv
298.222 197.64 292.62 199.473 292.62 201.735 cv
292.62 203.997 298.222 205.83 305.132 205.83 cv
312.043 205.83 317.645 203.997 317.645 201.735 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
295.004 202.463 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.5925 1.5925 1.06058 1.5925 1.59253 .885406 1.5925 1.06058 1.5925 
.796265 1.5925 0 ]xsh
317.645 225.395 mo
317.645 223.133 312.043 221.3 305.132 221.3 cv
298.222 221.3 292.62 223.133 292.62 225.395 cv
292.62 227.657 298.222 229.49 305.132 229.49 cv
312.043 229.49 317.645 227.657 317.645 225.395 cv
@
317.645 225.395 mo
317.645 223.133 312.043 221.3 305.132 221.3 cv
298.222 221.3 292.62 223.133 292.62 225.395 cv
292.62 227.657 298.222 229.49 305.132 229.49 cv
312.043 229.49 317.645 227.657 317.645 225.395 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
295.004 226.123 mo
(roundrobin\(2,2\))
[1.06058 1.5925 1.5925 1.5925 1.5925 1.06058 1.5925 1.59253 .885406 1.5925 1.06058 1.5925 
.796265 1.5925 0 ]xsh
305.132 205.83 mo
305.132 209.47 305.132 214.93 305.132 219.252 cv
@
304.677 219.025 mo
305.132 221.3 li
305.815 219.025 li
cp
@
304.677 219.025 mo
305.132 221.3 li
305.815 219.025 li
f
293.53 162.15 mo
296.26 171.705 300.81 187.402 303.54 195.82 cv
@
302.857 195.593 mo
303.995 197.64 li
303.995 195.365 li
cp
@
302.857 195.593 mo
303.995 197.64 li
303.995 195.365 li
f
336.755 178.075 mo
336.755 173.803 330.542 170.34 322.877 170.34 cv
315.213 170.34 309 173.803 309 178.075 cv
309 182.347 315.213 185.81 322.877 185.81 cv
330.542 185.81 336.755 182.347 336.755 178.075 cv
@
336.755 178.075 mo
336.755 173.803 330.542 170.34 322.877 170.34 cv
315.213 170.34 309 173.803 309 178.075 cv
309 182.347 315.213 185.81 322.877 185.81 cv
330.542 185.81 336.755 182.347 336.755 178.075 cv
.992 .863 .565 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
312.88 175.163 mo
(TwoPointIDCT)
[1.94601 2.29953 1.5925 1.77084 1.5925 .885437 1.5925 .885437 1.06058 2.29953 2.12436 0 
]xsh
317.114 178.803 mo
(work=80)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 0 ]xsh
316.893 182.443 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
321.512 162.15 mo
321.74 164.197 321.968 166.472 321.968 168.747 cv
@
321.285 168.065 mo
322.195 170.34 li
322.423 168.065 li
cp
@
321.285 168.065 mo
322.195 170.34 li
322.423 168.065 li
f
317.418 185.127 mo
314.688 188.54 311.73 192.862 309.227 196.047 cv
@
309 195.365 mo
308.09 197.64 li
309.91 196.047 li
cp
@
309 195.365 mo
308.09 197.64 li
309.91 196.047 li
f
305.36 249.055 mo
305.36 244.783 300.777 241.32 295.123 241.32 cv
289.469 241.32 284.885 244.783 284.885 249.055 cv
284.885 253.327 289.469 256.79 295.123 256.79 cv
300.777 256.79 305.36 253.327 305.36 249.055 cv
@
305.36 249.055 mo
305.36 244.783 300.777 241.32 295.123 241.32 cv
289.469 241.32 284.885 244.783 284.885 249.055 cv
284.885 253.327 289.469 256.79 295.123 256.79 cv
300.777 256.79 305.36 253.327 305.36 249.055 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
290.348 246.143 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
288.563 249.783 mo
(work=112)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
289.138 253.423 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
303.312 229.49 mo
302.175 232.22 300.582 236.088 299.218 239.5 cv
@
298.762 239.272 mo
298.307 241.547 li
299.673 239.727 li
cp
@
298.762 239.272 mo
298.307 241.547 li
299.673 239.727 li
f
329.93 249.055 mo
329.93 244.783 325.347 241.32 319.693 241.32 cv
314.039 241.32 309.455 244.783 309.455 249.055 cv
309.455 253.327 314.039 256.79 319.693 256.79 cv
325.347 256.79 329.93 253.327 329.93 249.055 cv
@
329.93 249.055 mo
329.93 244.783 325.347 241.32 319.693 241.32 cv
314.039 241.32 309.455 244.783 309.455 249.055 cv
309.455 253.327 314.039 256.79 319.693 256.79 cv
325.347 256.79 329.93 253.327 329.93 249.055 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
314.918 246.143 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
313.133 249.783 mo
(work=112)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
313.708 253.423 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
307.635 229.49 mo
309.455 232.447 311.957 236.315 314.232 239.955 cv
@
313.777 240.182 mo
315.37 242.002 li
314.688 239.727 li
cp
@
313.777 240.182 mo
315.37 242.002 li
314.688 239.727 li
f
309.91 272.715 mo
309.91 270.453 304.308 268.62 297.398 268.62 cv
290.487 268.62 284.885 270.453 284.885 272.715 cv
284.885 274.977 290.487 276.81 297.398 276.81 cv
304.308 276.81 309.91 274.977 309.91 272.715 cv
@
309.91 272.715 mo
309.91 270.453 304.308 268.62 297.398 268.62 cv
290.487 268.62 284.885 270.453 284.885 272.715 cv
284.885 274.977 290.487 276.81 297.398 276.81 cv
304.308 276.81 309.91 274.977 309.91 272.715 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
287.269 273.443 mo
(roundrobin\(1,1\))
[1.06058 1.5925 1.5925 1.5925 1.5925 1.06058 1.5925 1.59253 .885406 1.5925 1.06058 1.5925 
.796265 1.5925 0 ]xsh
309.91 296.375 mo
309.91 294.113 304.308 292.28 297.398 292.28 cv
290.487 292.28 284.885 294.113 284.885 296.375 cv
284.885 298.637 290.487 300.47 297.398 300.47 cv
304.308 300.47 309.91 298.637 309.91 296.375 cv
@
309.91 296.375 mo
309.91 294.113 304.308 292.28 297.398 292.28 cv
290.487 292.28 284.885 294.113 284.885 296.375 cv
284.885 298.637 290.487 300.47 297.398 300.47 cv
304.308 300.47 309.91 298.637 309.91 296.375 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
287.269 297.103 mo
(roundrobin\(2,2\))
[1.06058 1.5925 1.5925 1.5925 1.5925 1.06058 1.5925 1.59253 .885406 1.5925 1.06058 1.5925 
.796265 1.5925 0 ]xsh
297.398 276.81 mo
297.398 280.45 297.398 285.91 297.398 290.232 cv
@
296.943 290.005 mo
297.398 292.28 li
298.08 290.005 li
cp
@
296.943 290.005 mo
297.398 292.28 li
298.08 290.005 li
f
295.805 256.79 mo
296.26 259.975 296.488 263.388 296.715 266.572 cv
@
296.032 266.345 mo
296.943 268.62 li
297.17 266.345 li
cp
@
296.032 266.345 mo
296.943 268.62 li
297.17 266.345 li
f
313.777 255.425 mo
310.138 259.293 305.815 263.843 302.63 267.482 cv
@
302.402 266.8 mo
301.265 268.847 li
303.312 267.71 li
cp
@
302.402 266.8 mo
301.265 268.847 li
303.312 267.71 li
f
296.943 320.035 mo
296.943 315.763 292.563 312.3 287.16 312.3 cv
281.757 312.3 277.378 315.763 277.378 320.035 cv
277.378 324.307 281.757 327.77 287.16 327.77 cv
292.563 327.77 296.943 324.307 296.943 320.035 cv
@
296.943 320.035 mo
296.943 315.763 292.563 312.3 287.16 312.3 cv
281.757 312.3 277.378 315.763 277.378 320.035 cv
277.378 324.307 281.757 327.77 287.16 327.77 cv
292.563 327.77 296.943 324.307 296.943 320.035 cv
.271 .467 .702 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
282.206 317.123 mo
(Identity)
[1.06058 1.5925 1.41409 1.5925 .885437 .885437 .885406 0 ]xsh
281.397 320.763 mo
(work=12)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 0 ]xsh
281.176 324.403 mo
(I/O: 1->1)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
295.577 300.47 mo
294.44 303.427 292.62 307.523 291.027 311.162 cv
@
290.8 310.252 mo
290.345 312.527 li
291.938 310.707 li
cp
@
290.8 310.252 mo
290.345 312.527 li
291.938 310.707 li
f
320.602 320.035 mo
320.602 315.763 316.223 312.3 310.82 312.3 cv
305.417 312.3 301.038 315.763 301.038 320.035 cv
301.038 324.307 305.417 327.77 310.82 327.77 cv
316.223 327.77 320.602 324.307 320.602 320.035 cv
@
320.602 320.035 mo
320.602 315.763 316.223 312.3 310.82 312.3 cv
305.417 312.3 301.038 315.763 301.038 320.035 cv
301.038 324.307 305.417 327.77 310.82 327.77 cv
316.223 327.77 320.602 324.307 320.602 320.035 cv
.455 .686 .812 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
305.78 317.123 mo
(reversal)
[1.06058 1.41409 1.5925 1.41409 1.06058 1.23895 1.41409 0 ]xsh
305.057 320.763 mo
(work=26)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 0 ]xsh
304.836 324.403 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
299.673 300.47 mo
301.493 303.427 303.54 307.295 305.588 310.935 cv
@
305.132 311.162 mo
306.725 312.982 li
306.043 310.707 li
cp
@
305.132 311.162 mo
306.725 312.982 li
306.043 310.707 li
f
302.402 340.055 mo
302.402 337.793 296.8 335.96 289.89 335.96 cv
282.98 335.96 277.377 337.793 277.377 340.055 cv
277.377 342.317 282.98 344.15 289.89 344.15 cv
296.8 344.15 302.402 342.317 302.402 340.055 cv
@
302.402 340.055 mo
302.402 337.793 296.8 335.96 289.89 335.96 cv
282.98 335.96 277.377 337.793 277.377 340.055 cv
277.377 342.317 282.98 344.15 289.89 344.15 cv
296.8 344.15 302.402 342.317 302.402 340.055 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
279.762 340.783 mo
(roundrobin\(2,2\))
[1.06058 1.5925 1.5925 1.5925 1.5925 1.06058 1.5925 1.59253 .885406 1.5925 1.06058 1.5925 
.796265 1.5925 0 ]xsh
284.202 343.695 mo
279.652 346.652 273.055 350.975 268.05 354.388 cv
@
267.822 353.932 mo
266.23 355.525 li
268.505 354.843 li
cp
@
267.822 353.932 mo
266.23 355.525 li
268.505 354.843 li
f
288.298 327.77 mo
288.525 329.818 288.752 331.865 288.98 333.912 cv
@
288.298 333.912 mo
289.435 335.96 li
289.435 333.685 li
cp
@
288.298 333.912 mo
289.435 335.96 li
289.435 333.685 li
f
304.45 325.95 mo
301.493 328.907 298.307 332.093 295.35 334.823 cv
@
295.123 334.14 mo
293.985 336.188 li
296.032 335.05 li
cp
@
295.123 334.14 mo
293.985 336.188 li
296.032 335.05 li
f
223.46 402.845 mo
223.46 398.573 218.876 395.11 213.222 395.11 cv
207.568 395.11 202.985 398.573 202.985 402.845 cv
202.985 407.117 207.568 410.58 213.222 410.58 cv
218.876 410.58 223.46 407.117 223.46 402.845 cv
@
223.46 402.845 mo
223.46 398.573 218.876 395.11 213.222 395.11 cv
207.568 395.11 202.985 398.573 202.985 402.845 cv
202.985 407.117 207.568 410.58 213.222 410.58 cv
218.876 410.58 223.46 407.117 223.46 402.845 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
208.448 399.933 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
206.663 403.573 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
207.238 407.213 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
252.58 382.598 mo
244.39 386.238 232.332 391.47 224.825 395.11 cv
224.143 395.565 223.232 396.248 222.095 396.702 cv
@
222.322 395.793 mo
220.73 397.612 li
223.005 396.93 li
cp
@
222.322 395.793 mo
220.73 397.612 li
223.005 396.93 li
f
248.03 402.845 mo
248.03 398.573 243.447 395.11 237.793 395.11 cv
232.139 395.11 227.555 398.573 227.555 402.845 cv
227.555 407.117 232.139 410.58 237.793 410.58 cv
243.447 410.58 248.03 407.117 248.03 402.845 cv
@
248.03 402.845 mo
248.03 398.573 243.447 395.11 237.793 395.11 cv
232.139 395.11 227.555 398.573 227.555 402.845 cv
227.555 407.117 232.139 410.58 237.793 410.58 cv
243.447 410.58 248.03 407.117 248.03 402.845 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
233.018 399.933 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
231.233 403.573 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
231.808 407.213 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
256.675 383.28 mo
253.718 386.465 249.395 391.015 245.527 394.882 cv
@
245.072 394.427 mo
243.935 396.475 li
245.982 395.338 li
cp
@
245.072 394.427 mo
243.935 396.475 li
245.982 395.338 li
f
272.6 402.845 mo
272.6 398.573 268.017 395.11 262.362 395.11 cv
256.708 395.11 252.125 398.573 252.125 402.845 cv
252.125 407.117 256.708 410.58 262.362 410.58 cv
268.017 410.58 272.6 407.117 272.6 402.845 cv
@
272.6 402.845 mo
272.6 398.573 268.017 395.11 262.362 395.11 cv
256.708 395.11 252.125 398.573 252.125 402.845 cv
252.125 407.117 256.708 410.58 262.362 410.58 cv
268.017 410.58 272.6 407.117 272.6 402.845 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
257.588 399.933 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
255.803 403.573 mo
(work=112)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
256.378 407.213 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
260.77 383.28 mo
260.997 385.782 261.225 389.423 261.452 392.607 cv
@
260.997 392.835 mo
261.68 395.11 li
262.135 392.835 li
cp
@
260.997 392.835 mo
261.68 395.11 li
262.135 392.835 li
f
297.17 402.845 mo
297.17 398.573 292.586 395.11 286.932 395.11 cv
281.278 395.11 276.695 398.573 276.695 402.845 cv
276.695 407.117 281.278 410.58 286.932 410.58 cv
292.586 410.58 297.17 407.117 297.17 402.845 cv
@
297.17 402.845 mo
297.17 398.573 292.586 395.11 286.932 395.11 cv
281.278 395.11 276.695 398.573 276.695 402.845 cv
276.695 407.117 281.278 410.58 286.932 410.58 cv
292.586 410.58 297.17 407.117 297.17 402.845 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
282.158 399.933 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
280.373 403.573 mo
(work=112)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
280.948 407.213 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
264.865 383.052 mo
268.505 386.465 274.193 391.47 278.743 395.565 cv
@
278.288 395.793 mo
280.335 396.93 li
278.97 395.11 li
cp
@
278.288 395.793 mo
280.335 396.93 li
278.97 395.11 li
f
252.58 422.865 mo
252.58 420.603 245.959 418.77 237.793 418.77 cv
229.626 418.77 223.005 420.603 223.005 422.865 cv
223.005 425.127 229.626 426.96 237.793 426.96 cv
245.959 426.96 252.58 425.127 252.58 422.865 cv
@
252.58 422.865 mo
252.58 420.603 245.959 418.77 237.793 418.77 cv
229.626 418.77 223.005 420.603 223.005 422.865 cv
223.005 425.127 229.626 426.96 237.793 426.96 cv
245.959 426.96 252.58 425.127 252.58 422.865 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
225.276 423.593 mo
(roundrobin\(1,1,1,1\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 .796249 1.5925 .796249 1.5925 0 ]xsh
248.257 442.885 mo
248.257 440.623 242.655 438.79 235.745 438.79 cv
228.835 438.79 223.232 440.623 223.232 442.885 cv
223.232 445.147 228.835 446.98 235.745 446.98 cv
242.655 446.98 248.257 445.147 248.257 442.885 cv
@
248.257 442.885 mo
248.257 440.623 242.655 438.79 235.745 438.79 cv
228.835 438.79 223.232 440.623 223.232 442.885 cv
223.232 445.147 228.835 446.98 235.745 446.98 cv
242.655 446.98 248.257 445.147 248.257 442.885 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
225.617 443.613 mo
(roundrobin\(4,4\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 0 ]xsh
237.338 426.96 mo
236.882 429.69 236.655 433.557 236.427 436.743 cv
@
235.972 436.515 mo
236.2 438.79 li
237.11 436.515 li
cp
@
235.972 436.515 mo
236.2 438.79 li
237.11 436.515 li
f
220.275 408.532 mo
223.915 411.49 228.01 414.902 231.422 417.632 cv
@
230.968 417.86 mo
233.015 418.998 li
231.65 417.178 li
cp
@
230.968 417.86 mo
233.015 418.998 li
231.65 417.178 li
f
237.793 410.58 mo
237.793 412.627 237.793 414.675 237.793 416.723 cv
@
237.338 416.495 mo
237.793 418.77 li
238.475 416.495 li
cp
@
237.338 416.495 mo
237.793 418.77 li
238.475 416.495 li
f
255.31 408.532 mo
251.67 411.49 247.575 414.902 244.162 417.632 cv
@
243.935 417.178 mo
242.57 418.998 li
244.618 417.86 li
cp
@
243.935 417.178 mo
242.57 418.998 li
244.618 417.86 li
f
279.652 408.305 mo
278.06 409.215 276.695 410.125 275.33 410.58 cv
268.732 413.31 258.04 416.723 249.85 419.453 cv
@
250.077 418.77 mo
248.03 419.907 li
250.305 419.907 li
cp
@
250.077 418.77 mo
248.03 419.907 li
250.305 419.907 li
f
224.597 466.545 mo
224.597 462.273 220.218 458.81 214.815 458.81 cv
209.412 458.81 205.032 462.273 205.032 466.545 cv
205.032 470.817 209.412 474.28 214.815 474.28 cv
220.218 474.28 224.597 470.817 224.597 466.545 cv
@
224.597 466.545 mo
224.597 462.273 220.218 458.81 214.815 458.81 cv
209.412 458.81 205.032 462.273 205.032 466.545 cv
205.032 470.817 209.412 474.28 214.815 474.28 cv
220.218 474.28 224.597 470.817 224.597 466.545 cv
.455 .686 .812 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
209.861 463.633 mo
(Identity)
[1.06058 1.5925 1.41409 1.5925 .885437 .885422 .885437 0 ]xsh
209.052 467.273 mo
(work=24)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
208.831 470.913 mo
(I/O: 1->1)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
232.105 446.98 mo
229.375 450.165 225.28 454.488 221.868 458.355 cv
@
221.412 457.9 mo
220.502 460.175 li
222.322 458.582 li
cp
@
221.412 457.9 mo
220.502 460.175 li
222.322 458.582 li
f
248.257 466.545 mo
248.257 462.273 243.878 458.81 238.475 458.81 cv
233.072 458.81 228.693 462.273 228.693 466.545 cv
228.693 470.817 233.072 474.28 238.475 474.28 cv
243.878 474.28 248.257 470.817 248.257 466.545 cv
@
248.257 466.545 mo
248.257 462.273 243.878 458.81 238.475 458.81 cv
233.072 458.81 228.693 462.273 228.693 466.545 cv
228.693 470.817 233.072 474.28 238.475 474.28 cv
243.878 474.28 248.257 470.817 248.257 466.545 cv
.882 .953 .973 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
233.435 463.633 mo
(reversal)
[1.06058 1.41409 1.5925 1.41409 1.06058 1.23895 1.41409 0 ]xsh
232.712 467.273 mo
(work=52)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
232.491 470.913 mo
(I/O: 4->4)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
236.2 446.98 mo
236.655 449.71 236.882 453.578 237.338 457.218 cv
@
236.655 456.535 mo
237.565 458.81 li
237.793 456.535 li
cp
@
236.655 456.535 mo
237.565 458.81 li
237.793 456.535 li
f
230.057 486.565 mo
230.057 484.303 224.455 482.47 217.545 482.47 cv
210.635 482.47 205.032 484.303 205.032 486.565 cv
205.032 488.827 210.635 490.66 217.545 490.66 cv
224.455 490.66 230.057 488.827 230.057 486.565 cv
@
230.057 486.565 mo
230.057 484.303 224.455 482.47 217.545 482.47 cv
210.635 482.47 205.032 484.303 205.032 486.565 cv
205.032 488.827 210.635 490.66 217.545 490.66 cv
224.455 490.66 230.057 488.827 230.057 486.565 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
207.417 487.293 mo
(roundrobin\(4,4\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
215.043 490.66 mo
213.905 492.48 212.312 494.982 210.947 497.03 cv
@
210.493 496.575 mo
209.81 498.85 li
211.402 497.257 li
cp
@
210.493 496.575 mo
209.81 498.85 li
211.402 497.257 li
f
215.952 474.28 mo
216.18 476.328 216.407 478.375 216.635 480.423 cv
@
215.952 480.423 mo
217.09 482.47 li
217.09 480.195 li
cp
@
215.952 480.423 mo
217.09 482.47 li
217.09 480.195 li
f
232.105 472.46 mo
229.147 475.418 225.962 478.603 223.005 481.332 cv
@
222.777 480.65 mo
221.64 482.698 li
223.688 481.56 li
cp
@
222.777 480.65 mo
221.64 482.698 li
223.688 481.56 li
f
131.55 540.255 mo
131.55 535.983 126.967 532.52 121.312 532.52 cv
115.658 532.52 111.075 535.983 111.075 540.255 cv
111.075 544.527 115.658 547.99 121.312 547.99 cv
126.967 547.99 131.55 544.527 131.55 540.255 cv
@
131.55 540.255 mo
131.55 535.983 126.967 532.52 121.312 532.52 cv
115.658 532.52 111.075 535.983 111.075 540.255 cv
111.075 544.527 115.658 547.99 121.312 547.99 cv
126.967 547.99 131.55 544.527 131.55 540.255 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
116.538 537.343 mo
(recover)
[1.06059 1.41409 1.41409 1.5925 1.59251 1.41409 0 ]xsh
114.753 540.983 mo
(work=112)
[2.29952 1.5925 1.06059 1.5925 1.79633 1.5925 1.5925 0 ]xsh
115.328 544.623 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
190.927 522.51 mo
174.32 525.012 148.612 528.88 132.915 532.52 cv
132.005 532.748 130.867 533.203 129.957 533.885 cv
@
130.185 532.975 mo
128.592 534.795 li
130.867 534.112 li
cp
@
130.185 532.975 mo
128.592 534.795 li
130.867 534.112 li
f
156.12 540.255 mo
156.12 535.983 151.536 532.52 145.882 532.52 cv
140.228 532.52 135.645 535.983 135.645 540.255 cv
135.645 544.527 140.228 547.99 145.882 547.99 cv
151.536 547.99 156.12 544.527 156.12 540.255 cv
@
156.12 540.255 mo
156.12 535.983 151.536 532.52 145.882 532.52 cv
140.228 532.52 135.645 535.983 135.645 540.255 cv
135.645 544.527 140.228 547.99 145.882 547.99 cv
151.536 547.99 156.12 544.527 156.12 540.255 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
141.108 537.343 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
139.323 540.983 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
139.898 544.623 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
193.885 523.193 mo
182.738 525.695 167.04 529.335 157.485 532.52 cv
156.575 532.748 155.665 533.43 154.527 533.885 cv
@
154.755 532.975 mo
153.162 534.795 li
155.438 534.112 li
cp
@
154.755 532.975 mo
153.162 534.795 li
155.438 534.112 li
f
180.69 540.255 mo
180.69 535.983 176.106 532.52 170.452 532.52 cv
164.798 532.52 160.215 535.983 160.215 540.255 cv
160.215 544.527 164.798 547.99 170.452 547.99 cv
176.106 547.99 180.69 544.527 180.69 540.255 cv
@
180.69 540.255 mo
180.69 535.983 176.106 532.52 170.452 532.52 cv
164.798 532.52 160.215 535.983 160.215 540.255 cv
160.215 544.527 164.798 547.99 170.452 547.99 cv
176.106 547.99 180.69 544.527 180.69 540.255 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
165.678 537.343 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
163.893 540.983 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
164.468 544.623 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
199.345 524.103 mo
193.885 526.605 186.605 530.245 182.055 532.52 cv
181.372 532.975 180.462 533.658 179.325 534.112 cv
@
179.552 533.203 mo
177.96 535.023 li
180.235 534.34 li
cp
@
179.552 533.203 mo
177.96 535.023 li
180.235 534.34 li
f
205.26 540.255 mo
205.26 535.983 200.676 532.52 195.022 532.52 cv
189.368 532.52 184.785 535.983 184.785 540.255 cv
184.785 544.527 189.368 547.99 195.022 547.99 cv
200.676 547.99 205.26 544.527 205.26 540.255 cv
@
205.26 540.255 mo
205.26 535.983 200.676 532.52 195.022 532.52 cv
189.368 532.52 184.785 535.983 184.785 540.255 cv
184.785 544.527 189.368 547.99 195.022 547.99 cv
200.676 547.99 205.26 544.527 205.26 540.255 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
190.248 537.343 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
188.463 540.983 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
189.038 544.623 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
204.805 524.33 mo
203.668 526.378 202.075 528.88 200.482 531.155 cv
@
200.027 530.928 mo
199.345 533.203 li
200.938 531.382 li
cp
@
200.027 530.928 mo
199.345 533.203 li
200.938 531.382 li
f
229.83 540.255 mo
229.83 535.983 225.247 532.52 219.593 532.52 cv
213.939 532.52 209.355 535.983 209.355 540.255 cv
209.355 544.527 213.939 547.99 219.593 547.99 cv
225.247 547.99 229.83 544.527 229.83 540.255 cv
@
229.83 540.255 mo
229.83 535.983 225.247 532.52 219.593 532.52 cv
213.939 532.52 209.355 535.983 209.355 540.255 cv
209.355 544.527 213.939 547.99 219.593 547.99 cv
225.247 547.99 229.83 544.527 229.83 540.255 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
214.818 537.343 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
213.033 540.983 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
213.608 544.623 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
209.81 524.33 mo
210.947 526.378 212.54 528.88 214.132 531.155 cv
@
213.677 531.382 mo
215.27 533.203 li
214.588 530.928 li
cp
@
213.677 531.382 mo
215.27 533.203 li
214.588 530.928 li
f
254.4 540.255 mo
254.4 535.983 249.817 532.52 244.162 532.52 cv
238.508 532.52 233.925 535.983 233.925 540.255 cv
233.925 544.527 238.508 547.99 244.162 547.99 cv
249.817 547.99 254.4 544.527 254.4 540.255 cv
@
254.4 540.255 mo
254.4 535.983 249.817 532.52 244.162 532.52 cv
238.508 532.52 233.925 535.983 233.925 540.255 cv
233.925 544.527 238.508 547.99 244.162 547.99 cv
249.817 547.99 254.4 544.527 254.4 540.255 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
239.388 537.343 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
237.603 540.983 mo
(work=112)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
238.178 544.623 mo
(I/O: 2->2)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
215.27 524.103 mo
220.957 526.605 228.01 530.245 232.56 532.52 cv
233.243 532.975 234.152 533.658 235.29 534.112 cv
@
234.38 534.34 mo
236.655 535.023 li
235.062 533.203 li
cp
@
234.38 534.34 mo
236.655 535.023 li
235.062 533.203 li
f
278.97 540.255 mo
278.97 535.983 274.386 532.52 268.732 532.52 cv
263.078 532.52 258.495 535.983 258.495 540.255 cv
258.495 544.527 263.078 547.99 268.732 547.99 cv
274.386 547.99 278.97 544.527 278.97 540.255 cv
@
278.97 540.255 mo
278.97 535.983 274.386 532.52 268.732 532.52 cv
263.078 532.52 258.495 535.983 258.495 540.255 cv
258.495 544.527 263.078 547.99 268.732 547.99 cv
274.386 547.99 278.97 544.527 278.97 540.255 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
263.958 537.343 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
262.173 540.983 mo
(work=112)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
262.748 544.623 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
220.957 523.193 mo
232.105 525.695 247.575 529.335 257.13 532.52 cv
258.04 532.748 258.95 533.43 260.088 533.885 cv
@
259.177 534.112 mo
261.452 534.795 li
259.86 532.975 li
cp
@
259.177 534.112 mo
261.452 534.795 li
259.86 532.975 li
f
303.54 540.255 mo
303.54 535.983 298.956 532.52 293.302 532.52 cv
287.648 532.52 283.065 535.983 283.065 540.255 cv
283.065 544.527 287.648 547.99 293.302 547.99 cv
298.956 547.99 303.54 544.527 303.54 540.255 cv
@
303.54 540.255 mo
303.54 535.983 298.956 532.52 293.302 532.52 cv
287.648 532.52 283.065 535.983 283.065 540.255 cv
283.065 544.527 287.648 547.99 293.302 547.99 cv
298.956 547.99 303.54 544.527 303.54 540.255 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
288.528 537.343 mo
(recover)
[1.06058 1.41409 1.41409 1.5925 1.5925 1.41409 0 ]xsh
286.743 540.983 mo
(work=112)
[2.29953 1.5925 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
287.318 544.623 mo
(I/O: 2->2)
[1.06058 .885437 2.29953 .885406 .796265 1.5925 1.06058 1.79633 0 ]xsh
223.688 522.51 mo
240.522 525.012 266.23 528.88 281.7 532.52 cv
282.61 532.748 283.748 533.203 284.885 533.658 cv
@
283.975 533.885 mo
286.25 534.568 li
284.657 532.748 li
cp
@
283.975 533.885 mo
286.25 534.568 li
284.657 532.748 li
f
226.872 560.275 mo
226.872 558.013 218.113 556.18 207.307 556.18 cv
196.502 556.18 187.743 558.013 187.743 560.275 cv
187.743 562.537 196.502 564.37 207.307 564.37 cv
218.113 564.37 226.872 562.537 226.872 560.275 cv
@
226.872 560.275 mo
226.872 558.013 218.113 556.18 207.307 556.18 cv
196.502 556.18 187.743 558.013 187.743 560.275 cv
187.743 562.537 196.502 564.37 207.307 564.37 cv
218.113 564.37 226.872 562.537 226.872 560.275 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
190.013 561.003 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[1.06058 1.5925 1.5925 1.5925 1.59251 1.06058 1.5925 1.5925 .885422 1.59251 1.06058 1.5925 
.796249 1.5925 .796249 1.5925 .796249 1.5925 .796249 1.5925 .796249 1.5925 .796265 1.5925 
.796249 1.5925 0 ]xsh
219.82 577.565 mo
219.82 575.303 214.218 573.47 207.307 573.47 cv
200.397 573.47 194.795 575.303 194.795 577.565 cv
194.795 579.827 200.397 581.66 207.307 581.66 cv
214.218 581.66 219.82 579.827 219.82 577.565 cv
@
219.82 577.565 mo
219.82 575.303 214.218 573.47 207.307 573.47 cv
200.397 573.47 194.795 575.303 194.795 577.565 cv
194.795 579.827 200.397 581.66 207.307 581.66 cv
214.218 581.66 219.82 579.827 219.82 577.565 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
197.179 578.293 mo
(roundrobin\(8,8\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
207.307 564.37 mo
207.307 566.418 207.307 568.92 207.307 571.195 cv
@
206.852 571.195 mo
207.307 573.47 li
207.99 571.195 li
cp
@
206.852 571.195 mo
207.307 573.47 li
207.99 571.195 li
f
128.365 545.943 mo
129.957 546.853 131.55 547.762 132.915 547.99 cv
147.93 551.63 172.5 555.498 189.335 557.773 cv
@
188.652 558.228 mo
190.927 558 li
188.652 557.09 li
cp
@
188.652 558.228 mo
190.927 558 li
188.652 557.09 li
f
153.162 545.715 mo
154.755 546.625 156.12 547.535 157.485 547.99 cv
166.585 550.948 181.145 554.588 192.065 557.09 cv
@
191.382 557.545 mo
193.657 557.318 li
191.382 556.408 li
cp
@
191.382 557.545 mo
193.657 557.318 li
191.382 556.408 li
f
177.96 545.488 mo
179.552 546.398 180.918 547.308 182.055 547.99 cv
186.15 550.265 192.293 553.223 197.297 555.725 cv
@
197.07 556.18 mo
199.345 556.635 li
197.525 555.27 li
cp
@
197.07 556.18 mo
199.345 556.635 li
197.525 555.27 li
f
199.345 547.308 mo
200.71 549.583 202.302 552.312 203.668 554.36 cv
@
203.212 554.588 mo
204.805 556.18 li
204.122 553.905 li
cp
@
203.212 554.588 mo
204.805 556.18 li
204.122 553.905 li
f
215.27 547.308 mo
213.905 549.583 212.312 552.312 210.947 554.36 cv
@
210.493 553.905 mo
209.81 556.18 li
211.402 554.588 li
cp
@
210.493 553.905 mo
209.81 556.18 li
211.402 554.588 li
f
236.655 545.488 mo
235.062 546.625 233.697 547.308 232.56 547.99 cv
228.465 550.265 222.55 552.995 217.545 555.725 cv
@
217.318 555.27 mo
215.497 556.635 li
217.772 556.18 li
cp
@
217.318 555.27 mo
215.497 556.635 li
217.772 556.18 li
f
261.452 545.715 mo
260.088 546.853 258.495 547.535 257.13 547.99 cv
248.03 550.948 233.47 554.588 222.55 557.09 cv
@
223.232 556.408 mo
220.957 557.318 li
223.232 557.545 li
cp
@
223.232 556.408 mo
220.957 557.318 li
223.232 557.545 li
f
286.25 545.943 mo
284.657 546.853 283.065 547.762 281.7 547.99 cv
266.685 551.63 242.115 555.498 225.28 557.773 cv
@
225.962 557.09 mo
223.688 558 li
225.962 558.228 li
cp
@
225.962 557.09 mo
223.688 558 li
225.962 558.228 li
f
204.805 597.585 mo
204.805 593.313 200.425 589.85 195.022 589.85 cv
189.62 589.85 185.24 593.313 185.24 597.585 cv
185.24 601.857 189.62 605.32 195.022 605.32 cv
200.425 605.32 204.805 601.857 204.805 597.585 cv
@
204.805 597.585 mo
204.805 593.313 200.425 589.85 195.022 589.85 cv
189.62 589.85 185.24 593.313 185.24 597.585 cv
185.24 601.857 189.62 605.32 195.022 605.32 cv
200.425 605.32 204.805 601.857 204.805 597.585 cv
.882 .953 .973 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
190.068 594.673 mo
(Identity)
[1.06058 1.5925 1.41409 1.5925 .885437 .885422 .885437 0 ]xsh
189.259 598.313 mo
(work=48)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 0 ]xsh
189.038 601.953 mo
(I/O: 1->1)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
204.805 581.66 mo
203.668 583.708 202.075 586.21 200.482 588.485 cv
@
200.027 588.257 mo
199.345 590.532 li
200.938 588.712 li
cp
@
200.027 588.257 mo
199.345 590.532 li
200.938 588.712 li
f
229.375 597.585 mo
229.375 593.313 224.792 589.85 219.138 589.85 cv
213.483 589.85 208.9 593.313 208.9 597.585 cv
208.9 601.857 213.483 605.32 219.138 605.32 cv
224.792 605.32 229.375 601.857 229.375 597.585 cv
@
229.375 597.585 mo
229.375 593.313 224.792 589.85 219.138 589.85 cv
213.483 589.85 208.9 593.313 208.9 597.585 cv
208.9 601.857 213.483 605.32 219.138 605.32 cv
224.792 605.32 229.375 601.857 229.375 597.585 cv
.953 .424 .267 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
214.097 594.673 mo
(reversal)
[1.06058 1.41409 1.5925 1.41409 1.06058 1.23895 1.41409 0 ]xsh
212.578 598.313 mo
(work=104)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
213.153 601.953 mo
(I/O: 8->8)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.06058 1.79633 0 ]xsh
209.81 581.66 mo
210.947 583.708 212.54 586.21 213.905 588.485 cv
@
213.45 588.712 mo
215.043 590.532 li
214.36 588.257 li
cp
@
213.45 588.712 mo
215.043 590.532 li
214.36 588.257 li
f
219.82 617.605 mo
219.82 615.343 214.218 613.51 207.307 613.51 cv
200.397 613.51 194.795 615.343 194.795 617.605 cv
194.795 619.867 200.397 621.7 207.307 621.7 cv
214.218 621.7 219.82 619.867 219.82 617.605 cv
@
219.82 617.605 mo
219.82 615.343 214.218 613.51 207.307 613.51 cv
200.397 613.51 194.795 615.343 194.795 617.605 cv
194.795 619.867 200.397 621.7 207.307 621.7 cv
214.218 621.7 219.82 619.867 219.82 617.605 cv
1 gry
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
197.179 618.333 mo
(roundrobin\(8,8\))
[1.06058 1.5925 1.5925 1.59251 1.5925 1.06058 1.5925 1.5925 .885437 1.5925 1.06058 1.5925 
.796249 1.5925 0 ]xsh
217.772 637.625 mo
217.772 633.353 213.087 629.89 207.307 629.89 cv
201.528 629.89 196.843 633.353 196.843 637.625 cv
196.843 641.897 201.528 645.36 207.307 645.36 cv
213.087 645.36 217.772 641.897 217.772 637.625 cv
@
217.772 637.625 mo
217.772 633.353 213.087 629.89 207.307 629.89 cv
201.528 629.89 196.843 633.353 196.843 637.625 cv
196.843 641.897 201.528 645.36 207.307 645.36 cv
213.087 645.36 217.772 641.897 217.772 637.625 cv
.843 .18 .157 rgb
f
0 gry
LTFDRU+TimesNewRomanPSMT*1 [3.185 0 0 -3.185 0 0 ]msf
204.653 634.713 mo
(sink)
[1.23894 .885437 1.5925 0 ]xsh
200.748 638.353 mo
(work=128)
[2.29951 1.59251 1.06058 1.5925 1.79633 1.5925 1.5925 0 ]xsh
200.527 641.993 mo
(I/O: 16->0)
[1.06058 .885437 2.29951 .885437 .796249 1.5925 1.5925 1.06058 1.79633 0 ]xsh
207.307 621.7 mo
207.307 623.292 207.307 625.567 207.307 627.615 cv
@
206.852 627.615 mo
207.307 629.89 li
207.99 627.615 li
cp
@
206.852 627.615 mo
207.307 629.89 li
207.99 627.615 li
f
199.345 604.637 mo
200.71 606.912 202.302 609.642 203.668 611.69 cv
@
203.212 611.917 mo
204.805 613.51 li
204.122 611.235 li
cp
@
203.212 611.917 mo
204.805 613.51 li
204.122 611.235 li
f
215.043 604.637 mo
213.677 606.912 212.085 609.415 210.72 611.69 cv
@
210.265 611.235 mo
209.81 613.51 li
211.402 611.69 li
cp
@
210.265 611.235 mo
209.81 613.51 li
211.402 611.69 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/LTFDRU+TimesNewRomanPSMT*1 uf
/LTFDRU+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
