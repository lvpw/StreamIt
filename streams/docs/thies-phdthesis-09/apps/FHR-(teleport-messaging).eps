%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: FHR (messaging).pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/6/2008, 12:07:45 AM
%%BoundingBox: 0 0 220 645
%%HiResBoundingBox: 0 0 219.1340 644.5622
%%CropBox: 0 0 219.1340 644.5622
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 57578 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   xap:CreateDate="2008-11-20T07:07:21Z"
   xap:ModifyDate="2008-11-20T12:37:21+05:30"
   xap:CreatorTool="Illustrator"
   xap:MetadataDate="2008-11-20T12:37:21+05:30"
   xapMM:DocumentID="uuid:fd92c491-e882-4ffa-9858-2351f3f7d5e2"
   xapMM:InstanceID="uuid:5e89567b-e8d0-41c7-81d0-1f97a0b5492c"
   dc:format="application/pdf">
   <xap:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xapGImg:format="JPEG"
      xapGImg:width="92"
      xapGImg:height="256"
      xapGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAABcAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9BaR5J8tx6rea6LeV9Rv&#xA;J7j6x6lzcyQMfVK1Fq8jW6txQCqxg4qnv6J0r/lig/5FJ/TFXfonSv8Alig/5FJ/TFXfonSv+WKD&#xA;/kUn9MVYx5/8zeW/JukJfXGlpeXE7+na2cSRKzkbsSzjiqqOuVZcwgLLnaDQZNTPhh05vEJv+coI&#xA;0ncHyzp8aKzD0me3ZwF23PqqDv8ADyAoD1pvlHjzPIff+p2R7LwDaUpX/wAk/u4+/buHUh7F+W/n&#xA;jy152tpymjpp19bUaW0lWGUFGJCukiCjKaeAOW4c4ny6OD2h2ZPTUZfTLl8PcT97NP0TpX/LFB/y&#xA;KT+mXutd+idK/wCWKD/kUn9MVd+idK/5YoP+RSf0xVDanpmmx6bdyR2kKOkMjI6xqCCFJBBAxVM8&#xA;VQumf7zP/wAZ7j/k++KorFXYq7FUp8zeVtF8yacbDVoPVhDc42UlXjehAZGHQ7/LIZMcZii5Ok1e&#xA;TTz48ZovGp/yM/LqPXYLNPMt0IpkmugrXJcr6TRIymXl6a19f4VI9wDxOU/kPf8AIfqdkPaOY6C/&#xA;68/+L+x635N8l+XfK9g0WjIWFxxaW7kf1JJQB8JLigoAdqCmW48MYCg4Gs1+XUyBmeXLuDIMscN2&#xA;KuxVC6t/xyr3/jBL/wAQOKorFULpn+8z/wDGe4/5PviqKxV2KqctxHGwSvKU0IiXdqE0rTsK9zti&#xA;ryj8w/Nmsi+vbW5tpotEtDEbee1iubgXHqx+pU+nEVcinSNm96bVzNJw7k83A13FsByeLarqN3Jq&#xA;bXP1TUZJVuAnOPTdT9JTby/upTGl5GrRqjVIVP3nWn7OZEpG+vyP63GjEVVj5j9T1ryL5t1eHWbS&#xA;y0+1nuba5uPq98JoLqCKMCF5jKjPEUrSOgLMF7cq7ZVq+GvNt0PEDX8L2WK5ikPEHi55cVbYsqkA&#xA;svivxDceOYDs1XFXYqhdW/45V7/xgl/4gcVRWKsa1nyw3mHSEtF1jUtFaG9nm+s6TOtvM/7yVDG7&#xA;MkoZCHrSnUAjcYqtsvKWux+nLeebtUuruMOnqLHp8MRV5YpN4VteBIWDhyapAd6UJXiqrw6NrsWs&#xA;iZfMd5cWa1aSylgsjGGKqvB5I4YpeNPjQKahtyStExVNorcSJRgwt/2Y3LMzg8qiTnU8fi2X/aCr&#xA;zzzldfmgdQeLy/GNW065LrNaGzsZRaLHKyIx+tX1h9Y9T0j8NRx+1y24sQaQRfNA6Jp9qdUttJ8w&#xA;Wk8OsyxTzGNBYWySBXg4hYUvL/gyicLRpPiNSoplvjZO8tP5fH3BnTK+mWjJbpcWi8ZGjHCzEZdI&#xA;mf4hEOW4jyoknm3RiBsE3ntkSNiob0AOTRIWDLxU/wB1woQT0oP61CVRJWWQRympkJMTU4gjchNy&#xA;TyCj/PfFVbFULq3/AByr3/jBL/xA4qisVQumf7zP/wAZ7j/k++Kq80vpxl6cjsFWoFSxoBU+5xVD&#xA;i3B42rDmvEPcuybSkjjudhUlakeG3Q4qi8VeU/mnovmTV9CurTSEmntWdjqNpau0dxIgurgx8ChR&#xA;6BhuFbw7VzK0nh8R43H1HHXpfOjeW/NMcoU216rJI3p28huTKvxBauTqFHA2JH4AnNkPI/b/AMfc&#xA;E+77P+OvePyv0jzfp2hSDVFuoNJaN/qlrfSPJMJPqspJX1GkZV49d6E9K75g6049uHn1cvSie/Fy&#xA;e05guWhvRVZGhofSlrIpC14Py5Ma9NyeS7da4qq27u0fxijqxVqkEniaBtunIUb6cVUdW/45V7/x&#xA;gl/4gcVRWKoXTP8AeZ/+M9x/yffFVSehlt16/GWI48tlQ7+1CRvirVqFJmkXifUlavEsd0Aj3r3+&#xA;Dtt+sqq+KsA82+foPJtnc3n1KTUr2dmW0sInSIyFbufmTJJ8KhVauXYcEsh26NWXKIc3k83/ADlF&#xA;qTavDcfo+2gWBJ4JrJ7mzJX1Gif1JG+s8v3YiYfD4mo2GZP5WHU/7n/imjx593+6/U9N8t/mZa+c&#xA;tMdHsZdM1GBZZJLWRkkBQ2so5K8ZK7MaEfrynPppY6J5Ftw5xN6VmM3qN3xEaueI4SIwZiQB8QBN&#xA;V/ySfbx2xVqPa8nUAAFY3NBSrHkpJbvsgGKrNW/45V7/AMYJf+IHFUViqF0z/eZ/+M9x/wAn3xVU&#xA;Y/6ZEP8AiuT9qn7Sfsd/n2+nFW7UOIm58q+pJTkADQyNTp2p09sVVcVYnqHlnQvMEN9aazCslsod&#xA;hITxaP8A0m5BYN226128csxZZQNxYZMYkKLzKf8AKT8n49at9PXW7ZbWZJbgw1tCQ0Mke3qhfTVi&#xA;0vJQy1NCRWjHM4ajJX92P9KXEOGF/Wfm9C07yZ5W8t6Ii6DEpilWUfWeSuXRbWbiAy0UKPBQBmHl&#xA;zSnz6dHKx4ox5dWb5S2KV4HNpOE5FzG3ELTlXiaUr3xVonjeKB/uyM1q3++2FKJ/szUj29sVU9W/&#xA;45V7/wAYJf8AiBxVFYqhdM/3mf8A4z3H/J98VVFr9ck8BGlPhoN2evx9+nTt9OKtWHD6jbcOPD0k&#xA;48KhacRTjy+KnzxVXxV5X+Z/lHXfM+jXNlpZaWNHZ7qxWVoDMBc3BSkilT8LDpXMrSzhEnjcfUQk&#xA;R6Xgf/KovzESZU+q6ys3Nnig+s3DIE5AE8zbEsFBB4tUV2O3XPBjz4/9n+xxKly4f9j+17V+WXkz&#xA;zR5e0SWTVudrb3CPw0+WZ53EgtZayFn+Ibbb0J6kZiazLCVCPMdXI02OUbJezZguWp3MXq28sQCk&#xA;yIy0avH4hTehBpiqmJVd7adDyjmUqvFa/bUOG5GhVaJ9NRiq3Vv+OVe/8YJf+IHFUViqF0z/AHmf&#xA;/jPcf8n3xVUio1zOwp8ISM/FXcAvuvQbP/ntirdpy+qw8+XL015cyC1aCvIjYnFVXFXm/nnz1eeU&#xA;rC4m061ju9Vu2ZLOO4Zktxwupy5kZAW+ydgB1zI0+nOUkDo05swxjd5BP/zkH+Yj63BfvZwRNbLL&#xA;C9pHFftbGORomY72tZG/cfD8XchT8WZf5SPUH7f+Icb8zLvH2f8AFPVPKP5l3nm3T5LbU7GOy1O3&#xA;jllf6u7SQsptpQaF1RlIJ6H+zMfU6U4qPe34NQMljuep5iOQ7FUJHURWAepeoqXf4q+i1a02c+P3&#xA;4q3q3/HKvf8AjBL/AMQOKorFULpn+8z/APGe4/5Pviq2YlbfUCfhA5EM6UX+5Xf4fice/Xt2xVGA&#xA;BQABQDYAdAMVdirFr2z8u3VpqCeYRB+i0POWS5cRRofrdwqt6hK8DVqVqOtO+TxzlE3HmwnGJFHk&#xA;8rm8nf8AOPiavHbRyAWsyTXEzooMKyxyRcAW9ItybkxB3+z16Vzh49fSPkHFPhX9X2vS7PSvKWn6&#xA;Ag8sJbiycyhpLd/U5FbSWgZ6sfhB6E7Zh5pzJ9fNyccYgelmWVNjsVQcJpp9myb8RDQRpUUaimit&#xA;RlWjV8QPuxVdq3/HKvf+MEv/ABA4qisVQumf7zP/AMZ7j/k++KrW+K0vXj2MhkoY34tVF9P7TbK1&#xA;U+QxVGYq7FXmP5heRLzzhp81pbNHJ9Xd5HsZwDFPW5uKVrVeS0+GopvmVpc0YE8QsFx9RjlIek0Q&#xA;8Kb/AJx98/w6gtp9ViErO01qkdjY+ii1AJWQEgMtR8RfrSo7ZlieLnxD/SfsccxyfzT/AKZ7J5A/&#xA;LnVvKOmzyXpitkuEkjXTrenAFLab424/BypsKV275j6vPCdCI5N2mxSjZkeb1/MJynYqgztZRpJv&#xA;6cscYaR6luEwVWLL1Y0rTx2OKrtW/wCOVe/8YJf+IHFUViqF0z/eZ/8AjPcf8n3xVbID+jbnkCNp&#xA;/tpXbk1PhX7Qp94xVGYq7FXmX5hed9a8q6fNLotrDPqN27xwyXRYQR8bm4J5cATyIPw/LMnTafxC&#xA;R3NGfNwAPDm/5yE/M2XUY7wmDnbGW0LR3liYaSvGSAnAcnLRKF5qGXpUcmzKGKH8wf6dxzkn/O/2&#xA;L2LyJ+YmveatNlttZtIkubaOST61bEtG3K2lHFiVQcvCgFR2yjV6YY6I6tunzmdjueuZhuU7FUGA&#xA;RZSMoJKSyScY0oW4TFuIB7tSlfpxVdq3/HKvf+MEv/EDiqKxVC6Z/vM//Ge4/wCT74qsqBp1yY6V&#xA;BuKem5Tfm9fjb7LV6noD7YqjcVdirEdX1Xyrpem6neeaZreDRk2ne6AaOrXdwFHGhJNTtQVyUSQb&#xA;DGQBG7y+bzp/zjodbtY4fQl0+VJle7SeUJ6/OERKsZkDNVWetBtToajM8ZM9fUPnFxDDF/NPyL0n&#xA;TdS8lX/luOTyjNaTaaDNU2dKcjaTULj7XIju25zCy8RNycrHw16Wa5WzdiqCkI/Rl16lONLjl6jl&#xA;1pyb7RXfjTsNwNu2Kr9W/wCOVe/8YJf+IHFUViqF0z/eZ/8AjPcf8n3xVoCmn29Qa1gqHUO1ea15&#xA;AbV9+3XFUXirsVec+d/JjeZLYqk0lvcQSSm2b0pJYXP1mfmr+mrlSAVofwzK0uo8KV1YLj6jD4gp&#xA;4zc/kl50F+0aesWkZ3VhJf8AAxqwDUUzJT4X2PEU60zNOrxnez/sv+KcYaefKh9n6nqvkzyBP5dt&#xA;rm6uZ3mu5YpVeJIpkhjjEEm5eVE5NyIH9cxdXqhloAbBv02nOOyTuXq+YTlOxVCHl+j7jjUN+/pw&#xA;UK1eTdAdq+/frirerf8AHKvf+MEv/EDiqKxVC6Z/vM//ABnuP+T74qsRlOmWpTjxP1fjwJjWhZPs&#xA;8t6eCnr0xVG4q7FUi1G+u7Dy1fXdovK4ilnKAjkBW5YFqf5INcsxREpAFqzTMYEjm+cNR/MD8021&#xA;VrlmvRdwGa2hvodLLKFldS3pqNSIEbvEnVOOwOw3GWcXSvs/484IzXvxf7L/AI6+gvLurapqnky5&#xA;uNS4tdLFNG0qJ6aycY93C1anxEjY5jZ4CMqDmabIZwssqylvdiqHt0SS3kRwGR3mVlLcwQZGBBP8&#xA;O3TFUPdyGXQJpSwYvaM3JahTWMmo5fFT54qmGKoXTP8AeZ/+M9x/yffFWgW+oW5PIn9xUsBK32l+&#xA;1Taviw6dcVReKuxVL7e7trPTZ7m5kEUEU1w0jnoB67+HX2GEAk0ESkALLym9/NP8u11u3uo/L+oy&#xA;2kdvcLMq6PeBmm5x+jxjMaxMOPq1Zt/s09sngyVzP2/qcQzxXyH+x/W9Oj1PTdT8sTXenNW0a2kC&#xA;LxMZSkZ+Bo2CshA/ZIzHlEg0XKhISFjknGRZOxVRta8HU/aWR6/Dw6sWHTY7Eb9/niqFu6nQJieR&#xA;P1RqlyGb+7P2iNicVTDFULpn+8z/APGe4/5PviqxOA021pxKf6PxoTGv2kpSu/yU/LFUbirsVSif&#xA;S4tU0O6sJHMazzTjmu5BW5ZlND13GTxzMTYYZMYnExLyK8/ICxbWBF6mnrd3fq3Qb6vaCV445EWU&#xA;HlasxUicIxqTQ/aqa5k+PDu+5w/y2QbcW3x/W9VsdBi0Tyxd2aSGVjFNJI5FAWMdNh2FFGY+XJxm&#xA;3Kw4hjjSf5W2uxVRt6Fp3WnFpDRg3KvFVQ/6tGUintiqEuOP+HZeNCv1NuJUFVp6XYHcD54qmOKo&#xA;XTP95n/4z3H/ACffFVp5/onbkZY4dvszSCRB9zurj78VRmKuxVItSn1CDy1fTacCbxJZzHxAYgfW&#xA;W5EA+C1OWYgDIXyasxkIEx5vmS51Tz5dX8l2+q6o0kTvbxXhLx3IDMACp/QoZV5KlWRyoArU0zN8&#xA;Py2/H9F1/i+e/v8A+Pvozyxd6rdeR5pNSaSWYQyrHPMOMkkYi2d9l3Jr+yMxM8YiXpc7TSkYXJlm&#xA;Ut7sVQySNHYyShTUerIqsFiNCzMta7Lt3bf+beuKqeox+notzHyZ+Fs683NWNIyKse5OKo3FULpn&#xA;+8z/APGe4/5Pviq+02WWOgDJK/Kg4j429QfPZxU+OKusaC0iUcaxqI2CklQyfCwBO5oRTfFVfFUs&#xA;XULbT9JuL26YrBDNcM5Aqf8AehwAB4kmmSjEyNBjOQiLLyq+/Ojy3+mo76Py7eTQRxzh66Ze/WHk&#xA;LxGNwxt+Aosb1BPUih8cjwDXM/IuL+ZjfIfOP63p0GuWGt+Wbm/sufovBKCkqmORT6deLqdwaEbZ&#xA;ROBiaLk48gmLCdZBmp3Eoht5ZjSkaM+5oPhFdyAf1YqpSxLHYrb7cKJCfhLDixCEUJY9D3J964q1&#xA;q3/HKvf+MEv/ABA4qisVQumf7zP/AMZ7j/k++KqkJpPOp6kq9OXL4SoUHj+zuhxVu35D1UPI8JGo&#xA;zU3DUfanYcuP0Yqq4qlf6OttS0i5srmvozTThuJowpcOwIPsRkoSMTYYTgJCi8hm/wCccPIqa/HZ&#xA;FYmn1BLi/eZ/XM59F4lkpWQ1Um4UEcwKEilCcv8AGh/N397j/l5/ztvc9VtdBtdD8sXVjbMzqIZW&#xA;eRzUs5joT+GU5MhmbLfixCAoJ7kGxSuhWIL8R5OgIWlSOY5A17U+17Yq1cGphjPR5BU8uJHAGQU/&#xA;m3ShHhiqnq3/AByr3/jBL/xA4qisVQumf7zP/wAZ7j/k++Kqu63Z6kSRihC7DgxrV/fnsPY4qtUq&#xA;l6y/CDKgdQAeRKGjE/s7BlHjiqviqRaiNSPlq+Gm8vrvqXHp8Pt0+stz4/5XCtKb+G+WYuHiHFya&#xA;s3Fwnh5vmC68r+Z5bm4W4hv+PqvEttNPdmQoW48mb9NUYKSGNVB2pQGmZ3Dt5fj+k67j38/d/wAc&#xA;fR/leLVovI0sepiVZFglECXDFpViEVFDsSzE1r9ok++Yefh4vS5+n4uD1c2W5S3qM3FrmBPh5Lyl&#xA;FQSaKvA8abA/vO/+0q5+Ru4h1QI7U4VHIFQDz/ZNGbbvv4Yqp6t/xyr3/jBL/wAQOKorFULpn+8z&#xA;/wDGe4/5PviqpLRbiB6irFo6EkbMvPYdz+7+6uKulqtxAwJPLlGV5ALuOXIqftEcKCnicVVsVSmT&#xA;U4NM0W6vpwWjgmnJVepJuGVQPmTkoQMjQYZJiEbLxa9/5ySP6eSaHS1CWsU8Mumvf6UHLMY3LPJ9&#xA;cLIUED/sftb9Mu8Ed+/w/W0fmD3bf53/ABL2Cw8wQa75Wub+KF7cmGRZYJCpZH9LkV5KSppy6jK8&#xA;mMwNFtxZRMWE/wArbVFKm7larFFRFpyBUNVi3wjcNQr17Up3xVy0N49SCVjSgqajkzV+HoK8Rv3+&#xA;jFVPVv8AjlXv/GCX/iBxVFYqhdM/3mf/AIz3H/J98VVLmoEbryJSRdlUNUMeBqPABq1HT8MVdeEL&#xA;AZDT90RISV5mimrUHjxrTFVbFUr/AEdaalpFzY3alreeW4WQKxRv79yCGUggg7gjDGRBsMZREhRe&#xA;bXP5aeTYdXi0pteuEjkEtyY3vLhpFNvLHVGm9ainlL9k9QPskA0yhqJVy+9wzpoXz+56Fb6Fp+h+&#xA;WLjTrEP6EVvJ8crtLI59OnJ3clmag6nMaczI2XLhARFBO8izUbYVM0nQPIaDjxPwAR7/AM1eFQfD&#xA;FXQA+tcEg7uApKgbBF+yR1FSeveuKqerf8cq9/4wS/8AEDiqKxVC6Z/vM/8AxnuP+T74qvvuH1SV&#xA;24/uh6ql6hQ0fxqW470DKDiqrNEssTxMSFkUqSDQ0IpscVW28plt4pTSsiKx4nku4rse4xVJNVtN&#xA;Ru/K+oW2nH/TZJLgQjmY+VLliV5jpyWoyzEQJAnk1ZokxIHN82XH5Z/mS9w1rLEvOYuYrJ7vXWYw&#xA;8iORb6yOfEEE/uwK7VHXM276j5n9bgVR+mX+lj+p9B+U9O1jT/IclvqqmO59CRlgMjTempiHwc3A&#xA;Y/FU/EK+O+YmeQMtnN08JRjUmXO6Ro0jkKiAszHoANyTlLep2qMltEjDi4UcxXkeVN6t33798VW2&#xA;PD6sHTjwkZ5UK1IKyOXB+LepDVOKrNW/45V7/wAYJf8AiBxVFYqhdM/3mf8A4z3H/J98VRRAIodw&#xA;eoxVSs2ZrSEsWLFF5cqFq035U2r44q635ASI1SVkajFQoIb4xxp1A5ca+IxVLLnVU0rQru/eMyiC&#xA;aekYNKlrllArvTdsnjhxSpry5BCJkXiF5+eXn9tXW4i0S1jktYri3ERXWHt2MrRvzYjTwHZfQohV&#xA;6fEetRmR+X/G/wDxLi/muu1fD/insmk+YH13yndXkkIt7hYZY7iJWLoJBFybgxCkr8W1QMpy4jA0&#xA;5GHMMkbCfXXIwMq1q9EqqhiOZCk0O21a75U3L5H4Rs9C3EFuI6mgrQYqtt0aO3ijYksiKpJNSSBT&#xA;c4qo6t/xyr3/AIwS/wDEDiqKxVC6Z/vM/wDxnuP+T74qisVULSgSRPh5LLJyCggAsxcde9GBOKuj&#xA;CpeTIOI9VVlp8XJmHwMd9qBVQbfT1GKoO60eS5tLixmaCaxuTJ6kE0LPVZXLkEiRe7bbYQaQQCKL&#xA;yG78tflDDrcGkG/01IJBLOeEERto5lliZFMnIqrsXLDf9kkmoyX54Da4to7EzEcQhkr4vVdM0GK0&#xA;0VNO0x7WHTHiKxiCFqFHWnJW9Uj7PQ/wyJkZblqEOHZNZ+DXNsnwl1ZpQDUEKqFCVptWsgG/jgS6&#xA;+obWRDx/egRDkCVrIeAqBv1bFVfFULq3/HKvf+MEv/EDiqKxVLrO/sYInjnuIonM1wwR3VTQzyCt&#xA;CfbFVVda0Z1Vlv7dlYVUiVCCPbfFVOHVtME04N7DuyutZ4yKFQvwitVFVP04q6TVtMFxCwvYiDyR&#xA;lE0YXccuRBO9OFB88VS/zZ9W1jy3qGmWeqwWt1dwtHFP6oABPZiprxb7LU7HvkMkTKJAcnR5o4ss&#xA;ZyFiJunyTf8A5N+ZxqzWYsIfWnehkRrBo3j9QHkZDbumwYdW8KnvmAIZBtR+3/inqJ6jSTuQlEXz&#xA;9Mbq+7wj+Bz6vqT8tbFfLnlCz0vUtTgmuk5OyiZGWIOa+mpBoad6bVrTbMzBAxgAXnu09TDPnlOA&#xA;9P3+bI11fTDdP/psPBUUD97Hx5Eknata0A65c69q41bTD6SC9hAeRass8akBKv3O4PHiQOxxVW/S&#xA;2lf8tsH/ACNT+uKobUdR0+XTruOK6hkkaCXiiyKWNI2JoAfAYqmeKsY/wz5b1m+uW1jSrPUWjV44&#xA;2u4IpyqNeTuVUyK1AWjVtu4B7Yqqw/lz5EhnhuE0Kz+sW7QywzNErustsAIpgzVPqgAAyfbYABiQ&#xA;Biqdii3xr1liHGi9PTY1q3/PQUHzxVDX2paeiE+tG81u4Yxp+9lHA/vOMaVflw5DYfhiqS6j5j8w&#xA;Pfejo9hBc2ycxNNLPcQOsgBCIYksrw0LfaZuNN6cqYqg7PVfN817Fe3+l2kTxwSpbfVNRu7iN43e&#xA;Myu6NptuPhMacWAbZjTruqirfzL5gjNs97YwxwyFRdS/WJXjSq1/cE2cBnqxArt8NWptQqp5a6np&#xA;/KZmmSFpJDRJQ0DniBHXjLxLbp1ApiqKkobuFTuAruoK1ow4rXl22cj3riqtiqVeY/8AeNf+e3/U&#xA;LNiqa4q8g/Nj8zr3yLYyTWSxLcXXq0uJw5jQR3U+w4JIanl/KaDtmTp8UZAylyH482jNkIIA5lj3&#xA;5V/nX5o82+ZLXRru6Qxux+sPbWzespMLsq8pYYkCg0Zv3ZNPAdbs2CHCZR2r3/pAa8eWXEBLr7v0&#xA;MY8w/n5rMfmcrE1ollGwQWty01yU9VqKHVopVDEpQsHX6Mt/LYo+k7/E/qa/HyS3H4+1mHnP809U&#xA;0nyJpF3KVe+1SORpHMbx28arMYxHbwRCXkQFP2lcgUPuK4aWIlLiO0fx5s5aiRA4RzW/lj+cWp+Y&#xA;ry6tNUkS7tNPtrlmtreL0uTwxpKqyVji+DgrBQq8Ty3r2c2mhVwPWlxZ5XUu62Hah/zkZ5s/xQL3&#xA;nbwW1s0lpFbKtyysJJYuatH9XPJqxgKwkPcKRU5P8viBo/Pf7uFh42Q7j9H62dfmD+cepaHomkar&#xA;p5SyGq2xkuIJV9SP1nmEYMICSPyJR9uJB5VpXfK8elgDLiO0TTOeeRA4RzCB/K7819U8waTq8JYJ&#xA;cWVndT2l3ao/FWto+k0MscSNXap4V5fDyPZy6aBAMesq/F0uPPIEiXdbD4Pz78xL5lSNW09YHkWB&#xA;4rYzwq7IhfjSKICp5V3n+nbLRpsV8P22f1V9rDx8lcX2fg2zb8zfzn8xeWJbD9H3CRW+pWVrcql7&#xA;FykjaXm7CKSOJ+fwMq0aPdl61O9WLTRAJketfjm2ZM8jQiOloj8sfzc1Tzta3FnqIilkgS6kS7iV&#xA;4/7uGRCjq8cW/wAY6KKbjfIajDER4499fi6ZYcsjLhl3W9wzDcljE3lzRdea6tdVtVuYlJZK1VlP&#xA;1q53VlIZfoOWY8soG4mmE8cZCiG9C/Lnytocgn02B4r0AhbwyM8oDdQOVU/4XJ5dTPJ9RY48EIcg&#xA;l+oflR5autS/SElskzli8sLGSESs3dzEwUUO/wAMY965KOsyRFAsZaaBNkInV/J9jfadDptxpglt&#xA;LYf6LAjq6RClKRyM1vMp9viX28K4ZpxNg7s54oyFEbMas9Z/LHyRqkelNJ+idYu4yfXufVaOWIEl&#xA;g0kqoAq0rJRRxA5HbfDlzzyfUUY8MYcglkKfk7q2oHUbFbO8iht7uW8sbLU7ST/SIpUW3QJHc8R9&#xA;ZX1Gjq6rxHx8TsLBrMoFWwOlxk3Sd6rrf5b6/JY6NcmPUHmHp6ObMSfVFHoiWlvPCCGHpKDVQQeN&#xA;ANiMqx55wNgtk8UZCiE58u+TrPR4ZI9P09rcXC8ZnZwDIn8skrGSWh8EjT3w5c88n1FceGMOQQyf&#xA;lH5Wa/8ArhsooF/5ZUaWWMEGvNeTItfYoV9ss/OZaq2H5XHd0nOteQ/LmtxouqwNcyxLwhuOXpvG&#xA;vgnp8EAHhxyrFnnD6SzyYoz5hB/4R8v+XdN9PSrUQtIJRNKSzyPxtZvtMxP3DbHLmnk+orjxRhyD&#xA;LcqbEqsba65S3FvNGnOSWNlkjL/YuJiCCHT+fFUX6eq/8tEH/Ih/+q2Ku9PVf+WiD/kQ/wD1WxV3&#xA;p6r/AMtEH/Ih/wDqtiqhMt1axyXM95bQQoC0kjxukajqWaswUdeuEAnYIJpgt1+ZvlxNWt4H8yRm&#xA;Fo5Wa5+pExpKrxiJOR+Lk4ZyvHb4TUj4a5H5PLV00/mcfezPTm/SFql3Y31pcwSAfvoomKvQftBJ&#xA;gK77gjbKJRMTRboyBFhHenqv/LRB/wAiH/6rZFLvT1X/AJaIP+RD/wDVbFXenqv/AC0Qf8iH/wCq&#xA;2KoPVrW9exmknnjZII5nCpEyEkwunUyP/P4Yqm2KpdZ3kcEckckcwcTTnaCZhRpnYEFUINQcVV/0&#xA;nbfyT/8ASPP/AM0Yq79J238k/wD0jz/80Yq79J238k//AEjz/wDNGKsb/MDSF80eWptKglntpmZZ&#xA;EcwXKqxWvwsUTkAa9R0OX6fKMc7LVmx8caD5wm/5x18wm9kmTRz6kr8pLg/WWJUtU1JuFPL/ACqd&#xA;aNTbM3jwc73/AM79bicGbl+r9T338qvKo8naHLaT8w9wyuLWC3nEMIVaBV/djff4qDMTVZozI4RQ&#xA;Dk6fEYDc2Szb9J238k//AEjz/wDNGYze79J238k//SPP/wA0Yq79J238k/8A0jz/APNGKobUb6KX&#xA;T7qKOOdpJIZFRfq8+5KkAfYxVM8Vf//Z"/>
    </rdf:Alt>
   </xap:Thumbnails>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -644.562 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 644.562 li
219.134 644.562 li
219.134 0 li
cp
clp
[1 0 0 1 -38.1234 0 ]ct
set_def_flat
.3 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
38.2734 644.412 mo
257.107 644.412 li
257.107 .982971 li
38.2734 .982971 li
38.2734 644.412 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBAAAA+TimesNewRomanPSMT)
%%Title: (PBAAAA+TimesNewRomanPSMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBAAAA+TimesNewRomanPSMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-167 -250 1009 878} def
/FontInfo 5 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 90 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 12 dict dup begin
/BlueValues [-15 -0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 4 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
38 <001C60D8A8C9B7EF32570D6B05726A7DC9CBF7A937224F99F54932C8139F
C1E154126617FD8F48B3D7BAC0B69C9C1A16A2BC647842FE4F62193A88E2137E
065DA30CB9BBE5F02AA392C91CF51BC738F113AEA70CCDF7411D7289293184C9
F73045409704EA96E50DE6E7F28175AD0F0C27A8F3C674FCD5F84833C60AEA70
7B3DE0601831B01A709C32DB7A163AFD21E527E36673> |
40 <001C60D8A8C9B6079F1E4BF1DC2A6651EB31AC6C26E22D33978EA562B626
51C31F57797D855DA0FE2DDB8DA8AF25B887E1075748DE194109143D14D6CDD4
08ACBB0ED185A6B34F03DD7E9EFD3CC4713E3C348446EE98BBA7792B2C4F39E8
A1C1736CE084A402ECB6C63CD6CCDBF790A12D22EAB5A2B37EBC707D01FE> |
50 <001C60D8A8C9B64EDF88223AA7FC7D1F40126611F643009DFE83D3F5781C
874DFBCB45D1D7929395DB931641A252AFE7532AF45E20B581A56AB4228A6298
A90B968908173DFD85461595FC79C7EF4A44643611D71D3871E913107134713A
FCA8707888E7C18356804B6BACF2254C9FF5611A3989D2D1FFD506025192104A
C81F393C2A77C7CE2915A2EF0D2C8700762830BDC70240BF> |
0 <001C60D8A8C9B8707C25> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBAAAA+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/PBAAAA+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
reset_gvm
/JYIOMZ+TimesNewRomanPSMT /PBAAAA+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPut
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
40.0885 4.16663 mo
(\000&\000\(\0002)
[2.21222 2.8727 0 ]xsh
120.692 514.816 mo
174.69 514.816 li
174.69 65.7808 li
120.692 65.7808 li
120.692 514.816 li
cp
@
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 7 GetGlyphDirectory
52 <001C60D8A8C9B7D8BE6A4264BEC714251D7358A27413E9DD3888F8AFC127
5438ABB33D22047FCFA716D8B6736E586AAA50BD7CE151FD6921D718C80B74E2
76A2E6A002FBBA4A72DAC5D101F23E209961> |
63 <001C60D8A8C9B7A73DB5FD3C3C9ACED4FC0958457B2CE776857580B8B6B4
49> |
43 <001C60D8A8C9B6079F1E4BF1D2F1A5C4F07672F4B534EC1C435E7FE9F81F
C8FB12DD80A386B633398AA6EC495A1718A1FEB6EDF9E104F5A6D66AB80C1EEB
EC0EACAE3938D4029884E3CAE670C0D8E18AADE9BAC2B822E9D442E8723951E0
A74C2B5FE5785C9EF276C84CB3FDBB4D5A224A9F1F9475E3C7F50EFF9B7B3B20
D345C5CC767197E25A67766D16> |
69 <001C60D8A8C9B77FE2440C4A0C4012CA2ADDAA2063D74E7F1A056744D16D
C4F1711CD9A18819F63D090F36F7759337998C39810BF5A75C4828A06DD1AF80
A5B613D3D44E1887EDB74C939F0B6ED071D10A7C11B64F96C2949994CF7E7250
7E> |
82 <001C60D8A8C9B81F2C46F55B66694B115BD121138C19EA6BB9FD984C0942
F5BE9BA3E0E7EBB2018BE83686E102B27E1C88BA6D9BE7D70A632CD920E3703E
8D8D15ED7E1F6A020FE02AA28CDC7F54E608C30FBA8C4DD184C53E85A431C8E7
3043246B8979CEC608E30A3BD7E246D677FB58B56F106BA62A3BB585DC702410
BE7140E999648CBD61D9A3D00AB03A46EDA4208CD781252C0EC7BD> |
78 <001C60D8A8C9B7A73DC54E0D6D91C3E91980CDB9ED8628529863FDA8E594
33DE6741508E85BB48DEA8D8F35995C79E16FB246C14C08E968E06B7EB28A263
EA4D02C2D4AC4FF358B280A76FE85394C58F344B6383A76E82DD831EC580F79F
58C4C189013A273849481BB8E811BC56A157758889E377E0218E8E3AA75D3961
996A62> |
76 <001C60D8A8C9B854D088800233608AB7E159853CDC033D68C9DCEBDCCC1C
82ADBF3176A6831F1DAFFBB44FE9EF2050184C8695C4469941A21B63DD60DB9D
A8EC0CF46B8C9B9638> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
122.508 68.9634 mo
(\000&\000&\0004\000?\000+\000E\000R\000N\000E\000L)
[2.21222 2.21222 2.43102 1.98941 2.8727 1.7666 1.32491 1.98941 1.76659 0 ]xsh
125.239 278.362 mo
170.143 278.362 li
170.143 72.6016 li
125.239 72.6016 li
125.239 278.362 li
cp
@
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 2 GetGlyphDirectory
79 <001C60D8A8C9B7A73D33B50B81AA1C79BFF5C80FF2E6B8582B3CBFC87079
3B8FCBB77F0EA55A311ED358B8FECB0DAF14839129AE21B31EDE6FF983A86443
6BE5880861C7AF605C2602EA8055F331AD0A14B46B75CF9DDA28DB> |
68 <001C60D8A8C9B7A73D33D910C0ACF53AD6F42F01284C649BDAE51976E560
22F2B4FF67866F5FFAAE991D2FE95B6A3269750D6D28FEA3386AF5F1BC91895F
F64FAF866D9F578633EC86294552548FB9F2149F1A58E9460FE5F18391C90B8C
D3D2E4DA7CFBE445A6D12B12BB75D90E7A342C2D2697650AAA0DFE9D43073FC7
096E7B571F5D9544F410220D> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
127.055 75.7842 mo
(\000&\000&\0004\0002\000E\000O\000R\000D\000E\000R)
[2.21221 2.21222 2.43103 2.65388 1.7666 1.98941 1.32491 1.98941 1.76659 0 ]xsh
42.8208 614.856 mo
252.561 614.856 li
252.561 545.511 li
42.8208 545.511 li
42.8208 614.856 li
cp
@
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 6 GetGlyphDirectory
35 <001C60D8A8C9B64EDF7FCB1225CBEBAD7C2A1CDCAA154679A537BCF30C43
6AC0686DBF251E622CF18D32C29E14A13579E37F151EDC74261EA3C2645F3C00
9649E8FB800A09E17F1093EAEBAA6F4D561E521DEB52CBB9CC47D2A1DC164237
90240EA0E7F9DA2BA7D79446F5CBA5E01E4CAFD0AFED04> |
72 <001C60D8A8C9B7A73DC54E0D6D91C3E93CDFF2BC7A6090CA1AFC8FDDB4AA
F1ABF332006EBF2179850BE212FF452D8F34D04CAFBF02AF2781D3A40E922C0F
C4106376319FB63C136C5975C20CB8C4BBC583957E1CA0AC4EE54E4C7F68BC2B
129F991D204B58FEBB07CDAC87F0817C48DE76B39686CE7ACDA013E64D8F81B6
CC34C60810DF62> |
67 <001C60D8A8C9B77FE244009C258FADAA07F014CE6C4ABEFB72A26469A252
E9DFAE205BFBD959746A8748AB7F7E40274A049BB0B50D1A1462FD6FE178F77B
8B5C34BE483C7E3CFD4F3A9C6CCD6DFFB51852989FF7A04BC0D8EC> |
75 <001C60D8A8C9B7A73DC54E0D6DF53AC033F4F221AAA569BCA1E5A0081884
376EE5E9F580D7869189E19728FCE941A88EFFE1FD3475A7C6156A16925679F8
82171B8568549694771F07374784598FC615334A193E7CA66A65411D7C0F2F39
0ED9F8F111C50B1CBFFDA774218E6FAC66544C42A3B9C4F44F871DDB3EC99D26
A0D9AA1585AAC88B1A8D6C41D3CD2FD842D7> |
81 <001C60D8A8C9B7A73DB58523B2CBB9A0344D4875C97BDE290143B8751D16
E3F36C725F9FEFAABFD349337BD59ABB5444C5816877D743A240DFF7B1EE044A
F4FAA5B3FADA1E9FEC3AD2FC0745B8375D27871B5344941BD2B54A316DC6CD7A
E0D98FE47332D1CA0457EF77DE7AAF816D3217F9E6E22124157FB9256534A0B4
EA7A078D> |
80 <001C60D8A8C9B7A73DB58523B2CBC11444D74BAD907DE332A89EA6FB9875
88C903A3CD500518A0DEEF7A7F668852F0E4B854C7478351CBD9852DF323DC28
4C4FD7379698BE6052699146D0B7DB52C2D10DD7D1B53B73A103D21C42ED01C5
2DD568E7B1FB1ED77847816DA566BCE943E7B9942E380DE3DE1C3E349CE5A18D
77ECA3AC159C1DAB25EC5DEDC3C075B7D484296634> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
44.5912 548.693 mo
(\000#\000H\000E\000C\000K\000?\000&\000R\000E\000Q\000?\000\(\000O\000P)
[2.6539 1.9894 1.76659 1.76659 1.9894 1.98941 2.21222 1.32492 1.76659 1.9894 1.98941 2.8727 
1.98941 0 ]xsh
167.3 17.4669 mo
167.3 12.1304 158.521 7.80377 147.691 7.80377 cv
136.86 7.80377 128.081 12.1304 128.081 17.4669 cv
128.081 22.8038 136.86 27.1295 147.691 27.1295 cv
158.521 27.1295 167.3 22.8038 167.3 17.4669 cv
@
167.3 17.4669 mo
167.3 12.1304 158.521 7.80377 147.691 7.80377 cv
136.86 7.80377 128.081 12.1304 128.081 17.4669 cv
128.081 22.8038 136.86 27.1295 147.691 27.1295 cv
158.521 27.1295 167.3 22.8038 167.3 17.4669 cv
/1 
[/DeviceRGB] /CSA add_res
.84314 .18039 .15686 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 18 GetGlyphDirectory
65 <001C60D8A8C9B77FE24414BFDEF4E80C4D790B946AE076B4646C6C07F81B
63278106ED9FB404501811C1433BB554E5AF6B151556DC4888DE61E0E453C2D8
67FF5FA12CB2514FA57D4B2D64E56AC0AA25BEB67F6A8B72896256DD560EDD23
8056F1D454F3C5692E86E47B5E20E9285262829D061BA455239B9A260858B024
89FEE0CDAE3B3615E7DEF515A3A31ACC4D34C45CBF8EF3D4BEFE8929ABF7E290
56B502C7AD2297ABAD0E2B16AFCA275D51DC4912316BEE36D646955956EC70DA
4CEFF7F44C20> |
77 <001C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C
8682F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4
CBA64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA367
62A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF
1A9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC6
1FB9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |
33 <001C60D8A8C9B6079F1E4BF1DC8BAEE167F4E5D57E58C774FB58A755AA35
7C22D1ED5C8ED7DEB608E23F6F2F868C25B34695D15904E732B031E4FC539E41
32DCB09444D117EE3C11BB69F33597FCE2934E2F78026BAC67783FB3190DCB89
23F55E3C49446B35EC95B523327C8459649608BAEBF36ADAFB60127C0D96C2F7
39B3008DC959BE1C4C> |
84 <001C60D8A8C9B854D086439EA80B8393FEADC0052C70F648CAC1AE89BB31
7E735756E59E2E6F0095662D082F1C3CCBBEC180A0941B60E580CB7338163E76
3332C8A3E3C3B391BD27C4C84B1B4827> |
36 <001C60D8A8C9B6079F1E4BF1D2F1A5C4F07672F4BA2C53186AAC39586E44
2D219F5855CE572BEAEE72C973AB935CD85279B4863B8A8B46CBB4EBAEB1BE1B
4D0BB20AEA3C9965A91B61EC38596D49AC6AC0FB80A872DA6BC5C443F756C186
4E6598C431E31C4915F4E3541E0E251FA78C26836D973D0123EED752ACDD18C0
C08A> |
87 <001C60D8A8C9B6079F073CF9E6A5EB72D445731B5E0456E4DB359444EFFF
4B685396935923E54788ED02053A17D782E231177D61306C9F704B39DF55CF69
6C2804894B157BC570727A2580234FAF20F702841DF1FDE179B4E433369755B2
BA664B1C425017FD5312C5893AB7E03C332CB9083615C1B624841B30CB072D36
C08BB26382F561E2C951C84ACC5A58A72F31> |
29 <001C60D8A8C9B7E7C1AF9C0ECD71E0F97FAC351E41C08236021EEA24FDA5
A270FACC4150503A3B7E0AFDAB35AA12AB> |
23 <001C60D8A8C9B7A73DDC2846EC3FFE9D97F708F836AD4652517320EEF9C1
457D81DFE2A37E2A269FF9A627B6A741B913B00490531A41C8B347> |
21 <001C60D8A8C9B7A73D33A7C131526B80A16A362E096FD4079A6DA447FC59
2CE50E05C444F03F4DE25BC455446EB10265A6929854EAB3F755631C90267B50
E2016F6B8C24401E3E0E13F1BC900E4A2A974AAD23E1A92F16F2A187> |
22 <001C60D8A8C9B7A73D33B1D140AAC14155FC1FCFE6DD8AB8F22E13C718ED
89233AD4E190247C3AB22A2026E789542850989425F13240E4E3BC4A3AEE8BEC
4A010D0FF4B02A5A2A974A72703B2CED6E391EDA7135F799F0E2774CD963DB31
6092272A20418D67BEB1D69F76AD4C3604A41D9F3987EA4646> |
41 <001C60D8A8C9B81F2C46F55B675DEF4FEF8ADE520CF08579DFA34CECB03B
463E5222CEBCCF7773FAB0DDECF679E85A200813B543B76FAEDFBB0D9E4D7C99
AA72> |
15 <001C60D8A8C9B854D091294BA964F9E25CFE18043999BAF306FB875B6056
B1726DF221F6> |
47 <001C60D8A8C9B6079FE929F62CD03BACA4012B715234DDD47E1ADE9EF370
1533C99C1D1C2F1FE2455EE7C9A018A8E6F160DE879E0A52C5AA2BF1D820289B
914196926020B8F8893911DC206BFEB8169825A7ECA0817FDB72CE3D23454636
D18C87AEEEEDD158> |
26 <001C60D8A8C9B854D07EFA5BC44CDCA65AC61438A640D45751C4E559024F
5373B530CA4565CDA743DC3524214BBC3C51773E66C429B6F6EE3B074F8B4963
DF62E4005139D5C0268D83> |
16 <001C60D8A8C9B7A73D33B1D1416E04E763984AB83B925BA8A4FDE215501C
A86FB8A0453E2C2116D4EBB36C4E7E5E28E3C02FDE0FF4A749E3E3B61D0B5972
B2FA36E008E079A694D81C4B7A2CE9635E3FDFE8FE87FF8DA92D> |
13 <001C60D8A8C9B81F2C3AF5C53E83EC03ADCDCEC812CD6EC7C2307B868B7E> |
30 <001C60D8A8C9B7E7C1BE01BB5DDC7F768E737164A416C786E9248CFCC3FD
6BCE4AB4E941675EF23EB217BC6AC0> |
18 <001C60D8A8C9B7A73DC506FC27B647F3B220444418F84A63EEA0C85378D8
3FED067EE2616181F53C98E193A0786AFABC6AF3DE813E5DFEF95B86E3C09F0D
4E4645F3E651EA1566CD58B7401E11D694DED682CB44FAD00D6F212FF07D> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
132.882 13.8288 mo
(\0002\000E\000A\000D\000?\000&\000R\000O\000M\000?\000!\000T\000O\000$)
[2.6539 1.76659 1.7666 1.9894 1.98941 2.21222 1.32491 1.98941 3.09552 1.9894 2.8727 1.10611 
1.98941 0 ]xsh
137.508 18.3756 mo
(\000W\000O\000R\000K\000\035\000\027\000\025\000\027\000\027\000\026)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 1.98941 0 ]xsh
138.225 22.9234 mo
(\000\)\000\017\000/\000\032\000\000\000\020\000\015\000\036\000\022\000\025\000\026)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 1.9894 1.98941 0 ]xsh
170.427 50.4337 mo
170.427 43.3707 160.247 37.6446 147.691 37.6446 cv
135.134 37.6446 124.955 43.3707 124.955 50.4337 cv
124.955 57.4976 135.134 63.2227 147.691 63.2227 cv
160.247 63.2227 170.427 57.4976 170.427 50.4337 cv
@
170.427 50.4337 mo
170.427 43.3707 160.247 37.6446 147.691 37.6446 cv
135.134 37.6446 124.955 43.3707 124.955 50.4337 cv
124.955 57.4976 135.134 63.2227 147.691 63.2227 cv
160.247 63.2227 170.427 57.4976 170.427 50.4337 cv
.4549 .68628 .81177 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 6 GetGlyphDirectory
17 <001C60D8A8C9B7A73DC54E0D6CDEF63D6D8B1D1BAFF1FE96FACEB5D2E94C
C33A048E79C70D79DA501F0FEDC03A8E3E458B1265FD28A5171BD1D712647122
7C327E28D3395C> |
10 <001C60D8A8C9B7A73DB6B12BEED9426F3F4202C6D6250C45067020E4DDC9
873A784C87319B53B2C2B69FABEABBA974C173831226BA5B05EA4F516ADB3D9E
F2C43F145A18DD9CC05C967084E003EABD72FB3480ED5D9974C382650CE8F67E
29D11470BF275856FE317CF0903E16BA1B87805F794ACBD09CA3C63583E5DA60
9365A03224DE0FBE18B56FDB1412CBC282038F1D4B15C07BD146B681DC3B9F62
04A2DB688124BC8A5F7A51320F23DB2CAF0EA4430FB80F1478BC8004> |
51 <001C60D8A8C9B7EF32A0DFC6B59335E7B48DCE926E1B31073B658618CC17
3BAE2E82F286F2291295CDB5AB9657AB1BBBD190E4C6BF2DFF01205516B6A78A
7D69F785C71BE47FF63809205DB5BBCF0A256984EF27622D8241DD7F9FBCC821
12F04EF9020521FE5DF6C368C3179DB8E88221F39487941BA96AD3F9266769B0
3E87AB4C4374D09CF749D54B9B938609847A8848FE79A9B53A93A901FEACE442
F1333F7B9B861F00C1C8FEF786085255E8F395374D06DDA2061888002C498A29
17D0CB1B6D95C20C266822BB4B7044> |
37 <001C60D8A8C9B7D8BE6A707DDA156E602B4D3783BAC9F66D9E14D07272FF
2B0ACBC02ACF5DFFC08DD010957A67CFB5BD9F5C514738D514A6807FAE015DC5
2FB9E9D8B8ACAC82C0B54BB43F7DADD7548FDCDB21A30C659C75F58E7557A526
258D65798AFEEA17B81BCC50B207D79751F92B32F4617AEFC9133DEB71B47914
683BF8F7E80D8B427DCD5C272A4CD16742391AAF986CFF65FAD517194B8C98D3
C05676B2E0411AFDD0A41E4F82F57478ADF0CA77EB> |
53 <001C60D8A8C9B6079FE9309DB383D4EA1768BEBE283675DF22423E7BCABF
EAF8AC65B511EF8C66F428C5FC7C71A85DE09E092EBD7B06C5A98B26A2DCC467
DC2B92AE8E980AD5A5CAC9677DAD42A06F224FFF2848DB66060C7FDD4415550B
088476D1EDCF978F84F61009F8A747BB2BA290CDE0CF> |
44 <001C60D8A8C9B7D8BE6A4264BF1F58E097905B91E5DDEBE2565A5BB546DF
A9338482316F996708EA6F45CA585ED4FB7CAF469EA99235751239F96368E075
599377EB863D7FC3E94314F710C454AB2E8FF3D7AEC1FE1922B2BEE9916245> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
141.941 44.5225 mo
(\0002\000&\000T\000O\000\)\000&)
[2.6539 2.21222 1.10611 1.9894 1.32492 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: HIBBAA+TimesNewRomanPS-ItalicMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HIBBAA+TimesNewRomanPS-ItalicMT)
%%Title: (HIBBAA+TimesNewRomanPS-ItalicMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HIBBAA+TimesNewRomanPS-ItalicMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-191 -250 1031 868} def
/FontInfo 5 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 85 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 14 dict dup begin
/BlueValues [-15 -0 662 677 430 442 694 694] def
/OtherBlues [316 323 386 386 -216 -213] def
/FamilyBlues [-15 -0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [32] def
/StdVW [81] def
/StemSnapH [32 55 58] def
/StemSnapV [81 103] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 13 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
52 <001C60D8A8C9B7EF32570D6B0B839E1650A3D692ACC47B7DC963CB3EDF92
B062A97F429C308BC9404EC4FA431D24B364B85531756EB72F5190043FF0F02C
5518356669839D384A1F5EDCB11C81E78FECDAB9EB915F6D70DE5582EF2E2C2E
311F468945BAC797> |
69 <001C60D8A8C9B77FE246CAB5AE1702FC6734F9BF28BAA824E2F8F64ABB30
AD5EB761F6FC4E64740AFA57BF008E40707528B3ACFD9DDC93FA4D090142D1E2
5246F3E2125758DD6D84D94F6ABE2E5E425A309F6AD9F1CA2979966287B90260
0190F3B55AFDFBB415BBE5006F56C47D6B3A> |
76 <001C60D8A8C9B854D07CB2195F20B808179112145C5E63A19C874780CF17
BAC1D9D946EAE413F64C82CB1BD0CEABF461CBE45D3545236658B8FDCEE34720
9084C5317176547C802850C01CB79D5C8B1688FE9F3BE8B69823F66F4E45EF7C
BF1775542798D8189326CADB5BD2DD4B42E4234EB08F87A0A3D877859612C01D
3EA7B87CE138DFE2FB> |
80 <001C60D8A8C9B7A73DB58523B2C96D25B5628684135DE04D4D4073D109D5
CDE306E5064EC39AD4643DA84032277C31A581F278482E1D5572B3FAD1C2F8D6
90AE11A07C4DD9D43A24804BBDC42E49ADEBD5B9A31683814D56E9B980EEEC56
B742DEF56CDAFD7911E813DAF0DA1537FFB5E690139F911D5D8A12D986BBA712
0E84AADAB71A3EBC9FF8E8DACB727D76419F979DE6FBD3E6974A657614DF4F7A
F8F9C976D9B797B861CD2E9EBC304F1EAD2A5347023D4AE3D760A9E5F2C6DF8E
6887> |
79 <001C60D8A8C9B7A73D31DFB2062F968BFBE3F4379943E8FB9F42A35A832F
59626E5C1680B55A4AA852B6595A18BD68D361061120158C02E475C0CDC84D23
A1913E43D3532CF4635DDABE7CB559B75990F77BC4521C79> |
82 <001C60D8A8C9B7361F55E947F6ECDF2FBF97D71CFCA5C20ADDCBC219704A
458C8A3588E37CB243071ABF7F40F2FBBC2C6FCC72B116F84717D5EEF56E1174
1E1CC363C49847A2750056866E702C8D318CEE2EDC5C90885456CAB2FBFC8124
F056B884C3BA3D3213C6B590AF0694605FE771C972E868111A3E> |
84 <001C60D8A8C9B854D07CC9A59183C227D7753BEA9C144608F6C77660D89E
6B523B8C584E0995B406951D7A4BDACCDD45B87293B2D9D568819EAC7BD692A6
2194853665CF2D466AC0E9ABE31AFDBEABB02EA0E5873195B87FD335AE41BB03
3C37B87C03D5AF01310027A4E0126D> |
0 <001C60D8A8C9B8707C25> |
77 <001C60D8A8C9B6079F3517E075D42195DABA485328835BD4D40CAB18AA02
076174E9C34F8EBF6B114C410D5B0124FECABB85035C37EDB91547789FFB5E11
563FDD7271D8F3C6D9736A1FB7516A8FCA75A307922191BAF67FED6FAEDDE390
7E1D135D70C5B87AD16F45EAFEFD99E5529638E2EF60EC698A59DC17B11040B9
97DFBF020B11B041430B41F8A546683E3B3BCA821A4F46562A81BD971172C406
D3A8730E66B6B6FEA52971EAB094A49D75F0AD9B0C6A82F3C9D706BCEDF7D966
E310E0094C8EF0000EE899C503B981A2400813D1C03FE654DBF183534F326624
7281942F48D44755B607D767C5A0B8B6BD36488A0F10065D1BDB8ABE2FCB6808
CDE9C7C951B60363B98FCACDD6542AE767BEB52B6BE1D9323C0C72> |
83 <001C60D8A8C9B7361F8AF8577DCF5EDD90927A76ACB05007E2203213D083
537777F259DD9CD3564821C0CD42C476A05ABBE114E88F5CEA795324B9FFDE7B
5DBAFCBFB46299E95E3A8FCCDC0C64FA54D961CD2250954615F6BD41E968BE56
2E7202A16D0E70EA2AC8C6B89136E14F28E4FF0EDACF9B4FA542682D2B0A79F3
EA4E4252CE2D8BA758B45234A51A7931030E29B98F04AC8E7B31AAFE4B0901EF
AD8736F861196A4BBDABC181E8B5DF0A3C3315F3A7C3A8CD86BF4F248FFE20CC
5175AD37B29E57E21F5742EE82939E3B4AC8108083CEB9BDA075EE9B349E3BC2
00FC4CAF847149ECA3B5A48CB2BC2433E8F6360F6813AC84F994B739F7BC389A
04295C8CD2C47406AF8357B668127C02FBDB5D61DC0FA46528278F85D2591F86> |
65 <001C60D8A8C9B7A73D31B90F5B79025CFEC66657533474F76FC286FA481D
4BAB74CC2FA6464272BA3BDD486260C5ECCF80343C624FE90140A9652CEEFBC4
4E9C0E052751548F07A595D667EF903392EAB2C0A14EB4C0B07912606417146A
C920090281CC473BA5B472F4E9C8CD20A198C4BA4D50D726AFED328B2F29465D
868DFB56D4831AE99ABA069A1338B03C996097E3114970D5C8B5928E12307A01
A85786CB9730F47BA9BCE1D20B4290A6B9FED5094F70EFC97C4A4EA72CE8> |
71 <001C60D8A8C9B7A73DB5801DD82D73030101AE163B6DC5A59C888E2B10ED
8C567E19E17B657DA8443D998F9C8BAD28AAC1606A8FF8092CFC3B0F738ACAA7
003FB286B40DFD4E507DB6106C0B2EEA85697CA29719A02BA834498633A0207B
BD79D3C4D43F61DFDE78F399E1F63174925AF181EE41690953C4C808E3503860
9DB632878BD8AED2BC2EF45678BD98F9465C76DAE378E150C4066BD03B93C572
2970F4C1D8141C6D5D07986BB9CBBDAFCCB2A7FA63282A0CB03F0B87FB5728AB
9876372ABEAB464645A43CF252A71F42AF03E1412ED0C290DFA6D323E5895A68
A0845723ED937802A398243B32074F4429D0D9900FAB81DD60631FF9E9EAFD77
C9BC35AAF3F26C1392B76BC8A1F8111E56D87128A4564DE7DAA9A00A30BD205F
FFB81E1FEA114E3FFF0F4E99D32B1E1C897B7366495F3A8968642F5A0A7B7F13
92730FBD82944047260BF8B44D335ABAB4754EDC7FB600679292E9E413C5EAE8
0AE88C6ACEFEA73F42F1C689DDB9> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HIBBAA+TimesNewRomanPS-ItalicMT-Identity-H /Identity-H 0 [/HIBBAA+TimesNewRomanPS-ItalicMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
reset_gvm
/JYIONA+TimesNewRomanPS-ItalicMT /HIBBAA+TimesNewRomanPS-ItalicMT-Identity-H findfont ct_VMDictPut
JYIONA+TimesNewRomanPS-ItalicMT [6.14905 0 0 -6.14905 0 0 ]msf
47.1903 67.1294 mo
(\0004\000E\000L\000E\000P\000O\000R\000T\000\000\000M\000E\000S\000S\000A\000G\000E)
[3.41887 2.73018 1.70943 2.73018 3.07452 3.07452 2.39203 1.70943 1.53726 4.43962 2.73018 2.39203 
2.39202 3.07453 3.07452 0 ]xsh
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
137.506 49.0703 mo
(\000W\000O\000R\000K\000\035\000\021\000\021\000\027\000\027\000\026)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 1.98941 0 ]xsh
140.214 53.6166 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\015\000\036\000\021)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 0 ]xsh
130.781 58.164 mo
(\000\012\000\012\000\012\000\000\0003\0004\000!\0004\000%\000&\0005\000,\000\000\000\012\000\012\000\012)
[1.98941 1.9894 1.98941 .994705 2.21222 2.43102 2.8727 2.43103 2.43103 2.2122 2.87271 2.43102 
.994705 1.98941 1.9894 0 ]xsh
147.691 27.1295 mo
147.691 29.4034 147.691 31.9605 147.691 34.5186 cv
@
147.122 34.5186 mo
147.691 37.3604 li
148.543 34.5186 li
147.122 34.5186 li
cp
@
147.122 34.5186 mo
147.691 37.3604 li
148.543 34.5186 li
f
167.869 89.0855 mo
167.869 83.7486 158.835 79.4224 147.691 79.4224 cv
136.546 79.4224 127.512 83.7486 127.512 89.0855 cv
127.512 94.4214 136.546 98.7476 147.691 98.7476 cv
158.835 98.7476 167.869 94.4214 167.869 89.0855 cv
@
167.869 89.0855 mo
167.869 83.7486 158.835 79.4224 147.691 79.4224 cv
136.546 79.4224 127.512 83.7486 127.512 89.0855 cv
127.512 94.4214 136.546 98.7476 147.691 98.7476 cv
158.835 98.7476 167.869 94.4214 167.869 89.0855 cv
.27058 .46666 .70197 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 4 GetGlyphDirectory
73 <001C60D8A8C9B854D0888002323AC88DE1D732A0B438F52A36AC4C8235B5
0195661EE4F4F056C00FB5169E51E2DC2CFF59762708862D2CF2C9EE7C48914B
2654119B06323F8628EDED75E67016C052BF264B2636967B14F5F649780C4538
A74858D0D68B8C6F8505F1E026A98BA54061B31B762A> |
19 <001C60D8A8C9B7A73D33A01A1054C882E3E266AB9E0F521BBFFBA90E6B67
172FED81E171C27DA0F58A8E05B12BC790F5DC81D5AA3EF584A6864B1A4FBC22
B25974379C95D48C168EBD45AD37FF92AFB62247DEADD23C8E866CE1BD09076C
EA4F19643E8156DB3CBCC593BACFAD21D759EDD7E6AD0E8ED42A8B502B8A0E58
7A3784506B2DC053BD98E1872BB39DF6F68BE3E1F3835C8A80> |
24 <001C60D8A8C9B7A73D33B1D1416E04E71CE2223C8AC99245704877EF4F2F
82844942EB33056B0D1BEA945A46C003B2D29519ECD6B8DE3F362CA602B3542F
904A7107387BB5CC13B4F7511371D3C3A45766E01C0DC2F1460028BF10ADC998
70B4421896DCC34D14A68BDAD33F28CA607E64D77A2CE24F17388B607B46DFF8
CBA963B629B879B12C8380057F2F0F1220D00F5D9D8061B6C73E1322D3610FED
E46BCD284B3D48D14559F2925009CFCEF2837D89BC5173E36F336B78> |
20 <001C60D8A8C9B7A73DB96726F82EC389232F73A7B6E7875DC9A46EF4FEC7
F3D5E23D7BF70B540998FC5CC08E09E16340F0B45A6DECA08B4B9468D4E4B393
F67B7110F71363573BAD8DD1FBA20AE97EE1AF738E6778F333F5BC98166EAE94
F95B7717> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
132.217 85.4472 mo
(\000&\000&\0004\0002\000E\000O\000R\000D\000E\000R\0003\000I\000M\000P\000L\000E)
[2.21222 2.21222 2.43102 2.6539 1.76659 1.98941 1.32492 1.9894 1.7666 1.32491 2.21222 1.10611 
3.09552 1.9894 1.10611 0 ]xsh
138.501 89.995 mo
(\000W\000O\000R\000K\000\035\000\023\000\030\000\024\000\023)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
136.235 94.5417 mo
(\000\)\000\017\000/\000\032\000\000\000\025\000\021\000\022\000\015\000\036\000\025\000\021\000\022)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.98941 1.32491 2.24403 1.98941 1.9894 
0 ]xsh
147.691 63.5079 mo
147.691 67.7706 147.691 72.6016 147.691 76.8648 cv
@
147.122 76.5806 mo
147.691 79.4224 li
148.543 76.5806 li
147.122 76.5806 li
cp
@
147.122 76.5806 mo
147.691 79.4224 li
148.543 76.5806 li
f
167.869 118.642 mo
167.869 113.306 158.835 108.98 147.691 108.98 cv
136.546 108.98 127.512 113.306 127.512 118.642 cv
127.512 123.979 136.546 128.305 147.691 128.305 cv
158.835 128.305 167.869 123.979 167.869 118.642 cv
@
167.869 118.642 mo
167.869 113.306 158.835 108.98 147.691 108.98 cv
136.546 108.98 127.512 113.306 127.512 118.642 cv
127.512 123.979 136.546 128.305 147.691 128.305 cv
158.835 128.305 167.869 123.979 167.869 118.642 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
132.217 115.004 mo
(\000&\000&\0004\0002\000E\000O\000R\000D\000E\000R\0003\000I\000M\000P\000L\000E)
[2.21222 2.21222 2.43102 2.6539 1.76659 1.98941 1.32492 1.9894 1.7666 1.32491 2.21222 1.10611 
3.09552 1.9894 1.10611 0 ]xsh
138.501 119.552 mo
(\000W\000O\000R\000K\000\035\000\023\000\030\000\024\000\026)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
136.235 124.099 mo
(\000\)\000\017\000/\000\032\000\000\000\022\000\025\000\026\000\015\000\036\000\022\000\025\000\026)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.98941 1.32491 2.24403 1.98941 1.9894 
0 ]xsh
147.691 98.7476 mo
147.691 101.022 147.691 103.58 147.691 106.138 cv
@
147.122 106.138 mo
147.691 108.98 li
148.543 106.138 li
147.122 106.138 li
cp
@
147.122 106.138 mo
147.691 108.98 li
148.543 106.138 li
f
167.869 148.199 mo
167.869 142.862 158.835 138.536 147.691 138.536 cv
136.546 138.536 127.512 142.862 127.512 148.199 cv
127.512 153.536 136.546 157.861 147.691 157.861 cv
158.835 157.861 167.869 153.536 167.869 148.199 cv
@
167.869 148.199 mo
167.869 142.862 158.835 138.536 147.691 138.536 cv
136.546 138.536 127.512 142.862 127.512 148.199 cv
127.512 153.536 136.546 157.861 147.691 157.861 cv
158.835 157.861 167.869 153.536 167.869 148.199 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
132.217 144.561 mo
(\000&\000&\0004\0002\000E\000O\000R\000D\000E\000R\0003\000I\000M\000P\000L\000E)
[2.21222 2.21222 2.43102 2.6539 1.76659 1.98941 1.32492 1.9894 1.7666 1.32491 2.21222 1.10611 
3.09552 1.9894 1.10611 0 ]xsh
138.501 149.107 mo
(\000W\000O\000R\000K\000\035\000\023\000\030\000\025\000\022)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
136.235 153.655 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\022\000\030\000\015\000\036\000\021\000\022\000\030)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.98941 1.32491 2.24403 1.98941 1.9894 
0 ]xsh
147.691 128.305 mo
147.691 130.579 147.691 133.137 147.691 135.693 cv
@
147.122 135.693 mo
147.691 138.536 li
148.543 135.693 li
147.122 135.693 li
cp
@
147.122 135.693 mo
147.691 138.536 li
148.543 135.693 li
f
167.869 177.755 mo
167.869 172.419 158.835 168.093 147.691 168.093 cv
136.546 168.093 127.512 172.419 127.512 177.755 cv
127.512 183.093 136.546 187.419 147.691 187.419 cv
158.835 187.419 167.869 183.093 167.869 177.755 cv
@
167.869 177.755 mo
167.869 172.419 158.835 168.093 147.691 168.093 cv
136.546 168.093 127.512 172.419 127.512 177.755 cv
127.512 183.093 136.546 187.419 147.691 187.419 cv
158.835 187.419 167.869 183.093 167.869 177.755 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
132.217 174.118 mo
(\000&\000&\0004\0002\000E\000O\000R\000D\000E\000R\0003\000I\000M\000P\000L\000E)
[2.21222 2.21222 2.43102 2.6539 1.76659 1.98941 1.32492 1.9894 1.7666 1.32491 2.21222 1.10611 
3.09552 1.9894 1.10611 0 ]xsh
138.501 178.665 mo
(\000W\000O\000R\000K\000\035\000\023\000\030\000\026\000\024)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
138.225 183.213 mo
(\000\)\000\017\000/\000\032\000\000\000\026\000\024\000\015\000\036\000\026\000\024)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.32491 2.24403 1.98941 0 ]xsh
147.691 157.861 mo
147.691 160.136 147.691 162.692 147.691 165.251 cv
@
147.122 165.251 mo
147.691 168.093 li
148.543 165.251 li
147.122 165.251 li
cp
@
147.122 165.251 mo
147.691 168.093 li
148.543 165.251 li
f
167.869 207.313 mo
167.869 201.976 158.835 197.649 147.691 197.649 cv
136.546 197.649 127.512 201.976 127.512 207.313 cv
127.512 212.648 136.546 216.976 147.691 216.976 cv
158.835 216.976 167.869 212.648 167.869 207.313 cv
@
167.869 207.313 mo
167.869 201.976 158.835 197.649 147.691 197.649 cv
136.546 197.649 127.512 201.976 127.512 207.313 cv
127.512 212.648 136.546 216.976 147.691 216.976 cv
158.835 216.976 167.869 212.648 167.869 207.313 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
132.217 203.675 mo
(\000&\000&\0004\0002\000E\000O\000R\000D\000E\000R\0003\000I\000M\000P\000L\000E)
[2.21222 2.21222 2.43102 2.6539 1.76659 1.98941 1.32492 1.9894 1.7666 1.32491 2.21222 1.10611 
3.09552 1.9894 1.10611 0 ]xsh
138.501 208.222 mo
(\000W\000O\000R\000K\000\035\000\023\000\030\000\030\000\030)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
138.225 212.769 mo
(\000\)\000\017\000/\000\032\000\000\000\023\000\022\000\015\000\036\000\023\000\022)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.32491 2.24403 1.98941 0 ]xsh
147.691 187.419 mo
147.691 189.691 147.691 192.25 147.691 194.808 cv
@
147.122 194.808 mo
147.691 197.649 li
148.543 194.808 li
147.122 194.808 li
cp
@
147.122 194.808 mo
147.691 197.649 li
148.543 194.808 li
f
167.869 236.87 mo
167.869 231.533 158.835 227.207 147.691 227.207 cv
136.546 227.207 127.512 231.533 127.512 236.87 cv
127.512 242.206 136.546 246.532 147.691 246.532 cv
158.835 246.532 167.869 242.206 167.869 236.87 cv
@
167.869 236.87 mo
167.869 231.533 158.835 227.207 147.691 227.207 cv
136.546 227.207 127.512 231.533 127.512 236.87 cv
127.512 242.206 136.546 246.532 147.691 246.532 cv
158.835 246.532 167.869 242.206 167.869 236.87 cv
.27058 .46666 .70197 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 1 GetGlyphDirectory
25 <001C60D8A8C9B7A73D33855495D9933548CAEBCC99DCF7AB3BB8E9059071
857DB9430B23426E6D6123291A4B6E2D5B9EFC1AAEB88E0A133C2BD24EF406FB
30624C02344CCF6D3D463EDA7733F28DBAE0ED33CA9D6C96284BA4DA326C2BF0
4612848D192945EF99F3C915D01AA9016B57B70DE2D2D7D072> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
132.217 233.232 mo
(\000&\000&\0004\0002\000E\000O\000R\000D\000E\000R\0003\000I\000M\000P\000L\000E)
[2.21222 2.21222 2.43102 2.6539 1.76659 1.98941 1.32492 1.9894 1.7666 1.32491 2.21222 1.10611 
3.09552 1.9894 1.10611 0 ]xsh
138.501 237.779 mo
(\000W\000O\000R\000K\000\035\000\023\000\031\000\023\000\026)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
138.225 242.326 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\026\000\015\000\036\000\021\000\026)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.32491 2.24403 1.98941 0 ]xsh
147.691 216.976 mo
147.691 219.249 147.691 221.807 147.691 224.365 cv
@
147.122 224.365 mo
147.691 227.207 li
148.543 224.365 li
147.122 224.365 li
cp
@
147.122 224.365 mo
147.691 227.207 li
148.543 224.365 li
f
167.869 266.426 mo
167.869 261.089 158.835 256.764 147.691 256.764 cv
136.546 256.764 127.512 261.089 127.512 266.426 cv
127.512 271.763 136.546 276.088 147.691 276.088 cv
158.835 276.088 167.869 271.763 167.869 266.426 cv
@
167.869 266.426 mo
167.869 261.089 158.835 256.764 147.691 256.764 cv
136.546 256.764 127.512 261.089 127.512 266.426 cv
127.512 271.763 136.546 276.088 147.691 276.088 cv
158.835 276.088 167.869 271.763 167.869 266.426 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
132.217 262.788 mo
(\000&\000&\0004\0002\000E\000O\000R\000D\000E\000R\0003\000I\000M\000P\000L\000E)
[2.21222 2.21222 2.43102 2.6539 1.76659 1.98941 1.32492 1.9894 1.7666 1.32491 2.21222 1.10611 
3.09552 1.9894 1.10611 0 ]xsh
138.501 267.336 mo
(\000W\000O\000R\000K\000\035\000\024\000\020\000\023\000\022)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
140.214 271.883 mo
(\000\)\000\017\000/\000\032\000\000\000\030\000\015\000\036\000\030)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 0 ]xsh
147.691 246.532 mo
147.691 248.806 147.691 251.364 147.691 253.921 cv
@
147.122 253.921 mo
147.691 256.764 li
148.543 253.921 li
147.122 253.921 li
cp
@
147.122 253.921 mo
147.691 256.764 li
148.543 253.921 li
f
163.606 295.982 mo
163.606 290.647 156.48 286.319 147.691 286.319 cv
138.901 286.319 131.775 290.647 131.775 295.982 cv
131.775 301.319 138.901 305.646 147.691 305.646 cv
156.48 305.646 163.606 301.319 163.606 295.982 cv
@
163.606 295.982 mo
163.606 290.647 156.48 286.319 147.691 286.319 cv
138.901 286.319 131.775 290.647 131.775 295.982 cv
131.775 301.319 138.901 305.646 147.691 305.646 cv
156.48 305.646 163.606 301.319 163.606 295.982 cv
.4549 .68628 .81177 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 1 GetGlyphDirectory
66 <001C60D8A8C9B7A73D33B7A78043D4792E69447CA6EC8B3DE20DD70B15CF
9A03072F43C8DCA6614923FC4EF78C1C4072C5F9D0A04033F72D02DFFCA9C6BE
CA25A0A8934E57760AC64CDB085FF6EC7EC2DE9E36734B6CEA82FA0F47395374
72C20CD0158ED50B70CD6ACB3FF9D1984B96B5341B> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
136.638 292.345 mo
(\000#\000O\000M\000B\000I\000N\000E\000$\000&\0004)
[2.6539 1.9894 3.09552 1.98941 1.10611 1.9894 1.7666 2.8727 2.21222 0 ]xsh
138.502 296.892 mo
(\000W\000O\000R\000K\000\035\000\031\000\026\000\020\000\020)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
140.215 301.439 mo
(\000\)\000\017\000/\000\032\000\000\000\024\000\015\000\036\000\024)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 0 ]xsh
147.691 276.088 mo
147.691 278.362 147.691 280.92 147.691 283.478 cv
@
147.122 283.478 mo
147.691 286.319 li
148.543 283.478 li
147.122 283.478 li
cp
@
147.122 283.478 mo
147.691 286.319 li
148.543 283.478 li
f
163.606 325.539 mo
163.606 320.202 156.48 315.877 147.691 315.877 cv
138.901 315.877 131.775 320.202 131.775 325.539 cv
131.775 330.877 138.901 335.202 147.691 335.202 cv
156.48 335.202 163.606 330.877 163.606 325.539 cv
@
163.606 325.539 mo
163.606 320.202 156.48 315.877 147.691 315.877 cv
138.901 315.877 131.775 320.202 131.775 325.539 cv
131.775 330.877 138.901 335.202 147.691 335.202 cv
156.48 335.202 163.606 330.877 163.606 325.539 cv
.4549 .68628 .81177 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
136.638 321.901 mo
(\000#\000O\000M\000B\000I\000N\000E\000$\000&\0004)
[2.6539 1.9894 3.09552 1.98941 1.10611 1.9894 1.7666 2.8727 2.21222 0 ]xsh
138.502 326.449 mo
(\000W\000O\000R\000K\000\035\000\031\000\026\000\020\000\020)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
140.215 330.996 mo
(\000\)\000\017\000/\000\032\000\000\000\030\000\015\000\036\000\030)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 0 ]xsh
147.691 305.646 mo
147.691 307.92 147.691 310.477 147.691 313.034 cv
@
147.122 313.034 mo
147.691 315.877 li
148.543 313.034 li
147.122 313.034 li
cp
@
147.122 313.034 mo
147.691 315.877 li
148.543 313.034 li
f
163.606 355.097 mo
163.606 349.76 156.48 345.434 147.691 345.434 cv
138.901 345.434 131.775 349.76 131.775 355.097 cv
131.775 360.433 138.901 364.76 147.691 364.76 cv
156.48 364.76 163.606 360.433 163.606 355.097 cv
@
163.606 355.097 mo
163.606 349.76 156.48 345.434 147.691 345.434 cv
138.901 345.434 131.775 349.76 131.775 355.097 cv
131.775 360.433 138.901 364.76 147.691 364.76 cv
156.48 364.76 163.606 360.433 163.606 355.097 cv
.4549 .68628 .81177 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
136.638 351.458 mo
(\000#\000O\000M\000B\000I\000N\000E\000$\000&\0004)
[2.6539 1.9894 3.09552 1.98941 1.10611 1.9894 1.7666 2.8727 2.21222 0 ]xsh
138.502 356.006 mo
(\000W\000O\000R\000K\000\035\000\031\000\026\000\020\000\020)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
138.225 360.553 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\026\000\015\000\036\000\021\000\026)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.32492 2.24402 1.98941 0 ]xsh
147.691 335.202 mo
147.691 337.476 147.691 340.033 147.691 342.592 cv
@
147.122 342.592 mo
147.691 345.434 li
148.543 342.592 li
147.122 342.592 li
cp
@
147.122 342.592 mo
147.691 345.434 li
148.543 342.592 li
f
163.606 384.653 mo
163.606 379.316 156.48 374.99 147.691 374.99 cv
138.901 374.99 131.775 379.316 131.775 384.653 cv
131.775 389.989 138.901 394.315 147.691 394.315 cv
156.48 394.315 163.606 389.989 163.606 384.653 cv
@
163.606 384.653 mo
163.606 379.316 156.48 374.99 147.691 374.99 cv
138.901 374.99 131.775 379.316 131.775 384.653 cv
131.775 389.989 138.901 394.315 147.691 394.315 cv
156.48 394.315 163.606 389.989 163.606 384.653 cv
.4549 .68628 .81177 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
136.638 381.016 mo
(\000#\000O\000M\000B\000I\000N\000E\000$\000&\0004)
[2.6539 1.9894 3.09552 1.98941 1.10611 1.9894 1.7666 2.8727 2.21222 0 ]xsh
138.502 385.563 mo
(\000W\000O\000R\000K\000\035\000\031\000\026\000\020\000\020)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
138.225 390.111 mo
(\000\)\000\017\000/\000\032\000\000\000\023\000\022\000\015\000\036\000\023\000\022)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.32492 2.24402 1.98941 0 ]xsh
147.691 364.76 mo
147.691 367.032 147.691 369.591 147.691 372.148 cv
@
147.122 372.148 mo
147.691 374.99 li
148.543 372.148 li
147.122 372.148 li
cp
@
147.122 372.148 mo
147.691 374.99 li
148.543 372.148 li
f
163.606 414.21 mo
163.606 408.874 156.48 404.548 147.691 404.548 cv
138.901 404.548 131.775 408.874 131.775 414.21 cv
131.775 419.547 138.901 423.873 147.691 423.873 cv
156.48 423.873 163.606 419.547 163.606 414.21 cv
@
163.606 414.21 mo
163.606 408.874 156.48 404.548 147.691 404.548 cv
138.901 404.548 131.775 408.874 131.775 414.21 cv
131.775 419.547 138.901 423.873 147.691 423.873 cv
156.48 423.873 163.606 419.547 163.606 414.21 cv
.4549 .68628 .81177 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
136.638 410.572 mo
(\000#\000O\000M\000B\000I\000N\000E\000$\000&\0004)
[2.6539 1.9894 3.09552 1.98941 1.10611 1.9894 1.7666 2.8727 2.21222 0 ]xsh
138.502 415.12 mo
(\000W\000O\000R\000K\000\035\000\031\000\026\000\020\000\020)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
138.225 419.667 mo
(\000\)\000\017\000/\000\032\000\000\000\026\000\024\000\015\000\036\000\026\000\024)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.32492 2.24402 1.98941 0 ]xsh
147.691 394.315 mo
147.691 396.59 147.691 399.148 147.691 401.705 cv
@
147.122 401.705 mo
147.691 404.548 li
148.543 401.705 li
147.122 401.705 li
cp
@
147.122 401.705 mo
147.691 404.548 li
148.543 401.705 li
f
163.89 443.767 mo
163.89 438.431 156.637 434.104 147.691 434.104 cv
138.744 434.104 131.491 438.431 131.491 443.767 cv
131.491 449.104 138.744 453.43 147.691 453.43 cv
156.637 453.43 163.89 449.104 163.89 443.767 cv
@
163.89 443.767 mo
163.89 438.431 156.637 434.104 147.691 434.104 cv
138.744 434.104 131.491 438.431 131.491 443.767 cv
131.491 449.104 138.744 453.43 147.691 453.43 cv
156.637 453.43 163.89 449.104 163.89 443.767 cv
.4549 .68628 .81177 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
136.638 440.129 mo
(\000#\000O\000M\000B\000I\000N\000E\000$\000&\0004)
[2.6539 1.9894 3.09552 1.98941 1.10611 1.9894 1.7666 2.8727 2.21222 0 ]xsh
138.502 444.676 mo
(\000W\000O\000R\000K\000\035\000\031\000\026\000\020\000\020)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
136.237 449.224 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\022\000\030\000\015\000\036\000\021\000\022\000\030)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.98941 1.32491 2.24403 1.98941 1.9894 
0 ]xsh
147.691 423.873 mo
147.691 426.147 147.691 428.704 147.691 431.262 cv
@
147.122 431.262 mo
147.691 434.104 li
148.543 431.262 li
147.122 431.262 li
cp
@
147.122 431.262 mo
147.691 434.104 li
148.543 431.262 li
f
163.89 473.323 mo
163.89 467.986 156.637 463.66 147.691 463.66 cv
138.744 463.66 131.491 467.986 131.491 473.323 cv
131.491 478.66 138.744 482.986 147.691 482.986 cv
156.637 482.986 163.89 478.66 163.89 473.323 cv
@
163.89 473.323 mo
163.89 467.986 156.637 463.66 147.691 463.66 cv
138.744 463.66 131.491 467.986 131.491 473.323 cv
131.491 478.66 138.744 482.986 147.691 482.986 cv
156.637 482.986 163.89 478.66 163.89 473.323 cv
.4549 .68628 .81177 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
136.638 469.686 mo
(\000#\000O\000M\000B\000I\000N\000E\000$\000&\0004)
[2.6539 1.9894 3.09552 1.98941 1.10611 1.9894 1.7666 2.8727 2.21222 0 ]xsh
138.502 474.233 mo
(\000W\000O\000R\000K\000\035\000\031\000\026\000\020\000\020)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
136.237 478.78 mo
(\000\)\000\017\000/\000\032\000\000\000\022\000\025\000\026\000\015\000\036\000\022\000\025\000\026)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.98941 1.32491 2.24403 1.98941 1.9894 
0 ]xsh
147.691 453.43 mo
147.691 455.703 147.691 458.261 147.691 460.818 cv
@
147.122 460.818 mo
147.691 463.66 li
148.543 460.818 li
147.122 460.818 li
cp
@
147.122 460.818 mo
147.691 463.66 li
148.543 460.818 li
f
163.89 502.881 mo
163.89 497.544 156.637 493.218 147.691 493.218 cv
138.744 493.218 131.491 497.544 131.491 502.881 cv
131.491 508.217 138.744 512.544 147.691 512.544 cv
156.637 512.544 163.89 508.217 163.89 502.881 cv
@
163.89 502.881 mo
163.89 497.544 156.637 493.218 147.691 493.218 cv
138.744 493.218 131.491 497.544 131.491 502.881 cv
131.491 508.217 138.744 512.544 147.691 512.544 cv
156.637 512.544 163.89 508.217 163.89 502.881 cv
.4549 .68628 .81177 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
136.638 499.243 mo
(\000#\000O\000M\000B\000I\000N\000E\000$\000&\0004)
[2.6539 1.9894 3.09552 1.98941 1.10611 1.9894 1.7666 2.8727 2.21222 0 ]xsh
138.502 503.79 mo
(\000W\000O\000R\000K\000\035\000\031\000\026\000\020\000\020)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
136.237 508.337 mo
(\000\)\000\017\000/\000\032\000\000\000\025\000\021\000\022\000\015\000\036\000\025\000\021\000\022)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.98941 1.98941 1.32491 2.24403 1.98941 1.9894 
0 ]xsh
147.691 482.986 mo
147.691 485.26 147.691 487.817 147.691 490.376 cv
@
147.122 490.376 mo
147.691 493.218 li
148.543 490.376 li
147.122 490.376 li
cp
@
147.122 490.376 mo
147.691 493.218 li
148.543 490.376 li
f
162.469 532.438 mo
162.469 527.101 155.852 522.774 147.691 522.774 cv
139.529 522.774 132.912 527.101 132.912 532.438 cv
132.912 537.773 139.529 542.1 147.691 542.1 cv
155.852 542.1 162.469 537.773 162.469 532.438 cv
@
162.469 532.438 mo
162.469 527.101 155.852 522.774 147.691 522.774 cv
139.529 522.774 132.912 527.101 132.912 532.438 cv
132.912 537.773 139.529 542.1 147.691 542.1 cv
155.852 542.1 162.469 537.773 162.469 532.438 cv
.84314 .18039 .15686 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 3 GetGlyphDirectory
45 <001C60D8A8C9B59F859BE36722F335C424A3959F3C40788D59DD80027215
12B63F78C2CD40476BE632847058326A18680A51A56F350AFC4601E106D85D99
35C71758FE4B99DBAD8FB00FF6547655EDC5ADFF53E68939F2E851D8568D2230
2C2C338F02446444A7B8C22A8A2420B3FB18D904D3E7> |
71 <001C60D8A8C9B7A73DB58070C767E00CC48E28515C3534D68C511D4E2634
498773C500C5E15E67C2DF5619450EDCDA209CEF5F0D32D1D7271E74F3B535AE
5E48DF940BEE5E32CF5D1108142AA277AA23719E25EC4CEE1B9CC6403A3F1FC2
26E3D191A3C26BE83F5D69F46844F9765819AC263177543523569C8FD833083E
CD41498E0B34D4CC69FCD1B8B590A8012B42B3860E49CC8B61E952C1D89A14AF
7C3D3838B78B8CD293E8A70ED879D6E22F2E8C54F57C81114BA56383E03E097C
653E5B90FC257383704EE28AF7F69A77C29DA6378CF09FEAD16AA5A2B539D456
366C59B746586F352CBAD262154A1286C8DEED3A89E9D1A325E45FBCE7DA0AE5
FC5B871AF6E7531AF1A5B9E6092D9552FD37DB5238A3914E1D767F27F8229FBA
57A6185C0044FEE29F6C8F32F1F3C033768F589DA73D4660D8212296E659D9FB
EA7C607B755C0F83E28FB78E8BB59487B8F7E2641C51AA663B7C62373FA4C94B
A19AF707A702C2515D5F9AB0ED94FF323FCE6947F26AFE3AD66687B242BD5439
6D4A13F78618AF9A0D4A58A0A47D87C6270232986EE72FA9BDE6D04D43E77611
49CC787D583069937FE9EC6673A86568F63116EF369B4B6D551598> |
85 <001C60D8A8C9B7A73D33DFE69D77A124916B7E1247C1A9BF81A03F8ADE49
3085B97B716714DB79C7E9E35F4FCC1FEA9A2AD34D5DD72DDBDA28BEC83229FF
B3DCB856708631257C0CA18B8CBF0BD48443F165C669304820FA055457C072B0
393455C28F77520D28B094D4B8D54FD8> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
139.071 528.801 mo
(\000-\000A\000G\000N\000I\000T\000U\000D\000E)
[3.53719 1.7666 1.98941 1.9894 1.10611 1.10611 1.98941 1.9894 0 ]xsh
137.508 533.346 mo
(\000W\000O\000R\000K\000\035\000\030\000\024\000\031\000\031\000\022)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 1.98941 0 ]xsh
140.215 537.895 mo
(\000\)\000\017\000/\000\032\000\000\000\022\000\015\000\036\000\021)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 0 ]xsh
147.691 512.544 mo
147.691 514.816 147.691 517.375 147.691 519.933 cv
@
147.122 519.933 mo
147.691 522.774 li
148.543 519.933 li
147.122 519.933 li
cp
@
147.122 519.933 mo
147.691 522.774 li
148.543 519.933 li
f
174.69 557.446 mo
174.69 554.621 162.602 552.332 147.691 552.332 cv
132.779 552.332 120.692 554.621 120.692 557.446 cv
120.692 560.272 132.779 562.563 147.691 562.563 cv
162.602 562.563 174.69 560.272 174.69 557.446 cv
@
174.69 557.446 mo
174.69 554.621 162.602 552.332 147.691 552.332 cv
132.779 552.332 120.692 554.621 120.692 557.446 cv
120.692 560.272 132.779 562.563 147.691 562.563 cv
162.602 562.563 174.69 560.272 174.69 557.446 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 3 GetGlyphDirectory
8 <001C60D8A8C9B81F2C36D59043575ABF8222E88700B247745F4047C981BE6
EABA4692012275B3D88343BD48C515FB1C784AAA1DC1511E4D2C3B5E64339E79
0C5343A947299> |
12 <001C60D8A8C9B8707C8BF4569E35594100DDDD95625BB983BCA4733F56E4
050E7E64602C5321CB7D8BEDEF7FF4B8B633D2B3EF91CB03BDD0C7B641CE40CD
B2F66786777D9DADEA1BEEB4C8B6868F657C3F8534C4E0CF649218> |
9 <001C60D8A8C9B81F2C36D59043575ABF826197DD6606F1D3B79FDDFC65733
77CBD47CB36FF7458E94315FA4E4C6B865ABBE434E872BA40730CB01B8AB373F
5B93C8F358D33> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
123.599 558.356 mo
(\000R\000O\000U\000N\000D\000R\000O\000B\000I\000N\000\010\000\026\000\022\000\014\000\021\000\014\000\021\000\014\000\021\000\022\000\030\000\014\000\021\000\014\000\021\000\014\000\026\000\022\000\011)
[1.32491 1.9894 1.98941 1.98941 1.9894 1.32492 1.9894 1.98941 1.10611 1.98941 1.32491 1.98941 
1.98941 .99469 1.98941 .994705 1.9894 .994705 1.98941 1.9894 1.98941 .994705 1.98941 .994705 
1.9894 .994705 1.98941 1.9894 0 ]xsh
147.691 542.1 mo
147.691 544.657 147.691 547.216 147.691 549.773 cv
@
147.122 549.489 mo
147.691 552.332 li
148.543 549.489 li
147.122 549.489 li
cp
@
147.122 549.489 mo
147.691 552.332 li
148.543 549.489 li
f
70.6724 582.457 mo
70.6724 577.119 64.9468 572.794 57.8833 572.794 cv
50.8203 572.794 45.0942 577.119 45.0942 582.457 cv
45.0942 587.793 50.8203 592.119 57.8833 592.119 cv
64.9468 592.119 70.6724 587.793 70.6724 582.457 cv
@
70.6724 582.457 mo
70.6724 577.119 64.9468 572.794 57.8833 572.794 cv
50.8203 572.794 45.0942 577.119 45.0942 582.457 cv
45.0942 587.793 50.8203 592.119 57.8833 592.119 cv
64.9468 592.119 70.6724 587.793 70.6724 582.457 cv
.27058 .46666 .70197 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
ct_GlyphDirProcs begin/PBAAAA+TimesNewRomanPSMT 1 GetGlyphDirectory
89 <001C60D8A8C9B7A73DB5BB3FD8F495E761A981DBD4F8CF4629614F0B5806
46C4F882231F97F662DF436E5E85288BD71812DFA231A0051419BF38A3D0A3EA
E113FE3400544CD2DB098631C487F5DCDD509A0F973D0D6B7EE01B215CDF2AAF
F67270235EC2A59F1F403B29B01DBB817DE1E5B04E2F76DE70295E127D6D9582
CEE968694BD7C2989135F47C2A20C957EE4A3BA58C378572FA4C0EA3F0187602
15FA94178DC5849AFD05D8> |
!
end
end end
%ADOEndSubsetFont
reset_gvm
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
51.6944 578.818 mo
(\000\)\000D\000E\000N\000T\000I\000T\000Y)
[1.32491 1.98941 1.76659 1.9894 1.10611 1.10611 1.10611 0 ]xsh
49.689 583.366 mo
(\000W\000O\000R\000K\000\035\000\023\000\027\000\022)
[2.8727 1.98941 1.32491 1.98941 2.24403 1.9894 1.98941 0 ]xsh
50.4073 587.913 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\015\000\036\000\021)
[1.32491 1.10611 2.8727 1.10611 .994701 1.98941 1.32492 2.24403 0 ]xsh
127.797 560.857 mo
111.029 563.983 86.8716 568.815 72.3774 572.794 cv
71.2407 573.077 70.104 573.931 68.6831 574.499 cv
@
68.9673 573.361 mo
66.978 575.636 li
69.8198 574.782 li
68.9673 573.361 li
cp
@
68.9673 573.361 mo
66.978 575.636 li
69.8198 574.782 li
f
100.229 582.457 mo
100.229 577.119 94.7578 572.794 88.0088 572.794 cv
81.2593 572.794 75.7881 577.119 75.7881 582.457 cv
75.7881 587.793 81.2593 592.119 88.0088 592.119 cv
94.7578 592.119 100.229 587.793 100.229 582.457 cv
@
100.229 582.457 mo
100.229 577.119 94.7578 572.794 88.0088 572.794 cv
81.2593 572.794 75.7881 577.119 75.7881 582.457 cv
75.7881 587.793 81.2593 592.119 88.0088 592.119 cv
94.7578 592.119 100.229 587.793 100.229 582.457 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
82.8163 578.818 mo
(\000$\000E\000T\000E\000C\000T)
[2.8727 1.76659 1.1061 1.76659 1.76659 0 ]xsh
81.8036 583.366 mo
(\000W\000O\000R\000K\000\035\000\030)
[2.8727 1.9894 1.32491 1.98941 2.24403 0 ]xsh
80.5326 587.913 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\015\000\036\000\021)
[1.32491 1.10611 2.8727 1.10611 .994698 1.98941 1.32491 2.24403 0 ]xsh
133.765 561.71 mo
123.534 565.12 110.176 569.384 101.934 572.794 cv
101.082 573.077 99.6606 573.931 98.5239 574.499 cv
@
98.8081 573.361 mo
96.8188 575.636 li
99.6606 574.782 li
98.8081 573.361 li
cp
@
98.8081 573.361 mo
96.8188 575.636 li
99.6606 574.782 li
f
129.786 582.457 mo
129.786 577.119 124.315 572.794 117.565 572.794 cv
110.816 572.794 105.345 577.119 105.345 582.457 cv
105.345 587.793 110.816 592.119 117.565 592.119 cv
124.315 592.119 129.786 587.793 129.786 582.457 cv
@
141.722 562.563 mo
137.744 565.689 132.628 569.951 128.081 573.647 cv
@
127.797 573.077 mo
126.091 575.352 li
128.649 573.931 li
127.797 573.077 li
cp
@
127.797 573.077 mo
126.091 575.352 li
128.649 573.931 li
f
160.48 582.457 mo
160.48 577.119 154.754 572.794 147.691 572.794 cv
140.627 572.794 134.902 577.119 134.902 582.457 cv
134.902 587.793 140.627 592.119 147.691 592.119 cv
154.754 592.119 160.48 587.793 160.48 582.457 cv
@
160.48 582.457 mo
160.48 577.119 154.754 572.794 147.691 572.794 cv
140.627 572.794 134.902 577.119 134.902 582.457 cv
134.902 587.793 140.627 592.119 147.691 592.119 cv
154.754 592.119 160.48 587.793 160.48 582.457 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
141.502 578.818 mo
(\000\)\000D\000E\000N\000T\000I\000T\000Y)
[1.32492 1.9894 1.7666 1.9894 1.10611 1.10611 1.10611 0 ]xsh
139.497 583.366 mo
(\000W\000O\000R\000K\000\035\000\027\000\026\000\030)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 0 ]xsh
140.215 587.913 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\015\000\036\000\021)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 0 ]xsh
147.691 562.563 mo
147.691 564.552 147.691 567.394 147.691 569.951 cv
@
147.122 569.951 mo
147.691 572.794 li
148.543 569.951 li
147.122 569.951 li
cp
@
147.122 569.951 mo
147.691 572.794 li
148.543 569.951 li
f
190.036 582.457 mo
190.036 577.119 184.565 572.794 177.816 572.794 cv
171.067 572.794 165.595 577.119 165.595 582.457 cv
165.595 587.793 171.067 592.119 177.816 592.119 cv
184.565 592.119 190.036 587.793 190.036 582.457 cv
@
153.659 562.563 mo
157.638 565.689 162.753 569.951 167.3 573.647 cv
@
166.732 573.931 mo
169.29 575.352 li
167.585 573.077 li
166.732 573.931 li
cp
@
166.732 573.931 mo
169.29 575.352 li
167.585 573.077 li
f
219.593 582.457 mo
219.593 577.119 214.122 572.794 207.373 572.794 cv
200.623 572.794 195.152 577.119 195.152 582.457 cv
195.152 587.793 200.623 592.119 207.373 592.119 cv
214.122 592.119 219.593 587.793 219.593 582.457 cv
@
219.593 582.457 mo
219.593 577.119 214.122 572.794 207.373 572.794 cv
200.623 572.794 195.152 577.119 195.152 582.457 cv
195.152 587.793 200.623 592.119 207.373 592.119 cv
214.122 592.119 219.593 587.793 219.593 582.457 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
202.18 578.818 mo
(\000$\000E\000T\000E\000C\000T)
[2.8727 1.7666 1.10611 1.76659 1.7666 0 ]xsh
201.167 583.366 mo
(\000W\000O\000R\000K\000\035\000\030)
[2.8727 1.98941 1.32492 1.9894 2.24403 0 ]xsh
199.896 587.913 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\015\000\036\000\021)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 0 ]xsh
161.616 561.71 mo
171.848 565.12 184.921 569.384 193.447 572.794 cv
194.299 573.077 195.436 573.931 196.857 574.499 cv
@
195.72 574.782 mo
198.562 575.636 li
196.573 573.361 li
195.72 574.782 li
cp
@
195.72 574.782 mo
198.562 575.636 li
196.573 573.361 li
f
250.287 582.457 mo
250.287 577.119 244.561 572.794 237.498 572.794 cv
230.435 572.794 224.709 577.119 224.709 582.457 cv
224.709 587.793 230.435 592.119 237.498 592.119 cv
244.561 592.119 250.287 587.793 250.287 582.457 cv
@
250.287 582.457 mo
250.287 577.119 244.561 572.794 237.498 572.794 cv
230.435 572.794 224.709 577.119 224.709 582.457 cv
224.709 587.793 230.435 592.119 237.498 592.119 cv
244.561 592.119 250.287 587.793 250.287 582.457 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
231.31 578.818 mo
(\000\)\000D\000E\000N\000T\000I\000T\000Y)
[1.32492 1.9894 1.7666 1.9894 1.10611 1.10611 1.10611 0 ]xsh
229.304 583.366 mo
(\000W\000O\000R\000K\000\035\000\023\000\027\000\022)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 0 ]xsh
230.022 587.913 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\015\000\036\000\021)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 0 ]xsh
167.585 560.857 mo
184.352 563.983 208.225 568.815 223.004 572.794 cv
224.14 573.077 225.277 573.931 226.698 574.499 cv
@
225.561 574.782 mo
228.403 575.636 li
226.414 573.361 li
225.561 574.782 li
cp
@
225.561 574.782 mo
228.403 575.636 li
226.414 573.361 li
f
174.69 607.466 mo
174.69 604.641 162.602 602.351 147.691 602.351 cv
132.779 602.351 120.692 604.641 120.692 607.466 cv
120.692 610.291 132.779 612.582 147.691 612.582 cv
162.602 612.582 174.69 610.291 174.69 607.466 cv
@
174.69 607.466 mo
174.69 604.641 162.602 602.351 147.691 602.351 cv
132.779 602.351 120.692 604.641 120.692 607.466 cv
120.692 610.291 132.779 612.582 147.691 612.582 cv
162.602 612.582 174.69 610.291 174.69 607.466 cv
1 gry
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
123.599 608.375 mo
(\000R\000O\000U\000N\000D\000R\000O\000B\000I\000N\000\010\000\026\000\022\000\014\000\021\000\014\000\021\000\014\000\021\000\022\000\030\000\014\000\021\000\014\000\021\000\014\000\026\000\022\000\011)
[1.32491 1.9894 1.98941 1.98941 1.9894 1.32492 1.9894 1.98941 1.10611 1.98941 1.32491 1.98941 
1.98941 .99469 1.98941 .994705 1.9894 .994705 1.98941 1.9894 1.98941 .994705 1.98941 .994705 
1.9894 .994705 1.98941 1.9894 0 ]xsh
165.311 632.476 mo
165.311 627.139 157.422 622.813 147.691 622.813 cv
137.959 622.813 130.07 627.139 130.07 632.476 cv
130.07 637.813 137.959 642.139 147.691 642.139 cv
157.422 642.139 165.311 637.813 165.311 632.476 cv
@
165.311 632.476 mo
165.311 627.139 157.422 622.813 147.691 622.813 cv
137.959 622.813 130.07 627.139 130.07 632.476 cv
130.07 637.813 137.959 642.139 147.691 642.139 cv
157.422 642.139 165.311 637.813 165.311 632.476 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
134.869 628.838 mo
(\000?\000?\000/\000U\000T\000P\000U\000T\000?\000&\000I\000L\000T\000E\000R)
[1.98941 1.9894 2.87271 1.9894 1.10611 1.98941 1.98941 1.10611 1.9894 2.21222 1.10611 1.10611 
1.10611 1.76659 0 ]xsh
138.501 633.385 mo
(\000W\000O\000R\000K\000\035\000\022\000\023\000\020\000\024)
[2.8727 1.98941 1.32492 1.9894 2.24403 1.98941 1.9894 1.98941 0 ]xsh
140.215 637.933 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\015\000\036\000\020)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 0 ]xsh
147.691 612.582 mo
147.691 614.571 147.691 617.413 147.691 619.971 cv
@
147.122 619.971 mo
147.691 622.813 li
148.543 619.971 li
147.122 619.971 li
cp
@
147.122 619.971 mo
147.691 622.813 li
148.543 619.971 li
f
66.978 589.277 mo
68.6831 590.698 70.6724 591.551 72.3774 592.119 cv
86.3032 596.098 108.755 600.646 125.523 603.772 cv
@
124.955 604.34 mo
127.797 604.056 li
124.955 602.919 li
124.955 604.34 li
cp
@
124.955 604.34 mo
127.797 604.056 li
124.955 602.919 li
f
96.8188 589.277 mo
98.5239 590.414 100.513 591.551 101.934 592.119 cv
109.608 595.245 121.544 599.225 131.491 602.635 cv
@
130.639 603.203 mo
133.481 603.203 li
130.923 601.782 li
130.639 603.203 li
cp
@
130.639 603.203 mo
133.481 603.203 li
130.923 601.782 li
f
126.091 589.562 mo
130.354 592.972 135.47 597.234 139.449 600.646 cv
@
138.88 600.93 mo
141.438 602.351 li
139.733 600.077 li
138.88 600.93 li
cp
@
138.88 600.93 mo
141.438 602.351 li
139.733 600.077 li
f
147.691 592.119 mo
147.691 594.677 147.691 597.234 147.691 599.793 cv
@
147.122 599.509 mo
147.691 602.351 li
148.543 599.509 li
147.122 599.509 li
cp
@
147.122 599.509 mo
147.691 602.351 li
148.543 599.509 li
f
169.29 589.562 mo
165.027 592.972 159.911 597.234 155.932 600.646 cv
@
155.648 600.077 mo
153.943 602.351 li
156.501 600.93 li
155.648 600.077 li
cp
@
155.648 600.077 mo
153.943 602.351 li
156.501 600.93 li
f
198.562 589.277 mo
196.857 590.414 194.868 591.551 193.447 592.119 cv
185.773 595.245 173.553 599.225 163.89 602.635 cv
@
164.458 601.782 mo
161.901 603.203 li
164.743 603.203 li
164.458 601.782 li
cp
@
164.458 601.782 mo
161.901 603.203 li
164.743 603.203 li
f
228.403 589.277 mo
226.698 590.698 224.709 591.551 223.004 592.119 cv
208.794 596.098 186.626 600.646 169.858 603.772 cv
@
170.427 602.919 mo
167.585 604.056 li
170.427 604.34 li
170.427 602.919 li
cp
@
170.427 602.919 mo
167.585 604.056 li
170.427 604.34 li
f
[4 4 ] 0 dsh
88.0088 572.794 mo
88.0088 572.794 56 358.186 55.5 335.686 cv
54.9663 311.671 63 123.186 71.5 97.6856 cv
80.6021 70.379 115.5 51.6856 123 50.6856 cv
@
125.692 50.3267 mo
124.488 50.9654 123.023 51.9771 122.163 52.9561 cv
122.646 50.7325 li
121.597 48.7139 li
122.684 49.4332 124.363 50.0259 125.692 50.3267 cv
cp
f
116 573.186 mo
116 573.186 72.4224 360.385 72 338.186 cv
71.5493 314.493 74.8301 129.213 82.0083 104.055 cv
89.6948 77.1153 117.49 57.4009 123.666 55.6856 cv
@
126.283 54.959 mo
125.179 55.7579 123.868 56.9615 123.15 58.0499 cv
123.323 55.7808 li
122.005 53.9263 li
123.181 54.4888 124.925 54.8443 126.283 54.959 cv
cp
f
206.632 572.794 mo
206.632 572.794 238.641 358.186 239.141 335.686 cv
239.674 311.671 231.641 123.186 223.141 97.6856 cv
214.039 70.379 179.141 51.6856 171.641 50.6856 cv
@
168.949 50.3267 mo
170.278 50.0255 171.957 49.4332 173.044 48.7139 cv
171.994 50.7325 li
172.478 52.9561 li
171.617 51.9771 170.153 50.9654 168.949 50.3267 cv
cp
f
178.641 573.186 mo
178.641 573.186 222.218 360.385 222.641 338.186 cv
223.091 314.493 219.811 129.213 212.632 104.055 cv
204.946 77.1153 177.15 57.4009 170.974 55.6856 cv
@
168.357 54.959 mo
169.716 54.8438 171.46 54.4888 172.636 53.9263 cv
171.317 55.7808 li
171.491 58.0499 li
170.773 56.9615 169.462 55.7574 168.357 54.959 cv
cp
f
129.786 582.457 mo
129.786 577.119 124.315 572.794 117.565 572.794 cv
110.816 572.794 105.345 577.119 105.345 582.457 cv
105.345 587.793 110.816 592.119 117.565 592.119 cv
124.315 592.119 129.786 587.793 129.786 582.457 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
112.373 578.818 mo
(\000$\000E\000T\000E\000C\000T)
[2.8727 1.76659 1.1061 1.76659 1.76659 0 ]xsh
111.36 583.366 mo
(\000W\000O\000R\000K\000\035\000\030)
[2.8727 1.9894 1.32491 1.9894 2.24403 0 ]xsh
110.089 587.913 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\015\000\036\000\021)
[1.32491 1.10611 2.8727 1.10611 .994698 1.98941 1.32491 2.24403 0 ]xsh
190.036 582.457 mo
190.036 577.119 184.565 572.794 177.816 572.794 cv
171.067 572.794 165.595 577.119 165.595 582.457 cv
165.595 587.793 171.067 592.119 177.816 592.119 cv
184.565 592.119 190.036 587.793 190.036 582.457 cv
.27058 .46666 .70197 rgb
f
0 gry
JYIOMZ+TimesNewRomanPSMT [3.97881 0 0 -3.97881 0 0 ]msf
172.623 578.818 mo
(\000$\000E\000T\000E\000C\000T)
[2.8727 1.7666 1.10611 1.76659 1.7666 0 ]xsh
171.61 583.366 mo
(\000W\000O\000R\000K\000\035\000\030)
[2.8727 1.98941 1.32492 1.9894 2.24403 0 ]xsh
170.339 587.913 mo
(\000\)\000\017\000/\000\032\000\000\000\021\000\015\000\036\000\021)
[1.32492 1.10611 2.8727 1.10611 .994705 1.9894 1.32492 2.24403 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/JYIOMZ+TimesNewRomanPSMT-Identity-H uf
/JYIOMZ+TimesNewRomanPSMT /CIDFont ur
/JYIONA+TimesNewRomanPS-ItalicMT-Identity-H uf
/JYIONA+TimesNewRomanPS-ItalicMT /CIDFont ur
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
