%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: JPEG Decoder.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:09:14 PM
%%BoundingBox: 0 0 469 361
%%HiResBoundingBox: 0 0 469 361
%%CropBox: 0 0 469 361
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -361 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 361 li
469 361 li
469 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 362 mo
505 362 li
505 0 li
35 0 li
cp
clp
.1785 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
37.428 359.572 mo
502.599 359.572 li
502.599 1.858 li
37.428 1.858 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
dup 69 /E put
dup 71 /G put
dup 74 /J put
dup 77 /M put
dup 80 /P put
dup 111 /o put
dup 116 /t put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/B <1C60D8A8C9B64EDFF4D0475F24A0512970A16CFF6BFBD1A1A12D07A62723
BF27DBD01B60ACEC3C9DB4E627348B4F9C96D245E2397B81856FE7B9149C0D88
A0B1C89901A357B578317FC0F49D1050D95CF70B7F7A7C5741B1B644F20C16DB
8F1BD7E6C45546C9302E6AD757CA73E92696A658F8A903A2E6B5FA3BE24637C3
3393411FB0E113E4BDFEBF11B4E90F57471B306273B2241C3C23457DA84CC16B
22781151F6DE159B155116967F7D53FA1DDDDF14084F0631BA1C08300F50E5BA
9DC336D8349BEA3371DCAFDF658781D6> |-
/E <1C60D8A8C9B7D8BE1621F7F8DAEB9FA9CBAFC8F4F4D756F2191C830A0E4A
58F87E3DDE67D49AF36DDF5F1FB2D74CAA0A1A0C249C8C349E149A4722F92BF7
61EFA3C2F9EC864F14F3A3AC121B867A3642166A4B07211381D27468A1D61050
1454C0DD1325D701AB4ADD917E16E61514B3C2631A525AEC590FB4C52AA73BF6
506DADDCC92C07368DF00A34F77E6ED1C2061C6913B4C24C30A64720E240E09F
9DD8F5EF76F17E9EEAE569D41B7D8D946B46BFFC> |-
/G <1C60D8A8C9B6079F258D65BC2350A422AEB94BCF2D0F96794C8438625C31
5D886EF37D4AC3C2F1E1338E25B58FA7772E0B9E5E3E726371665F3474CE0B82
EB9690B23BE3168D2BE4F6B0140B5077B79CDED50A140417505C243C7D98789B
5883DC2727B8882D3854E49A79F785598024348D171E79D4C21E1DA76E252BE9
80994299353DC669631C102ABE82C3B639BE771465159436AABE7CB91BD8812B
5152BA3433FC2701117F14E8CD24269DDA8CC4248C3859> |-
/J <1C60D8A8C9B7361F02E9DFE0B9C9639F5322575055288FA88C96DC9CB9D9
CA19F6F8F65E0BC3562823C923780B557829CF69C4889E8D8AE10C346B69E6B3
C49D8F83FB5992EF32CD5E> |-
/M <1C60D8A8C9B59F85E7C3D982C036A83A051CFEB65CDD644D44695DA87381
2F9E0DA4474B3DF6D63B3341F86CDE23D0512CA425D085DC5BA255E6B3240439
E201FEC100F452F18CDA5E088317BF79F4C8FC952A839FE77A57A286C006FAF4
6CE1F964CD62165C424C020FEAD96AC86FEFFC256D> |-
/P <1C60D8A8C9B7EF322B10A2A8DE6EF0A6CE60E86B1DF5C68015667A2338DB
07BCF91C9D8DCCB5967A656E7EB6651B3E305A306DA1BB8C1BAEECFC60DC00D8
8AEC56E3DF7455D57CB9BB0CC9A32704D4F0F1C39C5B2EDC70F42754CACE7253
FF5FDAE4B675FFF987E22613E24B8956EFA9C2C5B9AC406D966F459601B2046A
C9E54A3BB37C45EDEB> |-
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDSA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B 2{/.notdef}rp /E /.notdef /G 2{/.notdef}rp /J 
2{/.notdef}rp /M 2{/.notdef}rp /P 30{/.notdef}rp /o 4{/.notdef}rp /t 
139{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
38.6461 3.85695 mo
(JPEGtoBMP)
[.972092 1.38944 1.52687 1.80424 .694721 1.2495 1.66681 2.22159 0 ]xsh
40.284 246.046 mo
499.743 246.046 li
499.743 45.769 li
40.284 45.769 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B64EDFB39C8FA0E3107D39E1E26D40368A6A59D36B799EDDCB
A8AF8BCAEA2E296C5BB00979C4073082C4AC62DAAE27F25BE45DFF121DF075F7
3D37111C10DFF7C6BD4BFE8AE73B4FADB84F0E8B5722DEA1CA14F5AFDC440B45
4F635F5576E82C8F45782F1EDE0EC9CA59D48E4C0F81> |-
/U <1C60D8A8C9B6079F675A124E1112F68E116C07D407D6BD729F3D1467FEC9
DB1B717EDCA1CB257898FAA810DC98AD012099D6E27B9582DB9C127CF24AAE1E
5B37683D2BCD64B5A5B8A07FAB5E4A8A80CE7FE3009E0C18967F5352FF3AD65B
1392BE000C7D33B48AEC2DD2A19998C5FE8EA47D78> |-
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
/g <1C60D8A8C9B7A73D85D7E997B7B5DF7D7777AF52CC5562CB6E990E974840
46648599A1D9C4DB63B2EA37B7BBC0C3039255635B40FAB067F562720BFA98A6
8AA5F28640EAE52B9FE1BA9F5F2A49A2F977CAB7D5C25E3626BAA2BEB9E431EA
60B6FFDB96CDFE0161651CB3C7DDAAF79341AA1B63131C7BD07B3EF7C547B329
2DEEC810138CCDC2FA69E1A2AD41097A54F4DBBBA72B1810538F2F0FBA5B3B54
046B0BB798F435A12098BB54904B4FA0166943538B1D7B8EA5970358CDBCC48E
31C506A3AAB0AC2519075E7791339AF09F8C1F93B0D81A9E5ED3B02D4C03B817
17F61566CDC855CB444B31FBC8E71F4A79E39CF6ED7B9B21E0269B8614410251
F072B930BD3C2C0B5BE3125CE4461E97B369DD7B68AF48B8706DE7D2976BB7A8
F7FA6E1A10F519A6E8E51022609E6B7A2E822DDCD222A999CAA520FD83CCB934
D41B4EF6E07BE85DFA424019E44CA0D51152EDBDE920B3C59D4A719415BD84E9
F231F0CBEF222AB9855B090598B4D01FCC8283B4EC699D2D8EDA681DF37E56EB
75FAFC019A1A3645CA60183B64A594CD3556BA6088F7C2AF3F05FDD0875B0187
C18BC8AC2785F74D85EFAA74EA4D56B1D0576FD461BA0B37199C> |-
/h <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA64197CEECB76B9E4
D2E9F717E2E21BA6AFBDB9D486017DE1334EE2B8AC7E25B49C380829180892EE
A76E25D726C9DCA303C64F5FE456E4A565D8D0ED565D009BA02A6DD13A835659
5990FC1760FC10BB02F96DEC2D5390B1C4D4059132A392595F028220DA07D2CD
E701448700C9> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 67 /C put
dup 85 /U put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B /C /.notdef /E /.notdef /G 2{/.notdef}rp 
/J 2{/.notdef}rp /M 2{/.notdef}rp /P 4{/.notdef}rp /U 11{/.notdef}rp 
/a /.notdef /c /d /e /.notdef /g /h 
/i 2{/.notdef}rp /l /.notdef /n /o 4{/.notdef}rp /t 
139{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
41.4359 47.768 mo
(ChannelUnencoding)
[1.66681 1.2495 1.10952 1.2495 1.2495 1.10952 .694721 1.80424 1.2495 1.10952 1.2495 1.10952 
1.2495 1.2495 .694721 1.2495 0 ]xsh
43.14 233.194 mo
197.007 233.194 li
197.007 58.621 li
43.14 58.621 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Y <1C60D8A8C9B6079F6264F4C8DDC3F1487EEA19AC13B41424A9E78F0FDF92
05A588739AC8029E8253D862E9C870F33DCAED59F17DDFF066EDE3BDA3CA72E2
9EAB67D63B26C63D99BA43680717BDE9E4F738D4BE18E2DC3DEA86639EADB17A
186747A3D486EBE515CD66CBC55045390AF8B38CF858> |-
/underscore <1C60D8A8C9B7A73DCDBEB64DA5D4EE31FFCBE2EC06B4C4F1354
CB100A813> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 89 /Y put
dup 95 /underscore put
dup 114 /r put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B /C /.notdef /E /.notdef /G 2{/.notdef}rp 
/J 2{/.notdef}rp /M 2{/.notdef}rp /P 4{/.notdef}rp /U 3{/.notdef}rp 
/Y 5{/.notdef}rp /underscore /.notdef /a /.notdef /c /d 
/e /.notdef /g /h /i 2{/.notdef}rp /l /.notdef 
/n /o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
44.2836 60.62 mo
(ChannelUnencoder_Y)
[1.66681 1.2495 1.10952 1.2495 1.2495 1.10952 .694721 1.80424 1.2495 1.10952 1.2495 1.10952 
1.2495 1.2495 1.10952 .832146 1.2495 0 ]xsh
121.323 116.812 mo
175.23 116.812 li
175.23 73.258 li
121.323 73.258 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F62AF7EE2124AC712AE5D5419E262A0C00C6163DFBCB2
A6FA65DDDD5062250DB8BBFB46EB35827750F9FCEE696526B20FE9266474B179
350945BBDAF7180FAB04D619EB38198FC722361E0B3B5E50F9017F19C7BDCABB
285F506A04FE32C63936689B1F9C81923B03440D57336303C59B59E8D3C0659D
33> |-
/f <1C60D8A8C9B81F2C3AAA7F9332A1FC560AB2BC70F6F61F670AD82FC8B626
674790DAFBDF46077811E1DF38721CA7CA8FBC2C5E006E567037490710BD3A02
BCB7C7EDEC00C0FF3F7CF7FF144794FA5B0DC9D77482C00E98ABF65E83ECDA1A
E1009D> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 68 /D put
dup 102 /f put
dup 107 /k put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B /C /D /E /.notdef /G 2{/.notdef}rp 
/J 2{/.notdef}rp /M 2{/.notdef}rp /P 4{/.notdef}rp /U 3{/.notdef}rp 
/Y 5{/.notdef}rp /underscore /.notdef /a /.notdef /c /d 
/e /f /g /h /i /.notdef /k /l 
/.notdef /n /o 2{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
122.558 75.2569 mo
(BlockDCDifferenceDecoder)
[1.66682 .694717 1.2495 1.10951 1.2495 1.80424 1.66681 1.80424 .694717 .832153 .832153 1.10951 
.832153 1.10951 1.2495 1.10953 1.10951 1.80424 1.10951 1.10953 1.2495 1.2495 1.10953 0 
]xsh
118.288 132.163 mo
146.848 132.163 li
146.848 118.24 li
118.288 118.24 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B7D8BE1621F7F8A9A93A327F755C3E81E8F6E5B36D5D09EC27
E8352590DCF5FBB39847107CDCA7E2F69BF8A0E97E902F61DA0FFC19F5F5635E
A2E6B7FBC25C45E39802E8D22E33BC6334A08FAC75B725C0C2D4D8BA4EE1> |-
/Q <1C60D8A8C9B6079F258D65BC2331B95A48C80B9768E78495F9F852D084FE
B5569E0998B92A8C02FE98CC8756B9450AFC22EB75A028A68EEC267535515B8A
7AF5FA296BEEAF84AC729826043DC76CC7E6AEDD8E5722CD3906055C50935FC9
A9E5D884988B49C45AA5CE390B6810BD47B8089DA8CFB16CD03A129E9C7C7933
9702030A> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
/z <1C60D8A8C9B77FE284EFEC4CF0FCC63CDEB1624F39F402FFE3D4A95D1F81
2924519B69F6054956BEDD472A0597A54C3034FF3538C85678A4E4FE466B514C
141F526BEAADD3E6242801DF59EF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 76 /L put
dup 81 /Q put
dup 115 /s put
dup 117 /u put
dup 122 /z put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[66{/.notdef}rp /B /C /D /E /.notdef /G 2{/.notdef}rp 
/J /.notdef /L /M 2{/.notdef}rp /P /Q 3{/.notdef}rp 
/U 3{/.notdef}rp /Y 5{/.notdef}rp /underscore /.notdef /a /.notdef 
/c /d /e /f /g /h /i /.notdef 
/k /l /.notdef /n /o 2{/.notdef}rp /r /s 
/t /u 4{/.notdef}rp /z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
119.391 120.239 mo
(staticLosslessDeQuantization)
[.972092 .694725 1.10951 .694725 .694725 1.10951 1.52687 1.2495 .972084 .972092 .694733 1.10951 
.972092 .972092 1.80424 1.10951 1.80424 1.2495 1.10951 1.24951 .694717 .694717 1.10953 1.10951 
.694717 .694733 1.2495 0 ]xsh
45.996 219.985 mo
194.151 219.985 li
194.151 133.591 li
45.996 133.591 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
/T <1C60D8A8C9B7D8BE16B2E353E3300378A32828826C127DE3D6A3769F5542
8119DC48F4B555CFAC557278838F3EC6C5F7B64F6B44DFEFCBC8AF8174185170
E165701BB15CF1CB88629A978EF6D86FB8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 50 /two put
dup 84 /T put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 15{/.notdef}rp /B /C /D /E /.notdef 
/G 2{/.notdef}rp /J /.notdef /L /M 2{/.notdef}rp /P 
/Q 2{/.notdef}rp /T /U 3{/.notdef}rp /Y 5{/.notdef}rp /underscore 
/.notdef /a /.notdef /c /d /e /f /g 
/h /i /.notdef /k /l /.notdef /n /o 
2{/.notdef}rp /r /s /t /u 4{/.notdef}rp /z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
47.2455 135.59 mo
(iDCT_2D)
[.694721 1.80424 1.66681 1.52687 1.2495 1.2495 0 ]xsh
48.852 177.502 mo
191.295 177.502 li
191.295 137.875 li
48.852 137.875 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
/eight <1C60D8A8C9B7A73D9EB159A3CFECEE26FAC12AD4B6691842B4C84783
E84E1D8CD272AEC54014C937C15B810E403549328E3DC44B6A66E9E0AE5509A1
20FFE6F694340EC43D35C59CD7D1B2F14C1F1D5BA576A10F77E962817750FC0E
DC62627EE0E94BCE030A10C59143A015250A384C09B6A65F8572DF3FCBF68CF8
0D23E4E88D0691BD2178810DDABD5F40D8018F795B8CB5A52DDDD05F80E9A2BC
CDF3A5E14C701FBADF0447A7AE0E47FA8F86216AC25155BFF3569B19382CA905
7B18009FE630A2D7CEFDC3A4A3> |-
/p <1C60D8A8C9B7A73D9AFACE39AE6BAA6E09D7322029CE296F526808097535
692942DF193E08360A1A27EB6A08251F7D53D3FA96D22918185F2823E13833F6
44411211FB9E60C91D24768368C1EE71DFEA1AF8285D596D61CE8A067C14BC2E
E1974A4DF14D782DBEDB8D2CE5673BB9634CC4945A7FA5A5E1B87E0F2D94F438
C21548DAE429B68406206429A87E1B462DA7A9D2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 49 /one put
dup 56 /eight put
dup 112 /p put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two 5{/.notdef}rp /eight 9{/.notdef}rp /B /C 
/D /E /.notdef /G 2{/.notdef}rp /J /.notdef /L 
/M 2{/.notdef}rp /P /Q 2{/.notdef}rp /T /U 3{/.notdef}rp 
/Y 5{/.notdef}rp /underscore /.notdef /a /.notdef /c /d 
/e /f /g /h /i /.notdef /k /l 
/.notdef /n /o /p /.notdef /r /s /t 
/u 4{/.notdef}rp /z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
50.0246 139.874 mo
(helper_Parallel_8_iDCT_1D_Y)
[1.2495 1.10952 .694721 1.2495 1.10952 .83215 1.2495 1.38944 1.10952 .83215 1.10952 .694721 
.694721 1.10952 .694717 1.2495 1.2495 1.2495 .694717 1.80424 1.66681 1.52687 1.2495 1.2495 
1.80424 1.2495 0 ]xsh
48.852 218.557 mo
191.295 218.557 li
191.295 178.93 li
48.852 178.93 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/X <1C60D8A8C9B6079F018A6C0F7446D2B445C0985E58D9EC7255FDDA1388C8
A285E4675F402B73A97FA3A110BD20D6F3A33C58D55550E79D71619FC60E075E
E30F2C40DF9D51E2E4C2A7D2F7D91C30FB7BA0AB1C8970636A10E2B85E32118A
AA3C61730DBBB8CDA3EFEDBDBBD2FB5F93DA7A1BD9AB6E98429B78EC68619A38
39F5F8BE45E83387F989597EAE1978FFE9D1BA4DD28D4B532F48FB07EDBB5BD3
9A8C4F6225B87C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 88 /X put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two 5{/.notdef}rp /eight 9{/.notdef}rp /B /C 
/D /E /.notdef /G 2{/.notdef}rp /J /.notdef /L 
/M 2{/.notdef}rp /P /Q 2{/.notdef}rp /T /U 2{/.notdef}rp 
/X /Y 5{/.notdef}rp /underscore /.notdef /a /.notdef /c 
/d /e /f /g /h /i /.notdef /k 
/l /.notdef /n /o /p /.notdef /r /s 
/t /u 4{/.notdef}rp /z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
50.0246 180.929 mo
(helper_Parallel_8_iDCT_1D_X)
[1.2495 1.10952 .694721 1.2495 1.10952 .83215 1.2495 1.38944 1.10952 .83215 1.10952 .694721 
.694721 1.10952 .694717 1.2495 1.2495 1.2495 .694717 1.80424 1.66681 1.52687 1.2495 1.2495 
1.80424 1.2495 0 ]xsh
193.08 233.194 mo
346.947 233.194 li
346.947 58.621 li
193.08 58.621 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
194.292 60.62 mo
(ChannelUnencoder_C)
[1.66681 1.24951 1.10951 1.2495 1.2495 1.10953 .694717 1.80424 1.2495 1.10951 1.24951 1.10951 
1.2495 1.24951 1.10951 .832153 1.2495 0 ]xsh
239.847 116.812 mo
293.754 116.812 li
293.754 73.258 li
239.847 73.258 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
241.082 75.2569 mo
(BlockDCDifferenceDecoder)
[1.66681 .694733 1.2495 1.10951 1.2495 1.80424 1.66681 1.80424 .694717 .832153 .832153 1.10951 
.832138 1.10953 1.24951 1.1095 1.10953 1.80423 1.10953 1.10953 1.24951 1.24948 1.10953 0 
]xsh
255.733 132.163 mo
284.293 132.163 li
284.293 118.24 li
255.733 118.24 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
256.836 120.239 mo
(staticLosslessDeQuantization)
[.972107 .694702 1.10953 .694702 .694733 1.10953 1.52686 1.24951 .972076 .972107 .694733 1.1095 
.972107 .972076 1.80426 1.1095 1.80426 1.24948 1.10953 1.24951 .694702 .694733 1.10953 1.1095 
.694733 .694733 1.24948 0 ]xsh
195.936 219.985 mo
344.091 219.985 li
344.091 133.591 li
195.936 133.591 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
197.186 135.59 mo
(iDCT_2D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
198.792 177.502 mo
341.235 177.502 li
341.235 137.875 li
198.792 137.875 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
199.965 139.874 mo
(helper_Parallel_8_iDCT_1D_Y)
[1.2495 1.10953 .694717 1.2495 1.10953 .832138 1.2495 1.38945 1.10951 .832153 1.10951 .694733 
.694717 1.10951 .694733 1.2495 1.2495 1.24951 .694717 1.80424 1.66681 1.52687 1.2495 1.2495 
1.80424 1.2495 0 ]xsh
198.792 218.557 mo
341.235 218.557 li
341.235 178.93 li
198.792 178.93 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
199.965 180.929 mo
(helper_Parallel_8_iDCT_1D_X)
[1.2495 1.10953 .694717 1.2495 1.10953 .832138 1.2495 1.38945 1.10951 .832153 1.10951 .694733 
.694717 1.10951 .694733 1.2495 1.2495 1.24951 .694717 1.80424 1.66681 1.52687 1.2495 1.2495 
1.80424 1.2495 0 ]xsh
343.02 233.194 mo
496.887 233.194 li
496.887 58.621 li
343.02 58.621 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
344.232 60.62 mo
(ChannelUnencoder_C)
[1.66681 1.24951 1.1095 1.24951 1.24951 1.1095 .694733 1.80423 1.24951 1.10953 1.24948 1.10953 
1.24951 1.24948 1.10953 .832153 1.24948 0 ]xsh
358.014 116.812 mo
411.921 116.812 li
411.921 73.258 li
358.014 73.258 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
359.249 75.2569 mo
(BlockDCDifferenceDecoder)
[1.66681 .694733 1.24948 1.10953 1.24951 1.80423 1.66681 1.80426 .694702 .832153 .832153 1.10953 
.832123 1.10953 1.24951 1.1095 1.10953 1.80423 1.10953 1.10953 1.24951 1.24948 1.10953 0 
]xsh
391.215 132.163 mo
419.775 132.163 li
419.775 118.24 li
391.215 118.24 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
392.318 120.239 mo
(staticLosslessDeQuantization)
[.972107 .694702 1.10953 .694702 .694733 1.10953 1.52686 1.24951 .972076 .972107 .694733 1.1095 
.972107 .972076 1.80426 1.1095 1.80426 1.24948 1.10953 1.24951 .694702 .694733 1.10953 1.1095 
.694733 .694733 1.24948 0 ]xsh
345.876 219.985 mo
494.031 219.985 li
494.031 133.591 li
345.876 133.591 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
347.126 135.59 mo
(iDCT_2D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
348.732 177.502 mo
491.175 177.502 li
491.175 137.875 li
348.732 137.875 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
349.905 139.874 mo
(helper_Parallel_8_iDCT_1D_Y)
[1.24951 1.1095 .694733 1.24951 1.1095 .832153 1.24951 1.38943 1.10953 .832153 1.1095 .694733 
.694733 1.1095 .694733 1.24948 1.24951 1.24951 .694702 1.80426 1.66681 1.52686 1.24951 1.24951 
1.80423 1.24951 0 ]xsh
348.732 218.557 mo
491.175 218.557 li
491.175 178.93 li
348.732 178.93 li
cp
@
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
349.905 180.929 mo
(helper_Parallel_8_iDCT_1D_X)
[1.24951 1.1095 .694733 1.24951 1.1095 .832153 1.24951 1.38943 1.10953 .832153 1.1095 .694733 
.694733 1.1095 .694733 1.24948 1.24951 1.24951 .694702 1.80426 1.66681 1.52686 1.24951 1.24951 
1.80423 1.24951 0 ]xsh
200.22 301.024 mo
339.807 301.024 li
339.807 261.397 li
200.22 261.397 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C86
82F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CB
A64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762
A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A
9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61F
B9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 98 /b put
dup 109 /m put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two 5{/.notdef}rp /eight 9{/.notdef}rp /B /C 
/D /E /.notdef /G 2{/.notdef}rp /J /.notdef /L 
/M 2{/.notdef}rp /P /Q 2{/.notdef}rp /T /U 2{/.notdef}rp 
/X /Y 5{/.notdef}rp /underscore /.notdef /a /b /c 
/d /e /f /g /h /i /.notdef /k 
/l /m /n /o /p /.notdef /r /s 
/t /u 4{/.notdef}rp /z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
201.383 263.396 mo
(BlockDescrambler)
[1.66681 .694733 1.2495 1.10951 1.2495 1.80424 1.10953 .972092 1.10951 .832153 1.10951 1.94423 
1.2495 .694717 1.10953 0 ]xsh
277.867 10.248 mo
277.867 8.07898 274.351 6.32098 270.013 6.32098 cv
265.676 6.32098 262.159 8.07898 262.159 10.248 cv
262.159 12.416 265.676 14.174 270.013 14.174 cv
274.351 14.174 277.867 12.416 277.867 10.248 cv
@
277.867 10.248 mo
277.867 8.07898 274.351 6.32098 270.013 6.32098 cv
265.676 6.32098 262.159 8.07898 262.159 10.248 cv
262.159 12.416 265.676 14.174 270.013 14.174 cv
274.351 14.174 277.867 12.416 277.867 10.248 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/hyphen <1C60D8A8C9B81F2C7E673161CF52871F3F524B3A1BAC5ADA04F510A
476> |-
/slash <1C60D8A8C9B854D088EAD778FBC18D924BA165ED7CB0EB5700C3B61B
62ACF96E65C0BF> |-
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
/colon <1C60D8A8C9B854D0E389293C42E83787A5BE0CE9B5745E40D1B32D07
F826004562E0981DB26F3EF2E2B5CD932C33C49C462F9673F306A9A8ECFFE93D
9FCE8BF4190AA3F1208FCCE1> |-
/greater <1C60D8A8C9B7E7C1C7C30B940B3D62C7A181F0EBB0723CBB160375
71F050C44CCE59A85ACB3DB6BF9B03383F> |-
/F <1C60D8A8C9B7EF322B10A2A8DE6CF647A07CB452C54BD470E6C4C389B7AB
8653B88FE6E4626649FABCEAB5DAD30BD9C2A2F1F8512C1A1DC93BDB928A3688
B193ECEDB997255AB4DCBBC4BBB3FF147299B3653B9E76139CB6E91A13A47208
F2688B5C42863D22FFBF8FD8DF09F08A1966F6652461EEB3D18F0F0CB5B8E18D
6016409AA3D413D5FA051FCF9B4DFF0734259E7DCF> |-
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
/O <1C60D8A8C9B6079F258D65BC2331B95A484F6FB0C89DE7976C286549CD33
A4D7316575EC038BAA234ED3FB5DEACB25E52512A7CBD428E6DBD2EB830622E8
8A44262525560702DCFFFB3478FE1A2C6113548B23F661EC01296D75C1A7D5FE
B75CD951FFE5A9> |-
/R <1C60D8A8C9B64EDFF4D0475F241567109AA60E358A72CDD6748BBE527383
3D9930EA16405C9FA084F4E606B7DF07A2CCABEF78658BA281F5D25760E71232
16C34541C223BEC48612BD7C0052F7AD27E210716125E9B30EDB889188D65976
1E4423BF9E66EB5CCCE83D82A2DB04554982E2E899847CA739A4B92152682375
567D18A66EABD5068029F8FB7424BADB87039D0F6B1530> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 47 /slash put
dup 48 /zero put
dup 58 /colon put
dup 62 /greater put
dup 70 /F put
dup 73 /I put
dup 79 /O put
dup 82 /R put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one 
/two 5{/.notdef}rp /eight /.notdef /colon 3{/.notdef}rp /greater 3{/.notdef}rp 
/B /C /D /E /F /G /.notdef /I 
/J /.notdef /L /M /.notdef /O /P /Q 
/R /.notdef /T /U 2{/.notdef}rp /X /Y 5{/.notdef}rp 
/underscore /.notdef /a /b /c /d /e /f 
/g /h /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t /u 4{/.notdef}rp 
/z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
264.531 9.39094 mo
(FileReader)
[1.38943 .694733 .694733 1.1095 1.66681 1.10953 1.10953 1.24948 1.10953 0 ]xsh
265.318 12.247 mo
(I/O: 0->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
284.829 24.885 mo
284.829 22.716 278.196 20.958 270.013 20.958 cv
261.831 20.958 255.198 22.716 255.198 24.885 cv
255.198 27.053 261.831 28.811 270.013 28.811 cv
278.196 28.811 284.829 27.053 284.829 24.885 cv
@
284.829 24.885 mo
284.829 22.716 278.196 20.958 270.013 20.958 cv
261.831 20.958 255.198 22.716 255.198 24.885 cv
255.198 27.053 261.831 28.811 270.013 28.811 cv
278.196 28.811 284.829 27.053 284.829 24.885 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/asterisk <1C60D8A8C9B7A73DB9A0737247D562C61165E8E636EE73CF26D64
F3C6728422CEE27A3F00DC7152CA3773F07EA559F0959F48B519FDEC6150629C
166D2B4FBEF2A598C45B9530847243905C1F3F150F0DD5877800507BF2B97A2E
4942336B61DB2054C6AB2AE38E3AEA192A16823CC1BE212834012F90F71E96A0
46E312361C7B9D33CA838F52208FFCDFB3B3A9B2A9728D3AFAB94EEE3598CA05
C0D62AFFA345B041C6B4E56F6827F181D11C4BECD0C9CCA67> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
/nine <1C60D8A8C9B7A73DFCCE6C978678EE12F2E62BD7D7FA244984C1E12F1
0EB0B8765182EBCE165DFB850DB8B03381969B80BB1CA53FFB24B5DE34530C8C
83A80415FE19B7C2B551E605143CF6469C8BCE336F9A5E5012DD932CF553D663
37837328637F50B90FF9AE8815D00BBA7EFCE6D508C5B6EBE2D> |-
/S <1C60D8A8C9B7EF320E2EFDBCAC7BC76D0C8C1FC222AFE4F464C56D04CD48
5F140DB725EC46F068943283C9A43A14A852E22E87331165F602FD95AC890BE8
83DAD7F63C31168B480A95AC244C28C8F37F118A399681DB4822661628FBDA87
D99D0367C013E32688035EC31A5C3FC194FEB20C4FCD84A9EB3547C0D5A421A0
1B87DFDA871D7919B7251A9EC84A645CA15425845057F189EC65A90DD4028CC5
B10853B05E6F7AF9E84AC6588CDCE11B6EF766B248A8304E38964E579F6EF2DC
2D4971ED042868564E8E982FE2B2> |-
/bracketleft <1C60D8A8C9B81F2C1004709917F1EB9E9007379BA7EA5AF509
59B358F5E16AD02BEAED61B9B4504409E46461E8> |-
/bracketright <1C60D8A8C9B81F2C3AFAFC9F3F142FA2ECABD15503EDEA70F
5D5F5146242850878F31CB4D0C10EB6BE6291805C> |-
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 42 /asterisk put
dup 44 /comma put
dup 52 /four put
dup 57 /nine put
dup 83 /S put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 9{/.notdef}rp /asterisk /.notdef /comma /hyphen /.notdef 
/slash /zero /one /two /.notdef /four 3{/.notdef}rp /eight 
/nine /colon 3{/.notdef}rp /greater 3{/.notdef}rp /B /C /D 
/E /F /G /.notdef /I /J /.notdef /L 
/M /.notdef /O /P /Q /R /S /T 
/U 2{/.notdef}rp /X /Y /.notdef /bracketleft /.notdef /bracketright 
/.notdef /underscore /.notdef /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
3{/.notdef}rp /y /z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
257.52 24.028 mo
(JPEGByteStream_Parser)
[.972107 1.38943 1.52686 1.80426 1.66681 1.24948 .694733 1.10953 1.38943 .694733 .832123 1.10953 
1.10953 1.94421 1.24951 1.38943 1.10953 .832153 .972076 1.10953 0 ]xsh
259.905 26.8839 mo
(I/O: [48,*]->[192,*])
[.832153 .694702 1.80426 .694702 .624756 .832153 1.24951 1.24948 .624756 1.24951 .832153 .832123 
1.40942 .832153 1.24951 1.24951 1.24948 .624756 1.24951 0 ]xsh
270.013 14.353 mo
270.013 15.781 270.013 17.388 270.013 18.994 cv
@
269.656 18.994 mo
270.013 20.779 li
270.549 18.994 li
cp
@
269.656 18.994 mo
270.013 20.779 li
270.549 18.994 li
f
277.153 39.522 mo
277.153 37.353 273.957 35.595 270.013 35.595 cv
266.07 35.595 262.873 37.353 262.873 39.522 cv
262.873 41.69 266.07 43.448 270.013 43.448 cv
273.957 43.448 277.153 41.69 277.153 39.522 cv
@
277.153 39.522 mo
277.153 37.353 273.957 35.595 270.013 35.595 cv
266.07 35.595 262.873 37.353 262.873 39.522 cv
262.873 41.69 266.07 43.448 270.013 43.448 cv
273.957 43.448 277.153 41.69 277.153 39.522 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
266.126 38.665 mo
(Identity)
[.832153 1.24948 1.10953 1.24951 .694702 .694733 .694733 0 ]xsh
265.318 41.521 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
270.013 28.99 mo
270.013 30.418 270.013 32.025 270.013 33.631 cv
@
269.656 33.631 mo
270.013 35.416 li
270.549 33.631 li
cp
@
269.656 33.631 mo
270.013 35.416 li
270.549 33.631 li
f
282.508 53.266 mo
282.508 51.492 276.914 50.053 270.013 50.053 cv
263.113 50.053 257.518 51.492 257.518 53.266 cv
257.518 55.04 263.113 56.479 270.013 56.479 cv
276.914 56.479 282.508 55.04 282.508 53.266 cv
@
282.508 53.266 mo
282.508 51.492 276.914 50.053 270.013 50.053 cv
263.113 50.053 257.518 51.492 257.518 53.266 cv
257.518 55.04 263.113 56.479 270.013 56.479 cv
276.914 56.479 282.508 55.04 282.508 53.266 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/six <1C60D8A8C9B7A73DF81BACD811429F931042E1295F1D2320E46DE79DF7
47FCAABFFD92F045A475E54E15C8E93ECB3BD59C8545C0EF45BF22429615FC68
5C033A02F070B2C6D7D737838C1853D297AC8915086E73952A7A9847D6F588AB
17767CC39CB62607242BC1B7BFF5295CEB6C03755CD9B53DA2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 54 /six put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight /nine /colon 3{/.notdef}rp /greater 
3{/.notdef}rp /B /C /D /E /F /G /.notdef 
/I /J /.notdef /L /M /.notdef /O /P 
/Q /R /S /T /U 2{/.notdef}rp /X /Y 
/.notdef /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
259.255 53.837 mo
(roundrobin\(64,64,64\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
1.24951 .624756 1.24948 1.24951 .624756 1.24948 1.24951 0 ]xsh
270.013 43.627 mo
270.013 45.055 270.013 46.662 270.013 48.268 cv
@
269.656 48.268 mo
270.013 50.053 li
270.549 48.268 li
cp
@
269.656 48.268 mo
270.013 50.053 li
270.549 48.268 li
f
178.8 67.011 mo
178.8 64.842 173.525 63.084 167.019 63.084 cv
160.513 63.084 155.238 64.842 155.238 67.011 cv
155.238 69.179 160.513 70.938 167.019 70.938 cv
173.525 70.938 178.8 69.179 178.8 67.011 cv
@
178.8 67.011 mo
178.8 64.842 173.525 63.084 167.019 63.084 cv
160.513 63.084 155.238 64.842 155.238 67.011 cv
155.238 69.179 160.513 70.938 167.019 70.938 cv
173.525 70.938 178.8 69.179 178.8 67.011 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Z <1C60D8A8C9B7D8BE77A3BDA24C4F667A02060AD299A5EC1894B68DCAC3DB
787FE5F9D15DF76FDAF4298233CFCEF8B1E26BA6B780E4ACF507403C18EFE239
6ED23F8FD0119684BDFE54> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 90 /Z put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight /nine /colon 3{/.notdef}rp /greater 
3{/.notdef}rp /B /C /D /E /F /G /.notdef 
/I /J /.notdef /L /M /.notdef /O /P 
/Q /R /S /T /U 2{/.notdef}rp /X /Y 
/Z /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
157.58 66.1539 mo
(ZigZagUnordering)
[1.52687 .694717 1.2495 1.52687 1.10953 1.2495 1.80424 1.2495 1.2495 .832153 1.2495 1.10953 
.832138 .694717 1.24951 0 ]xsh
161.074 69.0099 mo
(I/O: 64->64)
[.832153 .694717 1.80424 .694717 .624756 1.2495 1.2495 .832153 1.40942 1.2495 0 ]xsh
257.697 53.802 mo
240.561 54.516 209.859 56.301 191.83 58.621 cv
187.368 59.335 180.942 61.477 175.587 63.619 cv
@
176.122 62.905 mo
174.516 63.976 li
176.301 63.798 li
cp
@
176.122 62.905 mo
174.516 63.976 li
176.301 63.798 li
f
281.794 67.011 mo
281.794 64.842 276.52 63.084 270.013 63.084 cv
263.507 63.084 258.232 64.842 258.232 67.011 cv
258.232 69.179 263.507 70.938 270.013 70.938 cv
276.52 70.938 281.794 69.179 281.794 67.011 cv
@
281.794 67.011 mo
281.794 64.842 276.52 63.084 270.013 63.084 cv
263.507 63.084 258.232 64.842 258.232 67.011 cv
258.232 69.179 263.507 70.938 270.013 70.938 cv
276.52 70.938 281.794 69.179 281.794 67.011 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
260.575 66.1539 mo
(ZigZagUnordering)
[1.52686 .694733 1.24951 1.52686 1.10953 1.24951 1.80423 1.24948 1.24951 .832153 1.24951 1.1095 
.832153 .694733 1.24948 0 ]xsh
264.069 69.0099 mo
(I/O: 64->64)
[.832153 .694702 1.80426 .694702 .624756 1.24951 1.24951 .832123 1.40942 1.24951 0 ]xsh
270.013 56.479 mo
270.013 57.907 270.013 59.514 270.013 61.12 cv
@
269.656 61.12 mo
270.013 62.905 li
270.549 61.12 li
cp
@
269.656 61.12 mo
270.013 62.905 li
270.549 61.12 li
f
384.789 67.011 mo
384.789 64.842 379.514 63.084 373.008 63.084 cv
366.502 63.084 361.227 64.842 361.227 67.011 cv
361.227 69.179 366.502 70.938 373.008 70.938 cv
379.514 70.938 384.789 69.179 384.789 67.011 cv
@
384.789 67.011 mo
384.789 64.842 379.514 63.084 373.008 63.084 cv
366.502 63.084 361.227 64.842 361.227 67.011 cv
361.227 69.179 366.502 70.938 373.008 70.938 cv
379.514 70.938 384.789 69.179 384.789 67.011 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
363.569 66.1539 mo
(ZigZagUnordering)
[1.52686 .694733 1.24951 1.52686 1.10953 1.24951 1.80423 1.24951 1.24948 .832153 1.24951 1.1095 
.832153 .694733 1.24948 0 ]xsh
367.063 69.0099 mo
(I/O: 64->64)
[.832153 .694702 1.80426 .694702 .624756 1.24951 1.24951 .832123 1.40942 1.24951 0 ]xsh
282.33 53.802 mo
299.466 54.516 330.168 56.301 348.196 58.621 cv
352.48 59.335 358.728 61.299 363.904 63.262 cv
@
363.726 63.619 mo
365.511 63.976 li
364.083 62.905 li
cp
@
363.726 63.619 mo
365.511 63.976 li
364.083 62.905 li
f
280.723 241.405 mo
280.723 239.631 275.928 238.192 270.013 238.192 cv
264.099 238.192 259.303 239.631 259.303 241.405 cv
259.303 243.179 264.099 244.618 270.013 244.618 cv
275.928 244.618 280.723 243.179 280.723 241.405 cv
@
280.723 241.405 mo
280.723 239.631 275.928 238.192 270.013 238.192 cv
264.099 238.192 259.303 239.631 259.303 241.405 cv
259.303 243.179 264.099 244.618 270.013 244.618 cv
275.928 244.618 280.723 243.179 280.723 241.405 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
261.13 241.976 mo
(roundrobin\(1,1,1\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 .624725 1.24951 0 ]xsh
279.474 255.15 mo
279.474 252.981 275.238 251.223 270.013 251.223 cv
264.789 251.223 260.553 252.981 260.553 255.15 cv
260.553 257.318 264.789 259.076 270.013 259.076 cv
275.238 259.076 279.474 257.318 279.474 255.15 cv
@
279.474 255.15 mo
279.474 252.981 275.238 251.223 270.013 251.223 cv
264.789 251.223 260.553 252.981 260.553 255.15 cv
260.553 257.318 264.789 259.076 270.013 259.076 cv
275.238 259.076 279.474 257.318 279.474 255.15 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73DB9E68392B0D8A76464A51F2E94D7CC8D0C2C4EA9
EB677CBC38A50658519E8BF18CD893FCF8B1BA3E22E132B8EDB4B7CD483A2AC4
23E82DF2F3816B8AE8EA5F180D3F5DFF2BF284FCE4CE5C4E107DDB61A9BE179C
50061EE6040417B0DF341D85D92A63653C2A28BA649E4CD9966C4B081E30F323
54693AC79886604480856D93C0D7CC0DE6962663CC1F198BBFA4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/.notdef /six /.notdef /eight /nine /colon 3{/.notdef}rp /greater 
3{/.notdef}rp /B /C /D /E /F /G /.notdef 
/I /J /.notdef /L /M /.notdef /O /P 
/Q /R /S /T /U 2{/.notdef}rp /X /Y 
/Z /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef /a 
/b /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u 3{/.notdef}rp /y /z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
262.863 254.293 mo
(YCbCrtoRGB)
[1.80423 1.66681 1.24951 1.66681 .832153 .694733 1.24948 1.66681 1.80426 0 ]xsh
265.318 257.149 mo
(I/O: 3->3)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
270.013 244.618 mo
270.013 246.046 270.013 247.653 270.013 249.259 cv
@
269.656 249.259 mo
270.013 251.044 li
270.549 249.259 li
cp
@
269.656 249.259 mo
270.013 251.044 li
270.549 249.259 li
f
173.802 80.755 mo
173.802 78.981 169.167 77.542 163.449 77.542 cv
157.731 77.542 153.096 78.981 153.096 80.755 cv
153.096 82.529 157.731 83.968 163.449 83.968 cv
169.167 83.968 173.802 82.529 173.802 80.755 cv
@
173.802 80.755 mo
173.802 78.981 169.167 77.542 163.449 77.542 cv
157.731 77.542 153.096 78.981 153.096 80.755 cv
153.096 82.529 157.731 83.968 163.449 83.968 cv
169.167 83.968 173.802 82.529 173.802 80.755 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
154.878 81.326 mo
(roundrobin\(1,63\))
[.832153 1.2495 1.2495 1.2495 1.24951 .832138 1.24951 1.2495 .694717 1.2495 .832153 1.2495 
.624756 1.2495 1.2495 0 ]xsh
165.948 71.116 mo
165.591 72.544 165.055 74.329 164.698 75.936 cv
@
164.341 75.757 mo
164.341 77.542 li
165.234 75.936 li
cp
@
164.341 75.757 mo
164.341 77.542 li
165.234 75.936 li
f
156.309 96.463 mo
156.309 93.111 148.797 90.394 139.53 90.394 cv
130.263 90.394 122.751 93.111 122.751 96.463 cv
122.751 99.815 130.263 102.532 139.53 102.532 cv
148.797 102.532 156.309 99.815 156.309 96.463 cv
@
156.309 96.463 mo
156.309 93.111 148.797 90.394 139.53 90.394 cv
130.263 90.394 122.751 93.111 122.751 96.463 cv
122.751 99.815 130.263 102.532 139.53 102.532 cv
148.797 102.532 156.309 99.815 156.309 96.463 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B6079F005CDFC8A94B75FD7D89F5577E741BA5E9223B5FB59E
3315C336CDEC6F323D18A178B38DCEDA9B451B37165385283368F94E5EC5086C
A620D2549B18425DA74331F96252E5D5358EE44D33B708D9B8822975F755BF6A
D18C81AA5BF9B47D39D0AFBBC3A6521D0B18D90963534584D1092363898607EF
C07B44A235786C96> |-
/H <1C60D8A8C9B6079F62AF7EE2120CD8667DDD4FA2DBFCE5E63E48B84464C1
802A269C64DF6D959EDF25835FFE2A562C206570E6F5B714FC53C2D5C307E1C8
A7B7F4078E600204C204D1FAC19490C22F80872356DF60239B84CD61D63A7DAA
1B4B4595C75AFC0D0514E00256BFA54FA5E3DE43161DB123A8A356631F> |-
/K <1C60D8A8C9B6079F62AF7EE261D2819ED7974217E7034289FA7C1BABF100
C6A5480EF2F67F33525B9F0C3A7EBEA8703E8C35FFE54D3010A9809D5E12442C
409B269A7D4346FFD3D0C882E0638FE5876FB72290B12BADDE73C28ABC60097D
5F47A0B45D92F7FD41DF8475D961E4F5A95EF6558D45744A11DE71603FC94A1B
038775E2BC960C01D2B930F2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 65 /A put
dup 72 /H put
dup 75 /K put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/.notdef /six /.notdef /eight /nine /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/H /I /J /K /L /M /.notdef /O 
/P /Q /R /S /T /U 2{/.notdef}rp /X 
/Y /Z /bracketleft /.notdef /bracketright /.notdef /underscore /.notdef 
/a /b /c /d /e /f /g /h 
/i /.notdef /k /l /m /n /o /p 
/.notdef /r /s /t /u 3{/.notdef}rp /y /z 
133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
126.418 94.178 mo
(IntegerDifferenceDecoder)
[.832146 1.2495 .694717 1.10953 1.2495 1.10951 .832153 1.80424 .694717 .832153 .832138 1.10953 
.832138 1.10953 1.2495 1.10951 1.10953 1.80423 1.10953 1.10951 1.2495 1.24951 1.10951 0 
]xsh
134.835 97.034 mo
(I/O: 1->1)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40942 0 ]xsh
125.717 99.89 mo
(*** PEEKS 1 AHEAD ***)
[1.2495 1.2495 1.24951 .624741 1.38945 1.52687 1.52687 1.80424 1.38943 .624756 1.2495 .624741 
1.80424 1.80424 1.52687 1.80424 1.80423 .624756 1.2495 1.2495 0 ]xsh
158.986 83.611 mo
156.13 85.575 152.203 88.074 148.633 90.394 cv
@
148.812 89.68 mo
147.562 91.108 li
149.347 90.573 li
cp
@
148.812 89.68 mo
147.562 91.108 li
149.347 90.573 li
f
173.802 96.463 mo
173.802 94.294 170.605 92.536 166.662 92.536 cv
162.719 92.536 159.522 94.294 159.522 96.463 cv
159.522 98.632 162.719 100.39 166.662 100.39 cv
170.605 100.39 173.802 98.632 173.802 96.463 cv
@
173.802 96.463 mo
173.802 94.294 170.605 92.536 166.662 92.536 cv
162.719 92.536 159.522 94.294 159.522 96.463 cv
159.522 98.632 162.719 100.39 166.662 100.39 cv
170.605 100.39 173.802 98.632 173.802 96.463 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
162.775 95.6059 mo
(Identity)
[.832153 1.2495 1.10951 1.24951 .694717 .694717 .694717 0 ]xsh
161.967 98.462 mo
(I/O: 1->1)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40942 0 ]xsh
164.163 83.968 mo
164.52 85.932 165.055 88.431 165.412 90.751 cv
@
164.877 90.751 mo
165.769 92.358 li
165.769 90.573 li
cp
@
164.877 90.751 mo
165.769 92.358 li
165.769 90.573 li
f
149.883 112.171 mo
149.883 110.397 145.248 108.958 139.53 108.958 cv
133.812 108.958 129.177 110.397 129.177 112.171 cv
129.177 113.945 133.812 115.384 139.53 115.384 cv
145.248 115.384 149.883 113.945 149.883 112.171 cv
@
149.883 112.171 mo
149.883 110.397 145.248 108.958 139.53 108.958 cv
133.812 108.958 129.177 110.397 129.177 112.171 cv
129.177 113.945 133.812 115.384 139.53 115.384 cv
145.248 115.384 149.883 113.945 149.883 112.171 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
130.958 112.742 mo
(roundrobin\(1,63\))
[.832153 1.2495 1.2495 1.2495 1.24951 .832138 1.24951 1.2495 .694717 1.2495 .832153 1.2495 
.624756 1.2495 1.2495 0 ]xsh
145.42 126.63 mo
145.42 124.461 139.666 122.703 132.568 122.703 cv
125.471 122.703 119.717 124.461 119.717 126.63 cv
119.717 128.798 125.471 130.556 132.568 130.556 cv
139.666 130.556 145.42 128.798 145.42 126.63 cv
@
145.42 126.63 mo
145.42 124.461 139.666 122.703 132.568 122.703 cv
125.471 122.703 119.717 124.461 119.717 126.63 cv
119.717 128.798 125.471 130.556 132.568 130.556 cv
139.666 130.556 145.42 128.798 145.42 126.63 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
122.019 125.773 mo
(staticDeQuantization)
[.972092 .694725 1.10951 .694725 .694717 1.10952 1.80424 1.10953 1.80423 1.24951 1.10951 1.2495 
.694733 .694717 1.10951 1.10953 .694717 .694717 1.2495 0 ]xsh
126.623 128.629 mo
(I/O: 64->64)
[.832146 .694725 1.80424 .694717 .624756 1.2495 1.2495 .832153 1.40942 1.2495 0 ]xsh
137.923 115.384 mo
137.031 116.991 136.138 119.133 135.246 120.918 cv
@
134.889 120.739 mo
134.532 122.524 li
135.603 121.096 li
cp
@
134.889 120.739 mo
134.532 122.524 li
135.603 121.096 li
f
139.53 102.532 mo
139.53 104.139 139.53 105.745 139.53 107.352 cv
@
139.173 107.173 mo
139.53 108.958 li
140.065 107.173 li
cp
@
139.173 107.173 mo
139.53 108.958 li
140.065 107.173 li
f
162.556 99.855 mo
161.128 100.926 159.7 101.818 158.451 102.532 cv
155.416 104.317 150.597 106.638 146.848 108.78 cv
@
146.67 108.423 mo
145.242 109.494 li
147.027 109.137 li
cp
@
146.67 108.423 mo
145.242 109.494 li
147.027 109.137 li
f
144.349 145.372 mo
144.349 143.598 137.477 142.159 128.998 142.159 cv
120.52 142.159 113.648 143.598 113.648 145.372 cv
113.648 147.146 120.52 148.585 128.998 148.585 cv
137.477 148.585 144.349 147.146 144.349 145.372 cv
@
144.349 145.372 mo
144.349 143.598 137.477 142.159 128.998 142.159 cv
120.52 142.159 113.648 143.598 113.648 145.372 cv
113.648 147.146 120.52 148.585 128.998 148.585 cv
137.477 148.585 144.349 147.146 144.349 145.372 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
115.429 145.943 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.832146 1.2495 1.2495 1.2495 1.2495 .832153 1.2495 1.2495 .694717 1.2495 .832153 1.2495 
.624756 1.2495 .624756 1.2495 .624741 1.24951 .624741 1.24951 .624741 1.24951 .624741 1.2495 
.624756 1.2495 0 ]xsh
131.854 130.735 mo
131.319 133.591 130.605 137.518 129.891 140.553 cv
@
129.534 140.374 mo
129.534 142.159 li
130.426 140.553 li
cp
@
129.534 140.374 mo
129.534 142.159 li
130.426 140.553 li
f
64.917 159.117 mo
64.917 156.948 61.6404 155.19 57.5985 155.19 cv
53.5566 155.19 50.28 156.948 50.28 159.117 cv
50.28 161.285 53.5566 163.043 57.5985 163.043 cv
61.6404 163.043 64.917 161.285 64.917 159.117 cv
@
64.917 159.117 mo
64.917 156.948 61.6404 155.19 57.5985 155.19 cv
53.5566 155.19 50.28 156.948 50.28 159.117 cv
50.28 161.285 53.5566 163.043 57.5985 163.043 cv
61.6404 163.043 64.917 161.285 64.917 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
52.6005 158.26 mo
(iDCT_1D)
[.694721 1.80424 1.66681 1.52687 1.2495 1.2495 0 ]xsh
52.9029 161.116 mo
(I/O: 8->8)
[.83215 .694721 1.80424 .694721 .624748 1.2495 .83215 1.40942 0 ]xsh
116.146 147.157 mo
102.045 149.121 79.554 152.512 65.988 155.011 cv
65.4525 155.19 64.7385 155.368 63.846 155.725 cv
@
64.203 155.011 mo
62.775 156.261 li
64.56 155.904 li
cp
@
64.203 155.011 mo
62.775 156.261 li
64.56 155.904 li
f
82.767 159.117 mo
82.767 156.948 79.4904 155.19 75.4485 155.19 cv
71.4066 155.19 68.13 156.948 68.13 159.117 cv
68.13 161.285 71.4066 163.043 75.4485 163.043 cv
79.4904 163.043 82.767 161.285 82.767 159.117 cv
@
82.767 159.117 mo
82.767 156.948 79.4904 155.19 75.4485 155.19 cv
71.4066 155.19 68.13 156.948 68.13 159.117 cv
68.13 161.285 71.4066 163.043 75.4485 163.043 cv
79.4904 163.043 82.767 161.285 82.767 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
70.4505 158.26 mo
(iDCT_1D)
[.694725 1.80424 1.66681 1.52687 1.2495 1.2495 0 ]xsh
70.7529 161.116 mo
(I/O: 8->8)
[.832146 .694725 1.80424 .694725 .624748 1.2495 .832146 1.40942 0 ]xsh
117.931 147.514 mo
107.757 149.656 92.9415 152.691 83.838 155.011 cv
83.3025 155.19 82.5885 155.547 81.8745 155.725 cv
@
82.053 155.19 mo
80.625 156.261 li
82.41 155.904 li
cp
@
82.053 155.19 mo
80.625 156.261 li
82.41 155.904 li
f
100.617 159.117 mo
100.617 156.948 97.3404 155.19 93.2985 155.19 cv
89.2566 155.19 85.98 156.948 85.98 159.117 cv
85.98 161.285 89.2566 163.043 93.2985 163.043 cv
97.3404 163.043 100.617 161.285 100.617 159.117 cv
@
100.617 159.117 mo
100.617 156.948 97.3404 155.19 93.2985 155.19 cv
89.2566 155.19 85.98 156.948 85.98 159.117 cv
85.98 161.285 89.2566 163.043 93.2985 163.043 cv
97.3404 163.043 100.617 161.285 100.617 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
88.3005 158.26 mo
(iDCT_1D)
[.694725 1.80424 1.66682 1.52686 1.2495 1.2495 0 ]xsh
88.6029 161.116 mo
(I/O: 8->8)
[.832146 .694725 1.80424 .694725 .624748 1.2495 .832146 1.40942 0 ]xsh
120.966 148.05 mo
114.897 150.192 106.864 153.048 101.688 155.011 cv
101.152 155.19 100.438 155.547 99.7245 155.904 cv
@
100.081 155.19 mo
98.6535 156.439 li
100.438 156.082 li
cp
@
100.081 155.19 mo
98.6535 156.439 li
100.438 156.082 li
f
118.467 159.117 mo
118.467 156.948 115.19 155.19 111.148 155.19 cv
107.107 155.19 103.83 156.948 103.83 159.117 cv
103.83 161.285 107.107 163.043 111.148 163.043 cv
115.19 163.043 118.467 161.285 118.467 159.117 cv
@
118.467 159.117 mo
118.467 156.948 115.19 155.19 111.148 155.19 cv
107.107 155.19 103.83 156.948 103.83 159.117 cv
103.83 161.285 107.107 163.043 111.148 163.043 cv
115.19 163.043 118.467 161.285 118.467 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
106.151 158.26 mo
(iDCT_1D)
[.694725 1.80424 1.66681 1.52687 1.2495 1.2495 0 ]xsh
106.453 161.116 mo
(I/O: 8->8)
[.832146 .694725 1.80424 .694725 .624748 1.2495 .832146 1.40942 0 ]xsh
124.893 148.407 mo
122.394 150.192 119.359 152.691 116.682 154.654 cv
@
116.503 154.297 mo
115.432 155.725 li
117.039 154.833 li
cp
@
116.503 154.297 mo
115.432 155.725 li
117.039 154.833 li
f
136.317 159.117 mo
136.317 156.948 133.04 155.19 128.998 155.19 cv
124.957 155.19 121.68 156.948 121.68 159.117 cv
121.68 161.285 124.957 163.043 128.998 163.043 cv
133.04 163.043 136.317 161.285 136.317 159.117 cv
@
136.317 159.117 mo
136.317 156.948 133.04 155.19 128.998 155.19 cv
124.957 155.19 121.68 156.948 121.68 159.117 cv
121.68 161.285 124.957 163.043 128.998 163.043 cv
133.04 163.043 136.317 161.285 136.317 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
124.001 158.26 mo
(iDCT_1D)
[.694725 1.80424 1.66682 1.52687 1.2495 1.2495 0 ]xsh
124.303 161.116 mo
(I/O: 8->8)
[.832146 .694725 1.80424 .694717 .624756 1.2495 .832153 1.40942 0 ]xsh
128.998 148.585 mo
128.998 150.013 128.998 151.62 128.998 153.226 cv
@
128.641 153.226 mo
128.998 155.011 li
129.534 153.226 li
cp
@
128.641 153.226 mo
128.998 155.011 li
129.534 153.226 li
f
154.167 159.117 mo
154.167 156.948 150.89 155.19 146.848 155.19 cv
142.807 155.19 139.53 156.948 139.53 159.117 cv
139.53 161.285 142.807 163.043 146.848 163.043 cv
150.89 163.043 154.167 161.285 154.167 159.117 cv
@
154.167 159.117 mo
154.167 156.948 150.89 155.19 146.848 155.19 cv
142.807 155.19 139.53 156.948 139.53 159.117 cv
139.53 161.285 142.807 163.043 146.848 163.043 cv
150.89 163.043 154.167 161.285 154.167 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
141.851 158.26 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
142.153 161.116 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40944 0 ]xsh
133.104 148.407 mo
135.603 150.192 138.637 152.691 141.315 154.654 cv
@
140.958 154.833 mo
142.564 155.725 li
141.493 154.297 li
cp
@
140.958 154.833 mo
142.564 155.725 li
141.493 154.297 li
f
172.017 159.117 mo
172.017 156.948 168.74 155.19 164.698 155.19 cv
160.657 155.19 157.38 156.948 157.38 159.117 cv
157.38 161.285 160.657 163.043 164.698 163.043 cv
168.74 163.043 172.017 161.285 172.017 159.117 cv
@
172.017 159.117 mo
172.017 156.948 168.74 155.19 164.698 155.19 cv
160.657 155.19 157.38 156.948 157.38 159.117 cv
157.38 161.285 160.657 163.043 164.698 163.043 cv
168.74 163.043 172.017 161.285 172.017 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
159.701 158.26 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
160.003 161.116 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40944 0 ]xsh
137.031 148.05 mo
143.1 150.192 151.311 153.048 156.309 155.011 cv
156.666 155.19 157.023 155.368 157.558 155.547 cv
@
157.38 155.904 mo
159.165 156.261 li
157.737 155.19 li
cp
@
157.38 155.904 mo
159.165 156.261 li
157.737 155.19 li
f
189.867 159.117 mo
189.867 156.948 186.59 155.19 182.548 155.19 cv
178.507 155.19 175.23 156.948 175.23 159.117 cv
175.23 161.285 178.507 163.043 182.548 163.043 cv
186.59 163.043 189.867 161.285 189.867 159.117 cv
@
189.867 159.117 mo
189.867 156.948 186.59 155.19 182.548 155.19 cv
178.507 155.19 175.23 156.948 175.23 159.117 cv
175.23 161.285 178.507 163.043 182.548 163.043 cv
186.59 163.043 189.867 161.285 189.867 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
177.551 158.26 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
177.853 161.116 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40942 0 ]xsh
140.244 147.514 mo
150.418 149.656 165.055 152.691 174.159 155.011 cv
174.516 155.011 175.051 155.19 175.408 155.368 cv
@
175.408 155.904 mo
177.193 156.261 li
175.765 155.011 li
cp
@
175.408 155.904 mo
177.193 156.261 li
175.765 155.011 li
f
135.424 172.861 mo
135.424 171.087 128.552 169.648 120.073 169.648 cv
111.595 169.648 104.723 171.087 104.723 172.861 cv
104.723 174.635 111.595 176.074 120.073 176.074 cv
128.552 176.074 135.424 174.635 135.424 172.861 cv
@
135.424 172.861 mo
135.424 171.087 128.552 169.648 120.073 169.648 cv
111.595 169.648 104.723 171.087 104.723 172.861 cv
104.723 174.635 111.595 176.074 120.073 176.074 cv
128.552 176.074 135.424 174.635 135.424 172.861 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
106.504 173.432 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.832146 1.2495 1.2495 1.2495 1.2495 .832153 1.2495 1.2495 .694717 1.2495 .832153 1.2495 
.624756 1.2495 .624748 1.2495 .624748 1.2495 .624748 1.2495 .624748 1.2495 .624756 1.2495 
.624756 1.2495 0 ]xsh
135.424 186.427 mo
135.424 184.653 128.552 183.214 120.073 183.214 cv
111.595 183.214 104.723 184.653 104.723 186.427 cv
104.723 188.201 111.595 189.64 120.073 189.64 cv
128.552 189.64 135.424 188.201 135.424 186.427 cv
@
135.424 186.427 mo
135.424 184.653 128.552 183.214 120.073 183.214 cv
111.595 183.214 104.723 184.653 104.723 186.427 cv
104.723 188.201 111.595 189.64 120.073 189.64 cv
128.552 189.64 135.424 188.201 135.424 186.427 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
106.504 186.998 mo
(roundrobin\(8,8,8,8,8,8,8,8\))
[.832146 1.2495 1.2495 1.2495 1.2495 .832153 1.2495 1.2495 .694717 1.2495 .832153 1.2495 
.624756 1.2495 .624748 1.2495 .624748 1.2495 .624748 1.2495 .624748 1.2495 .624756 1.2495 
.624756 1.2495 0 ]xsh
120.073 176.074 mo
120.073 177.681 120.073 179.644 120.073 181.429 cv
@
119.716 181.429 mo
120.073 183.214 li
120.609 181.429 li
cp
@
119.716 181.429 mo
120.073 183.214 li
120.609 181.429 li
f
62.775 161.973 mo
63.846 162.508 65.0955 163.044 65.988 163.222 cv
76.698 165.543 94.0125 168.577 106.15 170.541 cv
@
105.972 170.898 mo
107.757 170.898 li
106.15 170.005 li
cp
@
105.972 170.898 mo
107.757 170.898 li
106.15 170.005 li
f
80.625 161.973 mo
81.8745 162.508 82.9455 162.865 83.838 163.222 cv
90.264 165.186 100.617 168.042 108.649 170.005 cv
@
108.471 170.362 mo
110.256 170.362 li
108.649 169.47 li
cp
@
108.471 170.362 mo
110.256 170.362 li
108.649 169.47 li
f
98.6535 161.794 mo
102.58 163.936 108.471 166.792 112.933 169.113 cv
@
112.576 169.47 mo
114.361 169.827 li
112.933 168.577 li
cp
@
112.576 169.47 mo
114.361 169.827 li
112.933 168.577 li
f
113.647 162.865 mo
114.718 164.472 115.968 166.435 117.039 168.22 cv
@
116.682 168.399 mo
117.931 169.648 li
117.396 167.863 li
cp
@
116.682 168.399 mo
117.931 169.648 li
117.396 167.863 li
f
126.499 162.865 mo
125.428 164.472 124.179 166.435 123.108 168.22 cv
@
122.751 167.863 mo
122.215 169.648 li
123.465 168.399 li
cp
@
122.751 167.863 mo
122.215 169.648 li
123.465 168.399 li
f
141.493 161.794 mo
137.566 163.936 131.676 166.792 127.213 169.113 cv
@
127.213 168.577 mo
125.785 169.827 li
127.57 169.47 li
cp
@
127.213 168.577 mo
125.785 169.827 li
127.57 169.47 li
f
159.343 161.973 mo
158.272 162.508 157.201 163.044 156.309 163.222 cv
149.704 165.186 139.173 168.042 131.14 170.005 cv
@
131.676 169.291 mo
130.069 170.362 li
131.854 170.184 li
cp
@
131.676 169.291 mo
130.069 170.362 li
131.854 170.184 li
f
177.372 162.151 mo
176.301 162.687 175.051 163.044 174.159 163.222 cv
163.27 165.721 145.599 168.756 133.461 170.719 cv
@
133.996 170.184 mo
132.39 170.898 li
134.175 171.076 li
cp
@
133.996 170.184 mo
132.39 170.898 li
134.175 171.076 li
f
64.917 200.172 mo
64.917 198.003 61.6404 196.245 57.5985 196.245 cv
53.5566 196.245 50.28 198.003 50.28 200.172 cv
50.28 202.34 53.5566 204.098 57.5985 204.098 cv
61.6404 204.098 64.917 202.34 64.917 200.172 cv
@
64.917 200.172 mo
64.917 198.003 61.6404 196.245 57.5985 196.245 cv
53.5566 196.245 50.28 198.003 50.28 200.172 cv
50.28 202.34 53.5566 204.098 57.5985 204.098 cv
61.6404 204.098 64.917 202.34 64.917 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
52.6005 199.315 mo
(iDCT_1D)
[.694721 1.80424 1.66681 1.52687 1.2495 1.2495 0 ]xsh
52.9029 202.171 mo
(I/O: 8->8)
[.83215 .694721 1.80424 .694721 .624748 1.2495 .83215 1.40942 0 ]xsh
107.935 188.391 mo
95.7975 190.354 77.412 193.567 65.988 196.066 cv
65.4525 196.245 64.7385 196.423 63.846 196.78 cv
@
64.203 196.066 mo
62.775 197.316 li
64.56 196.959 li
cp
@
64.203 196.066 mo
62.775 197.316 li
64.56 196.959 li
f
82.767 200.172 mo
82.767 198.003 79.4904 196.245 75.4485 196.245 cv
71.4066 196.245 68.13 198.003 68.13 200.172 cv
68.13 202.34 71.4066 204.098 75.4485 204.098 cv
79.4904 204.098 82.767 202.34 82.767 200.172 cv
@
82.767 200.172 mo
82.767 198.003 79.4904 196.245 75.4485 196.245 cv
71.4066 196.245 68.13 198.003 68.13 200.172 cv
68.13 202.34 71.4066 204.098 75.4485 204.098 cv
79.4904 204.098 82.767 202.34 82.767 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
70.4505 199.315 mo
(iDCT_1D)
[.694725 1.80424 1.66681 1.52687 1.2495 1.2495 0 ]xsh
70.7529 202.171 mo
(I/O: 8->8)
[.832146 .694725 1.80424 .694725 .624748 1.2495 .832146 1.40942 0 ]xsh
110.256 188.926 mo
102.223 191.068 90.7995 193.924 83.838 196.066 cv
83.3025 196.245 82.5885 196.602 81.8745 196.959 cv
@
82.2315 196.245 mo
80.8035 197.494 li
82.5885 197.137 li
cp
@
82.2315 196.245 mo
80.8035 197.494 li
82.5885 197.137 li
f
100.617 200.172 mo
100.617 198.003 97.3404 196.245 93.2985 196.245 cv
89.2566 196.245 85.98 198.003 85.98 200.172 cv
85.98 202.34 89.2566 204.098 93.2985 204.098 cv
97.3404 204.098 100.617 202.34 100.617 200.172 cv
@
100.617 200.172 mo
100.617 198.003 97.3404 196.245 93.2985 196.245 cv
89.2566 196.245 85.98 198.003 85.98 200.172 cv
85.98 202.34 89.2566 204.098 93.2985 204.098 cv
97.3404 204.098 100.617 202.34 100.617 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
88.3005 199.315 mo
(iDCT_1D)
[.694725 1.80424 1.66682 1.52686 1.2495 1.2495 0 ]xsh
88.6029 202.171 mo
(I/O: 8->8)
[.832146 .694725 1.80424 .694725 .624748 1.2495 .832146 1.40942 0 ]xsh
114.183 189.462 mo
110.077 191.604 104.365 194.46 100.081 196.78 cv
@
100.081 196.245 mo
98.6535 197.494 li
100.438 197.137 li
cp
@
100.081 196.245 mo
98.6535 197.494 li
100.438 197.137 li
f
118.467 200.172 mo
118.467 198.003 115.19 196.245 111.148 196.245 cv
107.107 196.245 103.83 198.003 103.83 200.172 cv
103.83 202.34 107.107 204.098 111.148 204.098 cv
115.19 204.098 118.467 202.34 118.467 200.172 cv
@
118.467 200.172 mo
118.467 198.003 115.19 196.245 111.148 196.245 cv
107.107 196.245 103.83 198.003 103.83 200.172 cv
103.83 202.34 107.107 204.098 111.148 204.098 cv
115.19 204.098 118.467 202.34 118.467 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
106.151 199.315 mo
(iDCT_1D)
[.694725 1.80424 1.66681 1.52687 1.2495 1.2495 0 ]xsh
106.453 202.171 mo
(I/O: 8->8)
[.832146 .694725 1.80424 .694725 .624748 1.2495 .832146 1.40942 0 ]xsh
117.931 189.64 mo
117.039 191.247 115.789 193.21 114.54 194.995 cv
@
114.183 194.638 mo
113.647 196.423 li
114.897 195.174 li
cp
@
114.183 194.638 mo
113.647 196.423 li
114.897 195.174 li
f
136.317 200.172 mo
136.317 198.003 133.04 196.245 128.998 196.245 cv
124.957 196.245 121.68 198.003 121.68 200.172 cv
121.68 202.34 124.957 204.098 128.998 204.098 cv
133.04 204.098 136.317 202.34 136.317 200.172 cv
@
136.317 200.172 mo
136.317 198.003 133.04 196.245 128.998 196.245 cv
124.957 196.245 121.68 198.003 121.68 200.172 cv
121.68 202.34 124.957 204.098 128.998 204.098 cv
133.04 204.098 136.317 202.34 136.317 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
124.001 199.315 mo
(iDCT_1D)
[.694725 1.80424 1.66682 1.52687 1.2495 1.2495 0 ]xsh
124.303 202.171 mo
(I/O: 8->8)
[.832146 .694725 1.80424 .694717 .624756 1.2495 .832153 1.40942 0 ]xsh
122.215 189.64 mo
123.108 191.247 124.357 193.21 125.607 194.995 cv
@
125.25 195.174 mo
126.499 196.423 li
125.964 194.638 li
cp
@
125.25 195.174 mo
126.499 196.423 li
125.964 194.638 li
f
154.167 200.172 mo
154.167 198.003 150.89 196.245 146.848 196.245 cv
142.807 196.245 139.53 198.003 139.53 200.172 cv
139.53 202.34 142.807 204.098 146.848 204.098 cv
150.89 204.098 154.167 202.34 154.167 200.172 cv
@
154.167 200.172 mo
154.167 198.003 150.89 196.245 146.848 196.245 cv
142.807 196.245 139.53 198.003 139.53 200.172 cv
139.53 202.34 142.807 204.098 146.848 204.098 cv
150.89 204.098 154.167 202.34 154.167 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
141.851 199.315 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
142.153 202.171 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40944 0 ]xsh
125.964 189.462 mo
130.069 191.604 135.781 194.46 140.065 196.78 cv
@
139.708 197.137 mo
141.493 197.494 li
140.065 196.245 li
cp
@
139.708 197.137 mo
141.493 197.494 li
140.065 196.245 li
f
172.017 200.172 mo
172.017 198.003 168.74 196.245 164.698 196.245 cv
160.657 196.245 157.38 198.003 157.38 200.172 cv
157.38 202.34 160.657 204.098 164.698 204.098 cv
168.74 204.098 172.017 202.34 172.017 200.172 cv
@
172.017 200.172 mo
172.017 198.003 168.74 196.245 164.698 196.245 cv
160.657 196.245 157.38 198.003 157.38 200.172 cv
157.38 202.34 160.657 204.098 164.698 204.098 cv
168.74 204.098 172.017 202.34 172.017 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
159.701 199.315 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
160.003 202.171 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40944 0 ]xsh
129.891 188.926 mo
138.102 191.068 149.347 193.924 156.309 196.066 cv
156.666 196.245 157.201 196.423 157.558 196.602 cv
@
157.558 197.137 mo
159.343 197.316 li
157.915 196.245 li
cp
@
157.558 197.137 mo
159.343 197.316 li
157.915 196.245 li
f
189.867 200.172 mo
189.867 198.003 186.59 196.245 182.548 196.245 cv
178.507 196.245 175.23 198.003 175.23 200.172 cv
175.23 202.34 178.507 204.098 182.548 204.098 cv
186.59 204.098 189.867 202.34 189.867 200.172 cv
@
189.867 200.172 mo
189.867 198.003 186.59 196.245 182.548 196.245 cv
178.507 196.245 175.23 198.003 175.23 200.172 cv
175.23 202.34 178.507 204.098 182.548 204.098 cv
186.59 204.098 189.867 202.34 189.867 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
177.551 199.315 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
177.853 202.171 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40942 0 ]xsh
132.211 188.391 mo
144.349 190.354 162.913 193.567 174.159 196.066 cv
174.516 196.066 175.051 196.245 175.587 196.602 cv
@
175.587 197.137 mo
177.372 197.316 li
175.944 196.245 li
cp
@
175.587 197.137 mo
177.372 197.316 li
175.944 196.245 li
f
144.349 213.916 mo
144.349 212.142 137.477 210.703 128.998 210.703 cv
120.52 210.703 113.648 212.142 113.648 213.916 cv
113.648 215.69 120.52 217.129 128.998 217.129 cv
137.477 217.129 144.349 215.69 144.349 213.916 cv
@
144.349 213.916 mo
144.349 212.142 137.477 210.703 128.998 210.703 cv
120.52 210.703 113.648 212.142 113.648 213.916 cv
113.648 215.69 120.52 217.129 128.998 217.129 cv
137.477 217.129 144.349 215.69 144.349 213.916 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
115.429 214.487 mo
(roundrobin\(8,8,8,8,8,8,8,8\))
[.832146 1.2495 1.2495 1.2495 1.2495 .832153 1.2495 1.2495 .694717 1.2495 .832153 1.2495 
.624756 1.2495 .624756 1.2495 .624741 1.24951 .624741 1.24951 .624741 1.24951 .624741 1.2495 
.624756 1.2495 0 ]xsh
164.341 227.661 mo
164.341 225.492 161.145 223.734 157.201 223.734 cv
153.258 223.734 150.061 225.492 150.061 227.661 cv
150.061 229.829 153.258 231.588 157.201 231.588 cv
161.145 231.588 164.341 229.829 164.341 227.661 cv
@
164.341 227.661 mo
164.341 225.492 161.145 223.734 157.201 223.734 cv
153.258 223.734 150.061 225.492 150.061 227.661 cv
150.061 229.829 153.258 231.588 157.201 231.588 cv
161.145 231.588 164.341 229.829 164.341 227.661 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
155.05 226.804 mo
(Add)
[1.80424 1.2495 0 ]xsh
152.506 229.66 mo
(I/O: 1->1)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40942 0 ]xsh
135.067 216.951 mo
139.53 219.093 145.599 221.949 150.418 224.269 cv
@
150.061 224.626 mo
151.846 224.983 li
150.418 223.734 li
cp
@
150.061 224.626 mo
151.846 224.983 li
150.418 223.734 li
f
62.775 203.028 mo
63.846 203.563 65.0955 204.099 65.988 204.277 cv
79.197 206.955 100.617 209.989 114.897 211.953 cv
@
114.361 212.31 mo
116.146 212.131 li
114.361 211.417 li
cp
@
114.361 212.31 mo
116.146 212.131 li
114.361 211.417 li
f
80.625 203.028 mo
81.8745 203.563 82.9455 204.099 83.838 204.277 cv
92.5845 206.419 106.329 209.275 116.325 211.417 cv
@
115.968 211.774 mo
117.753 211.774 li
116.146 210.882 li
cp
@
115.968 211.774 mo
117.753 211.774 li
116.146 210.882 li
f
98.6535 202.849 mo
99.7245 203.385 100.795 203.92 101.688 204.277 cv
106.507 206.062 113.826 208.74 119.716 210.882 cv
@
119.181 211.239 mo
120.966 211.239 li
119.359 210.346 li
cp
@
119.181 211.239 mo
120.966 211.239 li
119.359 210.346 li
f
115.432 203.385 mo
117.931 205.348 121.144 207.669 123.643 209.632 cv
@
123.286 209.811 mo
124.893 210.703 li
123.822 209.275 li
cp
@
123.286 209.811 mo
124.893 210.703 li
123.822 209.275 li
f
128.998 204.277 mo
128.998 205.705 128.998 207.312 128.998 208.918 cv
@
128.641 208.918 mo
128.998 210.703 li
129.534 208.918 li
cp
@
128.641 208.918 mo
128.998 210.703 li
129.534 208.918 li
f
142.564 203.385 mo
140.065 205.348 136.852 207.669 134.353 209.632 cv
@
134.175 209.275 mo
133.104 210.703 li
134.71 209.811 li
cp
@
134.175 209.275 mo
133.104 210.703 li
134.71 209.811 li
f
159.343 203.028 mo
158.272 203.563 157.201 203.92 156.309 204.277 cv
151.668 206.062 144.349 208.74 138.459 210.882 cv
@
138.816 210.346 mo
137.209 211.239 li
138.994 211.239 li
cp
@
138.816 210.346 mo
137.209 211.239 li
138.994 211.239 li
f
177.372 203.028 mo
176.301 203.563 175.051 204.099 174.159 204.277 cv
165.591 206.419 151.668 209.275 141.672 211.417 cv
@
141.85 210.882 mo
140.244 211.774 li
142.029 211.774 li
cp
@
141.85 210.882 mo
140.244 211.774 li
142.029 211.774 li
f
163.984 228.91 mo
171.838 230.338 184.155 232.302 191.83 233.194 cv
210.216 235.515 241.275 238.549 258.411 240.156 cv
@
258.054 240.513 mo
259.839 240.334 li
258.054 239.62 li
cp
@
258.054 240.513 mo
259.839 240.334 li
258.054 239.62 li
f
280.366 80.755 mo
280.366 78.981 275.731 77.542 270.013 77.542 cv
264.296 77.542 259.66 78.981 259.66 80.755 cv
259.66 82.529 264.296 83.968 270.013 83.968 cv
275.731 83.968 280.366 82.529 280.366 80.755 cv
@
280.366 80.755 mo
280.366 78.981 275.731 77.542 270.013 77.542 cv
264.296 77.542 259.66 78.981 259.66 80.755 cv
259.66 82.529 264.296 83.968 270.013 83.968 cv
275.731 83.968 280.366 82.529 280.366 80.755 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
261.442 81.326 mo
(roundrobin\(1,63\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 1.24948 0 ]xsh
270.013 71.116 mo
270.013 72.544 270.013 74.151 270.013 75.757 cv
@
269.656 75.757 mo
270.013 77.542 li
270.549 75.757 li
cp
@
269.656 75.757 mo
270.013 77.542 li
270.549 75.757 li
f
274.833 96.463 mo
274.833 93.111 267.321 90.394 258.054 90.394 cv
248.787 90.394 241.275 93.111 241.275 96.463 cv
241.275 99.815 248.787 102.532 258.054 102.532 cv
267.321 102.532 274.833 99.815 274.833 96.463 cv
@
274.833 96.463 mo
274.833 93.111 267.321 90.394 258.054 90.394 cv
248.787 90.394 241.275 93.111 241.275 96.463 cv
241.275 99.815 248.787 102.532 258.054 102.532 cv
267.321 102.532 274.833 99.815 274.833 96.463 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
244.942 94.178 mo
(IntegerDifferenceDecoder)
[.832153 1.2495 .694717 1.10953 1.2495 1.10951 .832153 1.80424 .694717 .832153 .832138 1.10953 
.832153 1.1095 1.24951 1.10953 1.1095 1.80426 1.1095 1.10953 1.24951 1.24948 1.10953 0 
]xsh
253.359 97.034 mo
(I/O: 1->1)
[.832153 .694717 1.80424 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
244.241 99.89 mo
(*** PEEKS 1 AHEAD ***)
[1.2495 1.2495 1.24951 .624741 1.38945 1.52687 1.52687 1.80423 1.38947 .624725 1.24951 .624756 
1.80423 1.80423 1.52689 1.80423 1.80426 .624725 1.24951 1.24951 0 ]xsh
267.514 83.968 mo
266.443 85.575 265.015 87.36 263.587 89.145 cv
@
263.23 88.788 mo
262.516 90.573 li
263.944 89.323 li
cp
@
263.23 88.788 mo
262.516 90.573 li
263.944 89.323 li
f
292.326 96.463 mo
292.326 94.294 289.129 92.536 285.186 92.536 cv
281.243 92.536 278.046 94.294 278.046 96.463 cv
278.046 98.632 281.243 100.39 285.186 100.39 cv
289.129 100.39 292.326 98.632 292.326 96.463 cv
@
292.326 96.463 mo
292.326 94.294 289.129 92.536 285.186 92.536 cv
281.243 92.536 278.046 94.294 278.046 96.463 cv
278.046 98.632 281.243 100.39 285.186 100.39 cv
289.129 100.39 292.326 98.632 292.326 96.463 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
281.299 95.6059 mo
(Identity)
[.832153 1.24948 1.10953 1.24951 .694702 .694733 .694733 0 ]xsh
280.491 98.462 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
273.048 83.79 mo
275.19 86.11 278.046 89.145 280.545 91.644 cv
@
280.188 92.001 mo
281.794 92.893 li
280.902 91.287 li
cp
@
280.188 92.001 mo
281.794 92.893 li
280.902 91.287 li
f
280.366 112.171 mo
280.366 110.397 275.731 108.958 270.013 108.958 cv
264.296 108.958 259.66 110.397 259.66 112.171 cv
259.66 113.945 264.296 115.384 270.013 115.384 cv
275.731 115.384 280.366 113.945 280.366 112.171 cv
@
280.366 112.171 mo
280.366 110.397 275.731 108.958 270.013 108.958 cv
264.296 108.958 259.66 110.397 259.66 112.171 cv
259.66 113.945 264.296 115.384 270.013 115.384 cv
275.731 115.384 280.366 113.945 280.366 112.171 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
261.442 112.742 mo
(roundrobin\(1,63\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 1.24948 0 ]xsh
282.865 126.63 mo
282.865 124.461 277.111 122.703 270.013 122.703 cv
262.916 122.703 257.161 124.461 257.161 126.63 cv
257.161 128.798 262.916 130.556 270.013 130.556 cv
277.111 130.556 282.865 128.798 282.865 126.63 cv
@
282.865 126.63 mo
282.865 124.461 277.111 122.703 270.013 122.703 cv
262.916 122.703 257.161 124.461 257.161 126.63 cv
257.161 128.798 262.916 130.556 270.013 130.556 cv
277.111 130.556 282.865 128.798 282.865 126.63 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
259.464 125.773 mo
(staticDeQuantization)
[.972107 .694702 1.10953 .694702 .694733 1.10953 1.80423 1.10953 1.80423 1.24951 1.10953 1.24948 
.694733 .694702 1.10953 1.10953 .694733 .694702 1.24951 0 ]xsh
264.068 128.629 mo
(I/O: 64->64)
[.832153 .694702 1.80426 .694702 .624756 1.24951 1.24951 .832123 1.40942 1.24951 0 ]xsh
270.013 115.384 mo
270.013 116.991 270.013 118.954 270.013 120.739 cv
@
269.656 120.739 mo
270.013 122.524 li
270.549 120.739 li
cp
@
269.656 120.739 mo
270.013 122.524 li
270.549 120.739 li
f
262.516 102.354 mo
263.944 104.139 265.372 106.102 266.622 107.709 cv
@
266.265 107.887 mo
267.693 108.958 li
266.8 107.352 li
cp
@
266.265 107.887 mo
267.693 108.958 li
266.8 107.352 li
f
281.794 100.033 mo
279.474 102.354 276.618 105.388 274.119 107.887 cv
@
273.94 107.53 mo
273.048 109.137 li
274.476 108.066 li
cp
@
273.94 107.53 mo
273.048 109.137 li
274.476 108.066 li
f
285.364 145.372 mo
285.364 143.598 278.492 142.159 270.013 142.159 cv
261.535 142.159 254.662 143.598 254.662 145.372 cv
254.662 147.146 261.535 148.585 270.013 148.585 cv
278.492 148.585 285.364 147.146 285.364 145.372 cv
@
285.364 145.372 mo
285.364 143.598 278.492 142.159 270.013 142.159 cv
261.535 142.159 254.662 143.598 254.662 145.372 cv
254.662 147.146 261.535 148.585 270.013 148.585 cv
278.492 148.585 285.364 147.146 285.364 145.372 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
256.444 145.943 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 .624725 1.24951 .624756 1.24948 .624756 1.24951 .624756 1.24948 .624756 1.24951 
.624725 1.24951 0 ]xsh
270.013 130.735 mo
270.013 133.591 270.013 137.518 270.013 140.553 cv
@
269.656 140.374 mo
270.013 142.159 li
270.549 140.374 li
cp
@
269.656 140.374 mo
270.013 142.159 li
270.549 140.374 li
f
214.857 159.117 mo
214.857 156.948 211.58 155.19 207.538 155.19 cv
203.497 155.19 200.22 156.948 200.22 159.117 cv
200.22 161.285 203.497 163.043 207.538 163.043 cv
211.58 163.043 214.857 161.285 214.857 159.117 cv
@
214.857 159.117 mo
214.857 156.948 211.58 155.19 207.538 155.19 cv
203.497 155.19 200.22 156.948 200.22 159.117 cv
200.22 161.285 203.497 163.043 207.538 163.043 cv
211.58 163.043 214.857 161.285 214.857 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
202.541 158.26 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
202.843 161.116 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40944 0 ]xsh
257.875 147.336 mo
245.737 149.299 227.352 152.512 215.928 155.011 cv
215.392 155.19 214.678 155.368 213.786 155.725 cv
@
214.143 155.011 mo
212.715 156.261 li
214.5 155.904 li
cp
@
214.143 155.011 mo
212.715 156.261 li
214.5 155.904 li
f
232.707 159.117 mo
232.707 156.948 229.43 155.19 225.388 155.19 cv
221.347 155.19 218.07 156.948 218.07 159.117 cv
218.07 161.285 221.347 163.043 225.388 163.043 cv
229.43 163.043 232.707 161.285 232.707 159.117 cv
@
232.707 159.117 mo
232.707 156.948 229.43 155.19 225.388 155.19 cv
221.347 155.19 218.07 156.948 218.07 159.117 cv
218.07 161.285 221.347 163.043 225.388 163.043 cv
229.43 163.043 232.707 161.285 232.707 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
220.391 158.26 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
220.693 161.116 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40944 0 ]xsh
260.196 147.871 mo
252.163 150.013 240.739 152.869 233.778 155.011 cv
233.242 155.19 232.528 155.547 231.814 155.904 cv
@
232.171 155.19 mo
230.743 156.439 li
232.528 156.082 li
cp
@
232.171 155.19 mo
230.743 156.439 li
232.528 156.082 li
f
250.557 159.117 mo
250.557 156.948 247.28 155.19 243.238 155.19 cv
239.197 155.19 235.92 156.948 235.92 159.117 cv
235.92 161.285 239.197 163.043 243.238 163.043 cv
247.28 163.043 250.557 161.285 250.557 159.117 cv
@
250.557 159.117 mo
250.557 156.948 247.28 155.19 243.238 155.19 cv
239.197 155.19 235.92 156.948 235.92 159.117 cv
235.92 161.285 239.197 163.043 243.238 163.043 cv
247.28 163.043 250.557 161.285 250.557 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
238.241 158.26 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
238.543 161.116 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40942 0 ]xsh
264.123 148.407 mo
260.017 150.549 254.305 153.405 250.021 155.725 cv
@
250.021 155.19 mo
248.593 156.439 li
250.378 156.082 li
cp
@
250.021 155.19 mo
248.593 156.439 li
250.378 156.082 li
f
268.407 159.117 mo
268.407 156.948 265.13 155.19 261.088 155.19 cv
257.047 155.19 253.77 156.948 253.77 159.117 cv
253.77 161.285 257.047 163.043 261.088 163.043 cv
265.13 163.043 268.407 161.285 268.407 159.117 cv
@
268.407 159.117 mo
268.407 156.948 265.13 155.19 261.088 155.19 cv
257.047 155.19 253.77 156.948 253.77 159.117 cv
253.77 161.285 257.047 163.043 261.088 163.043 cv
265.13 163.043 268.407 161.285 268.407 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
256.091 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
256.393 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
267.871 148.585 mo
266.979 150.192 265.729 152.155 264.48 153.94 cv
@
264.123 153.583 mo
263.587 155.368 li
264.837 154.119 li
cp
@
264.123 153.583 mo
263.587 155.368 li
264.837 154.119 li
f
286.257 159.117 mo
286.257 156.948 282.98 155.19 278.938 155.19 cv
274.897 155.19 271.62 156.948 271.62 159.117 cv
271.62 161.285 274.897 163.043 278.938 163.043 cv
282.98 163.043 286.257 161.285 286.257 159.117 cv
@
286.257 159.117 mo
286.257 156.948 282.98 155.19 278.938 155.19 cv
274.897 155.19 271.62 156.948 271.62 159.117 cv
271.62 161.285 274.897 163.043 278.938 163.043 cv
282.98 163.043 286.257 161.285 286.257 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
273.941 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
274.243 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
272.155 148.585 mo
273.048 150.192 274.297 152.155 275.547 153.94 cv
@
275.19 154.119 mo
276.439 155.368 li
275.904 153.583 li
cp
@
275.19 154.119 mo
276.439 155.368 li
275.904 153.583 li
f
304.107 159.117 mo
304.107 156.948 300.83 155.19 296.788 155.19 cv
292.747 155.19 289.47 156.948 289.47 159.117 cv
289.47 161.285 292.747 163.043 296.788 163.043 cv
300.83 163.043 304.107 161.285 304.107 159.117 cv
@
304.107 159.117 mo
304.107 156.948 300.83 155.19 296.788 155.19 cv
292.747 155.19 289.47 156.948 289.47 159.117 cv
289.47 161.285 292.747 163.043 296.788 163.043 cv
300.83 163.043 304.107 161.285 304.107 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
291.791 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
292.093 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
275.904 148.407 mo
280.009 150.549 285.721 153.405 290.005 155.725 cv
@
289.648 156.082 mo
291.433 156.439 li
290.005 155.19 li
cp
@
289.648 156.082 mo
291.433 156.439 li
290.005 155.19 li
f
321.957 159.117 mo
321.957 156.948 318.68 155.19 314.638 155.19 cv
310.597 155.19 307.32 156.948 307.32 159.117 cv
307.32 161.285 310.597 163.043 314.638 163.043 cv
318.68 163.043 321.957 161.285 321.957 159.117 cv
@
321.957 159.117 mo
321.957 156.948 318.68 155.19 314.638 155.19 cv
310.597 155.19 307.32 156.948 307.32 159.117 cv
307.32 161.285 310.597 163.043 314.638 163.043 cv
318.68 163.043 321.957 161.285 321.957 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
309.641 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
309.943 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
279.831 147.871 mo
288.042 150.013 299.287 152.869 306.249 155.011 cv
306.606 155.19 307.141 155.368 307.498 155.547 cv
@
307.498 156.082 mo
309.283 156.261 li
307.855 155.19 li
cp
@
307.498 156.082 mo
309.283 156.261 li
307.855 155.19 li
f
339.807 159.117 mo
339.807 156.948 336.53 155.19 332.488 155.19 cv
328.447 155.19 325.17 156.948 325.17 159.117 cv
325.17 161.285 328.447 163.043 332.488 163.043 cv
336.53 163.043 339.807 161.285 339.807 159.117 cv
@
339.807 159.117 mo
339.807 156.948 336.53 155.19 332.488 155.19 cv
328.447 155.19 325.17 156.948 325.17 159.117 cv
325.17 161.285 328.447 163.043 332.488 163.043 cv
336.53 163.043 339.807 161.285 339.807 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
327.491 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
327.793 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
282.151 147.336 mo
294.289 149.299 312.853 152.512 324.099 155.011 cv
324.456 155.011 324.991 155.19 325.527 155.547 cv
@
325.527 156.082 mo
327.312 156.261 li
325.884 155.19 li
cp
@
325.527 156.082 mo
327.312 156.261 li
325.884 155.19 li
f
285.364 172.861 mo
285.364 171.087 278.492 169.648 270.013 169.648 cv
261.535 169.648 254.662 171.087 254.662 172.861 cv
254.662 174.635 261.535 176.074 270.013 176.074 cv
278.492 176.074 285.364 174.635 285.364 172.861 cv
@
285.364 172.861 mo
285.364 171.087 278.492 169.648 270.013 169.648 cv
261.535 169.648 254.662 171.087 254.662 172.861 cv
254.662 174.635 261.535 176.074 270.013 176.074 cv
278.492 176.074 285.364 174.635 285.364 172.861 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
256.444 173.432 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 .624725 1.24951 .624756 1.24948 .624756 1.24951 .624756 1.24948 .624756 1.24951 
.624725 1.24951 0 ]xsh
285.364 186.427 mo
285.364 184.653 278.492 183.214 270.013 183.214 cv
261.535 183.214 254.662 184.653 254.662 186.427 cv
254.662 188.201 261.535 189.64 270.013 189.64 cv
278.492 189.64 285.364 188.201 285.364 186.427 cv
@
285.364 186.427 mo
285.364 184.653 278.492 183.214 270.013 183.214 cv
261.535 183.214 254.662 184.653 254.662 186.427 cv
254.662 188.201 261.535 189.64 270.013 189.64 cv
278.492 189.64 285.364 188.201 285.364 186.427 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
256.444 186.998 mo
(roundrobin\(8,8,8,8,8,8,8,8\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 .624725 1.24951 .624756 1.24948 .624756 1.24951 .624756 1.24948 .624756 1.24951 
.624725 1.24951 0 ]xsh
270.013 176.074 mo
270.013 177.681 270.013 179.644 270.013 181.429 cv
@
269.656 181.429 mo
270.013 183.214 li
270.549 181.429 li
cp
@
269.656 181.429 mo
270.013 183.214 li
270.549 181.429 li
f
212.715 161.973 mo
213.786 162.508 215.035 163.044 215.928 163.222 cv
226.638 165.543 243.952 168.577 256.09 170.541 cv
@
255.912 170.898 mo
257.697 170.898 li
256.09 170.005 li
cp
@
255.912 170.898 mo
257.697 170.898 li
256.09 170.005 li
f
230.565 161.973 mo
231.814 162.508 232.885 162.865 233.778 163.222 cv
240.204 165.186 250.557 168.042 258.589 170.005 cv
@
258.411 170.362 mo
260.196 170.362 li
258.589 169.47 li
cp
@
258.411 170.362 mo
260.196 170.362 li
258.589 169.47 li
f
248.593 161.794 mo
252.52 163.936 258.411 166.792 262.873 169.113 cv
@
262.516 169.47 mo
264.301 169.827 li
262.873 168.577 li
cp
@
262.516 169.47 mo
264.301 169.827 li
262.873 168.577 li
f
263.587 162.865 mo
264.658 164.472 265.908 166.435 266.979 168.22 cv
@
266.622 168.399 mo
267.871 169.648 li
267.336 167.863 li
cp
@
266.622 168.399 mo
267.871 169.648 li
267.336 167.863 li
f
276.439 162.865 mo
275.368 164.472 274.119 166.435 273.048 168.22 cv
@
272.691 167.863 mo
272.155 169.648 li
273.405 168.399 li
cp
@
272.691 167.863 mo
272.155 169.648 li
273.405 168.399 li
f
291.433 161.794 mo
287.506 163.936 281.616 166.792 277.153 169.113 cv
@
277.153 168.577 mo
275.725 169.827 li
277.51 169.47 li
cp
@
277.153 168.577 mo
275.725 169.827 li
277.51 169.47 li
f
309.283 161.973 mo
308.212 162.508 307.141 163.044 306.249 163.222 cv
299.644 165.186 289.113 168.042 281.08 170.005 cv
@
281.616 169.291 mo
280.009 170.362 li
281.794 170.184 li
cp
@
281.616 169.291 mo
280.009 170.362 li
281.794 170.184 li
f
327.312 162.151 mo
326.241 162.687 324.991 163.044 324.099 163.222 cv
313.21 165.721 295.539 168.756 283.401 170.719 cv
@
283.936 170.184 mo
282.33 170.898 li
284.115 171.076 li
cp
@
283.936 170.184 mo
282.33 170.898 li
284.115 171.076 li
f
214.857 200.172 mo
214.857 198.003 211.58 196.245 207.538 196.245 cv
203.497 196.245 200.22 198.003 200.22 200.172 cv
200.22 202.34 203.497 204.098 207.538 204.098 cv
211.58 204.098 214.857 202.34 214.857 200.172 cv
@
214.857 200.172 mo
214.857 198.003 211.58 196.245 207.538 196.245 cv
203.497 196.245 200.22 198.003 200.22 200.172 cv
200.22 202.34 203.497 204.098 207.538 204.098 cv
211.58 204.098 214.857 202.34 214.857 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
202.541 199.315 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
202.843 202.171 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40944 0 ]xsh
257.875 188.391 mo
245.737 190.354 227.352 193.567 215.928 196.066 cv
215.392 196.245 214.678 196.423 213.786 196.78 cv
@
214.143 196.066 mo
212.715 197.316 li
214.5 196.959 li
cp
@
214.143 196.066 mo
212.715 197.316 li
214.5 196.959 li
f
232.707 200.172 mo
232.707 198.003 229.43 196.245 225.388 196.245 cv
221.347 196.245 218.07 198.003 218.07 200.172 cv
218.07 202.34 221.347 204.098 225.388 204.098 cv
229.43 204.098 232.707 202.34 232.707 200.172 cv
@
232.707 200.172 mo
232.707 198.003 229.43 196.245 225.388 196.245 cv
221.347 196.245 218.07 198.003 218.07 200.172 cv
218.07 202.34 221.347 204.098 225.388 204.098 cv
229.43 204.098 232.707 202.34 232.707 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
220.391 199.315 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
220.693 202.171 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40944 0 ]xsh
260.196 188.926 mo
252.163 191.068 240.739 193.924 233.778 196.066 cv
233.242 196.245 232.528 196.602 231.814 196.959 cv
@
232.171 196.245 mo
230.743 197.494 li
232.528 197.137 li
cp
@
232.171 196.245 mo
230.743 197.494 li
232.528 197.137 li
f
250.557 200.172 mo
250.557 198.003 247.28 196.245 243.238 196.245 cv
239.197 196.245 235.92 198.003 235.92 200.172 cv
235.92 202.34 239.197 204.098 243.238 204.098 cv
247.28 204.098 250.557 202.34 250.557 200.172 cv
@
250.557 200.172 mo
250.557 198.003 247.28 196.245 243.238 196.245 cv
239.197 196.245 235.92 198.003 235.92 200.172 cv
235.92 202.34 239.197 204.098 243.238 204.098 cv
247.28 204.098 250.557 202.34 250.557 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
238.241 199.315 mo
(iDCT_1D)
[.694717 1.80424 1.66681 1.52687 1.2495 1.24951 0 ]xsh
238.543 202.171 mo
(I/O: 8->8)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40942 0 ]xsh
264.123 189.462 mo
260.017 191.604 254.305 194.46 250.021 196.78 cv
@
250.021 196.245 mo
248.593 197.494 li
250.378 197.137 li
cp
@
250.021 196.245 mo
248.593 197.494 li
250.378 197.137 li
f
268.407 200.172 mo
268.407 198.003 265.13 196.245 261.088 196.245 cv
257.047 196.245 253.77 198.003 253.77 200.172 cv
253.77 202.34 257.047 204.098 261.088 204.098 cv
265.13 204.098 268.407 202.34 268.407 200.172 cv
@
268.407 200.172 mo
268.407 198.003 265.13 196.245 261.088 196.245 cv
257.047 196.245 253.77 198.003 253.77 200.172 cv
253.77 202.34 257.047 204.098 261.088 204.098 cv
265.13 204.098 268.407 202.34 268.407 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
256.091 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
256.393 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
267.871 189.64 mo
266.979 191.247 265.729 193.21 264.48 194.995 cv
@
264.123 194.638 mo
263.587 196.423 li
264.837 195.174 li
cp
@
264.123 194.638 mo
263.587 196.423 li
264.837 195.174 li
f
286.257 200.172 mo
286.257 198.003 282.98 196.245 278.938 196.245 cv
274.897 196.245 271.62 198.003 271.62 200.172 cv
271.62 202.34 274.897 204.098 278.938 204.098 cv
282.98 204.098 286.257 202.34 286.257 200.172 cv
@
286.257 200.172 mo
286.257 198.003 282.98 196.245 278.938 196.245 cv
274.897 196.245 271.62 198.003 271.62 200.172 cv
271.62 202.34 274.897 204.098 278.938 204.098 cv
282.98 204.098 286.257 202.34 286.257 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
273.941 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
274.243 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
272.155 189.64 mo
273.048 191.247 274.297 193.21 275.547 194.995 cv
@
275.19 195.174 mo
276.439 196.423 li
275.904 194.638 li
cp
@
275.19 195.174 mo
276.439 196.423 li
275.904 194.638 li
f
304.107 200.172 mo
304.107 198.003 300.83 196.245 296.788 196.245 cv
292.747 196.245 289.47 198.003 289.47 200.172 cv
289.47 202.34 292.747 204.098 296.788 204.098 cv
300.83 204.098 304.107 202.34 304.107 200.172 cv
@
304.107 200.172 mo
304.107 198.003 300.83 196.245 296.788 196.245 cv
292.747 196.245 289.47 198.003 289.47 200.172 cv
289.47 202.34 292.747 204.098 296.788 204.098 cv
300.83 204.098 304.107 202.34 304.107 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
291.791 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
292.093 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
275.904 189.462 mo
280.009 191.604 285.721 194.46 290.005 196.78 cv
@
289.648 197.137 mo
291.433 197.494 li
290.005 196.245 li
cp
@
289.648 197.137 mo
291.433 197.494 li
290.005 196.245 li
f
321.957 200.172 mo
321.957 198.003 318.68 196.245 314.638 196.245 cv
310.597 196.245 307.32 198.003 307.32 200.172 cv
307.32 202.34 310.597 204.098 314.638 204.098 cv
318.68 204.098 321.957 202.34 321.957 200.172 cv
@
321.957 200.172 mo
321.957 198.003 318.68 196.245 314.638 196.245 cv
310.597 196.245 307.32 198.003 307.32 200.172 cv
307.32 202.34 310.597 204.098 314.638 204.098 cv
318.68 204.098 321.957 202.34 321.957 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
309.641 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
309.943 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
279.831 188.926 mo
288.042 191.068 299.287 193.924 306.249 196.066 cv
306.606 196.245 307.141 196.423 307.498 196.602 cv
@
307.498 197.137 mo
309.283 197.316 li
307.855 196.245 li
cp
@
307.498 197.137 mo
309.283 197.316 li
307.855 196.245 li
f
339.807 200.172 mo
339.807 198.003 336.53 196.245 332.488 196.245 cv
328.447 196.245 325.17 198.003 325.17 200.172 cv
325.17 202.34 328.447 204.098 332.488 204.098 cv
336.53 204.098 339.807 202.34 339.807 200.172 cv
@
339.807 200.172 mo
339.807 198.003 336.53 196.245 332.488 196.245 cv
328.447 196.245 325.17 198.003 325.17 200.172 cv
325.17 202.34 328.447 204.098 332.488 204.098 cv
336.53 204.098 339.807 202.34 339.807 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
327.491 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
327.793 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
282.151 188.391 mo
294.289 190.354 312.853 193.567 324.099 196.066 cv
324.456 196.066 324.991 196.245 325.527 196.602 cv
@
325.527 197.137 mo
327.312 197.316 li
325.884 196.245 li
cp
@
325.527 197.137 mo
327.312 197.316 li
325.884 196.245 li
f
285.364 213.916 mo
285.364 212.142 278.492 210.703 270.013 210.703 cv
261.535 210.703 254.662 212.142 254.662 213.916 cv
254.662 215.69 261.535 217.129 270.013 217.129 cv
278.492 217.129 285.364 215.69 285.364 213.916 cv
@
285.364 213.916 mo
285.364 212.142 278.492 210.703 270.013 210.703 cv
261.535 210.703 254.662 212.142 254.662 213.916 cv
254.662 215.69 261.535 217.129 270.013 217.129 cv
278.492 217.129 285.364 215.69 285.364 213.916 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
256.444 214.487 mo
(roundrobin\(8,8,8,8,8,8,8,8\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 .624725 1.24951 .624756 1.24948 .624756 1.24951 .624756 1.24948 .624756 1.24951 
.624725 1.24951 0 ]xsh
277.153 227.661 mo
277.153 225.492 273.957 223.734 270.013 223.734 cv
266.07 223.734 262.873 225.492 262.873 227.661 cv
262.873 229.829 266.07 231.588 270.013 231.588 cv
273.957 231.588 277.153 229.829 277.153 227.661 cv
@
277.153 227.661 mo
277.153 225.492 273.957 223.734 270.013 223.734 cv
266.07 223.734 262.873 225.492 262.873 227.661 cv
262.873 229.829 266.07 231.588 270.013 231.588 cv
273.957 231.588 277.153 229.829 277.153 227.661 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
267.862 226.804 mo
(Add)
[1.80423 1.24951 0 ]xsh
265.318 229.66 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
270.013 217.129 mo
270.013 218.557 270.013 220.164 270.013 221.77 cv
@
269.656 221.77 mo
270.013 223.555 li
270.549 221.77 li
cp
@
269.656 221.77 mo
270.013 223.555 li
270.549 221.77 li
f
212.715 203.028 mo
213.786 203.563 215.035 204.099 215.928 204.277 cv
226.638 206.598 243.952 209.632 256.09 211.596 cv
@
255.912 211.953 mo
257.697 211.953 li
256.09 211.06 li
cp
@
255.912 211.953 mo
257.697 211.953 li
256.09 211.06 li
f
230.565 203.028 mo
231.814 203.563 232.885 203.92 233.778 204.277 cv
240.204 206.241 250.557 209.097 258.589 211.06 cv
@
258.411 211.417 mo
260.196 211.417 li
258.589 210.525 li
cp
@
258.411 211.417 mo
260.196 211.417 li
258.589 210.525 li
f
248.593 202.849 mo
252.52 204.991 258.411 207.847 262.873 210.168 cv
@
262.516 210.525 mo
264.301 210.882 li
262.873 209.632 li
cp
@
262.516 210.525 mo
264.301 210.882 li
262.873 209.632 li
f
263.587 203.92 mo
264.658 205.527 265.908 207.49 266.979 209.275 cv
@
266.622 209.454 mo
267.871 210.703 li
267.336 208.918 li
cp
@
266.622 209.454 mo
267.871 210.703 li
267.336 208.918 li
f
276.439 203.92 mo
275.368 205.527 274.119 207.49 273.048 209.275 cv
@
272.691 208.918 mo
272.155 210.703 li
273.405 209.454 li
cp
@
272.691 208.918 mo
272.155 210.703 li
273.405 209.454 li
f
291.433 202.849 mo
287.506 204.991 281.616 207.847 277.153 210.168 cv
@
277.153 209.632 mo
275.725 210.882 li
277.51 210.525 li
cp
@
277.153 209.632 mo
275.725 210.882 li
277.51 210.525 li
f
309.283 203.028 mo
308.212 203.563 307.141 204.099 306.249 204.277 cv
299.644 206.241 289.113 209.097 281.08 211.06 cv
@
281.616 210.346 mo
280.009 211.417 li
281.794 211.239 li
cp
@
281.616 210.346 mo
280.009 211.417 li
281.794 211.239 li
f
327.312 203.206 mo
326.241 203.742 324.991 204.099 324.099 204.277 cv
313.21 206.776 295.539 209.811 283.401 211.774 cv
@
283.936 211.239 mo
282.33 211.953 li
284.115 212.131 li
cp
@
283.936 211.239 mo
282.33 211.953 li
284.115 212.131 li
f
270.013 231.766 mo
270.013 233.194 270.013 234.801 270.013 236.407 cv
@
269.656 236.407 mo
270.013 238.192 li
270.549 236.407 li
cp
@
269.656 236.407 mo
270.013 238.192 li
270.549 236.407 li
f
386.574 80.755 mo
386.574 78.981 381.939 77.542 376.221 77.542 cv
370.503 77.542 365.868 78.981 365.868 80.755 cv
365.868 82.529 370.503 83.968 376.221 83.968 cv
381.939 83.968 386.574 82.529 386.574 80.755 cv
@
386.574 80.755 mo
386.574 78.981 381.939 77.542 376.221 77.542 cv
370.503 77.542 365.868 78.981 365.868 80.755 cv
365.868 82.529 370.503 83.968 376.221 83.968 cv
381.939 83.968 386.574 82.529 386.574 80.755 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
367.65 81.326 mo
(roundrobin\(1,63\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 1.24948 0 ]xsh
373.9 71.116 mo
374.257 72.544 374.614 74.329 375.15 75.936 cv
@
374.614 75.936 mo
375.507 77.542 li
375.507 75.757 li
cp
@
374.614 75.936 mo
375.507 77.542 li
375.507 75.757 li
f
393 96.463 mo
393 93.111 385.488 90.394 376.221 90.394 cv
366.954 90.394 359.442 93.111 359.442 96.463 cv
359.442 99.815 366.954 102.532 376.221 102.532 cv
385.488 102.532 393 99.815 393 96.463 cv
@
393 96.463 mo
393 93.111 385.488 90.394 376.221 90.394 cv
366.954 90.394 359.442 93.111 359.442 96.463 cv
359.442 99.815 366.954 102.532 376.221 102.532 cv
385.488 102.532 393 99.815 393 96.463 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
363.109 94.178 mo
(IntegerDifferenceDecoder)
[.832153 1.24948 .694733 1.10953 1.24948 1.10953 .832153 1.80423 .694733 .832153 .832153 1.1095 
.832153 1.10953 1.24948 1.10953 1.10953 1.80423 1.10953 1.10953 1.24948 1.24951 1.10953 0 
]xsh
371.526 97.034 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
362.408 99.89 mo
(*** PEEKS 1 AHEAD ***)
[1.24951 1.24948 1.24951 .624756 1.38943 1.52686 1.52689 1.80423 1.38947 .624725 1.24951 .624756 
1.80423 1.80423 1.52689 1.80423 1.80426 .624725 1.24951 1.24951 0 ]xsh
376.221 83.968 mo
376.221 85.218 376.221 87.003 376.221 88.609 cv
@
375.864 88.609 mo
376.221 90.394 li
376.756 88.609 li
cp
@
375.864 88.609 mo
376.221 90.394 li
376.756 88.609 li
f
410.493 96.463 mo
410.493 94.294 407.296 92.536 403.353 92.536 cv
399.41 92.536 396.213 94.294 396.213 96.463 cv
396.213 98.632 399.41 100.39 403.353 100.39 cv
407.296 100.39 410.493 98.632 410.493 96.463 cv
@
410.493 96.463 mo
410.493 94.294 407.296 92.536 403.353 92.536 cv
399.41 92.536 396.213 94.294 396.213 96.463 cv
396.213 98.632 399.41 100.39 403.353 100.39 cv
407.296 100.39 410.493 98.632 410.493 96.463 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
399.466 95.6059 mo
(Identity)
[.832153 1.24948 1.10953 1.24951 .694702 .694733 .694733 0 ]xsh
398.658 98.462 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
381.754 83.433 mo
385.86 85.575 391.572 88.431 395.142 90.394 cv
396.034 90.93 396.927 91.644 397.998 92.536 cv
@
397.284 92.715 mo
399.069 93.25 li
397.819 91.822 li
cp
@
397.284 92.715 mo
399.069 93.25 li
397.819 91.822 li
f
410.493 112.171 mo
410.493 110.397 405.858 108.958 400.14 108.958 cv
394.422 108.958 389.787 110.397 389.787 112.171 cv
389.787 113.945 394.422 115.384 400.14 115.384 cv
405.858 115.384 410.493 113.945 410.493 112.171 cv
@
410.493 112.171 mo
410.493 110.397 405.858 108.958 400.14 108.958 cv
394.422 108.958 389.787 110.397 389.787 112.171 cv
389.787 113.945 394.422 115.384 400.14 115.384 cv
405.858 115.384 410.493 113.945 410.493 112.171 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
391.569 112.742 mo
(roundrobin\(1,63\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 1.24948 0 ]xsh
418.347 126.63 mo
418.347 124.461 412.593 122.703 405.495 122.703 cv
398.397 122.703 392.643 124.461 392.643 126.63 cv
392.643 128.798 398.397 130.556 405.495 130.556 cv
412.593 130.556 418.347 128.798 418.347 126.63 cv
@
418.347 126.63 mo
418.347 124.461 412.593 122.703 405.495 122.703 cv
398.397 122.703 392.643 124.461 392.643 126.63 cv
392.643 128.798 398.397 130.556 405.495 130.556 cv
412.593 130.556 418.347 128.798 418.347 126.63 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
394.946 125.773 mo
(staticDeQuantization)
[.972107 .694702 1.10953 .694702 .694733 1.10953 1.80423 1.10953 1.80423 1.24951 1.10953 1.24948 
.694733 .694702 1.10953 1.10953 .694702 .694733 1.24951 0 ]xsh
399.55 128.629 mo
(I/O: 64->64)
[.832153 .694702 1.80426 .694702 .624756 1.24951 1.24951 .832123 1.40942 1.24951 0 ]xsh
401.389 115.384 mo
401.925 116.991 402.639 119.133 403.353 120.918 cv
@
402.996 121.096 mo
404.067 122.524 li
403.71 120.739 li
cp
@
402.996 121.096 mo
404.067 122.524 li
403.71 120.739 li
f
384.253 101.818 mo
387.466 103.96 391.215 106.459 394.428 108.244 cv
@
393.892 108.423 mo
395.677 109.137 li
394.428 107.709 li
cp
@
393.892 108.423 mo
395.677 109.137 li
394.428 107.709 li
f
402.46 100.569 mo
402.103 102.711 401.568 105.21 401.032 107.352 cv
@
400.675 107.173 mo
400.854 108.958 li
401.568 107.173 li
cp
@
400.675 107.173 mo
400.854 108.958 li
401.568 107.173 li
f
426.379 145.372 mo
426.379 143.598 419.507 142.159 411.028 142.159 cv
402.55 142.159 395.678 143.598 395.678 145.372 cv
395.678 147.146 402.55 148.585 411.028 148.585 cv
419.507 148.585 426.379 147.146 426.379 145.372 cv
@
426.379 145.372 mo
426.379 143.598 419.507 142.159 411.028 142.159 cv
402.55 142.159 395.678 143.598 395.678 145.372 cv
395.678 147.146 402.55 148.585 411.028 148.585 cv
419.507 148.585 426.379 147.146 426.379 145.372 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
397.459 145.943 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 .624725 1.24951 .624756 1.24948 .624756 1.24951 .624756 1.24948 .624756 1.24951 
.624725 1.24951 0 ]xsh
406.744 130.735 mo
407.637 133.591 408.886 137.518 409.779 140.553 cv
@
409.243 140.553 mo
410.136 142.159 li
410.136 140.374 li
cp
@
409.243 140.553 mo
410.136 142.159 li
410.136 140.374 li
f
364.797 159.117 mo
364.797 156.948 361.52 155.19 357.478 155.19 cv
353.437 155.19 350.16 156.948 350.16 159.117 cv
350.16 161.285 353.437 163.043 357.478 163.043 cv
361.52 163.043 364.797 161.285 364.797 159.117 cv
@
364.797 159.117 mo
364.797 156.948 361.52 155.19 357.478 155.19 cv
353.437 155.19 350.16 156.948 350.16 159.117 cv
350.16 161.285 353.437 163.043 357.478 163.043 cv
361.52 163.043 364.797 161.285 364.797 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
352.481 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
352.783 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
399.783 147.514 mo
389.608 149.656 374.971 152.691 365.868 155.011 cv
365.332 155.19 364.618 155.547 363.904 155.725 cv
@
364.083 155.19 mo
362.655 156.261 li
364.44 155.904 li
cp
@
364.083 155.19 mo
362.655 156.261 li
364.44 155.904 li
f
382.647 159.117 mo
382.647 156.948 379.37 155.19 375.328 155.19 cv
371.287 155.19 368.01 156.948 368.01 159.117 cv
368.01 161.285 371.287 163.043 375.328 163.043 cv
379.37 163.043 382.647 161.285 382.647 159.117 cv
@
382.647 159.117 mo
382.647 156.948 379.37 155.19 375.328 155.19 cv
371.287 155.19 368.01 156.948 368.01 159.117 cv
368.01 161.285 371.287 163.043 375.328 163.043 cv
379.37 163.043 382.647 161.285 382.647 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
370.331 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
370.633 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
402.996 148.05 mo
396.927 150.192 388.716 153.048 383.718 155.011 cv
383.361 155.19 383.004 155.368 382.468 155.547 cv
@
382.29 155.19 mo
380.862 156.261 li
382.647 155.904 li
cp
@
382.29 155.19 mo
380.862 156.261 li
382.647 155.904 li
f
400.497 159.117 mo
400.497 156.948 397.22 155.19 393.178 155.19 cv
389.137 155.19 385.86 156.948 385.86 159.117 cv
385.86 161.285 389.137 163.043 393.178 163.043 cv
397.22 163.043 400.497 161.285 400.497 159.117 cv
@
400.497 159.117 mo
400.497 156.948 397.22 155.19 393.178 155.19 cv
389.137 155.19 385.86 156.948 385.86 159.117 cv
385.86 161.285 389.137 163.043 393.178 163.043 cv
397.22 163.043 400.497 161.285 400.497 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
388.181 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
388.483 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
406.923 148.407 mo
404.424 150.192 401.389 152.691 398.712 154.654 cv
@
398.533 154.297 mo
397.462 155.725 li
399.069 154.833 li
cp
@
398.533 154.297 mo
397.462 155.725 li
399.069 154.833 li
f
418.347 159.117 mo
418.347 156.948 415.07 155.19 411.028 155.19 cv
406.987 155.19 403.71 156.948 403.71 159.117 cv
403.71 161.285 406.987 163.043 411.028 163.043 cv
415.07 163.043 418.347 161.285 418.347 159.117 cv
@
418.347 159.117 mo
418.347 156.948 415.07 155.19 411.028 155.19 cv
406.987 155.19 403.71 156.948 403.71 159.117 cv
403.71 161.285 406.987 163.043 411.028 163.043 cv
415.07 163.043 418.347 161.285 418.347 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
406.031 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
406.333 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
411.028 148.585 mo
411.028 150.013 411.028 151.62 411.028 153.226 cv
@
410.671 153.226 mo
411.028 155.011 li
411.564 153.226 li
cp
@
410.671 153.226 mo
411.028 155.011 li
411.564 153.226 li
f
436.197 159.117 mo
436.197 156.948 432.92 155.19 428.878 155.19 cv
424.837 155.19 421.56 156.948 421.56 159.117 cv
421.56 161.285 424.837 163.043 428.878 163.043 cv
432.92 163.043 436.197 161.285 436.197 159.117 cv
@
436.197 159.117 mo
436.197 156.948 432.92 155.19 428.878 155.19 cv
424.837 155.19 421.56 156.948 421.56 159.117 cv
421.56 161.285 424.837 163.043 428.878 163.043 cv
432.92 163.043 436.197 161.285 436.197 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
423.881 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
424.183 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
415.134 148.407 mo
417.633 150.192 420.667 152.691 423.345 154.654 cv
@
422.988 154.833 mo
424.594 155.725 li
423.523 154.297 li
cp
@
422.988 154.833 mo
424.594 155.725 li
423.523 154.297 li
f
454.047 159.117 mo
454.047 156.948 450.77 155.19 446.728 155.19 cv
442.687 155.19 439.41 156.948 439.41 159.117 cv
439.41 161.285 442.687 163.043 446.728 163.043 cv
450.77 163.043 454.047 161.285 454.047 159.117 cv
@
454.047 159.117 mo
454.047 156.948 450.77 155.19 446.728 155.19 cv
442.687 155.19 439.41 156.948 439.41 159.117 cv
439.41 161.285 442.687 163.043 446.728 163.043 cv
450.77 163.043 454.047 161.285 454.047 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
441.731 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
442.033 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
419.061 148.05 mo
425.13 150.192 433.162 153.048 438.339 155.011 cv
438.874 155.19 439.588 155.547 440.302 155.904 cv
@
439.588 156.082 mo
441.373 156.439 li
439.945 155.19 li
cp
@
439.588 156.082 mo
441.373 156.439 li
439.945 155.19 li
f
471.897 159.117 mo
471.897 156.948 468.62 155.19 464.578 155.19 cv
460.537 155.19 457.26 156.948 457.26 159.117 cv
457.26 161.285 460.537 163.043 464.578 163.043 cv
468.62 163.043 471.897 161.285 471.897 159.117 cv
@
471.897 159.117 mo
471.897 156.948 468.62 155.19 464.578 155.19 cv
460.537 155.19 457.26 156.948 457.26 159.117 cv
457.26 161.285 460.537 163.043 464.578 163.043 cv
468.62 163.043 471.897 161.285 471.897 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
459.581 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
459.883 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
422.095 147.514 mo
432.27 149.656 447.085 152.691 456.189 155.011 cv
456.724 155.19 457.438 155.547 458.152 155.725 cv
@
457.617 155.904 mo
459.402 156.261 li
457.974 155.19 li
cp
@
457.617 155.904 mo
459.402 156.261 li
457.974 155.19 li
f
489.747 159.117 mo
489.747 156.948 486.47 155.19 482.428 155.19 cv
478.387 155.19 475.11 156.948 475.11 159.117 cv
475.11 161.285 478.387 163.043 482.428 163.043 cv
486.47 163.043 489.747 161.285 489.747 159.117 cv
@
489.747 159.117 mo
489.747 156.948 486.47 155.19 482.428 155.19 cv
478.387 155.19 475.11 156.948 475.11 159.117 cv
475.11 161.285 478.387 163.043 482.428 163.043 cv
486.47 163.043 489.747 161.285 489.747 159.117 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
477.431 158.26 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
477.733 161.116 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
423.88 147.157 mo
437.982 149.121 460.473 152.512 474.039 155.011 cv
474.574 155.19 475.288 155.368 476.181 155.725 cv
@
475.467 155.904 mo
477.252 156.261 li
475.824 155.011 li
cp
@
475.467 155.904 mo
477.252 156.261 li
475.824 155.011 li
f
435.304 172.861 mo
435.304 171.087 428.432 169.648 419.953 169.648 cv
411.475 169.648 404.603 171.087 404.603 172.861 cv
404.603 174.635 411.475 176.074 419.953 176.074 cv
428.432 176.074 435.304 174.635 435.304 172.861 cv
@
435.304 172.861 mo
435.304 171.087 428.432 169.648 419.953 169.648 cv
411.475 169.648 404.603 171.087 404.603 172.861 cv
404.603 174.635 411.475 176.074 419.953 176.074 cv
428.432 176.074 435.304 174.635 435.304 172.861 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
406.384 173.432 mo
(roundrobin\(1,1,1,1,1,1,1,1\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 .624725 1.24951 .624756 1.24948 .624756 1.24951 .624756 1.24948 .624756 1.24951 
.624725 1.24951 0 ]xsh
435.304 186.427 mo
435.304 184.653 428.432 183.214 419.953 183.214 cv
411.475 183.214 404.603 184.653 404.603 186.427 cv
404.603 188.201 411.475 189.64 419.953 189.64 cv
428.432 189.64 435.304 188.201 435.304 186.427 cv
@
435.304 186.427 mo
435.304 184.653 428.432 183.214 419.953 183.214 cv
411.475 183.214 404.603 184.653 404.603 186.427 cv
404.603 188.201 411.475 189.64 419.953 189.64 cv
428.432 189.64 435.304 188.201 435.304 186.427 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
406.384 186.998 mo
(roundrobin\(8,8,8,8,8,8,8,8\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 .624725 1.24951 .624756 1.24948 .624756 1.24951 .624756 1.24948 .624756 1.24951 
.624725 1.24951 0 ]xsh
419.953 176.074 mo
419.953 177.681 419.953 179.644 419.953 181.429 cv
@
419.596 181.429 mo
419.953 183.214 li
420.489 181.429 li
cp
@
419.596 181.429 mo
419.953 183.214 li
420.489 181.429 li
f
362.655 161.973 mo
363.726 162.508 364.975 163.044 365.868 163.222 cv
376.756 165.721 394.428 168.756 406.566 170.719 cv
@
405.852 171.076 mo
407.637 170.898 li
406.03 170.184 li
cp
@
405.852 171.076 mo
407.637 170.898 li
406.03 170.184 li
f
380.683 161.973 mo
381.754 162.508 382.825 163.044 383.718 163.222 cv
390.322 165.186 400.854 168.042 408.886 170.005 cv
@
408.172 170.184 mo
409.957 170.362 li
408.351 169.291 li
cp
@
408.172 170.184 mo
409.957 170.362 li
408.351 169.291 li
f
398.533 161.794 mo
402.46 163.936 408.351 166.792 412.813 169.113 cv
@
412.456 169.47 mo
414.241 169.827 li
412.813 168.577 li
cp
@
412.456 169.47 mo
414.241 169.827 li
412.813 168.577 li
f
413.527 162.865 mo
414.598 164.472 415.848 166.435 416.919 168.22 cv
@
416.562 168.399 mo
417.811 169.648 li
417.276 167.863 li
cp
@
416.562 168.399 mo
417.811 169.648 li
417.276 167.863 li
f
426.379 162.865 mo
425.308 164.472 424.059 166.435 422.988 168.22 cv
@
422.631 167.863 mo
422.095 169.648 li
423.345 168.399 li
cp
@
422.631 167.863 mo
422.095 169.648 li
423.345 168.399 li
f
441.373 161.794 mo
437.446 163.936 431.556 166.792 427.093 169.113 cv
@
427.093 168.577 mo
425.665 169.827 li
427.45 169.47 li
cp
@
427.093 168.577 mo
425.665 169.827 li
427.45 169.47 li
f
459.402 161.973 mo
458.152 162.508 457.081 162.865 456.189 163.222 cv
449.763 165.186 439.41 168.042 431.377 170.005 cv
@
431.377 169.47 mo
429.771 170.362 li
431.556 170.362 li
cp
@
431.377 169.47 mo
429.771 170.362 li
431.556 170.362 li
f
477.252 161.973 mo
476.181 162.508 474.931 163.044 474.039 163.222 cv
463.329 165.543 446.014 168.577 433.876 170.541 cv
@
433.876 170.005 mo
432.27 170.898 li
434.055 170.898 li
cp
@
433.876 170.005 mo
432.27 170.898 li
434.055 170.898 li
f
364.797 200.172 mo
364.797 198.003 361.52 196.245 357.478 196.245 cv
353.437 196.245 350.16 198.003 350.16 200.172 cv
350.16 202.34 353.437 204.098 357.478 204.098 cv
361.52 204.098 364.797 202.34 364.797 200.172 cv
@
364.797 200.172 mo
364.797 198.003 361.52 196.245 357.478 196.245 cv
353.437 196.245 350.16 198.003 350.16 200.172 cv
350.16 202.34 353.437 204.098 357.478 204.098 cv
361.52 204.098 364.797 202.34 364.797 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
352.481 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
352.783 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
407.815 188.391 mo
395.677 190.354 377.113 193.567 365.868 196.066 cv
365.332 196.245 364.618 196.423 363.726 196.78 cv
@
364.083 196.066 mo
362.655 197.316 li
364.44 196.959 li
cp
@
364.083 196.066 mo
362.655 197.316 li
364.44 196.959 li
f
382.647 200.172 mo
382.647 198.003 379.37 196.245 375.328 196.245 cv
371.287 196.245 368.01 198.003 368.01 200.172 cv
368.01 202.34 371.287 204.098 375.328 204.098 cv
379.37 204.098 382.647 202.34 382.647 200.172 cv
@
382.647 200.172 mo
382.647 198.003 379.37 196.245 375.328 196.245 cv
371.287 196.245 368.01 198.003 368.01 200.172 cv
368.01 202.34 371.287 204.098 375.328 204.098 cv
379.37 204.098 382.647 202.34 382.647 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
370.331 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
370.633 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
410.136 188.926 mo
401.925 191.068 390.679 193.924 383.718 196.066 cv
383.361 196.245 382.825 196.423 382.468 196.602 cv
@
382.111 196.245 mo
380.683 197.316 li
382.468 197.137 li
cp
@
382.111 196.245 mo
380.683 197.316 li
382.468 197.137 li
f
400.497 200.172 mo
400.497 198.003 397.22 196.245 393.178 196.245 cv
389.137 196.245 385.86 198.003 385.86 200.172 cv
385.86 202.34 389.137 204.098 393.178 204.098 cv
397.22 204.098 400.497 202.34 400.497 200.172 cv
@
400.497 200.172 mo
400.497 198.003 397.22 196.245 393.178 196.245 cv
389.137 196.245 385.86 198.003 385.86 200.172 cv
385.86 202.34 389.137 204.098 393.178 204.098 cv
397.22 204.098 400.497 202.34 400.497 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
388.181 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
388.483 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
414.063 189.462 mo
409.957 191.604 404.245 194.46 399.961 196.78 cv
@
399.961 196.245 mo
398.533 197.494 li
400.318 197.137 li
cp
@
399.961 196.245 mo
398.533 197.494 li
400.318 197.137 li
f
418.347 200.172 mo
418.347 198.003 415.07 196.245 411.028 196.245 cv
406.987 196.245 403.71 198.003 403.71 200.172 cv
403.71 202.34 406.987 204.098 411.028 204.098 cv
415.07 204.098 418.347 202.34 418.347 200.172 cv
@
418.347 200.172 mo
418.347 198.003 415.07 196.245 411.028 196.245 cv
406.987 196.245 403.71 198.003 403.71 200.172 cv
403.71 202.34 406.987 204.098 411.028 204.098 cv
415.07 204.098 418.347 202.34 418.347 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
406.031 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
406.333 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
417.811 189.64 mo
416.919 191.247 415.669 193.21 414.42 194.995 cv
@
414.063 194.638 mo
413.527 196.423 li
414.777 195.174 li
cp
@
414.063 194.638 mo
413.527 196.423 li
414.777 195.174 li
f
436.197 200.172 mo
436.197 198.003 432.92 196.245 428.878 196.245 cv
424.837 196.245 421.56 198.003 421.56 200.172 cv
421.56 202.34 424.837 204.098 428.878 204.098 cv
432.92 204.098 436.197 202.34 436.197 200.172 cv
@
436.197 200.172 mo
436.197 198.003 432.92 196.245 428.878 196.245 cv
424.837 196.245 421.56 198.003 421.56 200.172 cv
421.56 202.34 424.837 204.098 428.878 204.098 cv
432.92 204.098 436.197 202.34 436.197 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
423.881 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
424.183 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
422.095 189.64 mo
422.988 191.247 424.237 193.21 425.487 194.995 cv
@
425.13 195.174 mo
426.379 196.423 li
425.844 194.638 li
cp
@
425.13 195.174 mo
426.379 196.423 li
425.844 194.638 li
f
454.047 200.172 mo
454.047 198.003 450.77 196.245 446.728 196.245 cv
442.687 196.245 439.41 198.003 439.41 200.172 cv
439.41 202.34 442.687 204.098 446.728 204.098 cv
450.77 204.098 454.047 202.34 454.047 200.172 cv
@
454.047 200.172 mo
454.047 198.003 450.77 196.245 446.728 196.245 cv
442.687 196.245 439.41 198.003 439.41 200.172 cv
439.41 202.34 442.687 204.098 446.728 204.098 cv
450.77 204.098 454.047 202.34 454.047 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
441.731 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
442.033 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
425.844 189.462 mo
429.949 191.604 435.661 194.46 439.945 196.78 cv
@
439.588 197.137 mo
441.373 197.494 li
439.945 196.245 li
cp
@
439.588 197.137 mo
441.373 197.494 li
439.945 196.245 li
f
471.897 200.172 mo
471.897 198.003 468.62 196.245 464.578 196.245 cv
460.537 196.245 457.26 198.003 457.26 200.172 cv
457.26 202.34 460.537 204.098 464.578 204.098 cv
468.62 204.098 471.897 202.34 471.897 200.172 cv
@
471.897 200.172 mo
471.897 198.003 468.62 196.245 464.578 196.245 cv
460.537 196.245 457.26 198.003 457.26 200.172 cv
457.26 202.34 460.537 204.098 464.578 204.098 cv
468.62 204.098 471.897 202.34 471.897 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
459.581 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
459.883 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
429.771 188.926 mo
437.803 191.068 449.227 193.924 456.189 196.066 cv
456.724 196.245 457.438 196.602 458.152 196.959 cv
@
457.438 197.137 mo
459.223 197.494 li
457.795 196.245 li
cp
@
457.438 197.137 mo
459.223 197.494 li
457.795 196.245 li
f
489.747 200.172 mo
489.747 198.003 486.47 196.245 482.428 196.245 cv
478.387 196.245 475.11 198.003 475.11 200.172 cv
475.11 202.34 478.387 204.098 482.428 204.098 cv
486.47 204.098 489.747 202.34 489.747 200.172 cv
@
489.747 200.172 mo
489.747 198.003 486.47 196.245 482.428 196.245 cv
478.387 196.245 475.11 198.003 475.11 200.172 cv
475.11 202.34 478.387 204.098 482.428 204.098 cv
486.47 204.098 489.747 202.34 489.747 200.172 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
477.431 199.315 mo
(iDCT_1D)
[.694733 1.80423 1.66681 1.52689 1.24948 1.24951 0 ]xsh
477.733 202.171 mo
(I/O: 8->8)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
432.091 188.391 mo
444.229 190.354 462.615 193.567 474.039 196.066 cv
474.574 196.245 475.288 196.423 476.181 196.78 cv
@
475.467 196.959 mo
477.252 197.316 li
475.824 196.066 li
cp
@
475.467 196.959 mo
477.252 197.316 li
475.824 196.066 li
f
426.379 213.916 mo
426.379 212.142 419.507 210.703 411.028 210.703 cv
402.55 210.703 395.678 212.142 395.678 213.916 cv
395.678 215.69 402.55 217.129 411.028 217.129 cv
419.507 217.129 426.379 215.69 426.379 213.916 cv
@
426.379 213.916 mo
426.379 212.142 419.507 210.703 411.028 210.703 cv
402.55 210.703 395.678 212.142 395.678 213.916 cv
395.678 215.69 402.55 217.129 411.028 217.129 cv
419.507 217.129 426.379 215.69 426.379 213.916 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
397.459 214.487 mo
(roundrobin\(8,8,8,8,8,8,8,8\))
[.832153 1.24948 1.24951 1.24951 1.24948 .832153 1.24951 1.24948 .694733 1.24951 .832123 1.24951 
.624756 1.24951 .624725 1.24951 .624756 1.24948 .624756 1.24951 .624756 1.24948 .624756 1.24951 
.624725 1.24951 0 ]xsh
389.787 227.661 mo
389.787 225.492 386.59 223.734 382.647 223.734 cv
378.704 223.734 375.507 225.492 375.507 227.661 cv
375.507 229.829 378.704 231.588 382.647 231.588 cv
386.59 231.588 389.787 229.829 389.787 227.661 cv
@
389.787 227.661 mo
389.787 225.492 386.59 223.734 382.647 223.734 cv
378.704 223.734 375.507 225.492 375.507 227.661 cv
375.507 229.829 378.704 231.588 382.647 231.588 cv
386.59 231.588 389.787 229.829 389.787 227.661 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
380.495 226.804 mo
(Add)
[1.80423 1.24951 0 ]xsh
377.951 229.66 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
404.781 216.951 mo
400.318 219.093 394.249 221.949 389.43 224.269 cv
@
389.43 223.734 mo
388.002 224.983 li
389.787 224.626 li
cp
@
389.43 223.734 mo
388.002 224.983 li
389.787 224.626 li
f
362.655 203.028 mo
363.904 203.563 364.975 204.099 365.868 204.277 cv
374.436 206.419 388.359 209.275 398.355 211.417 cv
@
397.998 211.774 mo
399.783 211.774 li
398.176 210.882 li
cp
@
397.998 211.774 mo
399.783 211.774 li
398.176 210.882 li
f
380.683 203.028 mo
381.754 203.563 382.825 203.92 383.718 204.277 cv
388.359 206.062 395.677 208.74 401.568 210.882 cv
@
401.032 211.239 mo
402.817 211.239 li
401.211 210.346 li
cp
@
401.032 211.239 mo
402.817 211.239 li
401.211 210.346 li
f
397.462 203.385 mo
399.961 205.348 403.174 207.669 405.673 209.632 cv
@
405.316 209.811 mo
406.923 210.703 li
405.852 209.275 li
cp
@
405.316 209.811 mo
406.923 210.703 li
405.852 209.275 li
f
411.028 204.277 mo
411.028 205.705 411.028 207.312 411.028 208.918 cv
@
410.671 208.918 mo
411.028 210.703 li
411.564 208.918 li
cp
@
410.671 208.918 mo
411.028 210.703 li
411.564 208.918 li
f
424.594 203.385 mo
422.095 205.348 418.882 207.669 416.383 209.632 cv
@
416.205 209.275 mo
415.134 210.703 li
416.74 209.811 li
cp
@
416.205 209.275 mo
415.134 210.703 li
416.74 209.811 li
f
441.373 202.849 mo
440.302 203.385 439.231 203.92 438.339 204.277 cv
433.519 206.062 426.201 208.74 420.31 210.882 cv
@
420.667 210.346 mo
419.061 211.239 li
420.846 211.239 li
cp
@
420.667 210.346 mo
419.061 211.239 li
420.846 211.239 li
f
459.402 203.028 mo
458.152 203.563 457.081 204.099 456.189 204.277 cv
447.442 206.419 433.698 209.275 423.702 211.417 cv
@
423.88 210.882 mo
422.274 211.774 li
424.059 211.774 li
cp
@
423.88 210.882 mo
422.274 211.774 li
424.059 211.774 li
f
477.252 203.028 mo
476.181 203.563 474.931 204.099 474.039 204.277 cv
460.83 206.955 439.41 209.989 425.13 211.953 cv
@
425.665 211.417 mo
423.88 212.131 li
425.665 212.31 li
cp
@
425.665 211.417 mo
423.88 212.131 li
425.665 212.31 li
f
375.864 228.91 mo
368.188 230.338 355.693 232.302 348.196 233.194 cv
329.989 235.515 298.752 238.549 281.616 240.156 cv
@
281.973 239.62 mo
280.188 240.334 li
281.973 240.513 li
cp
@
281.973 239.62 mo
280.188 240.334 li
281.973 240.513 li
f
290.362 268.894 mo
290.362 267.12 281.252 265.681 270.013 265.681 cv
258.775 265.681 249.664 267.12 249.664 268.894 cv
249.664 270.668 258.775 272.107 270.013 272.107 cv
281.252 272.107 290.362 270.668 290.362 268.894 cv
@
290.362 268.894 mo
290.362 267.12 281.252 265.681 270.013 265.681 cv
258.775 265.681 249.664 267.12 249.664 268.894 cv
249.664 270.668 258.775 272.107 270.013 272.107 cv
281.252 272.107 290.362 270.668 290.362 268.894 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
251.446 269.465 mo
(roundrobin\(24,24,24,24,24,24,24,24\))
[.832153 1.2495 1.2495 1.2495 1.24951 .832153 1.24948 1.24951 .694733 1.24948 .832153 1.24951 
1.24948 .624756 1.24951 1.24948 .624756 1.24951 1.24948 .624756 1.24951 1.24948 .624756 1.24951 
1.24948 .624756 1.24951 1.24948 .624756 1.24951 1.24951 .624725 1.24951 1.24948 0 ]xsh
270.013 259.255 mo
270.013 260.683 270.013 262.29 270.013 263.896 cv
@
269.656 263.896 mo
270.013 265.681 li
270.549 263.896 li
cp
@
269.656 263.896 mo
270.013 265.681 li
270.549 263.896 li
f
215.928 282.639 mo
215.928 280.47 212.731 278.712 208.788 278.712 cv
204.845 278.712 201.648 280.47 201.648 282.639 cv
201.648 284.807 204.845 286.566 208.788 286.566 cv
212.731 286.566 215.928 284.807 215.928 282.639 cv
@
215.928 282.639 mo
215.928 280.47 212.731 278.712 208.788 278.712 cv
204.845 278.712 201.648 280.47 201.648 282.639 cv
201.648 284.807 204.845 286.566 208.788 286.566 cv
212.731 286.566 215.928 284.807 215.928 282.639 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
204.901 281.782 mo
(Identity)
[.832153 1.2495 1.10951 1.24951 .694717 .694717 .694717 0 ]xsh
204.093 284.638 mo
(I/O: 1->1)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40942 0 ]xsh
256.09 271.215 mo
244.131 273.178 227.53 276.213 216.999 278.533 cv
216.463 278.712 215.749 278.89 215.035 279.247 cv
@
215.392 278.533 mo
213.964 279.783 li
215.749 279.426 li
cp
@
215.392 278.533 mo
213.964 279.783 li
215.749 279.426 li
f
233.421 282.639 mo
233.421 280.47 230.224 278.712 226.281 278.712 cv
222.338 278.712 219.141 280.47 219.141 282.639 cv
219.141 284.807 222.338 286.566 226.281 286.566 cv
230.224 286.566 233.421 284.807 233.421 282.639 cv
@
233.421 282.639 mo
233.421 280.47 230.224 278.712 226.281 278.712 cv
222.338 278.712 219.141 280.47 219.141 282.639 cv
219.141 284.807 222.338 286.566 226.281 286.566 cv
230.224 286.566 233.421 284.807 233.421 282.639 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
222.394 281.782 mo
(Identity)
[.832153 1.2495 1.10951 1.24951 .694717 .694717 .694717 0 ]xsh
221.586 284.638 mo
(I/O: 1->1)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40944 0 ]xsh
259.303 271.75 mo
251.449 273.714 241.096 276.57 234.492 278.533 cv
233.956 278.712 233.242 279.069 232.528 279.426 cv
@
232.885 278.712 mo
231.457 279.961 li
233.242 279.604 li
cp
@
232.885 278.712 mo
231.457 279.961 li
233.242 279.604 li
f
250.914 282.639 mo
250.914 280.47 247.717 278.712 243.774 278.712 cv
239.831 278.712 236.634 280.47 236.634 282.639 cv
236.634 284.807 239.831 286.566 243.774 286.566 cv
247.717 286.566 250.914 284.807 250.914 282.639 cv
@
250.914 282.639 mo
250.914 280.47 247.717 278.712 243.774 278.712 cv
239.831 278.712 236.634 280.47 236.634 282.639 cv
236.634 284.807 239.831 286.566 243.774 286.566 cv
247.717 286.566 250.914 284.807 250.914 282.639 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
239.887 281.782 mo
(Identity)
[.832153 1.2495 1.10951 1.24951 .694717 .694717 .694717 0 ]xsh
239.079 284.638 mo
(I/O: 1->1)
[.832153 .694717 1.80424 .694717 .624756 1.2495 .832138 1.40942 0 ]xsh
264.123 271.929 mo
260.196 274.071 254.662 276.927 250.378 279.247 cv
@
250.378 278.712 mo
248.95 279.961 li
250.735 279.604 li
cp
@
250.378 278.712 mo
248.95 279.961 li
250.735 279.604 li
f
268.407 282.639 mo
268.407 280.47 265.21 278.712 261.267 278.712 cv
257.324 278.712 254.127 280.47 254.127 282.639 cv
254.127 284.807 257.324 286.566 261.267 286.566 cv
265.21 286.566 268.407 284.807 268.407 282.639 cv
@
268.407 282.639 mo
268.407 280.47 265.21 278.712 261.267 278.712 cv
257.324 278.712 254.127 280.47 254.127 282.639 cv
254.127 284.807 257.324 286.566 261.267 286.566 cv
265.21 286.566 268.407 284.807 268.407 282.639 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
257.38 281.782 mo
(Identity)
[.832153 1.24948 1.10953 1.24951 .694702 .694733 .694733 0 ]xsh
256.572 284.638 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
267.871 272.107 mo
266.979 273.714 265.729 275.499 264.658 277.462 cv
@
264.301 277.105 mo
263.766 278.89 li
265.015 277.641 li
cp
@
264.301 277.105 mo
263.766 278.89 li
265.015 277.641 li
f
285.9 282.639 mo
285.9 280.47 282.703 278.712 278.76 278.712 cv
274.817 278.712 271.62 280.47 271.62 282.639 cv
271.62 284.807 274.817 286.566 278.76 286.566 cv
282.703 286.566 285.9 284.807 285.9 282.639 cv
@
285.9 282.639 mo
285.9 280.47 282.703 278.712 278.76 278.712 cv
274.817 278.712 271.62 280.47 271.62 282.639 cv
271.62 284.807 274.817 286.566 278.76 286.566 cv
282.703 286.566 285.9 284.807 285.9 282.639 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
274.873 281.782 mo
(Identity)
[.832153 1.24948 1.10953 1.24951 .694702 .694733 .694733 0 ]xsh
274.065 284.638 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
272.155 272.107 mo
273.048 273.714 274.297 275.499 275.368 277.462 cv
@
275.011 277.641 mo
276.261 278.89 li
275.725 277.105 li
cp
@
275.011 277.641 mo
276.261 278.89 li
275.725 277.105 li
f
303.393 282.639 mo
303.393 280.47 300.196 278.712 296.253 278.712 cv
292.31 278.712 289.113 280.47 289.113 282.639 cv
289.113 284.807 292.31 286.566 296.253 286.566 cv
300.196 286.566 303.393 284.807 303.393 282.639 cv
@
303.393 282.639 mo
303.393 280.47 300.196 278.712 296.253 278.712 cv
292.31 278.712 289.113 280.47 289.113 282.639 cv
289.113 284.807 292.31 286.566 296.253 286.566 cv
300.196 286.566 303.393 284.807 303.393 282.639 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
292.366 281.782 mo
(Identity)
[.832153 1.24948 1.10953 1.24951 .694702 .694733 .694733 0 ]xsh
291.558 284.638 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
275.904 271.929 mo
279.831 274.071 285.364 276.927 289.648 279.247 cv
@
289.291 279.604 mo
291.076 279.961 li
289.648 278.712 li
cp
@
289.291 279.604 mo
291.076 279.961 li
289.648 278.712 li
f
320.886 282.639 mo
320.886 280.47 317.689 278.712 313.746 278.712 cv
309.803 278.712 306.606 280.47 306.606 282.639 cv
306.606 284.807 309.803 286.566 313.746 286.566 cv
317.689 286.566 320.886 284.807 320.886 282.639 cv
@
320.886 282.639 mo
320.886 280.47 317.689 278.712 313.746 278.712 cv
309.803 278.712 306.606 280.47 306.606 282.639 cv
306.606 284.807 309.803 286.566 313.746 286.566 cv
317.689 286.566 320.886 284.807 320.886 282.639 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
309.859 281.782 mo
(Identity)
[.832153 1.24948 1.10953 1.24951 .694702 .694733 .694733 0 ]xsh
309.051 284.638 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
280.545 271.572 mo
288.577 273.714 298.93 276.57 305.535 278.533 cv
305.892 278.712 306.427 278.89 306.784 279.069 cv
@
306.784 279.604 mo
308.569 279.783 li
307.141 278.712 li
cp
@
306.784 279.604 mo
308.569 279.783 li
307.141 278.712 li
f
338.379 282.639 mo
338.379 280.47 335.182 278.712 331.239 278.712 cv
327.296 278.712 324.099 280.47 324.099 282.639 cv
324.099 284.807 327.296 286.566 331.239 286.566 cv
335.182 286.566 338.379 284.807 338.379 282.639 cv
@
338.379 282.639 mo
338.379 280.47 335.182 278.712 331.239 278.712 cv
327.296 278.712 324.099 280.47 324.099 282.639 cv
324.099 284.807 327.296 286.566 331.239 286.566 cv
335.182 286.566 338.379 284.807 338.379 282.639 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
327.352 281.782 mo
(Identity)
[.832153 1.24948 1.10953 1.24951 .694702 .694733 .694733 0 ]xsh
326.544 284.638 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
284.115 271.215 mo
295.896 273.178 312.675 276.213 323.028 278.533 cv
323.563 278.712 324.277 278.89 324.991 279.247 cv
@
324.456 279.426 mo
326.241 279.783 li
324.813 278.712 li
cp
@
324.456 279.426 mo
326.241 279.783 li
324.813 278.712 li
f
300.358 296.383 mo
300.358 294.609 286.773 293.17 270.013 293.17 cv
253.254 293.17 239.668 294.609 239.668 296.383 cv
239.668 298.157 253.254 299.596 270.013 299.596 cv
286.773 299.596 300.358 298.157 300.358 296.383 cv
@
300.358 296.383 mo
300.358 294.609 286.773 293.17 270.013 293.17 cv
253.254 293.17 239.668 294.609 239.668 296.383 cv
239.668 298.157 253.254 299.596 270.013 299.596 cv
286.773 299.596 300.358 298.157 300.358 296.383 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
241.45 296.954 mo
(roundrobin\(1920,1920,1920,1920,1920,1920,1920,1920\))
[.832153 1.2495 1.2495 1.2495 1.24951 .832138 1.24951 1.2495 .694717 1.2495 .832153 1.2495 
1.2495 1.24951 1.24948 .624756 1.24951 1.24948 1.24951 1.24951 .624756 1.24948 1.24951 1.24948 
1.24951 .624756 1.24948 1.24951 1.24951 1.24948 .624756 1.24951 1.24948 1.24951 1.24948 .624756 
1.24951 1.24951 1.24948 1.24951 .624756 1.24948 1.24951 1.24951 1.24948 .624756 1.24948 1.24951 
1.24951 1.24948 0 ]xsh
283.401 310.127 mo
283.401 307.959 277.407 306.2 270.013 306.2 cv
262.62 306.2 256.626 307.959 256.626 310.127 cv
256.626 312.296 262.62 314.054 270.013 314.054 cv
277.407 314.054 283.401 312.296 283.401 310.127 cv
@
283.401 310.127 mo
283.401 307.959 277.407 306.2 270.013 306.2 cv
262.62 306.2 256.626 307.959 256.626 310.127 cv
256.626 312.296 262.62 314.054 270.013 314.054 cv
277.407 314.054 283.401 312.296 283.401 310.127 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/V <1C60D8A8C9B6079F005CDC6370483696E1EAFC944BD4E06D86DBD18EB735
2F45C381C0DF5B906978D128771DD089E21DCCBC0592B3A6BE45DFF941B3D9AF
82C0E5BBEE832081C600F8D424981C94A7921155A8C74A96B13AD2AF06E82571
B4060A57A3D45E0E99876FCE9C38AE3E4A7F8C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 86 /V put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/.notdef /six /.notdef /eight /nine /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/H /I /J /K /L /M /.notdef /O 
/P /Q /R /S /T /U /V /.notdef 
/X /Y /Z /bracketleft /.notdef /bracketright /.notdef /underscore 
/.notdef /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u 3{/.notdef}rp /y 
/z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
263.003 309.271 mo
(FlipVertically)
[1.38943 .694733 .694733 1.24948 1.80426 1.1095 .832153 .694733 .694702 1.10953 1.10953 .694702 
.694733 0 ]xsh
259.071 312.127 mo
(I/O: 921600->921600)
[.832153 .694702 1.80426 .694702 .624756 1.24951 1.24951 1.24948 1.24951 1.24948 1.24951 .832153 
1.40942 1.24948 1.24951 1.24951 1.24948 1.24951 0 ]xsh
270.013 299.596 mo
270.013 301.024 270.013 302.63 270.013 304.237 cv
@
269.656 304.237 mo
270.013 306.022 li
270.549 304.237 li
cp
@
269.656 304.237 mo
270.013 306.022 li
270.549 304.237 li
f
213.786 285.495 mo
215.035 286.03 216.106 286.566 216.999 286.744 cv
226.459 288.886 240.561 291.564 251.806 293.527 cv
@
251.628 293.884 mo
253.413 293.706 li
251.628 292.992 li
cp
@
251.628 293.884 mo
253.413 293.706 li
251.628 292.992 li
f
231.457 285.495 mo
232.528 286.03 233.599 286.387 234.492 286.744 cv
240.561 288.529 249.486 291.028 256.804 292.992 cv
@
256.626 293.349 mo
258.411 293.349 li
256.804 292.456 li
cp
@
256.626 293.349 mo
258.411 293.349 li
256.804 292.456 li
f
248.95 285.316 mo
252.699 287.458 258.232 290.136 262.516 292.456 cv
@
262.159 292.813 mo
263.944 293.17 li
262.516 291.921 li
cp
@
262.159 292.813 mo
263.944 293.17 li
262.516 291.921 li
f
263.766 286.387 mo
264.658 287.994 265.908 289.957 267.157 291.742 cv
@
266.8 291.921 mo
268.05 293.17 li
267.514 291.385 li
cp
@
266.8 291.921 mo
268.05 293.17 li
267.514 291.385 li
f
276.261 286.387 mo
275.368 287.994 274.119 289.957 272.869 291.742 cv
@
272.512 291.385 mo
271.977 293.17 li
273.226 291.921 li
cp
@
272.512 291.385 mo
271.977 293.17 li
273.226 291.921 li
f
291.076 285.316 mo
287.328 287.458 281.794 290.136 277.51 292.456 cv
@
277.51 291.921 mo
276.082 293.17 li
277.867 292.813 li
cp
@
277.51 291.921 mo
276.082 293.17 li
277.867 292.813 li
f
308.569 285.495 mo
307.498 286.03 306.427 286.566 305.535 286.744 cv
299.644 288.529 290.719 291.028 283.401 292.992 cv
@
283.401 292.456 mo
281.794 293.349 li
283.579 293.349 li
cp
@
283.401 292.456 mo
281.794 293.349 li
283.579 293.349 li
f
326.241 285.495 mo
325.17 286.03 323.92 286.566 323.028 286.744 cv
313.746 288.886 299.466 291.564 288.22 293.527 cv
@
288.399 292.992 mo
286.614 293.706 li
288.399 293.884 li
cp
@
288.399 292.992 mo
286.614 293.706 li
288.399 293.884 li
f
277.153 324.764 mo
277.153 322.596 273.957 320.837 270.013 320.837 cv
266.07 320.837 262.873 322.596 262.873 324.764 cv
262.873 326.933 266.07 328.691 270.013 328.691 cv
273.957 328.691 277.153 326.933 277.153 324.764 cv
@
277.153 324.764 mo
277.153 322.596 273.957 320.837 270.013 320.837 cv
266.07 320.837 262.873 322.596 262.873 324.764 cv
262.873 326.933 266.07 328.691 270.013 328.691 cv
273.957 328.691 277.153 326.933 277.153 324.764 cv
1 gry
f
0 gry
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
266.126 323.908 mo
(Identity)
[.832153 1.24948 1.10953 1.24951 .694702 .694733 .694733 0 ]xsh
265.318 326.764 mo
(I/O: 1->1)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
270.013 314.233 mo
270.013 315.661 270.013 317.267 270.013 318.874 cv
@
269.656 318.874 mo
270.013 320.659 li
270.549 318.874 li
cp
@
269.656 318.874 mo
270.013 320.659 li
270.549 318.874 li
f
285.364 339.401 mo
285.364 337.233 278.492 335.474 270.013 335.474 cv
261.535 335.474 254.662 337.233 254.662 339.401 cv
254.662 341.57 261.535 343.328 270.013 343.328 cv
278.492 343.328 285.364 341.57 285.364 339.401 cv
@
285.364 339.401 mo
285.364 337.233 278.492 335.474 270.013 335.474 cv
261.535 335.474 254.662 337.233 254.662 339.401 cv
254.662 341.57 261.535 343.328 270.013 343.328 cv
278.492 343.328 285.364 341.57 285.364 339.401 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73DB9D92E2C498F1C8C272174C48D3E3EA8F27C6E6BA
93064621D133D030C551A42025686691A783FB90A2D496BEF06790AC79A6878D
99BC23CD14D9CFD812148CC847ABD0CF7E73A1A9D5ACE6E2E3BBFD4DD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /.notdef /eight /nine /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/H /I /J /K /L /M /.notdef /O 
/P /Q /R /S /T /U /V /.notdef 
/X /Y /Z /bracketleft /.notdef /bracketright /.notdef /underscore 
/.notdef /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u 3{/.notdef}rp /y 
/z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
257.103 338.545 mo
(BMPByteStream_Creator)
[1.66681 2.22159 1.38947 1.66681 1.24948 .694733 1.10953 1.38943 .694733 .832123 1.10953 1.10953 
1.94421 1.24951 1.66681 .832153 1.1095 1.10953 .694733 1.24948 0 ]xsh
261.155 341.401 mo
(I/O: [3,*]->[54,*])
[.832153 .694702 1.80426 .694702 .624756 .832153 1.24951 .624756 1.24948 .832153 .832153 1.40942 
.832153 1.24948 1.24951 .624756 1.24948 0 ]xsh
270.013 328.87 mo
270.013 330.298 270.013 331.904 270.013 333.511 cv
@
269.656 333.511 mo
270.013 335.296 li
270.549 333.511 li
cp
@
269.656 333.511 mo
270.013 335.296 li
270.549 333.511 li
f
277.51 354.038 mo
277.51 351.87 274.154 350.111 270.013 350.111 cv
265.873 350.111 262.516 351.87 262.516 354.038 cv
262.516 356.207 265.873 357.965 270.013 357.965 cv
274.154 357.965 277.51 356.207 277.51 354.038 cv
@
277.51 354.038 mo
277.51 351.87 274.154 350.111 270.013 350.111 cv
265.873 350.111 262.516 351.87 262.516 354.038 cv
262.516 356.207 265.873 357.965 270.013 357.965 cv
274.154 357.965 277.51 356.207 277.51 354.038 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDSA+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/W <1C60D8A8C9B5D6EF221D1F535C4E993C98F3C3E8C6F16C822BD2743EB782
1EB7D4579AED89E03CEC92EC38206B161850892F887AD5C7930EF4023F5FCBE1
1EE2208AD3E1BD1F677AACB74B3CC3710F142D0BA108A85A0E4D5D852306CED1
4B5207F2E46DF8D6DC78FEF21F895C03164E67E0D168BBFB54CA35ABBA9BABB6
1C9F3A4AAD762B0057729986D9DB719BDE2CE08FDB5B50F7244A0094B314415C
47AAC538D3C6C8E1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDSA+TimesNewRomanPSMT /Encoding get
dup 87 /W put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDSA+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /.notdef /comma 
/hyphen /.notdef /slash /zero /one /two /three /four 
/five /six /.notdef /eight /nine /colon 3{/.notdef}rp /greater 
2{/.notdef}rp /A /B /C /D /E /F /G 
/H /I /J /K /L /M /.notdef /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /.notdef /bracketright /.notdef /underscore 
/.notdef /a /b /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u 3{/.notdef}rp /y 
/z 133{/.notdef}rp]
LTFDSA+TimesNewRomanPSMT nf
LTFDSA+TimesNewRomanPSMT*1 [2.499 0 0 -2.499 0 0 ]msf
264.808 353.182 mo
(FileWriter)
[1.38943 .694733 .694733 1.1095 2.35904 .832123 .694733 .694733 1.1095 0 ]xsh
265.318 356.038 mo
(I/O: 1->0)
[.832153 .694702 1.80426 .694702 .624756 1.24951 .832153 1.40942 0 ]xsh
270.013 343.507 mo
270.013 344.935 270.013 346.541 270.013 348.148 cv
@
269.656 348.148 mo
270.013 349.933 li
270.549 348.148 li
cp
@
269.656 348.148 mo
270.013 349.933 li
270.549 348.148 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/LTFDSA+TimesNewRomanPSMT*1 uf
/LTFDSA+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
