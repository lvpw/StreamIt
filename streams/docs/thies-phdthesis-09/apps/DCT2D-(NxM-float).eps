%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: DCT2D.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 12/5/2008, 11:07:41 PM
%%BoundingBox: 0 0 428 649
%%HiResBoundingBox: 0 0 428 649
%%CropBox: 0 0 428 649
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1622 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="GNU Ghostscript 7.05"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -649 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 649 li
428 649 li
428 0 li
cp
clp
[1 0 0 1 -36 0 ]ct
gsave
35 650 mo
464 650 li
464 0 li
35 0 li
cp
clp
.3306 lw
0 lc
0 lj
1 ml
[] 0 dsh
true sadj
38.6448 646.355 mo
461.152 646.355 li
461.152 3.66919 li
38.6448 3.66919 li
cp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Roman) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 67 /C put
dup 68 /D put
dup 84 /T put
def
/UniqueID 44335 def
/FontBBox {-167 -250 1009 878} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 447 461 694 694] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [36] def
/StdVW [81] def
/StemSnapH [36 43] def
/StemSnapV [81 94] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/two <1C60D8A8C9B7A73DB9C4155FCF739F7C1974D5BF41CC3E8700100AE610
E49DF6B4C276649A8B3177B0F76FADB15EC55BD4BBD1CDF8C5F886738FFDBD44
2FF8A0594A170A20B9C3E13444FE4DC986DA862896B80FFA135FA164A257> |-
/C <1C60D8A8C9B64EDFB39C8FA0E3107D39E1E26D40368A6A59D36B799EDDCB
A8AF8BCAEA2E296C5BB00979C4073082C4AC62DAAE27F25BE45DFF121DF075F7
3D37111C10DFF7C6BD4BFE8AE73B4FADB84F0E8B5722DEA1CA14F5AFDC440B45
4F635F5576E82C8F45782F1EDE0EC9CA59D48E4C0F81> |-
/D <1C60D8A8C9B6079F62AF7EE2124AC712AE5D5419E262A0C00C6163DFBCB2
A6FA65DDDD5062250DB8BBFB46EB35827750F9FCEE696526B20FE9266474B179
350945BBDAF7180FAB04D619EB38198FC722361E0B3B5E50F9017F19C7BDCABB
285F506A04FE32C63936689B1F9C81923B03440D57336303C59B59E8D3C0659D
33> |-
/T <1C60D8A8C9B7D8BE16B2E353E3300378A32828826C127DE3D6A3769F5542
8119DC48F4B555CFAC557278838F3EC6C5F7B64F6B44DFEFCBC8AF8174185170
E165701BB15CF1CB88629A978EF6D86FB8> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/LTFDQW+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 15{/.notdef}rp /T 171{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
40.7759 7.37089 mo
(DCT2D)
[3.34164 3.0871 2.82792 2.3142 0 ]xsh
43.9344 323.69 mo
455.862 323.69 li
455.862 38.0519 li
43.9344 38.0519 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B7A73DE3E5E50AD058CB1758CCEC8536B108DD66A8D296857C
B3303D78514A78D06E85FDA9E8085F8D9525195AE96992EAA1E95B40679F85C3
FC4165030DF121E13968768CFE641E50E297E68778A63ACC6DD3> |-
/r <1C60D8A8C9B81F2C117020CA370F4EDA9CC5786DD9DE9EF42ACF1876A05B
D63AFC335B1B675841319B03439D25E5CD3513D8B1AF7C3213243E231585FDFB
23DF1B8599146D034A4E5D6FF06CCB4811E4D5773B1A3B8F6DC7EFA556C00470
2D769BB83004181BE21F0C2BFBE9C20E97FA9275EFEA6DCC374D4BC4F2DBC112
90AFF811640F86741723DE5B9796381D4326AE431F5D9C5CAED9> |-
/s <1C60D8A8C9B7361F4A5DC306676AF4C8647FF3053FF45CCDDBEB7E9B9050
12DA1DE9402C8DB245C98EF5B89AF8B307871A82029AB9C9383D498ABA5BCF42
FD3EBA06E16095068AAD2A24F29F66CD7BEDAF75E27B9E98183114BB708CEE9F
70B53D4922DAA331AE3A4B4FD1B5CD24EA574D8FE8D1E66E3ECF87407A13A679
B23887BDCEB1C164DC6CBF6472F4BC61E5FBABA972F7976EEBF3BC4B43DEE327
20F6A1A3C1878ACCA80EBBED76DEBD40C76FFC717243DC8D6CB182005A946D70
F948846138DEF539AD5BE615B04618EEB754F0DAF886F93D007AE786FB00955E
897D78D67615B1FA609D> |-
/w <1C60D8A8C9B6079F6CBBA5F366E947F933D60DF598D919B1B7650559D736
37DABDC1EE55BCEC17305D792CEB494E24BD853631335C74FFCA113C4D914522
6940D65B0FA636B78B1332922431C88D4DDF20C0A3C1C91D0C3F0EC21F67A6EF
80D94D8DD0BC64DA8FAF76B12BBC90C7B441833497F4FAAF7AFFFE22453504D1
C6C3D3F89787D8CE910F64CD7AC81F424C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 119 /w put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 15{/.notdef}rp /T 26{/.notdef}rp 
/o 2{/.notdef}rp /r /s 3{/.notdef}rp /w 136{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
46.0476 41.7539 mo
(rows)
[1.54122 2.3142 3.34163 0 ]xsh
49.224 302.531 mo
153.032 302.531 li
153.032 60.532 li
49.224 60.532 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B77FE2948016809A16C1383D80AA8513D781288589A82DC94A
5DA0D421DEC176AEE608ECA472235D24D269E725C25D06B3582797B60EEBA4C4
46D10FC22341077B09EDB4E12CA0359E24628B46BB6E10727940> |-
/e <1C60D8A8C9B77FE29496D1FBB47314D6F46DA3EBFEC342F3B983185301EF
B706EB7833A9B3F14CD479AC93E43031BC63CB7FFE55CD73AABA1B6DFA935F49
683C721ECBA275DBC565AC78A07D0C5329E18D2789C058EC6367BBAECDF40AEE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 99 /c put
dup 101 /e put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 15{/.notdef}rp /T 14{/.notdef}rp 
/c /.notdef /e 9{/.notdef}rp /o 2{/.notdef}rp /r /s 
3{/.notdef}rp /w 136{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
51.5227 64.2349 mo
(DCTcore)
[3.34163 3.08711 2.82792 2.05494 2.3142 1.54122 0 ]xsh
76.9944 149.133 mo
145.098 149.133 li
145.098 68.4666 li
76.9944 68.4666 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7A73D9AFACE39B0C8DF9EB6083858E657E6E95D2C42AE2914
EB3C7C6FCB5E9F471C2055D213C552ACA7BC04F55BA26F3B77D8DFB74AC132BE
41DB935437CE3B007C16B65D849E2E6D1C61659F2699A17D9AEEDDD0EBC23EB8
70A7377D2AC9DB56D0296131C3A8254097E85D96> |-
/i <1C60D8A8C9B854D0F11440006C203BFFD1DEDCDE7CAD1373D75DB7315CFC
49A0833FA9D881419B9BEE01885373804535A66836A5115D3B942001E4A8D676
2EBA1D3CCCC2CED3DAC862D3F0398204E81D1C72BC10727D59A156997C9269F7
F9572E03A90C988E59FECA8B3BEBEE755CF420171B> |-
/t <1C60D8A8C9B854D0DAE0E17091F63D902F15B1C5B2DD1246F40FD3EC3264
448E2BE336EDCDEB1DFC2F9412B18B341EC1F740C5E1DC1152FC3909509AD9AD
D2933ADE9A3C5AD03C26776EECF232> |-
/v <1C60D8A8C9B7A73DDA3AE0A055993EE6BE7DFD4A4A2DB6881516C07791ED
230086728F5F7B4242AB79AA3E9EFA40308C16768E728C96C19C447086D3AC82
2F0AB1C43C44A30591856370C72E911DB5FEBBFD365EF7E42462BF4A23A3EEAE
F504CBF5C917EC0A44C5B6D735> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 98 /b put
dup 105 /i put
dup 116 /t put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 15{/.notdef}rp /T 13{/.notdef}rp 
/b /c /.notdef /e 3{/.notdef}rp /i 5{/.notdef}rp /o 
2{/.notdef}rp /r /s /t /.notdef /v /w 136{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
79.1992 72.1689 mo
(bitrev)
[2.3142 1.28669 1.2867 1.54122 2.05494 0 ]xsh
54.5136 299.886 mo
147.743 299.886 li
147.743 184.837 li
54.5136 184.837 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/u <1C60D8A8C9B7A73D96315394C03E2804B8D6B013BEE63C754B7DCD21D17D
EE183DDCCBE94C1E49FD4EEAD58EEB67E527D51D30B7569BBD690F10D18E5949
069889C638179D8480A9808D89F695AD05863E6AF7CC14732F1A0B4D904FA886
0DFB17262B8501BEF73C125F016588> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 15{/.notdef}rp /T 13{/.notdef}rp 
/b /c /.notdef /e 3{/.notdef}rp /i 5{/.notdef}rp /o 
2{/.notdef}rp /r /s /t /u /v /w 136{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
56.7587 188.54 mo
(recurse)
[1.54122 2.05494 2.05494 2.3142 1.54122 1.80041 0 ]xsh
98.814 276.083 mo
142.453 276.083 li
142.453 208.641 li
98.814 208.641 li
cp
@
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7A73DE3E5E50523E6C3667B38E45A4C51E0FEC84C813AB373
8B83F58EEDF7211177C6639AD2CCECEBC1915AB857B5701E72700D0D163B5F2F
58E5A8B520D7ED7F9880D10C1A6AAC1DEF76C68CB623039F59365031342DE694
26167CDA4201402D972AF8016480B0CF8CBDDE4940ABCEFD4C2D5F2FE77DC410
2439C361CA6330A182E6FD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[50{/.notdef}rp /two 16{/.notdef}rp /C /D 15{/.notdef}rp /T 13{/.notdef}rp 
/b /c /d /e 3{/.notdef}rp /i 5{/.notdef}rp /o 
2{/.notdef}rp /r /s /t /u /v /w 136{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
100.874 212.344 mo
(reordDCT)
[1.54122 2.05494 2.3142 1.54122 2.3142 3.34164 3.0871 0 ]xsh
148.404 302.531 mo
252.212 302.531 li
252.212 60.532 li
148.404 60.532 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
150.703 64.2349 mo
(DCTcore)
[3.34163 3.08711 2.82791 2.05495 2.31419 1.54123 0 ]xsh
176.174 149.133 mo
244.278 149.133 li
244.278 68.4666 li
176.174 68.4666 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
178.379 72.1689 mo
(bitrev)
[2.31419 1.2867 1.2867 1.54123 2.05493 0 ]xsh
153.694 299.886 mo
246.923 299.886 li
246.923 184.837 li
153.694 184.837 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
155.939 188.54 mo
(recurse)
[1.54123 2.05493 2.05495 2.31419 1.54123 1.8004 0 ]xsh
197.994 276.083 mo
241.633 276.083 li
241.633 208.641 li
197.994 208.641 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
200.054 212.344 mo
(reordDCT)
[1.54123 2.05493 2.31421 1.54121 2.31421 3.34163 3.08711 0 ]xsh
247.584 302.531 mo
351.392 302.531 li
351.392 60.532 li
247.584 60.532 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
249.883 64.2349 mo
(DCTcore)
[3.34163 3.08711 2.82791 2.05493 2.31421 1.54123 0 ]xsh
252.874 149.133 mo
320.978 149.133 li
320.978 68.4666 li
252.874 68.4666 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
255.078 72.1689 mo
(bitrev)
[2.31421 1.28668 1.28671 1.5412 2.05496 0 ]xsh
252.874 299.886 mo
346.103 299.886 li
346.103 184.837 li
252.874 184.837 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
255.119 188.54 mo
(recurse)
[1.54121 2.05496 2.05493 2.31421 1.5412 1.80042 0 ]xsh
297.174 276.083 mo
340.813 276.083 li
340.813 208.641 li
297.174 208.641 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
299.234 212.344 mo
(reordDCT)
[1.54123 2.05493 2.31421 1.54123 2.31418 3.34164 3.0871 0 ]xsh
346.764 302.531 mo
450.572 302.531 li
450.572 60.532 li
346.764 60.532 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
349.063 64.2349 mo
(DCTcore)
[3.34164 3.0871 2.82791 2.05493 2.31421 1.54123 0 ]xsh
352.054 149.133 mo
420.158 149.133 li
420.158 68.4666 li
352.054 68.4666 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
354.258 72.1689 mo
(bitrev)
[2.31421 1.28668 1.28671 1.5412 2.05496 0 ]xsh
352.054 299.886 mo
445.283 299.886 li
445.283 184.837 li
352.054 184.837 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
354.299 188.54 mo
(recurse)
[1.54123 2.05493 2.05493 2.31421 1.54123 1.80042 0 ]xsh
396.354 276.083 mo
439.993 276.083 li
439.993 208.641 li
396.354 208.641 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
398.414 212.344 mo
(reordDCT)
[1.54123 2.05493 2.31421 1.54123 2.31418 3.34164 3.0871 0 ]xsh
43.9344 611.973 mo
455.862 611.973 li
455.862 326.335 li
43.9344 326.335 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
46.0476 330.037 mo
(rows)
[1.54122 2.3142 3.34163 0 ]xsh
49.224 590.814 mo
153.032 590.814 li
153.032 348.815 li
49.224 348.815 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
51.5227 352.518 mo
(DCTcore)
[3.34163 3.08711 2.82792 2.05494 2.3142 1.54122 0 ]xsh
76.9944 437.416 mo
145.098 437.416 li
145.098 356.75 li
76.9944 356.75 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
79.1992 360.452 mo
(bitrev)
[2.3142 1.28669 1.2867 1.54122 2.05494 0 ]xsh
54.5136 588.17 mo
147.743 588.17 li
147.743 473.121 li
54.5136 473.121 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
56.7587 476.824 mo
(recurse)
[1.54122 2.05494 2.05494 2.3142 1.54122 1.80041 0 ]xsh
98.814 564.366 mo
142.453 564.366 li
142.453 496.924 li
98.814 496.924 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
100.874 500.627 mo
(reordDCT)
[1.54122 2.05494 2.3142 1.54122 2.3142 3.34164 3.0871 0 ]xsh
148.404 590.814 mo
252.212 590.814 li
252.212 348.815 li
148.404 348.815 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
150.703 352.518 mo
(DCTcore)
[3.34163 3.08711 2.82791 2.05495 2.31419 1.54123 0 ]xsh
176.174 437.416 mo
244.278 437.416 li
244.278 356.75 li
176.174 356.75 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
178.379 360.452 mo
(bitrev)
[2.31419 1.2867 1.2867 1.54123 2.05493 0 ]xsh
153.694 588.17 mo
246.923 588.17 li
246.923 473.121 li
153.694 473.121 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
155.939 476.824 mo
(recurse)
[1.54123 2.05493 2.05495 2.31419 1.54123 1.8004 0 ]xsh
197.994 564.366 mo
241.633 564.366 li
241.633 496.924 li
197.994 496.924 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
200.054 500.627 mo
(reordDCT)
[1.54123 2.05493 2.31421 1.54121 2.31421 3.34163 3.08711 0 ]xsh
247.584 590.814 mo
351.392 590.814 li
351.392 348.815 li
247.584 348.815 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
249.883 352.518 mo
(DCTcore)
[3.34163 3.08711 2.82791 2.05493 2.31421 1.54123 0 ]xsh
252.874 437.416 mo
320.978 437.416 li
320.978 356.75 li
252.874 356.75 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
255.078 360.452 mo
(bitrev)
[2.31421 1.28668 1.28671 1.5412 2.05496 0 ]xsh
252.874 588.17 mo
346.103 588.17 li
346.103 473.121 li
252.874 473.121 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
255.119 476.824 mo
(recurse)
[1.54121 2.05496 2.05493 2.31421 1.5412 1.80042 0 ]xsh
297.174 564.366 mo
340.813 564.366 li
340.813 496.924 li
297.174 496.924 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
299.234 500.627 mo
(reordDCT)
[1.54123 2.05493 2.31421 1.54123 2.31418 3.34164 3.0871 0 ]xsh
346.764 590.814 mo
450.572 590.814 li
450.572 348.815 li
346.764 348.815 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
349.063 352.518 mo
(DCTcore)
[3.34164 3.0871 2.82791 2.05493 2.31421 1.54123 0 ]xsh
352.054 437.416 mo
420.158 437.416 li
420.158 356.75 li
352.054 356.75 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
354.258 360.452 mo
(bitrev)
[2.31421 1.28668 1.28671 1.5412 2.05496 0 ]xsh
352.054 588.17 mo
445.283 588.17 li
445.283 473.121 li
352.054 473.121 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
354.299 476.824 mo
(recurse)
[1.54123 2.05493 2.05493 2.31421 1.54123 1.80042 0 ]xsh
396.354 564.366 mo
439.993 564.366 li
439.993 496.924 li
396.354 496.924 li
cp
@
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
398.414 500.627 mo
(reordDCT)
[1.54123 2.05493 2.31421 1.54123 2.31418 3.34164 3.0871 0 ]xsh
263.783 22.8439 mo
263.783 16.6359 256.975 11.603 248.576 11.603 cv
240.177 11.603 233.368 16.6359 233.368 22.8439 cv
233.368 29.051 240.177 34.0839 248.576 34.0839 cv
256.975 34.0839 263.783 29.051 263.783 22.8439 cv
@
263.783 22.8439 mo
263.783 16.6359 256.975 11.603 248.576 11.603 cv
240.177 11.603 233.368 16.6359 233.368 22.8439 cv
233.368 29.051 240.177 34.0839 248.576 34.0839 cv
256.975 34.0839 263.783 29.051 263.783 22.8439 cv
/1 
[/DeviceRGB] /CSA add_res
.992 .863 .565 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B8707C25> |-
/hyphen <1C60D8A8C9B81F2C7E673161CF52871F3F524B3A1BAC5ADA04F510A
476> |-
/slash <1C60D8A8C9B854D088EAD778FBC18D924BA165ED7CB0EB5700C3B61B
62ACF96E65C0BF> |-
/zero <1C60D8A8C9B7A73DE18CEEF4E48C6DD01FBACAA39C3CF5567D0E5C788
075445C95D6A3B6E540D57A95C2149688073A3E100742CAF1210D033AAEFAE6F
8B444349FD5782CA146EC98165CB56922017B727DFF8905922E07> |-
/one <1C60D8A8C9B7A73DB94F41466C876FCA9AF55081C1C70D8EC4AB3C9249
D700CD0FF27B669AF104FB3406E5DFE3F3B0AB0CAE2CF1998D0DA43C395891C4
7CD031071E50A5> |-
/six <1C60D8A8C9B7A73DF81BACD811429F931042E1295F1D2320E46DE79DF7
47FCAABFFD92F045A475E54E15C8E93ECB3BD59C8545C0EF45BF22429615FC68
5C033A02F070B2C6D7D737838C1853D297AC8915086E73952A7A9847D6F588AB
17767CC39CB62607242BC1B7BFF5295CEB6C03755CD9B53DA2> |-
/eight <1C60D8A8C9B7A73D9EB159A3CFECEE26FAC12AD4B6691842B4C84783
E84E1D8CD272AEC54014C937C15B810E403549328E3DC44B6A66E9E0AE5509A1
20FFE6F694340EC43D35C59CD7D1B2F14C1F1D5BA576A10F77E962817750FC0E
DC62627EE0E94BCE030A10C59143A015250A384C09B6A65F8572DF3FCBF68CF8
0D23E4E88D0691BD2178810DDABD5F40D8018F795B8CB5A52DDDD05F80E9A2BC
CDF3A5E14C701FBADF0447A7AE0E47FA8F86216AC25155BFF3569B19382CA905
7B18009FE630A2D7CEFDC3A4A3> |-
/colon <1C60D8A8C9B854D0E389293C42E83787A5BE0CE9B5745E40D1B32D07
F826004562E0981DB26F3EF2E2B5CD932C33C49C462F9673F306A9A8ECFFE93D
9FCE8BF4190AA3F1208FCCE1> |-
/equal <1C60D8A8C9B7E7C1C7C30B941AA047473EBF9655DE246137CE0666A3
DD27E47997A26319529C8C4FF5C38D266AE0> |-
/greater <1C60D8A8C9B7E7C1C7C30B940B3D62C7A181F0EBB0723CBB160375
71F050C44CCE59A85ACB3DB6BF9B03383F> |-
/I <1C60D8A8C9B81F2C3AB090E7A94305EFD59611ABFA6BAFD07A97745145D9
B0DF5E6D35DFFC117239480D5B4909BCBB653176E0149E687888D5B98137EBEA
64> |-
/O <1C60D8A8C9B6079F258D65BC2331B95A484F6FB0C89DE7976C286549CD33
A4D7316575EC038BAA234ED3FB5DEACB25E52512A7CBD428E6DBD2EB830622E8
8A44262525560702DCFFFB3478FE1A2C6113548B23F661EC01296D75C1A7D5FE
B75CD951FFE5A9> |-
/k <1C60D8A8C9B7A73D926FE6D4B51E06A6595F3746ABEED643EB32E31FC5C1
56BE33D279A48C7177D38FEEE25BE39FA8184693C31C3DD98D1AF000E30B25B8
F0029B9D7DAB8132C06DAF7AF8346F39C9E4C7E69A448E350100342A6E22A322
C4DEF85ED9405E1A9FCE65A5B4B5084195D644BBC14B138BCD62C9C4EFF347DE
06C9D1F36BBC04C3531EBEE642B499C247> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 32 /space put
dup 45 /hyphen put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 54 /six put
dup 56 /eight put
dup 58 /colon put
dup 61 /equal put
dup 62 /greater put
dup 73 /I put
dup 79 /O put
dup 107 /k put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen /.notdef /slash /zero /one 
/two 3{/.notdef}rp /six /.notdef /eight /.notdef /colon 2{/.notdef}rp 
/equal /greater 4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp 
/O 4{/.notdef}rp /T 13{/.notdef}rp /b /c /d /e 
3{/.notdef}rp /i /.notdef /k 3{/.notdef}rp /o 2{/.notdef}rp /r 
/s /t /u /v /w 136{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
242.536 18.6119 mo
(source)
[1.80042 2.31419 2.31421 1.54121 2.05495 0 ]xsh
240.201 23.9015 mo
(work=80)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
238.722 29.1911 mo
(I/O: 0->16)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 2.31421 0 ]xsh
270.065 51.936 mo
270.065 48.65 260.444 45.986 248.576 45.986 cv
236.708 45.986 227.087 48.65 227.087 51.936 cv
227.087 55.223 236.708 57.887 248.576 57.887 cv
260.444 57.887 270.065 55.223 270.065 51.936 cv
@
270.065 51.936 mo
270.065 48.65 260.444 45.986 248.576 45.986 cv
236.708 45.986 227.087 48.65 227.087 51.936 cv
227.087 55.223 236.708 57.887 248.576 57.887 cv
260.444 57.887 270.065 55.223 270.065 51.936 cv
1 gry
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C7961C5101279ABC36EDE6472BD125007B977
158C4E9FC1695861D4B758EA0B2DA40929DA2764CDB06C7B17969E83F9B9F9DB
69731300937B8C87AE99> |-
/parenright <1C60D8A8C9B81F2C3AE115477765EA9A623E840D3901B96042A
533934EFD3574B5C656B3B3F7387587FE0D191D87B3E12F0EE70351D07A784B9
DEAB1C75708B7B3217116> |-
/comma <1C60D8A8C9B8707CDCE153BE174BF3415C26A42365D336CF0B48FBEC
E2CCCE829E5297D863F3AA9AC7B62E5A6EDE06B2E79A00ED16CF91E8C6953AD2
9D6E96EF745E730ABC2B82BE60EB1DBDD5981EF3D78237B91F6DA501> |-
/four <1C60D8A8C9B7A73DB99E8D3796659F80CD8CFB6F4891658B64B2996E4
565B417E6680D9494DD50CBC7F026F985B68E97EBCD932CA0004F37BA5FD28FA
5EB6F0DC8CCF44A75B207DA88B4B0D8C53ACF90F9CAE1B04C7036C5BF682DB0A
BF0221167> |-
/n <1C60D8A8C9B7A73D926FE6A84374263FF505637A0DAA6A1CED287131EA2B
D2E1E6E797441A36EF164B2E98EA0B7A662ADAA0C64D637EBFFAEDEE2D95D0C9
387D6E78EA7DBD0E03769EFADBB9E99820C3CA652E5CB84D6476DEB84D65355B
ED40D74AEE8C38DE38F7ADD1F45E132F9FCFA8357906BA1C9F825F576D022523
4E76> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 52 /four put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /.notdef 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp 
/T 13{/.notdef}rp /b /c /d /e 3{/.notdef}rp /i 
/.notdef /k 2{/.notdef}rp /n /o 2{/.notdef}rp /r /s 
/t /u /v /w 136{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
230.386 52.9939 mo
(roundrobin\(4,4,4,4\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.1571 2.31418 1.1571 2.31421 1.1571 2.31421 0 ]xsh
248.576 34.0839 mo
248.576 37.059 248.576 40.035 248.576 43.0099 cv
@
247.915 42.6799 mo
248.576 45.986 li
249.568 42.6799 li
cp
@
247.915 42.6799 mo
248.576 45.986 li
249.568 42.6799 li
f
142.453 82.352 mo
142.453 79.0649 134.312 76.4009 124.27 76.4009 cv
114.228 76.4009 106.087 79.0649 106.087 82.352 cv
106.087 85.6379 114.228 88.3019 124.27 88.3019 cv
134.312 88.3019 142.453 85.6379 142.453 82.352 cv
@
142.453 82.352 mo
142.453 79.0649 134.312 76.4009 124.27 76.4009 cv
114.228 76.4009 106.087 79.0649 106.087 82.352 cv
106.087 85.6379 114.228 88.3019 124.27 88.3019 cv
134.312 88.3019 142.453 85.6379 142.453 82.352 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
109.552 83.4099 mo
(roundrobin\(2,2\))
[1.54122 2.3142 2.3142 2.3142 2.31419 1.54123 2.31419 2.3142 1.2867 2.3142 1.54121 2.31421 
1.15709 2.31421 0 ]xsh
227.748 53.259 mo
210.887 54.581 188.076 57.226 173.86 60.5319 cv
162.95 62.8459 147.082 70.7809 136.172 76.07 cv
@
136.172 75.0779 mo
133.858 77.393 li
137.164 76.4009 li
cp
@
136.172 75.0779 mo
133.858 77.393 li
137.164 76.4009 li
f
241.633 82.352 mo
241.633 79.0649 233.492 76.4009 223.45 76.4009 cv
213.408 76.4009 205.267 79.0649 205.267 82.352 cv
205.267 85.6379 213.408 88.3019 223.45 88.3019 cv
233.492 88.3019 241.633 85.6379 241.633 82.352 cv
@
241.633 82.352 mo
241.633 79.0649 233.492 76.4009 223.45 76.4009 cv
213.408 76.4009 205.267 79.0649 205.267 82.352 cv
205.267 85.6379 213.408 88.3019 223.45 88.3019 cv
233.492 88.3019 241.633 85.6379 241.633 82.352 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
208.732 83.4099 mo
(roundrobin\(2,2\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.15709 2.31421 0 ]xsh
243.617 57.887 mo
239.98 62.516 234.36 69.1279 230.062 74.4169 cv
@
229.732 73.756 mo
228.079 76.731 li
230.723 74.748 li
cp
@
229.732 73.756 mo
228.079 76.731 li
230.723 74.748 li
f
291.884 82.352 mo
291.884 79.0649 283.744 76.4009 273.701 76.4009 cv
263.659 76.4009 255.518 79.0649 255.518 82.352 cv
255.518 85.6379 263.659 88.3019 273.701 88.3019 cv
283.744 88.3019 291.884 85.6379 291.884 82.352 cv
@
291.884 82.352 mo
291.884 79.0649 283.744 76.4009 273.701 76.4009 cv
263.659 76.4009 255.518 79.0649 255.518 82.352 cv
255.518 85.6379 263.659 88.3019 273.701 88.3019 cv
283.744 88.3019 291.884 85.6379 291.884 82.352 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
258.983 83.4099 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
253.535 57.887 mo
257.171 62.516 262.792 69.1279 267.089 74.4169 cv
@
266.428 74.748 mo
269.073 76.731 li
267.42 73.756 li
cp
@
266.428 74.748 mo
269.073 76.731 li
267.42 73.756 li
f
391.064 82.352 mo
391.064 79.0649 382.924 76.4009 372.881 76.4009 cv
362.839 76.4009 354.698 79.0649 354.698 82.352 cv
354.698 85.6379 362.839 88.3019 372.881 88.3019 cv
382.924 88.3019 391.064 85.6379 391.064 82.352 cv
@
391.064 82.352 mo
391.064 79.0649 382.924 76.4009 372.881 76.4009 cv
362.839 76.4009 354.698 79.0649 354.698 82.352 cv
354.698 85.6379 362.839 88.3019 372.881 88.3019 cv
382.924 88.3019 391.064 85.6379 391.064 82.352 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
358.163 83.4099 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
269.404 53.259 mo
286.264 54.581 309.406 57.226 323.291 60.5319 cv
334.201 62.8459 350.07 70.7809 360.98 76.07 cv
@
359.988 76.4009 mo
363.294 77.393 li
360.98 75.0779 li
cp
@
359.988 76.4009 mo
363.294 77.393 li
360.98 75.0779 li
f
270.065 315.094 mo
270.065 311.807 260.444 309.143 248.576 309.143 cv
236.708 309.143 227.087 311.807 227.087 315.094 cv
227.087 318.381 236.708 321.045 248.576 321.045 cv
260.444 321.045 270.065 318.381 270.065 315.094 cv
@
270.065 315.094 mo
270.065 311.807 260.444 309.143 248.576 309.143 cv
236.708 309.143 227.087 311.807 227.087 315.094 cv
227.087 318.381 236.708 321.045 248.576 321.045 cv
260.444 321.045 270.065 318.381 270.065 315.094 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
230.386 316.152 mo
(roundrobin\(1,1,1,1\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.1571 2.31418 1.1571 2.31421 1.1571 2.31421 0 ]xsh
270.065 340.22 mo
270.065 336.933 260.444 334.269 248.576 334.269 cv
236.708 334.269 227.087 336.933 227.087 340.22 cv
227.087 343.506 236.708 346.17 248.576 346.17 cv
260.444 346.17 270.065 343.506 270.065 340.22 cv
@
270.065 340.22 mo
270.065 336.933 260.444 334.269 248.576 334.269 cv
236.708 334.269 227.087 336.933 227.087 340.22 cv
227.087 343.506 236.708 346.17 248.576 346.17 cv
260.444 346.17 270.065 343.506 270.065 340.22 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
230.386 341.278 mo
(roundrobin\(4,4,4,4\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.1571 2.31418 1.1571 2.31421 1.1571 2.31421 0 ]xsh
248.576 321.045 mo
248.576 324.02 248.576 327.657 248.576 330.963 cv
@
247.915 330.963 mo
248.576 334.269 li
249.568 330.963 li
cp
@
247.915 330.963 mo
248.576 334.269 li
249.568 330.963 li
f
108.071 111.444 mo
108.071 105.237 101.706 100.204 93.855 100.204 cv
86.0038 100.204 79.6392 105.237 79.6392 111.444 cv
79.6392 117.652 86.0038 122.685 93.855 122.685 cv
101.706 122.685 108.071 117.652 108.071 111.444 cv
@
108.071 111.444 mo
108.071 105.237 101.706 100.204 93.855 100.204 cv
86.0038 100.204 79.6392 105.237 79.6392 111.444 cv
79.6392 117.652 86.0038 122.685 93.855 122.685 cv
101.706 122.685 108.071 117.652 108.071 111.444 cv
.271 .467 .702 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B7A73DDF325AF121518DD24D79A1D6297F2682F9AD5083CE90
6B71FC8BFB529DE7E11E55AF343C688ECAE2F8E1922FBFF6524D1DEA97BD39D9
CE14632F8473959D0898D7B7EF3E2B985A44859DA5885A0B7E1416032223E48B
C8A546760893052D5D557F50BFBB6793E5108395A50448013F59BB2036802753
A16DC97698BA68F4F4EAF1FDEAF39B9DD03FEBA42B0F0E35E3A4C6407754F9F9
648DF8C8F5539FA7CCFA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /.notdef 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp 
/T 13{/.notdef}rp /b /c /d /e 3{/.notdef}rp /i 
/.notdef /k 2{/.notdef}rp /n /o 2{/.notdef}rp /r /s 
/t /u /v /w /.notdef /y 134{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
86.6555 107.213 mo
(Identity)
[1.54122 2.3142 2.05494 2.3142 1.2867 1.28669 1.2867 0 ]xsh
85.4799 112.503 mo
(work=12)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.3142 0 ]xsh
85.1582 117.792 mo
(I/O: 1->1)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.3142 1.54122 2.6104 0 ]xsh
118.319 87.972 mo
114.352 91.939 109.393 96.8979 104.765 101.196 cv
@
104.765 99.873 mo
103.112 102.849 li
106.087 101.196 li
cp
@
104.765 99.873 mo
103.112 102.849 li
106.087 101.196 li
f
142.453 111.444 mo
142.453 105.237 136.089 100.204 128.237 100.204 cv
120.386 100.204 114.022 105.237 114.022 111.444 cv
114.022 117.652 120.386 122.685 128.237 122.685 cv
136.089 122.685 142.453 117.652 142.453 111.444 cv
@
142.453 111.444 mo
142.453 105.237 136.089 100.204 128.237 100.204 cv
120.386 100.204 114.022 105.237 114.022 111.444 cv
114.022 117.652 120.386 122.685 128.237 122.685 cv
136.089 122.685 142.453 117.652 142.453 111.444 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B77FE294851E8312417598C86A6256F86C70DE2C7AFF06FCE3
4BADEE28F3B8D02D3C60352D19569C8A11355E1235678015637DF6C7E4A05E8E
A8AB948BF076D376030D74D5BF1D25D6B1436CBFF068CFC521B6EF1846E35D0E
2A4D1C4888BBA14114C326082B33961EF18B6F0B661AC7CDF50B0B0D80CC5ED8
71668C27B3C878E43E83D293BA1B1F771221D32DA7404867CEA1760CC79EAA61
6682686BC92138B01A5FF6B55D314BD1AA96EE89C141B8E9EB46C16F1B31BD66
B910EA6BBA> |-
/l <1C60D8A8C9B854D0F11440006C203A85DCEB221B1066666FE3EA25083329
14AA399D2F81DB0653B503D4FAECFE70883AAAA2B3345C999517D89696069E61
D192EBD1D92DDA82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 97 /a put
dup 108 /l put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /.notdef 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp 
/T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i /.notdef /k /l /.notdef /n /o 2{/.notdef}rp 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
120.913 107.213 mo
(reversal)
[1.54122 2.05494 2.3142 2.05495 1.54121 1.80042 2.05493 0 ]xsh
119.862 112.503 mo
(work=26)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.31421 0 ]xsh
119.541 117.792 mo
(I/O: 2->2)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.31421 1.54121 2.6104 0 ]xsh
124.931 88.3019 mo
125.593 90.947 125.923 94.5839 126.254 97.89 cv
@
125.262 96.8979 mo
126.584 100.204 li
126.915 96.8979 li
cp
@
125.262 96.8979 mo
126.584 100.204 li
126.915 96.8979 li
f
127.246 140.537 mo
127.246 137.251 119.105 134.586 109.063 134.586 cv
99.0204 134.586 90.8796 137.251 90.8796 140.537 cv
90.8796 143.824 99.0204 146.488 109.063 146.488 cv
119.105 146.488 127.246 143.824 127.246 140.537 cv
@
127.246 140.537 mo
127.246 137.251 119.105 134.586 109.063 134.586 cv
99.0204 134.586 90.8796 137.251 90.8796 140.537 cv
90.8796 143.824 99.0204 146.488 109.063 146.488 cv
119.105 146.488 127.246 143.824 127.246 140.537 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
94.3444 141.595 mo
(roundrobin\(2,2\))
[1.54122 2.3142 2.3142 2.3142 2.31419 1.54122 2.3142 2.3142 1.2867 2.31419 1.54123 2.31419 
1.1571 2.3142 0 ]xsh
123.278 169.63 mo
123.278 163.422 116.914 158.39 109.063 158.39 cv
101.211 158.39 94.8468 163.422 94.8468 169.63 cv
94.8468 175.838 101.211 180.87 109.063 180.87 cv
116.914 180.87 123.278 175.838 123.278 169.63 cv
@
123.278 169.63 mo
123.278 163.422 116.914 158.39 109.063 158.39 cv
101.211 158.39 94.8468 163.422 94.8468 169.63 cv
94.8468 175.838 101.211 180.87 109.063 180.87 cv
116.914 180.87 123.278 175.838 123.278 169.63 cv
.761 .976 1 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/m <1C60D8A8C9B6FF86DEBE529995F26ADC252ABAF4F8ABCE39F6B951A24C86
82F3B72A552C5D46A333AAEC49746F27474921C947B29E9EEE21EF479E8AC4CB
A64B9B4BF4B54D7069EE8C71930A689A0AC30AA5DB406CB2F2DF67D1DFA36762
A8298043AAD8738E3C2E6D8E87DCF89210EA6A7696675667850CACB8BD85BF1A
9C23A6EB480778B459116760FD79DE8BA673C0A52BBAEAA003DFFA86FA6EC61F
B9955126552099FD6C946BD155266FCC648BAFF24A5063CAAF26> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 109 /m put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /.notdef 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O 4{/.notdef}rp 
/T 12{/.notdef}rp /a /b /c /d /e 3{/.notdef}rp 
/i /.notdef /k /l /m /n /o 2{/.notdef}rp 
/r /s /t /u /v /w /.notdef /y 
134{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
100.708 165.398 mo
(decimate)
[2.3142 2.05494 2.05494 1.2867 3.60089 2.05494 1.2867 0 ]xsh
100.687 170.687 mo
(work=60)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.3142 0 ]xsh
100.366 175.977 mo
(I/O: 4->4)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.3142 1.54122 2.6104 0 ]xsh
109.063 146.488 mo
109.063 148.802 109.063 152.108 109.063 155.084 cv
@
108.401 155.084 mo
109.063 158.39 li
110.054 155.084 li
cp
@
108.401 155.084 mo
109.063 158.39 li
110.054 155.084 li
f
99.4752 122.024 mo
101.128 125.33 103.112 128.966 104.765 131.942 cv
@
103.773 131.942 mo
106.087 134.586 li
105.426 131.28 li
cp
@
103.773 131.942 mo
106.087 134.586 li
105.426 131.28 li
f
121.625 121.362 mo
119.311 124.999 116.666 128.966 114.683 132.272 cv
@
114.352 131.28 mo
113.03 134.586 li
115.675 132.272 li
cp
@
114.352 131.28 mo
113.03 134.586 li
115.675 132.272 li
f
127.246 198.723 mo
127.246 195.436 119.105 192.772 109.063 192.772 cv
99.0204 192.772 90.8796 195.436 90.8796 198.723 cv
90.8796 202.009 99.0204 204.674 109.063 204.674 cv
119.105 204.674 127.246 202.009 127.246 198.723 cv
@
127.246 198.723 mo
127.246 195.436 119.105 192.772 109.063 192.772 cv
99.0204 192.772 90.8796 195.436 90.8796 198.723 cv
90.8796 202.009 99.0204 204.674 109.063 204.674 cv
119.105 204.674 127.246 202.009 127.246 198.723 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
94.3444 199.781 mo
(roundrobin\(2,2\))
[1.54122 2.3142 2.3142 2.3142 2.31419 1.54122 2.3142 2.3142 1.2867 2.31419 1.54123 2.31419 
1.1571 2.3142 0 ]xsh
109.063 180.87 mo
109.063 183.846 109.063 186.821 109.063 189.797 cv
@
108.401 189.466 mo
109.063 192.772 li
110.054 189.466 li
cp
@
108.401 189.466 mo
109.063 192.772 li
110.054 189.466 li
f
95.508 227.816 mo
95.508 221.608 86.9231 216.575 76.3332 216.575 cv
65.7433 216.575 57.1584 221.608 57.1584 227.816 cv
57.1584 234.024 65.7433 239.056 76.3332 239.056 cv
86.9231 239.056 95.508 234.024 95.508 227.816 cv
@
95.508 227.816 mo
95.508 221.608 86.9231 216.575 76.3332 216.575 cv
65.7433 216.575 57.1584 221.608 57.1584 227.816 cv
57.1584 234.024 65.7433 239.056 76.3332 239.056 cv
86.9231 239.056 95.508 234.024 95.508 227.816 cv
.992 .863 .565 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B7EF322B10A2A8DE6EF0A6CE60E86B1DF5C68015667A2338DB
07BCF91C9D8DCCB5967A656E7EB6651B3E305A306DA1BB8C1BAEECFC60DC00D8
8AEC56E3DF7455D57CB9BB0CC9A32704D4F0F1C39C5B2EDC70F42754CACE7253
FF5FDAE4B675FFF987E22613E24B8956EFA9C2C5B9AC406D966F459601B2046A
C9E54A3BB37C45EDEB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /.notdef 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 
3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /w /.notdef 
/y 134{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
62.5753 223.584 mo
(TwoPointDCT)
[2.82792 3.34164 2.3142 2.57339 2.3142 1.2867 2.31419 1.2867 3.34164 3.0871 0 ]xsh
67.9581 228.874 mo
(work=80)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.3142 0 ]xsh
67.6365 234.163 mo
(I/O: 2->2)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.3142 1.54122 2.6104 0 ]xsh
102.12 204.343 mo
100.136 205.996 98.1528 207.318 96.4998 208.641 cv
94.1856 210.955 91.2102 213.93 88.2348 216.575 cv
@
88.2348 215.253 mo
86.5818 218.228 li
89.5572 216.575 li
cp
@
88.2348 215.253 mo
86.5818 218.228 li
89.5572 216.575 li
f
139.808 227.816 mo
139.808 221.608 131.224 216.575 120.634 216.575 cv
110.044 216.575 101.459 221.608 101.459 227.816 cv
101.459 234.024 110.044 239.056 120.634 239.056 cv
131.224 239.056 139.808 234.024 139.808 227.816 cv
@
139.808 227.816 mo
139.808 221.608 131.224 216.575 120.634 216.575 cv
110.044 216.575 101.459 221.608 101.459 227.816 cv
101.459 234.024 110.044 239.056 120.634 239.056 cv
131.224 239.056 139.808 234.024 139.808 227.816 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
106.876 223.584 mo
(TwoPointDCT)
[2.82792 3.34163 2.3142 2.57339 2.31419 1.2867 2.3142 1.2867 3.34163 3.08711 0 ]xsh
112.259 228.874 mo
(work=80)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.3142 0 ]xsh
111.937 234.163 mo
(I/O: 2->2)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.3142 1.54122 2.6104 0 ]xsh
111.377 204.674 mo
112.699 207.318 113.691 210.624 115.013 213.6 cv
@
114.352 214.261 mo
116.336 216.906 li
116.005 213.6 li
cp
@
114.352 214.261 mo
116.336 216.906 li
116.005 213.6 li
f
138.817 291.291 mo
138.817 288.004 130.676 285.34 120.634 285.34 cv
110.591 285.34 102.451 288.004 102.451 291.291 cv
102.451 294.577 110.591 297.242 120.634 297.242 cv
130.676 297.242 138.817 294.577 138.817 291.291 cv
@
138.817 291.291 mo
138.817 288.004 130.676 285.34 120.634 285.34 cv
110.591 285.34 102.451 288.004 102.451 291.291 cv
102.451 294.577 110.591 297.242 120.634 297.242 cv
130.676 297.242 138.817 294.577 138.817 291.291 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
105.915 292.349 mo
(roundrobin\(1,1\))
[1.54122 2.3142 2.3142 2.3142 2.31419 1.54122 2.3142 2.3142 1.2867 2.31419 1.54123 2.31419 
1.1571 2.31419 0 ]xsh
131.874 295.919 mo
138.155 298.564 146.09 301.539 151.379 302.531 cv
171.215 306.168 203.614 310.135 225.434 312.78 cv
@
225.103 313.441 mo
228.409 313.11 li
225.103 311.788 li
cp
@
225.103 313.441 mo
228.409 313.11 li
225.103 311.788 li
f
79.9698 239.056 mo
83.937 250.296 90.2184 267.157 96.4998 276.083 cv
98.4834 279.389 103.112 282.365 107.079 284.679 cv
@
106.748 285.34 mo
110.054 286.332 li
107.41 284.018 li
cp
@
106.748 285.34 mo
110.054 286.332 li
107.41 284.018 li
f
134.849 262.198 mo
134.849 255.99 128.485 250.958 120.634 250.958 cv
112.782 250.958 106.418 255.99 106.418 262.198 cv
106.418 268.406 112.782 273.438 120.634 273.438 cv
128.485 273.438 134.849 268.406 134.849 262.198 cv
@
134.849 262.198 mo
134.849 255.99 128.485 250.958 120.634 250.958 cv
112.782 250.958 106.418 255.99 106.418 262.198 cv
106.418 268.406 112.782 273.438 120.634 273.438 cv
128.485 273.438 134.849 268.406 134.849 262.198 cv
.455 .686 .812 rgb
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LTFDQW+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B7A73DD670D8CCCBFBC4E258D7CAA3ED17D069C025C1A2420A
81D4B3EAD7110946DAC3BA40217DDD18B672D1C19269266B39D87F9C1DDA90BD
8FC71EBFE3B2169703196A9FC02F9EA267A90B94DB1FAA5C105A1B22ABB76205
ADA50D456170C13F6F28FC77F3978776E97B76A3DEF1976915B787070DC57673
F3C0FA2B4E9DEFEF7147D4269144499ACAFBAFD930E1A038534DF3D883A96117
05279F3EC76B84BD5055C0FF3A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LTFDQW+TimesNewRomanPSMT /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
reset_gvm
/LTFDQW+TimesNewRomanPSMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/.notdef /slash /zero /one /two /.notdef /four /.notdef 
/six /.notdef /eight /.notdef /colon 2{/.notdef}rp /equal /greater 
4{/.notdef}rp /C /D 4{/.notdef}rp /I 5{/.notdef}rp /O /P 
3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e 
3{/.notdef}rp /i /.notdef /k /l /m /n /o 
2{/.notdef}rp /r /s /t /u /v /w /x 
/y 134{/.notdef}rp]
LTFDQW+TimesNewRomanPSMT nf
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
114.075 257.966 mo
(outmix)
[2.3142 2.3142 1.28669 3.6009 1.28669 0 ]xsh
112.258 263.256 mo
(work=21)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.3142 0 ]xsh
111.937 268.545 mo
(I/O: 2->2)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.3142 1.54122 2.6104 0 ]xsh
120.634 239.056 mo
120.634 241.701 120.634 244.676 120.634 247.652 cv
@
119.972 247.652 mo
120.634 250.958 li
121.625 247.652 li
cp
@
119.972 247.652 mo
120.634 250.958 li
121.625 247.652 li
f
120.634 273.438 mo
120.634 276.414 120.634 279.389 120.634 282.365 cv
@
119.972 282.034 mo
120.634 285.34 li
121.625 282.034 li
cp
@
119.972 282.034 mo
120.634 285.34 li
121.625 282.034 li
f
207.251 111.444 mo
207.251 105.237 200.886 100.204 193.035 100.204 cv
185.184 100.204 178.819 105.237 178.819 111.444 cv
178.819 117.652 185.184 122.685 193.035 122.685 cv
200.886 122.685 207.251 117.652 207.251 111.444 cv
@
207.251 111.444 mo
207.251 105.237 200.886 100.204 193.035 100.204 cv
185.184 100.204 178.819 105.237 178.819 111.444 cv
178.819 117.652 185.184 122.685 193.035 122.685 cv
200.886 122.685 207.251 117.652 207.251 111.444 cv
.271 .467 .702 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
185.836 107.213 mo
(Identity)
[1.54123 2.31419 2.05495 2.31419 1.2867 1.2867 1.28668 0 ]xsh
184.66 112.503 mo
(work=12)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
184.339 117.792 mo
(I/O: 1->1)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
217.499 87.972 mo
213.532 91.939 208.573 96.8979 203.945 101.196 cv
@
203.945 99.873 mo
202.292 102.849 li
205.267 101.196 li
cp
@
203.945 99.873 mo
202.292 102.849 li
205.267 101.196 li
f
241.633 111.444 mo
241.633 105.237 235.269 100.204 227.417 100.204 cv
219.566 100.204 213.202 105.237 213.202 111.444 cv
213.202 117.652 219.566 122.685 227.417 122.685 cv
235.269 122.685 241.633 117.652 241.633 111.444 cv
@
241.633 111.444 mo
241.633 105.237 235.269 100.204 227.417 100.204 cv
219.566 100.204 213.202 105.237 213.202 111.444 cv
213.202 117.652 219.566 122.685 227.417 122.685 cv
235.269 122.685 241.633 117.652 241.633 111.444 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
220.093 107.213 mo
(reversal)
[1.54123 2.05493 2.31421 2.05493 1.54123 1.8004 2.05495 0 ]xsh
219.042 112.503 mo
(work=26)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
218.721 117.792 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
224.111 88.3019 mo
224.773 90.947 225.103 94.5839 225.434 97.89 cv
@
224.442 96.8979 mo
225.764 100.204 li
226.095 96.8979 li
cp
@
224.442 96.8979 mo
225.764 100.204 li
226.095 96.8979 li
f
226.426 140.537 mo
226.426 137.251 218.285 134.586 208.243 134.586 cv
198.2 134.586 190.06 137.251 190.06 140.537 cv
190.06 143.824 198.2 146.488 208.243 146.488 cv
218.285 146.488 226.426 143.824 226.426 140.537 cv
@
226.426 140.537 mo
226.426 137.251 218.285 134.586 208.243 134.586 cv
198.2 134.586 190.06 137.251 190.06 140.537 cv
190.06 143.824 198.2 146.488 208.243 146.488 cv
218.285 146.488 226.426 143.824 226.426 140.537 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
193.524 141.595 mo
(roundrobin\(2,2\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.1571 2.31419 0 ]xsh
222.458 169.63 mo
222.458 163.422 216.094 158.39 208.243 158.39 cv
200.391 158.39 194.027 163.422 194.027 169.63 cv
194.027 175.838 200.391 180.87 208.243 180.87 cv
216.094 180.87 222.458 175.838 222.458 169.63 cv
@
222.458 169.63 mo
222.458 163.422 216.094 158.39 208.243 158.39 cv
200.391 158.39 194.027 163.422 194.027 169.63 cv
194.027 175.838 200.391 180.87 208.243 180.87 cv
216.094 180.87 222.458 175.838 222.458 169.63 cv
.761 .976 1 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
199.888 165.398 mo
(decimate)
[2.31419 2.05495 2.05493 1.2867 3.60091 2.05493 1.2867 0 ]xsh
199.867 170.687 mo
(work=60)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
199.546 175.977 mo
(I/O: 4->4)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
208.243 146.488 mo
208.243 148.802 208.243 152.108 208.243 155.084 cv
@
207.581 155.084 mo
208.243 158.39 li
209.234 155.084 li
cp
@
207.581 155.084 mo
208.243 158.39 li
209.234 155.084 li
f
198.655 122.024 mo
200.308 125.33 202.292 128.966 203.945 131.942 cv
@
202.953 131.942 mo
205.267 134.586 li
204.606 131.28 li
cp
@
202.953 131.942 mo
205.267 134.586 li
204.606 131.28 li
f
220.805 121.362 mo
218.491 124.999 215.846 128.966 213.863 132.272 cv
@
213.532 131.28 mo
212.21 134.586 li
214.855 132.272 li
cp
@
213.532 131.28 mo
212.21 134.586 li
214.855 132.272 li
f
226.426 198.723 mo
226.426 195.436 218.285 192.772 208.243 192.772 cv
198.2 192.772 190.06 195.436 190.06 198.723 cv
190.06 202.009 198.2 204.674 208.243 204.674 cv
218.285 204.674 226.426 202.009 226.426 198.723 cv
@
226.426 198.723 mo
226.426 195.436 218.285 192.772 208.243 192.772 cv
198.2 192.772 190.06 195.436 190.06 198.723 cv
190.06 202.009 198.2 204.674 208.243 204.674 cv
218.285 204.674 226.426 202.009 226.426 198.723 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
193.524 199.781 mo
(roundrobin\(2,2\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.1571 2.31419 0 ]xsh
208.243 180.87 mo
208.243 183.846 208.243 186.821 208.243 189.797 cv
@
207.581 189.466 mo
208.243 192.772 li
209.234 189.466 li
cp
@
207.581 189.466 mo
208.243 192.772 li
209.234 189.466 li
f
194.688 227.816 mo
194.688 221.608 186.103 216.575 175.513 216.575 cv
164.923 216.575 156.338 221.608 156.338 227.816 cv
156.338 234.024 164.923 239.056 175.513 239.056 cv
186.103 239.056 194.688 234.024 194.688 227.816 cv
@
194.688 227.816 mo
194.688 221.608 186.103 216.575 175.513 216.575 cv
164.923 216.575 156.338 221.608 156.338 227.816 cv
156.338 234.024 164.923 239.056 175.513 239.056 cv
186.103 239.056 194.688 234.024 194.688 227.816 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
161.755 223.584 mo
(TwoPointDCT)
[2.82791 3.34164 2.31419 2.57339 2.31419 1.2867 2.31419 1.2867 3.34164 3.0871 0 ]xsh
167.138 228.874 mo
(work=80)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
166.816 234.163 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
201.3 204.343 mo
199.316 205.996 197.333 207.318 195.68 208.641 cv
193.366 210.955 190.39 213.93 187.415 216.575 cv
@
187.415 215.253 mo
185.762 218.228 li
188.737 216.575 li
cp
@
187.415 215.253 mo
185.762 218.228 li
188.737 216.575 li
f
238.988 227.816 mo
238.988 221.608 230.404 216.575 219.814 216.575 cv
209.224 216.575 200.639 221.608 200.639 227.816 cv
200.639 234.024 209.224 239.056 219.814 239.056 cv
230.404 239.056 238.988 234.024 238.988 227.816 cv
@
238.988 227.816 mo
238.988 221.608 230.404 216.575 219.814 216.575 cv
209.224 216.575 200.639 221.608 200.639 227.816 cv
200.639 234.024 209.224 239.056 219.814 239.056 cv
230.404 239.056 238.988 234.024 238.988 227.816 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
206.056 223.584 mo
(TwoPointDCT)
[2.82791 3.34164 2.31419 2.57339 2.31419 1.2867 2.31419 1.2867 3.34164 3.0871 0 ]xsh
211.439 228.874 mo
(work=80)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
211.117 234.163 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
210.557 204.674 mo
211.879 207.318 212.871 210.624 214.193 213.6 cv
@
213.532 214.261 mo
215.516 216.906 li
215.185 213.6 li
cp
@
213.532 214.261 mo
215.516 216.906 li
215.185 213.6 li
f
237.997 291.291 mo
237.997 288.004 229.856 285.34 219.814 285.34 cv
209.771 285.34 201.631 288.004 201.631 291.291 cv
201.631 294.577 209.771 297.242 219.814 297.242 cv
229.856 297.242 237.997 294.577 237.997 291.291 cv
@
237.997 291.291 mo
237.997 288.004 229.856 285.34 219.814 285.34 cv
209.771 285.34 201.631 288.004 201.631 291.291 cv
201.631 294.577 209.771 297.242 219.814 297.242 cv
229.856 297.242 237.997 294.577 237.997 291.291 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
205.095 292.349 mo
(roundrobin\(1,1\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.15709 2.31421 0 ]xsh
226.756 296.911 mo
230.393 299.886 235.021 303.854 239.319 307.49 cv
@
238.658 307.821 mo
241.633 309.474 li
239.65 306.829 li
cp
@
238.658 307.821 mo
241.633 309.474 li
239.65 306.829 li
f
179.15 239.056 mo
183.117 250.296 189.398 267.157 195.68 276.083 cv
197.663 279.389 202.292 282.365 206.259 284.679 cv
@
205.928 285.34 mo
209.234 286.332 li
206.59 284.018 li
cp
@
205.928 285.34 mo
209.234 286.332 li
206.59 284.018 li
f
234.029 262.198 mo
234.029 255.99 227.665 250.958 219.814 250.958 cv
211.962 250.958 205.598 255.99 205.598 262.198 cv
205.598 268.406 211.962 273.438 219.814 273.438 cv
227.665 273.438 234.029 268.406 234.029 262.198 cv
@
234.029 262.198 mo
234.029 255.99 227.665 250.958 219.814 250.958 cv
211.962 250.958 205.598 255.99 205.598 262.198 cv
205.598 268.406 211.962 273.438 219.814 273.438 cv
227.665 273.438 234.029 268.406 234.029 262.198 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
213.255 257.966 mo
(outmix)
[2.31419 2.31421 1.2867 3.60089 1.2867 0 ]xsh
211.438 263.256 mo
(work=21)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
211.117 268.545 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
219.814 239.056 mo
219.814 241.701 219.814 244.676 219.814 247.652 cv
@
219.152 247.652 mo
219.814 250.958 li
220.805 247.652 li
cp
@
219.152 247.652 mo
219.814 250.958 li
220.805 247.652 li
f
219.814 273.438 mo
219.814 276.414 219.814 279.389 219.814 282.365 cv
@
219.152 282.034 mo
219.814 285.34 li
220.805 282.034 li
cp
@
219.152 282.034 mo
219.814 285.34 li
220.805 282.034 li
f
283.95 111.444 mo
283.95 105.237 277.585 100.204 269.734 100.204 cv
261.883 100.204 255.518 105.237 255.518 111.444 cv
255.518 117.652 261.883 122.685 269.734 122.685 cv
277.585 122.685 283.95 117.652 283.95 111.444 cv
@
283.95 111.444 mo
283.95 105.237 277.585 100.204 269.734 100.204 cv
261.883 100.204 255.518 105.237 255.518 111.444 cv
255.518 117.652 261.883 122.685 269.734 122.685 cv
277.585 122.685 283.95 117.652 283.95 111.444 cv
.271 .467 .702 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
262.535 107.213 mo
(Identity)
[1.54123 2.31418 2.05496 2.31418 1.28671 1.28668 1.28671 0 ]xsh
261.359 112.503 mo
(work=12)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
261.038 117.792 mo
(I/O: 1->1)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
273.04 88.3019 mo
272.379 90.947 272.048 94.5839 271.718 97.89 cv
@
271.057 96.8979 mo
271.387 100.204 li
272.71 96.8979 li
cp
@
271.057 96.8979 mo
271.387 100.204 li
272.71 96.8979 li
f
318.332 111.444 mo
318.332 105.237 311.968 100.204 304.117 100.204 cv
296.265 100.204 289.901 105.237 289.901 111.444 cv
289.901 117.652 296.265 122.685 304.117 122.685 cv
311.968 122.685 318.332 117.652 318.332 111.444 cv
@
318.332 111.444 mo
318.332 105.237 311.968 100.204 304.117 100.204 cv
296.265 100.204 289.901 105.237 289.901 111.444 cv
289.901 117.652 296.265 122.685 304.117 122.685 cv
311.968 122.685 318.332 117.652 318.332 111.444 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
296.792 107.213 mo
(reversal)
[1.54123 2.05493 2.31421 2.05493 1.54123 1.80042 2.05493 0 ]xsh
295.741 112.503 mo
(work=26)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
295.42 117.792 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
279.652 87.972 mo
283.289 91.608 288.248 96.237 292.546 100.535 cv
@
291.884 101.196 mo
294.86 102.849 li
293.207 99.873 li
cp
@
291.884 101.196 mo
294.86 102.849 li
293.207 99.873 li
f
305.439 140.537 mo
305.439 137.251 297.298 134.586 287.256 134.586 cv
277.214 134.586 269.073 137.251 269.073 140.537 cv
269.073 143.824 277.214 146.488 287.256 146.488 cv
297.298 146.488 305.439 143.824 305.439 140.537 cv
@
305.439 140.537 mo
305.439 137.251 297.298 134.586 287.256 134.586 cv
277.214 134.586 269.073 137.251 269.073 140.537 cv
269.073 143.824 277.214 146.488 287.256 146.488 cv
297.298 146.488 305.439 143.824 305.439 140.537 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
272.538 141.595 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
301.472 169.63 mo
301.472 163.422 295.107 158.39 287.256 158.39 cv
279.405 158.39 273.04 163.422 273.04 169.63 cv
273.04 175.838 279.405 180.87 287.256 180.87 cv
295.107 180.87 301.472 175.838 301.472 169.63 cv
@
301.472 169.63 mo
301.472 163.422 295.107 158.39 287.256 158.39 cv
279.405 158.39 273.04 163.422 273.04 169.63 cv
273.04 175.838 279.405 180.87 287.256 180.87 cv
295.107 180.87 301.472 175.838 301.472 169.63 cv
.761 .976 1 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
278.902 165.398 mo
(decimate)
[2.31421 2.05493 2.05493 1.28671 3.60089 2.05493 1.28668 0 ]xsh
278.881 170.687 mo
(work=60)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
278.56 175.977 mo
(I/O: 4->4)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
287.256 146.488 mo
287.256 148.802 287.256 152.108 287.256 155.084 cv
@
286.595 155.084 mo
287.256 158.39 li
288.248 155.084 li
cp
@
286.595 155.084 mo
287.256 158.39 li
288.248 155.084 li
f
276.016 121.693 mo
277.999 124.999 280.313 128.636 282.297 131.942 cv
@
281.305 131.942 mo
283.619 134.586 li
282.958 131.28 li
cp
@
281.305 131.942 mo
283.619 134.586 li
282.958 131.28 li
f
298.166 121.693 mo
296.182 124.999 294.199 128.636 292.215 131.942 cv
@
291.554 131.28 mo
290.562 134.586 li
292.876 132.272 li
cp
@
291.554 131.28 mo
290.562 134.586 li
292.876 132.272 li
f
305.439 198.723 mo
305.439 195.436 297.298 192.772 287.256 192.772 cv
277.214 192.772 269.073 195.436 269.073 198.723 cv
269.073 202.009 277.214 204.674 287.256 204.674 cv
297.298 204.674 305.439 202.009 305.439 198.723 cv
@
305.439 198.723 mo
305.439 195.436 297.298 192.772 287.256 192.772 cv
277.214 192.772 269.073 195.436 269.073 198.723 cv
269.073 202.009 277.214 204.674 287.256 204.674 cv
297.298 204.674 305.439 202.009 305.439 198.723 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
272.538 199.781 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
287.256 180.87 mo
287.256 183.846 287.256 186.821 287.256 189.797 cv
@
286.595 189.466 mo
287.256 192.772 li
288.248 189.466 li
cp
@
286.595 189.466 mo
287.256 192.772 li
288.248 189.466 li
f
293.868 227.816 mo
293.868 221.608 285.283 216.575 274.693 216.575 cv
264.103 216.575 255.518 221.608 255.518 227.816 cv
255.518 234.024 264.103 239.056 274.693 239.056 cv
285.283 239.056 293.868 234.024 293.868 227.816 cv
@
293.868 227.816 mo
293.868 221.608 285.283 216.575 274.693 216.575 cv
264.103 216.575 255.518 221.608 255.518 227.816 cv
255.518 234.024 264.103 239.056 274.693 239.056 cv
285.283 239.056 293.868 234.024 293.868 227.816 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
260.935 223.584 mo
(TwoPointDCT)
[2.82791 3.34164 2.31421 2.57336 2.31421 1.28668 2.31421 1.28671 3.34161 3.08713 0 ]xsh
266.318 228.874 mo
(work=80)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
265.996 234.163 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
284.611 204.674 mo
283.289 207.649 281.966 211.286 280.313 214.922 cv
@
279.983 213.6 mo
279.322 216.906 li
281.636 214.261 li
cp
@
279.983 213.6 mo
279.322 216.906 li
281.636 214.261 li
f
338.168 227.816 mo
338.168 221.608 329.583 216.575 318.994 216.575 cv
308.404 216.575 299.819 221.608 299.819 227.816 cv
299.819 234.024 308.404 239.056 318.994 239.056 cv
329.583 239.056 338.168 234.024 338.168 227.816 cv
@
338.168 227.816 mo
338.168 221.608 329.583 216.575 318.994 216.575 cv
308.404 216.575 299.819 221.608 299.819 227.816 cv
299.819 234.024 308.404 239.056 318.994 239.056 cv
329.583 239.056 338.168 234.024 338.168 227.816 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
305.236 223.584 mo
(TwoPointDCT)
[2.82791 3.34164 2.31421 2.57336 2.31421 1.28671 2.31418 1.28671 3.34161 3.08713 0 ]xsh
310.619 228.874 mo
(work=80)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
310.297 234.163 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
295.19 204.012 mo
297.174 205.665 299.488 207.318 300.811 208.641 cv
302.794 210.294 305.108 212.939 307.423 215.253 cv
@
307.092 215.914 mo
309.737 217.898 li
308.084 214.922 li
cp
@
307.092 215.914 mo
309.737 217.898 li
308.084 214.922 li
f
292.876 291.291 mo
292.876 288.004 284.735 285.34 274.693 285.34 cv
264.651 285.34 256.51 288.004 256.51 291.291 cv
256.51 294.577 264.651 297.242 274.693 297.242 cv
284.735 297.242 292.876 294.577 292.876 291.291 cv
@
292.876 291.291 mo
292.876 288.004 284.735 285.34 274.693 285.34 cv
264.651 285.34 256.51 288.004 256.51 291.291 cv
256.51 294.577 264.651 297.242 274.693 297.242 cv
284.735 297.242 292.876 294.577 292.876 291.291 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
259.975 292.349 mo
(roundrobin\(1,1\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
268.412 296.911 mo
265.106 299.886 260.808 303.854 257.171 307.16 cv
@
256.51 306.498 mo
254.857 309.474 li
257.833 307.821 li
cp
@
256.51 306.498 mo
254.857 309.474 li
257.833 307.821 li
f
274.693 239.056 mo
274.693 251.288 274.693 270.463 274.693 281.703 cv
@
274.032 282.034 mo
274.693 285.34 li
275.685 282.034 li
cp
@
274.032 282.034 mo
274.693 285.34 li
275.685 282.034 li
f
330.565 262.198 mo
330.565 255.99 324.2 250.958 316.349 250.958 cv
308.498 250.958 302.133 255.99 302.133 262.198 cv
302.133 268.406 308.498 273.438 316.349 273.438 cv
324.2 273.438 330.565 268.406 330.565 262.198 cv
@
330.565 262.198 mo
330.565 255.99 324.2 250.958 316.349 250.958 cv
308.498 250.958 302.133 255.99 302.133 262.198 cv
302.133 268.406 308.498 273.438 316.349 273.438 cv
324.2 273.438 330.565 268.406 330.565 262.198 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
309.79 257.966 mo
(outmix)
[2.31421 2.31418 1.28671 3.60089 1.28668 0 ]xsh
307.973 263.256 mo
(work=21)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
307.652 268.545 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
318.002 239.056 mo
317.671 242.031 317.341 245.337 317.341 248.643 cv
@
316.679 247.652 mo
317.01 250.958 li
318.332 247.652 li
cp
@
316.679 247.652 mo
317.01 250.958 li
318.332 247.652 li
f
308.414 271.455 mo
306.431 273.438 304.778 275.091 303.125 276.083 cv
299.488 278.728 293.537 282.034 288.248 284.679 cv
@
287.917 284.018 mo
285.272 286.332 li
288.578 285.34 li
cp
@
287.917 284.018 mo
285.272 286.332 li
288.578 285.34 li
f
383.13 111.444 mo
383.13 105.237 376.765 100.204 368.914 100.204 cv
361.063 100.204 354.698 105.237 354.698 111.444 cv
354.698 117.652 361.063 122.685 368.914 122.685 cv
376.765 122.685 383.13 117.652 383.13 111.444 cv
@
383.13 111.444 mo
383.13 105.237 376.765 100.204 368.914 100.204 cv
361.063 100.204 354.698 105.237 354.698 111.444 cv
354.698 117.652 361.063 122.685 368.914 122.685 cv
376.765 122.685 383.13 117.652 383.13 111.444 cv
.271 .467 .702 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
361.715 107.213 mo
(Identity)
[1.54123 2.31418 2.05496 2.31418 1.28671 1.28668 1.28671 0 ]xsh
360.539 112.503 mo
(work=12)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
360.218 117.792 mo
(I/O: 1->1)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
372.22 88.3019 mo
371.559 90.947 371.228 94.5839 370.898 97.89 cv
@
370.237 96.8979 mo
370.567 100.204 li
371.89 96.8979 li
cp
@
370.237 96.8979 mo
370.567 100.204 li
371.89 96.8979 li
f
417.512 111.444 mo
417.512 105.237 411.148 100.204 403.297 100.204 cv
395.445 100.204 389.081 105.237 389.081 111.444 cv
389.081 117.652 395.445 122.685 403.297 122.685 cv
411.148 122.685 417.512 117.652 417.512 111.444 cv
@
417.512 111.444 mo
417.512 105.237 411.148 100.204 403.297 100.204 cv
395.445 100.204 389.081 105.237 389.081 111.444 cv
389.081 117.652 395.445 122.685 403.297 122.685 cv
411.148 122.685 417.512 117.652 417.512 111.444 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
395.972 107.213 mo
(reversal)
[1.54123 2.05493 2.31421 2.05493 1.54123 1.80042 2.05493 0 ]xsh
394.921 112.503 mo
(work=26)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
394.6 117.792 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
378.832 87.972 mo
382.469 91.608 387.428 96.237 391.726 100.535 cv
@
391.064 101.196 mo
394.04 102.849 li
392.387 99.873 li
cp
@
391.064 101.196 mo
394.04 102.849 li
392.387 99.873 li
f
404.619 140.537 mo
404.619 137.251 396.478 134.586 386.436 134.586 cv
376.394 134.586 368.253 137.251 368.253 140.537 cv
368.253 143.824 376.394 146.488 386.436 146.488 cv
396.478 146.488 404.619 143.824 404.619 140.537 cv
@
404.619 140.537 mo
404.619 137.251 396.478 134.586 386.436 134.586 cv
376.394 134.586 368.253 137.251 368.253 140.537 cv
368.253 143.824 376.394 146.488 386.436 146.488 cv
396.478 146.488 404.619 143.824 404.619 140.537 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
371.718 141.595 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
400.652 169.63 mo
400.652 163.422 394.287 158.39 386.436 158.39 cv
378.585 158.39 372.22 163.422 372.22 169.63 cv
372.22 175.838 378.585 180.87 386.436 180.87 cv
394.287 180.87 400.652 175.838 400.652 169.63 cv
@
400.652 169.63 mo
400.652 163.422 394.287 158.39 386.436 158.39 cv
378.585 158.39 372.22 163.422 372.22 169.63 cv
372.22 175.838 378.585 180.87 386.436 180.87 cv
394.287 180.87 400.652 175.838 400.652 169.63 cv
.761 .976 1 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
378.082 165.398 mo
(decimate)
[2.31421 2.05493 2.05493 1.28671 3.60089 2.05493 1.28668 0 ]xsh
378.061 170.687 mo
(work=60)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
377.74 175.977 mo
(I/O: 4->4)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
386.436 146.488 mo
386.436 148.802 386.436 152.108 386.436 155.084 cv
@
385.775 155.084 mo
386.436 158.39 li
387.428 155.084 li
cp
@
385.775 155.084 mo
386.436 158.39 li
387.428 155.084 li
f
375.196 121.693 mo
377.179 124.999 379.493 128.636 381.477 131.942 cv
@
380.485 131.942 mo
382.799 134.586 li
382.138 131.28 li
cp
@
380.485 131.942 mo
382.799 134.586 li
382.138 131.28 li
f
397.346 121.693 mo
395.362 124.999 393.379 128.636 391.395 131.942 cv
@
390.734 131.28 mo
389.742 134.586 li
392.056 132.272 li
cp
@
390.734 131.28 mo
389.742 134.586 li
392.056 132.272 li
f
404.619 198.723 mo
404.619 195.436 396.478 192.772 386.436 192.772 cv
376.394 192.772 368.253 195.436 368.253 198.723 cv
368.253 202.009 376.394 204.674 386.436 204.674 cv
396.478 204.674 404.619 202.009 404.619 198.723 cv
@
404.619 198.723 mo
404.619 195.436 396.478 192.772 386.436 192.772 cv
376.394 192.772 368.253 195.436 368.253 198.723 cv
368.253 202.009 376.394 204.674 386.436 204.674 cv
396.478 204.674 404.619 202.009 404.619 198.723 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
371.718 199.781 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
386.436 180.87 mo
386.436 183.846 386.436 186.821 386.436 189.797 cv
@
385.775 189.466 mo
386.436 192.772 li
387.428 189.466 li
cp
@
385.775 189.466 mo
386.436 192.772 li
387.428 189.466 li
f
393.048 227.816 mo
393.048 221.608 384.463 216.575 373.873 216.575 cv
363.283 216.575 354.698 221.608 354.698 227.816 cv
354.698 234.024 363.283 239.056 373.873 239.056 cv
384.463 239.056 393.048 234.024 393.048 227.816 cv
@
393.048 227.816 mo
393.048 221.608 384.463 216.575 373.873 216.575 cv
363.283 216.575 354.698 221.608 354.698 227.816 cv
354.698 234.024 363.283 239.056 373.873 239.056 cv
384.463 239.056 393.048 234.024 393.048 227.816 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
360.115 223.584 mo
(TwoPointDCT)
[2.82791 3.34164 2.31421 2.57336 2.31421 1.28668 2.31421 1.28671 3.34161 3.08713 0 ]xsh
365.498 228.874 mo
(work=80)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
365.176 234.163 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
383.791 204.674 mo
382.469 207.649 381.146 211.286 379.493 214.922 cv
@
379.163 213.6 mo
378.502 216.906 li
380.816 214.261 li
cp
@
379.163 213.6 mo
378.502 216.906 li
380.816 214.261 li
f
437.348 227.816 mo
437.348 221.608 428.764 216.575 418.174 216.575 cv
407.584 216.575 398.999 221.608 398.999 227.816 cv
398.999 234.024 407.584 239.056 418.174 239.056 cv
428.764 239.056 437.348 234.024 437.348 227.816 cv
@
437.348 227.816 mo
437.348 221.608 428.764 216.575 418.174 216.575 cv
407.584 216.575 398.999 221.608 398.999 227.816 cv
398.999 234.024 407.584 239.056 418.174 239.056 cv
428.764 239.056 437.348 234.024 437.348 227.816 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
404.416 223.584 mo
(TwoPointDCT)
[2.82791 3.34164 2.31421 2.57336 2.31421 1.28671 2.31418 1.28671 3.34161 3.08713 0 ]xsh
409.799 228.874 mo
(work=80)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
409.477 234.163 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
394.37 204.012 mo
396.354 205.665 398.668 207.318 399.991 208.641 cv
401.974 210.294 404.288 212.939 406.603 215.253 cv
@
406.272 215.914 mo
408.917 217.898 li
407.264 214.922 li
cp
@
406.272 215.914 mo
408.917 217.898 li
407.264 214.922 li
f
392.056 291.291 mo
392.056 288.004 383.915 285.34 373.873 285.34 cv
363.831 285.34 355.69 288.004 355.69 291.291 cv
355.69 294.577 363.831 297.242 373.873 297.242 cv
383.915 297.242 392.056 294.577 392.056 291.291 cv
@
392.056 291.291 mo
392.056 288.004 383.915 285.34 373.873 285.34 cv
363.831 285.34 355.69 288.004 355.69 291.291 cv
355.69 294.577 363.831 297.242 373.873 297.242 cv
383.915 297.242 392.056 294.577 392.056 291.291 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
359.155 292.349 mo
(roundrobin\(1,1\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
364.286 296.25 mo
359.327 298.895 353.045 301.87 348.417 302.531 cv
328.25 306.168 294.529 310.466 271.718 312.78 cv
@
272.048 311.788 mo
268.742 313.11 li
272.048 313.441 li
cp
@
272.048 311.788 mo
268.742 313.11 li
272.048 313.441 li
f
373.873 239.056 mo
373.873 251.288 373.873 270.463 373.873 281.703 cv
@
373.212 282.034 mo
373.873 285.34 li
374.865 282.034 li
cp
@
373.212 282.034 mo
373.873 285.34 li
374.865 282.034 li
f
429.745 262.198 mo
429.745 255.99 423.38 250.958 415.529 250.958 cv
407.678 250.958 401.313 255.99 401.313 262.198 cv
401.313 268.406 407.678 273.438 415.529 273.438 cv
423.38 273.438 429.745 268.406 429.745 262.198 cv
@
429.745 262.198 mo
429.745 255.99 423.38 250.958 415.529 250.958 cv
407.678 250.958 401.313 255.99 401.313 262.198 cv
401.313 268.406 407.678 273.438 415.529 273.438 cv
423.38 273.438 429.745 268.406 429.745 262.198 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
408.97 257.966 mo
(outmix)
[2.31421 2.31418 1.28671 3.60089 1.28668 0 ]xsh
407.153 263.256 mo
(work=21)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
406.832 268.545 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
417.182 239.056 mo
416.851 241.701 416.851 244.676 416.521 247.652 cv
@
415.859 247.652 mo
416.19 250.958 li
417.182 247.652 li
cp
@
415.859 247.652 mo
416.19 250.958 li
417.182 247.652 li
f
407.594 271.455 mo
405.611 273.438 403.958 275.091 402.305 276.083 cv
398.668 278.728 392.717 282.034 387.428 284.679 cv
@
387.097 284.018 mo
384.452 286.332 li
387.758 285.34 li
cp
@
387.097 284.018 mo
384.452 286.332 li
387.758 285.34 li
f
142.453 370.635 mo
142.453 367.348 134.312 364.684 124.27 364.684 cv
114.228 364.684 106.087 367.348 106.087 370.635 cv
106.087 373.921 114.228 376.586 124.27 376.586 cv
134.312 376.586 142.453 373.921 142.453 370.635 cv
@
142.453 370.635 mo
142.453 367.348 134.312 364.684 124.27 364.684 cv
114.228 364.684 106.087 367.348 106.087 370.635 cv
106.087 373.921 114.228 376.586 124.27 376.586 cv
134.312 376.586 142.453 373.921 142.453 370.635 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
109.552 371.693 mo
(roundrobin\(2,2\))
[1.54122 2.3142 2.3142 2.3142 2.31419 1.54123 2.31419 2.3142 1.2867 2.3142 1.54121 2.31421 
1.15709 2.31421 0 ]xsh
227.748 341.542 mo
210.887 342.864 188.076 345.509 173.86 348.815 cv
162.95 351.129 147.082 359.064 136.172 364.353 cv
@
136.172 363.362 mo
133.858 365.676 li
137.164 364.684 li
cp
@
136.172 363.362 mo
133.858 365.676 li
137.164 364.684 li
f
241.633 370.635 mo
241.633 367.348 233.492 364.684 223.45 364.684 cv
213.408 364.684 205.267 367.348 205.267 370.635 cv
205.267 373.921 213.408 376.586 223.45 376.586 cv
233.492 376.586 241.633 373.921 241.633 370.635 cv
@
241.633 370.635 mo
241.633 367.348 233.492 364.684 223.45 364.684 cv
213.408 364.684 205.267 367.348 205.267 370.635 cv
205.267 373.921 213.408 376.586 223.45 376.586 cv
233.492 376.586 241.633 373.921 241.633 370.635 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
208.732 371.693 mo
(roundrobin\(2,2\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.15709 2.31421 0 ]xsh
243.617 346.17 mo
239.98 350.799 234.36 357.411 230.062 362.7 cv
@
229.732 362.039 mo
228.079 365.015 li
230.723 363.031 li
cp
@
229.732 362.039 mo
228.079 365.015 li
230.723 363.031 li
f
291.884 370.635 mo
291.884 367.348 283.744 364.684 273.701 364.684 cv
263.659 364.684 255.518 367.348 255.518 370.635 cv
255.518 373.921 263.659 376.586 273.701 376.586 cv
283.744 376.586 291.884 373.921 291.884 370.635 cv
@
291.884 370.635 mo
291.884 367.348 283.744 364.684 273.701 364.684 cv
263.659 364.684 255.518 367.348 255.518 370.635 cv
255.518 373.921 263.659 376.586 273.701 376.586 cv
283.744 376.586 291.884 373.921 291.884 370.635 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
258.983 371.693 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
253.535 346.17 mo
257.171 350.799 262.792 357.411 267.089 362.7 cv
@
266.428 363.031 mo
269.073 365.015 li
267.42 362.039 li
cp
@
266.428 363.031 mo
269.073 365.015 li
267.42 362.039 li
f
391.064 370.635 mo
391.064 367.348 382.924 364.684 372.881 364.684 cv
362.839 364.684 354.698 367.348 354.698 370.635 cv
354.698 373.921 362.839 376.586 372.881 376.586 cv
382.924 376.586 391.064 373.921 391.064 370.635 cv
@
391.064 370.635 mo
391.064 367.348 382.924 364.684 372.881 364.684 cv
362.839 364.684 354.698 367.348 354.698 370.635 cv
354.698 373.921 362.839 376.586 372.881 376.586 cv
382.924 376.586 391.064 373.921 391.064 370.635 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
358.163 371.693 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
269.404 341.542 mo
286.264 342.864 309.406 345.509 323.291 348.815 cv
334.201 351.129 350.07 359.064 360.98 364.353 cv
@
359.988 364.684 mo
363.294 365.676 li
360.98 363.362 li
cp
@
359.988 364.684 mo
363.294 365.676 li
360.98 363.362 li
f
268.742 603.377 mo
268.742 600.091 259.121 597.426 247.253 597.426 cv
235.385 597.426 225.764 600.091 225.764 603.377 cv
225.764 606.664 235.385 609.328 247.253 609.328 cv
259.121 609.328 268.742 606.664 268.742 603.377 cv
@
268.742 603.377 mo
268.742 600.091 259.121 597.426 247.253 597.426 cv
235.385 597.426 225.764 600.091 225.764 603.377 cv
225.764 606.664 235.385 609.328 247.253 609.328 cv
259.121 609.328 268.742 606.664 268.742 603.377 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
229.064 604.435 mo
(roundrobin\(1,1,1,1\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.15709 2.31421 1.1571 2.31418 1.1571 2.31421 0 ]xsh
262.461 632.47 mo
262.461 626.262 255.652 621.23 247.253 621.23 cv
238.854 621.23 232.046 626.262 232.046 632.47 cv
232.046 638.678 238.854 643.71 247.253 643.71 cv
255.652 643.71 262.461 638.678 262.461 632.47 cv
@
262.461 632.47 mo
262.461 626.262 255.652 621.23 247.253 621.23 cv
238.854 621.23 232.046 626.262 232.046 632.47 cv
232.046 638.678 238.854 643.71 247.253 643.71 cv
255.652 643.71 262.461 638.678 262.461 632.47 cv
.843 .18 .157 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
243.396 628.238 mo
(sink)
[1.80042 1.2867 2.31419 0 ]xsh
237.722 633.528 mo
(work=128)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 2.31421 0 ]xsh
237.4 638.817 mo
(I/O: 16->0)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 2.31419 1.54123 2.6104 0 ]xsh
247.253 609.328 mo
247.253 611.642 247.253 614.948 247.253 617.924 cv
@
246.592 617.924 mo
247.253 621.23 li
248.245 617.924 li
cp
@
246.592 617.924 mo
247.253 621.23 li
248.245 617.924 li
f
108.071 399.728 mo
108.071 393.52 101.706 388.487 93.855 388.487 cv
86.0038 388.487 79.6392 393.52 79.6392 399.728 cv
79.6392 405.935 86.0038 410.968 93.855 410.968 cv
101.706 410.968 108.071 405.935 108.071 399.728 cv
@
108.071 399.728 mo
108.071 393.52 101.706 388.487 93.855 388.487 cv
86.0038 388.487 79.6392 393.52 79.6392 399.728 cv
79.6392 405.935 86.0038 410.968 93.855 410.968 cv
101.706 410.968 108.071 405.935 108.071 399.728 cv
.271 .467 .702 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
86.6555 395.496 mo
(Identity)
[1.54122 2.3142 2.05494 2.3142 1.2867 1.28669 1.2867 0 ]xsh
85.4799 400.786 mo
(work=12)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.3142 0 ]xsh
85.1582 406.075 mo
(I/O: 1->1)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.3142 1.54122 2.6104 0 ]xsh
118.319 376.255 mo
114.352 380.222 109.393 385.181 104.765 389.479 cv
@
104.765 388.157 mo
103.112 391.132 li
106.087 389.479 li
cp
@
104.765 388.157 mo
103.112 391.132 li
106.087 389.479 li
f
142.453 399.728 mo
142.453 393.52 136.089 388.487 128.237 388.487 cv
120.386 388.487 114.022 393.52 114.022 399.728 cv
114.022 405.935 120.386 410.968 128.237 410.968 cv
136.089 410.968 142.453 405.935 142.453 399.728 cv
@
142.453 399.728 mo
142.453 393.52 136.089 388.487 128.237 388.487 cv
120.386 388.487 114.022 393.52 114.022 399.728 cv
114.022 405.935 120.386 410.968 128.237 410.968 cv
136.089 410.968 142.453 405.935 142.453 399.728 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
120.913 395.496 mo
(reversal)
[1.54122 2.05494 2.3142 2.05495 1.54121 1.80042 2.05493 0 ]xsh
119.862 400.786 mo
(work=26)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.31421 0 ]xsh
119.541 406.075 mo
(I/O: 2->2)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.31421 1.54121 2.6104 0 ]xsh
124.931 376.586 mo
125.593 379.23 125.923 382.867 126.254 386.173 cv
@
125.262 385.181 mo
126.584 388.487 li
126.915 385.181 li
cp
@
125.262 385.181 mo
126.584 388.487 li
126.915 385.181 li
f
127.246 428.82 mo
127.246 425.534 119.105 422.87 109.063 422.87 cv
99.0204 422.87 90.8796 425.534 90.8796 428.82 cv
90.8796 432.107 99.0204 434.771 109.063 434.771 cv
119.105 434.771 127.246 432.107 127.246 428.82 cv
@
127.246 428.82 mo
127.246 425.534 119.105 422.87 109.063 422.87 cv
99.0204 422.87 90.8796 425.534 90.8796 428.82 cv
90.8796 432.107 99.0204 434.771 109.063 434.771 cv
119.105 434.771 127.246 432.107 127.246 428.82 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
94.3444 429.878 mo
(roundrobin\(2,2\))
[1.54122 2.3142 2.3142 2.3142 2.31419 1.54122 2.3142 2.3142 1.2867 2.31419 1.54123 2.31419 
1.1571 2.3142 0 ]xsh
123.278 457.913 mo
123.278 451.705 116.914 446.673 109.063 446.673 cv
101.211 446.673 94.8468 451.705 94.8468 457.913 cv
94.8468 464.121 101.211 469.154 109.063 469.154 cv
116.914 469.154 123.278 464.121 123.278 457.913 cv
@
123.278 457.913 mo
123.278 451.705 116.914 446.673 109.063 446.673 cv
101.211 446.673 94.8468 451.705 94.8468 457.913 cv
94.8468 464.121 101.211 469.154 109.063 469.154 cv
116.914 469.154 123.278 464.121 123.278 457.913 cv
.761 .976 1 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
100.708 453.682 mo
(decimate)
[2.3142 2.05494 2.05494 1.2867 3.60089 2.05494 1.2867 0 ]xsh
100.687 458.972 mo
(work=60)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.3142 0 ]xsh
100.366 464.261 mo
(I/O: 4->4)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.3142 1.54122 2.6104 0 ]xsh
109.063 434.771 mo
109.063 437.085 109.063 440.391 109.063 443.367 cv
@
108.401 443.367 mo
109.063 446.673 li
110.054 443.367 li
cp
@
108.401 443.367 mo
109.063 446.673 li
110.054 443.367 li
f
99.4752 410.307 mo
101.128 413.613 103.112 417.249 104.765 420.225 cv
@
103.773 420.225 mo
106.087 422.87 li
105.426 419.564 li
cp
@
103.773 420.225 mo
106.087 422.87 li
105.426 419.564 li
f
121.625 409.646 mo
119.311 413.282 116.666 417.249 114.683 420.555 cv
@
114.352 419.564 mo
113.03 422.87 li
115.675 420.555 li
cp
@
114.352 419.564 mo
113.03 422.87 li
115.675 420.555 li
f
127.246 487.006 mo
127.246 483.719 119.105 481.055 109.063 481.055 cv
99.0204 481.055 90.8796 483.719 90.8796 487.006 cv
90.8796 490.293 99.0204 492.957 109.063 492.957 cv
119.105 492.957 127.246 490.293 127.246 487.006 cv
@
127.246 487.006 mo
127.246 483.719 119.105 481.055 109.063 481.055 cv
99.0204 481.055 90.8796 483.719 90.8796 487.006 cv
90.8796 490.293 99.0204 492.957 109.063 492.957 cv
119.105 492.957 127.246 490.293 127.246 487.006 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
94.3444 488.064 mo
(roundrobin\(2,2\))
[1.54122 2.3142 2.3142 2.3142 2.31419 1.54122 2.3142 2.3142 1.2867 2.31419 1.54123 2.31419 
1.1571 2.3142 0 ]xsh
109.063 469.154 mo
109.063 472.129 109.063 475.104 109.063 478.08 cv
@
108.401 477.749 mo
109.063 481.055 li
110.054 477.749 li
cp
@
108.401 477.749 mo
109.063 481.055 li
110.054 477.749 li
f
95.508 516.099 mo
95.508 509.891 86.9231 504.858 76.3332 504.858 cv
65.7433 504.858 57.1584 509.891 57.1584 516.099 cv
57.1584 522.307 65.7433 527.339 76.3332 527.339 cv
86.9231 527.339 95.508 522.307 95.508 516.099 cv
@
95.508 516.099 mo
95.508 509.891 86.9231 504.858 76.3332 504.858 cv
65.7433 504.858 57.1584 509.891 57.1584 516.099 cv
57.1584 522.307 65.7433 527.339 76.3332 527.339 cv
86.9231 527.339 95.508 522.307 95.508 516.099 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
62.5753 511.867 mo
(TwoPointDCT)
[2.82792 3.34164 2.3142 2.57339 2.3142 1.2867 2.31419 1.2867 3.34164 3.0871 0 ]xsh
67.9581 517.157 mo
(work=80)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.3142 0 ]xsh
67.6365 522.446 mo
(I/O: 2->2)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.3142 1.54122 2.6104 0 ]xsh
102.12 492.626 mo
100.136 494.279 98.1528 495.602 96.4998 496.924 cv
94.1856 499.238 91.2102 502.214 88.2348 504.858 cv
@
88.2348 503.536 mo
86.5818 506.511 li
89.5572 504.858 li
cp
@
88.2348 503.536 mo
86.5818 506.511 li
89.5572 504.858 li
f
139.808 516.099 mo
139.808 509.891 131.224 504.858 120.634 504.858 cv
110.044 504.858 101.459 509.891 101.459 516.099 cv
101.459 522.307 110.044 527.339 120.634 527.339 cv
131.224 527.339 139.808 522.307 139.808 516.099 cv
@
139.808 516.099 mo
139.808 509.891 131.224 504.858 120.634 504.858 cv
110.044 504.858 101.459 509.891 101.459 516.099 cv
101.459 522.307 110.044 527.339 120.634 527.339 cv
131.224 527.339 139.808 522.307 139.808 516.099 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
106.876 511.867 mo
(TwoPointDCT)
[2.82792 3.34163 2.3142 2.57339 2.31419 1.2867 2.3142 1.2867 3.34163 3.08711 0 ]xsh
112.259 517.157 mo
(work=80)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.3142 0 ]xsh
111.937 522.446 mo
(I/O: 2->2)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.3142 1.54122 2.6104 0 ]xsh
111.377 492.957 mo
112.699 495.602 113.691 498.908 115.013 501.883 cv
@
114.352 502.544 mo
116.336 505.189 li
116.005 501.883 li
cp
@
114.352 502.544 mo
116.336 505.189 li
116.005 501.883 li
f
138.817 579.574 mo
138.817 576.288 130.676 573.623 120.634 573.623 cv
110.591 573.623 102.451 576.288 102.451 579.574 cv
102.451 582.861 110.591 585.525 120.634 585.525 cv
130.676 585.525 138.817 582.861 138.817 579.574 cv
@
138.817 579.574 mo
138.817 576.288 130.676 573.623 120.634 573.623 cv
110.591 573.623 102.451 576.288 102.451 579.574 cv
102.451 582.861 110.591 585.525 120.634 585.525 cv
130.676 585.525 138.817 582.861 138.817 579.574 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
105.915 580.632 mo
(roundrobin\(1,1\))
[1.54122 2.3142 2.3142 2.3142 2.31419 1.54122 2.3142 2.3142 1.2867 2.31419 1.54123 2.31419 
1.1571 2.31419 0 ]xsh
131.874 584.202 mo
138.155 586.847 146.09 589.823 151.379 590.814 cv
170.885 594.451 202.622 598.418 224.111 601.063 cv
@
223.781 601.724 mo
227.087 601.394 li
223.781 600.071 li
cp
@
223.781 601.724 mo
227.087 601.394 li
223.781 600.071 li
f
79.9698 527.339 mo
83.937 538.58 90.2184 555.44 96.4998 564.366 cv
98.4834 567.672 103.112 570.648 107.079 572.962 cv
@
106.748 573.623 mo
110.054 574.615 li
107.41 572.301 li
cp
@
106.748 573.623 mo
110.054 574.615 li
107.41 572.301 li
f
134.849 550.481 mo
134.849 544.273 128.485 539.241 120.634 539.241 cv
112.782 539.241 106.418 544.273 106.418 550.481 cv
106.418 556.689 112.782 561.722 120.634 561.722 cv
128.485 561.722 134.849 556.689 134.849 550.481 cv
@
134.849 550.481 mo
134.849 544.273 128.485 539.241 120.634 539.241 cv
112.782 539.241 106.418 544.273 106.418 550.481 cv
106.418 556.689 112.782 561.722 120.634 561.722 cv
128.485 561.722 134.849 556.689 134.849 550.481 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
114.075 546.25 mo
(outmix)
[2.3142 2.3142 1.28669 3.6009 1.28669 0 ]xsh
112.258 551.54 mo
(work=21)
[3.34164 2.3142 1.54122 2.31419 2.6104 2.3142 0 ]xsh
111.937 556.829 mo
(I/O: 2->2)
[1.54122 1.2867 3.34164 1.28669 1.1571 2.3142 1.54122 2.6104 0 ]xsh
120.634 527.339 mo
120.634 529.984 120.634 532.959 120.634 535.935 cv
@
119.972 535.935 mo
120.634 539.241 li
121.625 535.935 li
cp
@
119.972 535.935 mo
120.634 539.241 li
121.625 535.935 li
f
120.634 561.722 mo
120.634 564.697 120.634 567.672 120.634 570.648 cv
@
119.972 570.317 mo
120.634 573.623 li
121.625 570.317 li
cp
@
119.972 570.317 mo
120.634 573.623 li
121.625 570.317 li
f
207.251 399.728 mo
207.251 393.52 200.886 388.487 193.035 388.487 cv
185.184 388.487 178.819 393.52 178.819 399.728 cv
178.819 405.935 185.184 410.968 193.035 410.968 cv
200.886 410.968 207.251 405.935 207.251 399.728 cv
@
207.251 399.728 mo
207.251 393.52 200.886 388.487 193.035 388.487 cv
185.184 388.487 178.819 393.52 178.819 399.728 cv
178.819 405.935 185.184 410.968 193.035 410.968 cv
200.886 410.968 207.251 405.935 207.251 399.728 cv
.271 .467 .702 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
185.836 395.496 mo
(Identity)
[1.54123 2.31419 2.05495 2.31419 1.2867 1.2867 1.28668 0 ]xsh
184.66 400.786 mo
(work=12)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
184.339 406.075 mo
(I/O: 1->1)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
217.499 376.255 mo
213.532 380.222 208.573 385.181 203.945 389.479 cv
@
203.945 388.157 mo
202.292 391.132 li
205.267 389.479 li
cp
@
203.945 388.157 mo
202.292 391.132 li
205.267 389.479 li
f
241.633 399.728 mo
241.633 393.52 235.269 388.487 227.417 388.487 cv
219.566 388.487 213.202 393.52 213.202 399.728 cv
213.202 405.935 219.566 410.968 227.417 410.968 cv
235.269 410.968 241.633 405.935 241.633 399.728 cv
@
241.633 399.728 mo
241.633 393.52 235.269 388.487 227.417 388.487 cv
219.566 388.487 213.202 393.52 213.202 399.728 cv
213.202 405.935 219.566 410.968 227.417 410.968 cv
235.269 410.968 241.633 405.935 241.633 399.728 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
220.093 395.496 mo
(reversal)
[1.54123 2.05493 2.31421 2.05493 1.54123 1.8004 2.05495 0 ]xsh
219.042 400.786 mo
(work=26)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
218.721 406.075 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
224.111 376.586 mo
224.773 379.23 225.103 382.867 225.434 386.173 cv
@
224.442 385.181 mo
225.764 388.487 li
226.095 385.181 li
cp
@
224.442 385.181 mo
225.764 388.487 li
226.095 385.181 li
f
226.426 428.82 mo
226.426 425.534 218.285 422.87 208.243 422.87 cv
198.2 422.87 190.06 425.534 190.06 428.82 cv
190.06 432.107 198.2 434.771 208.243 434.771 cv
218.285 434.771 226.426 432.107 226.426 428.82 cv
@
226.426 428.82 mo
226.426 425.534 218.285 422.87 208.243 422.87 cv
198.2 422.87 190.06 425.534 190.06 428.82 cv
190.06 432.107 198.2 434.771 208.243 434.771 cv
218.285 434.771 226.426 432.107 226.426 428.82 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
193.524 429.878 mo
(roundrobin\(2,2\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.1571 2.31419 0 ]xsh
222.458 457.913 mo
222.458 451.705 216.094 446.673 208.243 446.673 cv
200.391 446.673 194.027 451.705 194.027 457.913 cv
194.027 464.121 200.391 469.154 208.243 469.154 cv
216.094 469.154 222.458 464.121 222.458 457.913 cv
@
222.458 457.913 mo
222.458 451.705 216.094 446.673 208.243 446.673 cv
200.391 446.673 194.027 451.705 194.027 457.913 cv
194.027 464.121 200.391 469.154 208.243 469.154 cv
216.094 469.154 222.458 464.121 222.458 457.913 cv
.761 .976 1 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
199.888 453.682 mo
(decimate)
[2.31419 2.05495 2.05493 1.2867 3.60091 2.05493 1.2867 0 ]xsh
199.867 458.972 mo
(work=60)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
199.546 464.261 mo
(I/O: 4->4)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
208.243 434.771 mo
208.243 437.085 208.243 440.391 208.243 443.367 cv
@
207.581 443.367 mo
208.243 446.673 li
209.234 443.367 li
cp
@
207.581 443.367 mo
208.243 446.673 li
209.234 443.367 li
f
198.655 410.307 mo
200.308 413.613 202.292 417.249 203.945 420.225 cv
@
202.953 420.225 mo
205.267 422.87 li
204.606 419.564 li
cp
@
202.953 420.225 mo
205.267 422.87 li
204.606 419.564 li
f
220.805 409.646 mo
218.491 413.282 215.846 417.249 213.863 420.555 cv
@
213.532 419.564 mo
212.21 422.87 li
214.855 420.555 li
cp
@
213.532 419.564 mo
212.21 422.87 li
214.855 420.555 li
f
226.426 487.006 mo
226.426 483.719 218.285 481.055 208.243 481.055 cv
198.2 481.055 190.06 483.719 190.06 487.006 cv
190.06 490.293 198.2 492.957 208.243 492.957 cv
218.285 492.957 226.426 490.293 226.426 487.006 cv
@
226.426 487.006 mo
226.426 483.719 218.285 481.055 208.243 481.055 cv
198.2 481.055 190.06 483.719 190.06 487.006 cv
190.06 490.293 198.2 492.957 208.243 492.957 cv
218.285 492.957 226.426 490.293 226.426 487.006 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
193.524 488.064 mo
(roundrobin\(2,2\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.1571 2.31419 0 ]xsh
208.243 469.154 mo
208.243 472.129 208.243 475.104 208.243 478.08 cv
@
207.581 477.749 mo
208.243 481.055 li
209.234 477.749 li
cp
@
207.581 477.749 mo
208.243 481.055 li
209.234 477.749 li
f
194.688 516.099 mo
194.688 509.891 186.103 504.858 175.513 504.858 cv
164.923 504.858 156.338 509.891 156.338 516.099 cv
156.338 522.307 164.923 527.339 175.513 527.339 cv
186.103 527.339 194.688 522.307 194.688 516.099 cv
@
194.688 516.099 mo
194.688 509.891 186.103 504.858 175.513 504.858 cv
164.923 504.858 156.338 509.891 156.338 516.099 cv
156.338 522.307 164.923 527.339 175.513 527.339 cv
186.103 527.339 194.688 522.307 194.688 516.099 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
161.755 511.867 mo
(TwoPointDCT)
[2.82791 3.34164 2.31419 2.57339 2.31419 1.2867 2.31419 1.2867 3.34164 3.0871 0 ]xsh
167.138 517.157 mo
(work=80)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
166.816 522.446 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
201.3 492.626 mo
199.316 494.279 197.333 495.602 195.68 496.924 cv
193.366 499.238 190.39 502.214 187.415 504.858 cv
@
187.415 503.536 mo
185.762 506.511 li
188.737 504.858 li
cp
@
187.415 503.536 mo
185.762 506.511 li
188.737 504.858 li
f
238.988 516.099 mo
238.988 509.891 230.404 504.858 219.814 504.858 cv
209.224 504.858 200.639 509.891 200.639 516.099 cv
200.639 522.307 209.224 527.339 219.814 527.339 cv
230.404 527.339 238.988 522.307 238.988 516.099 cv
@
238.988 516.099 mo
238.988 509.891 230.404 504.858 219.814 504.858 cv
209.224 504.858 200.639 509.891 200.639 516.099 cv
200.639 522.307 209.224 527.339 219.814 527.339 cv
230.404 527.339 238.988 522.307 238.988 516.099 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
206.056 511.867 mo
(TwoPointDCT)
[2.82791 3.34164 2.31419 2.57339 2.31419 1.2867 2.31419 1.2867 3.34164 3.0871 0 ]xsh
211.439 517.157 mo
(work=80)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
211.117 522.446 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
210.557 492.957 mo
211.879 495.602 212.871 498.908 214.193 501.883 cv
@
213.532 502.544 mo
215.516 505.189 li
215.185 501.883 li
cp
@
213.532 502.544 mo
215.516 505.189 li
215.185 501.883 li
f
237.997 579.574 mo
237.997 576.288 229.856 573.623 219.814 573.623 cv
209.771 573.623 201.631 576.288 201.631 579.574 cv
201.631 582.861 209.771 585.525 219.814 585.525 cv
229.856 585.525 237.997 582.861 237.997 579.574 cv
@
237.997 579.574 mo
237.997 576.288 229.856 573.623 219.814 573.623 cv
209.771 573.623 201.631 576.288 201.631 579.574 cv
201.631 582.861 209.771 585.525 219.814 585.525 cv
229.856 585.525 237.997 582.861 237.997 579.574 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
205.095 580.632 mo
(roundrobin\(1,1\))
[1.54123 2.31419 2.31419 2.31421 2.31419 1.54123 2.31419 2.31421 1.28668 2.31421 1.54121 2.31421 
1.15709 2.31421 0 ]xsh
226.426 585.194 mo
230.062 588.17 234.36 592.137 238.327 595.443 cv
@
237.666 596.104 mo
240.641 597.757 li
238.988 594.782 li
cp
@
237.666 596.104 mo
240.641 597.757 li
238.988 594.782 li
f
179.15 527.339 mo
183.117 538.58 189.398 555.44 195.68 564.366 cv
197.663 567.672 202.292 570.648 206.259 572.962 cv
@
205.928 573.623 mo
209.234 574.615 li
206.59 572.301 li
cp
@
205.928 573.623 mo
209.234 574.615 li
206.59 572.301 li
f
234.029 550.481 mo
234.029 544.273 227.665 539.241 219.814 539.241 cv
211.962 539.241 205.598 544.273 205.598 550.481 cv
205.598 556.689 211.962 561.722 219.814 561.722 cv
227.665 561.722 234.029 556.689 234.029 550.481 cv
@
234.029 550.481 mo
234.029 544.273 227.665 539.241 219.814 539.241 cv
211.962 539.241 205.598 544.273 205.598 550.481 cv
205.598 556.689 211.962 561.722 219.814 561.722 cv
227.665 561.722 234.029 556.689 234.029 550.481 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
213.255 546.25 mo
(outmix)
[2.31419 2.31421 1.2867 3.60089 1.2867 0 ]xsh
211.438 551.54 mo
(work=21)
[3.34163 2.31421 1.54121 2.31421 2.6104 2.31419 0 ]xsh
211.117 556.829 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.2867 1.15709 2.31421 1.54121 2.6104 0 ]xsh
219.814 527.339 mo
219.814 529.984 219.814 532.959 219.814 535.935 cv
@
219.152 535.935 mo
219.814 539.241 li
220.805 535.935 li
cp
@
219.152 535.935 mo
219.814 539.241 li
220.805 535.935 li
f
219.814 561.722 mo
219.814 564.697 219.814 567.672 219.814 570.648 cv
@
219.152 570.317 mo
219.814 573.623 li
220.805 570.317 li
cp
@
219.152 570.317 mo
219.814 573.623 li
220.805 570.317 li
f
283.95 399.728 mo
283.95 393.52 277.585 388.487 269.734 388.487 cv
261.883 388.487 255.518 393.52 255.518 399.728 cv
255.518 405.935 261.883 410.968 269.734 410.968 cv
277.585 410.968 283.95 405.935 283.95 399.728 cv
@
283.95 399.728 mo
283.95 393.52 277.585 388.487 269.734 388.487 cv
261.883 388.487 255.518 393.52 255.518 399.728 cv
255.518 405.935 261.883 410.968 269.734 410.968 cv
277.585 410.968 283.95 405.935 283.95 399.728 cv
.271 .467 .702 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
262.535 395.496 mo
(Identity)
[1.54123 2.31418 2.05496 2.31418 1.28671 1.28668 1.28671 0 ]xsh
261.359 400.786 mo
(work=12)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
261.038 406.075 mo
(I/O: 1->1)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
273.04 376.586 mo
272.379 379.23 272.048 382.867 271.718 386.173 cv
@
271.057 385.181 mo
271.387 388.487 li
272.71 385.181 li
cp
@
271.057 385.181 mo
271.387 388.487 li
272.71 385.181 li
f
318.332 399.728 mo
318.332 393.52 311.968 388.487 304.117 388.487 cv
296.265 388.487 289.901 393.52 289.901 399.728 cv
289.901 405.935 296.265 410.968 304.117 410.968 cv
311.968 410.968 318.332 405.935 318.332 399.728 cv
@
318.332 399.728 mo
318.332 393.52 311.968 388.487 304.117 388.487 cv
296.265 388.487 289.901 393.52 289.901 399.728 cv
289.901 405.935 296.265 410.968 304.117 410.968 cv
311.968 410.968 318.332 405.935 318.332 399.728 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
296.792 395.496 mo
(reversal)
[1.54123 2.05493 2.31421 2.05493 1.54123 1.80042 2.05493 0 ]xsh
295.741 400.786 mo
(work=26)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
295.42 406.075 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
279.652 376.255 mo
283.289 379.892 288.248 384.52 292.546 388.818 cv
@
291.884 389.479 mo
294.86 391.132 li
293.207 388.157 li
cp
@
291.884 389.479 mo
294.86 391.132 li
293.207 388.157 li
f
305.439 428.82 mo
305.439 425.534 297.298 422.87 287.256 422.87 cv
277.214 422.87 269.073 425.534 269.073 428.82 cv
269.073 432.107 277.214 434.771 287.256 434.771 cv
297.298 434.771 305.439 432.107 305.439 428.82 cv
@
305.439 428.82 mo
305.439 425.534 297.298 422.87 287.256 422.87 cv
277.214 422.87 269.073 425.534 269.073 428.82 cv
269.073 432.107 277.214 434.771 287.256 434.771 cv
297.298 434.771 305.439 432.107 305.439 428.82 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
272.538 429.878 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
301.472 457.913 mo
301.472 451.705 295.107 446.673 287.256 446.673 cv
279.405 446.673 273.04 451.705 273.04 457.913 cv
273.04 464.121 279.405 469.154 287.256 469.154 cv
295.107 469.154 301.472 464.121 301.472 457.913 cv
@
301.472 457.913 mo
301.472 451.705 295.107 446.673 287.256 446.673 cv
279.405 446.673 273.04 451.705 273.04 457.913 cv
273.04 464.121 279.405 469.154 287.256 469.154 cv
295.107 469.154 301.472 464.121 301.472 457.913 cv
.761 .976 1 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
278.902 453.682 mo
(decimate)
[2.31421 2.05493 2.05493 1.28671 3.60089 2.05493 1.28668 0 ]xsh
278.881 458.972 mo
(work=60)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
278.56 464.261 mo
(I/O: 4->4)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
287.256 434.771 mo
287.256 437.085 287.256 440.391 287.256 443.367 cv
@
286.595 443.367 mo
287.256 446.673 li
288.248 443.367 li
cp
@
286.595 443.367 mo
287.256 446.673 li
288.248 443.367 li
f
276.016 409.976 mo
277.999 413.282 280.313 416.919 282.297 420.225 cv
@
281.305 420.225 mo
283.619 422.87 li
282.958 419.564 li
cp
@
281.305 420.225 mo
283.619 422.87 li
282.958 419.564 li
f
298.166 409.976 mo
296.182 413.282 294.199 416.919 292.215 420.225 cv
@
291.554 419.564 mo
290.562 422.87 li
292.876 420.555 li
cp
@
291.554 419.564 mo
290.562 422.87 li
292.876 420.555 li
f
305.439 487.006 mo
305.439 483.719 297.298 481.055 287.256 481.055 cv
277.214 481.055 269.073 483.719 269.073 487.006 cv
269.073 490.293 277.214 492.957 287.256 492.957 cv
297.298 492.957 305.439 490.293 305.439 487.006 cv
@
305.439 487.006 mo
305.439 483.719 297.298 481.055 287.256 481.055 cv
277.214 481.055 269.073 483.719 269.073 487.006 cv
269.073 490.293 277.214 492.957 287.256 492.957 cv
297.298 492.957 305.439 490.293 305.439 487.006 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
272.538 488.064 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
287.256 469.154 mo
287.256 472.129 287.256 475.104 287.256 478.08 cv
@
286.595 477.749 mo
287.256 481.055 li
288.248 477.749 li
cp
@
286.595 477.749 mo
287.256 481.055 li
288.248 477.749 li
f
293.868 516.099 mo
293.868 509.891 285.283 504.858 274.693 504.858 cv
264.103 504.858 255.518 509.891 255.518 516.099 cv
255.518 522.307 264.103 527.339 274.693 527.339 cv
285.283 527.339 293.868 522.307 293.868 516.099 cv
@
293.868 516.099 mo
293.868 509.891 285.283 504.858 274.693 504.858 cv
264.103 504.858 255.518 509.891 255.518 516.099 cv
255.518 522.307 264.103 527.339 274.693 527.339 cv
285.283 527.339 293.868 522.307 293.868 516.099 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
260.935 511.867 mo
(TwoPointDCT)
[2.82791 3.34164 2.31421 2.57336 2.31421 1.28668 2.31421 1.28671 3.34161 3.08713 0 ]xsh
266.318 517.157 mo
(work=80)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
265.996 522.446 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
284.611 492.957 mo
283.289 495.932 281.966 499.569 280.313 503.205 cv
@
279.983 501.883 mo
279.322 505.189 li
281.636 502.544 li
cp
@
279.983 501.883 mo
279.322 505.189 li
281.636 502.544 li
f
338.168 516.099 mo
338.168 509.891 329.583 504.858 318.994 504.858 cv
308.404 504.858 299.819 509.891 299.819 516.099 cv
299.819 522.307 308.404 527.339 318.994 527.339 cv
329.583 527.339 338.168 522.307 338.168 516.099 cv
@
338.168 516.099 mo
338.168 509.891 329.583 504.858 318.994 504.858 cv
308.404 504.858 299.819 509.891 299.819 516.099 cv
299.819 522.307 308.404 527.339 318.994 527.339 cv
329.583 527.339 338.168 522.307 338.168 516.099 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
305.236 511.867 mo
(TwoPointDCT)
[2.82791 3.34164 2.31421 2.57336 2.31421 1.28671 2.31418 1.28671 3.34161 3.08713 0 ]xsh
310.619 517.157 mo
(work=80)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
310.297 522.446 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
295.19 492.296 mo
297.174 493.949 299.488 495.602 300.811 496.924 cv
302.794 498.577 305.108 501.222 307.423 503.536 cv
@
307.092 504.197 mo
309.737 506.181 li
308.084 503.205 li
cp
@
307.092 504.197 mo
309.737 506.181 li
308.084 503.205 li
f
292.876 579.574 mo
292.876 576.288 284.735 573.623 274.693 573.623 cv
264.651 573.623 256.51 576.288 256.51 579.574 cv
256.51 582.861 264.651 585.525 274.693 585.525 cv
284.735 585.525 292.876 582.861 292.876 579.574 cv
@
292.876 579.574 mo
292.876 576.288 284.735 573.623 274.693 573.623 cv
264.651 573.623 256.51 576.288 256.51 579.574 cv
256.51 582.861 264.651 585.525 274.693 585.525 cv
284.735 585.525 292.876 582.861 292.876 579.574 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
259.975 580.632 mo
(roundrobin\(1,1\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
268.081 585.194 mo
264.445 588.17 260.147 592.137 256.18 595.443 cv
@
255.518 594.782 mo
253.865 597.757 li
256.841 596.104 li
cp
@
255.518 594.782 mo
253.865 597.757 li
256.841 596.104 li
f
274.693 527.339 mo
274.693 539.571 274.693 558.746 274.693 569.987 cv
@
274.032 570.317 mo
274.693 573.623 li
275.685 570.317 li
cp
@
274.032 570.317 mo
274.693 573.623 li
275.685 570.317 li
f
330.565 550.481 mo
330.565 544.273 324.2 539.241 316.349 539.241 cv
308.498 539.241 302.133 544.273 302.133 550.481 cv
302.133 556.689 308.498 561.722 316.349 561.722 cv
324.2 561.722 330.565 556.689 330.565 550.481 cv
@
330.565 550.481 mo
330.565 544.273 324.2 539.241 316.349 539.241 cv
308.498 539.241 302.133 544.273 302.133 550.481 cv
302.133 556.689 308.498 561.722 316.349 561.722 cv
324.2 561.722 330.565 556.689 330.565 550.481 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
309.79 546.25 mo
(outmix)
[2.31421 2.31418 1.28671 3.60089 1.28668 0 ]xsh
307.973 551.54 mo
(work=21)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
307.652 556.829 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
318.002 527.339 mo
317.671 530.315 317.341 533.621 317.341 536.927 cv
@
316.679 535.935 mo
317.01 539.241 li
318.332 535.935 li
cp
@
316.679 535.935 mo
317.01 539.241 li
318.332 535.935 li
f
308.414 559.738 mo
306.431 561.722 304.778 563.375 303.125 564.366 cv
299.488 567.011 293.537 570.317 288.248 572.962 cv
@
287.917 572.301 mo
285.272 574.615 li
288.578 573.623 li
cp
@
287.917 572.301 mo
285.272 574.615 li
288.578 573.623 li
f
383.13 399.728 mo
383.13 393.52 376.765 388.487 368.914 388.487 cv
361.063 388.487 354.698 393.52 354.698 399.728 cv
354.698 405.935 361.063 410.968 368.914 410.968 cv
376.765 410.968 383.13 405.935 383.13 399.728 cv
@
383.13 399.728 mo
383.13 393.52 376.765 388.487 368.914 388.487 cv
361.063 388.487 354.698 393.52 354.698 399.728 cv
354.698 405.935 361.063 410.968 368.914 410.968 cv
376.765 410.968 383.13 405.935 383.13 399.728 cv
.271 .467 .702 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
361.715 395.496 mo
(Identity)
[1.54123 2.31418 2.05496 2.31418 1.28671 1.28668 1.28671 0 ]xsh
360.539 400.786 mo
(work=12)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
360.218 406.075 mo
(I/O: 1->1)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
372.22 376.586 mo
371.559 379.23 371.228 382.867 370.898 386.173 cv
@
370.237 385.181 mo
370.567 388.487 li
371.89 385.181 li
cp
@
370.237 385.181 mo
370.567 388.487 li
371.89 385.181 li
f
417.512 399.728 mo
417.512 393.52 411.148 388.487 403.297 388.487 cv
395.445 388.487 389.081 393.52 389.081 399.728 cv
389.081 405.935 395.445 410.968 403.297 410.968 cv
411.148 410.968 417.512 405.935 417.512 399.728 cv
@
417.512 399.728 mo
417.512 393.52 411.148 388.487 403.297 388.487 cv
395.445 388.487 389.081 393.52 389.081 399.728 cv
389.081 405.935 395.445 410.968 403.297 410.968 cv
411.148 410.968 417.512 405.935 417.512 399.728 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
395.972 395.496 mo
(reversal)
[1.54123 2.05493 2.31421 2.05493 1.54123 1.80042 2.05493 0 ]xsh
394.921 400.786 mo
(work=26)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
394.6 406.075 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
378.832 376.255 mo
382.469 379.892 387.428 384.52 391.726 388.818 cv
@
391.064 389.479 mo
394.04 391.132 li
392.387 388.157 li
cp
@
391.064 389.479 mo
394.04 391.132 li
392.387 388.157 li
f
404.619 428.82 mo
404.619 425.534 396.478 422.87 386.436 422.87 cv
376.394 422.87 368.253 425.534 368.253 428.82 cv
368.253 432.107 376.394 434.771 386.436 434.771 cv
396.478 434.771 404.619 432.107 404.619 428.82 cv
@
404.619 428.82 mo
404.619 425.534 396.478 422.87 386.436 422.87 cv
376.394 422.87 368.253 425.534 368.253 428.82 cv
368.253 432.107 376.394 434.771 386.436 434.771 cv
396.478 434.771 404.619 432.107 404.619 428.82 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
371.718 429.878 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
400.652 457.913 mo
400.652 451.705 394.287 446.673 386.436 446.673 cv
378.585 446.673 372.22 451.705 372.22 457.913 cv
372.22 464.121 378.585 469.154 386.436 469.154 cv
394.287 469.154 400.652 464.121 400.652 457.913 cv
@
400.652 457.913 mo
400.652 451.705 394.287 446.673 386.436 446.673 cv
378.585 446.673 372.22 451.705 372.22 457.913 cv
372.22 464.121 378.585 469.154 386.436 469.154 cv
394.287 469.154 400.652 464.121 400.652 457.913 cv
.761 .976 1 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
378.082 453.682 mo
(decimate)
[2.31421 2.05493 2.05493 1.28671 3.60089 2.05493 1.28668 0 ]xsh
378.061 458.972 mo
(work=60)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
377.74 464.261 mo
(I/O: 4->4)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
386.436 434.771 mo
386.436 437.085 386.436 440.391 386.436 443.367 cv
@
385.775 443.367 mo
386.436 446.673 li
387.428 443.367 li
cp
@
385.775 443.367 mo
386.436 446.673 li
387.428 443.367 li
f
375.196 409.976 mo
377.179 413.282 379.493 416.919 381.477 420.225 cv
@
380.485 420.225 mo
382.799 422.87 li
382.138 419.564 li
cp
@
380.485 420.225 mo
382.799 422.87 li
382.138 419.564 li
f
397.346 409.976 mo
395.362 413.282 393.379 416.919 391.395 420.225 cv
@
390.734 419.564 mo
389.742 422.87 li
392.056 420.555 li
cp
@
390.734 419.564 mo
389.742 422.87 li
392.056 420.555 li
f
404.619 487.006 mo
404.619 483.719 396.478 481.055 386.436 481.055 cv
376.394 481.055 368.253 483.719 368.253 487.006 cv
368.253 490.293 376.394 492.957 386.436 492.957 cv
396.478 492.957 404.619 490.293 404.619 487.006 cv
@
404.619 487.006 mo
404.619 483.719 396.478 481.055 386.436 481.055 cv
376.394 481.055 368.253 483.719 368.253 487.006 cv
368.253 490.293 376.394 492.957 386.436 492.957 cv
396.478 492.957 404.619 490.293 404.619 487.006 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
371.718 488.064 mo
(roundrobin\(2,2\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
386.436 469.154 mo
386.436 472.129 386.436 475.104 386.436 478.08 cv
@
385.775 477.749 mo
386.436 481.055 li
387.428 477.749 li
cp
@
385.775 477.749 mo
386.436 481.055 li
387.428 477.749 li
f
393.048 516.099 mo
393.048 509.891 384.463 504.858 373.873 504.858 cv
363.283 504.858 354.698 509.891 354.698 516.099 cv
354.698 522.307 363.283 527.339 373.873 527.339 cv
384.463 527.339 393.048 522.307 393.048 516.099 cv
@
393.048 516.099 mo
393.048 509.891 384.463 504.858 373.873 504.858 cv
363.283 504.858 354.698 509.891 354.698 516.099 cv
354.698 522.307 363.283 527.339 373.873 527.339 cv
384.463 527.339 393.048 522.307 393.048 516.099 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
360.115 511.867 mo
(TwoPointDCT)
[2.82791 3.34164 2.31421 2.57336 2.31421 1.28668 2.31421 1.28671 3.34161 3.08713 0 ]xsh
365.498 517.157 mo
(work=80)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
365.176 522.446 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
383.791 492.957 mo
382.469 495.932 381.146 499.569 379.493 503.205 cv
@
379.163 501.883 mo
378.502 505.189 li
380.816 502.544 li
cp
@
379.163 501.883 mo
378.502 505.189 li
380.816 502.544 li
f
437.348 516.099 mo
437.348 509.891 428.764 504.858 418.174 504.858 cv
407.584 504.858 398.999 509.891 398.999 516.099 cv
398.999 522.307 407.584 527.339 418.174 527.339 cv
428.764 527.339 437.348 522.307 437.348 516.099 cv
@
437.348 516.099 mo
437.348 509.891 428.764 504.858 418.174 504.858 cv
407.584 504.858 398.999 509.891 398.999 516.099 cv
398.999 522.307 407.584 527.339 418.174 527.339 cv
428.764 527.339 437.348 522.307 437.348 516.099 cv
.992 .863 .565 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
404.416 511.867 mo
(TwoPointDCT)
[2.82791 3.34164 2.31421 2.57336 2.31421 1.28671 2.31418 1.28671 3.34161 3.08713 0 ]xsh
409.799 517.157 mo
(work=80)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
409.477 522.446 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
394.37 492.296 mo
396.354 493.949 398.668 495.602 399.991 496.924 cv
401.974 498.577 404.288 501.222 406.603 503.536 cv
@
406.272 504.197 mo
408.917 506.181 li
407.264 503.205 li
cp
@
406.272 504.197 mo
408.917 506.181 li
407.264 503.205 li
f
392.056 579.574 mo
392.056 576.288 383.915 573.623 373.873 573.623 cv
363.831 573.623 355.69 576.288 355.69 579.574 cv
355.69 582.861 363.831 585.525 373.873 585.525 cv
383.915 585.525 392.056 582.861 392.056 579.574 cv
@
392.056 579.574 mo
392.056 576.288 383.915 573.623 373.873 573.623 cv
363.831 573.623 355.69 576.288 355.69 579.574 cv
355.69 582.861 363.831 585.525 373.873 585.525 cv
383.915 585.525 392.056 582.861 392.056 579.574 cv
1 gry
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
359.155 580.632 mo
(roundrobin\(1,1\))
[1.54123 2.31418 2.31421 2.31421 2.31421 1.5412 2.31421 2.31421 1.28668 2.31421 1.54123 2.31418 
1.1571 2.31421 0 ]xsh
364.286 584.533 mo
359.327 587.178 353.045 590.153 348.417 590.814 cv
327.589 594.451 293.537 598.749 270.395 601.063 cv
@
270.726 600.071 mo
267.42 601.394 li
270.726 601.724 li
cp
@
270.726 600.071 mo
267.42 601.394 li
270.726 601.724 li
f
373.873 527.339 mo
373.873 539.571 373.873 558.746 373.873 569.987 cv
@
373.212 570.317 mo
373.873 573.623 li
374.865 570.317 li
cp
@
373.212 570.317 mo
373.873 573.623 li
374.865 570.317 li
f
429.745 550.481 mo
429.745 544.273 423.38 539.241 415.529 539.241 cv
407.678 539.241 401.313 544.273 401.313 550.481 cv
401.313 556.689 407.678 561.722 415.529 561.722 cv
423.38 561.722 429.745 556.689 429.745 550.481 cv
@
429.745 550.481 mo
429.745 544.273 423.38 539.241 415.529 539.241 cv
407.678 539.241 401.313 544.273 401.313 550.481 cv
401.313 556.689 407.678 561.722 415.529 561.722 cv
423.38 561.722 429.745 556.689 429.745 550.481 cv
.455 .686 .812 rgb
f
0 gry
LTFDQW+TimesNewRomanPSMT*1 [4.6284 0 0 -4.6284 0 0 ]msf
408.97 546.25 mo
(outmix)
[2.31421 2.31418 1.28671 3.60089 1.28668 0 ]xsh
407.153 551.54 mo
(work=21)
[3.34164 2.31418 1.54123 2.31421 2.61038 2.31421 0 ]xsh
406.832 556.829 mo
(I/O: 2->2)
[1.54123 1.28668 3.34164 1.28668 1.1571 2.31421 1.54123 2.61038 0 ]xsh
417.182 527.339 mo
416.851 529.984 416.851 532.959 416.521 535.935 cv
@
415.859 535.935 mo
416.19 539.241 li
417.182 535.935 li
cp
@
415.859 535.935 mo
416.19 539.241 li
417.182 535.935 li
f
407.594 559.738 mo
405.611 561.722 403.958 563.375 402.305 564.366 cv
398.668 567.011 392.717 570.317 387.428 572.962 cv
@
387.097 572.301 mo
384.452 574.615 li
387.758 573.623 li
cp
@
387.097 572.301 mo
384.452 574.615 li
387.758 573.623 li
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/LTFDQW+TimesNewRomanPSMT*1 uf
/LTFDQW+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
