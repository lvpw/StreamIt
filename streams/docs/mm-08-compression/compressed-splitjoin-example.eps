%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: compressed-splitjoin-example.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Bill Thies
%%CreationDate: 4/27/2008, 10:18:15 AM
%%BoundingBox: -340 339 199 539
%%HiResBoundingBox: -339.4800 339.4800 198.7201 538.2001
%%CropBox: -339.4800 339.4800 198.7201 538.2001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 -1 1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 4270 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   xap:CreatorTool="PScript5.dll Version 5.2.2"
   xap:ModifyDate="2008-04-27T10:16:48-04:00"
   xap:CreateDate="2008-04-27T10:16:48-04:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)"
   xapMM:DocumentID="uuid:9436d337-86c5-4e33-9dae-c4d25bacad8a"
   xapMM:InstanceID="uuid:02424445-2bc9-4c2b-a8c4-e3088a353759">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft PowerPoint - compressed-splitjoin-example</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Bill Thies</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
/0 
<<
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8RV"J:E&uIXZ`oI=6KjI!^3eH?sm_H$OXZG^"@UG'8%OF`heJFE;MEEcQ2?EH,r:E,TZ5DJj?/
D/F**Chmg%C2.KtBk_6oBP1sjAnGXdAS#C_A7K+Z@U`eT@:<PO?sd8J?=$rD?!U]?>[(E:>$>*4=]nj/
=BAR*<`W7$<E3!t<)Z^o;GpCi;,L.d:esk_:/4PY9he;T9M8#O8kM]I8P)HD84Q0?7Rfj977BU46pj=/
6:+")5s[b$5X.It5!D.n4Ztni4?GVd3]];^3B9&Y3&`cT2E!HN2)R3I1c$pD1,:U>0ek@90J>(4/hSb.
/M/M)/1W5$.Olns.4HYn-mpAi-71&c,paf^,U4NY+sJ3S+X%sN+<M[I*Zc@C*??(<)]BV5)&X;/(`4&*
(D[c%'bqGt'GM2o'+toj&J5Td&.f<]%LijV$k*ON#mgb="Te`,!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8RV"J:E&uIXZ`oI=6KjI!^3eH?sm_H$OXZG^"@UG'8%OF`heJFE;MEEcQ2?EH,r:E,TZ5DJj?/
D/F**Chmg%C2.KtBk_6oBP1sjAnGXdAS#C_A7K+Z@U`eT@:<PO?sd8J?=$rD?!U]?>[(E:>$>*4=]nj/
=BAR*<`W7$<E3!t<)Z^o;GpCi;,L.d:esk_:/4PY9he;T9M8#O8kM]I8P)HD84Q0?7Rfj977BU46pj=/
6:+")5s[b$5X.It5!D.n4Ztni4?GVd3]];^3B9&Y3&`cT2E!HN2)R3I1c$pD1,:U>0ek@90J>(4/hSb.
/M/M)/1W5$.Olns.4HYn-mpAi-71&c,paf^,U4NY+sJ3S+X%sN+<M[I*Zc@C*??(<)]BV5)&X;/(`4&*
(D[c%'bqGt'GM2o'+toj&J5Td&.f<]%LijV$k*ON#mgb="T\W)!WiE'!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
>>
/CSD add_res
/2 
<<
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8RV"J:E&uIXZ`oI=6KjI!^3eH?sm_H$OXZG^"@UG'8%OF`heJFE;MEEcQ2?EH,r:E,TZ5DJj?/
D/F**Chmg%C2.KtBk_6oBP1sjAnGXdAS#C_A7K+Z@U`eT@:<PO?sd8J?=$rD?!U]?>[(E:>$>*4=]nj/
=BAR*<`W7$<E3!t<)Z^o;GpCi;,L.d:esk_:/4PY9he;T9M8#O8kM]I8P)HD84Q0?7Rfj977BU46pj=/
6:+")5s[b$5X.It5!D.n4Ztni4?GVd3]];^3B9&Y3&`cT2E!HN2)R3I1c$pD1,:U>0ek@90J>(4/hSb.
/M/M)/1W5$.Olns.4HYn-mpAi,pai_,U=TZ,9e<U+<VdK+!2OF*ZQ.>)]K_7)B'J2)&O2-(Ddl'()@W"
'b_5o&eYfh&J5Na%h/sW$O[=B!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -538.2 translate
pgsv
[0 1 -1 0 198.72 0 ]ct
gsave
np
gsave
0 0 mo
0 538.2 li
198.72 538.2 li
198.72 0 li
cp
clp
[1 0 0 1 -157.68 0 ]ct
gsave
468 691.2 mo
144 691.2 li
144 -100.8 li
468 -100.8 li
cp
eclp
144 691.17 mo
468 691.17 li
468 -100.83 li
144 -100.83 li
cp
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 1 1 colr
f
grestore
187.2 484.02 mo
187.2 484.5 187.56 484.86 188.04 484.86 cv
188.52 484.86 188.88 484.5 188.88 484.02 cv
188.88 483.6 188.52 483.18 188.04 483.18 cv
187.56 483.18 187.2 483.6 187.2 484.02 cv
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.375 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
187.2 484.02 mo
187.2 484.5 187.56 484.86 188.04 484.86 cv
188.52 484.86 188.88 484.5 188.88 484.02 cv
188.88 483.6 188.52 483.18 188.04 483.18 cv
187.56 483.18 187.2 483.6 187.2 484.02 cv
cp
@
187.2 447.84 mo
187.2 448.32 187.56 448.68 188.04 448.68 cv
188.52 448.68 188.88 448.32 188.88 447.84 cv
188.88 447.42 188.52 447 188.04 447 cv
187.56 447 187.2 447.42 187.2 447.84 cv
ef
187.2 447.84 mo
187.2 448.32 187.56 448.68 188.04 448.68 cv
188.52 448.68 188.88 448.32 188.88 447.84 cv
188.88 447.42 188.52 447 188.04 447 cv
187.56 447 187.2 447.42 187.2 447.84 cv
cp
@
187.2 483.18 mo
185.52 480.66 li
@
188.82 483.18 mo
190.5 480.66 li
@
190.5 451.26 mo
188.82 448.68 li
@
187.38 448.68 mo
185.52 451.26 li
@
190.5 480.66 mo
190.5 451.26 li
@
185.52 480.66 mo
185.52 451.26 li
@
/1 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation, registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Regular) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 111 /o put
def
/UniqueID 44339 def
/FontBBox {-222 -250 1006 922} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 358 -210 -199] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [72] def
/StdVW [88] def
/StemSnapH [72 85] def
/StemSnapV [88 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/o <1C60D8A8C9B7EF3272B38E4A6C94951E5562623629B934E27FB2180BD8D3
F6BE8C185E818E4FFC52D5CEB593503DF4218821B72034CF2A9A1A709533B323
EFB4629DFAE9D5E18F3D4BFACB0FD28655332930944FE909D271FBC01B5A1CBF
248702BAFDF5EBE494117F5AB7> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/TIQPPB+ArialMT /ArialMT findfont ct_VMDictPut
/TIQPPB+ArialMT*1 
[111{/.notdef}rp /o 144{/.notdef}rp]
TIQPPB+ArialMT nf
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
190.14 538.26 mo
(ooooo)
[-4.97882 -4.97882 -4.97876 -5.03821 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
true set_gvm
%ADOBeginSubsetFont: Arial-BoldMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Arial-BoldMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation. registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Bold) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 120 /x put
def
/UniqueID 44341 def
/FontBBox {-167 -250 1006 939} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 355 -210 -197] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [109] def
/StdVW [137] def
/StemSnapH [109 121] def
/StemSnapV [137 144] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/x <1C60D8A8C9B7EF324FE573CBC6AAE04E35CB866746618AFBF3F4A2AE329F
B6B45945C6BAF6FA9D0038F79F240CD7A08F46F395EA04D701B8B0436D39143C
703DFACD> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/TIQPPC+Arial-BoldMT /Arial-BoldMT findfont ct_VMDictPut
/TIQPPC+Arial-BoldMT*1 
[120{/.notdef}rp /x 135{/.notdef}rp]
TIQPPC+Arial-BoldMT nf
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
190.14 513.3 mo
(x)sh
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
190.14 508.321 mo
(oooo)
[-5.03818 -4.97882 -4.97879 0 ]ysh
187.74 488.22 mo
187.74 486.24 li
187.8 486.12 li
187.92 486.06 li
188.1 486.12 li
188.1 488.34 li
187.92 488.4 li
187.8 488.34 li
187.74 488.22 li
cp
186.96 486.78 mo
187.92 484.74 li
188.94 486.78 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
187.74 447 mo
187.74 445.08 li
187.8 444.96 li
187.92 444.9 li
188.1 444.96 li
188.1 447.12 li
187.92 447.18 li
187.8 447.12 li
187.74 447 li
cp
186.96 445.56 mo
187.92 443.58 li
188.94 445.56 li
f
202.02 484.44 mo
202.02 484.86 202.38 485.28 202.86 485.28 cv
203.28 485.28 203.7 484.86 203.7 484.44 cv
203.7 483.96 203.28 483.6 202.86 483.6 cv
202.38 483.6 202.02 483.96 202.02 484.44 cv
ef
202.02 484.44 mo
202.02 484.86 202.38 485.28 202.86 485.28 cv
203.28 485.28 203.7 484.86 203.7 484.44 cv
203.7 483.96 203.28 483.6 202.86 483.6 cv
202.38 483.6 202.02 483.96 202.02 484.44 cv
cp
@
202.02 448.26 mo
202.02 448.68 202.38 449.1 202.86 449.1 cv
203.28 449.1 203.7 448.68 203.7 448.26 cv
203.7 447.78 203.28 447.36 202.86 447.36 cv
202.38 447.36 202.02 447.78 202.02 448.26 cv
ef
202.02 448.26 mo
202.02 448.68 202.38 449.1 202.86 449.1 cv
203.28 449.1 203.7 448.68 203.7 448.26 cv
203.7 447.78 203.28 447.36 202.86 447.36 cv
202.38 447.36 202.02 447.78 202.02 448.26 cv
cp
@
202.02 483.6 mo
200.34 481.02 li
@
203.64 483.6 mo
205.32 481.02 li
@
205.32 451.62 mo
203.64 449.1 li
@
202.2 449.1 mo
200.34 451.62 li
@
205.32 481.02 mo
205.32 451.62 li
@
200.34 481.02 mo
200.34 451.62 li
@
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
205.08 514.14 mo
(ooooo)
[-4.97879 -4.97882 -4.97879 -5.03821 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
211.26 479.22 mo
(x)sh
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
211.26 474.24 mo
(oooo)
[-4.97879 -4.97879 -5.03821 0 ]ysh
202.62 488.7 mo
202.62 486.78 li
202.68 486.6 li
202.92 486.6 li
202.98 486.78 li
202.98 488.7 li
202.92 488.82 li
202.8 488.88 li
202.68 488.82 li
202.62 488.7 li
cp
201.84 487.26 mo
202.8 485.28 li
203.82 487.26 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
202.62 447.06 mo
202.62 445.14 li
202.68 445.02 li
202.8 444.96 li
202.92 445.02 li
202.98 445.14 li
202.98 447.06 li
202.92 447.18 li
202.8 447.24 li
202.68 447.18 li
202.62 447.06 li
cp
201.84 445.62 mo
202.8 443.64 li
203.82 445.62 li
f
224.64 483.9 mo
224.64 484.38 225 484.74 225.48 484.74 cv
225.96 484.74 226.32 484.38 226.32 483.9 cv
226.32 483.48 225.96 483.06 225.48 483.06 cv
225 483.06 224.64 483.48 224.64 483.9 cv
ef
224.64 483.9 mo
224.64 484.38 225 484.74 225.48 484.74 cv
225.96 484.74 226.32 484.38 226.32 483.9 cv
226.32 483.48 225.96 483.06 225.48 483.06 cv
225 483.06 224.64 483.48 224.64 483.9 cv
cp
@
224.64 447.72 mo
224.64 448.2 225 448.56 225.48 448.56 cv
225.96 448.56 226.32 448.2 226.32 447.72 cv
226.32 447.24 225.96 446.88 225.48 446.88 cv
225 446.88 224.64 447.24 224.64 447.72 cv
ef
224.64 447.72 mo
224.64 448.2 225 448.56 225.48 448.56 cv
225.96 448.56 226.32 448.2 226.32 447.72 cv
226.32 447.24 225.96 446.88 225.48 446.88 cv
225 446.88 224.64 447.24 224.64 447.72 cv
cp
@
224.64 483.06 mo
222.96 480.54 li
@
226.26 483.06 mo
227.94 480.54 li
@
227.94 451.14 mo
226.26 448.56 li
@
224.82 448.56 mo
222.96 451.14 li
@
227.94 480.54 mo
227.94 451.14 li
@
222.96 480.54 mo
222.96 451.14 li
@
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
222 479.1 mo
(ooooo)
[-4.97879 -4.97882 -4.97879 -5.03821 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
233.88 478.68 mo
(x)sh
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
233.88 473.7 mo
(oooo)
[-4.97879 -4.97879 -5.03821 0 ]ysh
225.24 488.22 mo
225.24 486.24 li
225.3 486.12 li
225.42 486.06 li
225.6 486.12 li
225.6 488.34 li
225.42 488.4 li
225.3 488.34 li
225.24 488.22 li
cp
224.46 486.78 mo
225.42 484.74 li
226.44 486.78 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
225.24 446.58 mo
225.24 444.66 li
225.3 444.48 li
225.6 444.48 li
225.6 446.7 li
225.42 446.76 li
225.3 446.7 li
225.24 446.58 li
cp
224.46 445.14 mo
225.42 443.16 li
226.44 445.14 li
f
246.48 484.38 mo
246.48 484.8 246.9 485.22 247.32 485.22 cv
247.8 485.22 248.16 484.8 248.16 484.38 cv
248.16 483.9 247.8 483.54 247.32 483.54 cv
246.9 483.54 246.48 483.9 246.48 484.38 cv
ef
246.48 484.38 mo
246.48 484.8 246.9 485.22 247.32 485.22 cv
247.8 485.22 248.16 484.8 248.16 484.38 cv
248.16 483.9 247.8 483.54 247.32 483.54 cv
246.9 483.54 246.48 483.9 246.48 484.38 cv
cp
@
246.48 448.2 mo
246.48 448.62 246.9 449.04 247.32 449.04 cv
247.8 449.04 248.16 448.62 248.16 448.2 cv
248.16 447.72 247.8 447.3 247.32 447.3 cv
246.9 447.3 246.48 447.72 246.48 448.2 cv
ef
246.48 448.2 mo
246.48 448.62 246.9 449.04 247.32 449.04 cv
247.8 449.04 248.16 448.62 248.16 448.2 cv
248.16 447.72 247.8 447.3 247.32 447.3 cv
246.9 447.3 246.48 447.72 246.48 448.2 cv
cp
@
246.48 483.54 mo
244.8 480.96 li
@
248.1 483.54 mo
249.84 480.96 li
@
249.84 451.56 mo
248.1 449.04 li
@
246.66 449.04 mo
244.8 451.56 li
@
249.84 480.96 mo
249.84 451.56 li
@
244.8 480.96 mo
244.8 451.56 li
@
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
243.9 479.52 mo
(ooooo)
[-4.97879 -4.97882 -4.97879 -5.03821 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
255.78 474.36 mo
(x)sh
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
255.78 469.381 mo
(ooo)
[-4.97879 -4.97882 0 ]ysh
247.14 488.64 mo
247.14 486.72 li
247.2 486.54 li
247.44 486.54 li
247.5 486.72 li
247.5 488.64 li
247.44 488.76 li
247.32 488.82 li
247.2 488.76 li
247.14 488.64 li
cp
246.3 487.2 mo
247.32 485.22 li
248.34 487.2 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
247.14 447 mo
247.14 445.08 li
247.2 444.96 li
247.32 444.9 li
247.44 444.96 li
247.5 445.08 li
247.5 447 li
247.44 447.12 li
247.32 447.18 li
247.2 447.12 li
247.14 447 li
cp
246.3 445.56 mo
247.32 443.58 li
248.34 445.56 li
f
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
249.72 443.4 mo
(o)sh
268.86 484.56 mo
268.86 485.04 269.28 485.4 269.7 485.4 cv
270.18 485.4 270.54 485.04 270.54 484.56 cv
270.54 484.08 270.18 483.72 269.7 483.72 cv
269.28 483.72 268.86 484.08 268.86 484.56 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
268.86 484.56 mo
268.86 485.04 269.28 485.4 269.7 485.4 cv
270.18 485.4 270.54 485.04 270.54 484.56 cv
270.54 484.08 270.18 483.72 269.7 483.72 cv
269.28 483.72 268.86 484.08 268.86 484.56 cv
cp
@
268.86 448.38 mo
268.86 448.8 269.28 449.22 269.7 449.22 cv
270.18 449.22 270.54 448.8 270.54 448.38 cv
270.54 447.9 270.18 447.54 269.7 447.54 cv
269.28 447.54 268.86 447.9 268.86 448.38 cv
ef
268.86 448.38 mo
268.86 448.8 269.28 449.22 269.7 449.22 cv
270.18 449.22 270.54 448.8 270.54 448.38 cv
270.54 447.9 270.18 447.54 269.7 447.54 cv
269.28 447.54 268.86 447.9 268.86 448.38 cv
cp
@
268.86 483.72 mo
267.18 481.14 li
@
270.48 483.72 mo
272.16 481.14 li
@
272.16 451.74 mo
270.48 449.22 li
@
269.04 449.22 mo
267.18 451.74 li
@
272.16 481.14 mo
272.16 451.74 li
@
267.18 481.14 mo
267.18 451.74 li
@
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
266.28 475.02 mo
(oooo)
[-4.97879 -4.97882 -4.97879 0 ]ysh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
278.16 474.54 mo
(x)sh
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
278.16 469.561 mo
(ooo)
[-4.97879 -4.97882 0 ]ysh
269.52 488.82 mo
269.52 486.9 li
269.58 486.78 li
269.7 486.72 li
269.82 486.78 li
269.88 486.9 li
269.88 488.82 li
269.82 488.94 li
269.7 489 li
269.58 488.94 li
269.52 488.82 li
cp
268.68 487.38 mo
269.7 485.4 li
270.66 487.38 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
269.52 447.18 mo
269.52 445.26 li
269.58 445.14 li
269.7 445.08 li
269.82 445.14 li
269.88 445.26 li
269.88 447.18 li
269.82 447.36 li
269.58 447.36 li
269.52 447.18 li
cp
268.68 445.74 mo
269.7 443.76 li
270.66 445.74 li
f
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
272.1 443.58 mo
(oo)
[-4.97879 0 ]ysh
291.48 484.38 mo
291.48 484.8 291.9 485.22 292.32 485.22 cv
292.8 485.22 293.16 484.8 293.16 484.38 cv
293.16 483.9 292.8 483.54 292.32 483.54 cv
291.9 483.54 291.48 483.9 291.48 484.38 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
291.48 484.38 mo
291.48 484.8 291.9 485.22 292.32 485.22 cv
292.8 485.22 293.16 484.8 293.16 484.38 cv
293.16 483.9 292.8 483.54 292.32 483.54 cv
291.9 483.54 291.48 483.9 291.48 484.38 cv
cp
@
291.48 448.2 mo
291.48 448.62 291.9 449.04 292.32 449.04 cv
292.8 449.04 293.16 448.62 293.16 448.2 cv
293.16 447.72 292.8 447.3 292.32 447.3 cv
291.9 447.3 291.48 447.72 291.48 448.2 cv
ef
291.48 448.2 mo
291.48 448.62 291.9 449.04 292.32 449.04 cv
292.8 449.04 293.16 448.62 293.16 448.2 cv
293.16 447.72 292.8 447.3 292.32 447.3 cv
291.9 447.3 291.48 447.72 291.48 448.2 cv
cp
@
291.48 483.54 mo
289.8 480.96 li
@
293.1 483.54 mo
294.84 480.96 li
@
294.84 451.56 mo
293.1 449.04 li
@
291.66 449.04 mo
289.8 451.56 li
@
294.84 480.96 mo
294.84 451.56 li
@
289.8 480.96 mo
289.8 451.56 li
@
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
288.9 459.84 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
300.78 459.12 mo
(x)sh
292.14 488.64 mo
292.14 486.72 li
292.2 486.54 li
292.44 486.54 li
292.5 486.72 li
292.5 488.64 li
292.44 488.76 li
292.32 488.82 li
292.2 488.76 li
292.14 488.64 li
cp
291.3 487.2 mo
292.32 485.22 li
293.34 487.2 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
292.14 447 mo
292.14 445.08 li
292.2 444.96 li
292.32 444.9 li
292.44 444.96 li
292.5 445.08 li
292.5 447 li
292.44 447.12 li
292.32 447.18 li
292.2 447.12 li
292.14 447 li
cp
291.3 445.56 mo
292.32 443.58 li
293.34 445.56 li
f
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
294.72 443.4 mo
(oooooooo)
[-4.97879 -4.97879 -4.97879 -5.03821 -4.97879 -4.97879 -5.03821 0 ]ysh
313.68 484.74 mo
313.68 485.22 314.04 485.58 314.52 485.58 cv
315 485.58 315.36 485.22 315.36 484.74 cv
315.36 484.26 315 483.9 314.52 483.9 cv
314.04 483.9 313.68 484.26 313.68 484.74 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
313.68 484.74 mo
313.68 485.22 314.04 485.58 314.52 485.58 cv
315 485.58 315.36 485.22 315.36 484.74 cv
315.36 484.26 315 483.9 314.52 483.9 cv
314.04 483.9 313.68 484.26 313.68 484.74 cv
cp
@
313.68 448.56 mo
313.68 449.04 314.04 449.4 314.52 449.4 cv
315 449.4 315.36 449.04 315.36 448.56 cv
315.36 448.08 315 447.72 314.52 447.72 cv
314.04 447.72 313.68 448.08 313.68 448.56 cv
ef
313.68 448.56 mo
313.68 449.04 314.04 449.4 314.52 449.4 cv
315 449.4 315.36 449.04 315.36 448.56 cv
315.36 448.08 315 447.72 314.52 447.72 cv
314.04 447.72 313.68 448.08 313.68 448.56 cv
cp
@
313.68 483.9 mo
312 481.32 li
@
315.3 483.9 mo
316.98 481.32 li
@
316.98 451.98 mo
315.3 449.4 li
@
313.86 449.4 mo
312 451.98 li
@
316.98 481.32 mo
316.98 451.98 li
@
312 481.32 mo
312 451.98 li
@
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
311.1 458.94 mo
(o)sh
314.34 489 mo
314.34 486.96 li
314.52 486.9 li
314.64 486.96 li
314.7 487.08 li
314.7 489 li
314.64 489.12 li
314.52 489.18 li
314.34 489.12 li
314.34 489 li
cp
313.5 487.56 mo
314.52 485.58 li
315.48 487.56 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
314.34 447.36 mo
314.34 445.32 li
314.52 445.26 li
314.64 445.32 li
314.7 445.44 li
314.7 447.36 li
314.64 447.54 li
314.52 447.6 li
314.34 447.54 li
314.34 447.36 li
cp
313.5 445.98 mo
314.52 443.94 li
315.48 445.98 li
f
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
316.92 443.76 mo
(x)sh
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
316.92 438.78 mo
(oooooooo)
[-4.97879 -4.97882 -5.03818 -4.97879 -4.97882 -5.03818 -4.97879 0 ]ysh
328.86 484.8 mo
328.86 485.28 329.28 485.64 329.7 485.64 cv
330.18 485.64 330.54 485.28 330.54 484.8 cv
330.54 484.32 330.18 483.96 329.7 483.96 cv
329.28 483.96 328.86 484.32 328.86 484.8 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
328.86 484.8 mo
328.86 485.28 329.28 485.64 329.7 485.64 cv
330.18 485.64 330.54 485.28 330.54 484.8 cv
330.54 484.32 330.18 483.96 329.7 483.96 cv
329.28 483.96 328.86 484.32 328.86 484.8 cv
cp
@
328.86 448.62 mo
328.86 449.1 329.28 449.46 329.7 449.46 cv
330.18 449.46 330.54 449.1 330.54 448.62 cv
330.54 448.14 330.18 447.78 329.7 447.78 cv
329.28 447.78 328.86 448.14 328.86 448.62 cv
ef
328.86 448.62 mo
328.86 449.1 329.28 449.46 329.7 449.46 cv
330.18 449.46 330.54 449.1 330.54 448.62 cv
330.54 448.14 330.18 447.78 329.7 447.78 cv
329.28 447.78 328.86 448.14 328.86 448.62 cv
cp
@
328.86 483.96 mo
327.18 481.38 li
@
330.48 483.96 mo
332.16 481.38 li
@
332.16 452.04 mo
330.48 449.46 li
@
329.04 449.46 mo
327.18 452.04 li
@
332.16 481.38 mo
332.16 452.04 li
@
327.18 481.38 mo
327.18 452.04 li
@
329.52 489.06 mo
329.52 487.14 li
329.58 487.02 li
329.7 486.96 li
329.82 487.02 li
329.88 487.14 li
329.88 489.06 li
329.82 489.18 li
329.7 489.24 li
329.58 489.18 li
329.52 489.06 li
cp
328.68 487.62 mo
329.7 485.64 li
330.66 487.62 li
f
329.52 447.48 mo
329.52 445.5 li
329.58 445.38 li
329.7 445.32 li
329.82 445.38 li
329.88 445.5 li
329.88 447.48 li
329.82 447.6 li
329.7 447.66 li
329.58 447.6 li
329.52 447.48 li
cp
328.68 446.04 mo
329.7 444 li
330.66 446.04 li
f
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
332.1 443.82 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
332.1 438.84 mo
(x)sh
0 gry
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TIQPPB+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C0AE10AF89E3640E5FA79D7BBCA6A55D92CE2
2B86ADE2026877CED638BBD1D038B6C5AE7C6B3A0E455DCDF62CCEA75767688A
69D21C517ADCEC9A0C655792B4578CB6B74D47> |-
/parenright <1C60D8A8C9B81F2C3AF105008BF4C14977A5391C97502518193
ED7EC3F60D4E4A6A615277E5A76DF130278E01F945101C3D52F6F19B3C51C139
EAF392FE494F85B575CEA750D305AD09C5B0136> |-
/comma <1C60D8A8C9B854D0E60655E7F7F9E83D757EFA35086EED0E1F7E8A4C
D57C31A7DF335284A0C0F1E669> |-
/five <1C60D8A8C9B7EF32244A3E5F405B6D31E38A8EB7FBE5BAFC15835DF10
683C93AD804B5613AE64B5A58D8A22AA4318A2891CDF2D9FA16ACA439A9E54B8
8A475D9ABD1CB4EFDCF42DF6ED8297C59B8090B6E4B555FB696152B8F5A84767
58BEDA9F9B241E9B4EA7BFF7E> |-
/R <1C60D8A8C9B6079F4E60D063F0767E7F02FAC09A4010F4F0744E7BB7FD45
5FB6472FCC081F13976DD2CC9C30E89BAD096507542A0B90314DE7A4367ADD1E
412A0C92B1370A0844B40884679F91D8D6B7B5DBAD4EABF06DB35B8498117918
0699157C2C0BF36C5D1BFA24B06C1EDE922D86E780BE47A7050C9F38AF083E0C
F03CCAA0FF> |-
/i <1C60D8A8C9B88C084B70B34E18F97CF1997FF6644A06C3E9D2A9D91E0589
7D24E504390D1AACAF3599CA> |-
/n <1C60D8A8C9B7EF321358E32ACCD81AA16D19D782C50D8000CD7A7C03D382
AEFC72232E29A1B08D01004D3E9E50AA00D3BA506AE663B158755F270EA082AF
3827056B839C61FDB7B509318DF83E0B8CA2F21F3DB8BF9A12D0B81EEC234F1F
3832DAEA2C1BF9B7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIQPPB+ArialMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 53 /five put
dup 82 /R put
dup 105 /i put
dup 110 /n put
pop
%ADOEndSubsetFont
reset_gvm
/TIQPPB+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 8{/.notdef}rp /five 28{/.notdef}rp 
/R 22{/.notdef}rp /i 4{/.notdef}rp /n /o 144{/.notdef}rp]
TIQPPB+ArialMT nf
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
332.1 433.861 mo
(oooooooo)
[-4.97879 -5.03821 -4.97879 -4.97879 -5.03821 -4.97879 -4.97882 0 ]ysh
169.26 534.78 mo
(inRR\(5,5\))
[-1.98358 -22.5585 -6.48361 -6.48358 -2.98254 -4.98959 -2.48761 -4.98959 0 ]ysh
163.62 515.1 mo
164.82 515.1 li
164.82 523.5 li
167.16 523.5 li
167.16 515.1 li
168.3 515.1 li
165.96 512.34 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
163.62 515.1 mo
164.82 515.1 li
164.82 523.5 li
167.16 523.5 li
167.16 515.1 li
168.3 515.1 li
165.96 512.34 li
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TIQPPB+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7EF322BA6DCE9BD5DF3DFF7C357023322936E9155634E4F
EAE48170BD90CB497150A64DE8E375FCCE900D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIQPPB+ArialMT /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
reset_gvm
/TIQPPB+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp /one 3{/.notdef}rp 
/five 28{/.notdef}rp /R 22{/.notdef}rp /i 4{/.notdef}rp /n /o 
144{/.notdef}rp]
TIQPPB+ArialMT nf
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
169.32 456.84 mo
(RR\(1,1\))
[-6.48358 -6.48361 -2.98254 -4.98959 -2.48758 -4.98959 0 ]ysh
163.8 413.7 mo
165 413.7 li
165 422.1 li
167.34 422.1 li
167.34 413.7 li
168.48 413.7 li
166.14 410.88 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
163.8 413.7 mo
165 413.7 li
165 422.1 li
167.34 422.1 li
167.34 413.7 li
168.48 413.7 li
166.14 410.88 li
cp
@
0 gry
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TIQPPB+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/t <1C60D8A8C9B854D0DFA7F3C3CFE997A880BB6118223EC140BB1D072976EE
7376E92C1688A186F47CEAAFED94409C37AA8625569840A3000DBDC757F1162E
2C0A9076C5CFF3F8D5838450BDCD> |-
/u <1C60D8A8C9B7EF3211FDB400F617E7ECE548A197892E72A9234771BE08CC
6A8D56A742A5122BE141318E124044E0D30B7644714B00B3BB9E61860FF6B41C
B17A850FE04ABD34133958C1F083E2DB097DB78C54871A4F3A0E7E828AD0BBA0
152EE27D2C480103CEE5B367EED1D0AF3404> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIQPPB+ArialMT /Encoding get
dup 116 /t put
dup 117 /u put
pop
%ADOEndSubsetFont
reset_gvm
/TIQPPB+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp /one 3{/.notdef}rp 
/five 28{/.notdef}rp /R 22{/.notdef}rp /i 4{/.notdef}rp /n /o 
4{/.notdef}rp /t /u 138{/.notdef}rp]
TIQPPB+ArialMT nf
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
169.14 407.46 mo
(out)
[-4.97879 -4.97879 0 ]ysh
159.84 471.18 mo
160.68 470.34 li
166.62 476.28 li
168.24 474.6 li
162.3 468.66 li
163.14 467.82 li
159.54 467.52 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
159.84 471.18 mo
160.68 470.34 li
166.62 476.28 li
168.24 474.6 li
162.3 468.66 li
163.14 467.82 li
159.54 467.52 li
cp
@
173.34 471.24 mo
172.5 470.4 li
166.62 476.34 li
164.94 474.66 li
170.88 468.72 li
170.04 467.94 li
173.7 467.58 li
ef
173.34 471.24 mo
172.5 470.4 li
166.62 476.34 li
164.94 474.66 li
170.88 468.72 li
170.04 467.94 li
173.7 467.58 li
cp
@
166.2 462.48 mo
165.42 461.64 li
160.38 466.62 li
158.76 465 li
163.74 459.96 li
162.9 459.18 li
166.26 459.12 li
ef
166.2 462.48 mo
165.42 461.64 li
160.38 466.62 li
158.76 465 li
163.74 459.96 li
162.9 459.18 li
166.26 459.12 li
cp
@
166.98 462.66 mo
167.82 461.82 li
172.68 466.68 li
174.36 465 li
169.5 460.14 li
170.34 459.3 li
167.04 459.36 li
ef
166.98 462.66 mo
167.82 461.82 li
172.68 466.68 li
174.36 465 li
169.5 460.14 li
170.34 459.3 li
167.04 459.36 li
cp
@
gsave
180.84 488.46 mo
180.84 486.66 li
172.44 486.66 li
172.44 483.12 li
180.84 483.12 li
180.84 481.32 li
183.6 484.86 li
eclp
183.66 488.52 mo
183.66 481.26 li
172.38 481.26 li
172.38 488.52 li
cp
gsave
/0 /CSD get_res idxcs
clp
[0 -1 -1 0 695.88 198.72 ]ct
[7.26 0 0 11.28 -289.8 512.22 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 188 
/M[1 0 0 -188 0 188 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WiE)!s8W-!s8W-"9\i1"9\l3"U,&5"pP89"pP;;#7(S@#mgnF$47.K$OdFQ%1NdW%M'']&.oKe
&ebom'GV>u()Ic((`=51)]Th<*ZcCG+<_pR,UFca-R^Al.Olr"/M8\10etO@1c70M3&s#]4$5Yi5<qM$
6UX=27Rp!@8P2WL9hnJ\;,U=l<E3($=BSg3>[:ZC?t!MS@q9+]AnPdkC27U$D/O92EH6,BF`qtQ~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
180.84 451.38 mo
180.84 449.58 li
172.44 449.58 li
172.44 446.04 li
180.84 446.04 li
180.84 444.24 li
183.6 447.84 li
eclp
183.66 451.44 mo
183.66 444.18 li
172.38 444.18 li
172.38 451.44 li
cp
gsave
/0 /CSD get_res idxcs
clp
[0 -1 -1 0 695.88 198.72 ]ct
[7.26 0 0 11.28 -252.72 512.22 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 188 
/M[1 0 0 -188 0 188 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WiE)!s8W-!s8W-"9\i1"9\l3"U,&5"pP89"pP;;#7(S@#mgnF$47.K$OdFQ%1NdW%M'']&.oKe
&ebom'GV>u()Ic((`=51)]Th<*ZcCG+<_pR,UFca-R^Al.Olr"/M8\10etO@1c70M3&s#]4$5Yi5<qM$
6UX=27Rp!@8P2WL9hnJ\;,U=l<E3($=BSg3>[:ZC?t!MS@q9+]AnPdkC27U$D/O92EH6,BF`qtQ~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
249.24 313.92 mo
249.24 314.4 249.6 314.76 250.08 314.76 cv
250.56 314.76 250.92 314.4 250.92 313.92 cv
250.92 313.44 250.56 313.08 250.08 313.08 cv
249.6 313.08 249.24 313.44 249.24 313.92 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
249.24 313.92 mo
249.24 314.4 249.6 314.76 250.08 314.76 cv
250.56 314.76 250.92 314.4 250.92 313.92 cv
250.92 313.44 250.56 313.08 250.08 313.08 cv
249.6 313.08 249.24 313.44 249.24 313.92 cv
cp
@
249.24 313.08 mo
247.56 310.5 li
@
250.86 313.08 mo
252.54 310.5 li
252.54 274.32 li
@
247.56 310.5 mo
247.56 274.32 li
@
0 gry
true set_gvm
%ADOBeginSubsetFont: DWVAAA+SymbolMT Initial
ct_T42Dict begin
0 -0.219 1.109 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /DWVAAA+SymbolMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3284f3e872000000cc000000566376
74202ac4fb8500000124000005046670676df530c471000006280000050f
676c79667978e44b00001658000001a668656164c5ad5c6500000b380000
0036686865610f2d038100000b7000000024686d74787750493e00000b94
000002fc6c6f636119bf19bf00000e90000001826d617870020305a70000
1014000000206e616d65ed3c54f500001034000002ae707265707e0fc165
000012e40000037167646972000000000000000000000000000104cd0190
00050000059a053300000125059a0533000003a0006602120c0305050102
010706020507000000000000000000000000000000004d6f6e6f0040f020
f0ff058cfe460133080b01c280000000000000000000055d0031054c001f
054c001c0394001b0000ffe10000ffe10000ffe4fe59ffed056b0023fe6a
ffdc270f000000b4000000b4000000000000000000610025005e0029004a
00c200f000be012a005000c0ffd0006300580277002d004a008f00b700c0
00de004400640002001a017c0020ff9c008c0026008300a00039041affb5
004c00e8080f00160024003a016f000600150067009e01dc0049004b002d
003b00470089007200470051006700f7013801dc0001000a005d00610094
009b00be00ce00df00190026002e00d6010701f7ffbb004300530063007b
00b900de0542058b0013009100a700a900c100e5012e01a401ea03eeffb5
ffccffeb0026002900310036005b00620062009200a100a700a700cb0223
03a3ff1aff7bffa8ffc8001c004400ab00b400c100c500ce00f601200156
016302a60379fefaff6effab0000000c00150024003a003a0041004c004e
007400a500ce00d600fb0109010901820220023f0263fe11ff170007001f
0020002b00530055006d007e0088008d0094009a009f00af00e8013f0168
01cd01ee020d028002bf0550074e074e09bffdd5ff47fff6000c000c0021
00290057006b0078007e009200930096009a00a100a500c400c400f000fd
0136013b013e01490152018f018601a501f8022b02db02fb030e030f032c
03590360037c03e203f90805fd4ffe97fed0ff50ff78000100010006000a
0025004300440054005c007000730077007c00800088008e008e00900091
00ab00ab00b000b900bf00bf00c300dd00e300e300e600e800ec01020105
0109010a012a012a01300130013b0140014a0155015f01670173019701b6
01b801be01c501ea01f4023402360239024f0252026702700274029002b0
02b102bf02e402f302fb033a03450373037f03ab03c203c803d203da0400
044a046104690475049404b004d504f004f404fe050005230523052e0561
05a0fda2fe4bfe5bff26ff3bff62ff8dff90ff90ffe80007001e00250026
002700440050006200630066006700700070007100710079007e00850091
0096009e00a100a100a500b600b800bc00c000c200c500c600d000da00dd
00dd00e200f700f901000102010501150121012d01310136013d01470147
015a01680176017c0180018e019a01a501b101b501b501c001dc01ea01fe
023902560259025e0276027c028d0297029b02b902c002d602db02ff0306
030f03180347034b0357035b035e0374039603980399039e039f03b803c0
03c60402043a045004720483049004a204af04c704d304dc0530053b058a
058a05b005b505bd05e60612061b0634065306b80706087908e708fe00b3
00c700b100b5000000000000000000000000000000000188011001b100ad
01e70304038002cc0258020b02d6018204cf01270274023c0100058e006e
00f202c0021d01d2023701570363015a002500820166015b009d031c03a2
034a00cc056e0153035001640053049700fc05c30061058a02b20302058a
03fd01f902ab0068008e026bfda9ff59010e005301a402a600ab007d003c
0029041a00d6023904b90125022902bf07ae01b8003e07060339033a080f
07ae01a403e300000053080f01ea006103e2004c00e102a6035202a6080f
00e601dc074f006e00fd03af0000007d003e01a4fe1100a905590260011c
02a4014cfd83fdd8039bff9f011902e20000fd11fd41024301b60155ffaa
02be00ef0097fef904e000be02db005501dc0063006b007800f200530077
003a015600fc020d0029005300610070403f3f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b0042651582320b00d44235921212d2c20204518684420b001602045b0
4676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c
00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a23
4445b01923442d2c2045b00325456164b050515845441b2121592d2cb001
43632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b0074365
0a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58
b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d
2cb01243588745b0112bb0172344b0177ae41b038a45186920b01723448a
8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d
2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185592d
2c20b0032545b019234445b01a23444565234520b00325606a20b0092342
23688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a545823
21b03f1b235961441cb114008a5279b31940201945208a54582321b03f1b
235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d432343
0b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143234365
0b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b000
525823b002253823b002256538008a63381b212121212159012d2c4bb064
51584569b00943608a103a1b212121592d2c01b005251023208af500b001
6023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f5
00edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb0
2b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b80241
23701020b802414520b0005058b00161593a2f182d2c21210c6423648bb8
4000622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d
2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423
648bb84000626023212d2cb4000100000015b00826b00826b00826b00826
0f10161345683ab001162d2cb4000100000015b00826b00826b00826b008
260f1016134568653ab001162d2c4b53234b515a5820458a60441b212159
2d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c
4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c
4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c64
23646164b807085158b00425b00425012046b01060482046b0106048590a
21211b2121592d2cb012435c580cb00425b00425060c6423646164b80708
5158b00425b00425012046b8fff060482046b8fff06048590a21211b2121
592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b
2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b0
0426024b545a8a8a0ab012435c5a58381b2121592d000001000000028000
64e2bda95f0f3cf5081d080000000000a348bc3b00000000b24cd4e1ffff
fe3e08e7080b0000000b000100000000000000010000080bfe3e00000856
feabfc2e08740001000000000000000000000000000000be04cd00670000
000000fa00000200000002aa00e405b40061040000250464005106aa0047
063900480383003a02aa005402aa002d04000091046400250200006e0464
0025020000910239ffff0400004a040000f00400002c0400005304000020
04000062040000590400004c0400007c04000051023900ac0239008b0464
003c046400250464003c038d00580464002505c700140556002205c70012
04e5001a04e30027061b004804d3002305c7002602aa0033050c004e05c7
0025057d0014071d002505c7ffe805c7004c0625002305ee004a04730026
04bc003804e3003b05850016038300470625003805290042065c002504e3
001602aa00a706e7016a02aa004a054400250400ffef040003da050c0054
046400790464004603f4004503830049042b0047034affff04d3002d02a2
004304d300450464001504640031049c007c042b00280464005804640037
042b00590464006904d3004e0383002b049c004705b40041057d005003f2
005b057d002f03f4005b03d700d3019a00a403d700d60464003404f60013
01fa00790464003c0156feab05b4003604000000060600b9060601300606
00f7060600f60856002907e5004b04d3005d07e5004b04d3005d03330066
04640025034a00690464003c0464007905b4006603f4004103ae006a0464
0025046400250464002404640034080000e604d302390800ff8d05440020
069600e4057d002d065c005e07e501820625004e0625004e069600610625
004d0625004d05b4003805b4003705b4003b05b4003b05b4003a05b4010a
05b4010b0625005305b4004a0652006306520063071f00320696002e0464
00540200009105b4003004d3003004d300300856002907e5004c04d3005d
07e5004c04d3005d03f4002f02a200410652006306520063064a002a05b4
002b03120053031200530312005303120000031200000312000003f401a4
03f4001c03f401a403f401a40652007502a2003e02310000057d02a6057d
02a6057d00430312ff930312025d0312ff93031200230312028103120023
03f4001c01a4001c00000032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320085008500850085008500850085008500850085008500850085
00850085008500d300d300d300d300d300d300d300d300d300d300d300d3
00d300d300000001000000c0006700050000000000020010002f00400000
00ed050f000000000000000a007e0001000000000000007f000000010000
00000003000f007f0001000000000004000f008e0001000000000006000f
009d000300000409000000fe00ac0003000004090001001e01aa00030000
04090002000e01c80003000004090003001e01d60003000004090004001e
01f40003000004090006001e0212547970656661636520a920546865204d
6f6e6f7479706520436f72706f726174696f6e20706c632e204461746120
a920546865204d6f6e6f7479706520436f72706f726174696f6e20706c63
2f5479706520536f6c7574696f6e7320496e632e20313939302d31393932
2e20416c6c2052696768747320526573657276656441484a4642422b5379
6d626f6c4d5441484a4642422b53796d626f6c4d5441484a4642422b5379
6d626f6c4d5400540079007000650066006100630065002000a900200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e00200070006c0063002e00200044
006100740061002000a900200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
00200070006c0063002f005400790070006500200053006f006c00750074
0069006f006e007300200049006e0063002e00200031003900390030002d
0031003900390032002e00200041006c006c002000520069006700680074
007300200052006500730065007200760065006400410048004a00460042
0042002b00530079006d0062006f006c004d00540052006500670075006c
0061007200410048004a004600420042002b00530079006d0062006f006c
004d005400410048004a004600420042002b00530079006d0062006f006c
004d005400410048004a004600420042002b00530079006d0062006f006c
004d00540000411500120227022702260226006f01160001005f01160001
004f01160001003f01160001002f01160001022fb22f1f1fb8022eb2a01f
1fb8022cb21d291fb80224400be11a1f3127121f3c27291fb80217403b6c
291fe0aa191fe1aa191fab27321f883c321f833c321f2f3c321f7627321f
3c27291f27aa291f6f276f6d6f866f87043700161600000012110840b801
e3b655140914093790b801bf40390790bd0790b307906707906407905707
904607903607902e07902b079025079024071408120810080e080c080a08
0808060804080208000814b8ffe0402b0000010014061000000100060400
0001000410000001001002000001000200000001000002010802004a00b0
13034b024b5342b0382b4bb807ff52b0372b4bb007505b58b101018e59b0
382bb00288b801005458b801ffb101018e851bb0124358b9000101ff858d
1bb9000101ff858d5959014bb0c063004b6220b0f65323b8010a515ab005
234201b0124b004b5442180016763f183f123e113946443e113946443e11
3946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b
2b182b2b2b2b2b2b2b2b2b2b2b2b2b4b5079bc001f01750007001f0174b3
071f93072b2b2b4b5379bc00900175000700900174b3079093072b2b2b18
1db0964b5358b0aa1d59b0324b5358b0ff1d5901b341b5407b4565234560
23456560234560b08b766818b080622020b140b54565234520b003266062
636820b003266165b0b5236544b040234420b1417b4565234520b0032660
62636820b003266165b07b236544b0412344b1007b455458b17b406544b2
4140414523614459b9004e0162b12a8e456523456023456560234560b089
766818b080622020b9002a01624565234520b003266062636820b0032661
65b80162236544b02a234420b14e8e4565234520b003266062636820b003
266165b08e236544b04e2344b1008e455458b18e406544b24e404e452361
445945695342014b5058b108004259435c58b108004259b3020b0a124358
601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
002b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373737373001845694418
456944435c58b9ffc00280b2121f322b5900000000>
[423 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 100 162 <00010000fe880223058e0005007eba01ee000701ed401f060201011d0403
1404010004030001011d0405140401020405010401040203b801df401c05
0500010717171a00026b03006b0503580558041906078a21213f182b2b4e
f44de4e410ed10ed4e10456544e6003f3c4d10fd3c393901123987082e2b
057d10c487082e182b057d10c43130014644464409022301010223fe4901
b76bfe4801b8058efc7efc7c03840382>DWVAAA+SymbolMT AddT42Char 
1 0 0 <0002010000000500050000030007003b401e06076302010005046303000a
0605630303021a09070463010019082938182b4e10f43c4dfd3c4e10f63c
4d10fd3c003f3cfd3c3f3cfd3c3130211121112521112101000400fc2003
c0fc400500fb002004c0>DWVAAA+SymbolMT AddT42Char 
DWVAAA+SymbolMT /CharStrings get begin
/g162 162 def
end
DWVAAA+SymbolMT /Encoding get
dup 32 /g162 put
pop
end
%ADOEndSubsetFont
reset_gvm
/TIQPPD+SymbolMT /DWVAAA+SymbolMT findfont ct_VMDictPut
/TIQPPD+SymbolMT*1 
[32{/.notdef}rp /g162 223{/.notdef}rp]
TIQPPD+SymbolMT nf
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
252.36 345.66 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
252.36 345.66 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TIQPPB+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7EF322BCC006C030AB64D3EF833D53BD938867216DA205
B962D9925E09EE08B8DF37F6D3209FE507D562DC51C880758EA796E486DE516B
D20E232A65BA2969E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIQPPB+ArialMT /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
reset_gvm
/TIQPPB+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp /one 2{/.notdef}rp 
/four /five 28{/.notdef}rp /R 22{/.notdef}rp /i 4{/.notdef}rp /n 
/o 4{/.notdef}rp /t /u 138{/.notdef}rp]
TIQPPB+ArialMT nf
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
252.36 342.6 mo
(1,4)
[-4.91849 -2.52182 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: DWVAAA+SymbolMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal DWVAAA+SymbolMT gcheck setglobal} if
1 266 178 <0001003efe880261058e00050074401f0201011d04031404010004030100
0102001d05041405050401040104050500b8023a401d03030201061a0002
6b03006b0503580558041717190706078a21213f182b2b4e10456544f64d
e4e410ed10ed4e10e4003f3c4d10f43c123939011139872e2b087d10c487
082e182b057d10c431301301013301013e01b7fe496b01b8fe48fe880382
0384fc7cfc7e>DWVAAA+SymbolMT AddT42Char 
DWVAAA+SymbolMT /CharStrings get begin
/g178 178 def
end
DWVAAA+SymbolMT /Encoding get
dup 33 /g178 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
reset_gvm
/TIQPPD+SymbolMT*1 
[32{/.notdef}rp /g162 /g178 222{/.notdef}rp]
TIQPPD+SymbolMT nf
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
252.36 330.3 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
252.36 330.3 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
252.36 324.72 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
260.52 309.179 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
260.52 301.739 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
260.52 301.739 mo
( ) false chp
@
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TIQPPB+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7EF32244785CEA209A0B1AB0C166286B08980771F18A2
E624A38924FBFF483B4270DC9D2DC0993B70234B4EC1271E14F4287F0E8138B3
113D3A2C3498A3A798175EFF8586ADBE42A40FAC722F4FFCCFD944A826B23E73
4742DC56E9B6688C0E5FD7D21A139B312D91D5BDCE396FF7BBECCF42DB4AFC88
249D903E724B304FA10CF534B30789F272BA1A52010A84503E2C2B5833B0AC24
972C530E56F2DDCFAF7F3D2938A2BD7EE7BA1ABFF97A9E066AC38570B8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIQPPB+ArialMT /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
reset_gvm
/TIQPPB+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp /one /.notdef 
/three /four /five 28{/.notdef}rp /R 22{/.notdef}rp /i 4{/.notdef}rp 
/n /o 4{/.notdef}rp /t /u 138{/.notdef}rp]
TIQPPB+ArialMT nf
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
260.52 298.679 mo
(1,3)
[-5.00131 -2.4993 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
260.52 286.319 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
260.52 286.319 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
260.52 280.739 mo
(o)sh
249.9 318.18 mo
249.9 316.14 li
250.08 316.08 li
250.2 316.14 li
250.26 316.26 li
250.26 318.18 li
250.2 318.36 li
249.9 318.36 li
249.9 318.18 li
cp
249.06 316.74 mo
250.08 314.76 li
251.04 316.74 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
249.24 270.9 mo
249.24 271.38 249.6 271.74 250.08 271.74 cv
250.56 271.74 250.92 271.38 250.92 270.9 cv
250.92 270.48 250.56 270.06 250.08 270.06 cv
249.6 270.06 249.24 270.48 249.24 270.9 cv
ef
.375 lw
1 lc
1 lj
10 ml
249.24 270.9 mo
249.24 271.38 249.6 271.74 250.08 271.74 cv
250.56 271.74 250.92 271.38 250.92 270.9 cv
250.92 270.48 250.56 270.06 250.08 270.06 cv
249.6 270.06 249.24 270.48 249.24 270.9 cv
cp
@
252.54 274.32 mo
250.86 271.74 li
@
249.42 271.74 mo
247.56 274.32 li
@
249.9 269.76 mo
249.9 267.72 li
250.08 267.66 li
250.2 267.72 li
250.26 267.84 li
250.26 269.76 li
250.2 269.88 li
250.08 269.94 li
249.9 269.88 li
249.9 269.76 li
cp
249.06 268.32 mo
250.08 266.34 li
251.04 268.32 li
f
226.5 313.86 mo
226.5 314.34 226.86 314.7 227.34 314.7 cv
227.82 314.7 228.18 314.34 228.18 313.86 cv
228.18 313.38 227.82 313.02 227.34 313.02 cv
226.86 313.02 226.5 313.38 226.5 313.86 cv
ef
226.5 313.86 mo
226.5 314.34 226.86 314.7 227.34 314.7 cv
227.82 314.7 228.18 314.34 228.18 313.86 cv
228.18 313.38 227.82 313.02 227.34 313.02 cv
226.86 313.02 226.5 313.38 226.5 313.86 cv
cp
@
226.5 313.02 mo
224.82 310.44 li
@
228.12 313.02 mo
229.8 310.44 li
229.8 274.26 li
@
224.82 310.44 mo
224.82 274.26 li
@
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
229.56 353.1 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
229.56 353.1 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
229.56 350.04 mo
(1,4)
[-4.91849 -2.52182 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
229.56 337.74 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
229.56 337.74 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
229.56 332.16 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
229.56 324.66 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
237.78 301.62 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
237.78 301.62 mo
( ) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
237.78 298.56 mo
(1,3)
[-4.91849 -2.52182 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
237.78 286.26 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
237.78 286.26 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
237.78 280.68 mo
(o)sh
227.1 318.12 mo
227.1 316.2 li
227.16 316.08 li
227.34 316.02 li
227.46 316.08 li
227.52 316.2 li
227.52 318.12 li
227.46 318.3 li
227.16 318.3 li
227.1 318.12 li
cp
226.32 316.68 mo
227.34 314.7 li
228.3 316.68 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
226.5 270.84 mo
226.5 271.32 226.86 271.68 227.34 271.68 cv
227.82 271.68 228.18 271.32 228.18 270.84 cv
228.18 270.42 227.82 270 227.34 270 cv
226.86 270 226.5 270.42 226.5 270.84 cv
ef
.375 lw
1 lc
1 lj
10 ml
226.5 270.84 mo
226.5 271.32 226.86 271.68 227.34 271.68 cv
227.82 271.68 228.18 271.32 228.18 270.84 cv
228.18 270.42 227.82 270 227.34 270 cv
226.86 270 226.5 270.42 226.5 270.84 cv
cp
@
229.8 274.26 mo
228.12 271.68 li
@
226.68 271.68 mo
224.82 274.26 li
@
227.1 269.7 mo
227.1 267.78 li
227.16 267.6 li
227.46 267.6 li
227.52 267.78 li
227.52 269.7 li
227.46 269.82 li
227.34 269.88 li
227.16 269.82 li
227.1 269.7 li
cp
226.32 268.26 mo
227.34 266.28 li
228.3 268.26 li
f
206.1 313.92 mo
206.1 314.4 206.52 314.76 206.94 314.76 cv
207.42 314.76 207.84 314.4 207.84 313.92 cv
207.84 313.44 207.42 313.08 206.94 313.08 cv
206.52 313.08 206.1 313.44 206.1 313.92 cv
ef
206.1 313.92 mo
206.1 314.4 206.52 314.76 206.94 314.76 cv
207.42 314.76 207.84 314.4 207.84 313.92 cv
207.84 313.44 207.42 313.08 206.94 313.08 cv
206.52 313.08 206.1 313.44 206.1 313.92 cv
cp
@
206.1 313.08 mo
204.42 310.5 li
@
207.72 313.08 mo
209.46 310.5 li
209.46 274.32 li
@
204.42 310.5 mo
204.42 274.32 li
@
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
209.22 374.04 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
209.22 374.04 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
209.22 370.98 mo
(1,4)
[-4.91849 -2.52182 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
209.22 358.68 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
209.22 358.68 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
209.22 353.1 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
209.22 345.6 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
209.22 338.22 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
209.22 338.22 mo
( ) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
209.22 335.16 mo
(1,3)
[-5.00131 -2.4993 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
209.22 322.86 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
209.22 322.86 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
217.26 280.8 mo
(o)sh
206.76 318.18 mo
206.76 316.26 li
206.82 316.14 li
206.94 316.08 li
207.06 316.14 li
207.12 316.26 li
207.12 318.18 li
207.06 318.36 li
206.82 318.36 li
206.76 318.18 li
cp
205.92 316.74 mo
206.94 314.76 li
207.96 316.74 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
206.1 270.9 mo
206.1 271.38 206.52 271.74 206.94 271.74 cv
207.42 271.74 207.84 271.38 207.84 270.9 cv
207.84 270.48 207.42 270.06 206.94 270.06 cv
206.52 270.06 206.1 270.48 206.1 270.9 cv
ef
.375 lw
1 lc
1 lj
10 ml
206.1 270.9 mo
206.1 271.38 206.52 271.74 206.94 271.74 cv
207.42 271.74 207.84 271.38 207.84 270.9 cv
207.84 270.48 207.42 270.06 206.94 270.06 cv
206.52 270.06 206.1 270.48 206.1 270.9 cv
cp
@
209.46 274.32 mo
207.72 271.74 li
@
206.34 271.74 mo
204.42 274.32 li
@
206.76 269.76 mo
206.76 267.84 li
206.82 267.72 li
206.94 267.66 li
207.06 267.72 li
207.12 267.84 li
207.12 269.76 li
207.06 269.88 li
206.94 269.94 li
206.82 269.88 li
206.76 269.76 li
cp
205.92 268.32 mo
206.94 266.34 li
207.96 268.32 li
f
187.92 313.92 mo
187.92 314.4 188.34 314.76 188.76 314.76 cv
189.24 314.76 189.6 314.4 189.6 313.92 cv
189.6 313.44 189.24 313.08 188.76 313.08 cv
188.34 313.08 187.92 313.44 187.92 313.92 cv
ef
187.92 313.92 mo
187.92 314.4 188.34 314.76 188.76 314.76 cv
189.24 314.76 189.6 314.4 189.6 313.92 cv
189.6 313.44 189.24 313.08 188.76 313.08 cv
188.34 313.08 187.92 313.44 187.92 313.92 cv
cp
@
187.92 313.08 mo
186.24 310.5 li
@
189.54 313.08 mo
191.22 310.5 li
191.22 274.32 li
@
186.24 310.5 mo
186.24 274.32 li
@
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
191.04 381.54 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
191.04 381.54 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
191.04 378.48 mo
(1,4)
[-4.91849 -2.52182 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
191.04 366.18 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
191.04 366.18 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
191.04 360.6 mo
(o)sh
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
191.04 353.1 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
191.04 345.72 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
191.04 345.72 mo
( ) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
191.04 342.66 mo
(1,3)
[-5.00131 -2.4993 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
191.04 330.3 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
191.04 330.3 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
191.04 324.781 mo
(o)sh
188.58 318.18 mo
188.58 316.26 li
188.64 316.14 li
188.76 316.08 li
188.88 316.14 li
188.94 316.26 li
188.94 318.18 li
188.88 318.36 li
188.64 318.36 li
188.58 318.18 li
cp
187.74 316.74 mo
188.76 314.76 li
189.72 316.74 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
187.92 270.9 mo
187.92 271.38 188.34 271.74 188.76 271.74 cv
189.24 271.74 189.6 271.38 189.6 270.9 cv
189.6 270.48 189.24 270.06 188.76 270.06 cv
188.34 270.06 187.92 270.48 187.92 270.9 cv
ef
.375 lw
1 lc
1 lj
10 ml
187.92 270.9 mo
187.92 271.38 188.34 271.74 188.76 271.74 cv
189.24 271.74 189.6 271.38 189.6 270.9 cv
189.6 270.48 189.24 270.06 188.76 270.06 cv
188.34 270.06 187.92 270.48 187.92 270.9 cv
cp
@
191.22 274.32 mo
189.54 271.74 li
@
188.1 271.74 mo
186.24 274.32 li
@
188.58 269.76 mo
188.58 267.84 li
188.64 267.72 li
188.76 267.66 li
188.88 267.72 li
188.94 267.84 li
188.94 269.76 li
188.88 269.88 li
188.76 269.94 li
188.64 269.88 li
188.58 269.76 li
cp
187.74 268.32 mo
188.76 266.34 li
189.72 268.32 li
f
277.86 313.92 mo
277.86 314.4 278.28 314.76 278.7 314.76 cv
279.18 314.76 279.54 314.4 279.54 313.92 cv
279.54 313.44 279.18 313.08 278.7 313.08 cv
278.28 313.08 277.86 313.44 277.86 313.92 cv
ef
277.86 313.92 mo
277.86 314.4 278.28 314.76 278.7 314.76 cv
279.18 314.76 279.54 314.4 279.54 313.92 cv
279.54 313.44 279.18 313.08 278.7 313.08 cv
278.28 313.08 277.86 313.44 277.86 313.92 cv
cp
@
277.86 313.08 mo
276.18 310.5 li
@
279.48 313.08 mo
281.16 310.5 li
281.16 274.32 li
@
276.18 310.5 mo
276.18 274.32 li
@
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
280.98 338.16 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
280.98 338.16 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
280.98 335.1 mo
(1,4)
[-4.91849 -2.52182 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
280.98 322.86 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
280.98 322.86 mo
(!) false chp
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
289.14 309.18 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
289.14 301.74 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
289.14 301.74 mo
( ) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
289.14 298.68 mo
(1,3)
[-5.00131 -2.4993 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
289.14 286.32 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
289.14 286.32 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
289.14 280.74 mo
(o)sh
278.52 318.18 mo
278.52 316.26 li
278.58 316.14 li
278.7 316.08 li
278.82 316.14 li
278.88 316.26 li
278.88 318.18 li
278.82 318.36 li
278.58 318.36 li
278.52 318.18 li
cp
277.68 316.74 mo
278.7 314.76 li
279.66 316.74 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
277.86 270.9 mo
277.86 271.38 278.28 271.74 278.7 271.74 cv
279.18 271.74 279.54 271.38 279.54 270.9 cv
279.54 270.48 279.18 270.06 278.7 270.06 cv
278.28 270.06 277.86 270.48 277.86 270.9 cv
ef
.375 lw
1 lc
1 lj
10 ml
277.86 270.9 mo
277.86 271.38 278.28 271.74 278.7 271.74 cv
279.18 271.74 279.54 271.38 279.54 270.9 cv
279.54 270.48 279.18 270.06 278.7 270.06 cv
278.28 270.06 277.86 270.48 277.86 270.9 cv
cp
@
281.16 274.32 mo
279.48 271.74 li
@
278.04 271.74 mo
276.18 274.32 li
@
278.52 269.76 mo
278.52 267.84 li
278.58 267.72 li
278.7 267.66 li
278.82 267.72 li
278.88 267.84 li
278.88 269.76 li
278.82 269.88 li
278.7 269.94 li
278.58 269.88 li
278.52 269.76 li
cp
277.68 268.32 mo
278.7 266.34 li
279.66 268.32 li
f
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
273.12 280.86 mo
(o)sh
308.4 313.56 mo
308.4 314.04 308.76 314.4 309.24 314.4 cv
309.66 314.4 310.08 314.04 310.08 313.56 cv
310.08 313.08 309.66 312.72 309.24 312.72 cv
308.76 312.72 308.4 313.08 308.4 313.56 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
308.4 313.56 mo
308.4 314.04 308.76 314.4 309.24 314.4 cv
309.66 314.4 310.08 314.04 310.08 313.56 cv
310.08 313.08 309.66 312.72 309.24 312.72 cv
308.76 312.72 308.4 313.08 308.4 313.56 cv
cp
@
308.4 312.72 mo
306.66 310.14 li
@
310.02 312.72 mo
311.7 310.14 li
311.7 273.96 li
@
306.66 310.14 mo
306.66 273.96 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
319.62 308.82 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
319.62 301.38 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
319.62 301.38 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
319.62 298.32 mo
(1,3)
[-5.00131 -2.4993 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
319.62 285.96 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
319.62 285.96 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
319.62 280.38 mo
(o)sh
309 317.82 mo
309 315.9 li
309.06 315.78 li
309.18 315.72 li
309.3 315.78 li
309.36 315.9 li
309.36 317.82 li
309.3 317.94 li
309.18 318 li
309.06 317.94 li
309 317.82 li
cp
308.16 316.38 mo
309.18 314.4 li
310.2 316.38 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
308.4 270.54 mo
308.4 271.02 308.76 271.38 309.24 271.38 cv
309.66 271.38 310.08 271.02 310.08 270.54 cv
310.08 270.06 309.66 269.7 309.24 269.7 cv
308.76 269.7 308.4 270.06 308.4 270.54 cv
ef
.375 lw
1 lc
1 lj
10 ml
308.4 270.54 mo
308.4 271.02 308.76 271.38 309.24 271.38 cv
309.66 271.38 310.08 271.02 310.08 270.54 cv
310.08 270.06 309.66 269.7 309.24 269.7 cv
308.76 269.7 308.4 270.06 308.4 270.54 cv
cp
@
311.7 273.96 mo
310.02 271.38 li
@
308.58 271.38 mo
306.66 273.96 li
@
309 269.4 mo
309 267.48 li
309.06 267.3 li
309.18 267.24 li
309.3 267.3 li
309.36 267.48 li
309.36 269.4 li
309.3 269.52 li
309.18 269.58 li
309.06 269.52 li
309 269.4 li
cp
308.16 267.96 mo
309.18 265.98 li
310.2 267.96 li
f
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
303.78 301.38 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
303.78 301.38 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
303.78 298.32 mo
(1,4)
[-4.91849 -2.52182 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
303.78 286.02 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
303.78 286.02 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
303.78 280.44 mo
(o)sh
217.38 114.06 mo
217.38 114.54 217.74 114.9 218.22 114.9 cv
218.7 114.9 219.06 114.54 219.06 114.06 cv
219.06 113.58 218.7 113.22 218.22 113.22 cv
217.74 113.22 217.38 113.58 217.38 114.06 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.375 lw
1 lc
1 lj
10 ml
217.38 114.06 mo
217.38 114.54 217.74 114.9 218.22 114.9 cv
218.7 114.9 219.06 114.54 219.06 114.06 cv
219.06 113.58 218.7 113.22 218.22 113.22 cv
217.74 113.22 217.38 113.58 217.38 114.06 cv
cp
@
217.38 113.22 mo
215.7 110.64 li
@
219 113.22 mo
220.68 110.64 li
220.68 74.46 li
@
215.7 110.64 mo
215.7 74.46 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
228.66 101.82 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
228.66 94.3797 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
228.66 94.3797 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
228.66 91.3197 mo
(1,3)
[-5.00128 -2.49933 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
228.66 79.0194 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
228.66 79.0194 mo
(!) false chp
@
217.98 118.32 mo
217.98 116.4 li
218.04 116.28 li
218.16 116.22 li
218.34 116.28 li
218.4 116.4 li
218.4 118.32 li
218.34 118.44 li
218.16 118.5 li
218.04 118.44 li
217.98 118.32 li
cp
217.2 116.88 mo
218.16 114.9 li
219.18 116.88 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
217.38 71.04 mo
217.38 71.52 217.74 71.8801 218.22 71.8801 cv
218.7 71.8801 219.06 71.52 219.06 71.04 cv
219.06 70.5601 218.7 70.2 218.22 70.2 cv
217.74 70.2 217.38 70.5601 217.38 71.04 cv
ef
.375 lw
1 lc
1 lj
10 ml
217.38 71.04 mo
217.38 71.52 217.74 71.88 218.22 71.88 cv
218.7 71.88 219.06 71.52 219.06 71.04 cv
219.06 70.56 218.7 70.2 218.22 70.2 cv
217.74 70.2 217.38 70.56 217.38 71.04 cv
cp
@
220.68 74.46 mo
219 71.88 li
@
217.56 71.88 mo
215.7 74.46 li
@
217.98 69.9 mo
217.98 67.98 li
218.04 67.8 li
218.16 67.7401 li
218.34 67.8 li
218.4 67.98 li
218.4 69.9 li
218.34 70.02 li
218.16 70.08 li
218.04 70.02 li
217.98 69.9 li
cp
217.2 68.46 mo
218.16 66.48 li
219.18 68.46 li
f
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
212.76 102.06 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
212.76 102.06 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
212.76 99 mo
(1,4)
[-4.91852 -2.52179 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
212.76 86.6997 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
212.76 86.6997 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
212.76 81.1197 mo
(o)sh
220.56 65.0997 mo
(o)sh
245.88 114.18 mo
245.88 114.66 246.24 115.02 246.72 115.02 cv
247.2 115.02 247.56 114.66 247.56 114.18 cv
247.56 113.7 247.2 113.34 246.72 113.34 cv
246.24 113.34 245.88 113.7 245.88 114.18 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.375 lw
1 lc
1 lj
10 ml
245.88 114.18 mo
245.88 114.66 246.24 115.02 246.72 115.02 cv
247.2 115.02 247.56 114.66 247.56 114.18 cv
247.56 113.7 247.2 113.34 246.72 113.34 cv
246.24 113.34 245.88 113.7 245.88 114.18 cv
cp
@
245.88 113.34 mo
244.2 110.76 li
@
247.5 113.34 mo
249.18 110.76 li
249.18 74.58 li
@
244.2 110.76 mo
244.2 74.5799 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
257.16 101.94 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
257.16 94.4997 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
257.16 94.4997 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
257.16 91.4397 mo
(1,3)
[-5.00128 -2.49933 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
257.16 79.1394 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
257.16 79.1394 mo
(!) false chp
@
246.48 118.44 mo
246.48 116.52 li
246.54 116.4 li
246.66 116.34 li
246.84 116.4 li
246.9 116.52 li
246.9 118.44 li
246.84 118.56 li
246.66 118.62 li
246.54 118.56 li
246.48 118.44 li
cp
245.7 117 mo
246.66 115.02 li
247.68 117 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
245.88 71.16 mo
245.88 71.64 246.24 72.0001 246.72 72.0001 cv
247.2 72.0001 247.56 71.64 247.56 71.16 cv
247.56 70.6801 247.2 70.32 246.72 70.32 cv
246.24 70.32 245.88 70.6801 245.88 71.16 cv
ef
.375 lw
1 lc
1 lj
10 ml
245.88 71.16 mo
245.88 71.64 246.24 72 246.72 72 cv
247.2 72 247.56 71.64 247.56 71.16 cv
247.56 70.68 247.2 70.32 246.72 70.32 cv
246.24 70.32 245.88 70.68 245.88 71.16 cv
cp
@
249.18 74.58 mo
247.5 72 li
@
246.06 72 mo
244.2 74.58 li
@
246.48 70.02 mo
246.48 68.1 li
246.54 67.92 li
246.66 67.86 li
246.84 67.92 li
246.9 68.1 li
246.9 70.02 li
246.84 70.14 li
246.66 70.2 li
246.54 70.14 li
246.48 70.02 li
cp
245.7 68.58 mo
246.66 66.6 li
247.68 68.58 li
f
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
241.26 94.68 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
241.26 94.68 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
241.26 91.62 mo
(1,4)
[-4.91852 -2.52179 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
241.26 79.38 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
241.26 79.38 mo
(!) false chp
@
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TIQPPB+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D0F4790807CBACD8FD659970B8> |-
/p <1C60D8A8C9B7EF321358E32AAA345A5AF7CCBB1B651263DA97D7C5AD4C64
3ABAC27108E1DC5F64D49651712DD7CE0160F049F6EAB9902AA41DF02BCF26FA
46D961F9B17F535020755D6B92404E78327CEC4AF30ECBF0272F4F90D10655F4
9F35FD26E66BF3BA885DEFB8EF681D39EDE55C6486BE902F809F2A18F9343840
2E800ADB6004F556B7630C5D9436F57AA86148630065BC5512A0B98761542B41
43ECE97D8275> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIQPPB+ArialMT /Encoding get
dup 32 /space put
dup 112 /p put
pop
%ADOEndSubsetFont
reset_gvm
/TIQPPB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp 
/one /.notdef /three /four /five 28{/.notdef}rp /R 22{/.notdef}rp 
/i 4{/.notdef}rp /n /o /p 3{/.notdef}rp /t /u 
138{/.notdef}rp]
TIQPPB+ArialMT nf
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
249.06 65.2203 mo
(o o)
[-4.97882 -2.52179 0 ]ysh
169.14 373.5 mo
(inputRR\(5,5\))
[-1.98001 -4.98599 -4.98599 -4.98599 -20.3418 -6.48001 -6.48001 -2.97891 -4.98602 -2.48401 -4.98599 0 
]ysh
163.5 341.1 mo
164.7 341.1 li
164.7 349.5 li
167.04 349.5 li
167.04 341.1 li
168.18 341.1 li
165.84 338.34 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
.375 lw
1 lc
1 lj
10 ml
163.5 341.1 mo
164.7 341.1 li
164.7 349.5 li
167.04 349.5 li
167.04 341.1 li
168.18 341.1 li
165.84 338.34 li
cp
@
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
169.2 282.84 mo
(RR\(1,1\))
[-6.4845 -6.4845 -2.98343 -4.99051 -2.48849 -4.99051 0 ]ysh
163.68 239.7 mo
164.88 239.7 li
164.88 248.1 li
167.22 248.1 li
167.22 239.7 li
168.36 239.7 li
166.02 236.88 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
163.68 239.7 mo
164.88 239.7 li
164.88 248.1 li
167.22 248.1 li
167.22 239.7 li
168.36 239.7 li
166.02 236.88 li
cp
@
0 gry
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
169.02 233.46 mo
(output)
[-4.98599 -4.98599 -2.48401 -4.98599 -4.98599 0 ]ysh
159.72 297.18 mo
160.56 296.34 li
166.44 302.28 li
168.12 300.6 li
162.18 294.66 li
163.02 293.82 li
159.36 293.52 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.50196 .50196 .50196 colr
ef
159.72 297.18 mo
160.56 296.34 li
166.44 302.28 li
168.12 300.6 li
162.18 294.66 li
163.02 293.82 li
159.36 293.52 li
cp
@
173.22 297.24 mo
172.38 296.4 li
166.44 302.34 li
164.82 300.66 li
170.76 294.72 li
169.92 293.94 li
173.52 293.58 li
ef
173.22 297.24 mo
172.38 296.4 li
166.44 302.34 li
164.82 300.66 li
170.76 294.72 li
169.92 293.94 li
173.52 293.58 li
cp
@
166.08 288.48 mo
165.3 287.64 li
160.26 292.62 li
158.64 291 li
163.62 285.96 li
162.78 285.18 li
166.14 285.12 li
ef
166.08 288.48 mo
165.3 287.64 li
160.26 292.62 li
158.64 291 li
163.62 285.96 li
162.78 285.18 li
166.14 285.12 li
cp
@
166.86 288.66 mo
167.7 287.82 li
172.56 292.68 li
174.24 291 li
169.38 286.14 li
170.16 285.3 li
166.92 285.36 li
ef
166.86 288.66 mo
167.7 287.82 li
172.56 292.68 li
174.24 291 li
169.38 286.14 li
170.16 285.3 li
166.92 285.36 li
cp
@
gsave
180.72 317.64 mo
180.72 315.84 li
172.32 315.84 li
172.32 312.3 li
180.72 312.3 li
180.72 310.5 li
183.48 314.1 li
eclp
183.54 317.7 mo
183.54 310.44 li
172.26 310.44 li
172.26 317.7 li
cp
gsave
/1 /CSD get_res idxcs
clp
[0 -1 -1 0 695.88 198.72 ]ct
[7.26 0 0 11.28 -118.98 512.34 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 188 
/M[1 0 0 -188 0 188 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WiE)!s8W-!s8W-"9\i1"9\l3"U,&5"pP89"pP;;#7(S@#mgnF$47.K$k*OR%1NdW%M'']&.oKe
&ebom'GV>u(Ddl)(`=51)]Th<*ZcCG+<_pR,UFca-R^Al.Olr"/M8\10etO@1c70M3&s#]4$5Yi5<qM$
6UX=27Rp!@8P2WL9hnJ\;,U=l<E3($=BSg3>[:ZC?t!MS@q9+]AnPdkC27X%D/O92EH6,BF`qtR~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
180.72 274.56 mo
180.72 272.82 li
172.32 272.82 li
172.32 269.22 li
180.72 269.22 li
180.72 267.48 li
183.48 271.02 li
eclp
183.54 274.62 mo
183.54 267.42 li
172.26 267.42 li
172.26 274.62 li
cp
gsave
/1 /CSD get_res idxcs
clp
[0 -1 -1 0 695.88 198.72 ]ct
[7.2 0 0 11.28 -75.9 512.34 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 188 
/M[1 0 0 -188 0 188 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WiE)!s8W-!s8W-"9\i1"9\l3"U,&5"pP89"pP;;#7(S@#mgnF$47.K$k*OR%1NdW%M'']&.oKe
&ebom'GV>u(Ddl)(`=51)]Th<*ZcCG+<_pR,UFca-R^Al.Olr"/M8\10etO@1c70M3&s#]4$5Yi5<qM$
6UX=27Rp!@8P2WL9hnJ\;,U=l<E3($=BSg3>[:ZC?t!MS@q9+]AnPdkC27X%D/O92EH6,BF`qtR~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
275.34 114.72 mo
275.34 115.2 275.7 115.56 276.18 115.56 cv
276.6 115.56 277.02 115.2 277.02 114.72 cv
277.02 114.24 276.6 113.88 276.18 113.88 cv
275.7 113.88 275.34 114.24 275.34 114.72 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
275.34 114.72 mo
275.34 115.2 275.7 115.56 276.18 115.56 cv
276.6 115.56 277.02 115.2 277.02 114.72 cv
277.02 114.24 276.6 113.88 276.18 113.88 cv
275.7 113.88 275.34 114.24 275.34 114.72 cv
cp
@
275.34 113.88 mo
273.6 111.3 li
@
276.96 113.88 mo
278.64 111.3 li
278.64 75.12 li
@
273.6 111.3 mo
273.6 75.12 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
286.44 81.66 mo
(x)sh
275.94 119.04 mo
275.94 117.06 li
276 116.94 li
276.12 116.88 li
276.24 116.94 li
276.3 117.06 li
276.3 119.04 li
276.24 119.16 li
276.12 119.22 li
276 119.16 li
275.94 119.04 li
cp
275.1 117.6 mo
276.12 115.56 li
277.14 117.6 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
275.34 71.76 mo
275.34 72.18 275.7 72.6 276.18 72.6 cv
276.6 72.6 277.02 72.18 277.02 71.76 cv
277.02 71.28 276.6 70.86 276.18 70.86 cv
275.7 70.86 275.34 71.28 275.34 71.76 cv
ef
275.34 71.76 mo
275.34 72.18 275.7 72.6 276.18 72.6 cv
276.6 72.6 277.02 72.18 277.02 71.76 cv
277.02 71.28 276.6 70.86 276.18 70.86 cv
275.7 70.86 275.34 71.28 275.34 71.76 cv
cp
@
278.64 75.12 mo
276.96 72.6 li
@
275.52 72.6 mo
273.6 75.12 li
@
275.94 70.56 mo
275.94 68.64 li
276 68.52 li
276.12 68.46 li
276.24 68.52 li
276.3 68.64 li
276.3 70.56 li
276.24 70.68 li
276.12 70.74 li
276 70.68 li
275.94 70.56 li
cp
275.1 69.12 mo
276.12 67.14 li
277.14 69.12 li
f
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
270.72 95.28 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
270.72 95.28 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
270.72 92.22 mo
(1,1)
[-4.91852 -2.52179 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
270.72 79.98 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
270.72 79.98 mo
(!) false chp
@
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
278.64 65.7601 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
278.64 65.7601 mo
( ) false chp
@
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TIQPPB+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7EF3267924C0E841D844D96E52D213648D8C77257F2277B
A4C41FB5CAF249253485C39B4DE4DC6EDB2B1015C856CF7517B514C527C22A86
B6B9D1C6F1114C96115314170D8261584309E37DE43EA36E0BC6C93BC2D7793C
3C49D34F50BC163C785C4D45779EEA84466CA0BBF46D1A8CF13659> |-
/six <1C60D8A8C9B7EF3269F625B6673B9EA52CBA62CA672C606BDB5B836B17
C2CE80FAB2D897CADEAB175E6C7DC01291E9F7084B4CBF4BC2C2DC4CD8B1CF88
C1312A30A6A1D5F0021F394973BE4EB0C30E6B34C0E729C5127993481ED48F35
3CCB40BC49153F289F22306CD57489660BDF3D9EB6D0D1FB1EA6FEEC6C28437D
C20763E0A7D9F9FB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIQPPB+ArialMT /Encoding get
dup 50 /two put
dup 54 /six put
pop
%ADOEndSubsetFont
reset_gvm
/TIQPPB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 4{/.notdef}rp 
/one /two /three /four /five /six 27{/.notdef}rp /R 
22{/.notdef}rp /i 4{/.notdef}rp /n /o /p 3{/.notdef}rp /t 
/u 138{/.notdef}rp]
TIQPPB+ArialMT nf
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
278.64 62.7001 mo
(2,6)
[-4.91852 -2.52179 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
278.64 50.3998 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
278.64 50.3998 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
278.64 44.8198 mo
(o o)
[-4.97882 -2.52179 0 ]ysh
303.6 114.36 mo
303.6 114.84 304.02 115.2 304.44 115.2 cv
304.92 115.2 305.34 114.84 305.34 114.36 cv
305.34 113.88 304.92 113.52 304.44 113.52 cv
304.02 113.52 303.6 113.88 303.6 114.36 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.375 lw
1 lc
1 lj
10 ml
303.6 114.36 mo
303.6 114.84 304.02 115.2 304.44 115.2 cv
304.92 115.2 305.34 114.84 305.34 114.36 cv
305.34 113.88 304.92 113.52 304.44 113.52 cv
304.02 113.52 303.6 113.88 303.6 114.36 cv
cp
@
303.6 113.52 mo
301.92 110.94 li
@
305.22 113.52 mo
306.96 110.94 li
306.96 74.76 li
@
301.92 110.94 mo
301.92 74.7599 li
@
304.26 118.62 mo
304.26 116.7 li
304.32 116.58 li
304.44 116.52 li
304.56 116.58 li
304.62 116.7 li
304.62 118.62 li
304.56 118.8 li
304.32 118.8 li
304.26 118.62 li
cp
303.42 117.18 mo
304.44 115.2 li
305.46 117.18 li
f
303.6 71.34 mo
303.6 71.82 304.02 72.1801 304.44 72.1801 cv
304.92 72.1801 305.34 71.82 305.34 71.34 cv
305.34 70.92 304.92 70.5 304.44 70.5 cv
304.02 70.5 303.6 70.92 303.6 71.34 cv
ef
303.6 71.34 mo
303.6 71.82 304.02 72.18 304.44 72.18 cv
304.92 72.18 305.34 71.82 305.34 71.34 cv
305.34 70.92 304.92 70.5 304.44 70.5 cv
304.02 70.5 303.6 70.92 303.6 71.34 cv
cp
@
306.96 74.76 mo
305.22 72.18 li
@
303.84 72.18 mo
301.92 74.76 li
@
304.26 70.2 mo
304.26 68.28 li
304.32 68.1 li
304.56 68.1 li
304.62 68.28 li
304.62 70.2 li
304.56 70.32 li
304.44 70.38 li
304.32 70.32 li
304.26 70.2 li
cp
303.42 68.76 mo
304.44 66.78 li
305.46 68.76 li
f
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
299.04 94.86 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
299.04 94.86 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
299.04 91.8 mo
(1,1)
[-4.91852 -2.52179 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
299.04 79.56 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
299.04 79.56 mo
(!) false chp
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
306.96 65.4003 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
306.96 57.96 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
306.96 57.96 mo
( ) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
306.96 54.9 mo
(2,6)
[-5.00128 -2.49933 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
306.96 42.5403 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
306.96 42.5403 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
306.96 36.9603 mo
(o o)
[-4.97882 -2.52179 0 ]ysh
324.24 114.12 mo
324.24 114.6 324.6 114.96 325.08 114.96 cv
325.56 114.96 325.92 114.6 325.92 114.12 cv
325.92 113.64 325.56 113.28 325.08 113.28 cv
324.6 113.28 324.24 113.64 324.24 114.12 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.375 lw
1 lc
1 lj
10 ml
324.24 114.12 mo
324.24 114.6 324.6 114.96 325.08 114.96 cv
325.56 114.96 325.92 114.6 325.92 114.12 cv
325.92 113.64 325.56 113.28 325.08 113.28 cv
324.6 113.28 324.24 113.64 324.24 114.12 cv
cp
@
324.24 113.28 mo
322.56 110.7 li
@
325.86 113.28 mo
327.54 110.7 li
327.54 74.52 li
@
322.56 110.7 mo
322.56 74.52 li
@
324.9 118.38 mo
324.9 116.34 li
325.08 116.28 li
325.2 116.34 li
325.26 116.46 li
325.26 118.38 li
325.2 118.5 li
325.08 118.56 li
324.9 118.5 li
324.9 118.38 li
cp
324.06 116.94 mo
325.08 114.96 li
326.04 116.94 li
f
324.24 71.1 mo
324.24 71.58 324.6 71.9401 325.08 71.9401 cv
325.56 71.9401 325.92 71.58 325.92 71.1 cv
325.92 70.6201 325.56 70.26 325.08 70.26 cv
324.6 70.26 324.24 70.6201 324.24 71.1 cv
ef
324.24 71.1 mo
324.24 71.58 324.6 71.94 325.08 71.94 cv
325.56 71.94 325.92 71.58 325.92 71.1 cv
325.92 70.62 325.56 70.26 325.08 70.26 cv
324.6 70.26 324.24 70.62 324.24 71.1 cv
cp
@
327.54 74.52 mo
325.86 71.94 li
@
324.42 71.94 mo
322.56 74.52 li
@
324.9 69.96 mo
324.9 67.86 li
325.08 67.8 li
325.2 67.86 li
325.26 68.04 li
325.26 69.96 li
325.2 70.08 li
325.08 70.14 li
324.9 70.08 li
324.9 69.96 li
cp
324.06 68.52 mo
325.08 66.54 li
326.04 68.52 li
f
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
327.6 65.16 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
327.6 65.16 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
327.6 62.1 mo
(2,1)
[-4.91852 -2.52179 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
327.6 49.7997 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
327.6 49.7997 mo
(!) false chp
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
327.6 44.2197 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
327.6 36.8397 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
327.6 36.8397 mo
( ) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
327.6 33.7797 mo
(2,6)
[-5.00128 -2.49933 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
327.6 21.42 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
327.6 21.42 mo
(!) false chp
@
true set_gvm
%ADOBeginSubsetFont: ArialMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TIQPPB+ArialMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C66C118D247F858C73C47E3F4E6A6D96F995D033
A910C> |-
/bracketleft <1C60D8A8C9B854D0CC118562DA0B9B7EDC4708242A129F7FDA
76E8248E06FA2AA8230264BF5E887923BB> |-
/bracketright <1C60D8A8C9B854D0F43DC2CCF406001CFBEEF05F0764DAD33
08B0CE0223D083B89DD7D4227A758DC900F96BF> |-
/a <1C60D8A8C9B7EF326DA7DF6E992BB0067378CC2864443DD75F40C3F59BFA
E780442B93B6E9E205685F556603FDD13F43D7CFBA44B5FD94B172C1BAEAE134
90EC3F3CBF4B3033E0CFFB04D712ACAE53AC93BF916BCE432A2C3D908CE096B9
470EA658F5F9B573FFD8FE15CC5DA0E3B4E98C53A962DFC58BD092E98919B03F
2DF5CDAD8B352EA1AE212E81DCE57F9D7572BFCCB2BA60A4A5C55A7B7D088869
29F7B538F6F40182A00EFF18601643CDBDB7C59D7FDE2FDC86297A0526C719D7
1338> |-
/c <1C60D8A8C9B7A73DFCC965B95B407B63A21A323AC35889E4BD58B575823F
3D4C1849E342B371D24262A00F1B2118FF5BEF66219ACE8843324D9DE60D5A0C
40D6B21D6BB545548D091BEA6C08BFEE3773C5CA8BCA4E16C0DF3B738B5B4CA6
F12725C716> |-
/g <1C60D8A8C9B7EF327162A0E60DEADFC4B71361DE17F3AD9FB4F969218EFD
9B98EE4AD3F5ACD5F672F213D044BBEEED89EBDDAB7DBE036D1A33D4A3E36E30
BD6ACBDFC7B895FD67DBFFC2DCCD8F029AF9A8D463D2017E62B2B24BC48A314E
98D224948385897F08D68B6A608A8AC850FEB8FA1430D9D80A70CBD24E459805
E5F67372A3BB992C8607CF47679AE0B13147AC8AB721879D5078B035826B670D
317DB6BF95F3193D61C90A3EA0C99AB8ED74AF6617CFA5889BB7C23B99A42272
15> |-
/h <1C60D8A8C9B7EF32120E99BF44821945DDC2B4EFD38037A015A75CE173B6
AC0B36FA7934ECB2789D63BE76D2E6D4AB6FB403DBC988B8E6745C79D28C1F4C
9AFD120F64FD9576BF5E839856324CA83C437F59568D46BC0A0523> |-
/l <1C60D8A8C9B88C084B70B34E18F97D598FFC8BBB87271DAB31AE82C7D5> |-
/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103ED63F6704BBF19B
FEDC611823F708F8CDC822B4765D0EA33D8918C5115C458B26634AC5E2670C4B
8962BBF3CF9C48946A0DC46F480672849B689EA7D57F5DF91E25DFD9B529EB14
2A1A839E512F7962D9E8B6440BB69ED272488E4A704361F8BFC3459B2DF3FCAF
F00E5B9790F065B3476716D31B338D> |-
/r <1C60D8A8C9B81F2C062E4A14544392D75EFC1DE071A88148476E7F4ADEB8
F773ACAC5F6D1E41C9D8141AD151602045512C4C321BE5332ACD4A9A1A81F153
B5A575F3D6F73178CB085E6B21> |-
/s <1C60D8A8C9B7A73DF6B5A4EE8BDAC430AB40D072096BA1391FB87ABD8D54
3094852EEAF06243E7B5ADCF9C1EF5646B8FC5B51310596E132370ECE7C9D12E
2BFFBF299CB441CA112192E2BF1E03F6D4324D162B40F907462F1CDA63BEAC17
54B4842C0FABDAE30E17E7E60566DCCF4C8EA4CA26C6ED> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIQPPB+ArialMT /Encoding get
dup 45 /hyphen put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 99 /c put
dup 103 /g put
dup 104 /h put
dup 108 /l put
dup 109 /m put
dup 114 /r put
dup 115 /s put
pop
%ADOEndSubsetFont
reset_gvm
/TIQPPB+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
3{/.notdef}rp /one /two /three /four /five /six 27{/.notdef}rp 
/R 8{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp /a /.notdef 
/c 3{/.notdef}rp /g /h /i 2{/.notdef}rp /l /m 
/n /o /p /.notdef /r /s /t /u 
138{/.notdef}rp]
TIQPPB+ArialMT nf
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
327.6 15.84 mo
(o o)
[-4.97882 -2.46149 0 ]ysh
199.74 264.96 mo
([pass-uncomp])
[-2.48849 -4.99051 -4.99048 -4.48651 -4.48651 -2.98343 -4.99048 -4.99051 -4.48651 -4.99048 -7.55994 -4.99048 
0 ]ysh
218.82 264.96 mo
([pass-comp-short])
[-2.4993 -5.00131 -5.00128 -4.49731 -4.49728 -2.99423 -4.49731 -5.00128 -7.49423 -5.00131 -2.99423 -4.49728 
-5.00131 -5.00131 -2.9942 -2.49933 0 ]ysh
241.02 264.96 mo
([pass-uncomp])
[-2.48849 -4.99051 -4.99048 -4.48651 -4.48651 -2.98343 -4.99048 -4.99051 -4.48651 -4.99048 -7.55994 -4.99048 
0 ]ysh
266.4 264.96 mo
([pass-uncomp])
[-2.48849 -4.99051 -4.99048 -4.48651 -4.48651 -2.98343 -4.99048 -4.99051 -4.48651 -4.99048 -7.55994 -4.99048 
0 ]ysh
295.5 264.96 mo
([pass-comp])
[-2.49481 -4.9968 -4.9968 -4.4928 -4.4928 -2.98972 -4.4928 -4.9968 -7.48975 -4.9968 0 ]ysh
207 172.68 mo
([pass-uncomp])
[-2.48853 -4.99048 -4.99048 -4.48651 -4.48651 -2.9834 -4.99054 -4.99048 -4.48651 -4.99048 -7.55994 -4.99048 
0 ]ysh
234.72 172.68 mo
([pass-uncomp])
[-2.48853 -4.99048 -4.99048 -4.48651 -4.48651 -2.9834 -4.99054 -4.99048 -4.48651 -4.99048 -7.55994 -4.99048 
0 ]ysh
263.16 182.7 mo
([pass-comp-long])
[-2.4975 -4.99951 -4.99951 -4.49548 -4.49548 -2.99243 -4.49548 -4.99951 -7.49243 -4.99951 -2.99243 -1.99347 
-4.99951 -4.99951 -4.99951 0 ]ysh
291.42 172.68 mo
([pass-uncomp])
[-2.48853 -4.99048 -4.99048 -4.48651 -4.48651 -2.9834 -4.99054 -4.99048 -4.48651 -4.99048 -7.55994 -4.99048 
0 ]ysh
317.1 186.12 mo
([pass-comp-short])
[-2.4993 -5.00131 -5.00128 -4.49731 -4.49731 -2.9942 -4.49731 -5.00128 -7.49426 -5.00128 -2.9942 -4.49731 
-5.00134 -5.00128 -2.9942 -2.49933 0 ]ysh
187.98 114.42 mo
187.98 114.9 188.4 115.26 188.82 115.26 cv
189.3 115.26 189.66 114.9 189.66 114.42 cv
189.66 113.94 189.3 113.58 188.82 113.58 cv
188.4 113.58 187.98 113.94 187.98 114.42 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
ef
.375 lw
1 lc
1 lj
10 ml
187.98 114.42 mo
187.98 114.9 188.4 115.26 188.82 115.26 cv
189.3 115.26 189.66 114.9 189.66 114.42 cv
189.66 113.94 189.3 113.58 188.82 113.58 cv
188.4 113.58 187.98 113.94 187.98 114.42 cv
cp
@
187.98 113.58 mo
186.3 111 li
@
189.6 113.58 mo
191.34 111 li
191.34 74.82 li
@
186.3 111 mo
186.3 74.8199 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.64706 0 .12941 colr
TIQPPC+Arial-BoldMT*1 [0 -9 -9 0 0 0 ]msf
199.26 109.68 mo
(x)sh
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
199.26 102.24 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
199.26 102.24 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
199.26 99.1797 mo
(1,3)
[-5.00128 -2.49933 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
199.26 86.82 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
199.26 86.82 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
199.26 81.24 mo
(o)sh
188.64 118.68 mo
188.64 116.76 li
188.7 116.64 li
188.82 116.58 li
188.94 116.64 li
189 116.76 li
189 118.68 li
188.94 118.86 li
188.7 118.86 li
188.64 118.68 li
cp
187.8 117.24 mo
188.82 115.26 li
189.84 117.24 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
187.98 71.4 mo
187.98 71.88 188.4 72.2401 188.82 72.2401 cv
189.3 72.2401 189.66 71.88 189.66 71.4 cv
189.66 70.98 189.3 70.56 188.82 70.56 cv
188.4 70.56 187.98 70.98 187.98 71.4 cv
ef
.375 lw
1 lc
1 lj
10 ml
187.98 71.4 mo
187.98 71.88 188.4 72.24 188.82 72.24 cv
189.3 72.24 189.66 71.88 189.66 71.4 cv
189.66 70.98 189.3 70.56 188.82 70.56 cv
188.4 70.56 187.98 70.98 187.98 71.4 cv
cp
@
191.34 74.82 mo
189.6 72.24 li
@
188.16 72.24 mo
186.3 74.82 li
@
188.64 70.26 mo
188.64 68.34 li
188.7 68.22 li
188.82 68.16 li
188.94 68.22 li
189 68.34 li
189 70.26 li
188.94 70.38 li
188.82 70.44 li
188.7 70.38 li
188.64 70.26 li
cp
187.8 68.82 mo
188.82 66.84 li
189.84 68.82 li
f
0 gry
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
183.42 102.24 mo
( )sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
183.42 102.24 mo
( ) false chp
.18 lw
0 lc
0 lj
1 ml
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
183.42 99.18 mo
(1,4)
[-4.91852 -2.52179 0 ]ysh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
183.42 86.8797 mo
(!)sh
TIQPPD+SymbolMT*1 [0 -9 -9 0 0 0 ]msf
183.42 86.8797 mo
(!) false chp
@
TIQPPB+ArialMT*1 [0 -9 -9 0 0 0 ]msf
183.42 81.2997 mo
(o)sh
gsave
271.98 495.06 mo
271.98 499.02 275.04 502.2 278.82 502.2 cv
282.72 502.2 li
285.6 502.2 288.18 500.28 289.14 497.46 cv
291.12 497.46 li
287.58 495.06 li
283.32 497.46 li
285.24 497.46 li
284.52 499.62 282.84 501.24 280.8 501.9 cv
277.86 501 275.88 498.24 275.88 495.06 cv
eclp
291.18 502.26 mo
291.18 495 li
271.92 495 li
271.92 502.26 li
cp
gsave
/2 /CSD get_res idxcs
clp
[0 -1 -1 0 695.88 198.72 ]ct
[7.26 0 0 19.26 -303.54 404.7 ]ct
snap_to_device
<<
/T 1
/W 1 
/H 321 
/M[1 0 0 -321 0 321 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!WiE)!WiE)!WiE)!WrN,!s8W-!s8W-!s8W-"9\i1"9\i1"9\l3"U,&5"U,&5"pP89"pP89"pYA<#6tJ=
#7(S@#RC_C#mgnE$47+I$O[=M$O[=N$k*RS%1NaV%LrsZ%hB0^&.fBb&J5Tf&eYik',2,p'GV>u()@Z%
(Ddo*(`4,.)B'M5)]Th;*??1B*ZlIH+<VgN+sJ3U,U=W],pjrc-RU;j.4H_r.P!##/M/S-/hSe20ekC;
1,C^B1c70L2E*QS3&ru[4$,Md4Ztql5!M7s5s[h(6UO706q'R77Rp!?8P)NH92&#Q9hnJ[:f'tb;,U=k
;cHas<E3($='&L,=^#!5>?kE<?!^iD?XI2K?t!JQ@U`eV@q9.^AS,OeBP;'nC2.L!Ci!p(D/O6/DJsK5
Du~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
271.98 495.06 mo
271.98 499.02 275.04 502.2 278.82 502.2 cv
279.48 502.2 280.14 502.08 280.8 501.9 cv
277.86 501 275.88 498.24 275.88 495.06 cv
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.40392 .40392 .40392 colr
ef
.375 lw
1 lc
1 lj
10 ml
271.98 495.06 mo
271.98 499.02 275.04 502.2 278.82 502.2 cv
282.72 502.2 li
285.6 502.2 288.18 500.28 289.14 497.46 cv
291.12 497.46 li
287.58 495.06 li
283.32 497.46 li
285.24 497.46 li
284.52 499.62 282.84 501.24 280.8 501.9 cv
277.86 501 275.88 498.24 275.88 495.06 cv
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
@
278.82 502.2 mo
279.48 502.2 280.14 502.08 280.8 501.9 cv
@
0 gry
true set_gvm
%ADOBeginSubsetFont: Arial-ItalicMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Arial-ItalicMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1991, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Arial is a trademark of The Monotype Corporation, registered in the US Patent and Trademark Office and elsewhere.) def
/Weight (Regular) def
/ItalicAngle -12 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
def
/UniqueID 44340 def
/FontBBox {-261 -250 1059 936} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-25 0 716 728 518 530 706 706] def
/OtherBlues [349 358 -210 -199] def
/FamilyBlues [-25 0 716 728 518 530 706 706] def
/FamilyOtherBlues [349 358 -210 -199] def
/StdHW [72] def
/StdVW [88] def
/StemSnapH [72 81] def
/StemSnapV [88 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/a <1C60D8A8C9B7EF32653955E89F4352B48A1DF8AA52A8096BEB991ED9684C
FCB34B1B2AC195366828CC20DB3D55C80F4465D13418537AFF4B4842DB02DC01
92CAB63CECE5CAA7BB5715AC24A49BF6B2182D89635F4BB84E3539973E84DB6F
7573AFA56AAE09EA0BAAF684B326552D0795372FAABCC41CFD1A95FC705C85CD
BBEAC9121090ECF2B56B818DE66414A379A5FC8A800DF32232F8D70B632591C2
9D52CFEC896892505BCAE6681BB6183A178D01CC08BE2E2DE8B4BC26BDFE031F
22774742C40FF4ADC8FE7A28A90A02CDE2FA1A86CA9C53B04256881DB646CA3C
8F> |-
/c <1C60D8A8C9B7A73D8D4E46BB141FD3E31B4EFEF9BAF4412A04951FD0FD83
4B7053A9D80BBA6DEF58EE2303CE8299DC3FBDCF2D0902A98CD8A5C08BF0BBC1
443F04F97B198FDD377A6F18E57C254A6DF98046F4D3D25502F279145B3E73A2
4430130C280F73C82698962BCB05D7EE06D4F7AB8B68A6E74F3763B3433991A3
F05222> |-
/d <1C60D8A8C9B7EF321D283098E985330ED82084EC3F1D066DF637A0E9A63F
C330566F0FFC8396761C31B07F2FAF5A4E39EACF4C7AC864663628A9FDF9DD50
BEA6E0E5799A27FD29D417663983D0ABBBF1BC1700D4AB2EC3A352ADABFC2EEA
EB6DA1586B186E5589AFB469366144882BF03B214A51D76D2D0ED79D4C1D68B9
8D90981F8D6281F0CE6C810327> |-
/e <1C60D8A8C9B7EF321C1E8ACCC7D09A023042D90BE5D1EA563C909BDD033A
0FB8561F142300E7268D12D746DACC3F4A7A97F9B40781EFFB1CA1B9F31E51D1
3355EC2F6F9CDDC9DBA0762FC08E08CDA1008440931D6BC434A8BD12A11D9186
CD66868FB0154BC2177EB7E019995AB92E363DA36317815DE5DB> |-
/f <1C60D8A8C9B854D0BA987845FCD2A683AEA80AF7F6F88C01AA7B6D60DB00
9AECBEC9B4B2E69B833DE7840C7D36FAB0479BE0D8F674802AB24A4E6F16E6CE
D292E3D5DEA23E1451DF2D8136D3DEBEE422F7C4CD5706> |-
/i <1C60D8A8C9B88C082D95EF87D70BBC01773D885656612F2664B1EBBF74FD
DA3A99656275184DDA6DB5627B57AEC600> |-
/n <1C60D8A8C9B7EF32243C6E9D7F5F381084FDC03363F7D1CF44694F9455A1
1002394CC78A59DC9EC4BCE0E14100DCA50F04A049D04F81BF505C372DE9E1F6
73E527FCE130BDECF1A9A10EC328C45FDED066F63968E68751B5E9F2E05F00A6
E1755BE8B4A864B11344EE32> |-
/o <1C60D8A8C9B7EF32628C772DE6E397E65479FFA0766E31A0E619CDF4C4DC
4CC3E6514703E474B4280A88D04D50E73BAE799C94015B42BA9F77179B03E534
EAE2CCFC401140682DA526CA1A105618EC153D2E89597FEDB26D9101> |-
/r <1C60D8A8C9B81F2C61D6B34B72618BAF7A017ADAF81B5D4BA8604A41A14B
E1A9C9C2DBA4B577719B27A2A683EAEC693405F711171A60726B0232FD8BFB8F
11132657AA1CE23D11A080432FF021C7BBFD08F5F840DF884E45660DEB3E9847
7616EF42B114FF93ADA454188EF46183B61B1037> |-
/s <1C60D8A8C9B7A73DFF73DED6D1A334AF9DF1AC3BB618AEFA513EC2FA7A2F
F0690F36A55D42546B6C9AF41300B955DEAF0CC3456A35B6131308E5419001A6
77EDA650F2A33C450A8E6541F0A17243712D84D28821B4E2A8C0E2A6FAD2A3B9
8CA456A821E751BC07D1E540C5C197816B76FF6BF12922B3A59A6D35CAD31A61
B4E65B33AB1939AF2E784E7AFCB109B911B7BB46E8BC3E2934B0E8F136632D48
C449E0EB> |-
/t <1C60D8A8C9B854D0C0AD17A70317BAE2408AB69F18E1EA4CA155B4984F69
E1CD18D066F5AFEA435850F58BFF00D7F0397258752F2B43057B16E549ECF164
E4C9E8CF52B7DF93325D9D5D9C9DBA9D9DA628D8EC62AE861608914D113B772F
BF4DBDEFE2> |-
/u <1C60D8A8C9B7EF3217161211D4684A520DECA7EC32EF836D54C3A907BFE0
2F841CCA12F08922F0D3E766C756AAA747795503B7D9412650D2609585B2F58D
852A5E5E242BD1F31936C390E310BBF632545B2D8476B88E95031F231588F4A1
2862234E2CD54BB61DEEDEA6CB3A5B8D8FE325BDE7D2E24A> |-
/w <1C60D8A8C9B6079F6DB2729CC7E34CEC0E0DDF65E1C808E946DC1324D0C4
B05919BB9E5A8B57F677A072F827561A0AFB9BFD4C842AB6681A115152F6D4C3
5C74D18CC0D3039D91CEE2971FFA0EE07FAB5C43F3B3ED79E6E27714FD160F01
3C386DB575AC69025FFADB9C115402669669876B937E08AD31832B9A7FDEAA33
91FDF9F246DB561B4B7CA8836DEC2E56AA592F43C37BC5446AC62F86D9BBCE72
551A06B08476071515BA21E46FD26F5644117ED7DAA899B780AA18B1E186> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/TIQPPE+Arial-ItalicMT /Arial-ItalicMT findfont ct_VMDictPut
/TIQPPE+Arial-ItalicMT*1 
[97{/.notdef}rp /a /.notdef /c /d /e /f 2{/.notdef}rp 
/i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t 
/u /.notdef /w 136{/.notdef}rp]
TIQPPE+Arial-ItalicMT nf
TIQPPE+Arial-ItalicMT*1 [0 -9 -9 0 0 0 ]msf
278.94 521.28 mo
(fast)
[-2.50018 -5.0022 -4.49817 0 ]ysh
289.8 536.76 mo
(forward)
[-2.5047 -5.00671 -2.99963 -6.50073 -5.00665 -2.99963 0 ]ysh
329.281 264.96 mo
(continued)
[-4.4874 -4.99139 -4.99139 -2.48941 -1.98541 -4.99139 -5.03818 -4.97882 0 ]ysh
324.06 290.22 mo
324.36 290.22 324.6 290.4 324.6 290.7 cv
324.6 291 324.36 291.18 324.06 291.18 cv
323.82 291.18 323.58 291 323.58 290.7 cv
323.58 290.4 323.82 290.22 324.06 290.22 cv
cp
326.1 290.22 mo
326.34 290.22 326.58 290.4 326.58 290.7 cv
326.58 291 326.34 291.18 326.1 291.18 cv
325.8 291.18 325.56 291 325.56 290.7 cv
325.56 290.4 325.8 290.22 326.1 290.22 cv
cp
328.08 290.22 mo
328.38 290.22 328.62 290.4 328.62 290.7 cv
328.62 291 328.38 291.18 328.08 291.18 cv
327.84 291.18 327.6 291 327.6 290.7 cv
327.6 290.4 327.84 290.22 328.08 290.22 cv
cp
330.12 290.22 mo
330.36 290.22 330.6 290.4 330.6 290.7 cv
330.6 291 330.36 291.18 330.12 291.18 cv
329.82 291.18 329.58 291 329.58 290.7 cv
329.58 290.4 329.82 290.22 330.12 290.22 cv
cp
331.02 290.1 mo
331.02 289.86 331.2 289.62 331.5 289.62 cv
331.8 289.62 331.98 289.86 331.98 290.1 cv
331.98 290.4 331.8 290.58 331.5 290.58 cv
331.2 290.58 331.02 290.4 331.02 290.1 cv
cp
331.02 288.12 mo
331.02 287.82 331.2 287.58 331.5 287.58 cv
331.8 287.58 331.98 287.82 331.98 288.12 cv
331.98 288.36 331.8 288.6 331.5 288.6 cv
331.2 288.6 331.02 288.36 331.02 288.12 cv
cp
331.02 286.08 mo
331.02 285.84 331.2 285.6 331.5 285.6 cv
331.8 285.6 331.98 285.84 331.98 286.08 cv
331.98 286.38 331.8 286.62 331.5 286.62 cv
331.2 286.62 331.02 286.38 331.02 286.08 cv
cp
331.02 284.1 mo
331.02 283.8 331.2 283.62 331.5 283.62 cv
331.8 283.62 331.98 283.8 331.98 284.1 cv
331.98 284.4 331.8 284.58 331.5 284.58 cv
331.2 284.58 331.02 284.4 331.02 284.1 cv
cp
331.02 282.12 mo
331.02 281.82 331.2 281.58 331.5 281.58 cv
331.8 281.58 331.98 281.82 331.98 282.12 cv
331.98 282.36 331.8 282.6 331.5 282.6 cv
331.2 282.6 331.02 282.36 331.02 282.12 cv
cp
331.02 280.08 mo
331.02 279.84 331.2 279.6 331.5 279.6 cv
331.8 279.6 331.98 279.84 331.98 280.08 cv
331.98 280.38 331.8 280.62 331.5 280.62 cv
331.2 280.62 331.02 280.38 331.02 280.08 cv
cp
331.02 278.1 mo
331.02 277.8 331.2 277.62 331.5 277.62 cv
331.8 277.62 331.98 277.8 331.98 278.1 cv
331.98 278.4 331.8 278.58 331.5 278.58 cv
331.2 278.58 331.02 278.4 331.02 278.1 cv
cp
331.02 276.12 mo
331.02 275.82 331.2 275.58 331.5 275.58 cv
331.8 275.58 331.98 275.82 331.98 276.12 cv
331.98 276.36 331.8 276.6 331.5 276.6 cv
331.2 276.6 331.02 276.36 331.02 276.12 cv
cp
331.02 274.08 mo
331.02 273.84 331.2 273.6 331.5 273.6 cv
331.8 273.6 331.98 273.84 331.98 274.08 cv
331.98 274.38 331.8 274.62 331.5 274.62 cv
331.2 274.62 331.02 274.38 331.02 274.08 cv
cp
331.02 272.1 mo
331.02 271.8 331.2 271.62 331.5 271.62 cv
331.8 271.62 331.98 271.8 331.98 272.1 cv
331.98 272.4 331.8 272.58 331.5 272.58 cv
331.2 272.58 331.02 272.4 331.02 272.1 cv
cp
331.02 270.12 mo
331.02 269.82 331.2 269.58 331.5 269.58 cv
331.8 269.58 331.98 269.82 331.98 270.12 cv
331.98 270.36 331.8 270.6 331.5 270.6 cv
331.2 270.6 331.02 270.36 331.02 270.12 cv
cp
331.02 268.08 mo
331.02 267.84 331.2 267.6 331.5 267.6 cv
331.8 267.6 331.98 267.84 331.98 268.08 cv
331.98 268.38 331.8 268.62 331.5 268.62 cv
331.2 268.62 331.02 268.38 331.02 268.08 cv
cp
331.02 266.1 mo
331.02 265.8 331.2 265.62 331.5 265.62 cv
331.8 265.62 331.98 265.8 331.98 266.1 cv
331.98 266.4 331.8 266.58 331.5 266.58 cv
331.2 266.58 331.02 266.4 331.02 266.1 cv
cp
331.02 264.12 mo
331.02 263.82 331.2 263.58 331.5 263.58 cv
331.8 263.58 331.98 263.82 331.98 264.12 cv
331.98 264.36 331.8 264.6 331.5 264.6 cv
331.2 264.6 331.02 264.36 331.02 264.12 cv
cp
331.02 262.08 mo
331.02 261.84 331.2 261.6 331.5 261.6 cv
331.8 261.6 331.98 261.84 331.98 262.08 cv
331.98 262.38 331.8 262.62 331.5 262.62 cv
331.2 262.62 331.02 262.38 331.02 262.08 cv
cp
331.02 260.1 mo
331.02 259.8 331.2 259.62 331.5 259.62 cv
331.8 259.62 331.98 259.8 331.98 260.1 cv
331.98 260.34 331.8 260.58 331.5 260.58 cv
331.2 260.58 331.02 260.34 331.02 260.1 cv
cp
331.02 258.12 mo
331.02 257.82 331.2 257.58 331.5 257.58 cv
331.8 257.58 331.98 257.82 331.98 258.12 cv
331.98 258.36 331.8 258.6 331.5 258.6 cv
331.2 258.6 331.02 258.36 331.02 258.12 cv
cp
331.02 256.08 mo
331.02 255.84 331.2 255.6 331.5 255.6 cv
331.8 255.6 331.98 255.84 331.98 256.08 cv
331.98 256.38 331.8 256.62 331.5 256.62 cv
331.2 256.62 331.02 256.38 331.02 256.08 cv
cp
331.02 254.1 mo
331.02 253.8 331.2 253.56 331.5 253.56 cv
331.8 253.56 331.98 253.8 331.98 254.1 cv
331.98 254.34 331.8 254.58 331.5 254.58 cv
331.2 254.58 331.02 254.34 331.02 254.1 cv
cp
331.02 252.06 mo
331.02 251.82 331.2 251.58 331.5 251.58 cv
331.8 251.58 331.98 251.82 331.98 252.06 cv
331.98 252.36 331.8 252.6 331.5 252.6 cv
331.2 252.6 331.02 252.36 331.02 252.06 cv
cp
331.02 250.08 mo
331.02 249.84 331.2 249.6 331.5 249.6 cv
331.8 249.6 331.98 249.84 331.98 250.08 cv
331.98 250.38 331.8 250.56 331.5 250.56 cv
331.2 250.56 331.02 250.38 331.02 250.08 cv
cp
331.02 248.1 mo
331.02 247.8 331.2 247.56 331.5 247.56 cv
331.8 247.56 331.98 247.8 331.98 248.1 cv
331.98 248.34 331.8 248.58 331.5 248.58 cv
331.2 248.58 331.02 248.34 331.02 248.1 cv
cp
331.02 246.06 mo
331.02 245.82 331.2 245.58 331.5 245.58 cv
331.8 245.58 331.98 245.82 331.98 246.06 cv
331.98 246.36 331.8 246.6 331.5 246.6 cv
331.2 246.6 331.02 246.36 331.02 246.06 cv
cp
331.02 244.08 mo
331.02 243.78 331.2 243.6 331.5 243.6 cv
331.8 243.6 331.98 243.78 331.98 244.08 cv
331.98 244.38 331.8 244.56 331.5 244.56 cv
331.2 244.56 331.02 244.38 331.02 244.08 cv
cp
331.02 242.1 mo
331.02 241.8 331.2 241.56 331.5 241.56 cv
331.8 241.56 331.98 241.8 331.98 242.1 cv
331.98 242.34 331.8 242.58 331.5 242.58 cv
331.2 242.58 331.02 242.34 331.02 242.1 cv
cp
331.02 240.06 mo
331.02 239.82 331.2 239.58 331.5 239.58 cv
331.8 239.58 331.98 239.82 331.98 240.06 cv
331.98 240.36 331.8 240.6 331.5 240.6 cv
331.2 240.6 331.02 240.36 331.02 240.06 cv
cp
331.02 238.08 mo
331.02 237.78 331.2 237.6 331.5 237.6 cv
331.8 237.6 331.98 237.78 331.98 238.08 cv
331.98 238.38 331.8 238.56 331.5 238.56 cv
331.2 238.56 331.02 238.38 331.02 238.08 cv
cp
331.02 236.1 mo
331.02 235.8 331.2 235.56 331.5 235.56 cv
331.8 235.56 331.98 235.8 331.98 236.1 cv
331.98 236.34 331.8 236.58 331.5 236.58 cv
331.2 236.58 331.02 236.34 331.02 236.1 cv
cp
331.02 234.06 mo
331.02 233.82 331.2 233.58 331.5 233.58 cv
331.8 233.58 331.98 233.82 331.98 234.06 cv
331.98 234.36 331.8 234.6 331.5 234.6 cv
331.2 234.6 331.02 234.36 331.02 234.06 cv
cp
331.02 232.08 mo
331.02 231.78 331.2 231.6 331.5 231.6 cv
331.8 231.6 331.98 231.78 331.98 232.08 cv
331.98 232.38 331.8 232.56 331.5 232.56 cv
331.2 232.56 331.02 232.38 331.02 232.08 cv
cp
331.02 230.1 mo
331.02 229.8 331.2 229.56 331.5 229.56 cv
331.8 229.56 331.98 229.8 331.98 230.1 cv
331.98 230.34 331.8 230.58 331.5 230.58 cv
331.2 230.58 331.02 230.34 331.02 230.1 cv
cp
331.02 228.06 mo
331.02 227.82 331.2 227.58 331.5 227.58 cv
331.8 227.58 331.98 227.82 331.98 228.06 cv
331.98 228.36 331.8 228.6 331.5 228.6 cv
331.2 228.6 331.02 228.36 331.02 228.06 cv
cp
331.02 226.08 mo
331.02 225.78 331.2 225.6 331.5 225.6 cv
331.8 225.6 331.98 225.78 331.98 226.08 cv
331.98 226.38 331.8 226.56 331.5 226.56 cv
331.2 226.56 331.02 226.38 331.02 226.08 cv
cp
331.02 224.1 mo
331.02 223.8 331.2 223.56 331.5 223.56 cv
331.8 223.56 331.98 223.8 331.98 224.1 cv
331.98 224.34 331.8 224.58 331.5 224.58 cv
331.2 224.58 331.02 224.34 331.02 224.1 cv
cp
331.02 222.06 mo
331.02 221.82 331.2 221.58 331.5 221.58 cv
331.8 221.58 331.98 221.82 331.98 222.06 cv
331.98 222.36 331.8 222.6 331.5 222.6 cv
331.2 222.6 331.02 222.36 331.02 222.06 cv
cp
331.26 220.62 mo
331.2 220.62 li
330.96 220.56 330.84 220.26 330.9 220.02 cv
330.96 219.78 331.26 219.6 331.5 219.66 cv
331.8 219.78 331.92 220.02 331.86 220.32 cv
331.8 220.56 331.5 220.74 331.26 220.62 cv
cp
329.34 220.08 mo
329.04 219.96 328.92 219.72 328.98 219.42 cv
329.04 219.18 329.34 219 329.58 219.12 cv
329.88 219.18 330 219.48 329.94 219.72 cv
329.88 219.96 329.58 220.14 329.34 220.08 cv
cp
327.42 219.48 mo
327.12 219.36 327 219.12 327.06 218.82 cv
327.18 218.58 327.42 218.4 327.72 218.52 cv
327.96 218.58 328.08 218.88 328.02 219.12 cv
327.96 219.42 327.66 219.54 327.42 219.48 cv
cp
325.5 218.88 mo
325.2 218.82 325.08 218.52 325.14 218.22 cv
325.26 217.98 325.5 217.86 325.8 217.92 cv
326.04 217.98 326.22 218.28 326.1 218.52 cv
326.04 218.82 325.74 218.94 325.5 218.88 cv
cp
323.58 218.28 mo
323.34 218.22 323.16 217.92 323.22 217.68 cv
323.34 217.38 323.58 217.26 323.88 217.32 cv
324.12 217.38 324.3 217.68 324.18 217.98 cv
324.12 218.22 323.82 218.34 323.58 218.28 cv
cp
321.66 217.68 mo
321.42 217.62 321.24 217.32 321.36 217.08 cv
321.42 216.78 321.72 216.66 321.96 216.72 cv
322.2 216.84 322.38 217.08 322.32 217.38 cv
322.2 217.62 321.96 217.8 321.66 217.68 cv
cp
319.74 217.08 mo
319.5 217.02 319.32 216.72 319.44 216.48 cv
319.5 216.24 319.8 216.06 320.04 216.12 cv
320.34 216.24 320.46 216.48 320.4 216.78 cv
320.28 217.02 320.04 217.2 319.74 217.08 cv
cp
317.82 216.54 mo
317.58 216.42 317.46 216.18 317.52 215.88 cv
317.58 215.64 317.88 215.46 318.12 215.58 cv
318.42 215.64 318.54 215.94 318.48 216.18 cv
318.36 216.42 318.12 216.6 317.82 216.54 cv
cp
315.96 215.94 mo
315.66 215.82 315.54 215.58 315.6 215.28 cv
315.66 215.04 315.96 214.86 316.2 214.98 cv
316.5 215.04 316.62 215.34 316.56 215.58 cv
316.5 215.88 316.2 216 315.96 215.94 cv
cp
314.04 215.34 mo
313.74 215.28 313.62 214.98 313.68 214.74 cv
313.74 214.44 314.04 214.32 314.34 214.38 cv
314.58 214.44 314.7 214.74 314.64 214.98 cv
314.58 215.28 314.28 215.4 314.04 215.34 cv
cp
312.12 214.74 mo
311.82 214.68 311.7 214.38 311.76 214.14 cv
311.88 213.84 312.12 213.72 312.42 213.78 cv
312.66 213.84 312.84 214.14 312.72 214.44 cv
312.66 214.68 312.36 214.8 312.12 214.74 cv
cp
310.2 214.14 mo
309.96 214.08 309.78 213.78 309.84 213.54 cv
309.96 213.24 310.2 213.12 310.5 213.18 cv
310.74 213.3 310.92 213.54 310.8 213.84 cv
310.74 214.08 310.44 214.26 310.2 214.14 cv
cp
308.28 213.54 mo
308.04 213.48 307.86 213.18 307.98 212.94 cv
308.04 212.7 308.28 212.52 308.58 212.58 cv
308.82 212.7 309 212.94 308.88 213.24 cv
308.82 213.48 308.52 213.66 308.28 213.54 cv
cp
306.36 213 mo
306.12 212.88 305.94 212.64 306.06 212.34 cv
306.12 212.1 306.42 211.92 306.66 212.04 cv
306.9 212.1 307.08 212.4 307.02 212.64 cv
306.9 212.88 306.66 213.06 306.36 213 cv
cp
304.44 212.4 mo
304.2 212.28 304.02 212.04 304.14 211.74 cv
304.2 211.5 304.5 211.32 304.74 211.44 cv
305.04 211.5 305.16 211.8 305.1 212.04 cv
304.98 212.34 304.74 212.46 304.44 212.4 cv
cp
302.52 211.8 mo
302.28 211.74 302.16 211.44 302.22 211.2 cv
302.28 210.9 302.58 210.78 302.82 210.84 cv
303.12 210.9 303.24 211.2 303.18 211.44 cv
303.12 211.74 302.82 211.86 302.52 211.8 cv
cp
300.66 211.2 mo
300.36 211.14 300.24 210.84 300.3 210.6 cv
300.36 210.3 300.66 210.18 300.9 210.24 cv
301.2 210.3 301.32 210.6 301.26 210.9 cv
301.2 211.14 300.9 211.26 300.66 211.2 cv
cp
298.74 210.6 mo
298.44 210.54 298.32 210.24 298.38 210 cv
298.44 209.7 298.74 209.58 299.04 209.64 cv
299.28 209.76 299.4 210 299.34 210.3 cv
299.28 210.54 298.98 210.72 298.74 210.6 cv
cp
296.82 210 mo
296.52 209.94 296.4 209.64 296.46 209.4 cv
296.58 209.16 296.82 208.98 297.12 209.04 cv
297.12 209.1 li
297.36 209.16 297.54 209.4 297.42 209.7 cv
297.36 209.94 297.06 210.12 296.82 210 cv
cp
294.9 209.46 mo
294.66 209.34 294.48 209.1 294.54 208.8 cv
294.66 208.56 294.9 208.38 295.2 208.5 cv
295.44 208.56 295.62 208.86 295.5 209.1 cv
295.44 209.34 295.14 209.52 294.9 209.46 cv
cp
292.98 208.86 mo
292.74 208.74 292.56 208.5 292.68 208.2 cv
292.74 207.96 293.04 207.84 293.28 207.9 cv
293.52 207.96 293.7 208.26 293.64 208.5 cv
293.52 208.8 293.28 208.92 292.98 208.86 cv
cp
291.06 208.26 mo
290.82 208.2 290.64 207.9 290.76 207.66 cv
290.82 207.36 291.12 207.24 291.36 207.3 cv
291.6 207.36 291.78 207.66 291.72 207.9 cv
291.6 208.2 291.36 208.32 291.06 208.26 cv
cp
289.14 207.66 mo
288.9 207.6 288.72 207.3 288.84 207.06 cv
288.9 206.76 289.2 206.64 289.44 206.7 cv
289.74 206.82 289.86 207.06 289.8 207.36 cv
289.68 207.6 289.44 207.72 289.14 207.66 cv
cp
287.28 207.06 mo
286.98 207 286.86 206.7 286.92 206.46 cv
286.98 206.22 287.28 206.04 287.52 206.1 cv
287.82 206.22 287.94 206.46 287.88 206.76 cv
287.82 207 287.52 207.18 287.28 207.06 cv
cp
285.36 206.46 mo
285.06 206.4 284.94 206.1 285 205.86 cv
285.06 205.62 285.36 205.44 285.6 205.56 cv
285.9 205.62 286.02 205.92 285.96 206.16 cv
285.9 206.4 285.6 206.58 285.36 206.46 cv
cp
283.44 205.92 mo
283.14 205.8 283.02 205.56 283.08 205.26 cv
283.2 205.02 283.44 204.84 283.74 204.96 cv
283.98 205.02 284.16 205.32 284.04 205.56 cv
283.98 205.8 283.68 205.98 283.44 205.92 cv
cp
281.52 205.32 mo
281.22 205.2 281.1 204.96 281.16 204.66 cv
281.28 204.42 281.52 204.3 281.82 204.36 cv
282.06 204.42 282.24 204.72 282.12 204.96 cv
282.06 205.26 281.76 205.38 281.52 205.32 cv
cp
279.6 204.72 mo
279.36 204.66 279.18 204.36 279.24 204.12 cv
279.36 203.82 279.6 203.7 279.9 203.76 cv
280.14 203.82 280.32 204.12 280.2 204.36 cv
280.14 204.66 279.84 204.78 279.6 204.72 cv
cp
277.68 204.12 mo
277.44 204.06 277.26 203.76 277.38 203.52 cv
277.44 203.22 277.74 203.1 277.98 203.16 cv
278.22 203.28 278.4 203.52 278.34 203.82 cv
278.22 204.06 277.98 204.18 277.68 204.12 cv
cp
275.76 203.52 mo
275.52 203.46 275.34 203.16 275.46 202.92 cv
275.52 202.68 275.82 202.5 276.06 202.56 cv
276.36 202.68 276.48 202.92 276.42 203.22 cv
276.3 203.46 276.06 203.64 275.76 203.52 cv
cp
273.84 202.98 mo
273.84 202.92 li
273.6 202.86 273.48 202.62 273.54 202.32 cv
273.6 202.08 273.9 201.9 274.14 202.02 cv
274.44 202.08 274.56 202.38 274.5 202.62 cv
274.38 202.86 274.14 203.04 273.84 202.98 cv
cp
271.98 202.38 mo
271.68 202.26 271.56 202.02 271.62 201.72 cv
271.68 201.48 271.98 201.3 272.22 201.42 cv
272.52 201.48 272.64 201.78 272.58 202.02 cv
272.52 202.32 272.22 202.44 271.98 202.38 cv
cp
270.06 201.78 mo
269.76 201.72 269.64 201.42 269.7 201.12 cv
269.76 200.88 270.06 200.76 270.36 200.82 cv
270.6 200.88 270.72 201.18 270.66 201.42 cv
270.6 201.72 270.3 201.84 270.06 201.78 cv
cp
268.14 201.18 mo
267.84 201.12 267.72 200.82 267.78 200.58 cv
267.9 200.28 268.14 200.16 268.44 200.22 cv
268.68 200.28 268.86 200.58 268.74 200.82 cv
268.68 201.12 268.38 201.24 268.14 201.18 cv
cp
266.22 200.58 mo
265.98 200.52 265.8 200.22 265.86 199.98 cv
265.98 199.68 266.22 199.56 266.52 199.62 cv
266.76 199.74 266.94 199.98 266.82 200.28 cv
266.76 200.52 266.46 200.7 266.22 200.58 cv
cp
264.3 199.98 mo
264.06 199.92 263.88 199.62 264 199.38 cv
264.06 199.14 264.36 198.96 264.6 199.02 cv
264.84 199.14 265.02 199.38 264.9 199.68 cv
264.84 199.92 264.54 200.1 264.3 199.98 cv
cp
262.38 199.44 mo
262.14 199.32 261.96 199.08 262.08 198.78 cv
262.14 198.54 262.44 198.36 262.68 198.48 cv
262.92 198.54 263.1 198.84 263.04 199.08 cv
262.92 199.32 262.68 199.5 262.38 199.44 cv
cp
260.46 198.84 mo
260.22 198.72 260.04 198.48 260.16 198.18 cv
260.22 197.94 260.52 197.76 260.76 197.88 cv
261.06 197.94 261.18 198.24 261.12 198.48 cv
261 198.78 260.76 198.9 260.46 198.84 cv
cp
258.54 198.24 mo
258.3 198.18 258.18 197.88 258.24 197.58 cv
258.3 197.34 258.6 197.22 258.84 197.28 cv
259.14 197.34 259.26 197.64 259.2 197.88 cv
259.14 198.18 258.84 198.3 258.54 198.24 cv
cp
256.68 197.64 mo
256.38 197.58 256.26 197.28 256.32 197.04 cv
256.38 196.74 256.68 196.62 256.92 196.68 cv
257.22 196.74 257.34 197.04 257.28 197.34 cv
257.22 197.58 256.92 197.7 256.68 197.64 cv
cp
254.76 197.04 mo
254.46 196.98 254.34 196.68 254.4 196.44 cv
254.52 196.14 254.76 196.02 255.06 196.08 cv
255.3 196.2 255.42 196.44 255.36 196.74 cv
255.3 196.98 255 197.16 254.76 197.04 cv
cp
252.84 196.44 mo
252.54 196.38 252.42 196.08 252.48 195.84 cv
252.6 195.6 252.84 195.42 253.14 195.48 cv
253.38 195.6 253.56 195.84 253.44 196.14 cv
253.38 196.38 253.08 196.56 252.84 196.44 cv
cp
250.92 195.9 mo
250.68 195.78 250.5 195.54 250.56 195.24 cv
250.68 195 250.92 194.82 251.22 194.94 cv
251.46 195 251.64 195.3 251.52 195.54 cv
251.46 195.78 251.16 195.96 250.92 195.9 cv
cp
249 195.3 mo
248.76 195.18 248.58 194.94 248.7 194.64 cv
248.76 194.4 249.06 194.22 249.3 194.34 cv
249.54 194.4 249.72 194.7 249.66 194.94 cv
249.54 195.24 249.3 195.36 249 195.3 cv
cp
247.08 194.7 mo
246.84 194.64 246.66 194.34 246.78 194.04 cv
246.84 193.8 247.14 193.68 247.38 193.74 cv
247.68 193.8 247.8 194.1 247.74 194.34 cv
247.62 194.64 247.38 194.76 247.08 194.7 cv
cp
245.16 194.1 mo
244.92 194.04 244.74 193.74 244.86 193.5 cv
244.92 193.2 245.22 193.08 245.46 193.14 cv
245.76 193.2 245.88 193.5 245.82 193.8 cv
245.7 194.04 245.46 194.16 245.16 194.1 cv
cp
243.3 193.5 mo
243 193.44 242.88 193.14 242.94 192.9 cv
243 192.6 243.3 192.48 243.54 192.54 cv
243.84 192.66 243.96 192.9 243.9 193.2 cv
243.84 193.44 243.54 193.62 243.3 193.5 cv
cp
241.38 192.9 mo
241.08 192.84 240.96 192.54 241.02 192.3 cv
241.08 192.06 241.38 191.88 241.68 191.94 cv
241.92 192.06 242.04 192.3 241.98 192.6 cv
241.92 192.84 241.62 193.02 241.38 192.9 cv
cp
239.46 192.36 mo
239.16 192.24 239.04 192 239.1 191.7 cv
239.22 191.46 239.46 191.28 239.76 191.4 cv
240 191.46 240.18 191.76 240.06 192 cv
240 192.24 239.7 192.42 239.46 192.36 cv
cp
237.54 191.76 mo
237.3 191.64 237.12 191.4 237.18 191.1 cv
237.3 190.86 237.54 190.68 237.84 190.8 cv
238.08 190.86 238.26 191.16 238.14 191.4 cv
238.08 191.7 237.78 191.82 237.54 191.76 cv
cp
235.62 191.16 mo
235.38 191.1 235.2 190.8 235.26 190.56 cv
235.38 190.26 235.62 190.14 235.92 190.2 cv
236.16 190.26 236.34 190.56 236.22 190.8 cv
236.16 191.1 235.86 191.22 235.62 191.16 cv
cp
233.7 190.56 mo
233.46 190.5 233.28 190.2 233.4 189.96 cv
233.46 189.66 233.76 189.54 234 189.6 cv
234.24 189.66 234.42 189.96 234.36 190.26 cv
234.24 190.5 234 190.62 233.7 190.56 cv
cp
231.78 189.96 mo
231.54 189.9 231.36 189.6 231.48 189.36 cv
231.54 189.06 231.84 188.94 232.08 189 cv
232.38 189.12 232.5 189.36 232.44 189.66 cv
232.32 189.9 232.08 190.08 231.78 189.96 cv
cp
229.86 189.36 mo
229.62 189.3 229.5 189 229.56 188.76 cv
229.62 188.52 229.92 188.34 230.16 188.4 cv
230.46 188.52 230.58 188.76 230.52 189.06 cv
230.46 189.3 230.16 189.48 229.86 189.36 cv
cp
228 188.82 mo
227.7 188.7 227.58 188.46 227.64 188.16 cv
227.7 187.92 228 187.74 228.24 187.86 cv
228.54 187.92 228.66 188.22 228.6 188.46 cv
228.54 188.7 228.24 188.88 228 188.82 cv
cp
226.08 188.22 mo
225.78 188.1 225.66 187.86 225.72 187.56 cv
225.78 187.32 226.08 187.14 226.38 187.26 cv
226.62 187.32 226.74 187.62 226.68 187.86 cv
226.62 188.16 226.32 188.28 226.08 188.22 cv
cp
224.16 187.62 mo
223.86 187.56 223.74 187.26 223.8 187.02 cv
223.92 186.72 224.16 186.6 224.46 186.66 cv
224.7 186.72 224.88 187.02 224.76 187.26 cv
224.7 187.56 224.4 187.68 224.16 187.62 cv
cp
222.24 187.02 mo
222 186.96 221.82 186.66 221.88 186.42 cv
222 186.12 222.24 186 222.54 186.06 cv
222.78 186.18 222.96 186.42 222.84 186.72 cv
222.78 186.96 222.48 187.08 222.24 187.02 cv
cp
220.32 186.42 mo
220.08 186.36 219.9 186.06 220.02 185.82 cv
220.08 185.52 220.38 185.4 220.62 185.46 cv
220.86 185.58 221.04 185.82 220.98 186.12 cv
220.86 186.36 220.62 186.54 220.32 186.42 cv
cp
218.4 185.82 mo
218.16 185.76 217.98 185.46 218.1 185.22 cv
218.16 184.98 218.46 184.8 218.7 184.92 cv
219 184.98 219.12 185.28 219.06 185.52 cv
218.94 185.76 218.7 185.94 218.4 185.82 cv
cp
216.48 185.28 mo
216.24 185.16 216.06 184.92 216.18 184.62 cv
216.24 184.38 216.54 184.2 216.78 184.32 cv
217.08 184.38 217.2 184.68 217.14 184.92 cv
217.02 185.16 216.78 185.34 216.48 185.28 cv
cp
214.56 184.68 mo
214.32 184.56 214.2 184.32 214.26 184.02 cv
214.32 183.78 214.62 183.66 214.86 183.72 cv
215.16 183.78 215.28 184.08 215.22 184.32 cv
215.16 184.62 214.86 184.74 214.56 184.68 cv
cp
212.7 184.08 mo
212.4 184.02 212.28 183.72 212.34 183.48 cv
212.4 183.18 212.7 183.06 212.94 183.12 cv
213.24 183.18 213.36 183.48 213.3 183.72 cv
213.24 184.02 212.94 184.14 212.7 184.08 cv
cp
210.78 183.48 mo
210.48 183.42 210.36 183.12 210.42 182.88 cv
210.54 182.58 210.78 182.46 211.08 182.52 cv
211.32 182.64 211.5 182.88 211.38 183.18 cv
211.32 183.42 211.02 183.54 210.78 183.48 cv
cp
208.86 182.88 mo
208.56 182.82 208.44 182.52 208.5 182.28 cv
208.62 181.98 208.86 181.86 209.16 181.92 cv
209.4 182.04 209.58 182.28 209.46 182.58 cv
209.4 182.82 209.1 183 208.86 182.88 cv
cp
206.94 182.28 mo
206.7 182.22 206.52 181.92 206.58 181.68 cv
206.7 181.44 206.94 181.26 207.24 181.38 cv
207.48 181.44 207.66 181.74 207.54 181.98 cv
207.48 182.22 207.18 182.4 206.94 182.28 cv
cp
205.02 181.74 mo
204.78 181.62 204.6 181.38 204.72 181.08 cv
204.78 180.84 205.08 180.66 205.32 180.78 cv
205.56 180.84 205.74 181.14 205.68 181.38 cv
205.56 181.68 205.32 181.8 205.02 181.74 cv
cp
203.1 181.14 mo
202.86 181.02 202.68 180.78 202.8 180.48 cv
202.86 180.24 203.16 180.12 203.4 180.18 cv
203.7 180.24 203.82 180.54 203.76 180.78 cv
203.64 181.08 203.4 181.2 203.1 181.14 cv
cp
201.18 180.54 mo
200.94 180.48 200.82 180.18 200.88 179.94 cv
200.94 179.64 201.24 179.52 201.48 179.58 cv
201.78 179.64 201.9 179.94 201.84 180.18 cv
201.72 180.48 201.48 180.6 201.18 180.54 cv
cp
199.32 179.94 mo
199.02 179.88 198.9 179.58 198.96 179.34 cv
199.02 179.04 199.32 178.92 199.56 178.98 cv
199.86 179.1 199.98 179.34 199.92 179.64 cv
199.86 179.88 199.56 180 199.32 179.94 cv
cp
197.4 179.34 mo
197.1 179.28 196.98 178.98 197.04 178.74 cv
197.1 178.5 197.4 178.32 197.7 178.38 cv
197.94 178.5 198.06 178.74 198 179.04 cv
197.94 179.28 197.64 179.46 197.4 179.34 cv
cp
195.48 178.74 mo
195.18 178.68 195.06 178.38 195.12 178.14 cv
195.24 177.9 195.48 177.72 195.78 177.84 cv
196.02 177.9 196.2 178.2 196.08 178.44 cv
196.02 178.68 195.72 178.86 195.48 178.74 cv
cp
193.56 178.2 mo
193.32 178.08 193.14 177.84 193.2 177.54 cv
193.32 177.3 193.56 177.12 193.86 177.24 cv
194.1 177.3 194.28 177.6 194.16 177.84 cv
194.1 178.14 193.8 178.26 193.56 178.2 cv
cp
191.64 177.6 mo
191.4 177.48 191.22 177.24 191.34 176.94 cv
191.4 176.7 191.7 176.58 191.94 176.64 cv
192.18 176.7 192.36 177 192.24 177.24 cv
192.18 177.54 191.88 177.66 191.64 177.6 cv
cp
189.72 177 mo
189.48 176.94 189.3 176.64 189.42 176.4 cv
189.48 176.1 189.78 175.98 190.02 176.04 cv
190.26 176.1 190.44 176.4 190.38 176.64 cv
190.26 176.94 190.02 177.06 189.72 177 cv
cp
187.8 176.4 mo
187.56 176.34 187.38 176.04 187.5 175.8 cv
187.56 175.5 187.86 175.38 188.1 175.44 cv
188.4 175.56 188.52 175.8 188.46 176.1 cv
188.34 176.34 188.1 176.52 187.8 176.4 cv
cp
185.88 175.8 mo
185.64 175.74 185.52 175.44 185.58 175.2 cv
185.64 174.96 185.94 174.78 186.18 174.84 cv
186.48 174.96 186.6 175.2 186.54 175.5 cv
186.48 175.74 186.18 175.92 185.88 175.8 cv
cp
184.02 175.26 mo
183.72 175.14 183.6 174.84 183.66 174.6 cv
183.72 174.36 184.02 174.18 184.26 174.3 cv
184.56 174.36 184.68 174.66 184.62 174.9 cv
184.56 175.14 184.26 175.32 184.02 175.26 cv
cp
182.1 174.66 mo
181.8 174.54 181.68 174.3 181.74 174 cv
181.86 173.76 182.1 173.58 182.4 173.7 cv
182.64 173.76 182.76 174.06 182.7 174.3 cv
182.64 174.6 182.34 174.72 182.1 174.66 cv
cp
180.18 174.06 mo
179.88 173.94 179.76 173.7 179.82 173.4 cv
179.94 173.16 180.18 173.04 180.48 173.1 cv
180.72 173.16 180.9 173.46 180.78 173.7 cv
180.72 174 180.42 174.12 180.18 174.06 cv
cp
178.26 173.46 mo
178.02 173.4 177.84 173.1 177.9 172.86 cv
178.02 172.56 178.26 172.44 178.56 172.5 cv
178.8 172.56 178.98 172.86 178.86 173.1 cv
178.8 173.4 178.5 173.52 178.26 173.46 cv
cp
176.34 172.86 mo
176.1 172.8 175.92 172.5 176.04 172.26 cv
176.1 171.96 176.4 171.84 176.64 171.9 cv
176.88 172.02 177.06 172.26 177 172.56 cv
176.88 172.8 176.64 172.98 176.34 172.86 cv
cp
175.38 170.88 mo
175.38 170.82 li
175.38 170.58 175.62 170.34 175.86 170.34 cv
176.16 170.34 176.4 170.58 176.4 170.82 cv
176.4 170.88 li
176.4 171.12 176.16 171.36 175.86 171.36 cv
175.62 171.36 175.38 171.12 175.38 170.88 cv
cp
175.38 168.84 mo
175.38 168.6 175.62 168.36 175.86 168.36 cv
176.16 168.36 176.4 168.6 176.4 168.84 cv
176.4 169.14 176.16 169.32 175.86 169.32 cv
175.62 169.32 175.38 169.14 175.38 168.84 cv
cp
175.38 166.86 mo
175.38 166.56 175.62 166.32 175.86 166.32 cv
176.16 166.32 176.4 166.56 176.4 166.86 cv
176.4 167.1 176.16 167.34 175.86 167.34 cv
175.62 167.34 175.38 167.1 175.38 166.86 cv
cp
175.38 164.82 mo
175.38 164.58 175.62 164.34 175.86 164.34 cv
176.16 164.34 176.4 164.58 176.4 164.82 cv
176.4 165.12 176.16 165.36 175.86 165.36 cv
175.62 165.36 175.38 165.12 175.38 164.82 cv
cp
175.38 162.84 mo
175.38 162.54 175.62 162.36 175.86 162.36 cv
176.16 162.36 176.4 162.54 176.4 162.84 cv
176.4 163.14 176.16 163.32 175.86 163.32 cv
175.62 163.32 175.38 163.14 175.38 162.84 cv
cp
175.38 160.86 mo
175.38 160.56 175.62 160.32 175.86 160.32 cv
176.16 160.32 176.4 160.56 176.4 160.86 cv
176.4 161.1 176.16 161.34 175.86 161.34 cv
175.62 161.34 175.38 161.1 175.38 160.86 cv
cp
175.38 158.82 mo
175.38 158.58 175.62 158.34 175.86 158.34 cv
176.16 158.34 176.4 158.58 176.4 158.82 cv
176.4 159.12 176.16 159.36 175.86 159.36 cv
175.62 159.36 175.38 159.12 175.38 158.82 cv
cp
175.38 156.84 mo
175.38 156.54 175.62 156.36 175.86 156.36 cv
176.16 156.36 176.4 156.54 176.4 156.84 cv
176.4 157.14 176.16 157.32 175.86 157.32 cv
175.62 157.32 175.38 157.14 175.38 156.84 cv
cp
175.38 154.86 mo
175.38 154.56 175.62 154.32 175.86 154.32 cv
176.16 154.32 176.4 154.56 176.4 154.86 cv
176.4 155.1 176.16 155.34 175.86 155.34 cv
175.62 155.34 175.38 155.1 175.38 154.86 cv
cp
175.38 152.82 mo
175.38 152.58 175.62 152.34 175.86 152.34 cv
176.16 152.34 176.4 152.58 176.4 152.82 cv
176.4 153.12 176.16 153.36 175.86 153.36 cv
175.62 153.36 175.38 153.12 175.38 152.82 cv
cp
175.38 150.84 mo
175.38 150.54 175.62 150.36 175.86 150.36 cv
176.16 150.36 176.4 150.54 176.4 150.84 cv
176.4 151.14 176.16 151.32 175.86 151.32 cv
175.62 151.32 175.38 151.14 175.38 150.84 cv
cp
175.38 148.86 mo
175.38 148.56 175.62 148.32 175.86 148.32 cv
176.16 148.32 176.4 148.56 176.4 148.86 cv
176.4 149.1 176.16 149.34 175.86 149.34 cv
175.62 149.34 175.38 149.1 175.38 148.86 cv
cp
175.38 146.82 mo
175.38 146.58 175.62 146.34 175.86 146.34 cv
176.16 146.34 176.4 146.58 176.4 146.82 cv
176.4 147.12 176.16 147.36 175.86 147.36 cv
175.62 147.36 175.38 147.12 175.38 146.82 cv
cp
175.38 144.84 mo
175.38 144.54 175.62 144.36 175.86 144.36 cv
176.16 144.36 176.4 144.54 176.4 144.84 cv
176.4 145.14 176.16 145.32 175.86 145.32 cv
175.62 145.32 175.38 145.14 175.38 144.84 cv
cp
175.38 142.86 mo
175.38 142.56 175.62 142.32 175.86 142.32 cv
176.16 142.32 176.4 142.56 176.4 142.86 cv
176.4 143.1 176.16 143.34 175.86 143.34 cv
175.62 143.34 175.38 143.1 175.38 142.86 cv
cp
175.38 140.82 mo
175.38 140.58 175.62 140.34 175.86 140.34 cv
176.16 140.34 176.4 140.58 176.4 140.82 cv
176.4 141.12 176.16 141.36 175.86 141.36 cv
175.62 141.36 175.38 141.12 175.38 140.82 cv
cp
175.38 138.84 mo
175.38 138.54 175.62 138.36 175.86 138.36 cv
176.16 138.36 176.4 138.54 176.4 138.84 cv
176.4 139.14 176.16 139.32 175.86 139.32 cv
175.62 139.32 175.38 139.14 175.38 138.84 cv
cp
175.38 136.86 mo
175.38 136.56 175.62 136.32 175.86 136.32 cv
176.16 136.32 176.4 136.56 176.4 136.86 cv
176.4 137.1 176.16 137.34 175.86 137.34 cv
175.62 137.34 175.38 137.1 175.38 136.86 cv
cp
175.38 134.82 mo
175.38 134.58 175.62 134.34 175.86 134.34 cv
176.16 134.34 176.4 134.58 176.4 134.82 cv
176.4 135.12 176.16 135.36 175.86 135.36 cv
175.62 135.36 175.38 135.12 175.38 134.82 cv
cp
175.38 132.84 mo
175.38 132.54 175.62 132.36 175.86 132.36 cv
176.16 132.36 176.4 132.54 176.4 132.84 cv
176.4 133.08 176.16 133.32 175.86 133.32 cv
175.62 133.32 175.38 133.08 175.38 132.84 cv
cp
175.38 130.86 mo
175.38 130.8 li
175.38 130.56 175.62 130.32 175.86 130.32 cv
176.16 130.32 176.4 130.56 176.4 130.8 cv
176.4 130.86 li
176.4 131.1 176.16 131.34 175.86 131.34 cv
175.62 131.34 175.38 131.1 175.38 130.86 cv
cp
175.38 128.82 mo
175.38 128.58 175.62 128.34 175.86 128.34 cv
176.16 128.34 176.4 128.58 176.4 128.82 cv
176.4 129.12 176.16 129.3 175.86 129.3 cv
175.62 129.3 175.38 129.12 175.38 128.82 cv
cp
175.38 126.84 mo
175.38 126.54 175.62 126.3 175.86 126.3 cv
176.16 126.3 176.4 126.54 176.4 126.84 cv
176.4 127.08 176.16 127.32 175.86 127.32 cv
175.62 127.32 175.38 127.08 175.38 126.84 cv
cp
175.38 124.8 mo
175.38 124.56 175.62 124.32 175.86 124.32 cv
176.16 124.32 176.4 124.56 176.4 124.8 cv
176.4 125.1 176.16 125.34 175.86 125.34 cv
175.62 125.34 175.38 125.1 175.38 124.8 cv
cp
175.38 122.82 mo
175.38 122.52 175.62 122.34 175.86 122.34 cv
176.16 122.34 176.4 122.52 176.4 122.82 cv
176.4 123.12 176.16 123.3 175.86 123.3 cv
175.62 123.3 175.38 123.12 175.38 122.82 cv
cp
175.38 120.84 mo
175.38 120.54 175.62 120.3 175.86 120.3 cv
176.16 120.3 176.4 120.54 176.4 120.84 cv
176.4 121.08 176.16 121.32 175.86 121.32 cv
175.62 121.32 175.38 121.08 175.38 120.84 cv
cp
175.38 118.8 mo
175.38 118.56 175.62 118.32 175.86 118.32 cv
176.16 118.32 176.4 118.56 176.4 118.8 cv
176.4 119.1 176.16 119.34 175.86 119.34 cv
175.62 119.34 175.38 119.1 175.38 118.8 cv
cp
175.38 116.82 mo
175.38 116.52 175.62 116.34 175.86 116.34 cv
176.16 116.34 176.4 116.52 176.4 116.82 cv
176.4 117.12 176.16 117.3 175.86 117.3 cv
175.62 117.3 175.38 117.12 175.38 116.82 cv
cp
175.38 114.84 mo
175.38 114.54 175.62 114.3 175.86 114.3 cv
176.16 114.3 176.4 114.54 176.4 114.84 cv
176.4 115.08 176.16 115.32 175.86 115.32 cv
175.62 115.32 175.38 115.08 175.38 114.84 cv
cp
175.38 112.8 mo
175.38 112.56 175.62 112.32 175.86 112.32 cv
176.16 112.32 176.4 112.56 176.4 112.8 cv
176.4 113.1 176.16 113.34 175.86 113.34 cv
175.62 113.34 175.38 113.1 175.38 112.8 cv
cp
175.38 110.82 mo
175.38 110.52 175.62 110.34 175.86 110.34 cv
176.16 110.34 176.4 110.52 176.4 110.82 cv
176.4 111.12 176.16 111.3 175.86 111.3 cv
175.62 111.3 175.38 111.12 175.38 110.82 cv
cp
176.28 108.72 mo
176.52 108.72 176.76 108.9 176.76 109.2 cv
176.76 109.5 176.52 109.68 176.28 109.68 cv
175.98 109.68 175.74 109.5 175.74 109.2 cv
175.74 108.9 175.98 108.72 176.28 108.72 cv
cp
178.26 108.72 mo
178.56 108.72 178.74 108.9 178.74 109.2 cv
178.74 109.5 178.56 109.68 178.26 109.68 cv
177.96 109.68 177.78 109.5 177.78 109.2 cv
177.78 108.9 177.96 108.72 178.26 108.72 cv
cp
180.24 108.72 mo
180.54 108.72 180.78 108.9 180.78 109.2 cv
180.78 109.5 180.54 109.68 180.24 109.68 cv
180 109.68 179.76 109.5 179.76 109.2 cv
179.76 108.9 180 108.72 180.24 108.72 cv
cp
179.94 107.7 mo
181.92 109.2 li
179.94 110.7 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 0 0 colr
f
0 gry
true set_gvm
%ADOBeginSubsetFont: TimesNewRomanPS-BoldMT Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPS-BoldMT def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1988, 1990, 1993, 1996, 1997, 1998, 1999 Adobe Systems Incorporated.  All Rights Reserved.Times New Roman is a trademark of the Monotype Corporation, registered in the US Patent and Trademark Office and may be registered in certain other jurisdictions.) def
/Weight (Bold) def
/ItalicAngle 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 67 /C put
dup 78 /N put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
def
/UniqueID 44337 def
/FontBBox {-180 -250 1008 889} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-15 0 662 677 456 470] def
/OtherBlues [384 384 -216 -213] def
/FamilyBlues [-15 0 662 677 447 461 694 694] def
/FamilyOtherBlues [384 384 -216 -213] def
/StdHW [34] def
/StdVW [137] def
/StemSnapH [34 48] def
/StemSnapV [137 159] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
27 dict dup begin
/space <1C60D8A8C9B8707C25> |-
/parenleft <1C60D8A8C9B81F2C7E67B76C13D49B584A8C60E8A2A62A403994
02E66235C7F64ACA3F312BA65698D218ABA516893C5D9549881379A5598AEC86
2B279AB39F0666> |-
/parenright <1C60D8A8C9B81F2C3A8DB67BA9A4250BFCFF808CC50736F80FA
D61AAD292BE8A4B5B8E7289CACC319D299269BF9C13CB0AE1B581C23C8BA6916
4455614D0F421A8> |-
/hyphen <1C60D8A8C9B81F2C6E5E09EBBCC8950097506F4E4CE6049760AAC05
EECCF> |-
/C <1C60D8A8C9B6079F21B6431E57B5E8FE7555A1DCC63619B67D19482DF3EC
29C47EB7BD17ADF637B824E8B1E7C3170477BEEE8F8920801558A81A0EFB26CC
49B094EE66BEC1D1DC8822C9B0C446900020B9603442A74FCDD6BC26FA15A4E4
AB20CC511438040D13B6E5BAC2FC74AB00C2> |-
/N <1C60D8A8C9B6079F62A970FA9E7FDA7A99F3F46D44C11AA67322E7C78CB2
AED9E5F4B771DE0C9FC5E06689D99BEB495545062396FE9A2DD1AD0F9D40B1B3
7FDFB5DC58D373B0A9B919108716935C33865F809BC65D637D343435D83700BF
450D07AB136B832DA39FE4FB1AC586CF9F632BC2E42E> |-
/a <1C60D8A8C9B7A73D8FBF8AB99781C392D2DF2FD1DC9E509B7104B332AA33
957305D55BD3AE9C59D865DB1AE0E2BAB27BFC388CD892A4B4F3CD4F5D67FA94
BF0A89FB7BE24F29793C84FB92B81C0BFEAADDBBA2D07B41F5A02142BC7B2E8E
C51CCEFF58A3EC10582D2A16648217D4653CDE58B90F412E829FD2D6059E4CBC
F5AAB1687366A7590EF451F9285B3DB679A549C749DC129AAF2836C8F2A6C712
96169FE5870E1A65F72D6B1DDB09260B0599695E53CA683E6A8903FA745B9D40
6E17DB5BE7FBF74FEB> |-
/b <1C60D8A8C9B7EF320BBF07A523D077FEF08CA1F113206590610927D0E4C3
6AF14EDD0706FE1FD2566617B1F33687AE0F6D05E609CB6D90C1D9A5C90529DE
BD9D6456B8289A910DAFE03BA58D92357D46480D6205A2D4F396E67C2984EA53
67566AA7284B7B224361BFDD2C9E29> |-
/c <1C60D8A8C9B77FE29601F9E4C6E706164210CD71D339DFADF517C442D658
3260B7C9DF30FA80FD81A62472EAA7C301CEC307B11F8320F48C46FB69B16D5B
354B1963EA2AE83709C44CBDE47C4866AF56A1941C9D9E4A49CC79B80963> |-
/d <1C60D8A8C9B7EF3268B2948C25F0AC6F6D2461C032CAB62C569C82613DFB
0450176A38EF211FB84242A89BE242CD17531701E2E7E3DDD6A53E28F1A620EA
AF8D5B0FCB6CF4548C45BE2DFAC850799C885319A65BCE3C8A1E6D66191C584C
0E61BD22E4F15DDCE2FAE64E1DFE9FE4AAFC16F182C30535F766D607907AEAD6
5A5B3A6325D7734CE266B4A7FBA9D1A17F24A2F605FE974DB446297A0A1A562E
FB1C85776FA96B5731FBF8> |-
/e <1C60D8A8C9B77FE29601F9E44C6062CE5646F8DACB089A27AA79C930198E
116FBA30D0210E58B0B28E73CE3C4D6FD3B56CDD4E4D2B94452698F68BC6A948
666627004BE811A8B7F2CEF92E85BAAA04BBA12DEB5D42C1B7ED6269B6B047E9
A11983D9> |-
/f <1C60D8A8C9B81F2C21640001952410F2C2A127D872EC847C369216F30B8D
DA26FE57C4F9BC1C7DAB042DF5B12A9D85174EB29E5CF8ABC9DC5AFABDAA900D
68500338BA1D0AA33D80D8931446F8A149C6A59F741B58F7877C3D9B80527CF7
CCF698A4089AAA2429ABE526A599691368> |-
/g <1C60D8A8C9B7A73DFF6096AA627B0D2D911D8E3F05B7115A5B61755680E7
F52DD2AF54C16BEC6943A650826C1CB4C5BFC11E197CEC760E48C3467691189D
050D11511CBE6E9DB7206F57103B1904A001D7B6C84A285018237FB4D66C894D
90BBF3A271BDD61FCE02FF8AB01D15E150F88AA485098C0EE07243FB1B61BFF6
72155969B67A668D6ED3D4F63B38A11092DEAFAD189FDDBD87F336E3D88ACE62
AA0F23CF568E6E1888438A5D53AA11D7B5D4FE94E97EA03C9A784BDECF3047EE
12E4F12C411F539A5CF1C87B294E391F05FDD362AF5736A4176092B84E2EABCE
F4BEDA5EE8CF3BE8E249BB50205A39A84E2317ED53962863E346A777E279B834
E2B4A74045CA1A4C7A233E65BD15C803604694D49FE741C85D59BAB72B4B0373
EFD13B891AD3679ACB945DE5995A16D90416915A42C995F06BD84BD20363E1E7
5D4838A831904241BC3BD1C11E5A4DAC24EAC50C0281FBC05DF3B046> |-
/h <1C60D8A8C9B7EF323D6EEFBAA23C4FA791869A3480A60CEAA7964F467840
E84192764F6AE903A0F885D3C9D24128E2B198819DCF968A9C22718E4D4588C1
2085A5AE34E52749F59AEF1B2A9ED1A17CDB97C8B32B8FC070D84BD3D4704675
C597CF850EFFDF10F10783A36007D8DD991AE1C089> |-
/i <1C60D8A8C9B854D0D6F48417B3EC39CE498E63AA037882B6EC7D94320234
872EC6D8619828991C5733FEA443A40EB8E01984658DB63195DFC3528D2AC5FE
98E9EBF3E45F6F45E3D3946968410088030A7F494DB9AE793FB3EDD8AF91A10A
421161EBE68F1B5ACD1481> |-
/j <1C60D8A8C9B81F2CA27B7B53DA36D8593A9449ED070BB5F3A530A232EEC0
45AB7D578FEDA8E5A2F8840716324013EECD6ED56B3D61FE39CE6DAFA1CCCA6E
4EEE2F90F46BB9F184907A50409D1C56E6DD83847A8859DDBFFF1DFC2412E330
CD75B07B52B35087C7D4A6CB475C17E53F41CF8399197ACD940E8C612724853C
BD4572033702B3F70922> |-
/l <1C60D8A8C9B854D0D6F48417B3EC39CFCA2FD26B689370990F5E07EBBD28
7FACFB9832E2146DC5EBB589B44F987A1190E9DA4F73E972A20A> |-
/m <1C60D8A8C9B6B41CADD020E68EAF074D06EBB255977DCCEEB7209134D047
CACBD92B47146906B0EFEA6B42B29A2D1B35CD9C5F47DF4F39431F9A229F6888
1E5FC8DD4ABC2F574C68D8F869DD3E39422B6F98CD93078F17DBE78EBE9868EE
D64F654DC3F912B35EB03A7C5ADE595C577958AAFC3D072DCCDD407FC7785881
6601F8F0897D831DF72D9C7FC04BA457639ABCC798E91AEAD1407D9646528B08
405F68372889A3E2941676A237BDC8775AAA1ADE3A9B1D2389C1008B> |-
/n <1C60D8A8C9B7EF323D6EEFBAA23C4FA791869A3480C46FD6E5A99EAA2E98
59AA2C53745A8860288C65A627B99FC6A7444BC1EF490C62BE0E481C6A3A7E74
812FBA35428F725E662BD42958B88AB06D570733D9A7F9A132E9056927661479
AA5BD5019498FEAE26DF574D53863D498EB30DC660D8A7637C4D17387142E144
A5FAFF> |-
/o <1C60D8A8C9B7A73DE19004C53F559219A66E8F46AFF6F5F70276CA45AFAA
7E0E66ECB0CEE9FF813A4A1200D895427F162BD19E1D3868E15C04A4E90BF770
48EA5979B47FBA1D9BBF41D456E09ABFC97BFFBA7E5ACC4F79D8CE> |-
/p <1C60D8A8C9B7EF320BBF07A523D077FEF00A50ABCB019B44E5AA6070A938
A56897F29138922565A1786C4824D66D1AFCB08594B4C15FF2C477517DB74454
F789DBAE28D85C0B5D135B7E143A7A5BCA1941722D85A85326935D85D20EF3D0
47475780CB520BB89D8D73FAE67FEAC71083CA72133F442730C8A0C5FD094B22
7D5CEF975AB4586C42E9F97A8EDFADC21BF37BC0DAD125893E3A81C2F32BAE39
178D25906B28A92D3A92CC9584F345013D6F3F084540DA2BDBE1A1194E569DDA
63AC711E7E7489A21E> |-
/r <1C60D8A8C9B77FE2D8D9C0E30C67BBE63C8971FF12AD1C0ACFB69D16E5FD
FD0CCAC57B9EA1F7C27FABFC877A31A45D5B59BBC83E4F4C69F43712882CB1E9
60E6E846E5672055ADC995E4612F616BB87BE9443BFD088CFA34239BFFE67B7E
FDF979C260AA0C3DDFF47CDA3EDDC06B0DE33A8B07EDC3> |-
/s <1C60D8A8C9B7361F41914302D7BF43BDDE7AF8E5E09CFF6CCF4F3503E9AF
73884936A82336E2EFF9EDE264B48E2B0F269FC61A62AAC827A6B5D105153241
DEB33BFF48741547B28D0DBF7F4F861FA74C022C57DFBFC33A31C003DCC285A3
77E56410316DAA0FB2816590142856E17E7440D349741679964FF9B237D69DAE
D9B7E2564AE5A940593089D475399B63F3CCCB251B5189241F847EBBA022846E
FEE8148660AD837357363FE984EB202E4D81341745C0E4251B59B192BEEF04A3
053BDEA55EB20EDC51BA458C2CD13C2D31> |-
/t <1C60D8A8C9B81F2C1A197712199DB43268DEC49F6F56233D945F0121EDA1
9F5717E45497516562E7ECFE9D16AC8AA7E9A191C743CAEAAA88AC0685A56A9B
A80E1663C3704F38BEBA6048499C23AE6CF7> |-
/u <1C60D8A8C9B7EF3201CFE4217B5021D58072D35C62F314A58A3E9AEA46F4
6127FC548A53539CFA5ADA52E297069BEE0BE0AD31C4691DCAE89B4CC551DD54
BBD7B56E5A94AD4F7DD41DA593D08EAF1F28108261A214590A2AB164A02C68E8
41304B9BE38D6FAF063B211C4725D3AEE8C1393F4E43DEC923EF005B38BA0305
DB7F3236494890F1C8> |-
/x <1C60D8A8C9B7A73DD17846BA9C887F8BFDD038B9E1CD02CD00FC407E83AE
DAF7F26411AA90B8028393859D3CA922713805E38274D2B47C029CB2088897C1
DE04206C06DB6E03BFF35811903E620C69664E85C83560C492B16C9800C7587D
99792FF76D3DAAFD91D61F46EA05D0A7044EF537D4D98AB182DF51D53ADE3FA2
323B0C84DD1675E6D235CB9F5BC55A443497F97507C6DFE032141C99DB2C493F
447F4CFE0E46> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/TIQPPF+TimesNewRomanPS-BoldMT /TimesNewRomanPS-BoldMT findfont ct_VMDictPut
/TIQPPF+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 21{/.notdef}rp 
/C 10{/.notdef}rp /N 18{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /j /.notdef /l 
/m /n /o /p /.notdef /r /s /t 
/u 2{/.notdef}rp /x 135{/.notdef}rp]
TIQPPF+TimesNewRomanPS-BoldMT nf
TIQPPF+TimesNewRomanPS-BoldMT*1 [0 -9 -9 0 0 0 ]msf
352.38 507.96 mo
(\(a\) Normal execution\(b\) Compressed-domain ex)
[-2.99783 -4.50089 -2.99783 -2.27969 -6.4989 -4.50092 -3.99689 -7.49783 -4.50092 -2.5029 -2.22031 -3.99689 
-4.50092 -3.99689 -3.99692 -5.00488 -2.99783 -2.5029 -4.50089 -114.838 -2.9996 -5.00491 -2.99783 -2.27969 
-6.49887 -4.50092 -7.4978 -5.00491 -3.99689 -3.99692 -3.50195 -3.50195 -3.99689 -5.00488 -2.99783 -5.00491 
-4.50085 -7.49786 -4.50085 -2.50293 -5.00488 -2.27966 -3.99695 0 ]ysh
352.38 213.6 mo
(ecution of splitter \(le)
[-3.99152 -3.99149 -4.99951 -2.99243 -2.4975 -4.49548 -4.99951 -2.27969 -4.49551 -2.99243 -2.27966 -3.49658 
-4.99951 -2.4975 -2.4975 -2.99243 -2.99243 -3.99152 -3.99146 -2.27972 -2.99243 -2.4975 0 ]ysh
352.38 134.4 mo
(ft\) and joiner \(right\))
[-2.99335 -2.99335 -2.99329 -2.27972 -4.4964 -5.00037 -5.00043 -2.27972 -2.99329 -4.4964 -2.49841 -5.00043 
-3.99237 -3.99243 -2.27966 -2.99335 -3.99243 -2.49835 -4.4964 -5.00043 -2.99335 0 ]ysh
true set_gvm
%ADOBeginSubsetFont: Arial-ItalicMT AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TIQPPE+Arial-ItalicMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D0F4790807CBACD8FD659970B8> |-
/h <1C60D8A8C9B7EF32243F1B832E8F0F34AF47BA3599AC161382694C88EB62
0236CBA444D31C92230C215440ACACF56AD166585A0943D1BD31B6E6D91F2C5A
7DE04FB917D9C829C18A59146921E257141D3A8A13EB0E41166AF4FAEE544C37
308490> |-
/l <1C60D8A8C9B88C082010D53CF1A8D4CD196DF6A30943D4B76D6352A37443
0CD7> |-
/p <1C60D8A8C9B7EF322425E24BBF205D0D28F6A72EB6470F2FDDD4B97193E8
EC3AA7AD14C760E3B194983EC4D64865917F03CA67729CEA1EE9C42CAAD8FE9F
E2CB135A5623E89E005ECACD2EC5442BC972438A4FF009A192AB0441908381BB
20156904349778823B7039773C7847600AAE6723D98B6D218A26175899FC4C6A
B198FA471A84023AD03549B1B049B6488850E599406282B49873C17C379E1D56
831013E19FEEE0FDCBD1720B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TIQPPE+Arial-ItalicMT /Encoding get
dup 32 /space put
dup 104 /h put
dup 108 /l put
dup 112 /p put
pop
%ADOEndSubsetFont
reset_gvm
/TIQPPE+Arial-ItalicMT*1 
[32{/.notdef}rp /space 64{/.notdef}rp /a /.notdef /c /d /e 
/f /.notdef /h /i 2{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s /t /u /.notdef 
/w 136{/.notdef}rp]
TIQPPE+Arial-ItalicMT nf
TIQPPE+Arial-ItalicMT*1 [0 -9 -9 0 0 0 ]msf
166.5 51.1794 mo
(prune rules )
[-4.99048 -2.98346 -4.99048 -4.99048 -4.99054 -2.52179 -2.98346 -5.03815 -1.9845 -4.99054 -4.48651 0 
]ysh
177.361 47.2194 mo
(not shown)
[-4.99323 -4.99316 -2.49121 -2.52179 -4.4892 -4.99323 -4.99316 -6.53851 0 ]ysh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 ]]
] del_res
true set_gvm
/TIQPPD+SymbolMT*1 uf
/TIQPPD+SymbolMT uf
/DWVAAA+SymbolMT uf
/TIQPPB+ArialMT*1 uf
/TIQPPB+ArialMT uf
/ArialMT uf
/TIQPPE+Arial-ItalicMT*1 uf
/TIQPPE+Arial-ItalicMT uf
/Arial-ItalicMT uf
/TIQPPC+Arial-BoldMT*1 uf
/TIQPPC+Arial-BoldMT uf
/Arial-BoldMT uf
/TIQPPF+TimesNewRomanPS-BoldMT*1 uf
/TIQPPF+TimesNewRomanPS-BoldMT uf
/TimesNewRomanPS-BoldMT uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
