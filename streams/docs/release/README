StreamIt Snapshot Release
-------------------------

This is for the May 28, 2003 snapshot release (streamit-0.0.20030528).

$Id: README,v 1.15 2003-08-07 18:17:16 dmaze Exp $

1. What is this?
2. Dependencies
3. Caveats
4. For More Info



1. What is this?
----------------

This is a *snapshot* release of the StreamIt compiler.  The compiler
is still under active development; if it breaks, you get to keep both
pieces.  See "caveats", below.  This compiler should produce
functional code for both uniprocessor targets and the MIT RAW
processor.

There are two versions of this release.  These are:

  streamit-src-0.0.20030528.tar.gz: "Source release."  This contains
  the full sources of the StreamIt compiler and runtime libraries, but
  no binaries.  Build instructions are included in the INSTALL file.

  streamit-0.0.20030528.tar.gz: "Full binary release."  This contains
  no sources, but does contain a Java jar file with the full
  compiler.

The StreamIt compiler is built on top of version 1.5B of the Kopi Java
compiler from DMS Decision Management Systems GmbH.  Parts of the
system (the scheduler, Java runtime library, C library, and frontend)
are independent code.  However, this entire release is under the terms
of the GNU General Public License, Version 2, with some exceptions for
freely modifiable and redistributable runtime libraries; see the COPYING
file for details.  The binary release also include class files from the
ANTLR LL(k) parser generator.

Several documents on StreamIt are in the 'docs' directory.  You can
find more information on our Web page, at
http://cag.lcs.mit.edu/streamit/.


2. Dependencies
---------------

The frontend depends on the ANTLR LL(k) parser generator; see
http://www.antlr.org/.  If you are using the source release, the ANTLR
classes must be in your Java CLASSPATH when compiling and running the
StreamIt compiler.  If you are using the binary release, the required
ANTLR classes are already included in the StreamIt jar file.

The C library depends on the FFTW library; see http://www.fftw.org/.
The StreamIt runtime system currently only supports fftw-2.1.x, not
the newer fftw-3.0 branch.  FFTW should be installed somewhere in your
default compiler search path if you are using the uniprocessor
compiler backend.  You need to build single-precision versions of the
library, such that you have an srfftw.h and a libsrfftw.a.  If you are
building FFTW from source, use the --enable-float and
--enable-type-prefix options when compiling.

Compilation for RAW depends on the most recent released RAW build
environment (as of this release, raw_dist_2003_03_18).  The TOPDIR
environment variable needs to point to your StarSearch directory; this
may be the reduced 'workdir' tree from the RAW distribution, or the
full 'starsearch' tree.


3. Caveats
----------

This is a *snapshot* release of the StreamIt compiler.  This is a
research compiler; as such, it has several known shortcomings:

-- The compiler works by converting StreamIt syntax to a Java
   intermediate form, and then using a Java compiler.  Of note,
   compiling 'foo.str' will clobber a file named 'foo.java' in the
   same directory.

-- The frontend has only rudimentary correctness checks.  If you get
   strange exceptions from the frontend, check your program's syntax,
   and that all variables are declared before being used.  A semantic
   checker is currently in progress.

-- For stream I/O types, arrays are not supported on the uniprocessor
   backend.  Primitive types and structures are supported on both the
   uniprocessor backend and RAW, and should work in the Java library.

-- Multidimensional arrays may not work well, particularly as the
   input or output type of a filter.  (Better performance is often
   possible by destructuring arrays in any case.)

-- enqueue statements can only occur outside of any control flow, and
   can only enqueue fixed constant values, not expressions involving
   stream parameters or other compile-time constants.

-- Phased filter support differs between the compiler and library.  A
   work function that consists only of calls to phase functions should
   work in both; a more complicated work function, possibly including
   variable declarations and static control flow, would work in the
   compiler but not the library.  The intermediate Java code differs
   between the two compilation paths.

-- The Java library infrastructure may not allow particular
   combinations of stream parameters.  This should not be a problem
   with the compiler; if you run into it, see
   docs/implementation-notes/library-init-functions.txt for how to fix
   it.

-- Most of our development is done under Linux; some aspects of the
   compiler may be specific to gcc and/or Linux.


4. For more info
----------------

The StreamIt home page is at http://cag.lcs.mit.edu/streamit/.  There
are a number of places you can send electronic mail to:

  streamit@cag.lcs.mit.edu
    General information on StreamIt, or to be added to streamit-users
    or streamit-dev

  streamit-users@cag.lcs.mit.edu
    Discussion list for application developers and others using the
    StreamIt compiler

  streamit-dev@cag.lcs.mit.edu
    Discussion list for people working on the internals of the
    StreamIt compiler

  streamit-bugs@cag.lcs.mit.edu
    Submission address for bugs in the StreamIt compiler or runtime

  streamit-features@cag.lcs.mit.edu
    Submission address for feature requests in the StreamIt language,
    compiler, or runtime


Local variables:
mode: text
End:
