\documentclass{article}

\title{Installing the StreamIt Compiler}

\begin{document}
\maketitle

\noindent
This is for the October 17, 2003 release of the StreamIt compiler and
runtime system, version 2.0.\\
\verb|$Id: install.tex.in,v 1.7 2003-10-17 15:59:39 dmaze Exp $|

\section{Compilation}

Unpack the StreamIt source tar file somewhere; this can be in your
home directory, or in a shared directory.  Run \texttt{./configure} from
the top-level directory, which will look for several programs needed
to use the compiler and create files needed by the build process.  If
it complains that certain programs are missing, you should install
them before continuing; a list of programs required is included in the
\verb|README| file.

\subsection{Source Release}

The  release comes  with  provided dotfiles  that  set up  all of  the
possible environment variables.  Note that the settings in these files
\textsl{must} be customized according to your local infrastructure. If
you use bash, add to your \textsf{.bashrc} file:

\begin{verbatim}
. $STREAMIT_HOME/include/dot-bashrc
\end{verbatim}
%$

\noindent or if you use tcsh, add to your \textsf{.cshrc} file

\begin{verbatim}
source ${STREAMIT_HOME}/include/dot-cshrc
\end{verbatim}
%$

If you want to override the settings the provided scripts set (for
example, the Raw StarSearch directory), set the relevant variables
after reading the \textsf{dot-bashrc} or \textsf{dot-cshrc} file.

If you are trying to install both StreamIt and the Raw tools, set up
Raw first; the setup process requires that the \verb|TOPDIR| environment
variable be unset.  After running \texttt{make setup} in the starsearch
directory, edit the \textsf{dot-bashrc} and/or \textsf{dot-cshrc} files
to have the correct setting for \verb|TOPDIR|.

You need to reload your shell's dotfiles; an easy way to do this is to
log out and log in again.  You can compile the source tree: run
\texttt{make} from the top-level directory of the StreamIt release.
After this completes, you should be able to run the compiler.

\subsection{Binary release}

Add the StreamIt jar file to your Java \verb|CLASSPATH|.  If you use
bash, add to your \textsf{.bashrc} file

\begin{verbatim}
CLASSPATH=$CLASSPATH:$STREAMIT_HOME/streamit.jar
\end{verbatim}

\noindent or if you use tcsh, add to your \textsf{.cshrc} file

\begin{verbatim}
setenv CLASSPATH ${CLASSPATH}:${STREAMIT_HOME}/streamit.jar
\end{verbatim}

Compilation for the various backends requires extra setup.  If you are
compiling for Raw, you need to set up the Raw tools separately.  The
uniprocessor backend requires a runtime library, which can be compiled
by running \texttt{make} from the top-level directory of the StreamIt
release.

After you complete these steps, you should be able to run the compiler.

\section{Testing the Compiler}

A simple test of the compiler is the ``hello world'' program, which
prints a series of increasing integers.  To run this test, type the
following:

\begin{verbatim}
cd /tmp
cp $STREAMIT_HOME/apps/examples/hello/HelloWorld6.str .
strc HelloWorld6.str
./a.out -i10
\end{verbatim}
%$

This should print the numbers 0 through 9, in order.

You can also test the Java library backend using \verb|strc|:

\begin{verbatim}
strc --library HelloWorld6.str -i10
\end{verbatim}

This will convert the StreamIt program to Java, compile it against the
Java library, and run it for ten steady-state iterations.

\end{document}
