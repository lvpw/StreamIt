\documentclass{article}

\usepackage{hyperref}

\newcommand\filename[1]{\textsf{#1}}
\newcommand\envar[1]{\textsf{#1}}

\title{StreamIt 2.1 Release}

\begin{document}
\maketitle

\noindent
% note: RELEASE_DATE resolved in Makefile
This is for the RELEASE_DATE release of the StreamIt compiler and
runtime system, version 2.1.\\
\verb|$Id: readme.tex.in,v 1.21 2006-09-07 01:26:29 thies Exp $|

\section{What is this?}

StreamIt is a programming language designed for efficient
implementation of streaming systems, particularly digital signal
processing applications.  This is a public release of the StreamIt
compiler.  While the compiler is still under active development, we
believe this release should be useful for developing StreamIt
applications.  See "caveats", below, and report bugs and feature
requests to \texttt{streamit@cag.csail.mit.edu}.  This compiler should
produce functional code for uniprocessor targets, multicore
architectures, clusters of workstations, and the MIT Raw processor.
There is also a runtime library for testing programs through a Java
compiler.

There are two versions of this release.  These are:

\begin{description}
\item[streamit-src-2.1.tar.gz] "Source release."  This contains the
  full sources of the StreamIt compiler and runtime libraries, but no
  binaries.  Build instructions are included in the INSTALL file.
  
\item[streamit-2.1.tar.gz] "Binary release."  This contains no
  sources, but does contain a Java jar file with the full compiler.
\end{description}

The StreamIt compiler is built on top of version 1.5B of the Kopi Java
compiler from DMS Decision Management Systems GmbH.  The independent
components of the system, including the scheduler, Java runtime
library, C/C++ libraries, the front end, and the StreamIt .str files,
are released subject to the terms of the MIT license agreement. Other
components of the system are released under the terms of the GNU
General Public License; see the \filename{COPYING} file for details.
The binary release also include class files from the ANTLR LL(k)
parser generator.

Several documents on StreamIt are in the \filename{docs} directory.
You can find more information on our Web page, at
\url{http://cag.csail.mit.edu/streamit/}.

\section{Dependencies}

The front end depends on the ANTLR LL($k$) parser generator; see
\url{http://www.antlr.org/}.  If you are using the source release, the
ANTLR classes must be in your Java \envar{CLASSPATH} when compiling
and running the StreamIt compiler.  If you are using the binary
release, the required ANTLR classes are already included in the
StreamIt jar file.

The linear optimizations (not turned on by default) depend on the FFTW
library; see \url{http://www.fftw.org/}.  The StreamIt runtime system
currently only supports fftw-2.1.x, not the newer fftw-3.0 branch.
FFTW should be installed somewhere in your default compiler search
path.  You need to build single-precision versions of the library,
such that you have include files \filename{sfftw.h},
\filename{srfftw.h} and library files \filename{libsfftw.a} and
\filename{libsrfftw.a}. 
The linear  optimizations are turned on only if  \texttt{configure}
can find all four files. 
 If you are building FFTW from source, pass 
the following options to configure: \texttt{--enable-shared --enable-type-prefix --enable-threads} \newline \texttt{--enable-float}.


The source release depends on Sun's Java compiler (javac).  Otherwise,
a Java virtual machine, for Java version 1.5 or later, is required to
run the compiler; see \url{http://java.sun.com/} for possibilities.

The makefile infrastructure generally uses the GNU tools otherwise.
In particular, GNU Make is required to build; this is the default
\filename{make} on Linux machines, and may be available as
\filename{gmake} on other Unix-like machines.  GNU Make can be
downloaded from \url{http://www.gnu.org/}.

While this is not a a dependency, the \texttt{graphviz} package from
\url{http://www.graphviz.org} contains a viewer, \texttt{dotty}, that
will display the dot files created by the StreamIt compiler.
\texttt{ZGRViewer}, from
\url{http://zvtm.sourceforge.net/zgrviewer.html} should also work for
displaying dot files.

\section{Caveats}

This is a \emph{snapshot} release of the StreamIt compiler.  This is a
research compiler; as such, it has several known shortcomings:

\begin{itemize}

\item The compiler works by converting StreamIt syntax to a Java
   intermediate form, and then using a Java compiler.  Of note,
   compiling 'foo.str' will clobber a file named 'foo.java' in the
   same directory.

\item The dimensions of a filter field cannot be declared in terms of
another filter field.  That is, code of the following form will fail:
\begin{verbatim}
float->float filter Foo {
  int N = 10;
  float[N] coeff;
  ...
}
\end{verbatim}
In such cases, just declare the array to be \verb+float[10]+.

\item The compiler does not support passing structures or complex
  numbers as stream parameters.  This will result in an error such as

\begin{verbatim}
at.dms.util.InconsistencyException: Expected constant arguments to
init, but found non-constant VarExp:p in parent SIRPipeline
name=pipe_3
\end{verbatim}

   Structures and complex should work as local variables and as the
   input or output types of filters.

\item Arrays cannot be returned from helper functions.

\item In most back ends, arrays cannot be used as the input or output
types of streams.  This is largely a limitation in the uniprocessor
back end; you can get equivalent code by using streams of the base type
of the array, and constructing the array inside the work function if
necessary.

\item The \texttt{static block}s are limited (except in the Java
library back end) in that they act as specified only if every declared
variable in the static block is assigned to exactly
once. Furthermore, there can currently be at most one static block in
a program.

\end{itemize}

\section{For more info}

The StreamIt home page is at \url{http://cag.csail.mit.edu/streamit/}.
There are a number of places you can send electronic mail to:

\begin{description}
\item[streamit@cag.csail.mit.edu]
    General information on StreamIt, to report bugs in the compiler or
    request new language features, or to be added to streamit-users
    or streamit-dev

\item[streamit-users@cag.csail.mit.edu]
    Discussion list for application developers and others using the
    StreamIt compiler

\item[streamit-dev@cag.csail.mit.edu]
    Discussion list for people working on the internals of the
    StreamIt compiler
\end{description}

\end{document}
