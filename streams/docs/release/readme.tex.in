\documentclass{article}

\usepackage{hyperref}

\newcommand\filename[1]{\textsf{#1}}
\newcommand\envar[1]{\textsf{#1}}

\title{StreamIt Snapshot Release}

\begin{document}
\maketitle

\noindent
This is for the May 28, 2003 snapshot release (streamit-0.0.20030528).\\
\verb|$Id: readme.tex.in,v 1.2 2003-09-10 14:42:03 dmaze Exp $|

\section{What is this?}

This is a \emph{snapshot} release of the StreamIt compiler.  The
compiler is still under active development; if it breaks, you get to
keep both pieces.  See "caveats", below.  This compiler should produce
functional code for both uniprocessor targets and the MIT RAW
processor.

There are two versions of this release.  These are:

\begin{description}
\item[streamit-src-0.0.20030528.tar.gz] "Source release."  This contains
  the full sources of the StreamIt compiler and runtime libraries, but
  no binaries.  Build instructions are included in the INSTALL file.

\item[streamit-0.0.20030528.tar.gz] "Full binary release."  This contains
  no sources, but does contain a Java jar file with the full
  compiler.
\end{description}

The StreamIt compiler is built on top of version 1.5B of the Kopi Java
compiler from DMS Decision Management Systems GmbH.  Parts of the
system (the scheduler, Java runtime library, C library, and frontend)
are independent code.  However, this entire release is under the terms
of the GNU General Public License, Version 2, with some exceptions for
freely modifiable and redistributable runtime libraries; see the
\filename{COPYING} file for details.  The binary release also include
class files from the ANTLR LL($k$) parser generator.

Several documents on StreamIt are in the \filename{docs} directory.
You can find more information on our Web page, at
\url{http://cag.lcs.mit.edu/streamit/}.



\section{Dependencies}

The frontend depends on the ANTLR LL($k$) parser generator; see
\url{http://www.antlr.org/}.  If you are using the source release, the
ANTLR classes must be in your Java \envar{CLASSPATH} when compiling
and running the StreamIt compiler.  If you are using the binary
release, the required ANTLR classes are already included in the
StreamIt jar file.

The C library depends on the FFTW library; see
\url{http://www.fftw.org/}.  The StreamIt runtime system currently
only supports fftw-2.1.x, not the newer fftw-3.0 branch.  FFTW should
be installed somewhere in your default compiler search path if you are
using the uniprocessor compiler backend.  You need to build
single-precision versions of the library, such that you have an
\filename{srfftw.h} and a \filename{libsrfftw.a}.  If you are building
FFTW from source, use the \texttt{--enable-float} and
\texttt{--enable-type-prefix} options when compiling.


Compilation for RAW depends on the most recent released RAW build
environment (as of this release, \verb|raw_dist_2003_03_18|).  The
\envar{TOPDIR} environment variable needs to point to your StarSearch
directory; this may be the reduced \filename{workdir} tree from the
RAW distribution, or the full \filename{starsearch} tree.


\section{Caveats}

This is a \emph{snapshot} release of the StreamIt compiler.  This is a
research compiler; as such, it has several known shortcomings:

\begin{itemize}
\item The compiler works by converting StreamIt syntax to a Java
   intermediate form, and then using a Java compiler.  Of note,
   compiling 'foo.str' will clobber a file named 'foo.java' in the
   same directory.

\item The frontend has only rudimentary correctness checks.  If you get
   strange exceptions from the frontend, check your program's syntax,
   and that all variables are declared before being used.  A semantic
   checker is currently in progress.

\item For stream I/O types, arrays are not supported on the uniprocessor
   backend.  Primitive types and structures are supported on both the
   uniprocessor backend and RAW, and should work in the Java library.

\item Multidimensional arrays may not work well, particularly as the
   input or output type of a filter.  (Better performance is often
   possible by destructuring arrays in any case.)

\item Phased filter support differs between the compiler and library.  A
   work function that consists only of calls to phase functions should
   work in both; a more complicated work function, possibly including
   variable declarations and static control flow, would work in the
   compiler but not the library.  The intermediate Java code differs
   between the two compilation paths.

\item The Java library infrastructure may not allow particular
   combinations of stream parameters.  This should not be a problem
   with the compiler; if you run into it, see
   docs/implementation-notes/library-init-functions.txt for how to fix
   it.

\item Most of our development is done under Linux; some aspects of the
   compiler may be specific to gcc and/or Linux.
\end{itemize}

\section{For more info}

The StreamIt home page is at \url{http://cag.lcs.mit.edu/streamit/}.
There are a number of places you can send electronic mail to:

\begin{description}
\item[streamit@cag.lcs.mit.edu]
    General information on StreamIt, or to be added to streamit-users
    or streamit-dev

\item[streamit-users@cag.lcs.mit.edu]
    Discussion list for application developers and others using the
    StreamIt compiler

\item[streamit-dev@cag.lcs.mit.edu]
    Discussion list for people working on the internals of the
    StreamIt compiler

\item[streamit-bugs@cag.lcs.mit.edu]
    Submission address for bugs in the StreamIt compiler or runtime

\item[streamit-features@cag.lcs.mit.edu]
    Submission address for feature requests in the StreamIt language,
    compiler, or runtime
\end{description}

\end{document}