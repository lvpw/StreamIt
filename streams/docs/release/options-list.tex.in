% This file is a raw Latex listing of the options to the StreamIt compiler.  
% It is put in its own file so that it can be included from both the release
% document and the cookbook.

\newcommand\metavar[1]{$\langle$\emph{#1}$\rangle$}
% don't throw error if previously defined filename command
\providecommand\filename[1]{\textsf{#1}}
\begin{description}
\item [-{}-help]
Displays a summary of common options.

\item [-{}-more-help]													
Displays a summary of advanced options (which are not described below).

\item[-{}-output \metavar{filename}]
Places the resulting binary in \metavar{filename}.

\item[-{}-raw \metavar{n}]
Compile for an \metavar{n}-by-\metavar{n} Raw processor.

\item [-{}-standalone, -S]
Generate C file without library dependencies.

\item[-{}-library]
Produce a Java file compatible with the StreamIt Java library,
and compile and run it.

\item [-{}-memory \metavar{size}, -Mmx \metavar{size}]
Set maximum Java runtime heap size. The default heap size is 1700Mb.

\item [-{}-verbose]
Show intermediate commands as they are executed.
\end{description}

\subsection*{Options available for all backends}
\begin{description}
\item [-O0]
Perform no optimizations (default).

\item [-O1]
Perform basic optimizations that should improve performance in most
cases. Adds \texttt{--unroll 16 --destroyfieldarray --partition --ratematch --wbs}.

\item [-O2]
Perform extended optimizations that should improve performance in
most cases, but may also cause the compiler to become unstable.
Adds \texttt{--unroll 256 --destroyfieldarray --partition --ratematch --removeglobals --simulatework --wbs}.

\item [-{}-linearreplacement, -l]
Domain-specific optimization: combine adjacent ``linear'' filters in the
program into a single matrix multiplication operation wherever
possible.  Corresponds to the ``linear'' option in the PLDI'03 paper.

\item [-{}-unroll \metavar{n}, -u\metavar{n}]
Specify loop unrolling limit. The default value is 0.
\end{description}
	  
\subsection*{Options specific to Raw backend}
\begin{description}
\item [-{}-partition, -p] Partition the stream graph,
   using a dynamic programming algorithm to divide the graph
   into load balanced units for execution on separate tiles.
   This is turned on by default if the number of filters in
   the expanded stream graph is greater than the number of
   tiles.

\item [-{}-magic\_net, -M]
   Compile to a ``magic'' network in which the buffer sizes between Raw
   tiles are conceptually unbounded (the sender never blocks), and the
   communication time has a constant overhead and per-hop
   latency. These parameters can be varied by editing the
   auto-generated \filename{Makefile.streamit} file, which contains a
   string \texttt{-magic\_crossbar C1H1}. The number after the ``C''
   refers to the constant overhead; after the ``H'' refers to the
   per-hop latency.

\item [-{}-numbers \metavar{n}, -N\metavar{n}]
   Instrument code to gather performance statistics on simulated
   code over \metavar{n} steady-state cycles. The results are
   placed in \filename{results.out} in the current directory.

\item [-{}-rawcol \metavar{m}, -c\metavar{m}]
    Specify number of columns in Raw processor; --raw specifies number of rows.

\item [-{}-simulatework, -s]
    Use the Raw simulator to calculate the amount of time required
    to execute a work function, rather than using an estimator.
    This makes the compiler substantially slower; it may result in
    better partitioning.

\item [-{}-wbs] When laying out communication
   instructions, use the work-based simulator to estimate exactly when
   items will be produced and consumed.  This improves the scheduling
   of routing instructions.
\end{description}

\subsection*{Options specific to uniprocessor backend}
\begin{description}
\item [-{}-frequencyreplacement, -F]
   Domain-specific optimization: combine adjacent ``linear'' filters in
   the program and convert them to the frequency domain wherever
   possible.  Corresponds to the ``freq'' option in the PLDI'03 paper.

\item [-{}-linearpartition, -L]
   Domain-specific optimization: perform linear replacement and
   frequency replacement selectively, based on an estimate of where it
   is most beneficial. Corresponds to the ``autosel'' option in the
   PLDI'03 paper.

\item [-{}-profile]
   Compile C code with profiling information. This requires that
   your system have profiling versions of the standard C and math
   libraries (\filename{libc\_p.a} and \filename{libm\_p.a}), along
   with a profiling version of the StreamIt library; invoke \texttt{make
   profile} in \filename{\$STREAMIT\_HOME/library/c}. Profiling
   results can be analyzed using \filename{gprof}.
\end{description}

\subsection*{Options specific to the Java library}
\begin{description}
\item [-{}-iterations \metavar{n}, -i\metavar{n}]
   Run the program for \metavar{n} steady-state iterations. Defaults
   to infinity.

\item [-{}-norun]
   Perform the library setup and schedule the stream graph, but don't
   actually run the program.

\item [-{}-nosched]
   Don't run the scheduler; instead, run in a pull mode, where the
   buffer lengths are examined at run time and a preceding filter is
   run if needed to provide enough data to run the current filter.

\item [-{}-printsched]
   Print out the minimal-latency schedule for the program.

\item [-{}-marksteady]
   Print ``*'' to standard output after each steady-state execution.

\item[-{}-library]
      Produce a Java file compatible with the StreamIt Java library,
      and compile and run it.
\end{description}
