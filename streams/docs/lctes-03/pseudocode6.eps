%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Microsoft Word - pseudocode-figure.doc)
%%Version: 1 4
%%Creator: (PScript5.dll Version 5.2)
%%CreationDate: (D:20030428120643Z)
%%For: (Kunal)
%%DocumentData: Clean7Bit
%%BoundingBox: 212 665 473 779
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
212 665 moveto 473 665 lineto 473 779 lineto 212 779 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.
%%Version: 1.13 0
systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelse
exch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25
add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exch
def/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun known
not ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont known
def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def
/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500
string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{
pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel
known{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFont
findresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exch
length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont
findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+
{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vm
exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm
setglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$
type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data
/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{
Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode
exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod put
stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3
1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{
$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvm
setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def
end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09
/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C
/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F
/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42
/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55
/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68
/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B
/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E
/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1
/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4
/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7
/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA
/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED
/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001
0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch
errordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get
(Error: )print dup(                    )cvs print errordict exch get exec stop
}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8
bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility
/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dup
string/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def
2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 index
add 2 index length le{2 index getinterval dst_string dst_index 2 index
putinterval length dst_index add/dst_index exch def exit}{1 index length 1
index sub dup 4 1 roll getinterval dst_string dst_index 2 index putinterval
pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2
index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}loop
pop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{
/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename
/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomark
currentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresource
begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode
filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}
ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def
/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal
/Generic/Category findresource dup length dict copy dup/InstanceType/dicttype
put/CIDFont exch/Category defineresource pop setglobal}ifelse
ct_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)
def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def
/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1
begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMap
defineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def
/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2
copy known{get dup dup maxlength exch length eq{dup length 10 add dict copy
ct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop
/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1
index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop
/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource
/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copy
known{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop
/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus
/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init
{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()
/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup
(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring
}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelse
load exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZE
le{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put
}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1
exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2
index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch
1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2
index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec pop
dup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop pop
false exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArray
get 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc
1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop pop
pop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 0
1 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index
2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin
/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{
ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin
/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{
currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end
/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def
/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSET
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{
exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exch
cid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 roll
GlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}
for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontName
currentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartData
ct_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSet
ct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop
/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInit
ct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSet
defineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def
/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSet
defineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index begin
CIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCode
exch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop
0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}
ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}
ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval
/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid
0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 roll
true charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}
def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidth
moveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aload
pop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}
ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{
currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dup
maxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}
{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def
/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1
dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdict
end/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup
/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring put
rootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfont
ct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{
currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidth
setlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDict
ct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dup
ct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}
ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private
3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869
internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Private
get mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse get
exec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def
/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get begin
ct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def
/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def
/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding
ct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11
dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def
/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load def
ct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def
/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def
/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def
/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def
/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string def
currentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def
/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dup
not{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WMode
exch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrix
matrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}if
def/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{
2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if array
def BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont
/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProc
known{CIDFont/CDevProc get/CDevProc exch def}if currentdict end
BaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVector
exch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 mul
def FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16
BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}
for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefont
setfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths get
begin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2
index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astore
def}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def
/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop pop
exch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName
3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}
bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMap
ct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict begin
begincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo
3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs
(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop
(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1
begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0
endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}
ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind
def currentdict readonly pop end end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
212 665 261 114 rectclip
/N14 [/DeviceRGB] /ColorSpace defineRes pop

 Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%!PS-Adobe-3.0 Resource-CIDFont
%%DocumentNeededResources: procset CIDInit
%%IncludeResource: procset CIDInit
%%BeginResource: CIDFont IALBAC+SymbolMT
%%Title: (IALBAC+SymbolMT Adobe Identity 0)
%%Version: 1
/CIDInit /ProcSet findresource begin
20 dict begin
/CIDFontName /IALBAC+SymbolMT def
/CIDFontVersion 1 def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
  /Registry (Adobe) def
  /Ordering (Identity) def
  /Supplement 0 def
end def
/CIDMapOffset 0 def
/FDBytes 0 def
/GDBytes 3 def
/FontBBox [0 -220 1113 1005] def
/FontInfo 2 dict dup begin
/FSType 4 def
/OrigFontType /TrueType def
end readonly def
/CIDCount 65535 def
/FDArray 1 array
dup 0
  %ADOBeginFontDict
  10 dict begin
  /FontType 1 def
  /PaintType 0 def
  /FontName /IALBAC+SymbolMT def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
  %ADOBeginPrivateDict
  /Private 8 dict dup begin
  /BlueValues [-15 0 600 650] def
  /MinFeature {16 16} def
  /LanguageGroup 1 def
  /password 5839 def
  /lenIV 4 def
  end def
  %ADOEndPrivateDict
currentdict end
%ADOEndFontDict
put def
/GlyphDirectory 1 dict def
ct_GlyphDirProcs begin GlyphDirectory +
0 <10bf31704faacd68130743d1032b19039b05d30ed4559c5ecf2da4ace2ab
53168b5c58eb3d8c199cf05ae7> |
!
end
%%BeginData: 21 Binary Bytes
(Binary) 0 StartData
%%EndData
%%EndResource
 ct_restoreCIDInit /IALBAC+SymbolMT-Identity-H /Identity-H 0 [/IALBAC+SymbolMT] ct_ComposeFont pop end end 
%%BeginResource: encoding
% Identity-H
%PDF_BeginEncoding: N21 (IALBAC+SymbolMT-Identity-H)
/N21 (IALBAC+SymbolMT-Identity-H) /Identity-H [ (IALBAC+SymbolMT) ]
 /NoSubstitution [ /Serif ] 0 TZzero
%%EndResource
%%BeginResource: font IALAJM+TimesNewRoman
11 dict begin
/FontName /IALAJM+TimesNewRoman def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b8302fd45b0609d6bde5a48b0240d44d91aabd11b7ee50303a
812fda6ed97443c437b8d3bea589> ND 
/space 
<10bf317079c757bf91> ND 
/parenleft 
<10bf317046e70250e8bd40d114dd6e816b58f4d3349c0c7727832e7501d9
0d48751e5ed01a4a989a3de6f3df4e8150bcde04496d7ebf18ade860af48
8df404b0480a8fe53e55e37acb5a554f9e5cbbe042244d6fc0aa0fdafde4
acb4c52d35fe39221cd926f89c> ND 
/parenright 
<10bf3170537b448b82841392ad69a78470fcf6ad5b9860e31496592c5fd2
8c2a948b7ef1391379bc9dc9754e13aa1a0d8be5cfd2e3bc1b6a246b4628
a43a8883776071abf86a7883d030defeed590f0bf1949e72bae27054def5
466be78152f4af0ef71e17f1> ND 
/plus 
<10bf31706fd84e5f2e0a0838b9fd7e0092f300e992b318c48321d965efd1
ccb59eccf1d7f1d5204f88d4fc523105> ND 
/comma 
<10bf31703349889182628c27046cd28591351566e0dd9918199391ab1e71
486c64d05bb98e8e971258eb23fc2c1c680eac8a011cdbd1e19f1758f932
2fa930559db4dc8ad65afc3701e52ac5d183fd29d8312642e94d04052d7d
f70157aafefed3b4bfad260a8075001774f81a0d82a7df92> ND 
/zero 
<10bf31705d64a97b17e82784743dd8afd77cc124ffedf62073386a4af3bd
86fd28c9c7a756e9ef18e3ca007b94f0e02e9eb268494f71c4e6ce33e23a
daf3d98e6e397ae6d95a99deac335d9d72bffd478071defcda00cb768906
0b44c557ecf61de22b31359bb158f6fec05d2caffa2d64aa1e2dc65d6175
e933567afd84f788ad9d2ecdc1d1277289609d3478a2f9ff64e3fec0e6b8
8edb35e90668db5b556d9651c4b7ff49d0e2> ND 
/equal 
<10bf31706fd84e5f213246ce12afb09aaf5d6fc92b7b479a7625eccb0931
bf62979b6a20ad> ND 
/A 
<10bf3170612fa8ae288a2f767c6f2d22480749f87ffaef88db9508f355b3
d621b9e09a8d1290afe57d05190debf7b19b92f6309b70e08d2409abdf50
3b6a0e5daa0043a6e298cadec0a7dbd5588f8ba0646e339db53e322e33db
33e9ac93d421016e880386d59c5f84e2c9dcb201c618c0d88390bc39b5b5
dcf9b13cb5b08470f0d83c168f6d7ea2244d1b> ND 
/C 
<10bf31705d65c09013f5e74d02fbfce579927dc4371245d5279a0be7ec2d
bd3b1448f6fd9c53426e6238d321f77957395a071b4b8eae65710650ca99
5020550eaa4528d828ef4c47ac3d29b589dd7f1c7cfe44b10e3e8fa63e50
7c3e4eb74e257f81314f58ef9126142bc9d3a940c619a0d5450ffb6600e9
bb7f776713c2df8dd431070f31717d2477542aecd1539231d249a65da0e1
ee77958319b99e72488e0e9fa74f4d170e269189eb39aa1a> ND 
/D 
<10bf31706ea8518093a448f0413d9dd2503cf14562d62f8e03c59ef262c0
e81d3c5037d7a8fbf15657e5bea1080fe305ab71bf0048720c010cf41197
6f2c354776e6ac045fcbc3395f65891cbe4c7f0093e58d10b57eae23372e
4cc99d7f2f11c1f1c023288641813a3b8b65e70e4b5173920a628da83be4
7b524c38228036fccc15a820529e8626ae48a60adbbae5fd> ND 
/E 
<10bf31705245888107d641c65df0d045384b4474a865698169ff2c4c5759
f26e2217c59fcbe377198e20e38aaa44f075831908ff3584c8503712a3f9
da462024eae3426d516a8864b3756edb7e42923b77324ddcf4879e1b61b4
02502bf9f5c08a938a8b9111b299fb506f1aa6115b23bb6038633ef2c172
1c1c4fba6b5b7baae1d192358092d890074dc21b1d5f65994b78807f042e
8945e17dc9fd4baebebbadfc790575a38910eab682188d9cdb44060faa47
1dcf91df296595839280be99912fd6d9ac4594d1b8a3> ND 
/F 
<10bf317069b1b5630e42cd6c8ff2cb4d3f7bc188fb90c1fdbffc389a7b7c
590172825fc5f7c1632f0e00f7f24a69c85e73a086926561cd7597f366b9
c557c28ba97bd9e48588932b584d925e90f75351236f8dee991d8b2912e0
edc0500223be1a5bd4cd44c3c3de75aa12b7e63ed3a399ba00214a66fe95
b5d95b0096ce0321bb87083de3bbc29cfe8ef473870f448ffcd9f71c6888
fa2bf4ba82669c30c14d2655a8b69d82e43f233aafad0cc27d2d> ND 
/I 
<10bf31705600a7ed90307a9003ca62013c6a672423969cbfb09d38b977c3
3bb76a0a443b03ca15feffb7f47ead3efae89c4da09011014b3ef74dfcc4
49aa62038fec2b8087c3eb93eadcca82adeba753d37fb428848495514418
28d8a0f3ad99e43ca7d439d4d98a470d6617f8dd1388> ND 
/L 
<10bf31706d7ba414cb278d86ccf8028d3dbbadce953c477ec6fd892cdd09
28b47464cdb0aff88491ce732d9c10732adab5aca1a48b24486aeab6e776
8d3f8a7557500e8ad2d7563790919272c92abe6932db67709b8be481fa2d
23f34f8a2142f5ade46e9f8e951b9e69f9979f92c2712747285f1cd50a35
4a817e3933293b845a2c1e14ed04ed77> ND 
/N 
<10bf31708c7b609303394ff7e7beb1f1e2d912c0050722dbb269837c8070
85159ebfbcb850e48463d8f358084aeded97142804f1f51ff75d16b17a5d
646a3837e3ebdfafd6182c21d8cdafc98e9d8cbc0b466167cceccb3d123f
62398962a519f2323011d0b183f9ad60fd7a288173be28cd9c4597796a7c
d28ca04ea047fbcb8cf977be0c4bcf07ced5e27f53> ND 
/S 
<10bf3170383eecc69ba25cd9f9f1a3f877f72d54ca249226fb09a99225d4
fa4a892ae0bf757b41a46aaf766816bb2e9c6c4e867aeb02a76d05e762b6
353837bdf52bbc0c70c14510f08ced31ac95e2c8b5dfdbf8f1dffd4709a0
760737961b7464d75e4dbf7323db187fa23f8213fd84f092b3c292e45093
4a017d49f1fa4f8d834c3fd0c5126c0c5c896c1a48c0653753c6f56c23b6
627010a4379bd3d96b26db0b3531098cdc23704e1f8e25a61651df0d8d02
8f68c8b7a7de4652566ef5c50305a3ec674a5be2d1bf9f76580a00788d85
ad3f4dc24f5adec7880bc3a7db38c71260e951f8778b0aff0ff2e97effe6
f0b2b33485e5f0401138cd3f9e066ed25ff05e7594ebdb0029f3d5> ND 
/T 
<10bf31705b0718f462bb36d02a655e51f04593b972dbe0892a4279b53c95
62dbd237266bc0cb4e5967f6d053e97e3cc8fe6477448edcd2c2ed40f6e6
056ef32aac1986bf84927c9fb1e2806a71f53c8604421852f835782fd7d8
0fdb45127c08fbe24f16e5af9ede981de72f75b4f62ef25f8b6075081fcf
> ND 
/Y 
<10bf3170662739732759e31a33a2b858ac8cce35fcfa8b0fd6b101b1337c
eaa4fd69224740144b433cf972bf0c225d34380ffe63ffc9039c9c0899da
43713e2fa2e8096de83d9eb6c845f80c506b743f7df3fec42b298fd74cb0
0691546d7fc43db5b278ea906a981eb2ef70e4b072692c1f1c3b1cd76235
f7c45bcd5f1ce939a048c7198db71b56f5842ae2d2efe815de0be7393924
485a953a8f1f6258415c5ee70d72d6a5833d55c0cdd424060f02ed4bdfbc
2b154233d6ab9344af> ND 
/a 
<10bf31705d647142d5ee6b7c4c12c41164f05a89990635873917bf00c5a2
b1b299b84b64fad030fdefe54a736fd84981f1bdecf34c327a4087285dd7
ff9a128a9fff4f1e5e34e2c477e4543546f0e505eb84b8e6141c12199331
8a7bef58caa55697aff5d8bf4fe61eb63478ae931b5c51fe7be8aa76cee5
cf639a1d462398300117c6a9c09614a29dfc50b3c7ddbacc1c6e2f7accb0
35d51bb776dfa4f2180b5bfa695d4ee30d466764f5192b628fd7c4971313
cd38d55ff99cfe805727052d975c4756402eb9230dd87b777a603efe9c10
65e950375d54aa41ed1c701bfac764ae78b65834b8918a99ed1f017d5313
eb0950b1f45353f40dc633104ecc941e4bbbf8359d5ae9042ef0f4edfdb8
> ND 
/b 
<10bf31707b35db816a4355a1c9cd0401bf6033c55938246c8b69de26e575
c058903a4e9b57b68075848962a6cd3da069ec2730d8699e3ccf520befe1
1a090d11586ebd56effd705bd3a5ced6c4343ddaabfe70e422082141dc06
c695cc46ee2dde408c0760a4c361b784ab85994758cbad73179f314048f1
c5a0c06c0e0ad84ded3a7904f207403afdd3193bf093fb903dbdef2de225
7307e43f8ee047d711ed22adc155c93b72dbad1a68> ND 
/c 
<10bf31705fc10320935f517e088588bc677b6f6b1116d76a45fb5fc081aa
57ad08a2f19e4ebd5e7f2e40678b64d780ab49e945b6f1fcf8c1bf2edd40
201d9d025abf1aec5b1b3268a3f2a9365f1c6e4133cdb11264503de1434e
2553cdd7a1785e8aefca6abe49ef29279001bfee84321f1c29e0a5b47534
7f9b91833b42fbc209dedbbca6bb8dac3b6f01ececb32ee525fd2275d1f3
f94c46a2dc92d591> ND 
/d 
<10bf31705e925b80b46abd5c29fa2d468b9b5e4bad025ff66ae6421f2159
e410fae538e7f5a90755fc4aa0e1909acab87d2263fe2beb089d6b932597
f97955542fb23ee02ff075e0e2003bcd35a0dc8fcdeec3b05157e1f949f5
3c3859814e432358033eab4cbebb11cb313a2d4e01ccb1ec831eb024e2db
c3d579a8da35c14675626591ac2eca02995f016a332260c2ef3a214c5222
c09fc068d46227963e811f66f7af291aa81d7807ad4efe2098965b55e611
61084fbfd3c71fb1d7ddef324c18429080886cac73b35a7c57be7b> ND 
/e 
<10bf3170422f4b41885a9676842055648b7ac91c5a5b75b50afc4ad63a16
3403789c9c8ba615f8e38a9fce64aceadaad23d4e3dbfa43e075f8b5608d
92b54d863453827f92409bc9183300c8f2b193237fd39a67d028e7efccd3
224f7d467520735ecf6bf2ce731119ee6085c9e4a87b9d8af5aaaf671a24
b9d9d852fe88b0aa1a2fe53bd12da555ee08ba1ef1ee246f54193c816b> ND 
/f 
<10bf317040cdafcf4c85ea96770a161ac86c86b3da1de71c3c1d8d7b233d
d5c9149f810914ad38a97a185443c1c2440e78f30291f76f6d029b3ea2b6
66de02ac1bf19ed2dbfc70d08ae79c368cc19dd7ee6f7f891d2c83ea3a82
f4273ce61781b76966f5c7876c34e2b43a45523c4b42ee5dfa86ed1aad28
c225091d8e9e75f9abbae478bde45603b24282244c90d0bd1005e38693d2
05c915e9f7b21b731549211bb149d33709f6ba292435a821caec7d09122a
a85fb1> ND 
/h 
<10bf3170638bba13892b6a5edf1363fbad8b95e15d8b1d61c9ff2e20460e
9fbee5ce56a3b804c731461fc79898dd9aa49a7578bd0636027b48157921
a917a207198baeee00a6aeca2924ff3a229448490e59b468fb8b3164c353
d9bc2653f19a1e5c4133f967037a72c7c8fbf885e7d2fe25db116b7c8e10
b3fd50a5bf16ce8ee83140eeca023c94dedee552fcf1a7935a31030ea899
3824e06eab9cf113ffc3161399601c0b8fff6a9768bb0205ffc7ac68a666
f3075641cdac00a867c63305b98c782f2fa25a94358084fd7f1a3e8a9aba
49e32a58f5abe91c09f7098b61c81b8653e474549ba40c7470f7bc> ND 
/i 
<10bf31705ac6fd959d25cdc7a9a3e9a496239b73578bd39bc85c0d669e22
6e691e09b0f32a97a0998434376a9ae157042bfa0f185e0e1869e77dcfcf
1555c1c8abd2efd30cc82f4c6c4ddf0f13b90a3c76a63f04f6deca3db44a
cc213f28bbe83758b298928dc74aa0666fbe3e63b2fac529d140e3b7039a
bc2bb148559fada7a9e275e919fc3f2cd6b953d39d41def61462d0b129f2
b21125b163636a99efd52186dc8496e41f> ND 
/k 
<10bf3170612e883674d2675aac39fa142a2f9de407f255952adbf70a8f61
dcc97f11c5b525f88e1dd0499bf87fea87e955adf630d83711a3925899c0
03b9f91dc3443000903cbe22625747190de827d6aed57c3f807366bbd6c6
3854786e273f1b9d2f49315171b285fa450532e1a996be3dfd2aafc74743
b4a57fabf2eddb1c25e9905cc57139486ad514add7eb942d1d1b791b6056
19d6f363ea6b92b2c94caf9a33a7be72eed5a355a7d76c1048097efb20dd
2f6c3a18d26def6109f03e7d30d5356121f15317baa59d193def17f7d470
1728dc814db541582ec9d0f98c682c14> ND 
/l 
<10bf31705b0817c8e08e579d70bd731872938fa19da6249b22a36add018f
2d71afb39a24cba2d5b131292eaf2ea6440cd481b67673b68d5de7db4045
53f0515df79be16519f0349ec3761dc09575b85d12a0ca2ef3e3cac5171f
27c0bb5b6c16bd708dadf6acc7da72304e> ND 
/m 
<10bf3170612f50a32a221f92c62df6f217e624d0a9df1e121860640913cc
49c4b2d35b710b10afd4f958933cf36f77fa2631f24cbc39b6fb55164082
193c40e902d50b4dd0e9f5ae2867995b45675b905195bdfcc9b26d09519c
1e89df3994ea78cedeba6852e8b9c507c215033124b55ca65aeabe76ef04
57fa09d46563663ca74b6f95faf692e9ff2805a952be9ce73108295db01a
1994fa03645166fdecc81234fb6ed970d2a939579f06453bc00a9eb193c6
89afa32196c9bbfd4f2e113a0f0a380ead1a15279b212e2d6f74df100cc7
60a6d17274c6477145b98511b0f38377fb67ec75a8941a93686e94c1719c
fcfef92ae4ed1bb42acc6930c9fd7d14d03f2c5cc57e8f007a194fcdc380
4777a58ea7912850daff4d6c2854942dfb30e0675160b33e854bf7fed66f
47144c25d4528d081f2387910709746bda8159065734924af6aea3b40f49
1ba747b6dede483a966ee00175b89acc0a77eed79d9fdb> ND 
/n 
<10bf3170638bba1389001ebc99bd428947467ee318fefc1fb124f3371d83
7e6e4fd04510bb88359fc2d65b2f295b6f18b7850f6ca41f0fd067e40bcc
1e6a5b41ca20f07f1559265c094e47681cd30c939ca836f577db4be36b05
95c3d60cd00f5b5495365e7e02e3400714839e79cc3816e739cdb0ba1b66
3f096ef3ea59642b52897d5ef4b5012d68776aa74244415b9e96a4f773a5
8085f9fe5bb74ace5b6860ca975ea43b7d0db4eefeddd777982336d72d05
c093ca194b7cd3478661a723994ed178a305b939140b4ac4b7ef4bb11e73
> ND 
/o 
<10bf31705fc1db5456c194eea6db4b28ba27bcfe06dfbaea808b4b94782b
858d11975b27223d0b6d7d91b178aa636f44bd6799b0a1e7bdfe3b2848e8
67d16652cf1e1d16eb11c8e931a8c3a5c20ce3e46e302745f5c6d7e5ce21
21e333fdaa150cd3191a1e4c670506e5c48803290df3192b44aa2b4f51a0
a9c983af94e8a18415a60616a6a395b3de67178db0d5045384581c136ad0
9005bf> ND 
/p 
<10bf31707a065bb2d4fcdbff26dc7fc389a2b8b370b59f91b1e9fc0bef0c
327c88198d7b546dfc608b13f7fcb8bc64cff7af2c18f699da39e53fbe37
ec097fa9ed32bc909b431f94a38ef46b90c907c345fc0194b5122ed9dbb4
520a43693133d37a01aa7d03cfea7c465d1f39c417c97cf35752895b647b
f6eeb9e1860d65028ce948e26109d628005c88929ab2810711af73457538
140a230647d1a4449996d6a087aeef7aa11197b1a7d6644dda8a28e570b9
025110e75308275897df1500b8ee5bed886eab146b5949fd3e0cb2a624f1
82a3907dabdc7d67145f1487b4fdd05c5af52274c2933d164387a1> ND 
/r 
<10bf317063846c0d04467b4514eeaf5ad995f8d8d5368dfec5aee1c6b68a
3c0ec443b5151d573544f035f9c8d56a8c86eff8bc45b9cb7e9f7b4d2809
af6f18097fb347def46731e8a3ca8727e68580e7e5a82ffd67834895aa8a
7069ddf865d0109c1727ed7e1906ae399964f53305401f293656e81d3f7f
a520bb51b43e002474ba474471779fe9f889b94891c2fcd98f80aeea2c61
083a35a481b1750c54fd90563aed2fa403c1bb4ae1b4> ND 
/s 
<10bf31704e7c764f163406da7dbbaf9d43c65b8fb757ade7829da62aa468
ae4baad8607e81147b16ed99a46ab38e424e5512c18fc36490fe0e0e3c97
dcaa7fe80721b43eb7737e0a60636624d7c3bb6047489980efa6d2c4807d
50aa67e7cf84be79d7d15a6b706fddbf727c9c6d9b0a699629abe5e444e5
0457164832d1875637e41249b15e9b27dc3430ba6cf1c3ab4c74334bddfb
8eb29c16da6b1ed80d7e90ec9c4540b3b77731da9497fdb30cff9013413f
000a5d34ea717ad1e71f37aca4fc003a6dde001ac4d2b8ee38552cfaec10
a42d8a25> ND 
/t 
<10bf3170675b4d3401fff3ff5f765da1975e70428467ea281d5658a08302
13a3804f9a1319dd7c580c31580e87e258a447c36de3afa6295edab19ac4
8b72bc19bc7bbb33808d808ebf49d28b777c53d40fa69bc3ca85c2cf0fb2
3dcaafafc241c80c646145936a07b2aeeb3dbc48cf79b8029b13f4d41756
50d9e9> ND 
/u 
<10bf31707ec0b061a3e31ce6a8e02f67c79fc6fb9433b583752df0b97381
ced785f0788651d9110f4d168d6f4fb870b9f8634f66a1fe17ef5bb051c8
5b17a112a0ece57f7e85709c1e46ba1a1de6ef26a274c75bdde36925dd09
efae6e5faacef2f29e68904c9555df5e0f6550945360d079ca305237daa8
7397519a4b0aef19668718de15c20ef2e07af7217dbd27700833b73e8190
1c7d2aacb619fbf2f1396d79a94fea4ca18c65bd942fda84> ND 
/y 
<10bf3170638bba13f480e5fde8996045de127a9c4618a2d4aa7c3941a65b
655e0c9abd29436b155308878db9c977a5fa9d8aabf88f01b9ed200087ec
a512549272155995d5ba8a658d1b9bd6631ff76a4e668a0f712e1ffb6536
2645509bc9da53c94714c8c3d06e835b3de8a617493a3b48a5cf09eb51a1
f8e94701f8b707ec6cac19b3b46b6af22d6b57b2906df634fd967798ff79
41b6c0c1662b9e4850b0745567e166dc15afd8d264bb362629824a3196ac
305d1be65193e27d2fd4c922aa9edd149d8aaacac7819d1067e8f92d1467
837fe3> ND 
/braceleft 
<10bf317005b96f6c4b91aaa36bb5c0c59aa21690f87f58e1036c517e0b54
1e847ef56031fbfd52f2a59c8e15ac4bae85ea386ef3949d2fb5a1e919e5
99a0823ca1661e4f0fe21d5595af83d8b5cc3676d0b0a099211b5df1d841
7658b897daa3d549172a9373ad0b2fcae91b10a7f5ce952a5ffc49e86858
86f636c8b200af7dbe569acd2a456be01e00bfe8c6b7476b8658b7fb5fb3
11c83325460ab603b67f2fd02b954731c36065b347419565b3f5e04d3637
598ac374af1de2ca1be3> ND 
/braceright 
<10bf317013096a3764061e7722db9abd0a4a4f7a79f121131ffe254a0c47
6624c2c9dec29f11523be1b55b158e6ce68d616bbbeafa8c91b793e6b53c
003075a00468451187c3ef089fa9ef618c6485c49ff7b15d420dde9cc248
a0e834730294eb8d2830b96d9aa5f52c32f8dd5d0b2d2821da55befbbcdb
ecdce710aa2102e9c912143d4e9ddaaa253e8c96e72b682c776fe863b882
cd465b02389181bdaa5798bb2b2b06434b1cf72c7238de85cb48bcb7be6d
a81332f24710f143> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/IALAJM+TimesNewRoman findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 48 /zero put
dup 61 /equal put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 78 /N put
dup 83 /S put
dup 84 /T put
dup 89 /Y put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
dup 123 /braceleft put
dup 125 /braceright put
dup 160 /space put
pop
%%EndResource
[/N12/IALAJM+TimesNewRoman 1 TZ
 Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%!PS-Adobe-3.0 Resource-CIDFont
%%DocumentNeededResources: procset CIDInit
%%IncludeResource: procset CIDInit
%%BeginResource: CIDFont IALAJB+TimesNewRoman
%%Title: (IALAJB+TimesNewRoman Adobe Identity 0)
%%Version: 1
/CIDInit /ProcSet findresource begin
20 dict begin
/CIDFontName /IALAJB+TimesNewRoman def
/CIDFontVersion 1 def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
  /Registry (Adobe) def
  /Ordering (Identity) def
  /Supplement 0 def
end def
/CIDMapOffset 0 def
/FDBytes 0 def
/GDBytes 3 def
/FontBBox [-568 -307 2028 1007] def
/FontInfo 2 dict dup begin
/FSType 4 def
/OrigFontType /TrueType def
end readonly def
/CIDCount 65535 def
/FDArray 1 array
dup 0
  %ADOBeginFontDict
  10 dict begin
  /FontType 1 def
  /PaintType 0 def
  /FontName /IALAJB+TimesNewRoman def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
  %ADOBeginPrivateDict
  /Private 8 dict dup begin
  /BlueValues [-15 0 600 650] def
  /MinFeature {16 16} def
  /LanguageGroup 1 def
  /password 5839 def
  /lenIV 4 def
  end def
  %ADOEndPrivateDict
currentdict end
%ADOEndFontDict
put def
/GlyphDirectory 1 dict def
ct_GlyphDirProcs begin GlyphDirectory +
0 <10bf317005b8302fd45b0609d6bde5a48b0240d44d91aabd11b7ee50303a
812fda6ed97443c437b8d3bea589> |
!
end
%%BeginData: 21 Binary Bytes
(Binary) 0 StartData
%%EndData
%%EndResource
 ct_restoreCIDInit /IALAJB+TimesNewRoman-Identity-H /Identity-H 0 [/IALAJB+TimesNewRoman] ct_ComposeFont pop end end 
%%BeginResource: encoding
% Identity-H
%PDF_BeginEncoding: N19 (IALAJB+TimesNewRoman-Identity-H)
/N19 (IALAJB+TimesNewRoman-Identity-H) /Identity-H [ (IALAJB+TimesNewRoman) ]
 /NoSubstitution [ /Serif ] 0 TZzero
%%EndResource
%%BeginResource: font IALAHM+TimesNewRoman,Bold
11 dict begin
/FontName /IALAHM+TimesNewRoman,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1320 dict dup begin
/.notdef 
<10bf317005b8302fd45b0609d6bde5a48b0240d44d91aabd11b7ee50303a
812fda6ed97443c437b8d3bea589> ND 
/space 
<10bf317079c757bf91> ND 
/F 
<10bf31705374f7ae1784e643b579ae16530511aa244cfaa7e3c92fa872e6
d2ada9ac7ce930632579722e70942c1d53be9aa78c59cf9b81b797d63901
796328c17724ac54e396942b4d047f04d62ba71b6f94e5b53386cfbe3e64
a23742961201c2326d7e543e0ed9a23e2f7be167c065402bbfc6cd642ff2
93e271e022de3b5deb038f775ad35b03668ad8ab682837a0f1ddc52af4dc
ac449eeb306b108990fb276b337675d71700a63a07b344ac2adc42d092> ND 
/a 
<10bf31704ab21818500193ceb7cb34e9df44d2f8ec9dd5c98d55ae22888d
9df2e6f213a10b28cefcaf95aa9640c835b3bd1ffcdc75a4a63fa25c6d04
6e0087c66cd64147f3ed96dff91cb0244813473d9381cce21ce83d903943
f4ac8f3242bc292da1de1531cc532a86e1f3cc7d1e021df739aea871418b
5de99006d4c5ab2682816c98649eed26a6b084e7f7ec911ec66ec74f0ad5
38dbeb4cb0b01a394cc508cff8b61d71209af50bf8f8ceff036e8a30b999
2cc25f8ecf6950be6e3e9dff42e54836dd89050eeb2b37dd3a0be262e8d0
35a9d19daa2c018f11edad2db0075ba942763369ef43d94cbf0bc2410fbc
2ce40e96872b5ba313aee01224b418272066554dc36af669eca48e0dfc1b
4fcee06d> ND 
/b 
<10bf31705245bfe8c003e0cc406368635e92cd08edeffce5c32e1a983183
43ae9009308349a411f1705fd8aa383c02b418f9e7cf853d5efb96099a63
93a94ed9657e944f233b2893b39418f999e021aa2899edd38935ccc07fab
6fedf03806b40fd91a9efa582298d852a866d9eab00ad7b30bae3946e684
bf06702e79356a6658878ba28f74c357dd28ad350bf2038991f2f04b99ad
431d19a0bda7698996111c650a239ad77804e258596230e29875b6c58cc9
79b02515dc> ND 
/c 
<10bf3170435d9d6bdca5552f143ea8eb00c0f43aa73ae186a90dee90257c
64691c2333fd0a4a4dc6b26abc1900c24aba3f592c7bcbc889fe7b599700
778b0a93f96f5579a87f760b1dbd87bf8d1ff4e807fa73245f81d5812a13
e76b05bfefadfd217cb7b7b5fc9876179e2b2989aa002dde4d77d381e7f0
f6ace03d73f2b18f749bc10e6974c8b964b6425bd099adf48ae2e4868a46
74e70af2af4f77dd356ffc858f87> ND 
/d 
<10bf317040c2af124e2cee3ec6662f5ae3702b081648c479f1a9cf450824
d5954ec179fb1b54018f01b5ec4303c44e836ead5de68ca483e6dd617c8d
aab6c9b06c1d588a23d82f05d51fbdd66fefd30bc78c73116922d063a8ae
52552aa8f83c25b8d7dcd85b7db9d7a3cab61a91f91f1cb746a8c43d3660
1c1c7bba28b0efb3d22c2c216830e65a5c9048a5b9dffcbe987ad7a84064
2f4c477424e93b94b978ea2451cb9aa11b7e1eee5abf6acb1f3c372630e6
f273794a93108f81fa16bb58bf3069fff1a2df16aaccfb> ND 
/e 
<10bf317040c23fc2e1ae41aa9282758c8c31679b7e286f24fa5b5a9a6fa9
75c7be3cf05ebf2a0fc236eb986b5f92e4980314c681fa061e7cec91d696
7818e2a880229495638c5ebd9d4d2949f80813353896ef8dcfc225660744
df906eeb5dc0c12faef2701cc430f938b192981dca77eb2c468f927adc09
540054eb413213ac2c8b75433c91b7aacb70b3c4376bd38fad0e034e7675
e0> ND 
/f 
<10bf31705995db6ed81eeebb87f269fbd6c73a87f171ac041c25c4bd0972
971313c0891076a43861660daa51f2420896c32ed813030ee5f1ef921bf9
f490472ae096e5930c799f0793ca21405dd4a1c0a440a6435438f340a7dd
abbbacc8c9ca90535e80701cfb6853cd77dc0c447e006ff957da80a0676f
0bfa17f44226539b4e28b0b818819ff802d383888aafe1c18e48ffca9684
8c928f183e20fbbc3beadbbbbf4b5b4eb1542a8a837281346f5ab4eff49e
67499518> ND 
/h 
<10bf31705fc1934666de4d7a0d44d4873ae3ad9bbe2e52f8e37d396e92e1
0d6f89788e9322343c71458f955c127300a0438abaa7137ce09735462860
ff7c1a3ea58e13057792c7e36e7c973a8cbded5077e46f1a08eae36a0203
fd23a13b83cf74e4fa77e1263085dfd27045c1aedfb7f1d6222c450c728f
0418704def75cccd561138a9f43833d745a4c9880db6d434c8169d9e848c
4bfe9f1cadec123b72df317b3c4908af7dc51a8346fa2d30cbb8654369b3
0a2f32ed0f8573cd> ND 
/i 
<10bf3170524a2d226105953d5eb24f8564e6b6f09006dcc5de63bfd94641
5431d498669f2a636dd1ce21202db89c173adcec99d9be4feb68a686a334
a4c32747de504ee5b288cf4791bb5cdd4a6f4abb420134e012ba9028a116
613f1accf2a80106e9041eb6299349713fdcc742227c93df73e17499d587
d463b9326464b14774fda5181e4133> ND 
/j 
<10bf31709dc00bb77db26508c8deee858639335aeda3140fd5c2b43ff31a
b4197a76e24283d92bed464999e614666b40d38e083ced03e8590906c469
01044fe4a50291047fd42e0a3c5214340eada56a0fb674f0a29ccd80ec30
2fa051b9fd7646b29a81df7aecb6b671fd99465a4b79f67212ddd21fb395
ea53fe6ece70adfded3fb610e94099bb4d083450f8837838748703ee8ca3
dec6c976285fd5eea631c88f3d47362fb16006f3e496dba9c434fad3b03b
a38bdfc059b38ede2630081eb0c372f25047bc84d1f4627d7e337291fcf0
ad4209a1cd573db5bd617f2a3ab24d1bcf> ND 
/k 
<10bf31705e921373a32e4aea1c624337e50d2ed1aa245665821b31a07215
0575221d285e111ee10c7ef1ca6cf69ad084916992f77bd4d0d3e85c2e4c
76babaa02193d4ce0676c171a2c03ca64fe0eae13ecdb82ecb0f9c8da507
7700c1b0474879a368d068337821b6c41b8f276e5bb7f55d9ab0e75e35d8
f6c9c0b681d6fcaa730d108c9713c7ac41b30bc92af19103791dfddfa941
5c9ee63e444113b95c7b5d0ec91a6b4cbf4abca3e2e44d0c82977779d49a
bfadb39b> ND 
/l 
<10bf3170524a2d223ba1bbf4c5f21ed2ea327f3adebffacfabc0760528fb
c599edf0863a6b729192d7cba5b9c80f0aa5ad4cf81891dad207693fb655
004238f4e7160a575e3797bd4099> ND 
/m 
<10bf3170422e98c5ed7ba2b7088d79e9e2818a90b5d814a1206a981fa47f
862545d86e5774c22cb75288f646fafd458bbc6d054d4d3cc74a2523e484
fe78e199ddcb1968c8b6caca0f25aad70888cf9affb9ce4bc81b508f7bc6
f3f4101e8765442e5856ef14e7a67b3953f86d293654380a72cc0ce0f93d
60af394ae7f77acf9b4841bf6367ee3f347d52adc3d20b75e623aebcc7e1
454939c521c56d240ca699f20d4a909d8615bb761de2ab6e367e19048e80
a0e981d6b5a2c1dec33f9c2a025f5e1d45fa3c1cde2284b6ebd1ceb33dc5
06c68f7f2e925b9679318e5c8e29e1c69aa269822e7f13aac7a0d100833d
688b3c0c7e400b85a20a96fbdff0737ab054bd03b86538f9e1a745606112
63b89a0a4210a8c322f6c572a07c4ce8a71ee425fa57fd69c1d5bf> ND 
/n 
<10bf31705fc1934666df69889b5e7716ef594193b6332fd6e87679d4002a
60b418d237a9a7fcd602eb906106efaf0b01b4528edbdaffd7aa13593d7f
0f21d9915346ad8e6da94702995c89ac1ca2bf2b32ba15e8cfbcb839038e
d3cfc8235729a16269b2f6c14c0345f60ae251ed8180347001c22289ef41
5cf4384a45d9a8e999484bc9b88c99f3dd7539b38fdb724af0e4ec8e215f
e0c6184ff35603d3cc911f6a426176dc15e6fe4e94358cddf593f4927f46
> ND 
/o 
<10bf31705d64a97b25cbcf5f96762b96d7bfc3628a598e0e406df472e1b2
b6c3d1b9dd3197bd4a86e13d5762df795e653ed93fbfa39d6dcac609ba77
c1604e85df1da6d235e41f8852cd6edfc2c9bd4ad7c9df97672f04e7e88c
f8ab91d6e3ced912be69d652d9e0ec0738b545ab515f5a17c4ee9ccd2d9f
152f06898ed1b9f20b48324686581d9490ff739a3b9e7caa7924b3359c8d
50b7da47a6815b5dedc41ca51cf6919d> ND 
/p 
<10bf31706c4c139ad1831178d9de498369c69bcfbcd0e57f7b9ea1e7dc04
9057245be52771ad802e500605e42a174aeea2d387bfdf5f8160cfe25fc1
9f8a57070a773a2703e99d5e7918c008585d5214503d27b4dbf094962d7f
76909b097054e5a139a62a955a50150d5342db2a7bda5fcdfdf67810aa5d
c64616f2a9cf9d4076fae339ec72b5965e18f8f43af7980634e6226c6c78
413bdde2c598398880ab440f04280157d7b36709d189a99abd9d48955e29
a742c2544a27a8c57f6e0e7cbc2cc427cdaaa879cbcb651c> ND 
/r 
<10bf3170422f4b41fab8ad31d745a52d75c28a1338888e5d6f5511d10efc
d6ac3c6a4f10fa489aefb56e1633a88fda843ba7ee11a9ab92173f9696f6
69522c57ef2668d6d2c16259f62f3e8292a1ecd3a4612808e54a0c77dbb1
62a7cb576f19f37904cbc72d93499b977fa4456e5bb2f4b0539dbb8f1983
64954bf87ecaa4241504ba091fd551d50593cb27384bdd161ee19db68ddb
f4ddb8d775410156b88c05013ba6b648216f18922f8d5f09a4> ND 
/s 
<10bf317041f0382b75a20af751f40c26faa193ddb43e17425ae2a7147072
c8adcb754540ad07c088b49c90ffcc12fc9bcaa4031e371b2b9f03c7dfea
3ccf43b81edb745e3d66d388f0b6652ea483e1e2692eb92f829967451d89
c1c2dd63d488033c52c02cc7e2da36d3222fbbc122fc4a5dad63561f412d
189e8e6d85ab5f60e154a1d7a15d7012b65fdaee5a1c075c5d0cdaa98a14
8737d96cd4c43c11af2e0c233f33107a07c5db3ab1455bad83782b94f74c
98ca6d6ba5a25777ae843c961b76e1108029364514b8de043d9f143a93e4
991e6483453f842fb13bbb9b592edd53fa> ND 
/t 
<10bf31706c43702a3ba333d6396a27008c7d9ec0f97f7d821e81c4dfe978
3a6528b50abbe393ef5d601f52bf5d77ebc263fe98283b2ecc6b82e445f0
03e67be8c4d981c7a936b403802ec79ac9fadee0d8907b8e4791f6ac32b5
6afce28831bdbf6534dcb0234b10e060c060d99eb3> ND 
/u 
<10bf3170586c505b396d01013dd186b00a3c9f8255cc9a1e8bc2b122853e
3768cc0e0598fa2cc70e89f75ab0edf60407ceb607741c8e96294428ae2b
dcffafabfff2861b7e8991d9d0579c26b37e22d07644e60afbefade9265a
d4f08cb7325ee0aeff4f74290b4153a263b4a3b92d2e10d51b40136f71fd
a123be4aad404dbdf74e0ef0d416570b350345d7329c1cb374b510d2089d
dc638979da0e> ND 
/w 
<10bf3170612fa8ae28795d29fec6efa9d16d893b9641e57ac4552ccf243c
a125ce88784d4da3c1bf938b1e2bf4fad95f01b589dd470663253d01cccc
10da8c5c9f8b224917e05224805bfaae9dc0d95631be9743895f8f02b1f7
8caf0dec6da601e3b8c071e476045a8159c8dc7c778ab64e2ff35fa40d44
81581d6dc0b876022106f0743c3663f2ade937d664b8b55dd5ccbe11c2ee
7e68afd63f216fd01d5af6632767de7a3a6e7f7d73affdc1bd4d7f13ce6f
e22652> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/IALAHM+TimesNewRoman,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 70 /F put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 160 /space put
pop
%%EndResource
[/N13/IALAHM+TimesNewRoman,Bold 1 TZ
%%BeginResource: font IALAFM+TimesNewRoman,Italic
11 dict begin
/FontName /IALAFM+TimesNewRoman,Italic def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 940 dict dup begin
/.notdef 
<10bf317005b8302fd45b07fb1549d56700cd874f9785acaaa30edf166f7d
7fe0592f51d07c5aaaff66bb85fa> ND 
/space 
<10bf317079c757bf91> ND 
/slash 
<10bf31709b6d6255a9d2b0d409a8885921f18f075c076af78b6b5b6b22> ND 
/less 
<10bf317026ba7a68c0c85fe69224bb1c44bf60ab6303bf0e88b19b5b52e0
0627721f26bf6f9d9a96> ND 
/greater 
<10bf317026ba7a68b433d1c3bf9f91ee3db0d8634c0a3c151dd7f9409ed0
93fe06920aa6769b3c117c> ND 
/a 
<10bf317050d929b04a91688eff2ef27b984cd22829dff4379ad1d4b377fe
4022ae9ab1b39050326772be245a1c0514da15bf7412c90bbb9ee1692ee7
2f624a1a8462f23078b7afb0d0fdc1e9af985eabf0a21bdb4a4bdb58a091
6d696c835b59ba3679f788b1136b7aa461695bc9fd226b96bdccb5351187
9a3ed1b36a6f270de769970d16b467046e5cd9e53ab0d6a930b5f7d2b0be
3d7a89521f6a3766681283f50576729c3abc3e4da5fc5c67a9bc97d223fc
50b318f659d2b3826835ed1d78fbf48d0a886669ff8ec41cb969c817918f
99b01018264f2d15e76716d11af6a012f04e830a4a10fc4a> ND 
/b 
<10bf3170573e563cf05ebf839a718d2752be8fa5e198e9c73c8231f27057
6892ee1ab58632f832dd9631cd1c1e9e8a47fcc4fba98ae9e8c043be400a
a0f653cdb74882a79836a2e098c8ef405fc2be43996d8fe5b2c5f96f604d
9f524c1a03479f18e1943bac448fd2ac79389a497c969a814d4d51e618dd
24a1b22ee9a5663f51402b25122b78b1537eddd2d4f89356c2a1a9f8cf91
d4e6151f6864a86574d2538d98a85232523da14b6b09eed6f88383be> ND 
/c 
<10bf317054a2e2bd4248d4667c9983aa339279e3514f06790d4014fe25f4
f689811ae9b5979a414809424b97797bd0a7e3e35a6d1449aea70c7ddcc2
e8a9c2b1107d3d61ca721132a52d4246100394c283c7ad48dde3adde50a8
420618718d4f2a34095575518ccb39069fd72efe39ebf6924d90fbfbc8e2
bac428a831d939fbf62a3b46b8c9333e01bd43137a1028ddc62156382c8a
46c001c6fb62c8b62d9b6fae75aaccf985b0393fdbd54dd27c60e24f6faf
3734d4ab5c30f41c4d3e0b41864718d7d71fa6a3> ND 
/d 
<10bf31706c4c5babb145a6bf4ac237606169541e66cf23251ce24110f037
4761b164cbd026f2b582edf123236416db5a784604d8ef37e4b141866e63
6e36cef20ecf548d029244372e60ea7740559063f76187fa2feaebc707b9
49ca5c3361f89e9e9c6c9c970a02f079c4db46136387c679e377f114cc87
69db2d0a6996d28410dc6bb82d5287365abe115623e8029ef77857704704
e2205bdeaf241737a2b2138dd3290bc63c967e84b4f465a195862cde9bc2
2f22261b28e7377f5d478c70b1fd3892bad71bdf43f116edbfa6ab77360e
afc2d20c9cf1b02a125db39492c71af435aa015c838d97d10dff85b43204
dbf3b56e89b952e4047892fd7cac6c695de791eb71729cb84d> ND 
/e 
<10bf3170586cc0ab2967fbb3385808d5de58f314b94218abf1891caf3065
6b4a245aebad33d0bb190cffa5e2a85ac983ee660b8afb43d91a760b62a1
69bbfffcaaec1c51210d31bd134a3b955737ce2837013332c26531f468e0
7abe029c7b15e3a00a9f75e454987dcad7ce50c37e92fc85af4cfa79b1d3
56ac06a3b554bae8f1ca552f908774f10fd4dcc14e96f9222d0f16ca0ae2
edce020e0a804baf0671cd4cf1f8dda5177f12d1a4cf9c9b520cc0e81dc1
6ee4dc5c> ND 
/f 
<10bf317009a282d42ddf6d0f65f048a57ae2d3c1f4380d68dd997b7f33d0
5c25a60ffcea10318743de24890dca1b82c2b9c3b7aa3c9e1aad5c99f222
d079a38dc9fb5be09363331c848c2560b5b62cd002b48500dd85e3e6fbe3
95424c4923bb1cf9588780bbcdbeacea747e2a77421cf187aaaa3584a021
97ce936f50116c09a2c3a65ecf8deda3ac5f8ad09c4c9f201ebf067dd949
f844a31815f7250fe3cc1c753863daf72c9ba9954555af3ece575d410ea6
46043b2c6943a65e1aac3d4807fa769e0c3133c9f9a5e5fa8fb3ed660c47
8050ead83bd7f216331a55d363cc86e2ca87bdd1ac1af5ff3c738c11d2e5
fa17a17dd8955c132fa7ec7b75a24256e32daa4beb39652896beaed0ab93
1f62eaf5d02df6ff22845cf4159dc439fe23> ND 
/h 
<10bf31706d7bdb7f5387299168a9f99daa10ae9b9d1a5c9ca85d6ed4dba7
69a52035c919fe13ca4e5babe005ea762bc9597183a239511ca5ce91dccc
ac21f8ae1b197f8b2b6b77dc2eaa285cb49ee04c5ecbdfbfbf2d5404dbdc
1c972b7b669f44a15e5023717facba43802f0e59650aba9e710babc4f0b1
2159d415150a7a528f1d5e41ea03126875ae596f5119072b8f1c17cf2237
7adf24e6b9f4f3d3bba9305f23405e8c1f63ff7bfbd64cc9b28e77ca934c
3bfae9431e8505f66462930692432e0b415f37a786ad8785ad937ed078a3
d419a2d13aa7ef9a2a95ad7126c241354c212cfc4e521a90> ND 
/i 
<10bf3170448470ed6e854b51cdbdaeab4cc4033b249c5eddfdea4abc899f
5f59911077c523a67e577996d9d61d3d1dbb66b5a39faf7b9a939176f849
b0f975503daa3c2cd3b7546d508a1159152a06d029c729c3e66ae1f7c9dc
ea7d91cbd5279a8d58ab51e61c882069c8e8cd22676541515abb41214422
2af16eb0767471f99f3a5b989ada7e602e9c8954ffb63091c54d0972e0d8
d226aed8c55a2ba01307f07d7e2d9bb3d82a7a669dcd8e3e71b081587d89
040fbc8c99d76126f504599d> ND 
/k 
<10bf317067541260c4cb493b057eceb8076052c7d4fb609881a1a3ff9a04
58332647f776df78cd49b139b1797dcf57c9f1a96009acf8ee13c1c78977
91826d1f40bb75efc2b451b3eabc8251f62e4896226fc7f103c04363d441
3ab76f6dc484be597d12682b95ab34297105e1db99629dd9ab360647d9f3
42253f96b04b03f75a62aef0ef90002adbe4961d335d3b2a9a61a6546843
28a4a811ba02914f2c5c889af876c179e69d98aff7c3ec308593f934d9a6
484b687c8823afc2cd94302cb69330ecce683f4df41ef2c01db148e68a2b
c3> ND 
/l 
<10bf317040cde4736f8142c8726317f2626b11f713fa84d56ada451876ef
040a6084188fa545b1a4deda450b77b218493337a2c5d0926de0adc3956c
6b3f52896ff8620e0285e2095cf00421f90d4c2c26153c7b1c5195d7e715
677db1f07302f3f8e5a0ee7c06eca2f642ca3259b7e22d124cfcdb6587a8
c31a8b8c2aec2ec7a5592c> ND 
/m 
<10bf31706ea85180cf820b9a663ab25fb43822337c3dc8c8f6a80ad1b08b
c1a836b60e36b6877203ae17259fa5283cc7b674548c5b8074b034e34013
964665573654426b8763b432d755865ec7143715c56888c7d5706e7587e3
31bc749681426a0227038d085d3830b2d194b104cb6a05a7ec7310e40f01
e3c057b2a09443dcc1d0aabba20ef365175a22453e2f6269d31b74f1627c
e9a8f7a6462069c7186962ac215307f8925ab605cf3604693a157f32ed46
d40699ef828d1ea2b8792d395f3756e73b28be996b1c1cbbba52a31d5bc6
86cf9146a7b62c4cf2b315e796d3143370183141a0733d8d5f2da87337d8
b17d2c1d19a5da5720c8b1b895db65ec6dde19896f5ff8e031de07c15751
b9878dbc4fddc6d49dbc6703b16d834ccf7661182c760501cea5c1a1f299
a23a62fce0c60ba42023480eba1dbd2abc923264a592c2fdbe88c85aa7f8
c214bdf5eb> ND 
/n 
<10bf31706c4c5babe2189495ddde2b9373264a7a928dce69ea574f750bc9
3936dca6784a06b0b80e689a2229e6ef44eee9152971cbd9df02a5391a70
99881b20618c2565b340cb3d7ed02aad7a971759a5e3ffcfa7c6cb458108
ec8cbf3d1978bd60113d37f1e46a87c5ae5bdc0ce7a3651d25446e649841
4bfc4c620a4b68ffbb46b586db9fbe809299328f092a75e76eb2de927e67
28923e48dadc1bf28eb67e5ad34159a4c611c536ce98a28c9808aa8e0b2d
3bc45a0f9207ba54a0dc05041f1c7e0c3ce92199983bfd0075d4c92fcb95
81109866bac621390cb4b52179227dda54c600d8> ND 
/o 
<10bf31705ac94bed6860900687a2b22b2af68e7ca06689cc92102be2ab7f
9db10fbc356000785c988a86f2fd2ea4ef583a6c60ede9d9dd459fefd0ff
4e8acba5cb0a24681adfe138442a93172d7e809867ba84942c3477ae82ae
1f9fefd3e8cbe8c052bcd7abf6c49697d028e143eee496891cfea515825c
78378125eb43f1803625ed03bc9a49b1a502869e6b7767145055> ND 
/p 
<10bf317009e2e8d094379fd2b732ef2ed38452544e1d66fea056d4482b71
aca739ff887e01e8fa30d1322c61286132935e7192b72957f8cf6d0d0ee6
0dfe0fb84063718ec55e4ee6098cc3d9b3a9cc50acb9a9a5cd5fc2580a42
e65204ccc966ae412cb1588aedef1c0fc22872a063646b29e66fe67ecd18
21dd4186920795d7c342d2817b5d26bb9b1d22d7c916a46a74e82afb0f39
1a7ed79e4c091e72616f6b716c7c05b7c053cb96657fe098cce0fe7e9866
3778376eb43bf792c7e90ed68185380b85914de79a1142ebb24ffad45571
8eae6e5a492ae81abcb9b923c12a01573b2528a8bc1dafe8397e178d9a3c
9948167b3610025f3a> ND 
/q 
<10bf31705374882f7cc5c6fae65d942ce7c2fc492382ca3f569c800d31ba
8ba490c71bdae49151fc5d0441b00dbebebd20078b82511c360f14f1656b
d918dd8988e1c8fa65be5cabb847e029fd596e917f99e9cfae23568b4061
25ed8502fe5b8a440c7c897c279c5c0cac2c67ae287520e39c223d862d34
8ae9104a9e66e2d9702de02d1ed5cad37e1724aa557f4b1cce8a278f17cd
08e78beb5369b15bc2cc8cfe0fb91886fedeb95965cf62da7ac575fda2cd
489bf04bd3beab8ee684c5ce3e018ab7fcb22264f38056d16f72d631b7ea
8678dc3db8dc23a4df> ND 
/r 
<10bf31705245662c5d2b8ca633ae1c5c4cb896ec855822604391b2d3a4de
60cdc846841bff6a704d8650c43fa1df5f1120b16cb8ee193b48cee580a2
9064fa51744ec5594c396756684eec0fd66ffc3e7491ba5c1fec4cab48c6
da2f42adf13207b7b6cc58d29f2d33c265def6e14aebb0b15085747a81ac
7dc5b999064c9739f2194504f904b8ab8e58a988838ee3ac6f39f24ea82f
2ae5759de078a84ab81f252cd5dbf25ae7> ND 
/s 
<10bf31707016ab84b2076cdfe71a8fe086d06d63166a068d7d4bf8fa4473
f664bff9df9b513bcf8e514732d30fc0490298d291b1bfbc8e585249b1c6
41f999b0ca54fc833e679f599e6e4816a8bfb24536fcf5f934e2e1b1a7a5
aa5081e9adbbda814a7e1ba59ee8c9b050fd2fcfe7d54f6b446475fd516a
e3d6133fe657a00a9c618cafd70f0f0b1434f03c7a9ede74164e9ebb884d
881281b507fa0d2f563456070ed63f9a3fdc9d19bcd786823048c8b4bc22
e93edbbc5c4d68b7eaa72680c7f6773e8e6804e14e6f29f51ab09aeacbae
64be5962e5b1f76ecbd8> ND 
/t 
<10bf317046e749907ac8541e27d8788b457df434c51d831ca485f0f4a1cd
d8356f057aa354951115f3d11cc4e41acaed950b84e8750b61cd8a7997a2
17618f9506db062a93ee247d1d4c47f0aaf0a336e76530a00b85db6ddad9
a2875914bd42a5b19ce1ade874eca1a97f3a72aad10afe46ab74f7c3a31d
8ce0a7d774b18132> ND 
/u 
<10bf31705ac94bed68747170026e3191fff81dec147fbcfcca2c2e0121e0
820fea07e3474d97fd70b97b9a7cef7d691033ba2c45d00e2ef94747999c
c312fd9f54e7d2bd3f354fb8f96a21d8bc62b0f40f98870c7e6dd49d9044
51fb2c371c762c310ddd25009d5c1faf12e125d95b93e50c0ee083e49cc2
ea6ef35fb1110a2a2cafeb5ebba10c5e43daed9bba35bfa292e0febdbea6
3cb642a535a49b9c2253168148b184c77331a96cbc519bb306f9b949ec9d
cf9987c7a00c9e5f4fe2829cd23f69e87496cb43671c9defb1ddc2b81fee
8c9358888dfad21662eefec7409da7fbb852c6b8993080e8145a4b493be0
846baac52f482cc9fbf4626f4bdd4da9240eb74602c44c208939163b9b> ND 
/x 
<10bf31709a34689d20de436a3b1ca1960ef1f724fa013d118d5fe9ed7e96
fd94ce6d37005d76b93e78e0bd45d92769a6db47c0a182ea8a8a98b1b25d
833e389c9b7a9bf84282848c4eea9c4861250ec3a0aff4bc7902d24819d8
3b7709cfaa2e3628baa18a4c949baa2ad886411d1ffcd1d7b7f15ee9027a
0be4a124a03cad4e2b39d7d777f0657aa42df753dffc27b74a311bb5bc44
e4f55e0c0d77957b14fd6c7437949168caa42d65bd683f0f102068a1ddb4
88f98563ce685f199bc90f8c81c5ab5573ce6ffc0238d5c25eb78a7fe7f3
73fbab02eda6e9fd37b756d8bdf70fa0ee47ef914f607b7826d86889dba0
e4f5f4bac555ecaa425014574f1b0608cdb23847f440bb9e171b73d082a4
ad42b4e00d43c176d6f015cb> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/IALAFM+TimesNewRoman,Italic findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 47 /slash put
dup 60 /less put
dup 62 /greater put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 160 /space put
pop
%%EndResource
[/N16/IALAFM+TimesNewRoman,Italic 1 TZ
false setSA
0 0 0 setrgbcolor
216 771.24 m
/N16 7.02 Tf
(//) show
( r)
[1.67985 2.72859 ] pdfxs
(et) show
(urns )
[3.50786 2.72859 3.50786 2.72859 1.74022 ] pdfxs
(t) show
(h)
[3.50786 ] pdfxs
(e) show
( m)
[1.74022 5.06619 ] pdfxs
(i) show
(n)
[3.50786 ] pdfxs
(i) show
(mu)
[5.06619 3.50786 ] pdfxs
274.92 771.24 m
(m number of phases )
[5.07112 1.74028 3.51279 3.51279 5.07112 3.51279 3.11956 2.73351 1.67991 3.51279 1.95435 
1.67991 3.51279 3.51279 3.51279 2.73351 3.0613 2.75878 1.67991 ] pdfxs
332.88 771.24 m
(re)
[2.69839 3.12094 ] pdfxs
(qui) show
(red )
[2.72998 3.06127 3.54014 1.74022 ] pdfxs
(to) show
( )
[1.74022 ] pdfxs
(exe) show
(c)
[3.06127 ] pdfxs
(ute) show
( ) show
388.68 771.24 m
(fe) show
(edba)
[3.06128 3.54015 3.50786 3.50786 ] pdfxs
(c) show
(k)
[3.06128 ] pdfxs
(l) show
(oop <s)
[3.50786 3.50786 3.50786 1.74022 4.68152 2.75877 ] pdfxs
(>) show
( ) show
216 763.2 m
/N13 7.02 Tf
(int)
[1.9642 3.91576 2.35025 ] pdfxs
225.96 763.2 m
(ph)
[3.90173 3.83925 ] pdfxs
(a) show
(ses)
[2.72934 3.06133 2.75882 ] pdfxs
(ForFee) show
(dba)
[3.90173 3.83925 3.5402 ] pdfxs
(c) show
(k) show
285.36 763.2 m
/N12 7.02 Tf
(\(FeedbackLoop s, )
[2.35164 3.91715 3.13081 3.13081 3.52403 3.52403 3.13081 3.06131 3.54018 4.20071 3.54018 
3.47981 3.54018 1.74022 2.74476 1.67988 1.74022 ] pdfxs
337.32 763.2 m
/N13 7.02 Tf
(int)
[1.9642 3.91576 2.35025 ] pdfxs
345.539 763.2 m
/N12 7.02 Tf
( mode\) { )
[1.74022 5.34081 3.52403 3.52403 3.13081 2.35164 1.74022 3.36044 1.74022 ] pdfxs
215.999 755.16 m
(    phaseCount )
[1.74033 1.74033 1.74033 1.74033 3.54023 3.54023 3.12103 2.71252 3.09857 4.61985 3.54023 
3.49179 3.54023 1.98109 1.74033 ] pdfxs
257.82 755.16 m
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
/IALAJB+TimesNewRoman 1
GetGlyphDirectory
312 <10bf317040c0ae11321d1b5f83d433e280cab4818d9622539baecbc2ba6c
24faed7d99b5ef5bb308e7ef4d0c92b228c405f21cb97384ad481cbda05e
8e11355249038d2b4cbacfb9943b577716> |
!
end end end
/N19 7.02 Tf
(\0018) show
264.84 755.16 m
/N12 7.02 Tf
( 0 )
[1.74033 3.54021 1.74033 ] pdfxs
222.96 747.12 m
/N13 7.02 Tf
(do)
[3.89894 3.50582 ] pdfxs
230.399 747.12 m
/N12 7.02 Tf
( { )
[1.74022 3.35832 1.74022 ] pdfxs
215.999 739.02 m
(        phaseCount++ )
[1.73958 1.73958 1.73958 1.73958 1.73958 1.73958 1.73958 1.73958 3.53947 3.53947 3.12027 
2.75809 3.12027 4.61909 3.4791 3.53947 3.4791 1.98033 3.948 3.948 1.73958 ] pdfxs
229.919 730.98 m
/N13 7.02 Tf
(while)
[5.15885 3.89886 1.92133 1.981 3.20729 ] pdfxs
245.999 730.98 m
/N12 7.02 Tf
( \()
[1.74022 2.32283 ] pdfxs
250.079 730.98 m
/N13 7.02 Tf
(canFire)
[3.06065 3.54022 3.89894 4.26112 1.98108 3.06135 3.06065 ] pdfxs
273 730.98 m
/N12 7.02 Tf
(\() show
275.28 730.98 m
/N13 7.02 Tf
(jo) show
(i)
[1.95295 ] pdfxs
(n) show
(er)
[3.11817 3.11817 ] pdfxs
293.22 730.98 m
/N12 7.02 Tf
(\(s\)\)\) )
[2.28008 2.75884 2.33975 2.33975 2.33975 1.75714 ] pdfxs
216 722.94 m
(            )
[1.74022 1.74022 1.74022 1.74022 1.74022 1.74022 1.74022 1.74022 1.79989 1.74022 1.74022 
1.74022 ] pdfxs
236.94 722.94 m
/N13 7.02 Tf
(simulate)
[2.75108 1.97191 5.75986 3.8989 1.97191 3.53035 2.35796 3.13713 ] pdfxs
262.32 722.94 m
/N12 7.02 Tf
(\() show
264.66 722.94 m
/N13 7.02 Tf
(joiner)
[2.28009 3.54023 1.98109 3.83928 3.12103 3.05925 ] pdfxs
282.54 722.94 m
/N12 7.02 Tf
(\(s\)\))
[2.34468 2.7378 2.34468 2.34468 ] pdfxs
229.92 714.42 m
/N13 7.02 Tf
(while)
[5.15885 3.89886 1.92133 1.981 3.20729 ] pdfxs
246 714.42 m
/N12 7.02 Tf
( \( )
[1.74022 2.33407 1.74022 ] pdfxs
251.82 714.42 m
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
/IALBAC+SymbolMT 1
GetGlyphDirectory
7 <10bf317041f09882682aa4c0e826d426094c42f66f4dc1fecdabbe43a1b7
5f1cd20ae00537d33e58f9619584d7c2> |
!
end end end
/N21 7.02 Tf
(\000\007) show
255.66 714.42 m
/N12 7.02 Tf
( )
[1.74022 ] pdfxs
(c) show
( ) show
262.26 714.42 m
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
/IALBAC+SymbolMT 1
GetGlyphDirectory
143 <10bf317005b1dda5a2fc0eb68c33e466c34c84238ab8b1531ff711883dba
99387b7d46c125a53077a1c7432455e6011ba4a1ae49d9c8baa0cffa594d
25157c5917c84579851da2810fcc4ddb16f5b74c63054fc7148d6badcb18
497a07e711ad44a911a5e9678e64b832fa6e1286> |
!
end end end
/N21 7.02 Tf
(\000\217) show
267.24 714.42 m
/N12 7.02 Tf
( s, c )
[1.74033 2.7469 1.74029 1.67995 3.13295 1.74033 ] pdfxs
280.02 714.42 m
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_GlyphDirProcs begin
/IALAJB+TimesNewRoman 1
GetGlyphDirectory
143 <10bf317065f7c4c19833722afcd638d547b106aa76f4803448556cb93031
fd434256adbcfb7e9fd54b6fdb5d5296a6ed022b301f803ddcb6ae7926ff
6e93823000e035f9b2d19792c4> |
!
end end end
/N19 7.02 Tf
(\000\217) show
285.6 714.42 m
/N13 7.02 Tf
(joiner)
[2.35443 3.52682 1.96838 3.83921 3.13359 3.13359 ] pdfxs
303.541 714.42 m
/N12 7.02 Tf
(\(s\) and )
[2.28009 2.75885 2.33976 1.74033 3.12103 3.47986 3.54023 1.74033 ] pdfxs
324.541 714.42 m
/N13 7.02 Tf
(canFire)
[3.06557 3.54023 3.85192 4.23797 1.98109 3.12103 3.06557 ] pdfxs
347.461 714.42 m
/N12 7.02 Tf
(\(c\)\))
[2.34039 3.11956 2.34039 2.34039 ] pdfxs
216.001 706.321 m
(            )
[1.74022 1.74022 1.74022 1.74022 1.74022 1.74022 1.74022 1.74022 1.79989 1.74022 1.74022 
1.74022 ] pdfxs
236.941 706.321 m
/N13 7.02 Tf
(simulate)
[2.75108 1.97191 5.75986 3.8989 1.97191 3.53035 2.35796 3.13713 ] pdfxs
262.321 706.321 m
/N12 7.02 Tf
(\(c\))
[2.34039 3.11956 2.34039 ] pdfxs
216 692.52 m
(    } )
[1.74022 1.74022 1.74022 1.74022 3.35618 1.74022 ] pdfxs
228.06 692.52 m
/N13 7.02 Tf
(loop until)
[1.96206 3.5205 3.5205 3.91362 1.74022 3.91362 3.91362 2.28001 1.92134 1.96206 ] pdfxs
222.96 677.58 m
(ret)
[3.11892 3.11892 2.33975 ] pdfxs
(u) show
(r)
[3.11892 ] pdfxs
(n) show
242.461 677.58 m
/N12 7.02 Tf
( phaseCount )
[1.74022 3.4889 3.54015 3.09567 2.70963 3.09567 4.66119 3.4889 3.4889 3.54015 1.93046 
1.74022 ] pdfxs
216.001 669.54 m
(}) show
1 J
1 j
0.5 w
10 M
[] 0 d
n
262.8 700.62 m
261.84 700.62 261 700.14 261 699.54 c
261 695.16 l
261 694.56 260.22 694.08 259.26 694.08 c
260.22 694.08 261 693.6 261 693 c
261 688.74 l
261 688.14 261.84 687.66 262.8 687.66 c
0.0039978 0.0039978 0.0039978  setrgbcolor
S
0 0 0  setrgbcolor
265.5 696.18 m
(each node of s has fired all its init phases       )
[3.12524 3.12524 3.12524 3.51846 1.67995 3.51846 3.51846 3.51846 3.12524 1.67995 3.51846 
2.34607 1.74033 2.73919 1.67995 3.51846 3.06065 2.73919 1.74033 2.34607 1.96002 2.28008 
3.12103 3.51846 1.74033 3.06065 1.96002 1.96002 1.67995 1.96002 1.96002 2.73919 1.74033 
1.96002 3.51846 1.96002 1.96002 1.74033 3.51846 3.51846 3.06136 2.75885 3.06136 2.75885 
1.74033 1.74033 1.74033 1.74033 1.74033 1.74033 1.74033 ] pdfxs
395.1 696.18 m
(\() show
397.44 696.18 m
/N13 7.02 Tf
(if)
[1.98102 2.36707 ] pdfxs
401.76 696.18 m
/N12 7.02 Tf
( m)
[1.74022 5.34147 ] pdfxs
(ode) show
( )
[1.74022 ] pdfxs
(=) show
( )
[1.74022 ] pdfxs
(I) show
(N)
[5.06759 ] pdfxs
(IT\)) show
( ) show
265.499 688.14 m
(each node of s has completed its steady state   \()
[3.13081 3.13081 3.13081 3.52403 1.67985 3.52403 3.52403 3.52403 3.13081 1.67985 3.52403 
2.35164 1.74022 2.74476 1.67985 3.52403 3.06061 2.74476 1.74022 3.06131 3.47981 5.34151 
3.54018 1.96559 3.13081 1.96559 3.13081 3.52403 1.67985 1.96559 1.96559 2.74476 1.74022 
2.69913 1.98104 3.13081 3.06061 3.52403 3.42014 1.74022 2.74476 1.96559 3.06131 1.98104 
3.13081 1.74022 1.74022 1.74022 2.35164 ] pdfxs
397.859 688.14 m
/N13 7.02 Tf
(if)
[1.98102 2.36707 ] pdfxs
402.18 688.14 m
/N12 7.02 Tf
( mode = STEADY\) )
[1.74022 5.34149 3.54016 3.54016 3.12096 1.74022 3.94308 1.74022 3.88695 4.27299 4.27299 
5.05216 5.05216 5.05216 2.32143 1.74022 ] pdfxs
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF
