% -*- LaTeX -*-
% This is a noweb source file.  To produce a LaTeX file from it:
%   noweave -delay -x streamit.h.nw > streamit.tex
% To produce the C header file:
%   notangle -Rstreamit.h > streamit.h

\documentclass{article}
\usepackage{fullpage}
\usepackage{noweb}

\setlength{\parindent}{0pt}
\setlength{\parskip}{1.2ex plus 0.3ex minus 0.2ex}
\pagestyle{noweb}

\title{StreaMIT C Runtime Interface}
\author{ComMIT Streams Group}

\begin{document}
\maketitle

%

\section{Preliminaries}

This document describes a C interface for compiling StreaMIT programs
against a runtime library.  The StreaMIT compiler processes its input
file and eventually produces a C source file, which is compiled with
this header file and linked against the runtime library.  The compiler
generates a set of functions, including a top-level init function for
the entire program.  This function in turn calls lower-level init
functions, causing the entire system to be initialized.  During
initialization the runtime system is informed of the connectivity
between modules and the layout of objects in memory.

\subsection{Assumptions}

This definition makes a number of assumptions about the StreaMIT
language, which may be relaxed or removed in later versions of the
system.  These currently include:

\begin{description}

\item[No re-initialization.]

\item[Canonical ordering.]  Several parts of this document refer to a
  ``canonical ordering''; that ordering is just a lexicographical
  ordering of eligible names.  For ordering tapes, the canonical order
  is a left-to-right reading across blocks.

\item[Message timing.]  StreaMIT currently only does best-effort
  message delivery; the latencies requested in message functions are
  not necessarily respected.

\end{description}

\subsection{Outstanding Questions}

\begin{itemize}

\item The compiler will need to determine the exact number of items
  that can reasonably be assumed to exist on a tape.  This requires a
  full analysis of init functions' peeking behavior.  Otherwise, the
  correct push/pop ratios could be established for steady-state
  behavior, but the runtime system couldn't set the system up properly
  because it wouldn't know how many residual items need to exist on
  the tapes.

\item What do you think about a traversal order for sub-streams that
  is used to declare contents and minimum firing contents of tapes
  implicitly, without a naming convention?  Also used to go from order
  of declaration to stream structure.  We could do something
  heirarchical instead of flat, but I'm guessing that flat might be
  easier inside the compiler.  We'll want to translate to heirarchical
  inside the runtime system, anyways.

\item How do splitters and joiners fit into the scheme?  A split/join
  structure consists of split-body-join, and a feedback loop has
  join-body-split.  Splitters and joiners are the only things that
  violate the one-input/one-output rule, and need to be implemented in
  the library.

\end{itemize}


\section{Basic Types}

<<Basic Types>>=
<<Enumerations>>
<<Latencies>>
<<Other Types>>
@

\subsection{Enumerations}

There are a couple of simple enumerations that are needed to describe
the types of objects in the StreaMIT system.  The compiler needs to
know the type of a stream structure:

<<Enumerations>>=
typedef enum stream_type {
  INVALID_STREAM_TYPE,
  FILTER,
  PIPELINE,
  SPLIT_JOIN,
  FEEDBACK_LOOP
} stream_type;
@

For split/join structures, there also need to be constants for the
types of splitters and joiners.

<<Enumerations>>=
typedef enum splitjoin_type {
  ROUND_ROBIN,
  WEIGHTED_ROUND_ROBIN,
  DUPLICATE,
  COMBINE,
  NULL_SJ
} splitjoin_type;
@

There are also enumerations to indicate whether a splitter or a joiner
should be used, for functions that can affect either, and whether the
input or output of a structure should be affected.

<<Enumerations>>=
typedef enum split_or_join {
  SPLITTER,
  JOINER
} split_or_join;
typedef enum in_or_out {
  INPUT,
  OUTPUT
} in_or_out;
@

\subsection{Latencies}

Latencies can be expressed as a linked list of discrete values or a
continuous range of possible values.  There are also special-case
values that can be used in certain circumstances (for example,
requesting best-effort delivery).

<<Latencies>>=
typedef struct latency_list {
  int val;
  struct latency_list *next;
} latency_list;

typedef struct latency_range {
  int min_val;
  int max_val;
} latency_range;

typedef enum latency_special {
  _BEST_EFFORT
} latency_special;

typedef union latency {
  latency_list *list;
  latency_range range;
  latency_special special;
} latency;

#define LATENCY_BEST_EFFORT ((latency){ special: _BEST_EFFORT })
@

\subsection{Other Types}

Some miscellaneous types are needed by other parts of the runtime
system.  Several functions take callback functions as parameters, so
we define a standard type for those:

<<Other Types>>=
typedef void (*streamit_handler)(void *);
@

There are more specialized types of handler functions for work
functions and message-handler functions.

<<Other Types>>=
typedef void (*work_fn)(void *);
typedef void (*message_fn)(void *data, void *params);
@

Interface tables are used for message handling.  An interface defines
a set of functions that can be called as message targets.  Each class
that implements an interface needs to provide a mapping between
interface message numbers and functions to be called.

<<Other Types>>=
typedef message_fn *interface_table;
@

The file I/O filters provided by the StreamIt library have no external
state; all of the internal state is kept in the context object.  To
make the C-printing pass happy, though, there needs to be a container
object with a [[context]] member.

<<Other Types>>=
typedef struct ContextContainer {
  stream_context *context;
} _ContextContainer, *ContextContainer;
@

\section{Function-Call Interface}

<<Interface Functions>>=
<<Initialization Functions>>
<<Split/Join Initializers>>
<<Messaging Functions>>
<<Pre-Built Filters>>
<<Run Function>>
@

\subsection{Initialization}

An initialization function is called for each filter.  The
initialization function, in turn, needs to call several functions to
inform the run-time library of the internal structure of the filter.
[[set_stream_type]] tells the run-time library the type of the current
stream object; [[set_peek]], [[set_pop]], and [[set_push]] tell the
library the number of items examined and removed from the input tape
and added to the output tape on each iteration.

<<Initialization Functions>>=
void set_stream_type(stream_context *c, stream_type type);
void set_peek(stream_context *c, int peeks);
void set_pop(stream_context *c, int pops);
void set_push(stream_context *c, int pushes);
@

Several handler functions can be registered with the run-time
library.  Every filter should call [[set_work]] to register its work
function.

<<Initialization Functions>>=
void set_work(stream_context *c, work_fn f);
void set_teardown(stream_context *c, streamit_handler f);
@

Children also need to be registered with the library, so that the
library can determine the layout of the stream.

<<Initialization Functions>>=
void register_child(stream_context *c, stream_context *child);
stream_context *get_parent(stream_context *c);
@

Once children have been created, parents are responsible for creating
tapes between them.  The actual tape structure is defined later in
this document; initialization code should treat tapes as opaque.
[[create_tape]] creates a tape between two simple stream objects; the
tape is connected to [[a]]'s output and [[b]]'s input.  It requires
the tape object sizes to be consistent, and creates a tape at least
large enough to handle steady-state execution.

<<Initialization Functions>>=
void create_tape(stream_context *a, stream_context *b,
                 int data_size, int tape_length);
@

Every object should have a ``canonical form''.  Internally, fast-path
code might want to grab parameters of its children to perform SIMD
operations between parallel streams, or perform other optimizations.
However, when blocks are deconstructed and reconstructed, data needs
to exist in the canonical form.

Two functions perform this translation between canonical format and
optimized format.  [[set_to_canon]] registers a function that ensures
that required state is available in canonical form.
[[set_from_canon]] takes state in canonical form, and prepares for
continued steady-state execution.

<<Initialization Functions>>=
void set_to_canon(stream_context *c, streamit_handler f);
void set_from_canon(stream_context *c, streamit_handler f);
@

\subsection{Splitters and Joiners}

Splitters and joiners are used extensively in StreaMIT.  A split/join
structure contains a splitter, some number of body nodes, and a
joiner; a feedback loop contains a joiner, its body, and a splitter,
with one output from the joiner pointing back into the splitter.

Splitters and joiners are the only structures that do not have exactly
one input and one output.  Splitters have multiple outputs; joiners
have multiple inputs.  This requires special support from the runtime
library.

[[set_splitter]] and [[set_joiner]] create splitter and joiner nodes
within the stream graph.  Both functions take a [[splitjoin_type]] as
their first parameter, indicating the type of the splitter or joiner.
The second parameter is the fan-out/in of the splitter or joiner.  The
remaining parameters are the number of consecutive items that go to
each stream, for a [[WEIGHTED_ROUND_ROBIN]] type.  There are assumed
to be exactly [[n]] ratio items.

A particular stream structure is assumed to have at most one splitter
or joiner.  A [[SPLIT_JOIN]] has the splitter at the top of the block,
and the joiner at the bottom; there should be [[n]] calls to
[[register_child]], which register child objects in order.  A
[[FEEDBACK_LOOP]] has the joiner at the top of the block, and the
splitter at the bottom; [[n]] should be exactly [[2]].  The two
children added are for the body and the feedback edge, in that order.
The [[set_joiner]] ratios are for the entry path and the feedback
edge, in that order; the [[set_splitter]] ratios are for the exit path
and the feedback edge.

<<Split/Join Initializers>>=
void set_splitter(stream_context *c, splitjoin_type type, int n, ...);
void set_joiner(stream_context *c, splitjoin_type type, int n, ...);
@

Tapes must be explicitly created between splitters, joiners, and other
nodes.  [[create_splitjoin_tape]] does this work; it is similar to
[[create_tape]], but takes extra parameters to indicate whether the
splitter or joiner of a node is being affected and whether an input
or output of that part of the block is used.  For the ``many'' side
(output of the splitter, input of the joiner), the [[slot]] parameter
is a 0-based index telling what is being connected.

<<Split/Join Initializers>>=
void create_splitjoin_tape(stream_context *container,
                           split_or_join sj,
                           in_or_out io,
                           int slot,
                           stream_context *other,
                           int data_size, int tape_length);
@

It is an error to call splitter and joiner functions when they are not
relevant.  In particular, no splitter or joiner functions may be
called on [[FILTER]] or [[PIPELINE]] nodes.  [[create_splitjoin_tape]]
and also may not be called for slots that don't exist in the splitter
or joiner structures.  The run-time library also does consistency
checking: the splitter and joiner must have the same number of slots,
and each input and output tape must have the same size.

The work function of parent nodes must explicitly cause data to be
pushed through splitters and joiners.  [[run_splitter]] and
[[run_joiner]] push data through a splitter or joiner; one call pushes
one ``item'' of data.  For [[ROUND_ROBIN]] and
[[WEIGHTED_ROUND_ROBIN]] splits and joins, one call moves one complete
round-robin cycle; for [[DUPLICATE]] splits, one call moves one data
item from the input to each of the outputs.

<<Split/Join Initializers>>=
void run_splitter(stream_context *c);
void run_joiner(stream_context *c);
@

\subsection{Messaging}

Messages can be sent between filters.  Both senders and receivers must
register with the run-time library.  Messages are referenced by
indices into a list of canonically-ordered handler functions.  Each
object type should export a list of function pointers for each
handler.

Messages are sent through a portal; see the StreaMIT language
documentation for how this works.

<<Messaging Functions>>=
portal create_portal(void);
void register_receiver(portal p, stream_context *receiver,
                       interface_table vtbl, latency l);
/* void register_sender(portal p, stream_context *sender, latency l); */
@

To send a message, you need to know the message number, the portal,
the required latency, and the parameters to send on.  Each message
must create a structure to package its parameters in, and the sender
needs to pass a [[malloc]]'d pointer to the parameter structure to
[[send_message]].

<<Messaging Functions>>=
void send_message(portal p, int msgid, latency l, void *params);
@

\subsection{Pre-Built Filters}

The StreamIt library includes a small number of pre-built filters that
can be instantiated directly by the code.

<<Pre-Built Filters>>=
<<I/O Filters>>
@

There are filters to read and write from files.  These filters can be
created with the relevant [[create]] function; they return a
[[stream_context]] that can be used as any other context would be.
All of the filter's state is contained inside the filter, so no extra
state beyond the context pointer needs to be stored in the containing
object.  The filters also have a normal work function that takes the
context as a parameter.

<<I/O Filters>>=
stream_context *streamit_filereader_create(char *filename);
void streamit_filereader_work(ContextContainer c);
stream_context *streamit_filewriter_create(char *filename);
void streamit_filewriter_work(ContextContainer c);
@

\subsection{Starting the System}

[[connect_tapes]] makes necessary tape connections between objects;
for example, it connects the input tape to a pipeline to the input of
the first object within the pipeline.  It needs to be called before
any filters are executed.

<<Run Function>>=
void connect_tapes(stream_context *c);
@

The [[streamit_run]] function is called with the context of the
top-level object and the command-line parameters from main().  It runs
the system continuously.

<<Run Function>>=
void streamit_run(stream_context *c, int argc, char **argv);
@

\section{Internal Library Types}

<<Opaque Types>>=
<<Tapes>>
<<Stream Context>>
<<Portal>>
@

\subsection{Tapes}

<<Tapes>>=
<<struct [[tape]]>>
<<Low-level Tape Macros>>
<<High-level Tape Macros>>
<<Evil [[memcpy]] Hackery>>
<<[[COPY_TAPE_ITEM]] Macro>>
<<Feedback Loop Path Initialization>>
@

Data is passed between streams on tapes.  The tape structure can be
manipulated directly by work functions if need be.  The [[data]] is
allocated by the creator of the tape, and its size is exactly
[[len * size]] bytes.  [[read_pos]] and [[write_pos]] are both
integers greater than or equal to [[0]] and strictly less than
[[len]], and point to [[size]]-byte offsets into [[data]].  In
particular, they point to the last item read or written to the tape,
such that [[PUSH]], [[POP]], and [[PEEK(0)]] will all use the
following item.  If the length of the tape is a power of two, the
[[mask]] field is a bitmask for the significant bits of a valid tape
position.

<<struct [[tape]]>>=
typedef struct tape {
  void *data;
  int read_pos;
  int write_pos;
  int data_size;
  int mask;
} tape;
@

There are macros defined to manipulate tapes.  [[PUSH]] adds an item
to the writer end of the tape; [[PEEK]] and [[POP]] both read data
from the reader end.  These macros take contexts as parameters, and
are intended to be used by user-level code.

<<High-level Tape Macros>>=
#define PUSH(c, type, d) PUSH_TAPE((c)->output_tape, type, d)
#define PEEK(c, type, n) PEEK_TAPE((c)->input_tape, type, n)
#define POP(c, type) POP_TAPE((c)->input_tape, type)
@

[[PUSH_TAPE]], [[PEEK_TAPE]], and [[POP_TAPE]] manipulate tape
structures directly, and are used internally by the library in a
couple of cases where just having a context is insufficient.
[[INCR_TAPE_READ]] and [[INCR_TAPE_WRITE]] increment the tape position
by exactly one, wrapping around if needed.

There are two versions of these macros.  The ``conservative'' version
accomodates any tape length, but is slower (each position increment
involves a comparison, and seeking requires a MOD).  The ``bitwise''
version is faster (increments and seeks both require an AND) but
requires tape lengths to be an exact power of two, with a valid length
mask.

<<Low-level Tape Macros>>=
<<Low-level Tape Macros (Bitwise)>>
#define INCR_TAPE_WRITE(t, size) INCR_TAPE_POS(t, write_pos, size)
#define INCR_TAPE_READ(t, size) INCR_TAPE_POS(t, read_pos, size)
#define PUSH_TAPE(t, type, d) \
  (*((type *)((t)->data+INCR_TAPE_POS(t, write_pos, sizeof(type))))=(d))
#define POP_TAPE(t, type) \
  (*((type *)((t)->data+INCR_TAPE_POS(t, read_pos, sizeof(type)))))
@

<<Low-level Tape Macros (Conservative)>>=
#define ADVANCE_TAPE_POS(t, v, n) \
  ((((t)->v += n) >= (t)->tape_length) ? (t)->v = 0 : (t)->v)
#define INCR_TAPE_POS(t, v) \
  ((++((t)->v) >= (t)->tape_length) ? (t)->v = 0 : (t)->v)
#define PEEK_TAPE(t, type, n) \
  (((type *)(t)->data)[((t)->read_pos+n+1)%(t)->tape_length])
@

For the bitwise macros, we also define a set of ``local'' macros,
which act on local variables that aren't necessarily attached to a
tape structure.

<<Low-level Tape Macros (Bitwise)>>=
#define INCR_TAPE_LOCALB(p, m, n) ((p) = ((p)+n) & (m))
#define PUSH_TAPE_LOCALB(d, p, m, type, v) \
  (*((type *)((d)+INCR_TAPE_LOCALB(p, m, sizeof(type))))=(v))
#define POP_TAPE_LOCALB(d, p, m, type) \
  (*((type *)((d)+INCR_TAPE_LOCALB(p, m, sizeof(type)))))
#define PEEK_TAPE_LOCALB(d, p, m, type, n) \
  (*((type *)((d)+(((p)+((n)+1)*sizeof(type))&(m)))))
#define LOCALIZE_TAPE(rt, rd, rp, rm, wt, wd, wp, wm)\
  ((rt ? ((rd=rt->data), (rp=rt->read_pos), (rm=rt->mask)) : 0), \
   (wt ? ((wd=wt->data), (wp=wt->write_pos), (wm=wt->mask)) : 0))
#define UNLOCALIZE_TAPE(rt, rp, wt, wp) \
  ((rt ? (rt->read_pos=rp) : 0), (wt ? (wt->write_pos=wp) : 0))
@

If we define some standard variable names, then we can write quick
macros to use local variables instead of the tape structures.
Hopefully this should provide us with some performance improvement.

<<Low-level Tape Macros (Bitwise)>>=
#define PUSH_DEFAULTB(type, v) PUSH_TAPE_LOCALB(__wd, __wp, __wm, type, v)
#define POP_DEFAULTB(type) POP_TAPE_LOCALB(__rd, __rp, __rm, type)
#define PEEK_DEFAULTB(type, n) PEEK_TAPE_LOCALB(__rd, __rp, __rm, type, n)
#define VARS_DEFAULTB() void *__rd, *__wd; int __rp, __rm, __wp, __wm;
#define LOCALIZE_DEFAULTB(c) \
  LOCALIZE_TAPE((c)->input_tape, __rd, __rp, __rm, \
                (c)->output_tape, __wd, __wp, __wm)
#define UNLOCALIZE_DEFAULTB(c) \
  UNLOCALIZE_TAPE((c)->input_tape, __rp, (c)->output_tape, __wp)
@

<<Low-level Tape Macros (Bitwise)>>=
#define INCR_TAPE_POS(t, v, n) INCR_TAPE_LOCALB((t)->v, (t)->mask, (n))
#define PEEK_TAPE(t, type, n) \
  (*((type *)((t)->data+(((n+1)*sizeof(type))&(t)->mask))))
@

[[COPY_TAPE_ITEM]] copies the most recent item read from the source
tape over the most recent item written to the destination tape; the
caller is responsible for advancing tape positions beforehand if
necessary.

<<[[COPY_TAPE_ITEM]] Macro>>=
#define READ_ADDR(t) ((t)->data + (t)->read_pos)
#define WRITE_ADDR(t) ((t)->data + (t)->write_pos)
#define COPY_TAPE_ITEM(s, d) \
  (streamit_memcpy(WRITE_ADDR(d), READ_ADDR(s), (d)->data_size))
@

(This particular implementation is to accomodate duplicating
splitters, which want to repeatedly copy one item from the input
tape.  [[memcpy]] is implemented in inline assembly, at least using
GNU libc on Linux, so it does not incur a function-call overhead.
But, this requires that the data size be a constant.  Sometimes it is:

<<Evil [[memcpy]] Hackery>>=
#define streamit_memcpy(d, s, l) \
  (((l) == 0) ? memcpy((d), (s), 0) : \
   ((l) == 1) ? memcpy((d), (s), 1) : \
   ((l) == 2) ? memcpy((d), (s), 2) : \
   ((l) == 3) ? memcpy((d), (s), 3) : \
   ((l) == 4) ? memcpy((d), (s), 4) : \
   ((l) == 6) ? memcpy((d), (s), 6) : \
   ((l) == 8) ? memcpy((d), (s), 8) : \
   ((l) == 12) ? memcpy((d), (s), 12) : \
   ((l) == 16) ? memcpy((d), (s), 16) : \
   ((l) == 20) ? memcpy((d), (s), 20) : \
   memcpy((d), (s), (l)))
@

This implementation also requires the GNU C compiler, which treats
[[sizeof(void)]] as 1 for purposes of pointer arithmetic.)

There is an important special case for feedback loops.  At
initialization time, the code can push items on to the feedback input
of a feedback loop's joiner.  We need some special magic to make this
work properly, and we need the tapes to have already been created.
This can still happen late in the init function, though.

[[FEEDBACK_DELAY]] is a macro that deals with this initialization.  It
takes four parameters: the context, the number of items to push on to
the tape, the type of the items to push, and the function to call to
get those items.  In addition to the tape macros above, it relies on
the internal structure of the context, particularly
[[<<One-To-Many Structures>>]].

<<Feedback Loop Path Initialization>>=
#define FEEDBACK_DELAY(d, c, n, t, f) { \
  int i; \
  for (i = 0; i < (n); i++) { \
    PUSH_TAPE((c)->type_data.splitjoin_data.joiner.tape[1], t, f((d), i)); \
  } \
}
@

\subsection{Filter Context}

<<Stream Context>>=
<<One-To-Many Structures>>
<<Context Internal Data>>
<<struct [[stream_context]]>>
@

A context structure is used to store data used by the run-time
library.  Depending on the type of the stream, it may store some
internal data.

<<Context Internal Data>>=
struct stream_context;

typedef struct stream_context_list {
  struct stream_context *context;
  struct stream_context_list *next;
} stream_context_list;

<<Pipeline Internal Data>>
<<Split/Join Internal Data>>

typedef union stream_type_data {
  pipeline_type_data pipeline_data;
  splitjoin_type_data splitjoin_data;
} stream_type_data;
@

For pipelines, the only data stored is a list of child nodes.

<<Pipeline Internal Data>>=
typedef struct pipeline_type_data {
  stream_context_list *first_child;
  stream_context_list *last_child;
} pipeline_type_data;
@

Split/join structures and feedback loops contain splitter and joiner
structures.  Any block will contain either exactly one spliiter and
one joiner, or zero splitters and zero joiners.  The splitter and
joiner have similar structures: they have a ``one'' side (input to the
splitter, output from the joiner) and a ``many'' side.  One connection
to both the splitter and the joiner is connected to the exterior of
the block (in a split/join, the input of the splitter and the output
of the joiner; in a feedback loop, one input of the joiner and one
output of the splitter).

<<One-To-Many Structures>>=
typedef struct one_to_many {
  splitjoin_type type;
  int fan;
  int *ratio;
  int slots;
  tape *one_tape, **tape, **tcache;
} one_to_many;
@

The private data for split/joins and feedback loops are identical;
both need to contain a [[one_to_many]] structure for the splitter and
joiner, plus a list of child nodes.  Since most of the code for
split/joins and feedback loops is shared as well, the code is
substantially simpler if the two stream structures just share a data
structure.

<<Split/Join Internal Data>>=
typedef struct splitjoin_type_data {
  stream_context_list *first_child;
  stream_context_list *last_child;
  one_to_many splitter;
  one_to_many joiner;
} splitjoin_type_data;
@

The actual context structure contains a [[stream_type_data]] union,
along with quite a bit of other information.  This includes the object
the stream is associated with, the type of the stream, the data
ratios, the work function, the parent context, and the input and
output tapes.  Note that two objects should point to any given tape,
one reading from it and one writing to it.

<<Forward Declarations>>=
typedef struct stream_context stream_context;
@
<<struct [[stream_context]]>>=
struct stream_context {
  void *stream_data;
  stream_type type;
  int peek_size, pop_size, push_size;
  work_fn work_function;
  struct stream_context *parent;
  tape *input_tape;
  tape *output_tape;
  stream_type_data type_data;
};
@

Contexts are created by [[create_context]], which takes a pointer to
the data object the context is relevant for.

<<Stream Context>>=
stream_context *create_context(void *p);
@

\subsection{Portals}

Messages are sent to portals.  A portal needs to keep track of a list
of receiver objects, and their corresponding interface function
tables.

<<Portal>>=
typedef struct portal_receiver {
  struct portal_receiver *next;
  stream_context *context;
  interface_table vtbl;
} portal_receiver;
@

Currently the portal just carries a list of receivers.

<<Portal>>=
typedef struct portal {
  portal_receiver *receiver;
} _portal, *portal;
@

\section{Header File}

<<streamit.h>>=
#ifndef STREAMIT_H
#define STREAMIT_H

<<Forward Declarations>>
<<Basic Types>>
<<Opaque Types>>
<<Interface Functions>>

#endif /* STREAMIT_H */
@

\end{document}

%%% Local variables:
%%% mmm-classes: noweb-c
%%% End:
