#!/usr/local/bin/bash

declare -i start_time
start_time=$(date "+%s")

print_usage() {
    echo "usage:" 
    echo -e "FarmIt [options] lower_tile_size upper_tile_size starting_cagfarm ending_cagfarm compiler_options benchmark_file outputfile bloodgraph_directory\n"
    echo "Options:"
    echo -e "-n  compile/run the benchmarks with nice level 10 on the remote machines\n"  
}

if [ -z "$STREAMIT_HOME" ]; then
    echo '$STREAMIT_HOME must be defined'
    exit 1
fi

#the texec prefix for compiling and running -- disabled now because it
#didn't help with killing the BTL thread.
#texec_prefix="java at.dms.kjc.raw.TExecWrapper texec -m 30"

#the nice option, it is null we do not want to be nice
nice=""
while getopts ":n" opt; do
    case $opt in
	n  ) nice="nice -10";; 
    esac
done
shift $(($OPTIND -1))

#Global to hold the machine we want to execute on next, 
#set by find_machine
current_machine=""

find_machine() {
    loop=1
    while [ $loop -eq 1 ]; do 
	for machine in "${machines[@]}"; do
	    #check for the ready file
	    if [ -e "$rootdir/$machine/ready" ]; then
		current_machine=$machine
		#clean the directory
		rm "$rootdir/$machine/"*
		loop=0
		return
	    fi
	done
    done
}


# Set some defaults
# The directory where we run the crap
rootdir="/home/bits6/NO_BACKUP/$USER/results"

#the tmp directory where we store the results before colascing
tmpdir="/tmp/results$$"
mkdir "$tmpdir"

if [ ! -d "$rootdir" ]; then
    echo "rootdir does not exist, create it!"
    exit 1
fi

if [ $# -ne 8 ]; then
    print_usage
    exit 1
fi


#declare some integer variables for loops
declare -i current low high
#declare the array of benchmarks to run
declare -a benchmarks

#set the options
options=$5 

#read the benchmarks file
if [ ! -f "$6" ]; then
   echo "benchmarks file does not exist"
   exit 1
fi

#the outputfile
outputfile=$7

#the directory where we are storing the blood graphs
if [ ! -d "$8" ]; then 
    echo "bloodgraph directory does not exist"
    exit 1
fi
bloodDir=$8

current=0
for i in $(cat $6); do
    #This will expand environment variables.
    i=$(eval echo $i)
    if [ -f "$i" ]; then  
	benchmarks[$current]=$i
	current=$current+1 
    else
	echo -en "\033[1m\e[31;40mFile $i does not exist, skipping it.\033[0m\n"; tput sgr0
    fi
done

#set up the configs array that holds the raw sizes we want to simulate
current=0
for ((low=$1;$low<=$2;low+=1)); do
    configs[$current]=$low
    current=$current+1
done

#set up the machines array that hold the machines we would like to execute on
current=0
for ((low=$3;$low<=$4;low+=1)); do
    mach=""
    #try to log on to the machine, if we cannot, do not add it to the list of
    #machines...
    if ssh "cagfarm-$low.csail.mit.edu" "date"; then
	mach="cagfarm-$low.csail.mit.edu"
    else
	echo -en "\033[1m\e[31;40mCannot log on to cagfarm-$low, removing it from the machine list.\033[0m\n"; tput sgr0
    fi

    if [ -n "$mach" ]; then 
	machines[$current]="cagfarm-$low.csail.mit.edu"	
	current=$current+1
    fi
done

#clear out all of the working directories
for machine in "${machines[@]}"; do
     if [ ! -d "$rootdir/$machine" ]; then 
	if ! mkdir "$rootdir/$machine"; then
 	    echo "Could not create the working directory $rootdir/$machine"
 	    exit 1
 	fi
     fi
     #the ready file in each directory
     echo -n "" > "$rootdir/$machine/ready"
done 
#make out a log directory for output of commands
if [ ! -d "$rootdir/log" ]; then 
    if ! mkdir "$rootdir/log"; then
	echo "Could not create the log directory $rootdir/log"
	exit 1
    fi
fi

#$1 is the machine to execute on , $2 is the number of tiles, $3 is the
#benchmark file
issue_commands() {
    local current_machine
    local config
    local benchmark

    current_machine=$1
    config=$2
    benchmark=$3 
  
    bench_file=${benchmark##/*/}
    bench_name=${bench_file%.java}
    working_dir="$rootdir/$current_machine"
    
    #the command we want to execute on the remote machine
    #copy the benchmark file
    command="cp $benchmark $working_dir;"
    #change to the working dir
    command="$command cd $working_dir;"
    #setup environment variables
    command="$command setenv STREAMIT_HOME $STREAMIT_HOME;"
    command="$command source \$STREAMIT_HOME/include/dot-cshrc;"
    #compile
    command="$command $nice java -Xmx1509M at.dms.kjc.Main -s -raw $config $options $bench_file;"
    #run
    command="$command $nice gmake -f Makefile.streamit run;"
    echo -ne "\033[1m\e[32;40mCompiling/Running $bench_file (${config}x${config}) on $machine...\033[0m\n"; tput sgr0
    # redirect output to log file
    ssh $current_machine "$command" > "$rootdir/log/${bench_name}-raw${config}${options// /}" 2>&1
    #ssh $current_machine "$command" &> /dev/null
       
    if [ -f "$working_dir/results.out" ]; then 
	echo -ne "\033[1m\e[32;40mResults copied for $bench_file (${config}x${config}) on $machine.\033[0m\n"; tput sgr0
	#copy the results.out file to the results directory...
	cp "$working_dir/results.out" "${tmpdir}/${bench_name}-raw${config}${options// /}"
	cp "$working_dir/bloodgraph.ppm" "${bloodDir}/bloodgraph_${bench_name}-raw${config}${options// /}"
    else
	echo -en "\033[1m\e[31;40mNo results.out generated for $bench_file (${config}x${config}) on $machine.\033[0m\n"; tput sgr0
    fi
    #inform the driver that we are ready for another run
    echo -n "" > "$working_dir/ready"
}

#the start of the fun!!!
for benchmark in "${benchmarks[@]}"; do
     for config in "${configs[@]}"; do
   	#get the current machine
	find_machine
	#now $current_machine has the machine to execute on 
	#call the function in the background to issue the commands
	#to the remote machine
	issue_commands $current_machine $config $benchmark &
     done
done

echo "waiting for remote runs to finish... if this hangs, hit CTRL+C and run:"
echo $STREAMIT_HOME/misc/scripts/number-gathering/condense -i "$tmpdir" -o "$outputfile"
#wait for everything to complete
wait

#remove the working directories
for machine in "${machines[@]}"; do
   rm -rf "$rootdir/$machine"
done 

#call condense
echo -en "\033[1m\e[32;40mCondensing the various numbers into $outputfile...\033[0m\n"; tput sgr0
$STREAMIT_HOME/misc/scripts/number-gathering/condense -i "$tmpdir" -o "$outputfile"

#remove the tmpdir
rm -rf "$tmpdir"

end_time=$(date "+%s")

echo -en "\033[1m\e[32;40mFinished ($((end_time-start_time)) seconds).\033[0m\n"; tput sgr0

