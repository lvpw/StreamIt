<?xml version="1.0" ?>
<!--
  benchall.xsl: convert an XML listing of StreamIt benchmarks to HTML
  David Maze &lt;dmaze@cag.lcs.mit.edu&gt;
  $Id: benchall.xsl,v 1.3 2003-09-29 15:03:44 kkuo Exp $

  Notes for the uninitiated: this is an XSL Transform stylesheet.  Use
  an XSLT processor, such as xsltproc, to convert XML to XML using this;
  the input is the file generated by build-bench-xml.py, the output is
  XHTML.

  XSLT stylesheets are structured as a series of templates.  Each template
  is essentially a function call, with local (immutable) variables and
  (immutable) parameters, both with default values; it is called when the
  input XML tag matches the specified expression.  xsl:apply-templates
  calls appropriate templates for children of the current node.  XML tags
  that aren't xsl: tags, and things inside xsl:text, are copied verbatim
  to the output.
-->

<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:template match="/benchset">
    <html>
      <head>
        <title>StreamIt Benchmarks</title>
      </head>
      <body>
        <h1>StreamIt Benchmarks</h1>
        <xsl:apply-templates/>
      </body>
    </html>
  </xsl:template>

  <xsl:template match="dir">
    <xsl:param name="subdir">.</xsl:param>
    <xsl:param name="depth">2</xsl:param>
    <!-- Create an HTML header, labelled with the name attribute of the
         directory node. -->
    <xsl:element name="h{$depth}">
      <h2><xsl:value-of select="@name"/></h2>
    </xsl:element>
    <xsl:apply-templates>
      <xsl:with-param name="subdir">
        <xsl:value-of select="$subdir"/>/<xsl:value-of select="@name"/>
      </xsl:with-param>
      <xsl:with-param name="depth" select="$depth+1"/>
    </xsl:apply-templates>
  </xsl:template>

  <xsl:template match="benchmark">
    <xsl:param name="subdir">.</xsl:param>
    <xsl:param name="depth">3</xsl:param>
    <xsl:element name="h{$depth}">
      <table border="1"> 
        <colgroup> 
          <col align="left" />
          <col align="char" char="."/> 
        </colgroup> 
        <thead> 
          <tr>
            <th colspan="2" bgcolor="#C0C0C0">
	      <xsl:value-of select="name"/> - <xsl:value-of select="desc"/>
   	    </th> 
          </tr> 
        </thead> 
        <tbody> 
          <tr>
            <td><b>Description</b></td> 
            <td><xsl:value-of select="description"/></td>
          </tr> 
	  <xsl:apply-templates select="reference"/>
	  <xsl:apply-templates select="implementations">
            <xsl:with-param name="subdir" select="$subdir"/>
     	  </xsl:apply-templates>
        </tbody> 
      </table>
    </xsl:element>
  </xsl:template>

  <xsl:template match="reference">
    <tr>
      <td><b>Reference</b></td> 
      <td><xsl:apply-templates/></td>
    </tr> 
  </xsl:template>

  <xsl:template match="implementations">
    <xsl:param name="subdir">.</xsl:param>
    <!-- <p><b>Implementations:</b><br/> -->
    <xsl:apply-templates>
      <xsl:with-param name="subdir" select="$subdir"/>
    </xsl:apply-templates>
    <!-- </p> -->
  </xsl:template>

  <xsl:template match="impl">
    <!-- Save the declared subdirectory, if any. -->
    <xsl:param name="subdir">.</xsl:param>
    <xsl:variable name="path">
      <xsl:value-of select="$subdir"/>
      <xsl:if test="@dir">
        <xsl:text>/</xsl:text><xsl:value-of select="@dir"/>
      </xsl:if>
      <xsl:text>/</xsl:text>
    </xsl:variable>
    <tr>
      <td><b><xsl:value-of select="@lang"/></b></td>
      <td>
	<xsl:for-each select="file">
	  <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="concat($path,.)"/>
            </xsl:attribute>
            <xsl:value-of select="."/>
          </xsl:element>
          <xsl:text> </xsl:text>
	</xsl:for-each>
        <xsl:if test="desc">(<xsl:value-of select="desc"/>)<br/></xsl:if>
      </td>
    </tr>
  </xsl:template>
</xsl:stylesheet>



