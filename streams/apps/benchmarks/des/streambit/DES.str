
int->int filter spy{
  work push 1 pop 1{
    printf("SPY  ");
    printB(peek(0));
    push(pop());
  }
}

bit->bit sbox Table1{
  int [64] X={14, 4, 13, 1,  2, 15, 11, 8,  3, 10,  6, 12,  5, 9,  0, 7,
	      0, 15,  7, 4, 14, 2, 13, 1, 10, 6, 12, 11,  9, 5,  3, 8,
	      4, 1, 14, 8, 13, 6, 2, 11, 15, 12,  9, 7,  3, 10,  5, 0,
	      15, 12,  8, 2,  4, 9,  1, 7,  5, 11,  3, 14, 10, 0,  6, 13}; 
  int input_RATE=6;
  int output_RATE=4;
}

bit->bit sbox Table2{
 int [64] X={15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10
	   , 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5
	   , 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15
	   , 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9}; 
 int input_RATE=6;
 int output_RATE=4;
}

bit->bit sbox Table3{
 int [64] X={10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8
	   , 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1
	   , 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7
	   , 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12}; 
 int input_RATE=6;
 int output_RATE=4;
}

bit->bit sbox Table4{
 int [64] X={7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15
	   , 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9
	   , 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4
	   , 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14}; 
 int input_RATE=6;
 int output_RATE=4;
}

bit->bit sbox Table5{
 int [64] X={2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9
	   , 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6
	   , 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14
	   , 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3}; 
 int input_RATE=6;
 int output_RATE=4;
}

bit->bit sbox Table6{
 int [64] X={12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11
	   , 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8
	   , 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6
	   , 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13}; 
 int input_RATE=6;
 int output_RATE=4;
}

bit->bit sbox Table7{
 int [64] X={ 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1
	    , 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6
	    , 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2
	    , 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12}; 
 int input_RATE=6;
 int output_RATE=4;
}

bit->bit sbox Table8{
 int [64] X={ 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7
	    , 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2
	    , 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8
	    , 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 }; 
 int input_RATE=6;
 int output_RATE=4;
}


bit->bit filter P{
  work pop 32 push 32{ 
    
    int [32] p = { 16, 7, 20, 21,
		   29, 12, 28, 17,
		   1, 15, 23, 26,
		   5, 18, 31, 10,
		   2, 8, 24, 14,
		   32, 27, 3, 9,
		   19, 13, 30, 6,
		   22, 11, 4, 25    };

    for (int i = 0; i < 32; ++i){
      push(peek( p[i] - 1 ) );
    }
  }
}




bit->bit filter E{
  work pop 32 push 48{  
    int [48] p = { 32, 1, 2, 3, 4, 5,
		   4, 5, 6, 7, 8, 9,
		   8, 9, 10, 11, 12, 13,
		   12, 13, 14, 15, 16, 17,
		   16, 17, 18, 19, 20, 21,
		   20, 21, 22, 23, 24, 25,
		   24, 25, 26, 27, 28, 29,
		   28, 29, 30, 31, 32, 1    };
    
    for (int i = 0; i < 48; ++i){
      push(peek( p[i] - 1 ) );
    }

  }
}



bit->bit pipeline TableLookups(int i){

  add bit->bit filter {
    work pop 6 push 6{
      push(peek(0));
      push(peek(5));
      push(peek(1));
      push(peek(2));
      push(peek(3));
      push(peek(4));
    }
  }

  if(i==1){
    add Table1();
  }
  if(i==2){
    add Table2();
  }
  if(i==3){
    add Table3();
  }
  if(i==4){
    add Table4();
  }


  if(i==5){
    add Table5();
  }
  if(i==6){
    add Table6();
  }
  if(i==7){
    add Table7();
  }
  if(i==8){
    add Table8();
  }
}






bit->bit splitjoin TLsj{
  split roundrobin(6,6,6,6,6,6,6,6);

  for(int i=0; i<8; ++i){
    add TableLookups (i+1);
  }

  join  roundrobin(4,4,4,4,4,4,4,4);
}



bit->bit splitjoin KeyMix(int k){
  split roundrobin( 1, 0 );
  
  add Identity<bit>();
  add Parameter();

  join xor();
}


bit->bit filter Ident2{
  work push 1 pop 1{
    push(pop());
  }
}

bit->bit pipeline FCore (int k){

  add E ;
  add Identity<bit>();
  add KeyMix (k);
  add Ident2();
  add TLsj;
  add P;
  
}



bit->bit filter F_P1{
  work pop 32 * 2 push 32 * 3 {

    for (int i = 0; i < 32; ++i){
      push( pop() );
    }

    for (int i = 0; i < 32; ++i){
      push( peek(i) );
    }

    for (int i = 0; i < 32; ++i){
      push( pop() );
    }
  }
}



bit->bit splitjoin F_P2(int k){
  split roundrobin(32,32,32);

  add Identity<bit>();
  add FCore (k); 
  add Identity<bit>();

  join roundrobin(32,32,32);
}





bit->bit filter F_P3{
  work pop 32 * 3 push 32 * 2 {
    
    for (int i = 0; i < 32; ++i){
      push( peek( i + (32 * 2) ) );
    }

    for (int i = 0; i < 32; ++i){
      push( peek(i) ^ peek( i+32) );
    }
  }
}



bit->bit pipeline F(int k){
  add F_P1;
  add F_P2 (k);
  add F_P3 ;
}



bit->bit filter Rev{
  work push 32*2 pop 32*2{
    
    for (int i = 0; i < 32; ++i){
      push( peek(i+32) );      
    }

    for (int i = 0; i < 32; ++i){
              push(pop());
    }
  }
}


bit->bit filter IP{
  
  work push 64 pop 64{

    int [64] p = { 58, 50, 42, 34, 26, 18, 10, 2,
		   60, 52, 44, 36, 28, 20, 12, 4,
		   62, 54, 46, 38, 30, 22, 14, 6,
		   64, 56, 48, 40, 32, 24, 16, 8,
		   57, 49, 41, 33, 25, 17, 9, 1,
		   59, 51, 43, 35, 27, 19, 11, 3,
		   61, 53, 45, 37, 29, 21, 13, 5,
		   63, 55, 47, 39, 31, 23, 15, 7
    };

    for (int i = 0; i < 64; ++i){
      push(peek( p[i] - 1 ) );
    }

  }
}


bit->bit filter IPm1{
  
  work push 64 pop 64{
    
    int [64] p  = { 40, 8, 48, 16, 56, 24, 64, 32,
		    39, 7, 47, 15, 55, 23, 63, 31,
		    38, 6, 46, 14, 54, 22, 62, 30,
		    37, 5, 45, 13, 53, 21, 61, 29,
		    36, 4, 44, 12, 52, 20, 60, 28,
		    35, 3, 43, 11, 51, 19, 59, 27,
		    34, 2, 42, 10, 50, 18, 58, 26,
		    33, 1, 41, 9, 49, 17, 57, 25 };

    for (int i = 0; i < 64; ++i){
      push(peek( p[i] - 1 ) );
    }

  }
}



bit->bit pipeline  DES{
  add  IP ();
  


  for (int i = 0; i < 16; ++i){
    add  F (i + 1);
  }
  

  add Rev ();
  add IPm1 ();
}


void->int filter Parameter{
  work push 1{
    push ( 0xFFFFFFFF );
  }

}


