PACKAGE
dct_ieee

AUTHOR
Matthew Drake (madrake@gmail.com)

COPYRIGHT

Copyright 2003 by the Massachusetts Institute of Technology.
Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of M.I.T. not be used in
advertising or publicity pertaining to distribution of the
software without specific, written prior permission.
M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is"
without express or implied warranty.

DESCRIPTION

The dct_ieee package contains functions that implement Discrete Cosine
Transforms and Inverse Discrete Cosine Transforms in accordance with
IEEE specifications for such operations. The IEEE specified DCT is
used in both the MPEG and JPEG standards. A definition of what makes a
DCT or inverse DCT implementation conform to the IEEE specification
can be found in Appendix A of the MPEG-2 specification (ISO/IEC
13818-2) on P. 125.

DCT VERSIONS

There are two executable pipelines in this package for correctness.
The stream components are meant to be used within  other stream
graphs. There are three versions of the library which can be used:

* reference-coarse (DCT and iDCT): A reference implementation based on
the DCT/iDCT code found within the C reference MPEG implementation.

* reference-fine (DCT and iDCT): A parallel DCT/iDCT
implementation. The 2-Dimensional DCT is broken down into
1-Dimensional DCTs in perpendicular directions.

* fast iDCT: An integer iDCT that uses bit-twiddling, but does not
have the floating point precision of the reference codes.

The two test pipelines are:

* verify: verifies that a DCT followed by a iDCT results in an identity.
* compare: compared the three iDCT implementation.

For normal every day use, I recommend the fast version. It is not
always numerically equivalent to the reference implementation;
however, I believe it is still within the IEEE specification for the
DCT (which is defined statistically with a margin of error). However,
I have not formally checked this. If you are extremely concerned about
the accuracy of results - for instance, if you are debugging a
StreamIt program which uses a DCT and you are comparing your results
against some known correct output - then I recommend the reference
version. If you want to compare the fast version against the reference
version to see whether their outputs deviate, use the comparision DCT.

DETAILED INSTRUCTIONS

Only one version of the library may be used at a time. To change which
version of the library your applications are using, just make the
appropriate version.

StreamIt programs which use the DCT library should link against
[DCT.str].

In addition to providing the IEEE compliant 8x8 DCT and iDCT
functions, the DCT library contains a number of DCT and iDCT functions
for transforming arbitrary 1D and 2D signals of any size.

This DCT library uses the experimental StreamItDocs program, which
generates HTML code documentation similar to Javadocs. To generate
these pages:
$ make docs

This will generate html files documenting the API for the DCT.str
files. For details on using functions in this DCT library, please make
the documentation and refer to that.

CORRECTNESS CHECK

To perform the self-test for correctness:

$ make verify

This may or may not give a variety of Error messages. Basically this
check takes a series of semi-random 8x8 integer blocks and transforms
them and inverse transforms them using both the reference and fast
versions and checks to make sure that the outputs match what they
should.

This test is not particularly useful for developers using this
library. However, if you are trying to modify this library or want to
change the implementation of any of the routines, or add support for
new implementations, you may want to use or extend this test.

NOTE! The reference implementations included with this code are
identical copies of the DCT and iDCT reference functions used by the
MPEG Group's reference C encoder. These functions are not perfect
inverses of each other - for most sample data input sets, the output
of the iDCT does not correlate exactly with the input to the DCT. This
means that the fast implementation may actually be more correct than
the reference implementation, but these needs to be explored further.


