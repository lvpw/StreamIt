/*
 * Copyright 2005 by the Massachusetts Institute of Technology.
 *
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright
 * notice and this permission notice appear in supporting
 * documentation, and that the name of M.I.T. not be used in
 * advertising or publicity pertaining to distribution of the
 * software without specific, written prior permission.
 * M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 */

/**
 * @description
 * This file contains functions that check the correctness of various Discrete Cosine Transforms and
 * their inverses.  When reference is made to the IEEE DCT specification, it
 * is refering to the IEEE DCT specification used by both MPEG and JPEG.
 * A definition of what makes an 8x8 DCT conform to the IEEE specification, as well
 * as a pseudocode implementation, can be found in Appendix A of the MPEG-2 specification
 * (ISO/IEC 13818-2) on P. 125. 
 *
 * @author <a href="mailto:madrake@gmail.com">Matthew Drake</a>
 * @file DCTcorrectness.str
 * @version 1.0
 */

void->void pipeline DCTverify {
    add void->int filter {
	  work push 64 {
		for (int i = 0; i < 64; i++) {
		    push(((int)(pow(3, i))) % 75);
		}
	  }
    }

    add int->void splitjoin {
	  split duplicate();
	  
	  add int->int pipeline {
		add DCT8x8_ieee(0);
		add iDCT8x8_ieee(0);
	  }
	  
	  add Identity<int>;
	  
	  join roundrobin(1, 1);
    }
    
    add int->void filter {
	  float count  = 0;
	  float errors = 0;
	  
	  work pop 2 {
		int a = pop();
		int b = pop();

		count += 1.0;

		if (a != b) {
		    errors += 1.0;

		    if ((a-b) > 1 || (a-b) < -1) {
			  println("Serious Error  - iDCT output off by more than 1 from DCT input.");
		    } else {
			  println("Possible Error - iDCT output off by 1 from DCT input.");
		    }
		    println("                 input: " + b + ", output: " + a);
		    float errorRate = errors/count;
		    println("                 Error Rate: " + errorRate);
		}
	  }
    }   
}
