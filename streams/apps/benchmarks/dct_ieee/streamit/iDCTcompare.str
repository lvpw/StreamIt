/*
 * Copyright 2005 by the Massachusetts Institute of Technology.
 *
 * Permission to use, copy, modify, and distribute this
 * software and its documentation for any purpose and without
 * fee is hereby granted, provided that the above copyright
 * notice appear in all copies and that both that copyright
 * notice and this permission notice appear in supporting
 * documentation, and that the name of M.I.T. not be used in
 * advertising or publicity pertaining to distribution of the
 * software without specific, written prior permission.
 * M.I.T. makes no representations about the suitability of
 * this software for any purpose.  It is provided "as is"
 * without express or implied warranty.
 */

/**
 * @description
 * This file contains functions that implement Discrete Cosine Transforms and
 * their inverses.  When reference is made to the IEEE DCT specification, it
 * is refering to the IEEE DCT specification used by both MPEG and JPEG.
 * A definition of what makes an 8x8 DCT conform to the IEEE specification, as well
 * as a pseudocode implementation, can be found in Appendix A of the MPEG-2 specification
 * (ISO/IEC 13818-2) on P. 125. 
 *
 * @author <a href="mailto:madrake@gmail.com">Matthew Drake</a>
 * @file DCTcomparison.str
 * @version 1.0
 */

/**
 * Compare the output of the various inverse Discrete Cosine Transform
 * implementation accordance with
 * @input  none
 * @output none
 */
void->void pipeline iDCTcompare {
    add void->int filter {
	  work push 64 {
		for (int i = 0; i < 64; i++) {
		    push(((int)(pow(3, i))) % 75);
		}
	  }
    }
    
    add int->int splitjoin {
	  split duplicate();
	  add iDCT8x8_ieee(0); // reference coarse
	  add iDCT8x8_ieee(1); // reference fine
	  add iDCT8x8_ieee(2); // fast fine
	  join roundrobin(1);
    }
    
    add int->void filter {
	  float count  = 0;
	  float errors = 0;
	  
	  work pop 3 {
		int refcoarse = pop();
		int reffine   = pop();
		int fastfine  = pop();
		
		count += 1.0;
		
		if (refcoarse != reffine) {
		    println("Error - Discrepancy between reference iDCT coarse and fine");
		    println("        coarse iDCT gives " + refcoarse + " and fine iDCT gives " + reffine);
		    errors += 1.0;
		    float errorRate = errors / count;
		    println("        Error Rate is " + errorRate);
		}
		if (fastfine != reffine) {
		    println("Error - Discrepancy between reference iDCT and fast iDCT");
		    println("        reference iDCT gives " + reffine + " and fast iDCT gives " + fastfine);
		    errors += 1.0;
		    float errorRate = errors / count;
		    println("        Error Rate is " + errorRate);
		}
	  }
    }
}
