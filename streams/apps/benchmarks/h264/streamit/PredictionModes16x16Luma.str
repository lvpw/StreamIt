/*
 * [Shirley]
 * This file contains the various functions for generating the 4
 * prediction modes for a 16x16 luma intra prediction block. 
 *
 * This is new to MPEG-2
 *  
 * Note that all prediction modes can be calculated independently
 * of each other and therefore can be parallelized.
 * 
 * Reference: http://www.rgu.ac.uk/files/h264_intrapred.pdf
 */

/**
 * @description
 * This file contains various functions that takes in a total of 
 * 289 pixels, The original 16x16 block, Upper Left Corner, 
 * 16 'H'orizontal and 16 'V'ertical pixels on the top
 * and left side of the prediction block.
 * 
 * Various functions calculate all 4 prediction modes such that the 
 * best one can be used for a 16x16 luminance block. Not all modes will 
 * require all 32 pixels. These filters will assume the input will give 
 * luminance values 'H' and 'V' and 'X' an output that is
 * denoted by numbers, in the order below (not in zig-zag).
 * 
 * The series of luminance values for 'H' is an array of length 16,
 * representing the values from left to right. Indexed from 0 - 15.
 * The series of luminance values for 'V' is an array of length 16,
 * representing the values from top to bottom. Indexed from 0 - 15.
 * 
 * X H H H H H H H H H H H H H H H H 
 * V 0 1 2 3 4 5 6 7 8 9 .......
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V ............................. 256
 * 
 * 
 * The number represents the order of output for the prediction block.
 * 
 * The cost function is the residual between the original block
 * and the predicted block. The encoder will choose the prediction
 * mode that minimizes the residual.
 * 
 * PREDICTION MODES
 * 0 - Vertical
 * 1 - Horizontal
 * 2 - DC
 * 3 - Plane
 *
 * Assumption: all H and V pixels are available.
 *
 * @author <a href="mailto:shirley.mit07@gmail.com">Shirley Fung</a>
 * @file PredictionModes16x16Luma.str
 * @version 1.0
 */

/**
 * TOP LEVEL STREAM
 */

void->void pipeline PredictionModes16x16Luma() {
    add FakeBlockHVXGenerator(); 
 
    add splitjoin {
	  split duplicate;
	  add Prediction16x16Mode0AndSAE();
	  add Prediction16x16Mode1AndSAE();
	  add Prediction16x16Mode2AndSAE();
	  add Prediction16x16Mode3AndSAE();
	  join roundrobin(290);
    }


    add FindBestPredictionMode16x16();
    add PredictionResultPrinter();
}

void->int filter FakeBlockHVXGenerator() {
    work push 289 {

	  int pushVal = 0;
	  
	  for (int row=0; row<16; row++) {
		for (int col=0; col<16; col++) {
		    
		    if (row < 8 && col < 8) {
			  pushVal = 3;
		    } else if (row < 8 && col >= 8) {
			  pushVal = 5;
		    } else if (row >= 8 && col < 8) {
			  pushVal = 5;
		    } else {
			  pushVal = 3;
		    }
		    
		    push(pushVal);
		    print(pushVal+" ");
		}
		println(" ");
	  }

	  print("H: ");
	  for (int x=0; x<16; x++) {
		push(40);
		print(40);
	  }
	  println(" ");

	  print("V: ");

	  for (int y=0; y<16; y++) {
		push(4);
		print(4);
	  }
	  
	  println(" ");
	  
	  push(5);
    }
}

int->void filter PredictionResultPrinter() {
    work pop 290 {
	  
	  println("prediction results, residual");

	  for (int row=0; row<16; row++) {
		for (int col=0; col<16; col++) {
		    print(peek(row*16+col)+" ");
		}
		println(" ");
	  }

	  println("best mode "+peek(256));
	  
	  println("original HVX");
	  for (int i=257; i<290; i++) {
		print(peek(i)+" ");
	  }
	  
	  // pop all
	  for (int i=0; i<290; i++) {
		pop();
	  }  
    }
	  
}
	  
/**
 * This filter gathers all the sum of absolute errors from 
 * all the prediction modes, and find the mininum - then output
 * the prediction mode. 
 * 
 * @input stream of 16x16 residual values + "sum of absolute errors" 
 *        (mode0 to mode3 in order) + original HVX
 * @output One 16x16 residual block + recommended 16x16 luma prediction mode 
 *         (possible: 0 to 3) + HVX
 */
int->int filter FindBestPredictionMode16x16() {
    
    // (256 + 1 + 16 + 16 + 1)*4 = 1160 (input)
    // 256 + 1 + 16 + 16 = 290 (ouput)
    work pop 1160 push 290 {

	  println("FindBestPredictionMode16x16");

	  int currentMinSAE = peek(256); 
	  int minPredictionMode = 0;

	  for (int i=1; i<=3; i++) {
		// if SAE is the same for 2 or more modes, 
		// mode 0 is default
		//256*(i+1) + 33i + 1i = 290i + 256
		int sae = peek(290*i+256);
		if (currentMinSAE > sae) {
		    // found new min
		    minPredictionMode = i;
		    currentMinSAE = sae;
		    
		} 
		
		println("current minPredictionMode "+minPredictionMode);
		println("current SAE "+sae);
		println("current min SAE "+currentMinSAE);
	  }
	  // if mode x, residual values are at......
	  // 0: peek(0-255)
	  // 1: peek(257-512)
	  // 2: peek(514-769)
	  // 3: peek(771-1026)
	  
	  int start = minPredictionMode*290;
	  
	  for (int i=start; i<start+290; i++) {
		if (i != start + 256) { // no point in pushing the min sae
		    push(peek(i));
		} else {
		    push(minPredictionMode);
		}

	  }
		

	  // pop all
	  for (int i=0; i<=1159; i++) {
		pop();
	  }  
    }
}

//////////////////////////////////////////////
//PREDICTION MODE 0                         //
//////////////////////////////////////////////

/**
 * This function calculates prediction mode 0 for a 16x16 luminance
 * block. Note that only the 'H'orizontal pixels is required.
 * 
 * VERTICAL MODE
 * 
 * @input A stream of 256 original pixels + 'H' + 'V' + 'X'
 * @output A stream of 256 residual values + sum of absolute errors + H + V + X
 */
int->int filter Prediction16x16Mode0AndSAE() {
    // original block         peek(0-255)
    // 'H'                    peek(256-271);
    // 'V'				peek(272,287)
    // 'X'                    peek(288)
    work pop 289 push 290 {
	  
	  println("Prediction16x16Mode0AndSAE");
	  int sae = 0; // sum of absolute errors
	  for (int row=0; row<16; row++) {
		for (int col=0; col<16; col++) {
		    int residual = peek(row*16+col) - peek(256+col);
		    sae += (int)abs(residual);
		    push(residual);
		    print(residual+" ");
		    //print(sae+" ");
		}
		println(" ");
	  }
	  push(sae);
	  
	  // pass HVX
	  for (int i=256; i<=288; i++) {
		push(peek(i));
	  }
	  
	  for (int i=0; i<=288; i++) {
		pop();
	  }
    }	
}

//////////////////////////////////////////////
//PREDICTION MODE 1                         //
//////////////////////////////////////////////


/**
 * This function calculates prediction mode 1 for a 16x16 luminance
 * block. Note that only the 'V'ertical pixels is required.
 * 
 * HORIZONTAL MODE
 * 
 * @input A stream of 256 original pixels + 'H' + 'V' + 'X'
 * @output A stream of 256 residual values + sum of absolute errors + HVX
 */
int->int filter Prediction16x16Mode1AndSAE() {
    // original block         peek(0-255)
    // 'H'                    peek(256-271);
    // 'V'				peek(272,287)
    // 'X'                    peek(288)
    work pop 289 push 290 {
	  println("Prediction16x16Mode1AndSAE");
	  int sae = 0; // sum of absolute errors
	  for (int row=0; row<16; row++) {
		for (int col=0; col<16; col++) {
		    int residual = peek(row*16+col) - peek(272+col);
		    sae += (int)abs(residual);
		    push(residual);
		    print(residual+" ");
		    //print(sae+" ");
		}
		println(" ");
	  }
	  push(sae);

	  // pass HVX
	  for (int i=256; i<=288; i++) {
		push(peek(i));
	  }
	  
	  for (int i=0; i<=288; i++) {
		pop();
	  }
    }	
}

/**
 * This function calculates prediction mode 2 for a 16x16 luminance
 * block. Note that both 'H'orizontal and 'V'ertical pixels 
 * are required
 *
 * DC MODE (SEE EQUATION 8-114) IN SPEC
 *
 * NOTE:
 * This is incomplete since it does not take care of cases where
 * some of the H and V samples are not available.
 * 
 * @input A stream of 256 original pixels + 'H' + 'V' + 'X'
 * @output A stream of 256 residual values + sum of absolute errors + HVX
 */
int->int filter Prediction16x16Mode2AndSAE() {                                                                                                                              	
    // original block         peek(0-255)
    // 'H'                    peek(256-271);
    // 'V'				peek(272,287)
    // 'X'                    peek(288)
    work pop 289 push 290 {
	  
	  println("Prediction16x16Mode2AndSAE");
	  int DC = 16;
	  for (int hv=256; hv<=287; hv++) {
		DC += peek(hv);
	  }
	  int DCAvg = (int) round(DC>>5);
	  
	  int sae = 0; // sum of absolute errors
	  for (int row=0; row<16; row++) {
		for (int col=0; col<16; col++) {
		    int residual = peek(row*16+col) - DCAvg;       ;
		    sae += (int)abs(residual);
		    push(residual);
		    print(residual+" ");
		    //print(sae+" ");
		}
		println(" ");
	  }
	  push(sae);
	  
	  // pass HVX
	  for (int i=256; i<=288; i++) {
		push(peek(i));
	  }
	  for (int i=0; i<=288; i++) {
		pop();
	  }
    }	
}

/**
 * This function calculates prediction mode 3 for a 16x16 luminance
 * block. Note that both 'H'orizontal and 'V'ertical pixels 
 * are required.
 *
 * ITU specification: 8.3.3.4
 * 
 * @input A stream of 256 original pixels + 'H' + 'V' + 'X'
 * @output A stream of 256 residual values + sum of absolute errors + HVX
 */
int->int filter Prediction16x16Mode3AndSAE() {
    
    // original block         peek(0-255)
    // 'H'                    peek(256-271);
    // 'V'				peek(272,287)
    // 'X'                    peek(288)
    work pop 289 push 290 {

	  println("Prediction16x16Mode3AndSAE");
	  // a = 16 * (p[-1,15]+p[15,-1]) = 16 * (V[15]+H[15])
	  int a = 16*(peek(287)+peek(271));


	  // H = sum((x+1)*(H[8+x]-H[6-x]))
	  // case where x = 7
	  // 8*(H[15]-H[-1]); H[-1] = 'X'
	  int H = 8*(peek(271)-peek(288)) ; 
	  for (int x=0; x<=6; x++) {
		// H += (x+1)*(peek(256+8+x)-peek(256+6-x));
		H += (x+1)*(peek(264+x)-peek(262-x));
	  }
	  
	  
	  // V = sum((y+1)*(V[8+y]-V[6-y]))
	  // case where y = 7
	  // 8*(V[15]-V[-1]); V[-1] = 'X'
	  int V = 8*(peek(287)-peek(288)) ; 
	  for (int y=0; y<=6; y++) {
		// V += (y+1)*(peek(272+8+y)-peek(272+6yx));
		V += (y+1)*(peek(280+y)-peek(278-y));
	  }

	  int b = (5*H+32)>>6;
	  int c = (5*V+32)>>6;
	  
	  int sae = 0;

 	  for (int row=0; row<16; row++) {
		
		for (int col=0; col<16; col++) {
		   
		    int predicted = (a + b*(col-7) + c*(row-7) + 16) >> 5;
		    if (predicted < 0) {
			  predicted = 0;
		    } else if (predicted > 255) {
			  predicted = 255;
		    } else {
			  // do nothing;
		    }
		    int residual = peek(row*16+col) - predicted;
		    sae += (int)abs(residual);
		    push(residual);
		    print(residual+" ");
		    //print(sae+" ");
		}
		
		println(" ");
	  }	  
	  push(sae);

	  // pass HVX
	  for (int i=256; i<=288; i++) {
		push(peek(i));
	  }
	  
	  for (int i=0; i<=288; i++) {
		pop();
	  }
    } 
}

