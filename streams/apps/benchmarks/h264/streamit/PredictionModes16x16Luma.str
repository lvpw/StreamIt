/*
 * [Shirley]
 * This file contains the various functions for generating the 4
 * prediction modes for a 16x16 intra prediction block. 
 *
 * This is new to MPEG-2
 *  
 * Note that all prediction modes can be calculated independently
 * of each other and therefore can be parallelized.
 * 
 * Reference: http://www.rgu.ac.uk/files/h264_intrapred.pdf
 */

/**
 * @description
 * This file contains various functions that takes in a total of 
 * 32 pixels, 16 'H'orizontal and 16 'V'ertical pixels on the top
 * and left side of the prediction block. 
 * 
 * Various functions calculate all 4 prediction modes such that the 
 * best one can be used for a luminance block. Not all modes will 
 * require all 32 pixels. These filters will assume the input will give 
 * luminance values 'H' and 'V', giving an output that is
 * denoted by numbers, in the order below (not in zig-zag).
 * 
 * The series of luminance values for 'H' is an array of length 16,
 * representing the values from left to right. Indexed from 0 - 15.
 * The series of luminance values for 'V' is an array of length 16,
 * representing the values from top to bottom. Indexed from 0 - 15.
 * 
 * X H H H H H H H H H H H H H H H H 
 * V 0 1 2 3 4 5 6 7 8 9 .......
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V
 * V ............................. 256
 * 
 * 
 * The number represents the order of output for the prediction block.
 * 
 * The cost function is the residual between the original block
 * and the predicted block. The encoder will choose the prediction
 * mode that minimizes the residual.
 * 
 * Be aware that the more complex prediction algorithms requires
 * the use of a matrix to store all calcuated values, then the
 * matrix is spit out at each row, from left to right, going downwards
 * at each row.
 *
 * @author <a href="mailto:shirley.mit07@gmail.com">Shirley Fung</a>
 * @file PredictionModes16x16Luma.str
 * @version 1.0
 */



/**
 * This function calculates prediction mode 0 for a 16x16 luminance
 * block. Note that only the 'H'orizontal pixels is required.
 * 
 * @input A stream of 32 pixels 'H' and 'V' + 256 original pixels
 * @output sum of absolute errors for mode 0
 */
int->int filter PredictionMode0() {

	
	work pop 32 peek 32 push 256 {
	  

}

