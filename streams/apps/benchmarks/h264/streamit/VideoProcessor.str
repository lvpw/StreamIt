/**
 * @description
 * This contains all the filters required to rearrange pixel data from a
 * YCrCb 4:2:0 file to macroblocks.
 * 
 * The specification for MPEG-4 (Part 10) used is the ITU-T H-Series 
 * Recommendation for H.264.
 * 
 * @author <a href="mailto:shirleyf@gmail.com">Shirley Fung</a>
 * @file VideoProcessor.str
 * @version 1.0
 */

/** 
 * List of TODOs
 * 
 * impl filter for FrameBuilder
 * update doc
 */

/**
 * What's going on here:
 * 
 * Currently a standalone app for testing purposes.
 */


/**
 * Interprets an input stream of successive frames of the original video in 
 * raw data format, and produces a stream of frames (defined struct).
 * @param width The resolution width of the video.
 * @param height The resolution height of the video.
 * @param numPictures The number of pictures to be put into the video.
 * @input VOID
 * @output A stream of Frames (defined struct).
 */
void->void pipeline VideoProcessor() {
	
	// video parameters, are specified here right now, but
	// this will have to move to the main pipeline once this
	// part has been tested
	int width = 352;
	int height = 288;
	int numPictures = 300; 
	
	// useful variables
	// int numOfMacroblocks = (width/16)*(height/16); // number of macroblocks in a frame
	add FileReader<bit> ("../testvideos/mobile.cif");
	add BitStream2IntStream();
	add MacroblockMaker(width, height, numPictures);
	add FrameBuilder(width, height, numPictures);
	add FramePrinter();

}

/** 
 * ORIGINALLY WRITTEN BY MATTHEW DRAKE FROM MPEG2/BINARYFILE.STR.PRE
 * MODIFICATIONS BY SHIRLEY FUNG, changed code to work with values of 
 * 8 bits instead of the original 32.
 * 
 * Converts a byte stream into a sequence of integers. A byte represents a value.
 * 
 * Works with unsigned byte representation only, and currently expect that peek(0) reads
 * the most significant bit in the byte.
 * 
 * @input 8 bits representing bit data to be translated to integers
 * @output An integer stream equivalent to the original 8 bits.
 */
bit->int filter BitStream2IntStream() {
	work pop 8 push 1 {
  	
		int some_int = 0;
		int two_power = 1;
		//println("printing bits");
		for (int i = 0; i < 8; i++) {
			// big endian, peek(0) of the byte is the most sig bit
			int add_int = peek(8-i) * two_power;
			two_power = two_power * 2;
			some_int += add_int;
			//print(peek(8-i));
		}
		//println("now to int value");

		// pop all
		for (int i=0; i<8; i++) {
			pop();
		}
	
		push(some_int);
	
	}
}

/**
 * Interprets an input stream of successive frames of the original video in 
 * raw data format, and produces a stream of frames (defined struct).
 * @param width The resolution width of the video.
 * @param height The resolution height of the video.
 * @param numPictures The number of pictures to be put into the video.
 * @input A series of images representing the frames of the video. 
 * 		  Each picture frame is coded in YCrCb 4:2:0 format, where a 
 * 		  2x2 pixel block is represented by, arranged in raster format:
 * 
 * 		  Y1 Y2 Y3 Y4 Cr Cb
 * 
 * 		  
 * @output A stream of ints grouped as macroblock units.
 */
int->Macroblock splitjoin MacroblockMaker(int width, int height, int numPictures) {
	

	// split inputs into planes;
	int numOfYValues = width*height;
	int numOfCrCbValues = width*height/4; // 4:2:0 downsampling scheme
	int numOfValuesInFrame = numOfYValues + 2*numOfCrCbValues;

	split roundrobin(numOfYValues, numOfCrCbValues, numOfCrCbValues);


	// reorganizes Y values
	add splitjoin {
		split roundrobin(16);
		for (int i=0; i<(width/16); i++) {
			add Identity<int>;
		}
	}

	// reorganizes Y values
	add splitjoin {
		split roundrobin(8);
		for (int i=0; i<(width/16); i++) {
			add Identity<int>;
		}
	}

	// reorganizes Y values
	add splitjoin {
		split roundrobin(8);
		for (int i=0; i<(width/16); i++) {
			add Identity<int>;
		}
	}

	join roundrobin(256,64,64); // 4:2:0 downsampling scheme for a macroblock
	// at this point, 256+64+64 pixels represent a set of YCrCb values for a macroblock
	// 256+64+64 = 384
	
	add filter {
		work pop 386 push 1 {
			
			/////////// TODO
			// stuff 386 values into a macroblock
		}	
	}
}

Macroblock->Frame filter FrameBuilder(int width, int height, int numPictures) {
	
	int numOfMacroblocks = (width/16)*(height/16); // number of macroblocks in a frame

	work pop numOfMacroblocks push 1 {
		
		//////// TODO
		//println(pop());
		Frame newFrame;
		//push(newFrame);
	}

}


/**
 * FOR TESTING PURPOSES
 */
Frame->void filter FramePrinter() {
	

	work pop numOfValuesInAFrame push 1 {
		
		//println(pop());
		Frame newFrame;
		//push(newFrame);
	}

}


/* ********************************************************
 * STRUCTS FOR VARIOUS DATA TYPES
 * Note: more structs will be needed for intra/inter 
 * prediction to tag the necessary labels for block sizes
 * *********************************************************/


/**
 * This is the container for a frame, using 4:2:0 sampling scheme.
 * It may be modified easily for a different sampling scheme.
 * 
 * Note that in the StreamIt Language Specification 2.1, user initiated 
 * parameterized types is listed as a future extension.
 * 
 * @param numOfMacroblocks number of macroblocks in a frame is needed 
 * 						   to size the array for the frame
 * 						   DEPRECATED, NO PARAMETERIZABLE STRUCTS
 * 
 * @frameNumber used for temporal reference
 * @sliceType labeling of I, P,or B slice types
 * @macroblock samples coded using 4:2:0 scheme
 */
struct Frame {
	int frameNumber;
	int sliceType;
	// QCIF 22w x 16h blocks
	// For clarification, first number will index the row
	// and second number will index the column
	Macroblock[16][22] macroblocks;
}

/**
 * This is the container for a macroblock, used for 4:2:0 sampling scheme.
 * It may be modified easily for a different sampling scheme.
 *
 * @YSamples 16x16 luma samples block
 * @CbSamples 8x8 blue chroma samples block
 * @CrSamples 8x8 red chroma samples block
 */
struct Macroblock {
	// For clarification, first number will index the row
	// and second number will index the column
	int[16][16] YSamples;
	int[8][8] CbSamples;
	int[8][8] CrSamples;
}

