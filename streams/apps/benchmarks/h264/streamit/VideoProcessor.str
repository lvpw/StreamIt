/**
 * @description
 * This contains all the filters required to rearrange pixel data from a
 * YCrCb 4:2:0 file to macroblocks.
 * 
 * The specification for MPEG-4 (Part 10) used is the ITU-T H-Series 
 * Recommendation for H.264.
 * 
 * @author <a href="mailto:shirleyf@gmail.com">Shirley Fung</a>
 * @file VideoProcessor.str
 * @version 1.0
 */

/** 
 * List of TODOs
 * 
 */

/**
 * What's going on here:
 * 
 * I am currently testing to see how I can play with QCIF files...
 */


/**
 * Interprets an input stream of successive frames of the original video in 
 * raw data format, and produces a stream of frames (defined struct).
 * @param width The resolution width of the video.
 * @param height The resolution height of the video.
 * @param numPictures The number of pictures to be put into the video.
 * @input VOID
 * @output A stream of Frames (defined struct).
 */
void->void pipeline VideoProcessor(int width, int height, int numPictures) {
	
	// video parameters
	int width = 352;
	int height = 288;
	int numPictures = 300; 
	
	// useful variables
	// int numOfMacroblocks = (width/16)*(height/16); // number of macroblocks in a frame
	add ImageStreamPreProcessor(width, height, numPictures);

}

/**
 * Interprets an input stream of successive frames of the original video in 
 * raw data format, and produces a stream of frames (defined struct).
 * @param width The resolution width of the video.
 * @param height The resolution height of the video.
 * @param numPictures The number of pictures to be put into the video.
 * @input VOID
 * @output A stream of Frames (defined struct).
 */
void->void pipeline ImageStreamPreProcessor(int width, int height, int numPictures) {
	
	// video parameters
	// int width = 352;
	// int height = 288;
	// int numPictures = 300; 
	
	// useful variables
	// int numOfMacroblocks = (width/16)*(height/16); // number of macroblocks in a frame
	add FileReader<int> ("../testvideos/mobile.cif");
	add MacroblockMaker(width, height, numPictures);

}

/**
 * Interprets an input stream of successive frames of the original video in 
 * raw data format, and produces a stream of frames (defined struct).
 * @param width The resolution width of the video.
 * @param height The resolution height of the video.
 * @param numPictures The number of pictures to be put into the video.
 * @input A series of images representing the frames of the video. 
 * 		  Each picture frame is coded in YCrCb 4:2:0 format, where a 
 * 		  2x2 pixel block is represented by, arranged in raster format:
 * 
 * 		  Y1 Y2 Y3 Y4 Cr Cb
 * 
 * 		  
 * @output A stream of Frames (defined struct) in time.
 */
int->void filter MacroblockMaker(int width, int height, int numPictures) {
	
	// video parameters
	// int width = 352;
	// int height = 288;
	// int numPictures = 300; 
	
	// useful variables
	// int numOfMacroblocks = (width/16)*(height/16); // number of macroblocks in a frame
	work pop 1 push 0 {
		print(pop());
		// Frame newFrame;
		// push(newFrame);
	}

}

