/**
 * @description
 * This contains all the filters required to rearrange pixel data from a
 * YCbCr 4:2:0 file to macroblocks.
 * 
 * The specification for MPEG-4 (Part 10) used is the ITU-T H-Series 
 * Recommendation for H.264.
 * 
 * @author <a href="mailto:shirleyf@gmail.com">Shirley Fung</a>
 * @file VideoProcessor.str
 * @version 1.0
 */

/** 
 * List of TODOs
 * 
 * testing..
 * update doc
 */

/**
 * What's going on here:
 * 
 * Currently a standalone app for testing purposes.
 */


/**
 * Interprets an input stream of successive frames of the original video in 
 * raw data format, and produces a stream of frames (defined struct).
 * @input VOID
 * @output A stream of Frames (defined struct).
 */
void->void pipeline VideoProcessor() {
	
	// video parameters, are specified here right now, but
	// this will have to move to the main pipeline once this
	// part has been tested
	int width = 352;
	int height = 288;
	// int numPictures = 300; 

	
	// useful variables
	// int numOfMacroblocks = (width/16)*(height/16); // number of macroblocks in a frame
	
	// commented out for testing
	// add FileReader<bit> ("../testvideos/mobile.cif");
	// add BitStream2IntStream();
	
	// for testing macroblockmaker and framebuilder
	add FakeVideoIntsGenerator();
	
	add MacroblockMaker(width, height);
	add FrameBuilder(width, height);
	
	// for testing only
	add FramePrinter(width, height);

}

/** 
 * ORIGINALLY WRITTEN BY MATTHEW DRAKE FROM MPEG2/BINARYFILE.STR.PRE
 * MODIFICATIONS BY SHIRLEY FUNG, changed code to work with values of 
 * 8 bits instead of the original 32.
 * 
 * Converts a byte stream into a sequence of integers. A byte represents a value.
 * 
 * Works with unsigned byte representation only, and currently expect that peek(0) reads
 * the most significant bit in the byte.
 * 
 * @input 8 bits representing bit data to be translated to integers
 * @output An integer stream equivalent to the original 8 bits.
 */
bit->int filter BitStream2IntStream() {
	
	work pop 8 push 1 {
  	
		int some_int = 0;
		int two_power = 1;
		//println("printing bits");
		for (int i = 0; i < 8; i++) {
			// big endian, peek(0) of the byte is the most sig bit
			int add_int = peek(7-i) * two_power;
			two_power = two_power * 2;
			some_int += add_int;
			//print(peek(7-i));
		}
		//println("now to int value");
		//print(some_int);

		// pop all
		for (int i=0; i<8; i++) {
			pop();
		}
	
		push(some_int);
	
	}
}

/**
 * Interprets an input stream of successive frames of the original video in 
 * raw data format, and produces a stream of macroblock (defined struct). The input
 * format is I420 (see http://www.fourcc.org/)
 * @param width The resolution width of the video.
 * @param height The resolution height of the video.
 * @input A series of images representing the frames of the video. 
 * 		  Each picture frame is coded in YCbCr 4:2:0 planar format.
 * 		  Therefore, Y, Cb, Cr are stored in separate arrays.
 * @output A stream of macroblocks (struct).
 */
int->Macroblock pipeline MacroblockMaker(int width, int height) {
	




	add splitjoin {
		
		// split inputs into planes;
		int numOfYValues = width*height;
		int numOfCbCrValues = width*height/4; // 4:2:0 downsampling scheme
		int numOfValuesInFrame = numOfYValues + 2*numOfCbCrValues;		
		
		split roundrobin(numOfYValues, numOfCbCrValues, numOfCbCrValues);
	
	
		// reorganizes Y values
		add splitjoin {
			split roundrobin(16);
			for (int i=0; i<(width/16); i++) {
				add Identity<int>;
			}
			join roundrobin(256);
		}
	
		// reorganizes Cb values
		add splitjoin {
			split roundrobin(8);
			for (int i=0; i<(width/16); i++) {
				add Identity<int>;
			}
			join roundrobin(64);
		}
	
		// reorganizes Cr values
		add splitjoin {
			split roundrobin(8);
			for (int i=0; i<(width/16); i++) {
				add Identity<int>;
			}
			join roundrobin(64);
		}
		
		// collects all samples for a 16x16 macroblock
		join roundrobin(256,64,64); // 4:2:0 downsampling scheme for a macroblock
		// at this point, 256+64+64 pixels represent a set of YCbCr values for a macroblock
		// 256+64+64 = 384
	}
	
	add int->Macroblock filter {
		
		// stuff 386 values into a macroblock
		work pop 386 push 1 {
			// at each iteration of the work function, 
			// it will work on the macroblocks, in raster order
			
			Macroblock newMacroblock;
			
			for (int YCount=0; YCount<386; YCount++) {
				
				// stuff Y values into a macroblock struct;
				for (int row=0; row<16; row++) {
					for (int col=0; col<16; col++) {
						newMacroblock.YSamples[row][col] = peek(YCount);
						
					}
				}
			}
			
			// (386+16) = 402
			for (int CbCount=386; CbCount<402; CbCount++) {
				
				// stuff Cb values 
				for (int row=0; row<8; row++) {
					for (int col=0; col<8; col++) {
						newMacroblock.CbSamples[row][col] = peek(CbCount);
					}
				}
			}
			
			// (386+16+16)
			for (int CrCount=402; CrCount<418; CrCount++) {
				
				// stuff Cr values
				for (int row=0; row<8; row++) {
					for (int col=0; col<8; col++) {
						newMacroblock.CrSamples[row][col] = peek(CrCount);
					}
				}
				
			}
			
			push(newMacroblock);
			
			// pop all
			for (int i=0; i<386; i++) {
				pop();
			}
			
		}	
	}
}

/**
 * It takes a series of macroblocks in raster sequence and build a frame.
 * @param width The resolution width of the video.
 * @param height The resolution height of the video.
 * @input A series of macroblocks (see struct) 		  
 * @output A stream of frames (struct) of the orignal video.
 */
Macroblock->Frame filter FrameBuilder(int width, int height) {
	
	// why is init {} not working?
	int numOfHBlocks = (width/16); // number of macroblocks in the horizontal direction
	int numOfVBlocks = (height/16); // number of macroblocks in the vertical direction
	int numOfMacroblocks = (width/16)*(height/16); // number of macroblocks in a frame
	int frameCount = 0;	

	work pop numOfMacroblocks push 1 {
		
		Frame newFrame;
		
		for (int mBlockCount=0; mBlockCount<numOfMacroblocks; mBlockCount++) {
			for (int row=0; row<numOfHBlocks; row++) {
				for (int col=0; col<numOfVBlocks; col++) {
					newFrame.macroblocks[row][col] = peek(mBlockCount);
				}
			}
		}
		
		newFrame.frameNumber = frameCount;
		frameCount++;
		push(newFrame);
		
		// pop all
		for (int i=0; i<numOfMacroblocks; i++) {
			pop();
		}
		
		
	}

}




/**********************************************************
 * FOR TESTING PURPOSES
/**********************************************************/

/**
 * This is a source of integers
 */

void->int filter FakeVideoIntsGenerator() {
	
	int x = 0;

	work push 1 {
		push(x++);
	}
}	

/**
 * This is made to print frames nicely in the console to verify
 * this all works.
 */
Frame->void filter FramePrinter(int width, int height) {
	
	int numOfHBlocks = (width/16); // number of macroblocks in the horizontal direction
	int numOfVBlocks = (height/16); // number of macroblocks in the vertical direction

	work pop 1 {
		
		Frame currentFrame = peek(0);
		
		println(" ");
		print("Frame ");
		print(currentFrame.frameNumber);
		println(" ");
		
		for (int row=0; row<numOfVBlocks; row++) {
			for (int col=0; col<numOfVBlocks; col++) {
				
				Macroblock currentMacroblock = currentFrame.macroblocks[row][col];
				
				println("Y Samples");
				for (int r=0; r<8; r++) {
					for (int c=0; c<8; c++) {
						print(currentMacroblock.YSamples[r][c]);
					}
					println(" ");
				}
				
				println("Cb Samples");
				for (int r=0; r<8; r++) {
					for (int c=0; c<8; c++) {
						print(currentMacroblock.CbSamples[r][c]);
					}
					println(" ");
				}
				
				println("Cr Samples");
				for (int r=0; r<8; r++) {
					for (int c=0; c<8; c++) {
						print(currentMacroblock.CrSamples[r][c]);
					}
					println(" ");
				}
				
				println(" ");
			}
		}
		pop();	
	}
	
}





/* ********************************************************
 * STRUCTS FOR VARIOUS DATA TYPES
 * Note: more structs will be needed for intra/inter 
 * prediction to tag the necessary labels for block sizes
 * *********************************************************/


/**
 * This is the container for a frame, using 4:2:0 sampling scheme.
 * It may be modified easily for a different sampling scheme.
 * 
 * Note that in the StreamIt Language Specification 2.1, user initiated 
 * parameterized types is listed as a future extension.
 * 
 * @param numOfMacroblocks number of macroblocks in a frame is needed 
 * 						   to size the array for the frame
 * 						   DEPRECATED, NO PARAMETERIZABLE STRUCTS
 * 
 * @frameNumber used for temporal reference
 * @sliceType labeling of I, P,or B slice types
 * @macroblock samples coded using 4:2:0 scheme
 */
struct Frame {
	int frameNumber;
	// int sliceType;
	// QCIF 22w x 16h blocks
	// For clarification, first number will index the row
	// and second number will index the column
	Macroblock[16][22] macroblocks;
}

/**
 * This is the container for a macroblock, used for 4:2:0 sampling scheme.
 * It may be modified easily for a different sampling scheme.
 *
 * @YSamples 16x16 luma samples block
 * @CbSamples 8x8 blue chroma samples block
 * @CrSamples 8x8 red chroma samples block
 */
struct Macroblock {
	// For clarification, first number will index the row
	// and second number will index the column
	int[16][16] YSamples;
	int[8][8] CbSamples;
	int[8][8] CrSamples;
}

