/**
 * @description
 * This is the main file that contains all the filters required to encode
 * MPEG-4 compliant video. The specification for MPEG-4 (Part 10) used is 
 * the ITU-T H-Series Recommendation for H.264.
 * 
 * @author <a href="mailto:shirley.mit07@gmail.com">Shirley Fung</a>
 * @file MPEG4Encoder.str
 * @version 1.0
 */

/** 
 * List of TODOs
 * -remove any parameterizable structs
 * -decide on a fix resolution that the encoder will work for, FIX ARRAY SIZES!
 */

/**
 * Interprets an input stream of raw video and encodes a compressed MPEG-4 
 * compliant bit stream, in accordance with the ITU-T specification.
 * 
 * The encoder is limited to work only with CIF videos in YCrCb 4:2:0 planar format,
 * with resolution of 288h x 352w. However, with small changes in the code, it
 * can work with QCIF files as well. It is important that the width and height
 * dimensions must be in multiples of 16 for macroblock division to work. The
 * reason why the input video resolution is fixed due to the fact that there
 * is no parameterizable structs, arrays of macroblocks must be of a fixed size.
 * 
 * @input VOID
 * @output An MPEG-4 compliant bit stream of variable length.
 */ 
void->bit pipeline rawImageStream_to_MPEGStream() {
	
    // video parameters
    int width = 352;
    int height = 288;
    // int numPictures = 300; 
	
    portal<SendBackReconstructedFrame> portal_referenceFrame;
	
	
    add VideoProcessor(width, height); // similar to mpeg2
    // see VideoProcessor.str, for testing purposes, ver 1.46 does not
    // take the W,H,numPictures as parameters
		
    add Prediction(portal_referenceFrame); 
    add TransformAndQuantization; // add parameters
    add splitjoin {
	  duplicate;
	  add Identity<CodedFrame>;
	  add pipeline {
		add InverseTransformAndQuantization; // add parameters
		add SendBackReconstructedFrame to portal_referenceFrame
	  }
			
	  join roundrobin(1);
    }
									 	 
	/* Note:
	 * These frames are sent back to the Prediction filter because the 
	 * transform and quantization stages produce a distorted frame 
	 * (process is lossy)
	 */
    add ReorderFrames; 
    add EntropyEncoding;
    // write to file!
}




/**
 * Interprets an input stream of successive frames (in macroblock form), and produces a 
 * stream of predicted frames (P slices).
 * @param parameters has not been set in stone yet...
 * @input A series of frames in macroblock order
 * @output A stream of predicted frames (defined new struct: PredictedFrame).
 */
Frame->PredictedFrame pipeline Prediction(portal<SendBackReconstructedFrame> 
								 	portal_referenceFrame) {

}

/**
 * Interprets an input stream of predicted frames, and produces a 
 * stream of coded frames.
 * @param parameters has not been set in stone yet...
 * @input A stream of predicted frames 
 * @output A stream of coded frames (defined new struct: PredictedFrame).
 */
PredictedFrame->CodedFrame pipeline TransformAndQuantization() {
	
}

/**
 * Interprets an input stream of coded frames, and produces a 
 * stream of reconstructed frames.
 * @param parameters has not been set in stone yet...
 * @input A stream of coded frames 
 * @output A stream of coded frames.
 */
CodedFrame->CodedFrame pipeline InverseTransformAndQuantization() {
	
}

/**
 * Interprets an input stream of coded frames, and produces a 
 * stream of coded frames. Note that this handles sending back 
 * reconstructed frames for intra and inter prediction. The stream
 * of coded frames will be OUT OF ORDER for final entropy encoding.
 * 
 * Note that inter prediction will require filtered blocks.
 * 
 * @param parameters has not been set in stone yet...
 * @input A stream of coded frames 
 * @output A stream of coded frames
 */
CodedFrame->CodedFrame filter SendBackReconstructedFrame() {
	
}

// ReorderFrames && EntropyEncoding needed here


/* ********************************************************
 * STRUCTS FOR VARIOUS DATA TYPES
 * Note: more structs will be needed for intra/inter 
 * prediction to tag the necessary labels for block sizes
 * *********************************************************/



