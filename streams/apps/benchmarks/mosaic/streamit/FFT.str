/*~~~~~~~~~~
~~~~FFT2~~~~
~~~~~~~~~~*/

/* The filter accepts incoming float values and takes as parameters
 * the width, the height, and the zeropadding values necessary
 * to make it so that when the actual FFT is taken, it is taken as a
 * power of 2.  That is, if we have the width FFTM = 11, MZeropad should equal 
 * the next biggest power of 2 minus 11, or 16 - 11 = 5.  MZeropad
 * can also equal any power of two minus 11 so long as that power of two
 * is larger than FFTM.  So MZeropad can also be 32 - 11 = 21,
 * 64 - 11 = 53, or 1024 - 11 = 1013.  The same concept applies to FFTN
 * and NZeropad, where we mean the Height of the thing whose FFT we want
 * to take.  
 */
 
 

/*void->void pipeline FFT(){

	int w = 13;

	int r = (w-1)/2;
	
	int FFTM = 320;
	int FFTN = 240;
	
	int FFTWidth = 512;
	int FFTHeight = 256;
	
	int MZeroPad = FFTWidth-FFTM;
	int NZeroPad = FFTHeight-FFTN;
 
	add FileReader<int>("bin/bert.bin");
	println("start FFT");
	add intToFloat();
	add splitjoin{
		split roundrobin(1,0);
		add FFT2(FFTM, FFTN, FFTWidth, FFTHeight);
		//now generate the averager and take its fft
		add pushAverager(w, FFTWidth, FFTHeight);
		join roundrobin(2);
	};
	// multiply the fft of the yImage with that of the averager
	add float->float filter
	{
		float a, b, c, d;
		work pop 4 push 2
		{
				a = pop();
				b = pop();
				c = pop();
				d = pop();
				push(a*c - b*d);
				push(a*d + b*c);
		}
	};
	
	// the arguments for IFFT2 are funky since we don't want to go back to a
	// imageWidth x imageHeight matrix, rather we want it to be a matrix a tad bigger
	// (imageWidth + r) x (imageHeight + r) so that we can take the bottom right 
	// imageWidth x imageHeight matrix of that larger matrix.

	//add IFFT2(FFTM + 2*r, FFTN + 2*r, 512 - (FFTM + 2*r), 256 - (FFTN + 2*r));	
	//add FFT2(FFTM, FFTN, FFTWidth, FFTHeight);
	//add IFFT2(FFTM, FFTN, FFTWidth, FFTHeight);

	add IFFT2(FFTM+MZeroPad, FFTN+NZeroPad, FFTWidth, FFTHeight);
	add takeInnerMatrix(FFTM, FFTN, FFTWidth, FFTHeight,  r);
	//add floatToInt();
	println("end   FFT");
	add FileWriter<float>("outbert.bin");
}*/

    



/*~~~~~~~~~~
~~~~FFT2~~~~
~~~~~~~~~~*/

float->float pipeline FFT2(int FFTM, int FFTN, int FFT2Width, int FFT2Height)
{	
	int MZeroPad = FFT2Width-FFTM;
	int NZeroPad = FFT2Height-FFTN;
	
	add realToComplex();
	
	add FFT1D(FFTM, MZeroPad);
	add Transpose(FFTM+MZeroPad, FFTN);
	add FFT1D(FFTN, NZeroPad);
	add Transpose(FFTN+NZeroPad, FFTM+MZeroPad);
}

/*~~~~~~~~~~~
~~~~IFFT2~~~~
~~~~~~~~~~~*/

float->float pipeline IFFT2(int FFTM, int FFTN, int IFFT2Width, int IFFT2Height)
{
	int MZeroPad = IFFT2Width-FFTM;
	int NZeroPad = IFFT2Height-FFTN;

	add IFFT1D(FFTM, MZeroPad);
	add Transpose(FFTM, FFTN+NZeroPad);
	add IFFT1D(FFTN, NZeroPad);
	add Transpose(FFTN, FFTM);
	
	add complexToReal();
}
/*~~~~~~~~~~~
~~~~FFT1D~~~~
~~~~~~~~~~~*/

//takes in a series of floats on the tape with parameters
//indicating the number of them we want to take the 1-dimensional
//FFT for and how much zeropadding it needs to take that number,
//size, to the next power of two.  so if the size is 11, the
//value of zeropadding ought to be 5, 21, 53, 117, etc, so that 
//size+zeropadding equals some power of two like 16, 32, 64, and 128
//respectively


float->float pipeline FFT1D(int size, int zeropadding){

	if(zeropadding!=0)
	{
	add zeroPad(size*2, zeropadding*2);
	}
	add FFTKernel2(size+zeropadding);
}

float->float splitjoin zeroPad(int size, int zeropadding){
	
	split roundrobin(1,0);
	add Identity<float>;
	add void->float filter {work push zeropadding 
						{for(int j=0; j<zeropadding; j++) push(0);}};
	join roundrobin(size, zeropadding);
	
}

/*~~~~~~~~~~~~
~~~~IFFT1D~~~~
~~~~~~~~~~~~*/

//takes in a series of floats on the tape with parameters
//indicating the number of them we want to take the 1-dimensional
//IFFT for and how much zeropadding it needs to take that number,
//size, to the next power of two.  so if the size is 11, the
//value of zeropadding ought to be 5, 21, 53, 117, etc, so that 
//size+zeropadding equals some power of two like 16, 32, 64, and 128
//respectively

float->float pipeline IFFT1D(int size, int zeropadding){
	add IFFTKernel2(size+zeropadding);
	if(zeropadding!=0)
	{
	add unZeroPad(size*2, zeropadding*2);
	}
}

float->float splitjoin unZeroPad(int size, int zeropadding){
		
	split roundrobin(size, zeropadding);
	add Identity<float>;
	add float->void filter {work pop 1{pop();}}
	join roundrobin(1, 0);
}



/*~~~~~~~~~~~~~~~~~~~~~~
~~~~Helper Filters()~~~~
~~~~~~~~~~~~~~~~~~~~~~*/

float->float filter realToComplex(){
	work pop 1 push 2 {
		push(pop());
		push(0);		
	}
}
float->float filter complexToReal(){
	work pop 2 push 1{
		push(pop());
		pop();
	}
}

float->float filter Transpose(int M, int N) {
   float[M][N] real;
   float[M][N] imag;
   work pop 2*M*N push 2*M*N {
		for (int j=0; j<N; j++){
		   for (int i=0; i<M; i++) {
			   real[i][j] = pop();
			   imag[i][j] = pop();
		   }
	   	}
		for (int i=0; i<M; i++){
		    for (int j=0; j<N; j++){
			   push(real[i][j]);
			   push(imag[i][j]);
		   }
	   }
   }
}

//prints whatever comes across it on the tape

float->float filter printer(){
	float gerry;
	work push 1 pop 1 peek 1
	{
		gerry = peek(0);
		println(gerry);
		push(pop());
	}
	
}

/*~~~~~~~~~~~~~~~~
~~~~intToFloat~~~~
~~~~~~~~~~~~~~~~*/

int->float filter intToFloat()
{
	work pop 1 push 1
	{
		push((float)pop());
	}
	
}

/*~~~~~~~~~~~~~~~~
~~~~floatToInt~~~~
~~~~~~~~~~~~~~~~*/

float->int filter floatToInt()
{
	work pop 1 push 1
	{
		push((int)(pop()+0.5));
	}
	
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~FILTERS FROM 'FIRBANK'~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

//the filters below, from FFTKernel2 to CombineDFT
//were taken from the 'firbank' application
//and the file $STREAMIT_HOME/apps/benchmarks/firbank/streamit/FIRBank.str

float->float pipeline FFTKernel2(int n) {

	add FFTReorder(n);
    for (int j = 2; j <= n; j *= 2){
    	add CombineDFT(j);
    }
}


float->float pipeline FFTReorder(int n) {


    for (int i = 1; i< (n/2); i *= 2)
	  {  
	  add FFTReorderSimple(n/i);	 
	 }
}


float->float filter FFTReorderSimple(int n) {

    int totalData;
    
    init {
	  totalData = 2*n; 
    }

    work push 2*n pop 2*n {
        for (int i = 0; i < totalData; i+=4) {
        
		push(peek(i));
		push(peek(i+1));
	  }

        for (int i = 2; i < totalData; i+=4) {
		push(peek(i));
		push(peek(i+1));
	  }

        for (int i = 0; i < n; i++) {
		pop();
		pop();
	  }
    }
}

float->float pipeline IFFTKernel2(int N) {
    add Conjugate();
    add FFTKernel2(N);
    add Conjugate();
    add DivideByN(N);
}

float->float filter Conjugate() {
    work pop 2 push 2 {
        push(pop());
        push(-pop());
    }
}

float->float filter DivideByN(int N) {
    work push 1 pop 1 {
        push(pop()/N);
    }
}

float->float filter CombineDFT(int n) {
    // coefficients, real and imaginary interleaved
    float[n] w;
	float[2*n] results;
	float y0_r, y0_i, y1_r, y1_i, weight_real, weight_imag, y1w_r, y1w_i;
	
    init {
	  float wn_r = (float)cos(2 * pi / n); // pi = 3.141592654
	  float wn_i = (float)sin(-2 * pi / n);
	  float real = 1;
	  float imag = 0;
	  float next_real, next_imag; float y0_r, y0_i, y1_r, y1_i, weight_real, weight_imag, y1w_r, y1w_i;
 
	  for (int i = 0; i < n; i += 2) {
		w[i] = real;
		w[i+1] = imag;
		next_real = real * wn_r - imag * wn_i;
		next_imag = real * wn_i + imag * wn_r;
		real = next_real;
		imag = next_imag;
	  }
    }
    
    work push 2*n pop 2*n peek 2*n {
	  
        for (int i = 0; i < n; i += 2) {
		
		y0_r = peek(i);
        y0_i = peek(i+1);
            
		y1_r = peek(n + i);
        y1_i = peek(n + i + 1);
		
		// load into temps to make sure it doesn't got loaded
		// separately for each load
		weight_real = w[i];
		weight_imag = w[i + 1];
		
        y1w_r = y1_r * weight_real - y1_i * weight_imag;
        y1w_i = y1_r * weight_imag + y1_i * weight_real;
		
		    results[i] = y0_r + y1w_r;
            results[i + 1] = y0_i + y1w_i;
		
		results[n + i] = y0_r - y1w_r;
        results[n + i + 1] = y0_i - y1w_i;
        }

        for (int i = 0; i < 2 * n; i++) {
		pop();
		push(results[i]);
	  }
    }

}