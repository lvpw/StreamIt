
/* fixed on 1/3 to incorporate the changes made in mosaic.str and
 * featureExtraction.str, namely that rather than passing a 320x240 matrix
 * of structs, we send 3 matrices representing the y, i, and q values
 * 
 * here, though, the tape sends in imageAndFeatures values rather than the
 * matrices, which are part of the imageAndFeatures struct
 */

imageAndFeatures->imageAndFeatures
		filter correlation(int w)
{
	imageAndFeatures imAndFeat1;
	imageAndFeatures imAndFeat2;
	int r, rr;
	float[320][240] y1Matrix;
	float[320][240] i1Matrix;
	float[320][240] q1Matrix;
	float[320][240] y2Matrix;
	float[320][240] i2Matrix;
	float[320][240] q2Matrix;
	
	bestFeatures[40] feat1;
	bestFeatures[40] feat2;
	
	bestFeatures[40] tempFeat1;
	bestFeatures[40] tempFeat2;
	
	float[40][40] corrMatrix;
	
	float stanDevW1;
	float stanDevW2;
	float elementWiseProduct;
	
	int[40] bestRows;
	int[40] bestCols;
	
	float currRowBestVal;
	float currColBestVal;

	work pop 1 peek 2 push 2
	{
		r = (w-1)/2;
		rr = 2*r;
		imAndFeat1 = peek(0);
		imAndFeat2 = peek(1);
		
		y1Matrix = imAndFeat1.yImage;
		i1Matrix = imAndFeat1.iImage;
		q1Matrix = imAndFeat1.qImage;
		
		y2Matrix = imAndFeat2.yImage;
		i2Matrix = imAndFeat2.iImage;
		q2Matrix = imAndFeat2.qImage;
		
		feat1 = imAndFeat1.myBest;
		feat2 = imAndFeat2.myBest;
	
		
		//here is where we take care of sharpening the image, 
		//which which we do by subtracted a blurred (LPF) image from
		//the original image.  We blur the image by convolving with 
		//an averaging filter of size 13x13 (each value is 1/(13x13),
		//and we convolve by taking the FFT's of the filter and the
		//image, piece-wise multiplying them, and then taking the IFFT
		//of that result.  after this, we take the center values (i.e.,
		//we ignore a border of length 6 around the image
		
		for(int i=0;i<iters;i++)
		{
			for(int j=0;j<iters;j++)
			{
				corrMatrix[i][j] = -999999;		
			}
		}
		
		float[w][w] w1;
		float[w][w] w2;

		//first, calculate the correlation matrix

		for(int i=0; i<iters; i++)
		{ 	if(feat1[i].x>r & feat1[i].x<imageWidth-r
			  & feat1[i].y>r & feat1[i].y<imageHeight-r) // check if the feature is in bounds
			{	
				stanDevW1 = 0;
				//make w1, which is a window of width w around the feature considered in im1
				for(int m = 0; m <= rr; m++)
				{
					for(int n = 0; n<= rr; n++)
					{	
						w1[m][n] = y1Matrix[feat1[i].x + m - r][feat1[i].y + n - r];
						stanDevW1 = stanDevW1 + w1[m][n]*w1[m][n];
					}
				}
				stanDevW1 = sqrt(stanDevW1);
				for(int j=0; j<iters ; j++)
				{	
					if(feat2[j].x>r & feat2[j].x<imageWidth-r
								  & feat2[j].y>r & feat2[j].y<imageHeight-r) // check if the feature is in bounds
					{
						stanDevW2 = 0;	
						//make w2, which is a window of width w around the feature considered in im2 
						for(int s = 0; s <= rr; s++)
						{
							  for(int t = 0; t<= rr; t++)
						  	  {	
								//println("s: " + s + "\tt: " + t + "\tr: " + r +"\tfeat2[j].x: " + feat2[j].x + "\tfeat2[j].y: " + feat2[j].y); 
								w2[s][t] = y2Matrix[feat2[j].x + s - r][feat2[j].y + t - r];
								stanDevW2 = stanDevW2 + w2[s][t]*w2[s][t];				  	  	
								
						  	  }
						}
						stanDevW2 = sqrt(stanDevW2);
						elementWiseProduct = 0;
						for(int s = 0; s <= rr; s++)
						{
							for(int t = 0; t <= rr; t++)
							{	
								elementWiseProduct = elementWiseProduct + w1[s][t]*w2[s][t];
							}
						}
						
						corrMatrix[i][j] = elementWiseProduct/(stanDevW1*stanDevW2);				
							
							
					} // ends second 'if' statement
				} //ends inner j loop
			} // ends first 'if statement
		} //ends outer i loop	

		// now, use the correlation matrix to find features that 'like' each other
								
			
		for(int i=0; i<iters; i++){
			
			bestRows[i] = 0;
			bestCols[i] = 0;				
		}
		
		currRowBestVal = 0;
		currColBestVal = 0;
		//find greatest values in each row and their numbers
		for(int i = 0; i < iters; i++){
			currRowBestVal = 0;
			for(int j = 0; j < iters; j++){
				if(corrMatrix[i][j] > currRowBestVal){
					currRowBestVal = corrMatrix[i][j];
					//println("currRowBestVal = " + currRowBestVal);
					bestRows[i] = j;
				} // end if
			} // end inner for						
		} // end outer for
		//find greatest values in each col and their numbers
		for(int j = 0; j < iters; j++){
			currColBestVal = 0;
			for(int i = 0; i < iters; i++){
				if(corrMatrix[i][j] > currColBestVal){
					currColBestVal = corrMatrix[i][j];
					bestCols[j] = i;
				} // end if
			} // end inner for						
		} // end outer for		
		//badFeatures = 0;
		//println("Feature	Image	Value		X	Y");
		imAndFeat1.goodPts=0;
		for(int h = 0 ; h < iters; h++)
		{			
			if(bestRows[bestCols[h]] == h && (bestCols[h]!=0 && h!=0)){
				tempFeat1[imAndFeat1.goodPts] = feat1[bestCols[h]];
				tempFeat2[imAndFeat1.goodPts] = feat2[h];
				imAndFeat1.goodPts++;
			}
		}

		imAndFeat1.myBest = tempFeat1;
		imAndFeat2.myBest = tempFeat2;
		
		println(imAndFeat1.goodPts + "/" + iters + " features corresponded");
/*
		println("post corr 1");
		
		for(int i = 0; i<imAndFeat1.goodPts; i++){
		
				println(tempFeat1[i].x + "\t\t" + tempFeat2[i].x);
				println(tempFeat1[i].y + "\t\t" + tempFeat2[i].y);
				println(" ");
			
		}
		*/
		pop();
		push(imAndFeat1);
		push(imAndFeat2);
			
	} // ends work
	/*
	pop and peek to get both images;
	splitjoin =>do the next splitjoin to both im1 and im2
	splitjoin =>image and image blurred, subtract***
	
	
	define a matrix (corrmatrix) initialized to negative infinity of size iters x iters, with each element being x,y

	 
	p1  = [ row row row row ... ]
			col	col col col ...
	for each im1feature in bounds, find its s.d. norm value (sum up squares of each element in the window
	around it, then take the sqrt of the sum).  save that in an array.  if out of bounds, set = 0.
	for each im2 feature in bounds, do the same thing.  
	for each i im1feature in bounds, 
		for each j im2 feature in bounds
		{
			sum the pixel-wise multiplications of the window elements of w1 and w2 (if both are in bounds)
			divide that number by the im1feature s.d.norm value and by im2feature s.d. norm value
			store that as the i, j, value of corrmatrix
		}
		
	***to blur an image (with an 'averager' filter), we need to do the following:
	 A) generate the 'averager' as a matrix (if w = 13, then a 13x13 matrix with each value being 1/(13x13))
	 B) we wish to convolve this 'averager' with the gray-scale image.  we do this by
	 	i)taking the 2-D fft of both averager and image
	 		a)	note about the dimensions involved.  If the averager is of dimensions LxL, and the image is of 
	 			dimensions MxN, then you must 'zero-pad' each of them before you do the FFTs to make them of
	 			dimensions (M+L-1)x(N+L-1)	
	 		b)	for whichever you're fft'ing (say matrix X), take the 1-D fft of each row of X to make X',
	 			then take the 1-D fft of each column of X' to give you FFT2(X).  	 			
	 	ii) element-wise multiplication of the fft's
	 	iii) inverse 2-D fft of that multiplication
	 	iv) taking the center of that (effective) convolution by truncating the r = (w-1)/2 sides of the image
	 	
	 once we've averaged, we get the image and subtract the 'averaged' image to get a sharper one
	 	(effectively this is like an high pass filter)
	 this new sharp image is nice, and we do it for both images (the image taken at step k and at step k+1)	
	*/

}

imageAndFeatures->imageAndFeatures pipeline sharpen(int w){

	int FFTM = imageWidth;
	int FFTN = imageHeight;
	
	int FFTWidth = 512;
	int FFTHeight = 256;
	
	int MZeroPad = FFTWidth-FFTM;
	int NZeroPad = FFTHeight-FFTN;
		
	int r = (w-1)/2;
	add splitjoin{
		split duplicate;
		add IAFID();
		add pipeline{
			add extractMatrix();
			add unmakeMatrix(); // now we have a stream of floats
			
                        add FFTWrapper(w, FFTM, FFTN, FFTWidth, FFTHeight, MZeroPad, NZeroPad, r);

			add float->float filter 
			{ work push 1 peek 2 pop 2 
				{	
					float temp = peek(0)-peek(1);
					push(temp); 
					pop();
					pop();
				}
			};	
			
                        add makeMatrix();
			add unExtractMatrix();
		};
		join roundrobin;
	};
	
	add imageAndFeatures->imageAndFeatures 	filter 
		{
			imageAndFeatures iAndF1;
			imageAndFeatures iAndF2;
			work pop 2 push 1 
			{
				iAndF1 = pop();
				iAndF2 = pop(); 	
				iAndF2.myBest = iAndF1.myBest;
				push(iAndF2);
			}
		};
} 
    

float->float splitjoin FFTWrapper(int w, int FFTM, int FFTN, int FFTWidth, int FFTHeight, int MZeroPad, int NZeroPad, int r) {
    split duplicate;
    add Identity<float>;
    add float->float pipeline {
        add splitjoin{
            split roundrobin(1,0);
            add FFT2(FFTM, FFTN, FFTWidth, FFTHeight);
            //now generate the averager and take its fft
            add pushAverager(w, FFTWidth, FFTHeight);
            join roundrobin(2);
        };
        // multiply the fft of the yImage with that of the averager
        add float->float filter
            {
                float a, b, c, d;
                work pop 4 push 2
                    {
                        a = pop();
                        b = pop();
                        c = pop();
                        d = pop();
                        push(a*c - b*d);
                        push(a*d + b*c);
                    }
            };
				
        //warning, if MZeroPad > 2r, you might have aliasing problems. come back to this
				
        add IFFT2(FFTM+MZeroPad, FFTN+NZeroPad, FFTWidth, FFTHeight);
        add takeInnerMatrix(FFTM, FFTN, FFTWidth, FFTHeight,  r);
    }
    join roundrobin;
}


float->float filter takeInnerMatrix(int FFTM, int FFTN, int FFTWidth, int FFTHeight, int r) {

	work pop (FFTWidth)*(FFTHeight) push FFTM*FFTN {
		for(int j = 0; j < FFTHeight; j++){
			for(int i = 0; i < FFTWidth; i++){
				if(i >= r && j >=r && i < (FFTM+r) && j < (FFTN+r)){
					push(pop());	
				}
				else{pop();}
			}
		}
	}
}

void->float pipeline pushAverager(int w, int FFTWidth, int FFTHeight) {
	
	float avgValue;
	avgValue = (1/(float)w)/(float)w;
	
	add void->float filter {work push w*w {for(int i=0;i<w*w;i++){push(avgValue);}}};
	add FFT2(w, w, FFTWidth, FFTHeight);
}
    
imageAndFeatures->float[320][240] filter extractMatrix()
{
	imageAndFeatures temp;
	work pop 1 push 1
	{
		temp = pop();
		push(temp.yImage);
	}
}

float[320][240]->imageAndFeatures filter unExtractMatrix(){

	imageAndFeatures imAndFeat;
	work pop 1 push 1
	{
			imAndFeat.yImage = pop();
			push(imAndFeat);
	}
	
}
float->float[320][240] filter makeMatrix(){

	float[320][240] yMatrix;
	
	work pop imageHeight*imageWidth push 1
	{
		for(int i = 0; i < imageHeight; i++){
		 for(int  j = 0; j < imageWidth; j++){
					yMatrix[j][i] = pop();	
		 }
		}
		push(yMatrix);
	}
}
float[320][240]->float filter unmakeMatrix()
{	float[320][240] yMatrix;
	work pop 1 push imageHeight*imageWidth
    {
	  yMatrix = pop();
	  for(int i = 0; i < imageHeight; i++){
	   for(int  j = 0; j < imageWidth; j++){
				  push(yMatrix[j][i]);	
		}
	  }
    }
}
