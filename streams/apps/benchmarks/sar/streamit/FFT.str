complex->complex pipeline ftx1d(int nx)
{
    add fftshift1d(nx);
    add fft1d(nx);
    add fftshift1d(nx);
}

complex->complex pipeline ftx2d(int nx, int ny) 
{
    add fftshift2d(nx, ny);
    add fft2d(nx, ny, 0);
    add fftshift2d(nx, ny);
}

complex->complex pipeline fty2d(int nx, int ny) 
{
    add fftshift2d(nx, ny);
    add fft2d(nx, ny, 1);
    add fftshift2d(nx, ny);
}

complex->complex pipeline iftx2d(int nx, int ny) 
{
    add fftshift2d(nx, ny);
    add ifft2d(nx, ny, 0);
    add fftshift2d(nx, ny);
}


complex->complex pipeline ifty2d(int nx, int ny) 
{
    add fftshift2d(nx, ny);
    add ifft2d(nx, ny, 1);
    add fftshift2d(nx, ny);
}

// 1D fft shift
complex->complex filter fftshift1d(int nx) 
{
    work push nx pop nx {
        complex[nx] temp_p;

        int nx_mid;

        if (nx % 2 == 1) {
            nx_mid = (nx-1) / 2;
        } else {
            nx_mid = nx / 2;
        }
        

        for (int i = 0; i < nx; i++) {
            temp_p[nx_mid] = pop();
            nx_mid = nx_mid + 1;
            
            if (nx_mid == nx) {
                nx_mid = 0;
            }
        }
        
        for (int i = 0; i < nx; i++) {
            push(temp_p[i]);
        }
    }
}

// 2D fft shift
complex->complex filter fftshift2d(int nx, int ny) 
{
    work push ny*nx pop ny*nx {
        complex[ny][nx] temp_p;

        int nx_mid;
        int ny_mid;

        if (nx % 2 == 1) {
            nx_mid = (nx-1) / 2;
        } else {
            nx_mid = nx / 2;
        }
        
        if (ny % 2 == 1) {
            ny_mid = (ny-1) / 2;
        } else {
            ny_mid = ny / 2;
        }
        
        for (int i = 0; i < ny; i++) {
            for (int j = 0; j < nx; j++) {
                temp_p[ny_mid][nx_mid] = pop();
                nx_mid = nx_mid + 1;
                
                if (nx_mid == nx) {
                    nx_mid = 0;
                }
            }
            
            ny_mid = ny_mid + 1;
            
            if (ny_mid == ny) {
                ny_mid = 0;
            }
        }
        
        for (int i = 0; i < ny; i++) {
            for (int j = 0; j < nx; j++) {
                push(temp_p[i][j]);
            }
        }
    }
}

// 1D fft
complex->complex filter fft1d(int nx) 
{
    float[nx] cos_value;
    float[nx] sin_value;
    
    init {
        for (int i = 0; i < nx; i++) {
            cos_value[i] = cos(2*3.1415926 * (float)i / (float)nx);
            sin_value[i] = sin(2*3.1415926 * (float)i / (float)nx);
        }
    }
    
    work push nx pop nx {
        complex[nx] temp_p;

        for (int i = 0; i < nx; i++) {
            float real = 0;
            float imag = 0;
            
            for (int j = 0; j < nx; j++) {
                int k = (i * j) % nx;

                complex t = peek(j);
                real += (t.real * cos_value[k]) + (t.imag * sin_value[k]);
                imag += (t.imag * cos_value[k]) - (t.imag * sin_value[k]);
            }
            temp_p[i].real = real;
            temp_p[i].imag = imag;
        }
        
        for (int i = 0; i < nx; i++) {
            pop();
            push(temp_p[i]);
        }
    }
}

// 2D fft
complex->complex filter fft2d(int nx, int ny, int transform) 
{
    float[ny] cos_value;
    float[ny] sin_value;
    float[nx] cos_value_t;
    float[nx] sin_value_t;
    
    init {
        if (transform == 0) {
            for (int i = 0; i < ny; i++) {
                cos_value[i] = cos(2*3.1415926 * (float)i / (float)ny);
                sin_value[i] = sin(2*3.1415926 * (float)i / (float)ny);
            }
        } else {
            for (int i = 0; i < nx; i++) {
                cos_value_t[i] = cos(2*3.1415926 * (float)i / (float)nx);
                sin_value_t[i] = sin(2*3.1415926 * (float)i / (float)nx);
            }
        }
    }
    
    work push ny*nx pop ny*nx {
        complex[ny][nx] temp_p;

        if (transform == 0) {
            for (int i = 0; i < nx; i++) {
                for (int j = 0; j < ny; j++) {
                    float real = 0;
                    float imag = 0;
                    
                    for (int k = 0; k < ny; k++) {
                        int l = (j * k) % ny;

                        complex t = peek(k*nx + i);
                        real += (t.real * cos_value[l]) + (t.imag * sin_value[l]);
                        imag += (t.imag * cos_value[l]) - (t.real * sin_value[l]);
                    }
                    temp_p[j][i].real = real;
                    temp_p[j][i].imag = imag;
                }
            }
        } else {
            for (int i = 0; i < ny; i++) {
                for (int j = 0; j < nx; j++) {
                    float real = 0;
                    float imag = 0;
                    
                    for (int k = 0; k < nx; k++) {
                        int l = (j * k) % nx;

                        complex t = peek(i*ny + k);
                        real += (t.real * cos_value_t[l]) + (t.imag * sin_value_t[l]);
                        imag += (t.imag * cos_value_t[l]) - (t.real * sin_value_t[l]);
                    }
                    temp_p[i][j].real = real;
                    temp_p[i][j].imag = imag;
                }
            }
        }
        
        for (int i = 0; i < ny; i++) {
            for(int j = 0; j < nx; j++) {
                pop();
                push(temp_p[i][j]);
            }
        }
    }
}

// 2D ifft
complex->complex filter ifft2d(int nx, int ny, int transform) 
{
    float[ny] cos_value;
    float[ny] sin_value;
    float[nx] cos_value_t;
    float[nx] sin_value_t;
    
    init {
        if (transform == 0) {
            for (int i = 0; i < ny; i++) {
                cos_value[i] = cos(2*3.1415926 * (float)i / (float)ny);
                sin_value[i] = sin(2*3.1415926 * (float)i / (float)ny);
            }
        } else {
            for (int i = 0; i < nx; i++) {
                cos_value_t[i] = cos(2*3.1415926 * (float)i / (float)nx);
                sin_value_t[i] = sin(2*3.1415926 * (float)i / (float)nx);
            }
        }
    }
    
    work push ny*nx pop ny*nx {
        complex[ny][nx] temp_p;

        if (transform == 0) {
            for (int i = 0; i < nx; i++) {
                for (int j = 0; j < ny; j++) {
                    float real = 0;
                    float imag = 0;
                    
                    for (int k = 0; k < ny; k++) {
                        int l = (j * k) % ny;
                        
                        complex t = peek(k*ny + i);
                        real += (t.real * cos_value[l]) - (t.imag * sin_value[l]);
                        imag += (t.imag * cos_value[l]) + (t.real * sin_value[l]);
                    }
                    temp_p[j][i].real = real / ny;
                    temp_p[j][i].imag = imag / ny;
                }
            }
        } else {
            for (int i = 0; i < ny; i++) {
                for (int j = 0; j < nx; j++) {
                    float real = 0;
                    float imag = 0;
                    
                    for (int k = 0; k < nx; k++) {
                        int l = (j * k) % nx;

                        complex t = peek(i*ny + k);
                        real += (t.real * cos_value_t[l]) - (t.imag * sin_value_t[l]);
                        imag += (t.imag * cos_value_t[l]) + (t.real * sin_value_t[l]);
                    }
                    temp_p[i][j].real = real / nx;
                    temp_p[i][j].imag = imag / nx;
                }
            }
        }
        
        for (int i = 0; i < ny; i++) {
            for(int j = 0; j < nx; j++) {
                pop();
                push(temp_p[i][j]);
            }
        }
    }
}


/*
void->void pipeline FFT
{
    add void->complex filter {
        work push 1 { complex x; push(x); }
    }
    add ftx2d(160, 438);
    add complex->void filter {
        work pop 1 { pop(); }
    }
}
*/
