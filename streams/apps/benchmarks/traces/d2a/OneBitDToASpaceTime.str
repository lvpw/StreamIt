/** 
 * This app is intended to implement a one bit d to a oversampler
 * and noise shaper. This type of application is used in CD players
 * to enable using a cheap d to a converter and still keep performance
 * acceptable.
 **/
void->void pipeline OneBitDToASpaceTime {
    // the source of data (eventually, this should be an audio stream)
    //add DataSource();
    add FileReader<float>("input");

    // go through the process of oversampling
    add OverSampler();
    
    // The noise shaper moves some of the noise into higher frequencies
    add NoiseShaper();
    // This low pass filter filters out the noise that is in higher frequencies.
    add LowPassFilter(1,pi/100,256);
    //add DataSink();
    add FileWriter<float>("output");
}

/** 
 * This is a 16x oversampler -- eg it upsamples
 * its input by a factor of 16. The 16 factor is
 * achieved in four steps. In each step we upsample
 * and then low pass filter with cutoff of pi/2. 
 **/
float->float pipeline OverSampler {
  for (int i=0; i<4; i++) {
    add Expander(2);
    add LowPassFilter(2,pi/2,64);
  }
}


/** 
 * This is a first order noise shaper. It is built with a
 * feedback loop. See Oppenheim, Shafer and Buck, 2nd ed.
 * page 211 for a more detailed explaination.
 **/
float->float feedbackloop NoiseShaper {
  join roundrobin(1,1);
  body pipeline {
    add AdderFilter();
    add QuantizerAndError();
  }
  loop Delay();
  split roundrobin(1,1);
  enqueue 0;
}





/**
 * Simple data source that outputs a combination of 
 * three sine waves with a period of 100 samples.
 **/
void->float filter DataSource {
  int SIZE = 100;
  float[SIZE] data;
  int index;
  init {
    // initialize the data array.
    for (int i=0; i<SIZE; i++) {
      float t = i;
      data[i] = (sin((2*pi)*(t/SIZE)) + 
		 sin((2*pi)*(1.7*t/SIZE) + (pi/3)) +
		 sin((2*pi)*(2.1*t/SIZE) + (pi/5)));
    }
    index = 0;
  }
  work push 1 {
    push(data[index]);
    index = (index + 1)%SIZE;
  }
}

/** Simple sink that prints out the data that it receives. **/
float->void filter DataSink {
  work pop 1 {
    println(pop());
  }
}

/** Simple data selector filter (for filtering out multiplexed output for debugging) **/
float->float filter DataSelector {
  work pop 2 push 1 {
    //push(pop());
    pop();
    push(pop());
  }
}


/**
 * Quantizer filter that converts the input into
 * either 1 or -1 as a first output and then
 * outputs the error value (input-output) as second
 * output.
 **/
float->float filter QuantizerAndError {
  work pop 1 push 2 {
    float inputValue = pop();
    float outputValue;

    // calculate output based on sign of input
    if (inputValue < 0) {
      outputValue = -1;
    } else {
      outputValue = 1;
    }
    
    // now calculate the error value
    float errorValue = (outputValue-inputValue);

    // and push both of the values on to the output tape
    push(outputValue);
    push(errorValue);
  }
}

/** Simple adder (add two sequential values on tape). **/
float->float filter AdderFilter {
  work pop 2 push 1 {
    push (pop() + pop());
  }
}

/** Unit delay -- delays values by one. **/
float->float filter Delay {
  float state;
  init {state = 0;}
  work pop 1 push 1 {
    push(state);
    state = pop();
  }
}

/** 
 * Simple FIR low pass filter with gain=g, wc=cutoffFreq(in radians) and N samples.
 * Eg:
 *                 ^ H(e^jw)
 *                 |
 *          ---------------
 *          |      |      |
 *          |      |      |
 *    <-------------------------> w
 *         -wc            wc
 *
 * This implementation is a FIR filter is a rectangularly windowed sinc function 
 * (eg sin(x)/x), which is the optimal FIR low pass filter in 
 * mean square error terms.
 *
 * Specifically, h[n] has N samples from n=0 to (N-1)
 * such that h[n] = sin(cutoffFreq*pi*(n-N/2))/(pi*(n-N/2)).
 * and the field h holds h[-n].
 */
float->float filter LowPassFilter(float g, float cutoffFreq, int N) {
  float[N] h;

  /* since the impulse response is symmetric, I don't worry about reversing h[n]. */
  init {
    int OFFSET = N/2;
    for (int i=0; i<N; i++) {
      int idx = i + 1;
      // generate real part
      if (idx == OFFSET) 
	/* take care of div by 0 error (lim x->oo of sin(x)/x actually equals 1)*/
	h[i] = g * cutoffFreq / pi; 
      else 
	h[i] = g * sin(cutoffFreq * (idx-OFFSET)) / (pi*(idx-OFFSET));
    }
  }

  /* Implement the FIR filtering operation as the convolution sum. */
  work peek N pop 1 push 1 {
    float sum = 0;
    for (int i=0; i<N; i++) { 
      sum += h[i]*peek(i);
    }
    push(sum);
    pop();
  }
}

/**
 * This filter expands the input by a factor L. Eg in takes in one
 * sample and outputs L samples. The first sample is the input
 * and the rest of the samples are zeros. 
 **/
float->float filter Expander(int L) {
  work peek 1 pop 1 push L {
    push(pop());
    for (int i=0; i<(L-1); i++) {
      push(0);
    }
  }
}
    
