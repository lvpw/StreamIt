<benchmark>
  <name>beamformer</name>
  <desc>Multi-channel beam former</desc>
  <description>
Template application to perform beam-forming on a set of inputs.  The
input file should be preprocessed with 'cpp'; running 'make' will
produce all of the possible outputs.  The application has two stages.
The top stage gathers input from a set of parallel channels, with FIR
filters to delay each channel by a different amount.  The bottom stage
steers the channels into a set of beams, with a detector to sense if
the signal in a particular location exceeds a given threshold.  The
"serialized" versions of the beamformer guarantee a deterministic
output order; otherwise there are outputs in parallel, with ordering
that depends on the schedule that is chosen.  The "coarse" versions of
the beamformer perform the same computation, but are written at a
coarser level of granularity so that some filters do not need to
retain internal state.  This facilitates some compiler analyses, but
causes the I/O rates of the filters to be much larger.
  </description>
  <implementations>
    <impl lang="C" dir="c">
      <file>beamformer.c</file>
      <desc>Reference implementation, based on the StreamIt version.  Always serializes outputs and is fine-grained -- does not provide "coarse" option.</desc>
    </impl>
    <impl lang="StreamIt" dir="streamit" id="beamformer">
      <make>Makefile</make>
      <file>BeamFormer.str</file>
      <desc>StreamIt benchmark as described above, with parallel outputs.</desc>
    </impl>
    <impl lang="StreamIt" dir="streamit" id="serializedbeamformer">
      <make>Makefile</make>
      <file>SerializedBeamFormer.str</file>
      <file class="output">SerializedBeamFormer.out</file>
      <desc>StreamIt benchmark as described above, with deterministic output ordering.</desc>
    </impl>
  </implementations>
</benchmark>
