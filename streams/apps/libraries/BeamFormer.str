/*
 *  Copyright 2001 Massachusetts Institute of Technology
 *
 *  Permission to use, copy, modify, distribute, and sell this software and its
 *  documentation for any purpose is hereby granted without fee, provided that
 *  the above copyright notice appear in all copies and that both that
 *  copyright notice and this permission notice appear in supporting
 *  documentation, and that the name of M.I.T. not be used in advertising or
 *  publicity pertaining to distribution of the software without specific,
 *  written prior permission.  M.I.T. makes no representations about the
 *  suitability of this software for any purpose.  It is provided "as is"
 *  without express or implied warranty.
 */

/**
 * Class BeamFormer
 *
 * Implements a conventional beamformer.
 */

float->float filter BeamFormer(int nBeams, int nChannels, int nSamples) {

  work push nBeams*nSamples pop nChannels*nSamples {

    float[nBeams*nChannels] beamFormingWeights;
    float[nChannels*nSamples] inputData;

    int i, j, k;
    int v = 0;
    for (i = 0; i < nChannels; i++)
    {
      for (j = 0; j < nSamples; j++)
      {
        inputData[v++] = pop();
      }
    }

    for (i = 0;  i < nBeams; i++)
    {
      for (j = 0; j < nSamples; j++)
      {
        float out = 0;
        for (k = 0; k < nChannels; k++)
        {
          out += (beamFormingWeights[i*nChannels+k]) *
	    (inputData[k*nSamples+j]);
        }
        push(out);
      }
    }  
  }
}
