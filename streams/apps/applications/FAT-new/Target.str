/* This Filter performs the Target Detection which includes both the
 * CFAR it takes a floating matrix of N_cnb*N_rg* N_dop and then
 * compares each elements to its neighbours. only a local maxima is
 * then detected as
 */

float[N_cnb][N_rg][N_dop]->float[N_cnb][N_rg][N_dop] filter Target(int N_cnb,int N_rg,int N_dop) {
    init {} 
   
    work push 1 pop 1 {
	float[N_cnb][N_rg][N_dop] OutCube;
	float[N_cnb][N_rg][N_dop] InCube;
	InCube=pop();
	
	for (int i=0; i < N_cnb; i++)
	    for (int j=0; j < N_rg; j++)
		for (int k=0; k < N_dop;k++)
		    OutCube[i][j][k]=InCube[i][j][k];
					

	for (int i=0; i < N_cnb; i++)
	    for (int j=0; j < N_rg;j++)
		for (int k=0; k < N_dop; k++) {
		    if (i >0) {
			if (InCube[i][j][k]<=InCube[i-1][j][k]) {
			    OutCube[i][j][k]=0;
			}
		    }
		    
		    if (j >0) {
			if (InCube[i][j][k]<=InCube[i][j-1][k]) {
			    OutCube[i][j][k]=0;
			}
		    }
		    
		    if (k >0) {
			if (InCube[i][j][k]<=InCube[i][j][k-1]) {
			    OutCube[i][j][k]=0;
			}
		    }
		   
		    if ((i >0) & (j>0))  {
			if (InCube[i][j][k]<=InCube[i-1][j-1][k]) {
			    OutCube[i][j][k]=0;
			}
		    }
		    
		    if ((i >0) & (k>0)) {
			if (InCube[i][j][k]<=InCube[i-1][j][k-1]) {
			    OutCube[i][j][k]=0;
			}
		    }
		    
		    if ((j >0) & (k>0)) {
			if (InCube[i][j][k]<=InCube[i][j-1][k-1]) {
			    OutCube[i][j][k]=0;
			}
		    }
		   
		    if ((i >0) & (k>0) & (j>0)) {
			if (InCube[i][j][k]<=InCube[i-1][j-1][k-1]) {
			    OutCube[i][j][k]=0;
			}
		    }
		   
		    if ((i < (N_cnb-1)))  {
			if (InCube[i][j][k]<=InCube[i+1][j][k]) {
			    OutCube[i][j][k]=0;
			}
		    }
		   
		    if ((i < (N_cnb -1))& (j>0)) {
			if (InCube[i][j][k]<=InCube[i+1][j-1][k]) {
			    OutCube[i][j][k]=0;
			}
		    }
		   
		    if ((i < (N_cnb-1)) & (k>0) ) {
			if (InCube[i][j][k]<=InCube[i+1][j][k-1]) {
			    OutCube[i][j][k]=0;
			}
		    }
		   
		    if ( (i < (N_cnb-1)) & (k >0) & (j>0)) {
			if (InCube[i][j][k]<=InCube[i+1][j-1][k-1]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if ( (i < (N_cnb-1)) & (j<(N_rg-1)) ) {
			if (InCube[i][j][k]<=InCube[i+1][j+1][k]) {
			    OutCube[i][j][k]=0;
			}
		    }
		    
		    if ( (i < (N_cnb-1)) & (k < (N_dop-1))) {
			if (InCube[i][j][k]<=InCube[i+1][j][k+1]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if (k < (N_dop-1)  ) {
			if (InCube[i][j][k]<=InCube[i][j][k+1]) {
			    OutCube[i][j][k]=0;
			}
		    }
			    
		    if (j < (N_rg-1)) {
			if (InCube[i][j][k]<=InCube[i][j+1][k]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if ((j < (N_rg-1)) & (k < (N_dop-1))) {
			if (InCube[i][j][k]<=InCube[i][j+1][k+1]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if ((i < (N_cnb-1)) & (j< (N_rg-1)) & (k< (N_dop-1))) {
			if (InCube[i][j][k]<=InCube[i+1][j+1][k+1]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if ((i<(N_cnb-1)) & (j < (N_rg-1)) & (k >0)  ) {
			if (InCube[i][j][k]<=InCube[i+1][j+1][k-1]) {
			    OutCube[i][j][k]=0;
			}
		    }

		    if ((i<(N_cnb-1)) & (j > 0) & (k >(N_dop-1))  ) {
			if (InCube[i][j][k]<=InCube[i+1][j-1][k+1]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if ( (j < (N_rg-1)) & (k >0)  ) {
			if (InCube[i][j][k]<=InCube[i][j+1][k-1]) {
			    OutCube[i][j][k]=0;
			}
		    }

		    if ((j >0) & (k < (N_dop-1))  ) {
			if (InCube[i][j][k]<=InCube[i][j-1][k+1]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if ((i>0) & (j < (N_rg-1)) & (k >0)  ) {
			if (InCube[i][j][k]<=InCube[i-1][j+1][k-1]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if ((i>0) & (j < (N_rg-1)) & (k < (N_dop-1))  ) {
			if (InCube[i][j][k]<=InCube[i-1][j+1][k+1]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if ((i>0) & (j >0) & (k < (N_dop-1)) ) {
			if (InCube[i][j][k]<=InCube[i-1][j+1][k-1]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if ((i>0) & (j < (N_rg-1))) {
			if (InCube[i][j][k]<=InCube[i-1][j+1][k]) {
			    OutCube[i][j][k]=0;
			}
		    }
			
		    if ((i>0)  & (k>(N_dop-1) )  ) {
			if (InCube[i][j][k]<=InCube[i-1][j][k+1]) {
			    OutCube[i][j][k]=0;
			}
		    }
		}
	
	push(OutCube);
    }
}
