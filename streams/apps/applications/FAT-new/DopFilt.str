/* This Filter performs subband Dopler Compression.  The most
 * computationally efficient method for Pulse Compression is FFT, yet
 * since the complex number support is not yet completely supported by
 * the compiler, I will use the convolutional DFT to perform pulse
 * compression. For code reusablility, the code for performing the
 * actual DFT is implemented in a separate file.

 * In the work function gets an N_bm*N_srg*N_pri Matrix and a weigths
 * matrix as its input and the output is a N_bm*N_srg*N_dop*N_st such
 * that N_st+N_dop=N_pri+1;, the init function requires the value for
 * float[N_pc] , the values for the steering matrix V(s) is computed
 * during the initialization part;
 */

complex[N_bm][N_srg][N_pri]->complex[N_bm][N_srg][N_dop][N_pri-N_dop+1] pipeline DopFilt(int N_bm,int N_srg,int N_pri,int N_dop) {
    add Chg40(N_bm,N_srg,N_pri,N_dop);
    // it seems that N_dop = 1, in which case this is no-op (and leads to error due to empty pipeline)
    if (N_dop>1) {
        add FFTVect(N_dop);
    }
    // Bill: this stream (ParaFFT) does not exist anywhere, so
    // commenting out the call for now.
    //add ParaFFT(N_bm,N_srg,N_dop,N_pri-N_dop+1);
    add Chg41(N_bm,N_srg,N_dop,N_pri-N_dop+1);	
}

// This filter gets the three dimensional array and generates the staggers
complex[N_bm][N_srg][N_pri]->complex[N_dop] filter Chg40(int N_bm, int N_srg, int N_pri, int N_dop) {
    init{}
    work pop 1 push (N_bm*N_srg*(N_pri-N_dop+1)) {
	complex[N_bm][N_srg][N_pri] InCube;
	complex[N_dop] OutVect;

	InCube=pop();

	for (int i=0 ; i < N_bm; i++)
	    for (int j=0 ; j < N_srg; j++)
		for (int k=0 ; k < N_pri-N_dop+1; k++){
		    for (int l=0; l<N_dop; l++)
			OutVect[l]=InCube[i][j][k+l];
		    push(OutVect);
		}
    }
}

// This filter gets the staggers and generates the four dimensional array;
complex[N_dop]->complex[N_bm][N_srg][N_dop][N_stag] filter Chg41(int N_bm,int N_srg, int N_dop, int N_stag) {

    init{}

    work pop (N_bm*N_srg*N_stag) push 1 {
	complex[N_bm][N_srg][N_dop][N_stag] OutArr;
	complex[N_dop] InArr;

	for (int i=0; i < N_bm; i++)
	    for (int j=0; j < N_bm; j++)
		for (int k=0; k< N_stag; k++)
		    {
			InArr=pop();
			for (int l=0; l < N_dop; l++)
			    OutArr[i][j][l][k]=InArr[l];
		    }
	push(OutArr);

    }
}

// This function performs FFT over arrays.
complex[N]->complex[N] pipeline FFTVect(int N){
    add DecompVect(N); // we are changing the vector to its elements
    // convert complex to interleaved real/imag
    add complex->float filter {
        work pop 1 push 2 {
            complex x = pop();
            push(x.real);
            push(x.imag);
        }
    }
    add FFTKernel3(N);       // taking the FFT
    // conver interleaved real/imag to complex
    add float->complex filter {
        work pop 2 push 1 {
            complex result;
            result.real = pop();
            result.imag = pop();
            push(result);
        }
    }
    add CompVect(N);   // they are put back togeather   

}

// This function gets a vector and decomposes it to its elements.
complex[N]-> complex filter DecompVect(int N){
    init{}

    work pop 1 push N {
	complex[N] InVect;
	InVect= pop();

	for (int i=0 ; i < N; i++)
	    push(InVect[i]);
    }
}

// This function gets elements of a vector and puts them back
// togeather.
complex->complex[N] filter CompVect(int N){
    init{
    }

    work pop N push 1{
	complex[N] OutVect;

	for (int i=0; i< N; i++)
	    OutVect[i]=pop();

	push(OutVect);
    }
}
