void->complex filter generate {
   complex[14] a;  
   complex c;
   int i;

  init {
    i=0;

    c = 1.0 + 0.0i;


    a[0] = -8.4i+3.0;
    a[1] = 1.0 + 2i;
    a[2] = 2.0;

    a[3] = 3.0 - 8i;
    a[4] = 7.6i-8.2;
    a[5] = 9.7 - 4.2i;

    a[6] = -1.4;
    a[7] = 8.3 + 4.5i;
    a[8] = 9.0-2.9i;

    a[9] = 0.0+3.4i;
    a[10] = 9;
    a[11] = 9;
    a[12] = 9;
    a[13] = 9;
  }

  work push 1 pop 0 {

//    if(i<14)
//      push(a[i++]);
//    else

complex max_val;
max_val.real = 1000.0;

      if((c.real==7.0)||(c.real==114.0))
        push(max_val);
      else
        push(c);
      
  c.real += 1.0;

  }
}


// takes two floats, assigns the first to be the real part and the second to be the imaginary part of a complex

// input: 2 floats
// output: 1 complex

float->complex filter combine_floats() {

  work push 1 pop 2 {

    float temp1, temp2;
    complex temp_out;

    temp1 = pop();
    temp2 = pop();
    temp_out.real = temp1;
    temp_out.imag = temp2;

    push(temp_out);
  }
}


float->void filter output_f {

  work push 0 pop 1 peek 1 {
    println(pop());
  }
}


complex->void filter output_c {

  complex c;

  work push 0 pop 1 peek 1 {
   c = pop();
   println(c.real); println(c.imag);
  }
}


void->void pipeline Tester {

int N = AntParams_N;
int Nch = GmtiParam_Nch;
int Nbm = GmtiParam_Nbm; 
int Nsrg = GmtiParam_Nsrg;
int Npc = GmtiParam_Npc;
int Ndop = GmtiParam_Ndop;
int Nstag = GmtiParam_Nstag;
int Npri = GmtiParam_Npri;
int NabfTS = GmtiParam_NabfTS;
int NstapTS = GmtiParam_NstapTS;
int Ncnb = GmtiParam_Ncnb;

int data_tot = Nch*Nsrg*Npri; 
int data1_tot = Nbm*Nsrg*Npri;
int data2_tot = Nbm*(Nsrg+Npc-1)*Npri;
int data3_tot = Nbm*Nstag*(Nsrg+Npc-1)*Ndop; 
int data4_tot = Ncnb*(Nsrg+Npc-1)*Ndop;

int V1_tot = Nch*Nbm;
int T1_tot = N*Nch;
int Wabf_tot = Nch*Nbm;
int Astapset_tot = Nbm*Nstag*(NstapTS + Nbm*Nstag)*Ndop;      

// get the data input from file, and convert every pair of floats to a complex
  add FileReader<float>("data.bin");
  add combine_floats();

// first round of GMTI, outputs V1,T1,Wabf,Data1
  add AdaptiveBeamform();

// don't need V1
  add output_final(V1_tot,T1_tot+Wabf_tot+data1_tot);

// split T1,Wabf and Data1
  add splitjoin {
    split roundrobin(T1_tot+Wabf_tot,data1_tot);

// leave T1,Wabf unchanged
    add Identity<complex>();
    
// these stages do not use T1,Wabf
    add pipeline { 
      add PulseCompression();
      add DopFilt();
    }

    join roundrobin(T1_tot+Wabf_tot,data3_tot);
  }

// put data3 in front of T1,Wabf
  add splitjoin { 
    split duplicate();
    add output_final(T1_tot+Wabf_tot,data3_tot);
    add output_initial(T1_tot+Wabf_tot,data3_tot);  
    join roundrobin(data3_tot,T1_tot+Wabf_tot);
  }

// Data3,T1,Wabf inputted in that order, Stap outputs Astapset,Data4
  add Stap();  

// remove Astapset, which is not needed
  add output_final(Astapset_tot,data4_tot);

// Data4 inputted, TargetReport outputted
  add Detector();

  add output_f();
}











