/**
 * @description
 * GMTI_Fragments.str allows the user to 
 * select a fragment of GMTI to compile.
 *
 * Use SED or some other text processor to replace the string FRAGMENT
 * with a number.
 *                                         filts/nodes  compare output with
 *   FRAGMENT == 1 -- whole of Tester.str   2868/5146
 *   FRAGMENT == 2 -- AdaptiveBeamform      1197/2055   afterABf.bin
 *   FRAGMENT == 3 -- PulseCompression       355/ 779   beforeDopFilt.bin
 *   FRAGMENT == 4 -- DopFilt                236/ 442   afterDopFilt.bin
 *   FRAGMENT == 5 -- Stap                   546/1070   afterStap.bin
 *   FRAGMENT == 6 -- Detector               545/ 807   afterDetector.bin
 *   FRAGMENT == 7 -- PulseCompression + DopFilt 587/1217 afterDopFilt.bin
 *
 * number of filters and numbers of graph nodes are based on 
 * make 'FRAGMENT=N' fragments_lib
 * grep '\[ label=' GMTI_FragmentN.dot | grep -v _join | grep -v _split | wc -l
 * grep '\[ label=' GMTI_FragmentN.dot | wc -l
 *
 * with current Makefile, you would specify something like
 * make 'FRAGMENT=4'  'STRCFLAGS=--spacedynamic' fragments_raw
 * this will produce a combined .str file named GMTI_Fragment4.str and
 * compile it for raw with the specified flags to strc.
 *
 * So far, I have no hint as to where the original input data came from...
 *
 * @author Sijit Agrawal, adapted by Allyn Dimock</a>
 * @file GMTI_Fragments.str
 * @version 1.0
 *
 */



// takes two floats, assigns the first to be the real part and the second to be the imaginary part of a complex

// input: 2 floats
// output: 1 complex

float->complex filter combine_floats() {

  work push 1 pop 2 {

    float temp1, temp2;
    complex temp_out;

    temp1 = pop();
    temp2 = pop();
    temp_out.real = temp1;
    temp_out.imag = temp2;

    push(temp_out);
  }
}

complex->float filter disassemble_floats() {
    work pop 1 push 2 {
	complex c = pop();
	push(c.real);
	push(c.imag);
    }
}

float->void filter output_f {

  work push 0 pop 1 peek 1 {
    println(pop());
  }
}


complex->void filter output_c {

  complex c;

  work push 0 pop 1 peek 1 {
   c = pop();
   println(c.real); println(c.imag);
  }
}


void->void pipeline GMTI_FragmentFRAGMENT {

int N = AntParams_N;
int Nch = GmtiParam_Nch;
int Nbm = GmtiParam_Nbm; 
int Nsrg = GmtiParam_Nsrg;
int Npc = GmtiParam_Npc;
int Ndop = GmtiParam_Ndop;
int Nstag = GmtiParam_Nstag;
int Npri = GmtiParam_Npri;
int NabfTS = GmtiParam_NabfTS;
int NstapTS = GmtiParam_NstapTS;
int Ncnb = GmtiParam_Ncnb;

int data_tot = Nch*Nsrg*Npri; 
int data1_tot = Nbm*Nsrg*Npri;
int data2_tot = Nbm*(Nsrg+Npc-1)*Npri;
int data3_tot = Nbm*Nstag*(Nsrg+Npc-1)*Ndop; 
int data4_tot = Ncnb*(Nsrg+Npc-1)*Ndop;

int V1_tot = Nch*Nbm;
int T1_tot = N*Nch;
int Wabf_tot = Nch*Nbm;
int Astapset_tot = Nbm*Nstag*(NstapTS + Nbm*Nstag)*Ndop;      

// The whole thing -- so far.
if (FRAGMENT == 1) { 
// get the data input from file, and convert every pair of floats to a complex
  add FileReader<float>("data.bin");
  add combine_floats();

// first round of GMTI, outputs V1,T1,Wabf,Data1
  add AdaptiveBeamform();

// don't need V1
  add output_final(V1_tot,T1_tot+Wabf_tot+data1_tot);

// split T1,Wabf and Data1
  add splitjoin {
    split roundrobin(T1_tot+Wabf_tot,data1_tot);

// leave T1,Wabf unchanged
    add Identity<complex>();
    
// these stages do not use T1,Wabf
    add pipeline { 

      add PulseCompression();
      add DopFilt();
    }

    join roundrobin(T1_tot+Wabf_tot,data3_tot);
  }

// put data3 in front of T1,Wabf
  add splitjoin { 
    split duplicate();
    add output_final(T1_tot+Wabf_tot,data3_tot);
    add output_initial(T1_tot+Wabf_tot,data3_tot);  
    join roundrobin(data3_tot,T1_tot+Wabf_tot);
  }

// Data3,T1,Wabf inputted in that order, Stap outputs Astapset,Data4

  add Stap();  

// remove Astapset, which is not needed
  add output_final(Astapset_tot,data4_tot);

// Data4 inputted, TargetReport outputted

  add Detector();

  add FileWriter<float>("GMTI_FRAGMENT_output_data");
} else if (FRAGMENT == 2) {
    add FileReader<float>("data.bin");
    add combine_floats();
    add AdaptiveBeamform();
    add disassemble_floats();
    add FileWriter<float>("GMTI_FRAGMENT_output_data");
} else if (FRAGMENT == 3) {
    add FileReader<float>("beforePuslseComp.bin");
    add combine_floats();
    add PulseCompression();
    add disassemble_floats();
    add FileWriter<float>("GMTI_FRAGMENT_output_data");
} else if (FRAGMENT == 4) {
    add FileReader<float>("beforeDopFilt.bin");
    add combine_floats();
    add DopFilt();
    add disassemble_floats();
    add FileWriter<float>("GMTI_FRAGMENT_output_data");
} else if (FRAGMENT == 5) {
    add FileReader<float>("beforeStap.bin");
    add combine_floats();
    add Stap();  
    add disassemble_floats();
    add FileWriter<float>("GMTI_FRAGMENT_output_data");
} else if (FRAGMENT == 6) {
    add FileReader<float>("beforeDetector.bin");
    add combine_floats();
    add Detector();
    add FileWriter<float>("GMTI_FRAGMENT_output_data");
} else if (FRAGMENT == 7) {
    add FileReader<float>("beforePuslseComp.bin");
    add combine_floats();
    add PulseCompression();
    add DopFilt();
    add disassemble_floats();
    add FileWriter<float>("GMTI_FRAGMENT_output_data");
}
}
