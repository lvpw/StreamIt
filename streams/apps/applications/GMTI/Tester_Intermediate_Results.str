/**
 * Tester.str integrates the five implemented phases of GMTI.
 *
 *   AdaptiveBeamform
 *   PulseCompression
 *   DopFilt
 *   Stap
 *   Detector
 *
 *   There are some split/joins to remove unecessary data foar particular
 *   phases.  There is also a (unfortunate) splitjoin between DopFilt and
 *   Stap reorganizing the order of the data.
 *
 * So far, I have no hint as to where the original input data came from...
 *
 * This version puts out intermediate files between phases to be used 
 * as inputs for running individual phases.
 */


// takes two floats, assigns the first to be the real part and the second to be the imaginary part of a complex

// input: 2 floats
// output: 1 complex

float->complex filter combine_floats() {

  work push 1 pop 2 {

    float temp1, temp2;
    complex temp_out;

    temp1 = pop();
    temp2 = pop();
    temp_out.real = temp1;
    temp_out.imag = temp2;

    push(temp_out);
  }
}

complex->float filter disassemble_floats() {
    work pop 1 push 2 {
	complex c = pop();
	push(c.real);
	push(c.imag);
    }
}

float->void filter output_f {

  work push 0 pop 1 peek 1 {
    println(pop());
  }
}


complex->void filter output_c {

  complex c;

  work push 0 pop 1 peek 1 {
   c = pop();
   println(c.real); println(c.imag);
  }
}


void->void pipeline Tester {

int N = AntParams_N;
int Nch = GmtiParam_Nch;
int Nbm = GmtiParam_Nbm; 
int Nsrg = GmtiParam_Nsrg;
int Npc = GmtiParam_Npc;
int Ndop = GmtiParam_Ndop;
int Nstag = GmtiParam_Nstag;
int Npri = GmtiParam_Npri;
int NabfTS = GmtiParam_NabfTS;
int NstapTS = GmtiParam_NstapTS;
int Ncnb = GmtiParam_Ncnb;

int data_tot = Nch*Nsrg*Npri; 
int data1_tot = Nbm*Nsrg*Npri;
int data2_tot = Nbm*(Nsrg+Npc-1)*Npri;
int data3_tot = Nbm*Nstag*(Nsrg+Npc-1)*Ndop; 
int data4_tot = Ncnb*(Nsrg+Npc-1)*Ndop;

int V1_tot = Nch*Nbm;
int T1_tot = N*Nch;
int Wabf_tot = Nch*Nbm;
int Astapset_tot = Nbm*Nstag*(NstapTS + Nbm*Nstag)*Ndop;      

// get the data input from file, and convert every pair of floats to a complex
  add FileReader<float>("data.bin");
  add combine_floats();

// first round of GMTI, outputs V1,T1,Wabf,Data1
  add AdaptiveBeamform();

  add splitjoin {
      split duplicate();
      // first direction passes through to next phase
      add complex->complex filter {
	  work push 1 pop 1 {
	      complex popped = pop();
	      push (popped);
	  }
      }
      // second direction writes to output file.
      add complex->void pipeline {
	  add disassemble_floats();
	  add FileWriter<float>("afterABf.bin");
      }
      join roundrobin(1,0);
  }

// don't need V1
  add output_final(V1_tot,T1_tot+Wabf_tot+data1_tot);

// split T1,Wabf and Data1
  add splitjoin {
    split roundrobin(T1_tot+Wabf_tot,data1_tot);

// leave T1,Wabf unchanged
    add Identity<complex>();
    
// these stages do not use T1,Wabf
    add pipeline { 

	add splitjoin {
	    split duplicate();
	    // first direction passes through to next phase
	    add complex->complex filter {
		work push 1 pop 1 {
		    complex popped = pop();
		    push (popped);
		}
	    }
	    // second direction writes to output file.
	    add complex->void pipeline {
		add disassemble_floats();
		add FileWriter<float>("beforePuslseComp.bin");
	    }
	    join roundrobin(1,0);
	}
      add PulseCompression();
	add splitjoin {
	    split duplicate();
	    // first direction passes through to next phase
	    add complex->complex filter {
		work push 1 pop 1 {
		    complex popped = pop();
		    push (popped);
		}
	    }
	    // second direction writes to output file.
	    add complex->void pipeline {
		add disassemble_floats();
		add FileWriter<float>("beforeDopFilt.bin");
	    }
	    join roundrobin(1,0);
	}
      add DopFilt();
	add splitjoin {
	    split duplicate();
	    // first direction passes through to next phase
	    add complex->complex filter {
		work push 1 pop 1 {
		    complex popped = pop();
		    push (popped);
		}
	    }
	    // second direction writes to output file.
	    add complex->void pipeline {
		add disassemble_floats();
		add FileWriter<float>("afterDopFilt.bin");
	    }
	    join roundrobin(1,0);
	}
    }

    join roundrobin(T1_tot+Wabf_tot,data3_tot);
  }

// put data3 in front of T1,Wabf
  add splitjoin { 
    split duplicate();
    add output_final(T1_tot+Wabf_tot,data3_tot);
    add output_initial(T1_tot+Wabf_tot,data3_tot);  
    join roundrobin(data3_tot,T1_tot+Wabf_tot);
  }

// Data3,T1,Wabf inputted in that order, Stap outputs Astapset,Data4
  add splitjoin {
      split duplicate();
      // first direction passes through to next phase
      add complex->complex filter {
	  work push 1 pop 1 {
	      complex popped = pop();
	      push (popped);
	  }
      }
      // second direction writes to output file.
      add complex->void pipeline {
	  add disassemble_floats();
	  add FileWriter<float>("beforeStap.bin");
      }
      join roundrobin(1,0);
  }

  add Stap();  

  add splitjoin {
      split duplicate();
      // first direction passes through to next phase
      add complex->complex filter {
	  work push 1 pop 1 {
	      complex popped = pop();
	      push (popped);
	  }
      }
      // second direction writes to output file.
      add complex->void pipeline {
	  add disassemble_floats();
	  add FileWriter<float>("afterStap.bin");
      }
      join roundrobin(1,0);
  }


// remove Astapset, which is not needed
  add output_final(Astapset_tot,data4_tot);

// Data4 inputted, TargetReport outputted

  add splitjoin {
      split duplicate();
      // first direction passes through to next phase
      add complex->complex filter {
	  work push 1 pop 1 {
	      complex popped = pop();
	      push (popped);
	  }
      }
      // second direction writes to output file.
      add complex->void pipeline {
	  add disassemble_floats();
	  add FileWriter<float>("beforeDetector.bin");
      }
      join roundrobin(1,0);
  }


  add Detector();

  add output_f();
}











