// the IDCT uses a sligthly different structure than the DCT,
// this, I think will help load balancing
void->void pipeline IDCT2D() {
    add source();
    add IDCTcore2D(2,2);
    add sink(4);
}

// this filter is a source, used for testing the filter
void->float filter source () {

    float[4] test;
    init{
	test[0]=3;
	test[1]=0-1;
	test[2]=0-2;
	test[3]=0;
    }

    work push 4 {
	push(test[0]);
	push(test[1]);
	push(test[2]);
	push(test[3]);
    }
}

// this filter is a sink
float->void filter sink(int N) {
    work pop N {
	for (int i=0;i<N;i++)
	    println(pop());
    }
}
	
// this is the complete 2 dimensional IDCT 
// inputs are supposed to be N at a time, that is, the first N
// elements belong to the same vector and so on.
float->float pipeline IDCTcore2D(int N, int M) {
    add Irows(N,M);
    add Irows(M,N);
}

// this split join performes the IDCT in one direction with 
// (with length n) and dimension m, elements are read n at a time
// outputs are generated in the other

float->float splitjoin Irows(int N, int M){

    split roundrobin(N);
    
    for (int i=0;i<M;i++)
	    add IDCTcore(N);

    join roundrobin(1);
}

// this pipeline performs the core DCT operation
float->float pipeline IDCTcore(int N) {
    if (N==2) {
	add TwoPointIDCT();
    }
    else {
	add Irecurse(N);
	add Idecimate(N);
	add bitrev(N);
    }
}

// this split join gets the weighted bit reversed input and performes
// the DCT recursion
float->float splitjoin Irecurse(int N) {
    split roundrobin(1);
    add IDCTcore(N/2);
    add reordIDCT(N/2);
    join roundrobin(1);
}

// this pipeline performes the second DCT operation which requires 
// combining the outputs
float->float pipeline reordIDCT(int N) {
    add inmix(N);
    add IDCTcore(N);
}

// peeks and pops subject of further inquiry
// this filter performs the combinations at the input
// of the second IDCT (look at Rao, Yim 61)
float->float filter inmix(int N){
    work push N pop N {
	float[N] in_arr;
   	
	for (int i=0; i<N; i++)
	    in_arr[i]=pop();
	
	for (int i=N-2;i>=0;i--)
	    in_arr[i]=in_arr[i]-in_arr[i+1];

	for (int i=0; i<N; i++)
	    push(in_arr[i]);
    }
}

//this filter handles the case of N=2
float->float filter TwoPointIDCT() {
    float scale;

    init {
	scale=sqrt(2);
    }

    work push 2 pop 2 {
	float a;
	float b;

	a=pop();
	b=pop();

	//println(a);
	//println(b);
	
	push((a+b)/scale);
	push((a-b)/scale);
    }
}

// this filter regenerates the numbers with correct  weights
float->float splitjoin Idecimate(int N) {
        float coef; //this arrays stores the coefs
	split roundrobin(2);


	for (int i=0;i<(N/2);i++){
	     coef=1/(2*sqrt(2.0/N)*cos((2*i+1)*pi/(2*N)));
	     add recover(coef);	     // recover is a filter with structure similar to a twopoin DCT
	}

	join roundrobin(1);
}

// this is the recovery filter when it undoes the weighted mixing
// of the DCT
 
float->float filter recover(float coef) {
    
    work push 2 pop 2 {
	float a;
	float b;

	a=pop();
	b=pop();

	b=b/coef;

	push((a+b)/2);
	push((a-b)/2);		
   
    }
}

// this round roubin splitjoin uses the reversal filter to perform the bit reversal
// operation. only the second half of a sequence is reversed.
float->float splitjoin bitrev(int N) {
   split roundrobin(N/2);
   add Identity<float>();
   add reversal(N/2);
   join roundrobin(N/2);
}

// this filter takes care of the bit reversal operation necessary for 
// in the bit reversal in the DIF implementation of the DCT.
float->float filter reversal(int N) {

    work push N pop N peek N {

	for (int i=N-1; i>=0; i--)
	    push(peek(i));

	for (int i=0; i <N; i++)
	    pop();

    }
}