void->void pipeline DCT2D() {
    int M=2;
    int N=2;
    	
    add source(N*M);
    add core2D(N,M);
    add sink(N*M);
}

// this filter is a source, used for testing the filter
void->float filter source (int N) {
	float[4] test;
    init{
	test[0]=1;
	test[1]=1;
	test[2]=1;
	test[3]=1;
    }

    work push N {
	for (int i=0; i<N; i++)
	    push(i);
    }
}

// this filter is a sink
float->void filter sink(int N) {
    work pop N {
	for (int i=0;i<N;i++)
	    println(pop());
    }
}
	
// this is the complete 2 dimensional DCT 
// inputs are supposed to be N at a time, that is, the first N
// elements belong to the same vector and so on.
float->float pipeline core2D(int N, int M) {
    add rows(N,M);
    add rows(M,N);
}

// this split join performes the DCT in one direction with 
// (with length n) and dimension m, elements are read n at a time
// outputs are generated in the other
float->float splitjoin rows(int N, int M){

    split roundrobin(N);
    
    for (int i=0;i<M;i++)
	    add DCTcore(N);

    join roundrobin(1);
}

// this pipeline performs the core DCT operation
float->float pipeline DCTcore(int N) {
    if (N==2) {
	add TwoPointDCT();
    }
    else {
	add bitrev(N);
	add decimate(N);
	add recurse(N);
    }
}

// this split join gets the weighted bit reversed input and performes
// the DCT recursion
float->float splitjoin recurse(int N) {
    split roundrobin(N/2);
    add DCTcore(N/2);
    add reordDCT(N/2);
    join roundrobin(1);
}

// this pipeline performes the second DCT operation which requires 
// combining the outputs
float->float pipeline reordDCT(int N) {
    add DCTcore(N);
    add outmix(N);
}

// peeks and pops subject of further inquiry
// this filter performs the combinations at the output
// of the second DCT (look at Rao, Yim 61)
float->float filter outmix(int N){
    work push N pop N {
	float[N] in_arr;
   	
	for (int i=0; i<N; i++)
	    in_arr[i]=pop();
	
	for (int i=0;i<(N-1);i++)
	    push(in_arr[i]+in_arr[i+1]);

	push(in_arr[N-1]);
    }
}

//this filter handles the case of N=2
float->float filter TwoPointDCT() {
    float scale;

    init {
	scale=sqrt(2);
    }

    work push 2 pop 2 {
	float a;
	float b;

	a=pop();
	b=pop();

	//println(a);
	//println(b);
	
	push((a+b)/scale);
	push((a-b)/scale);
    }
}

// this filter mixes the inputs with correct with correct weights
float->float filter decimate(int N) {
    float[N/2] coef; //this arrays stores the coefs

    init {
	for (int i=0;i<(N/2);i++){
	     coef[i]=1/(2*sqrt(2.0/N)*cos((2*i+1)*pi/(2*N)));

	   }
    }

    work push N pop N {
	float[N] in_arr; //input array
	for (int i=0;i<N;i++)
	    in_arr[i]=pop();

	for (int i=0;i<N/2;i++)
	    push(in_arr[i]+in_arr[i+N/2]);

	float temp;

	for (int i=0;i<N/2;i++)
	    {
	    temp=in_arr[i]-in_arr[i+N/2];
	    push(temp*coef[i]);
	    }		
   
    }
}

// this round roubin splitjoin uses the reversal filter to perform the bit reversal
// operation. only the second half of a sequence is reversed.
float->float splitjoin bitrev(int N) {
    split roundrobin(N/2);
   add Identity<float>();
   add reversal(N/2);
   join roundrobin(N/2);
}

// this filter takes care of the bit reversal operation necessary for 
// in the bit reversal in the DIF implementation of the DCT.

float->float filter reversal(int N) {

    work push N pop N peek N {

	for (int i=N-1; i>=0; i--)
	    push(peek(i));

	for (int i=0; i <N; i++)
	    pop();

    }
}
