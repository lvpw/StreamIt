void->int filter Input
{
    work push 1
	{
	    push( 1 );
	}
}

int->void filter PoissonDOF( int width, int height, int lowWidth, int lowHeight )
{
    int[5625] inputPackedArray = init_array_1D_int( "Pass3_input_high.arr", 5625 );
    int[225] inputPackedArrayLow = init_array_1D_int( "Pass3_input_low.arr", 225 );
    int[5625] outputPackedArray;

    float maxCoCRadius;
    float radiusScale;

    float[8] poissonX = { -0.45, -0.9, -0.85, -0.2, 0.4, 0.55, 0.33, 0.8 };
    float[8] poissonY = { 0.04, 0.4, -0.3, -0.6, 0.34, -0.2, -0.58, 0.3 };

    float tmpR;
    float tmpG;
    float tmpB;

    float tmpRLow;
    float tmpGLow;
    float tmpBLow;

    int iTmpR;
    int iTmpG;
    int iTmpB;

    init
	{
	    maxCoCRadius = 5.0;
	    radiusScale = 0.25;
	}

    /*
      void getHigh( float x, float y )
      {
      int x0 = ( int )x;
      int x1 = x0 + 1;
      int y0 = ( int )y;
      int y1 = y0 + 1;
	  
      int val00 = inputPackedArray[ y0 * width + x0 ];
      int val01 = inputPackedArray[ y1 * width + x0 ];
      int val10 = inputPackedArray[ y0 * width + x1 ];
      int val11 = inputPackedArray[ y1 * width + x1 ];

      float fracX = x - x0;
      float fracY = y - y0;

      float blue00 = ( val00 & 0xff ) / 255.0;
      float green00 = ( ( val00 >> 8 ) & 0xff ) / 255.0;
      float red00 = ( ( val00 >> 16 ) & 0xff ) / 255.0;

      float blue01 = ( val01 & 0xff ) / 255.0;
      float green01 = ( ( val01 >> 8 ) & 0xff ) / 255.0;
      float red01 = ( ( val01 >> 16 ) & 0xff ) / 255.0;

      float blue10 = ( val10 & 0xff ) / 255.0;
      float green10 = ( ( val10 >> 8 ) & 0xff ) / 255.0;
      float red10 = ( ( val10 >> 16 ) & 0xff ) / 255.0;

      float blue11 = ( val11 & 0xff ) / 255.0;
      float green11 = ( ( val11 >> 8 ) & 0xff ) / 255.0;
      float red11 = ( ( val11 >> 16 ) & 0xff ) / 255.0;

      float redTop = red00 + fracX * ( red10 - red00 );
      float redBot = red01 + fracX * ( red11 - red01 );

      float greenTop = green00 + fracX * ( green10 - green00 );
      float greenBot = green01 + fracX * ( green11 - green01 );
	
      float blueTop = blue00 + fracX * ( blue10 - blue00 );
      float blueBot = blue01 + fracX * ( blue11 - blue01 );

      tmpR = redTop + fracY * ( redBot - redTop );
      tmpG = greenTop + fracY * ( greenBot - greenTop );
      tmpB = blueTop + fracY * ( blueBot - blueTop );
      }
    */



    work pop 1
	{
	    pop();
	    
	    // for each pixel of OUTPUT (center region)
	    for( int y = 5; y < height - 5; ++y )
		{
		    print( 1 );
		    for( int x = 5; x < width - 5; ++x )
			{
			    // fetch center tap
			    float blurriness = ( ( inputPackedArray[ y * width + x ] >> 24 ) & 0x7F ) / 127.0;
			    float radiusHigh = blurriness * maxCoCRadius;
			    // float radiusLow = blurriness * radiusScale;

			    float redAccum = 0;
			    float greenAccum = 0;
			    float blueAccum = 0;

			    float xx = x / 5.0;
			    float yy = y / 5.0;

			    float coordLowX;
			    float coordLowY;
			    float coordHighX;
			    float coordHighY;			    
			    
			    float redTapLow;
			    float greenTapLow;
			    float blueTapLow;

			    float redTapHigh;
			    float greenTapHigh;
			    float blueTapHigh;

			    float redTapBlurred;
			    float greenTapBlurred;
			    float blueTapBlurred;

			    int tmpX;
			    int tmpY;
			    int val;

			    for( int k = 0; k < 8; ++k )
				{
				    // coordLowX = xx + ( poissonX[k] * radiusLow );
				    // coordLowY = yy + ( poissonY[k] * radiusLow );

				    coordHighX = x + ( poissonX[k] * radiusHigh );
				    coordHighY = y + ( poissonY[k] * radiusHigh );

				    coordLowX = coordHighX / 5.0;
				    coordLowY = coordHighY / 5.0;		   
				    
				    tmpX = ( int )( x + 0.5 );
				    tmpY = ( int )( y + 0.5 );

				    val = inputPackedArrayLow[ tmpY * lowWidth + tmpX ];

				    tmpRLow = ( ( val >> 16 ) & 0xff ) / 255.0;
				    tmpGLow = ( ( val >> 8 ) & 0xff ) / 255.0;
				    tmpBLow = ( val & 0xff ) / 255.0;

				    tmpX = ( int )( x + 0.5 );
				    tmpY = ( int )( y + 0.5 );

				    val = inputPackedArray[ tmpY * width + tmpX ];

				    tmpR = ( ( val >> 16 ) & 0xff ) / 255.0;
				    tmpG = ( ( val >> 8 ) & 0xff ) / 255.0;
				    tmpB = ( val & 0xff ) / 255.0;

				    redTapBlurred = tmpR + blurriness * ( tmpRLow - tmpR );
				    greenTapBlurred = tmpG + blurriness * ( tmpGLow - tmpG );
				    blueTapBlurred = tmpB + blurriness * ( tmpBLow - tmpB );

				    redAccum = redAccum + redTapBlurred;
				    greenAccum = greenAccum + greenTapBlurred;
				    blueAccum = blueAccum + blueTapBlurred;
				}
			    
			    tmpR = redAccum * 0.125;
			    tmpG = greenAccum * 0.125;
			    tmpB = blueAccum * 0.125;
			    
			    iTmpR = ( int )( 255.0 * tmpR );
			    iTmpG = ( int )( 255.0 * tmpG );
			    iTmpB = ( int )( 255.0 * tmpB );

			    outputPackedArray[ y * width + x ] = ( iTmpB | ( iTmpG << 8 ) | ( iTmpB << 16 ) );
			}
		}

	    /*
	      for( int y = 0; y < height; ++y )
	      {
	      for( int x = 0; x < width; ++x )
	      {
	      int index = y * width + x;
	      print( "x = " + x );
	      print( "y = " + y );
	      print( "rgb = " + outputPackedArray[ index ] );
	      }
	      }
	    */
	}
}

int->void splitjoin Distrib()
{
    split duplicate;

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    add PoissonDOF( 75, 75, 15, 15 );
    add PoissonDOF( 75, 75, 15, 15 );

    join roundrobin( 0 );
}

void->void pipeline Pass3_PoissonDOF
{
    add Input();
    add Distrib(); // 62 of them
}
