void->int filter Input
{
    work push 1
	{
	    push( 1 );
	}
}

int->void filter GaussianBlurrer( int width, int height )
{
    float[225] inputRed = init_array_1D_float( "Pass2_input_red.arr", 225 );
    float[225] inputGreen = init_array_1D_float( "Pass2_input_green.arr", 225 );
    float[225] inputBlue = init_array_1D_float( "Pass2_input_blue.arr", 225 );

    float[225] outputRed;
    float[225] outputGreen;
    float[225] outputBlue;

    work pop 1
	{
	    pop();
	    
	    // for each pixel of OUTPUT (center region)
	    for( int y = 1; y < height - 1; ++y )
		{
		    for( int x = 1; x < width - 1; ++x )
			{
			    int targetIndex = y * width + x;

			    float rC = inputRed[ targetIndex ];
			    float gC = inputGreen[ targetIndex ];
			    float bC = inputBlue[ targetIndex ];

			    float rS = inputRed[ targetIndex - width ];
			    float gS = inputGreen[ targetIndex - width ];
			    float bS = inputBlue[ targetIndex - width ];

			    float rN = inputRed[ targetIndex + width ];
			    float gN = inputGreen[ targetIndex + width ];
			    float bN = inputBlue[ targetIndex + width ];

			    float rW = inputRed[ targetIndex - 1 ];
			    float gW = inputGreen[ targetIndex - 1 ];
			    float bW = inputBlue[ targetIndex - 1 ];

			    float rE = inputRed[ targetIndex + 1 ];
			    float gE = inputGreen[ targetIndex + 1 ];
			    float bE = inputBlue[ targetIndex + 1 ];

			    outputRed[ targetIndex ] = 0.5 * rC + 0.125 * rS + 0.125 * rN + 0.125 * rW + 0.125 * rE;
			    outputGreen[ targetIndex ] = 0.5 * gC + 0.125 * gS + 0.125 * gN + 0.125 * gW + 0.125 * gE;
			    outputBlue[ targetIndex ] = 0.5 * bC + 0.125 * bS + 0.125 * bN + 0.125 * bW + 0.125 * bE;
			}
		}

	    for( int y = 0; y < height; ++y )
		{
		    for( int x = 0; x < width; ++x )
			{
			    int index = y * width + x;
			    print( "x = " + x );
			    print( "y = " + y );
			    print( "r = " + outputRed[ index ] );
			    print( "g = " + outputGreen[ index ] );
			    print( "b = " + outputBlue[ index ] );
			}
		}
	}
}



int->void splitjoin Distrib
{
    split duplicate;

    add GaussianBlurrer( 15, 15 );

    join roundrobin( 0 );
}

void->void pipeline Pass2_GaussianBlur
{
    add Input();
    add Distrib();
}
