// Takes a Vertex in and "shades" it

Vertex->Vertex filter VertexShader( int id )
{
    Matrix4f modelView;
    Matrix4f projection;

    // not actual state, but avoids structure-initialization overhead
    // to put as fields rather than locals
    Vertex vIn, vOut;

    init
	{
	    // modelview matrix, identity for now
	    modelView.m[0] = 1;
	    modelView.m[1] = 0;
	    modelView.m[2] = 0;
	    modelView.m[3] = 0;

	    modelView.m[4] = 0;
	    modelView.m[5] = 1;
	    modelView.m[6] = 0;
	    modelView.m[7] = 0;

	    modelView.m[8] = 0;
	    modelView.m[9] = 0;
	    modelView.m[10] = 1;
	    modelView.m[11] = 0;

	    modelView.m[12] = 0;
	    modelView.m[13] = 0;
	    modelView.m[14] = -5;
	    modelView.m[15] = 1;

	    // normal matrix is just top-left 3x3 ^-T, doesn't matter which order you do it in

	    // nominal projection matrix
	    // fov = 50 degrees, 1:1 aspect ratio, near = 1, far = 10
	    // gluPerspective( 50, 1, 1, 10 );
	    projection.m[0] = 2.144507;
	    projection.m[1] = 0;
	    projection.m[2] = 0;
	    projection.m[3] = 0;

	    projection.m[4] = 0;
	    projection.m[5] = 2.144507;
	    projection.m[6] = 0;
	    projection.m[7] = 0;

	    projection.m[8] = 0;
	    projection.m[9] = 0;
	    projection.m[10] = -1.022222;
	    projection.m[11] = -1;

	    projection.m[12] = 0;
	    projection.m[13] = 0;
	    projection.m[14] = -2.022222;
	    projection.m[15] = 0;
	}

    // work pop 10 push 7
    work pop 1 push 1
	{
	    vIn = pop();

	    float worldX = vIn.position.x;
	    float worldY = vIn.position.y;
	    float worldZ = vIn.position.z;
	    float worldW = vIn.position.w;

	    // "ftransform()"

	    //computeEyeSpace();
            // inlined to avoid having multiple return values:
	    float eyeX = modelView.m[0] * worldX + modelView.m[4] * worldY + modelView.m[8]  * worldZ + modelView.m[12] * worldW;
	    float eyeY = modelView.m[1] * worldX + modelView.m[5] * worldY + modelView.m[9]  * worldZ + modelView.m[13] * worldW;
	    float eyeZ = modelView.m[2] * worldX + modelView.m[6] * worldY + modelView.m[10] * worldZ + modelView.m[14] * worldW;
	    float eyeW = modelView.m[3] * worldX + modelView.m[7] * worldY + modelView.m[11] * worldZ + modelView.m[15] * worldW;

	    //computeClipSpace();
            // inlined to avoid having multiple return values:
	    float clipX = projection.m[0] * eyeX + projection.m[4] * eyeY + projection.m[8]  * eyeZ + projection.m[12] * eyeW;
	    float clipY = projection.m[1] * eyeX + projection.m[5] * eyeY + projection.m[9]  * eyeZ + projection.m[13] * eyeW;
	    float clipZ = projection.m[2] * eyeX + projection.m[6] * eyeY + projection.m[10] * eyeZ + projection.m[14] * eyeW;
	    float clipW = projection.m[3] * eyeX + projection.m[7] * eyeY + projection.m[11] * eyeZ + projection.m[15] * eyeW;

	    vOut.position.x = clipX;
	    vOut.position.y = clipY;
	    vOut.position.z = clipZ;
	    vOut.position.w = clipW;

	    // TODO: compute inverse transpose, but for now, just I
	    vOut.normal.x = vIn.normal.x;
	    vOut.normal.y = vIn.normal.y;
	    vOut.normal.z = vIn.normal.z;

	    vOut.color.r = vIn.color.r;
	    vOut.color.g = vIn.color.g;
	    vOut.color.b = vIn.color.b;

	    // custom code
	    vOut.texCoord0.x = vIn.position.x;
	    vOut.texCoord0.y = vIn.position.y;
	    vOut.texCoord0.z = vIn.position.z;

	    push( vOut );
	}
}
