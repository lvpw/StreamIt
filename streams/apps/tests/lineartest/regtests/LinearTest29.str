/** 
 * Test out doing upsampling/downsampling with FIR filter
 * to show that the new 
 **/
void->void pipeline LinearTest29 {
  add FloatSource();
  add Expander(2);
  add MockFIRFilter(5,2);
  add Compressor(3);
  add FloatSink();
}

void->float stateful filter FloatSource {
  float x;
  init {
    x = 0;
  }
  work push 1 {
    push(x);
    x = x + 1;
  }
}

float->void filter FloatSink {
  work pop 1 {
    println(pop());
  }
}

/** This is a mock up of an FIR filter. N is where the counting starts from **/
float->float filter MockFIRFilter(int size, int N) {
  float[size] weights;
  init {
    for (int i=0; i<size; i++) {
      weights[i] = N + i;
    }
  }

  work pop 1 peek size push 1 {
    float sum = 0;
    /** do the MAC like normal **/
    for (int i=0; i<size; i++) {
      sum = sum + (peek(i) * weights[i]);
    }
    push(sum);
    pop();
  }
}

/** Expander (add L-1 zeros for every 1 input) **/
float->float filter Expander(int L) {
  work pop 1 peek 1 push L {
    push(pop());
    for (int i=0; i<(L-1); i++) {
      push(0);
    }
  }
}

/** Compressor (drop every M-1 values for every one pushed **/
float->float filter Compressor(int M) {
  work pop M peek M push 1 {
    push(pop());
    for (int i=0; i<(M-1); i++) {
      pop();
    }
  }
}
