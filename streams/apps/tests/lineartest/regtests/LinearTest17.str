/** 
 * Test out combining splitjoins, with multiple split 
 * joins in weighted roundrobin fashion.
 **/
void->void pipeline LinearTest17 {
  add FloatSource();
  add LinearSJ();
  add FloatSink();
}

void->float stateful filter FloatSource {
  float x;
  init {
    x = 0;
  }
  work push 1 {
    push(x);
    x = x + 1;
  }
}

float->void filter FloatSink {
  work pop 1 {
    println(pop());
  }
}

/** A linear split join to test combination with different round robin weightings. **/
float->float splitjoin LinearSJ {
  split roundrobin(1,1,1);
  add FloatFilter1();
  add FloatFilter2();
  add FloatFilter3();
  join roundrobin(3,6,1);
}

/** filter that computes [[1 2 3][4 5 6][7 8 9]] **/
float->float filter FloatFilter1 {
  work pop 3 push 3 {
    float t1 = pop();
    float t2 = pop();
    float t3 = pop();
    push(9*t1  + 6*t2 + 3*t3);
    push(8*t1  + 5*t2 + 2*t3);
    push(7*t1  + 4*t2 + 1*t3);
  }
}

/** filter that computes [[10 11]] **/
float->float filter FloatFilter2 {
  work pop 1 push 2 {
    float t1 = pop();
    push(t1*11);
    push(t1*10);
  }
}

/** filter that computes [[12][13][14]] **/
float->float filter FloatFilter3 {
  work pop 3 push 1 {
    float t1 = pop();
    float t2 = pop();
    float t3 = pop();
    push(t3*12 + t2*13 + t1*14);
  }
}
