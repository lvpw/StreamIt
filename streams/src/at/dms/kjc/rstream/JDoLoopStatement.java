/*
 * Copyright (C) 1990-2001 DMS Decision Management Systems Ges.m.b.H.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id: JDoLoopStatement.java,v 1.9 2006-03-24 15:54:49 dimock Exp $
 */

package at.dms.kjc.rstream;

import at.dms.kjc.Constants;
import at.dms.kjc.JAssignmentExpression;
import at.dms.kjc.JCompoundAssignmentExpression;
import at.dms.kjc.JExpression;
import at.dms.kjc.JExpressionStatement;
import at.dms.kjc.JForStatement;
import at.dms.kjc.JIntLiteral;
import at.dms.kjc.JLocalVariable;
import at.dms.kjc.JLocalVariableExpression;
import at.dms.kjc.JRelationalExpression;
import at.dms.kjc.JStatement;
import at.dms.util.Utils;


/**
 * An SIR node representing a do loop.  It is equivalent to a for loop with:
 * for (*type_of_induction* *induction* = *initExpr*; *induction* < *cond*; *induction* += incr) *body*.
 * The resulting for loop generated by this class will be semantically equal.
 *
 * Note this class is not visited by Kjc visitors!
 *
 * @author Michael Gordon
 * 
 */
public class JDoLoopStatement extends JForStatement
{
    //the inductin var of the loop
    private JLocalVariable induction;
    //the value the induction var is initialized to 
    private JExpression initValue;
    //the increment value 
    private JExpression incrValue;
    //the conditional *value*, ind < condValue
    private JExpression condValue;
    //true if this counts up
    private boolean countUp;
    //true if the induction is init'ed to zero
    private boolean zeroInit;
  
    /** construct a new JDoLoopStatement, see the class comment for 
        semantics. 
        for (*type_of_induction* *induction* = *initExpr*; *induction* < *cond*; *induction* += incr) *body*.
        *countUp* is true if this loop increments the induction var **/
    public JDoLoopStatement (JLocalVariable induction,
                             JExpression initVal,
                             JExpression condVal,
                             JExpression incrVal,
                             JStatement body,
                             boolean countUp)
    {
        //try to construct a legal for loop that will represent this do loop
        super(null, new JExpressionStatement(null, 
                                             new JAssignmentExpression
                                             (null, 
                                              new JLocalVariableExpression(null, induction),
                                              initVal), 
                                             null),
              new JRelationalExpression(null,
                                        Constants.OPE_LT,
                                        new JLocalVariableExpression(null, induction),
                                        condVal),
              new JExpressionStatement(null,
                                       new JCompoundAssignmentExpression
                                       (null, OPE_PLUS,
                                        new JLocalVariableExpression(null, induction),
                                        incrVal), 
                                       null),
              body,
              null);
    
        assert countUp;
        //set the state of the loop
        this.induction = induction;
        this.initValue = initVal;
        this.incrValue = incrVal;
        this.condValue = condVal;
        this.countUp = countUp;
        this.zeroInit =  (Utils.passThruParens(initVal) instanceof JIntLiteral &&
                          ((JIntLiteral)Utils.passThruParens(initVal)).intValue() == 0);
    
    }
    
    /** construct a new JDoLoopStatement, see the class comment for 
        semantics. 
        for (*type_of_induction* *induction* = *initExpr*; *induction* < *cond*; *induction* += incr) *body*.
        *countUp* is true if this loop increments the induction var
        *zeroInit* is true if the induction var is initialized to zero
        **/
    public JDoLoopStatement (JLocalVariable induction,
                             JExpression initVal,
                             JExpression condVal,
                             JExpression incrVal,
                             JStatement body,
                             boolean countUp,
                             boolean zeroInit)  
    {
        //try to construct a legal for loop that will represent this do loop
        super(null, new JExpressionStatement(null, 
                                             new JAssignmentExpression
                                             (null, 
                                              new JLocalVariableExpression(null, induction),
                                              initVal), 
                                             null),
              new JRelationalExpression(null,
                                        Constants.OPE_LT,
                                        new JLocalVariableExpression(null, induction),
                                        condVal),
              new JExpressionStatement(null,
                                       new JCompoundAssignmentExpression
                                       (null, OPE_PLUS,
                                        new JLocalVariableExpression(null, induction),
                                        incrVal), 
                                       null),
              body,
              null);
    
        this.induction = induction;
        this.initValue = initVal;
        this.incrValue = incrVal;
        this.condValue = condVal;
        this.countUp = countUp;
        this.zeroInit = zeroInit;
    }
    /** return the value that the induction var is compared to in : *induction* < *cond* */
    public JExpression getCondValue() 
    {
        return condValue;
    }

    /** return the induction var of this loop **/
    public JLocalVariable getInduction() 
    {
        return induction;
    }

    /** return true if this loop increments the induction var **/
    public boolean countUp() 
    {
        return true;
    }

    /** return true if this loop initializes the induction to zero **/
    public boolean zeroInit() 
    {
        return true;
    }
    
    /** return the value that the induction var is initialized to **/
    public JExpression getInitValue() 
    {
        return initValue;
    }
    
    /** return the value that is added to the induction var for each iterations **/
    public JExpression getIncrValue() 
    {
        return incrValue;
    }

    /** return true if the init, cond, and incr values are int literals at compile time **/
    public boolean staticBounds() 
    {
        return (Utils.passThruParens(initValue) instanceof JIntLiteral &&
                Utils.passThruParens(condValue) instanceof JIntLiteral &&
                Utils.passThruParens(incrValue) instanceof JIntLiteral); 
    }

    /** return the integer value of the increment value, if not a int literal, fail **/
    public int getIncrInt() 
    {
        assert Utils.passThruParens(incrValue) instanceof JIntLiteral;
    
        return ((JIntLiteral)Utils.passThruParens(incrValue)).intValue();
    }
    
    /** return the trip count of the loop, for this function to pass, the loop
        must have static bounds **/
    public int getTripCount() 
    {
        assert staticBounds();
    
        int init, cond, incr;
    
        init = ((JIntLiteral)Utils.passThruParens(initValue)).intValue();
        cond = ((JIntLiteral)Utils.passThruParens(condValue)).intValue();
        incr = ((JIntLiteral)Utils.passThruParens(incrValue)).intValue();
    
        int tripCount = (int)java.lang.Math.round((((double)(cond  - init) / (double)incr)));
    
        if (tripCount < 0)
            return 0;
    
        return tripCount;
    }
    

    
    //for cloning only
    protected JDoLoopStatement() 
    {
    
    }
    
    /** THE FOLLOWING SECTION IS AUTO-GENERATED CLONING CODE - DO NOT MODIFY! */

    /** Returns a deep clone of this object. */
    @Override
	public Object deepClone() {
        at.dms.kjc.rstream.JDoLoopStatement other = new at.dms.kjc.rstream.JDoLoopStatement();
        at.dms.kjc.AutoCloner.register(this, other);
        deepCloneInto(other);
        return other;
    }

    /** Clones all fields of this into <pre>other</pre> */
    protected void deepCloneInto(at.dms.kjc.rstream.JDoLoopStatement other) {
        super.deepCloneInto(other);
        other.induction = (at.dms.kjc.JLocalVariable)at.dms.kjc.AutoCloner.cloneToplevel(this.induction);
        other.initValue = (at.dms.kjc.JExpression)at.dms.kjc.AutoCloner.cloneToplevel(this.initValue);
        other.incrValue = (at.dms.kjc.JExpression)at.dms.kjc.AutoCloner.cloneToplevel(this.incrValue);
        other.condValue = (at.dms.kjc.JExpression)at.dms.kjc.AutoCloner.cloneToplevel(this.condValue);
        other.countUp = this.countUp;
        other.zeroInit = this.zeroInit;
    }

    /** THE PRECEDING SECTION IS AUTO-GENERATED CLONING CODE - DO NOT MODIFY! */
}
