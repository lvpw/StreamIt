"abstract"		{ return TOKEN_LITERAL_abstract; }
"boolean"		{ return TOKEN_LITERAL_boolean; }
"break"		{ return TOKEN_LITERAL_break; }
"byte"		{ return TOKEN_LITERAL_byte; }
"case"		{ return TOKEN_LITERAL_case; }
"catch"		{ return TOKEN_LITERAL_catch; }
"char"		{ return TOKEN_LITERAL_char; }
"class"		{ return TOKEN_LITERAL_class; }
"const"		{ return TOKEN_LITERAL_const; }
"continue"		{ return TOKEN_LITERAL_continue; }
"default"		{ return TOKEN_LITERAL_default; }
"do"		{ return TOKEN_LITERAL_do; }
"double"		{ return TOKEN_LITERAL_double; }
"else"		{ return TOKEN_LITERAL_else; }
"extends"		{ return TOKEN_LITERAL_extends; }
"false"		{ return TOKEN_LITERAL_false; }
"feedback"		{ return TOKEN_LITERAL_feedback; }
"filter"		{ return TOKEN_LITERAL_filter; }
"final"		{ return TOKEN_LITERAL_final; }
"finally"		{ return TOKEN_LITERAL_finally; }
"float"		{ return TOKEN_LITERAL_float; }
"for"		{ return TOKEN_LITERAL_for; }
"goto"		{ return TOKEN_LITERAL_goto; }
"if"		{ return TOKEN_LITERAL_if; }
"implements"		{ return TOKEN_LITERAL_implements; }
"import"		{ return TOKEN_LITERAL_import; }
"instanceof"		{ return TOKEN_LITERAL_instanceof; }
"int"		{ return TOKEN_LITERAL_int; }
"interface"		{ return TOKEN_LITERAL_interface; }
"long"		{ return TOKEN_LITERAL_long; }
"native"		{ return TOKEN_LITERAL_native; }
"new"		{ return TOKEN_LITERAL_new; }
"null"		{ return TOKEN_LITERAL_null; }
"package"		{ return TOKEN_LITERAL_package; }
"pipeline"		{ return TOKEN_LITERAL_pipeline; }
"private"		{ return TOKEN_LITERAL_private; }
"protected"		{ return TOKEN_LITERAL_protected; }
"public"		{ return TOKEN_LITERAL_public; }
"return"		{ return TOKEN_LITERAL_return; }
"short"		{ return TOKEN_LITERAL_short; }
"splitjoin"		{ return TOKEN_LITERAL_splitjoin; }
"static"		{ return TOKEN_LITERAL_static; }
"strictfp"		{ return TOKEN_LITERAL_strictfp; }
"super"		{ return TOKEN_LITERAL_super; }
"switch"		{ return TOKEN_LITERAL_switch; }
"synchronized"		{ return TOKEN_LITERAL_synchronized; }
"this"		{ return TOKEN_LITERAL_this; }
"throw"		{ return TOKEN_LITERAL_throw; }
"throws"		{ return TOKEN_LITERAL_throws; }
"transient"		{ return TOKEN_LITERAL_transient; }
"true"		{ return TOKEN_LITERAL_true; }
"try"		{ return TOKEN_LITERAL_try; }
"void"		{ return TOKEN_LITERAL_void; }
"volatile"		{ return TOKEN_LITERAL_volatile; }
"while"		{ return TOKEN_LITERAL_while; }
"="		{ return TOKEN_ASSIGN; }
"&"		{ return TOKEN_BAND; }
"&="		{ return TOKEN_BAND_ASSIGN; }
"~"		{ return TOKEN_BNOT; }
"|"		{ return TOKEN_BOR; }
"|="		{ return TOKEN_BOR_ASSIGN; }
">>>"		{ return TOKEN_BSR; }
">>>="		{ return TOKEN_BSR_ASSIGN; }
"\^"		{ return TOKEN_BXOR; }
"\^="		{ return TOKEN_BXOR_ASSIGN; }
":"		{ return TOKEN_COLON; }
","		{ return TOKEN_COMMA; }
"--"		{ return TOKEN_DEC; }
"."		{ return TOKEN_DOT; }
"=="		{ return TOKEN_EQUAL; }
">="		{ return TOKEN_GE; }
">"		{ return TOKEN_GT; }
"++"		{ return TOKEN_INC; }
"&&"		{ return TOKEN_LAND; }
"["		{ return TOKEN_LBRACK; }
"{"		{ return TOKEN_LCURLY; }
"<="		{ return TOKEN_LE; }
"!"		{ return TOKEN_LNOT; }
"||"		{ return TOKEN_LOR; }
"("		{ return TOKEN_LPAREN; }
"<"		{ return TOKEN_LT; }
"-"		{ return TOKEN_MINUS; }
"-="		{ return TOKEN_MINUS_ASSIGN; }
"!="		{ return TOKEN_NOT_EQUAL; }
"%"		{ return TOKEN_PERCENT; }
"%="		{ return TOKEN_PERCENT_ASSIGN; }
"+"		{ return TOKEN_PLUS; }
"+="		{ return TOKEN_PLUS_ASSIGN; }
"?"		{ return TOKEN_QUESTION; }
"]"		{ return TOKEN_RBRACK; }
"}"		{ return TOKEN_RCURLY; }
")"		{ return TOKEN_RPAREN; }
";"		{ return TOKEN_SEMI; }
"<<"		{ return TOKEN_SL; }
"/"		{ return TOKEN_SLASH; }
"/="		{ return TOKEN_SLASH_ASSIGN; }
"<<="		{ return TOKEN_SL_ASSIGN; }
">>"		{ return TOKEN_SR; }
">>="		{ return TOKEN_SR_ASSIGN; }
"*"		{ return TOKEN_STAR; }
"*="		{ return TOKEN_STAR_ASSIGN; }
