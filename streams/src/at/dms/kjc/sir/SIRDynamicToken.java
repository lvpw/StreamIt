package at.dms.kjc.sir;

import at.dms.compiler.PositionedError;
import at.dms.kjc.AttributeVisitor;
import at.dms.kjc.CExpressionContext;
import at.dms.kjc.CStdType;
import at.dms.kjc.CType;
import at.dms.kjc.CodeSequence;
import at.dms.kjc.ExpressionVisitor;
import at.dms.kjc.JExpression;
import at.dms.kjc.KjcVisitor;
import at.dms.kjc.SLIRAttributeVisitor;
import at.dms.kjc.SLIRVisitor;

/**
 * This represents the dynmic token '*' as in an I/O rate declaration:
 * [2,*,*].  Note that this currently appears ONLY inside of a range
 * expression.  If a rate is declared as a plain '*', then it will be
 * converted (by the frontend) into [*,*,*].
 */
public class SIRDynamicToken extends JExpression {

    public SIRDynamicToken() {
        super();
    }

    /**
     * Ranges are for integers.
     */
    @Override
	public CType getType() {
        return CStdType.Integer;
    }
    
    /**
     * must be CStdType.Integer
     */
    @Override
	public void setType(CType type) {
        assert type == CStdType.Integer;
    }

    /**
     * Accepts the specified visitor.
     */
    @Override
	public void accept(KjcVisitor p) {
        if (p instanceof SLIRVisitor) {
            ((SLIRVisitor)p).visitDynamicToken(this);
        }
    }

    /**
     * Accepts the specified attribute visitor.
     * @param   p               the visitor
     */
    @Override
	public Object accept(AttributeVisitor p) {
        if (p instanceof SLIRAttributeVisitor) {
            return ((SLIRAttributeVisitor)p).visitDynamicToken(this);
        } else {
            return this;
        }
    }

    /**
     * Accepts the specified visitor
     * @param p the visitor
     * @param o object containing extra data to be passed to visitor
     * @return object containing data generated by visitor 
     */
    @Override
    public <S,T> S accept(ExpressionVisitor<S,T> p, T o) {
        return p.visitDynamicToken(this,o);
    }


    @Override
	public String toString() {
        return "*";
    }

    // ----------------------------------------------------------------------
    // Meaningless leftover interface from JExpression
    // ----------------------------------------------------------------------
    /**
     * Throws an exception (NOT SUPPORTED YET)
     */
    @Override
	public JExpression analyse(CExpressionContext context) throws PositionedError {
        at.dms.util.Utils.fail("Analysis of custom nodes not supported yet.");
        return this;
    }
    /**
     * Generates JVM bytecode to evaluate this expression.  NOT SUPPORTED YET.
     *
     * @param   code        the bytecode sequence
     * @param   discardValue    discard the result of the evaluation ?
     */
    @Override
	public void genCode(CodeSequence code, boolean discardValue) {
        at.dms.util.Utils.fail("Visitors to custom nodes not supported yet.");
    }
    // ----------------------------------------------------------------------


    /** THE FOLLOWING SECTION IS AUTO-GENERATED CLONING CODE - DO NOT MODIFY! */

    /** Returns a deep clone of this object. */
    @Override
	public Object deepClone() {
        at.dms.kjc.sir.SIRDynamicToken other = new at.dms.kjc.sir.SIRDynamicToken();
        at.dms.kjc.AutoCloner.register(this, other);
        deepCloneInto(other);
        return other;
    }

    /** Clones all fields of this into <pre>other</pre> */
    protected void deepCloneInto(at.dms.kjc.sir.SIRDynamicToken other) {
        super.deepCloneInto(other);
    }

    /** THE PRECEDING SECTION IS AUTO-GENERATED CLONING CODE - DO NOT MODIFY! */
}
