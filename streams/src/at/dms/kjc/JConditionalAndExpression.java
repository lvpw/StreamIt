/*
 * Copyright (C) 1990-2001 DMS Decision Management Systems Ges.m.b.H.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * $Id: JConditionalAndExpression.java,v 1.9 2006-10-27 20:48:54 dimock Exp $
 */

package at.dms.kjc;

import at.dms.compiler.PositionedError;
import at.dms.compiler.TokenReference;

/**
 * This class implements the conditional and operation
 */
public class JConditionalAndExpression extends JBinaryExpression {

    // ----------------------------------------------------------------------
    // CONSTRUCTORS
    // ----------------------------------------------------------------------

    protected JConditionalAndExpression() {} // for cloner only

    /**
     * Construct a node in the parsing tree
     * This method is directly called by the parser
     * @param   where       the line of this node in the source code
     * @param   left        the left operand
     * @param   right       the right operand
     */
    public JConditionalAndExpression(TokenReference where,
                                     JExpression left,
                                     JExpression right)
    {
        super(where, left, right);
    }

    // ----------------------------------------------------------------------
    // SEMANTIC ANALYSIS
    // ----------------------------------------------------------------------

    /**
     * Analyses the expression (semantically).
     * @param   context     the analysis context
     * @return  an equivalent, analysed expression
     * @exception   PositionedError the analysis detected an error
     */
    @Override
	public JExpression analyse(CExpressionContext context) throws PositionedError {
        left = left.analyse(context);
        right = right.analyse(context);

        CType   leftType = left.getType();
        CType   rightType = right.getType();

        check(context,
              leftType == CStdType.Boolean && rightType == CStdType.Boolean,
              KjcMessages.AND_BADTYPE, leftType, rightType);

        type = CStdType.Boolean;

        // JLS 15.28: Constant Expression ?
        if (left.isConstant() && right.isConstant()) {
            return new JBooleanLiteral(getTokenReference(), left.booleanValue() && right.booleanValue());
        } else {
            return this;
        }
    }

    @Override
	public JExpression constantFolding() {
        if (left instanceof JBooleanLiteral && right instanceof JBooleanLiteral)
            return new JBooleanLiteral(null, 
                                       ((JBooleanLiteral) left).booleanValue() && 
                                       ((JBooleanLiteral) right).booleanValue());
        else 
            return super.constantFolding();
    }

    // ----------------------------------------------------------------------
    // CODE GENERATION
    // ----------------------------------------------------------------------

    /**
     * Accepts the specified visitor
     * @param   p       the visitor
     */
    @Override
	public void accept(KjcVisitor p) {
        p.visitBinaryExpression(this, "&&", left, right);
    }

    /**
     * Accepts the specified attribute visitor
     * @param   p       the visitor
     */
    @Override
	public Object accept(AttributeVisitor p) {
        return    p.visitBinaryExpression(this, "&&", left, right);
    }

    /**
     * Accepts the specified visitor
     * @param p the visitor
     * @param o object containing extra data to be passed to visitor
     * @return object containing data generated by visitor 
     */
    @Override
    public <S,T> S accept(ExpressionVisitor<S,T> p, T o) {
        return p.visitConditionalAnd(this,o);
    }


    /**
     * Generates JVM bytecode to evaluate this expression.
     *
     * @param   code        the bytecode sequence
     * @param   discardValue    discard the result of the evaluation ?
     */
    @Override
	public void genCode(CodeSequence code, boolean discardValue) {
        genBooleanResultCode(code, discardValue);
    }

    /**
     * Optimize a bi-conditional expression
     */
    @Override
	protected void genBranch(JExpression left,
                             JExpression right,
                             boolean cond,
                             CodeSequence code,
                             CodeLabel label)
    {
        if (cond) {
            CodeLabel       skip = new CodeLabel();
            left.genBranch(false, code, skip);
            right.genBranch(true, code, label);
            code.plantLabel(skip);
        } else {
            left.genBranch(false, code, label);
            right.genBranch(false, code, label);
        }
    }

    /** THE FOLLOWING SECTION IS AUTO-GENERATED CLONING CODE - DO NOT MODIFY! */

    /** Returns a deep clone of this object. */
    @Override
	public Object deepClone() {
        at.dms.kjc.JConditionalAndExpression other = new at.dms.kjc.JConditionalAndExpression();
        at.dms.kjc.AutoCloner.register(this, other);
        deepCloneInto(other);
        return other;
    }

    /** Clones all fields of this into <pre>other</pre> */
    protected void deepCloneInto(at.dms.kjc.JConditionalAndExpression other) {
        super.deepCloneInto(other);
    }

    /** THE PRECEDING SECTION IS AUTO-GENERATED CLONING CODE - DO NOT MODIFY! */
}
